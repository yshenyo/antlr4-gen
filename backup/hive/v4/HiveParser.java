package com.thinice.bbc.core.parser.antlr.hive.v4;
// Generated from HiveParser.g4 by ANTLR 4.12.0
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class HiveParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.12.0", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		KW_ABORT=1, KW_ACTIVATE=2, KW_ACTIVE=3, KW_ADD=4, KW_ADMIN=5, KW_AFTER=6, 
		KW_ALL=7, KW_ALLOC_FRACTION=8, KW_ALTER=9, KW_ANALYZE=10, KW_AND=11, KW_ANTI=12, 
		KW_ANY=13, KW_APPLICATION=14, KW_ARCHIVE=15, KW_ARRAY=16, KW_AS=17, KW_ASC=18, 
		KW_AST=19, KW_AT=20, KW_AUTHORIZATION=21, KW_AUTOCOMMIT=22, KW_BATCH=23, 
		KW_BEFORE=24, KW_BETWEEN=25, KW_BIGINT=26, KW_BINARY=27, KW_BOOLEAN=28, 
		KW_BOTH=29, KW_BUCKET=30, KW_BUCKETS=31, KW_BY=32, KW_CACHE=33, KW_CASCADE=34, 
		KW_CASE=35, KW_CAST=36, KW_CBO=37, KW_CHANGE=38, KW_CHAR=39, KW_CHECK=40, 
		KW_CLUSTER=41, KW_CLUSTERED=42, KW_CLUSTERSTATUS=43, KW_COLLECTION=44, 
		KW_COLUMN=45, KW_COLUMNS=46, KW_COMMENT=47, KW_COMMIT=48, KW_COMPACT=49, 
		KW_COMPACTIONS=50, KW_COMPACT_ID=51, KW_COMPUTE=52, KW_CONCATENATE=53, 
		KW_CONF=54, KW_CONSTRAINT=55, KW_CONTINUE=56, KW_COST=57, KW_CREATE=58, 
		KW_CRON=59, KW_CROSS=60, KW_CUBE=61, KW_CURRENT=62, KW_CURRENT_DATE=63, 
		KW_CURRENT_TIMESTAMP=64, KW_CURSOR=65, KW_DATA=66, KW_DATABASE=67, KW_DATABASES=68, 
		KW_DATACONNECTOR=69, KW_DATACONNECTORS=70, KW_DATE=71, KW_DATETIME=72, 
		KW_DAY=73, KW_DAYOFWEEK=74, KW_DBPROPERTIES=75, KW_DCPROPERTIES=76, KW_DDL=77, 
		KW_DEBUG=78, KW_DECIMAL=79, KW_DEFAULT=80, KW_DEFERRED=81, KW_DEFINED=82, 
		KW_DELETE=83, KW_DELIMITED=84, KW_DEPENDENCY=85, KW_DESC=86, KW_DESCRIBE=87, 
		KW_DETAIL=88, KW_DIRECTORIES=89, KW_DIRECTORY=90, KW_DISABLE=91, KW_DISTINCT=92, 
		KW_DISTRIBUTE=93, KW_DISTRIBUTED=94, KW_DO=95, KW_DOUBLE=96, KW_DOW=97, 
		KW_DROP=98, KW_DUMP=99, KW_ELEM_TYPE=100, KW_ELSE=101, KW_ENABLE=102, 
		KW_END=103, KW_ENFORCED=104, KW_ESCAPED=105, KW_EVERY=106, KW_EXCEPT=107, 
		KW_EXCHANGE=108, KW_EXCLUSIVE=109, KW_EXECUTE=110, KW_EXECUTED=111, KW_EXISTS=112, 
		KW_EXPIRE_SNAPSHOTS=113, KW_EXPLAIN=114, KW_EXPORT=115, KW_EXPRESSION=116, 
		KW_EXTENDED=117, KW_EXTERNAL=118, KW_EXTRACT=119, KW_FALSE=120, KW_FETCH=121, 
		KW_FIELDS=122, KW_FILE=123, KW_FILEFORMAT=124, KW_FIRST=125, KW_FLOAT=126, 
		KW_FLOOR=127, KW_FOLLOWING=128, KW_FOR=129, KW_FORCE=130, KW_FOREIGN=131, 
		KW_FORMAT=132, KW_FORMATTED=133, KW_FROM=134, KW_FULL=135, KW_FUNCTION=136, 
		KW_FUNCTIONS=137, KW_GRANT=138, KW_GROUP=139, KW_GROUPING=140, KW_HAVING=141, 
		KW_HOLD_DDLTIME=142, KW_HOUR=143, KW_IDXPROPERTIES=144, KW_IF=145, KW_IGNORE=146, 
		KW_IMPORT=147, KW_IN=148, KW_INDEX=149, KW_INDEXES=150, KW_INNER=151, 
		KW_INPATH=152, KW_INPUTDRIVER=153, KW_INPUTFORMAT=154, KW_INSERT=155, 
		KW_INT=156, KW_INTERSECT=157, KW_INTERVAL=158, KW_INTO=159, KW_IS=160, 
		KW_ISOLATION=161, KW_ITEMS=162, KW_JAR=163, KW_JOIN=164, KW_JOINCOST=165, 
		KW_KEY=166, KW_KEYS=167, KW_KEY_TYPE=168, KW_KILL=169, KW_LAST=170, KW_LATERAL=171, 
		KW_LEADING=172, KW_LEFT=173, KW_LESS=174, KW_LEVEL=175, KW_LIKE=176, KW_LIMIT=177, 
		KW_LINES=178, KW_LOAD=179, KW_LOCAL=180, KW_LOCATION=181, KW_LOCK=182, 
		KW_LOCKS=183, KW_LOGICAL=184, KW_LONG=185, KW_MACRO=186, KW_MANAGED=187, 
		KW_MANAGEDLOCATION=188, KW_MANAGEMENT=189, KW_MAP=190, KW_MAPJOIN=191, 
		KW_MAPPING=192, KW_MATCHED=193, KW_MATERIALIZED=194, KW_MERGE=195, KW_METADATA=196, 
		KW_MINUS=197, KW_MINUTE=198, KW_MONTH=199, KW_MORE=200, KW_MOVE=201, KW_MSCK=202, 
		KW_NONE=203, KW_NORELY=204, KW_NOSCAN=205, KW_NOT=206, KW_NOVALIDATE=207, 
		KW_NO_DROP=208, KW_NULL=209, KW_NULLS=210, KW_OF=211, KW_OFFLINE=212, 
		KW_OFFSET=213, KW_ON=214, KW_ONLY=215, KW_OPERATOR=216, KW_OPTION=217, 
		KW_OR=218, KW_ORDER=219, KW_OUT=220, KW_OUTER=221, KW_OUTPUTDRIVER=222, 
		KW_OUTPUTFORMAT=223, KW_OVER=224, KW_OVERWRITE=225, KW_OWNER=226, KW_PARTITION=227, 
		KW_PARTITIONED=228, KW_PARTITIONS=229, KW_PATH=230, KW_PERCENT=231, KW_PKFK_JOIN=232, 
		KW_PLAN=233, KW_PLANS=234, KW_PLUS=235, KW_POOL=236, KW_PRECEDING=237, 
		KW_PRECISION=238, KW_PREPARE=239, KW_PRESERVE=240, KW_PRIMARY=241, KW_PRINCIPALS=242, 
		KW_PROCEDURE=243, KW_PROTECTION=244, KW_PURGE=245, KW_QUALIFY=246, KW_QUARTER=247, 
		KW_QUERY=248, KW_QUERY_PARALLELISM=249, KW_RANGE=250, KW_READ=251, KW_READONLY=252, 
		KW_READS=253, KW_REAL=254, KW_REBUILD=255, KW_RECORDREADER=256, KW_RECORDWRITER=257, 
		KW_REDUCE=258, KW_REFERENCES=259, KW_REGEXP=260, KW_RELOAD=261, KW_RELY=262, 
		KW_REMOTE=263, KW_RENAME=264, KW_REOPTIMIZATION=265, KW_REPAIR=266, KW_REPL=267, 
		KW_REPLACE=268, KW_REPLICATION=269, KW_RESOURCE=270, KW_RESPECT=271, KW_RESTRICT=272, 
		KW_REVOKE=273, KW_REWRITE=274, KW_RIGHT=275, KW_RLIKE=276, KW_ROLE=277, 
		KW_ROLES=278, KW_ROLLBACK=279, KW_ROLLUP=280, KW_ROW=281, KW_ROWS=282, 
		KW_SCHEDULED=283, KW_SCHEDULING_POLICY=284, KW_SCHEMA=285, KW_SCHEMAS=286, 
		KW_SECOND=287, KW_SELECT=288, KW_SEMI=289, KW_SERDE=290, KW_SERDEPROPERTIES=291, 
		KW_SERVER=292, KW_SET=293, KW_SETS=294, KW_SET_CURRENT_SNAPSHOT=295, KW_SHARED=296, 
		KW_SHOW=297, KW_SHOW_DATABASE=298, KW_SKEWED=299, KW_SMALLINT=300, KW_SNAPSHOT=301, 
		KW_SOME=302, KW_SORT=303, KW_SORTED=304, KW_SPEC=305, KW_SSL=306, KW_START=307, 
		KW_STATISTICS=308, KW_STATUS=309, KW_STORED=310, KW_STREAMTABLE=311, KW_STRING=312, 
		KW_STRUCT=313, KW_SUMMARY=314, KW_SYNC=315, KW_SYSTEM_TIME=316, KW_SYSTEM_VERSION=317, 
		KW_TABLE=318, KW_TABLES=319, KW_TABLESAMPLE=320, KW_TBLPROPERTIES=321, 
		KW_TEMPORARY=322, KW_TERMINATED=323, KW_THEN=324, KW_TIME=325, KW_TIMESTAMP=326, 
		KW_TIMESTAMPLOCALTZ=327, KW_TIMESTAMPTZ=328, KW_TINYINT=329, KW_TO=330, 
		KW_TOUCH=331, KW_TRAILING=332, KW_TRANSACTION=333, KW_TRANSACTIONAL=334, 
		KW_TRANSACTIONS=335, KW_TRANSFORM=336, KW_TRIGGER=337, KW_TRIM=338, KW_TRUE=339, 
		KW_TRUNCATE=340, KW_TYPE=341, KW_UNARCHIVE=342, KW_UNBOUNDED=343, KW_UNDO=344, 
		KW_UNION=345, KW_UNIONTYPE=346, KW_UNIQUE=347, KW_UNIQUEJOIN=348, KW_UNKNOWN=349, 
		KW_UNLOCK=350, KW_UNMANAGED=351, KW_UNSET=352, KW_UNSIGNED=353, KW_UPDATE=354, 
		KW_URI=355, KW_URL=356, KW_USE=357, KW_USER=358, KW_USING=359, KW_UTC=360, 
		KW_UTCTIMESTAMP=361, KW_VALIDATE=362, KW_VALUES=363, KW_VALUE_TYPE=364, 
		KW_VARCHAR=365, KW_VECTORIZATION=366, KW_VIEW=367, KW_VIEWS=368, KW_WAIT=369, 
		KW_WEEK=370, KW_WHEN=371, KW_WHERE=372, KW_WHILE=373, KW_WINDOW=374, KW_WITH=375, 
		KW_WITHIN=376, KW_WORK=377, KW_WORKLOAD=378, KW_WRITE=379, KW_YEAR=380, 
		KW_ZONE=381, DOT=382, COLON=383, COMMA=384, SEMICOLON=385, LPAREN=386, 
		RPAREN=387, LSQUARE=388, RSQUARE=389, LCURLY=390, RCURLY=391, EQUAL=392, 
		EQUAL_NS=393, NOTEQUAL=394, LESSTHANOREQUALTO=395, LESSTHAN=396, GREATERTHANOREQUALTO=397, 
		GREATERTHAN=398, DIVIDE=399, PLUS=400, MINUS=401, STAR=402, MOD=403, DIV=404, 
		AMPERSAND=405, TILDE=406, BITWISEOR=407, CONCATENATE=408, BITWISEXOR=409, 
		QUESTION=410, DOLLAR=411, StringLiteral=412, CharSetLiteral=413, IntegralLiteral=414, 
		NumberLiteral=415, ByteLengthLiteral=416, Number=417, Identifier=418, 
		CharSetName=419, WHITE_SPACE=420, LINE_COMMENT=421, QUERY_HINT=422, SHOW_HINT=423, 
		HIDDEN_HINT=424;
	public static final int
		RULE_statement = 0, RULE_explainStatement = 1, RULE_explainOption = 2, 
		RULE_vectorizationOnly = 3, RULE_vectorizatonDetail = 4, RULE_execStatement = 5, 
		RULE_loadStatement = 6, RULE_replicationClause = 7, RULE_exportStatement = 8, 
		RULE_importStatement = 9, RULE_replDumpStatement = 10, RULE_replDbPolicy = 11, 
		RULE_replLoadStatement = 12, RULE_replConfigs = 13, RULE_replConfigsList = 14, 
		RULE_replTableLevelPolicy = 15, RULE_replStatusStatement = 16, RULE_ddlStatement = 17, 
		RULE_ifExists = 18, RULE_restrictOrCascade = 19, RULE_ifNotExists = 20, 
		RULE_force = 21, RULE_rewriteEnabled = 22, RULE_rewriteDisabled = 23, 
		RULE_storedAsDirs = 24, RULE_orReplace = 25, RULE_createDatabaseStatement = 26, 
		RULE_dbLocation = 27, RULE_dbManagedLocation = 28, RULE_dbProperties = 29, 
		RULE_dbPropertiesList = 30, RULE_dbConnectorName = 31, RULE_switchDatabaseStatement = 32, 
		RULE_dropDatabaseStatement = 33, RULE_databaseComment = 34, RULE_truncateTableStatement = 35, 
		RULE_dropTableStatement = 36, RULE_inputFileFormat = 37, RULE_tabTypeExpr = 38, 
		RULE_partTypeExpr = 39, RULE_tabPartColTypeExpr = 40, RULE_descStatement = 41, 
		RULE_analyzeStatement = 42, RULE_from_in = 43, RULE_db_schema = 44, RULE_showStatement = 45, 
		RULE_showTablesFilterExpr = 46, RULE_lockStatement = 47, RULE_lockDatabase = 48, 
		RULE_lockMode = 49, RULE_unlockStatement = 50, RULE_unlockDatabase = 51, 
		RULE_createRoleStatement = 52, RULE_dropRoleStatement = 53, RULE_grantPrivileges = 54, 
		RULE_revokePrivileges = 55, RULE_grantRole = 56, RULE_revokeRole = 57, 
		RULE_showRoleGrants = 58, RULE_showRoles = 59, RULE_showCurrentRole = 60, 
		RULE_setRole = 61, RULE_showGrants = 62, RULE_showRolePrincipals = 63, 
		RULE_privilegeIncludeColObject = 64, RULE_privilegeObject = 65, RULE_privObject = 66, 
		RULE_privObjectCols = 67, RULE_privilegeList = 68, RULE_privlegeDef = 69, 
		RULE_privilegeType = 70, RULE_principalSpecification = 71, RULE_principalName = 72, 
		RULE_withGrantOption = 73, RULE_grantOptionFor = 74, RULE_adminOptionFor = 75, 
		RULE_withAdminOption = 76, RULE_metastoreCheck = 77, RULE_resourceList = 78, 
		RULE_resource = 79, RULE_resourceType = 80, RULE_createFunctionStatement = 81, 
		RULE_dropFunctionStatement = 82, RULE_reloadFunctionsStatement = 83, RULE_createMacroStatement = 84, 
		RULE_dropMacroStatement = 85, RULE_createViewStatement = 86, RULE_viewPartition = 87, 
		RULE_viewOrganization = 88, RULE_viewClusterSpec = 89, RULE_viewComplexSpec = 90, 
		RULE_viewDistSpec = 91, RULE_viewSortSpec = 92, RULE_dropViewStatement = 93, 
		RULE_createMaterializedViewStatement = 94, RULE_dropMaterializedViewStatement = 95, 
		RULE_createScheduledQueryStatement = 96, RULE_dropScheduledQueryStatement = 97, 
		RULE_alterScheduledQueryStatement = 98, RULE_alterScheduledQueryChange = 99, 
		RULE_scheduleSpec = 100, RULE_executedAsSpec = 101, RULE_definedAsSpec = 102, 
		RULE_showFunctionIdentifier = 103, RULE_showStmtIdentifier = 104, RULE_tableComment = 105, 
		RULE_createTablePartitionSpec = 106, RULE_createTablePartitionColumnTypeSpec = 107, 
		RULE_createTablePartitionColumnSpec = 108, RULE_partitionTransformSpec = 109, 
		RULE_columnNameTransformConstraint = 110, RULE_partitionTransformType = 111, 
		RULE_tableBuckets = 112, RULE_tableImplBuckets = 113, RULE_tableSkewed = 114, 
		RULE_rowFormat = 115, RULE_recordReader = 116, RULE_recordWriter = 117, 
		RULE_rowFormatSerde = 118, RULE_rowFormatDelimited = 119, RULE_tableRowFormat = 120, 
		RULE_tablePropertiesPrefixed = 121, RULE_tableProperties = 122, RULE_tablePropertiesList = 123, 
		RULE_keyValueProperty = 124, RULE_keyProperty = 125, RULE_tableRowFormatFieldIdentifier = 126, 
		RULE_tableRowFormatCollItemsIdentifier = 127, RULE_tableRowFormatMapKeysIdentifier = 128, 
		RULE_tableRowFormatLinesIdentifier = 129, RULE_tableRowNullFormat = 130, 
		RULE_tableFileFormat = 131, RULE_tableLocation = 132, RULE_columnNameTypeList = 133, 
		RULE_columnNameTypeOrConstraintList = 134, RULE_columnNameColonTypeList = 135, 
		RULE_columnNameList = 136, RULE_columnName = 137, RULE_extColumnName = 138, 
		RULE_columnNameOrderList = 139, RULE_columnParenthesesList = 140, RULE_enableValidateSpecification = 141, 
		RULE_enableSpecification = 142, RULE_validateSpecification = 143, RULE_enforcedSpecification = 144, 
		RULE_relySpecification = 145, RULE_createConstraint = 146, RULE_alterConstraintWithName = 147, 
		RULE_tableLevelConstraint = 148, RULE_pkUkConstraint = 149, RULE_checkConstraint = 150, 
		RULE_createForeignKey = 151, RULE_alterForeignKeyWithName = 152, RULE_skewedValueElement = 153, 
		RULE_skewedColumnValuePairList = 154, RULE_skewedColumnValuePair = 155, 
		RULE_skewedColumnValues = 156, RULE_skewedColumnValue = 157, RULE_skewedValueLocationElement = 158, 
		RULE_orderSpecification = 159, RULE_nullOrdering = 160, RULE_columnNameOrder = 161, 
		RULE_columnNameCommentList = 162, RULE_columnNameComment = 163, RULE_orderSpecificationRewrite = 164, 
		RULE_columnRefOrder = 165, RULE_columnNameType = 166, RULE_columnNameTypeOrConstraint = 167, 
		RULE_tableConstraint = 168, RULE_columnNameTypeConstraint = 169, RULE_columnConstraint = 170, 
		RULE_foreignKeyConstraint = 171, RULE_colConstraint = 172, RULE_alterColumnConstraint = 173, 
		RULE_alterForeignKeyConstraint = 174, RULE_alterColConstraint = 175, RULE_columnConstraintType = 176, 
		RULE_defaultVal = 177, RULE_tableConstraintType = 178, RULE_constraintOptsCreate = 179, 
		RULE_constraintOptsAlter = 180, RULE_columnNameColonType = 181, RULE_colType = 182, 
		RULE_colTypeList = 183, RULE_type = 184, RULE_primitiveType = 185, RULE_listType = 186, 
		RULE_structType = 187, RULE_mapType = 188, RULE_unionType = 189, RULE_setOperator = 190, 
		RULE_queryStatementExpression = 191, RULE_queryStatementExpressionBody = 192, 
		RULE_withClause = 193, RULE_cteStatement = 194, RULE_fromStatement = 195, 
		RULE_singleFromStatement = 196, RULE_regularBody = 197, RULE_atomSelectStatement = 198, 
		RULE_selectStatement = 199, RULE_setOpSelectStatement = 200, RULE_selectStatementWithCTE = 201, 
		RULE_body = 202, RULE_insertClause = 203, RULE_destination = 204, RULE_limitClause = 205, 
		RULE_deleteStatement = 206, RULE_columnAssignmentClause = 207, RULE_precedencePlusExpressionOrDefault = 208, 
		RULE_setColumnsClause = 209, RULE_updateStatement = 210, RULE_sqlTransactionStatement = 211, 
		RULE_startTransactionStatement = 212, RULE_transactionMode = 213, RULE_transactionAccessMode = 214, 
		RULE_isolationLevel = 215, RULE_levelOfIsolation = 216, RULE_commitStatement = 217, 
		RULE_rollbackStatement = 218, RULE_setAutoCommitStatement = 219, RULE_abortTransactionStatement = 220, 
		RULE_abortCompactionStatement = 221, RULE_mergeStatement = 222, RULE_whenClauses = 223, 
		RULE_whenNotMatchedClause = 224, RULE_whenMatchedAndClause = 225, RULE_whenMatchedThenClause = 226, 
		RULE_updateOrDelete = 227, RULE_killQueryStatement = 228, RULE_compactionId = 229, 
		RULE_compactionPool = 230, RULE_compactionType = 231, RULE_compactionStatus = 232, 
		RULE_alterStatement = 233, RULE_alterTableStatementSuffix = 234, RULE_alterTblPartitionStatementSuffix = 235, 
		RULE_alterStatementPartitionKeyType = 236, RULE_alterViewStatementSuffix = 237, 
		RULE_alterMaterializedViewStatementSuffix = 238, RULE_alterMaterializedViewSuffixRewrite = 239, 
		RULE_alterMaterializedViewSuffixRebuild = 240, RULE_alterDatabaseStatementSuffix = 241, 
		RULE_alterDatabaseSuffixProperties = 242, RULE_alterDatabaseSuffixSetOwner = 243, 
		RULE_alterDatabaseSuffixSetLocation = 244, RULE_alterDatabaseSuffixSetManagedLocation = 245, 
		RULE_alterStatementSuffixRename = 246, RULE_alterStatementSuffixAddCol = 247, 
		RULE_alterStatementSuffixAddConstraint = 248, RULE_alterStatementSuffixUpdateColumns = 249, 
		RULE_alterStatementSuffixDropConstraint = 250, RULE_alterStatementSuffixRenameCol = 251, 
		RULE_alterStatementSuffixUpdateStatsCol = 252, RULE_alterStatementSuffixUpdateStats = 253, 
		RULE_alterStatementChangeColPosition = 254, RULE_alterStatementSuffixAddPartitions = 255, 
		RULE_alterStatementSuffixAddPartitionsElement = 256, RULE_alterStatementSuffixTouch = 257, 
		RULE_alterStatementSuffixArchive = 258, RULE_alterStatementSuffixUnArchive = 259, 
		RULE_partitionLocation = 260, RULE_alterStatementSuffixDropPartitions = 261, 
		RULE_alterStatementSuffixProperties = 262, RULE_alterViewSuffixProperties = 263, 
		RULE_alterStatementSuffixSerdeProperties = 264, RULE_tablePartitionPrefix = 265, 
		RULE_alterStatementSuffixFileFormat = 266, RULE_alterStatementSuffixClusterbySortby = 267, 
		RULE_alterTblPartitionStatementSuffixSkewedLocation = 268, RULE_skewedLocations = 269, 
		RULE_skewedLocationsList = 270, RULE_skewedLocationMap = 271, RULE_alterStatementSuffixLocation = 272, 
		RULE_alterStatementSuffixSkewedby = 273, RULE_alterStatementSuffixExchangePartition = 274, 
		RULE_alterStatementSuffixRenamePart = 275, RULE_alterStatementSuffixStatsPart = 276, 
		RULE_alterStatementSuffixMergeFiles = 277, RULE_alterStatementSuffixBucketNum = 278, 
		RULE_blocking = 279, RULE_compactPool = 280, RULE_alterStatementSuffixCompact = 281, 
		RULE_alterStatementSuffixSetOwner = 282, RULE_alterStatementSuffixSetPartSpec = 283, 
		RULE_alterStatementSuffixExecute = 284, RULE_fileFormat = 285, RULE_alterDataConnectorStatementSuffix = 286, 
		RULE_alterDataConnectorSuffixProperties = 287, RULE_alterDataConnectorSuffixSetOwner = 288, 
		RULE_alterDataConnectorSuffixSetUrl = 289, RULE_likeTableOrFile = 290, 
		RULE_createTableStatement = 291, RULE_createDataConnectorStatement = 292, 
		RULE_dataConnectorComment = 293, RULE_dataConnectorUrl = 294, RULE_dataConnectorType = 295, 
		RULE_dcProperties = 296, RULE_dropDataConnectorStatement = 297, RULE_tableAllColumns = 298, 
		RULE_tableOrColumn = 299, RULE_defaultValue = 300, RULE_expressionList = 301, 
		RULE_aliasList = 302, RULE_fromClause = 303, RULE_fromSource = 304, RULE_atomjoinSource = 305, 
		RULE_joinSource = 306, RULE_joinSourcePart = 307, RULE_uniqueJoinSource = 308, 
		RULE_uniqueJoinExpr = 309, RULE_uniqueJoinToken = 310, RULE_joinToken = 311, 
		RULE_lateralView = 312, RULE_tableAlias = 313, RULE_tableBucketSample = 314, 
		RULE_splitSample = 315, RULE_tableSample = 316, RULE_tableSource = 317, 
		RULE_asOfClause = 318, RULE_uniqueJoinTableSource = 319, RULE_tableName = 320, 
		RULE_viewName = 321, RULE_subQuerySource = 322, RULE_partitioningSpec = 323, 
		RULE_partitionTableFunctionSource = 324, RULE_partitionedTableFunction = 325, 
		RULE_whereClause = 326, RULE_searchCondition = 327, RULE_valuesSource = 328, 
		RULE_valuesClause = 329, RULE_valuesTableConstructor = 330, RULE_valueRowConstructor = 331, 
		RULE_firstValueRowConstructor = 332, RULE_virtualTableSource = 333, RULE_selectClause = 334, 
		RULE_all_distinct = 335, RULE_selectList = 336, RULE_selectTrfmClause = 337, 
		RULE_selectItem = 338, RULE_trfmClause = 339, RULE_selectExpression = 340, 
		RULE_selectExpressionList = 341, RULE_window_clause = 342, RULE_window_defn = 343, 
		RULE_window_specification = 344, RULE_window_frame = 345, RULE_window_range_expression = 346, 
		RULE_window_value_expression = 347, RULE_window_frame_start_boundary = 348, 
		RULE_window_frame_boundary = 349, RULE_groupByClause = 350, RULE_groupby_expression = 351, 
		RULE_groupByEmpty = 352, RULE_rollupStandard = 353, RULE_rollupOldSyntax = 354, 
		RULE_groupingSetExpression = 355, RULE_groupingSetExpressionMultiple = 356, 
		RULE_groupingExpressionSingle = 357, RULE_havingClause = 358, RULE_qualifyClause = 359, 
		RULE_havingCondition = 360, RULE_expressionsInParenthesis = 361, RULE_expressionsNotInParenthesis = 362, 
		RULE_expressionPart = 363, RULE_expressionOrDefault = 364, RULE_firstExpressionsWithAlias = 365, 
		RULE_expressionWithAlias = 366, RULE_expressions = 367, RULE_columnRefOrderInParenthesis = 368, 
		RULE_columnRefOrderNotInParenthesis = 369, RULE_orderByClause = 370, RULE_clusterByClause = 371, 
		RULE_partitionByClause = 372, RULE_distributeByClause = 373, RULE_sortByClause = 374, 
		RULE_trimFunction = 375, RULE_function_ = 376, RULE_null_treatment = 377, 
		RULE_functionName = 378, RULE_castExpression = 379, RULE_caseExpression = 380, 
		RULE_whenExpression = 381, RULE_floorExpression = 382, RULE_floorDateQualifiers = 383, 
		RULE_extractExpression = 384, RULE_timeQualifiers = 385, RULE_constant = 386, 
		RULE_prepareStmtParam = 387, RULE_parameterIdx = 388, RULE_stringLiteralSequence = 389, 
		RULE_charSetStringLiteral = 390, RULE_dateLiteral = 391, RULE_timestampLiteral = 392, 
		RULE_timestampLocalTZLiteral = 393, RULE_intervalValue = 394, RULE_intervalLiteral = 395, 
		RULE_intervalExpression = 396, RULE_intervalQualifiers = 397, RULE_expression = 398, 
		RULE_atomExpression = 399, RULE_precedenceFieldExpression = 400, RULE_precedenceUnaryOperator = 401, 
		RULE_precedenceUnaryPrefixExpression = 402, RULE_precedenceBitwiseXorOperator = 403, 
		RULE_precedenceBitwiseXorExpression = 404, RULE_precedenceStarOperator = 405, 
		RULE_precedenceStarExpression = 406, RULE_precedencePlusOperator = 407, 
		RULE_precedencePlusExpression = 408, RULE_precedenceConcatenateOperator = 409, 
		RULE_precedenceConcatenateExpression = 410, RULE_precedenceAmpersandOperator = 411, 
		RULE_precedenceAmpersandExpression = 412, RULE_precedenceBitwiseOrOperator = 413, 
		RULE_precedenceBitwiseOrExpression = 414, RULE_precedenceRegexpOperator = 415, 
		RULE_precedenceSimilarOperator = 416, RULE_subQueryExpression = 417, RULE_precedenceSimilarExpression = 418, 
		RULE_precedenceSimilarExpressionMain = 419, RULE_precedenceSimilarExpressionPart = 420, 
		RULE_precedenceSimilarExpressionAtom = 421, RULE_precedenceSimilarExpressionQuantifierPredicate = 422, 
		RULE_quantifierType = 423, RULE_precedenceSimilarExpressionIn = 424, RULE_precedenceSimilarExpressionPartNot = 425, 
		RULE_precedenceDistinctOperator = 426, RULE_precedenceEqualOperator = 427, 
		RULE_precedenceEqualExpression = 428, RULE_isCondition = 429, RULE_precedenceUnarySuffixExpression = 430, 
		RULE_precedenceNotOperator = 431, RULE_precedenceNotExpression = 432, 
		RULE_precedenceAndOperator = 433, RULE_precedenceAndExpression = 434, 
		RULE_precedenceOrOperator = 435, RULE_precedenceOrExpression = 436, RULE_booleanValue = 437, 
		RULE_booleanValueTok = 438, RULE_tableOrPartition = 439, RULE_partitionSpec = 440, 
		RULE_partitionVal = 441, RULE_partitionSelectorSpec = 442, RULE_partitionSelectorVal = 443, 
		RULE_partitionSelectorOperator = 444, RULE_subQuerySelectorOperator = 445, 
		RULE_sysFuncNames = 446, RULE_descFuncNames = 447, RULE_id_ = 448, RULE_functionIdentifier = 449, 
		RULE_principalIdentifier = 450, RULE_nonReserved = 451, RULE_sql11ReservedKeywordsUsedAsFunctionName = 452, 
		RULE_hint = 453, RULE_hintList = 454, RULE_hintItem = 455, RULE_hintName = 456, 
		RULE_hintArgs = 457, RULE_hintArgName = 458, RULE_prepareStatement = 459, 
		RULE_executeStatement = 460, RULE_executeParamList = 461, RULE_resourcePlanDdlStatements = 462, 
		RULE_rpAssign = 463, RULE_rpAssignList = 464, RULE_rpUnassign = 465, RULE_rpUnassignList = 466, 
		RULE_createResourcePlanStatement = 467, RULE_withReplace = 468, RULE_activate = 469, 
		RULE_enable = 470, RULE_disable = 471, RULE_unmanaged = 472, RULE_alterResourcePlanStatement = 473, 
		RULE_globalWmStatement = 474, RULE_replaceResourcePlanStatement = 475, 
		RULE_dropResourcePlanStatement = 476, RULE_poolPath = 477, RULE_triggerExpression = 478, 
		RULE_triggerExpressionStandalone = 479, RULE_triggerOrExpression = 480, 
		RULE_triggerAndExpression = 481, RULE_triggerAtomExpression = 482, RULE_triggerLiteral = 483, 
		RULE_comparisionOperator = 484, RULE_triggerActionExpression = 485, RULE_triggerActionExpressionStandalone = 486, 
		RULE_createTriggerStatement = 487, RULE_alterTriggerStatement = 488, RULE_dropTriggerStatement = 489, 
		RULE_poolAssign = 490, RULE_poolAssignList = 491, RULE_createPoolStatement = 492, 
		RULE_alterPoolStatement = 493, RULE_dropPoolStatement = 494, RULE_createMappingStatement = 495, 
		RULE_alterMappingStatement = 496, RULE_dropMappingStatement = 497;
	private static String[] makeRuleNames() {
		return new String[] {
			"statement", "explainStatement", "explainOption", "vectorizationOnly", 
			"vectorizatonDetail", "execStatement", "loadStatement", "replicationClause", 
			"exportStatement", "importStatement", "replDumpStatement", "replDbPolicy", 
			"replLoadStatement", "replConfigs", "replConfigsList", "replTableLevelPolicy", 
			"replStatusStatement", "ddlStatement", "ifExists", "restrictOrCascade", 
			"ifNotExists", "force", "rewriteEnabled", "rewriteDisabled", "storedAsDirs", 
			"orReplace", "createDatabaseStatement", "dbLocation", "dbManagedLocation", 
			"dbProperties", "dbPropertiesList", "dbConnectorName", "switchDatabaseStatement", 
			"dropDatabaseStatement", "databaseComment", "truncateTableStatement", 
			"dropTableStatement", "inputFileFormat", "tabTypeExpr", "partTypeExpr", 
			"tabPartColTypeExpr", "descStatement", "analyzeStatement", "from_in", 
			"db_schema", "showStatement", "showTablesFilterExpr", "lockStatement", 
			"lockDatabase", "lockMode", "unlockStatement", "unlockDatabase", "createRoleStatement", 
			"dropRoleStatement", "grantPrivileges", "revokePrivileges", "grantRole", 
			"revokeRole", "showRoleGrants", "showRoles", "showCurrentRole", "setRole", 
			"showGrants", "showRolePrincipals", "privilegeIncludeColObject", "privilegeObject", 
			"privObject", "privObjectCols", "privilegeList", "privlegeDef", "privilegeType", 
			"principalSpecification", "principalName", "withGrantOption", "grantOptionFor", 
			"adminOptionFor", "withAdminOption", "metastoreCheck", "resourceList", 
			"resource", "resourceType", "createFunctionStatement", "dropFunctionStatement", 
			"reloadFunctionsStatement", "createMacroStatement", "dropMacroStatement", 
			"createViewStatement", "viewPartition", "viewOrganization", "viewClusterSpec", 
			"viewComplexSpec", "viewDistSpec", "viewSortSpec", "dropViewStatement", 
			"createMaterializedViewStatement", "dropMaterializedViewStatement", "createScheduledQueryStatement", 
			"dropScheduledQueryStatement", "alterScheduledQueryStatement", "alterScheduledQueryChange", 
			"scheduleSpec", "executedAsSpec", "definedAsSpec", "showFunctionIdentifier", 
			"showStmtIdentifier", "tableComment", "createTablePartitionSpec", "createTablePartitionColumnTypeSpec", 
			"createTablePartitionColumnSpec", "partitionTransformSpec", "columnNameTransformConstraint", 
			"partitionTransformType", "tableBuckets", "tableImplBuckets", "tableSkewed", 
			"rowFormat", "recordReader", "recordWriter", "rowFormatSerde", "rowFormatDelimited", 
			"tableRowFormat", "tablePropertiesPrefixed", "tableProperties", "tablePropertiesList", 
			"keyValueProperty", "keyProperty", "tableRowFormatFieldIdentifier", "tableRowFormatCollItemsIdentifier", 
			"tableRowFormatMapKeysIdentifier", "tableRowFormatLinesIdentifier", "tableRowNullFormat", 
			"tableFileFormat", "tableLocation", "columnNameTypeList", "columnNameTypeOrConstraintList", 
			"columnNameColonTypeList", "columnNameList", "columnName", "extColumnName", 
			"columnNameOrderList", "columnParenthesesList", "enableValidateSpecification", 
			"enableSpecification", "validateSpecification", "enforcedSpecification", 
			"relySpecification", "createConstraint", "alterConstraintWithName", "tableLevelConstraint", 
			"pkUkConstraint", "checkConstraint", "createForeignKey", "alterForeignKeyWithName", 
			"skewedValueElement", "skewedColumnValuePairList", "skewedColumnValuePair", 
			"skewedColumnValues", "skewedColumnValue", "skewedValueLocationElement", 
			"orderSpecification", "nullOrdering", "columnNameOrder", "columnNameCommentList", 
			"columnNameComment", "orderSpecificationRewrite", "columnRefOrder", "columnNameType", 
			"columnNameTypeOrConstraint", "tableConstraint", "columnNameTypeConstraint", 
			"columnConstraint", "foreignKeyConstraint", "colConstraint", "alterColumnConstraint", 
			"alterForeignKeyConstraint", "alterColConstraint", "columnConstraintType", 
			"defaultVal", "tableConstraintType", "constraintOptsCreate", "constraintOptsAlter", 
			"columnNameColonType", "colType", "colTypeList", "type", "primitiveType", 
			"listType", "structType", "mapType", "unionType", "setOperator", "queryStatementExpression", 
			"queryStatementExpressionBody", "withClause", "cteStatement", "fromStatement", 
			"singleFromStatement", "regularBody", "atomSelectStatement", "selectStatement", 
			"setOpSelectStatement", "selectStatementWithCTE", "body", "insertClause", 
			"destination", "limitClause", "deleteStatement", "columnAssignmentClause", 
			"precedencePlusExpressionOrDefault", "setColumnsClause", "updateStatement", 
			"sqlTransactionStatement", "startTransactionStatement", "transactionMode", 
			"transactionAccessMode", "isolationLevel", "levelOfIsolation", "commitStatement", 
			"rollbackStatement", "setAutoCommitStatement", "abortTransactionStatement", 
			"abortCompactionStatement", "mergeStatement", "whenClauses", "whenNotMatchedClause", 
			"whenMatchedAndClause", "whenMatchedThenClause", "updateOrDelete", "killQueryStatement", 
			"compactionId", "compactionPool", "compactionType", "compactionStatus", 
			"alterStatement", "alterTableStatementSuffix", "alterTblPartitionStatementSuffix", 
			"alterStatementPartitionKeyType", "alterViewStatementSuffix", "alterMaterializedViewStatementSuffix", 
			"alterMaterializedViewSuffixRewrite", "alterMaterializedViewSuffixRebuild", 
			"alterDatabaseStatementSuffix", "alterDatabaseSuffixProperties", "alterDatabaseSuffixSetOwner", 
			"alterDatabaseSuffixSetLocation", "alterDatabaseSuffixSetManagedLocation", 
			"alterStatementSuffixRename", "alterStatementSuffixAddCol", "alterStatementSuffixAddConstraint", 
			"alterStatementSuffixUpdateColumns", "alterStatementSuffixDropConstraint", 
			"alterStatementSuffixRenameCol", "alterStatementSuffixUpdateStatsCol", 
			"alterStatementSuffixUpdateStats", "alterStatementChangeColPosition", 
			"alterStatementSuffixAddPartitions", "alterStatementSuffixAddPartitionsElement", 
			"alterStatementSuffixTouch", "alterStatementSuffixArchive", "alterStatementSuffixUnArchive", 
			"partitionLocation", "alterStatementSuffixDropPartitions", "alterStatementSuffixProperties", 
			"alterViewSuffixProperties", "alterStatementSuffixSerdeProperties", "tablePartitionPrefix", 
			"alterStatementSuffixFileFormat", "alterStatementSuffixClusterbySortby", 
			"alterTblPartitionStatementSuffixSkewedLocation", "skewedLocations", 
			"skewedLocationsList", "skewedLocationMap", "alterStatementSuffixLocation", 
			"alterStatementSuffixSkewedby", "alterStatementSuffixExchangePartition", 
			"alterStatementSuffixRenamePart", "alterStatementSuffixStatsPart", "alterStatementSuffixMergeFiles", 
			"alterStatementSuffixBucketNum", "blocking", "compactPool", "alterStatementSuffixCompact", 
			"alterStatementSuffixSetOwner", "alterStatementSuffixSetPartSpec", "alterStatementSuffixExecute", 
			"fileFormat", "alterDataConnectorStatementSuffix", "alterDataConnectorSuffixProperties", 
			"alterDataConnectorSuffixSetOwner", "alterDataConnectorSuffixSetUrl", 
			"likeTableOrFile", "createTableStatement", "createDataConnectorStatement", 
			"dataConnectorComment", "dataConnectorUrl", "dataConnectorType", "dcProperties", 
			"dropDataConnectorStatement", "tableAllColumns", "tableOrColumn", "defaultValue", 
			"expressionList", "aliasList", "fromClause", "fromSource", "atomjoinSource", 
			"joinSource", "joinSourcePart", "uniqueJoinSource", "uniqueJoinExpr", 
			"uniqueJoinToken", "joinToken", "lateralView", "tableAlias", "tableBucketSample", 
			"splitSample", "tableSample", "tableSource", "asOfClause", "uniqueJoinTableSource", 
			"tableName", "viewName", "subQuerySource", "partitioningSpec", "partitionTableFunctionSource", 
			"partitionedTableFunction", "whereClause", "searchCondition", "valuesSource", 
			"valuesClause", "valuesTableConstructor", "valueRowConstructor", "firstValueRowConstructor", 
			"virtualTableSource", "selectClause", "all_distinct", "selectList", "selectTrfmClause", 
			"selectItem", "trfmClause", "selectExpression", "selectExpressionList", 
			"window_clause", "window_defn", "window_specification", "window_frame", 
			"window_range_expression", "window_value_expression", "window_frame_start_boundary", 
			"window_frame_boundary", "groupByClause", "groupby_expression", "groupByEmpty", 
			"rollupStandard", "rollupOldSyntax", "groupingSetExpression", "groupingSetExpressionMultiple", 
			"groupingExpressionSingle", "havingClause", "qualifyClause", "havingCondition", 
			"expressionsInParenthesis", "expressionsNotInParenthesis", "expressionPart", 
			"expressionOrDefault", "firstExpressionsWithAlias", "expressionWithAlias", 
			"expressions", "columnRefOrderInParenthesis", "columnRefOrderNotInParenthesis", 
			"orderByClause", "clusterByClause", "partitionByClause", "distributeByClause", 
			"sortByClause", "trimFunction", "function_", "null_treatment", "functionName", 
			"castExpression", "caseExpression", "whenExpression", "floorExpression", 
			"floorDateQualifiers", "extractExpression", "timeQualifiers", "constant", 
			"prepareStmtParam", "parameterIdx", "stringLiteralSequence", "charSetStringLiteral", 
			"dateLiteral", "timestampLiteral", "timestampLocalTZLiteral", "intervalValue", 
			"intervalLiteral", "intervalExpression", "intervalQualifiers", "expression", 
			"atomExpression", "precedenceFieldExpression", "precedenceUnaryOperator", 
			"precedenceUnaryPrefixExpression", "precedenceBitwiseXorOperator", "precedenceBitwiseXorExpression", 
			"precedenceStarOperator", "precedenceStarExpression", "precedencePlusOperator", 
			"precedencePlusExpression", "precedenceConcatenateOperator", "precedenceConcatenateExpression", 
			"precedenceAmpersandOperator", "precedenceAmpersandExpression", "precedenceBitwiseOrOperator", 
			"precedenceBitwiseOrExpression", "precedenceRegexpOperator", "precedenceSimilarOperator", 
			"subQueryExpression", "precedenceSimilarExpression", "precedenceSimilarExpressionMain", 
			"precedenceSimilarExpressionPart", "precedenceSimilarExpressionAtom", 
			"precedenceSimilarExpressionQuantifierPredicate", "quantifierType", "precedenceSimilarExpressionIn", 
			"precedenceSimilarExpressionPartNot", "precedenceDistinctOperator", "precedenceEqualOperator", 
			"precedenceEqualExpression", "isCondition", "precedenceUnarySuffixExpression", 
			"precedenceNotOperator", "precedenceNotExpression", "precedenceAndOperator", 
			"precedenceAndExpression", "precedenceOrOperator", "precedenceOrExpression", 
			"booleanValue", "booleanValueTok", "tableOrPartition", "partitionSpec", 
			"partitionVal", "partitionSelectorSpec", "partitionSelectorVal", "partitionSelectorOperator", 
			"subQuerySelectorOperator", "sysFuncNames", "descFuncNames", "id_", "functionIdentifier", 
			"principalIdentifier", "nonReserved", "sql11ReservedKeywordsUsedAsFunctionName", 
			"hint", "hintList", "hintItem", "hintName", "hintArgs", "hintArgName", 
			"prepareStatement", "executeStatement", "executeParamList", "resourcePlanDdlStatements", 
			"rpAssign", "rpAssignList", "rpUnassign", "rpUnassignList", "createResourcePlanStatement", 
			"withReplace", "activate", "enable", "disable", "unmanaged", "alterResourcePlanStatement", 
			"globalWmStatement", "replaceResourcePlanStatement", "dropResourcePlanStatement", 
			"poolPath", "triggerExpression", "triggerExpressionStandalone", "triggerOrExpression", 
			"triggerAndExpression", "triggerAtomExpression", "triggerLiteral", "comparisionOperator", 
			"triggerActionExpression", "triggerActionExpressionStandalone", "createTriggerStatement", 
			"alterTriggerStatement", "dropTriggerStatement", "poolAssign", "poolAssignList", 
			"createPoolStatement", "alterPoolStatement", "dropPoolStatement", "createMappingStatement", 
			"alterMappingStatement", "dropMappingStatement"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'ABORT'", "'ACTIVATE'", "'ACTIVE'", "'ADD'", "'ADMIN'", "'AFTER'", 
			"'ALL'", "'ALLOC_FRACTION'", "'ALTER'", "'ANALYZE'", "'AND'", "'ANTI'", 
			"'ANY'", "'APPLICATION'", "'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", "'AST'", 
			"'AT'", "'AUTHORIZATION'", "'AUTOCOMMIT'", "'KW_BATCH'", "'BEFORE'", 
			"'BETWEEN'", "'BIGINT'", "'BINARY'", "'BOOLEAN'", "'BOTH'", "'BUCKET'", 
			"'BUCKETS'", "'BY'", "'CACHE'", "'CASCADE'", "'CASE'", "'CAST'", "'CBO'", 
			"'CHANGE'", "'CHAR'", "'CHECK'", "'CLUSTER'", "'CLUSTERED'", "'CLUSTERSTATUS'", 
			"'COLLECTION'", "'COLUMN'", "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMPACT'", 
			"'COMPACTIONS'", "'COMPACTIONID'", "'COMPUTE'", "'CONCATENATE'", "'CONF'", 
			"'CONSTRAINT'", "'CONTINUE'", "'COST'", "'CREATE'", "'CRON'", "'CROSS'", 
			"'CUBE'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIMESTAMP'", "'CURSOR'", 
			"'DATA'", "'DATABASE'", "'DATABASES'", "'CONNECTOR'", "'CONNECTORS'", 
			"'DATE'", "'DATETIME'", null, "'KW_DAYOFWEEK'", "'DBPROPERTIES'", "'DCPROPERTIES'", 
			"'DDL'", "'DEBUG'", null, "'DEFAULT'", "'DEFERRED'", "'DEFINED'", "'DELETE'", 
			"'DELIMITED'", "'DEPENDENCY'", "'DESC'", "'DESCRIBE'", "'DETAIL'", "'DIRECTORIES'", 
			"'DIRECTORY'", null, "'DISTINCT'", "'DISTRIBUTE'", "'DISTRIBUTED'", "'DO'", 
			"'DOUBLE'", "'DAYOFWEEK'", "'DROP'", "'DUMP'", "'$ELEM$'", "'ELSE'", 
			null, "'END'", "'ENFORCED'", "'ESCAPED'", "'EVERY'", "'EXCEPT'", "'EXCHANGE'", 
			"'EXCLUSIVE'", "'EXECUTE'", "'EXECUTED'", "'EXISTS'", "'EXPIRE_SNAPSHOTS'", 
			"'EXPLAIN'", "'EXPORT'", "'EXPRESSION'", "'EXTENDED'", "'EXTERNAL'", 
			"'EXTRACT'", "'FALSE'", "'FETCH'", "'FIELDS'", "'FILE'", "'FILEFORMAT'", 
			"'FIRST'", "'FLOAT'", "'FLOOR'", "'FOLLOWING'", "'FOR'", "'FORCE'", "'FOREIGN'", 
			"'FORMAT'", "'FORMATTED'", "'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONS'", 
			"'GRANT'", "'GROUP'", "'GROUPING'", "'HAVING'", "'KW_HOLD_DDLTIME'", 
			null, "'IDXPROPERTIES'", "'IF'", "'IGNORE'", "'IMPORT'", "'IN'", "'INDEX'", 
			"'INDEXES'", "'INNER'", "'INPATH'", "'INPUTDRIVER'", "'INPUTFORMAT'", 
			"'INSERT'", null, "'INTERSECT'", "'INTERVAL'", "'INTO'", "'IS'", "'ISOLATION'", 
			"'ITEMS'", "'JAR'", "'JOIN'", "'JOINCOST'", "'KEY'", "'KEYS'", "'$KEY$'", 
			"'KILL'", "'LAST'", "'LATERAL'", "'LEADING'", "'LEFT'", "'LESS'", "'LEVEL'", 
			"'LIKE'", "'LIMIT'", "'LINES'", "'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'", 
			"'LOCKS'", "'LOGICAL'", "'LONG'", "'MACRO'", "'MANAGED'", "'MANAGEDLOCATION'", 
			"'MANAGEMENT'", "'MAP'", "'MAPJOIN'", "'MAPPING'", "'MATCHED'", "'MATERIALIZED'", 
			"'MERGE'", "'METADATA'", "'MINUS'", null, null, "'MORE'", "'MOVE'", "'MSCK'", 
			"'NONE'", "'NORELY'", "'NOSCAN'", null, "'NOVALIDATE'", "'KW_NO_DROP'", 
			"'NULL'", "'NULLS'", "'OF'", "'KW_OFFLINE'", "'OFFSET'", "'ON'", "'ONLY'", 
			"'OPERATOR'", "'OPTION'", "'OR'", "'ORDER'", "'OUT'", "'OUTER'", "'OUTPUTDRIVER'", 
			"'OUTPUTFORMAT'", "'OVER'", "'OVERWRITE'", "'OWNER'", "'PARTITION'", 
			"'PARTITIONED'", "'PARTITIONS'", "'PATH'", "'PERCENT'", "'PKFK_JOIN'", 
			"'PLAN'", "'PLANS'", "'PLUS'", "'POOL'", "'PRECEDING'", "'PRECISION'", 
			"'PREPARE'", "'PRESERVE'", "'PRIMARY'", "'PRINCIPALS'", "'PROCEDURE'", 
			"'KW_PROTECTION'", "'PURGE'", "'QUALIFY'", "'QUARTER'", "'QUERY'", "'QUERY_PARALLELISM'", 
			"'RANGE'", "'READ'", "'KW_READONLY'", "'READS'", "'REAL'", "'REBUILD'", 
			"'RECORDREADER'", "'RECORDWRITER'", "'REDUCE'", "'REFERENCES'", "'REGEXP'", 
			"'RELOAD'", "'RELY'", "'REMOTE'", "'RENAME'", "'REOPTIMIZATION'", "'REPAIR'", 
			"'REPL'", "'REPLACE'", "'REPLICATION'", "'RESOURCE'", "'RESPECT'", "'RESTRICT'", 
			"'REVOKE'", "'REWRITE'", "'RIGHT'", "'RLIKE'", "'ROLE'", "'ROLES'", "'ROLLBACK'", 
			"'ROLLUP'", "'ROW'", "'ROWS'", "'SCHEDULED'", "'SCHEDULING_POLICY'", 
			"'SCHEMA'", "'SCHEMAS'", null, "'SELECT'", "'SEMI'", "'SERDE'", "'SERDEPROPERTIES'", 
			"'SERVER'", "'SET'", "'SETS'", "'SET_CURRENT_SNAPSHOT'", "'SHARED'", 
			"'SHOW'", "'SHOW_DATABASE'", "'SKEWED'", "'SMALLINT'", "'SNAPSHOT'", 
			"'SOME'", "'SORT'", "'SORTED'", "'SPEC'", "'SSL'", "'START'", "'STATISTICS'", 
			"'STATUS'", "'STORED'", "'STREAMTABLE'", "'STRING'", "'STRUCT'", "'SUMMARY'", 
			"'SYNC'", "'SYSTEM_TIME'", "'SYSTEM_VERSION'", "'TABLE'", "'TABLES'", 
			"'TABLESAMPLE'", "'TBLPROPERTIES'", "'TEMPORARY'", "'TERMINATED'", "'THEN'", 
			"'TIME'", "'TIMESTAMP'", "'TIMESTAMPLOCALTZ'", "'KW_TIMESTAMPTZ'", "'TINYINT'", 
			"'TO'", "'TOUCH'", "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONAL'", 
			"'TRANSACTIONS'", "'TRANSFORM'", "'TRIGGER'", "'TRIM'", "'TRUE'", "'TRUNCATE'", 
			"'TYPE'", "'UNARCHIVE'", "'UNBOUNDED'", "'UNDO'", "'UNION'", "'UNIONTYPE'", 
			"'UNIQUE'", "'UNIQUEJOIN'", "'UNKNOWN'", "'UNLOCK'", "'UNMANAGED'", "'UNSET'", 
			"'UNSIGNED'", "'UPDATE'", "'URI'", "'URL'", "'USE'", "'USER'", "'USING'", 
			"'UTC'", "'UTC_TMESTAMP'", "'VALIDATE'", "'VALUES'", "'$VALUE$'", "'VARCHAR'", 
			"'VECTORIZATION'", "'VIEW'", "'VIEWS'", "'WAIT'", null, "'WHEN'", "'WHERE'", 
			"'WHILE'", "'WINDOW'", "'WITH'", "'WITHIN'", "'WORK'", "'WORKLOAD'", 
			"'WRITE'", null, "'ZONE'", "'.'", "':'", "','", "';'", "'('", "')'", 
			"'['", "']'", "'{'", "'}'", null, "'<=>'", null, "'<='", "'<'", "'>='", 
			"'>'", "'/'", "'+'", "'-'", "'*'", "'%'", "'DIV'", "'&'", "'~'", "'|'", 
			"'||'", "'^'", "'?'", "'$'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "KW_ABORT", "KW_ACTIVATE", "KW_ACTIVE", "KW_ADD", "KW_ADMIN", "KW_AFTER", 
			"KW_ALL", "KW_ALLOC_FRACTION", "KW_ALTER", "KW_ANALYZE", "KW_AND", "KW_ANTI", 
			"KW_ANY", "KW_APPLICATION", "KW_ARCHIVE", "KW_ARRAY", "KW_AS", "KW_ASC", 
			"KW_AST", "KW_AT", "KW_AUTHORIZATION", "KW_AUTOCOMMIT", "KW_BATCH", "KW_BEFORE", 
			"KW_BETWEEN", "KW_BIGINT", "KW_BINARY", "KW_BOOLEAN", "KW_BOTH", "KW_BUCKET", 
			"KW_BUCKETS", "KW_BY", "KW_CACHE", "KW_CASCADE", "KW_CASE", "KW_CAST", 
			"KW_CBO", "KW_CHANGE", "KW_CHAR", "KW_CHECK", "KW_CLUSTER", "KW_CLUSTERED", 
			"KW_CLUSTERSTATUS", "KW_COLLECTION", "KW_COLUMN", "KW_COLUMNS", "KW_COMMENT", 
			"KW_COMMIT", "KW_COMPACT", "KW_COMPACTIONS", "KW_COMPACT_ID", "KW_COMPUTE", 
			"KW_CONCATENATE", "KW_CONF", "KW_CONSTRAINT", "KW_CONTINUE", "KW_COST", 
			"KW_CREATE", "KW_CRON", "KW_CROSS", "KW_CUBE", "KW_CURRENT", "KW_CURRENT_DATE", 
			"KW_CURRENT_TIMESTAMP", "KW_CURSOR", "KW_DATA", "KW_DATABASE", "KW_DATABASES", 
			"KW_DATACONNECTOR", "KW_DATACONNECTORS", "KW_DATE", "KW_DATETIME", "KW_DAY", 
			"KW_DAYOFWEEK", "KW_DBPROPERTIES", "KW_DCPROPERTIES", "KW_DDL", "KW_DEBUG", 
			"KW_DECIMAL", "KW_DEFAULT", "KW_DEFERRED", "KW_DEFINED", "KW_DELETE", 
			"KW_DELIMITED", "KW_DEPENDENCY", "KW_DESC", "KW_DESCRIBE", "KW_DETAIL", 
			"KW_DIRECTORIES", "KW_DIRECTORY", "KW_DISABLE", "KW_DISTINCT", "KW_DISTRIBUTE", 
			"KW_DISTRIBUTED", "KW_DO", "KW_DOUBLE", "KW_DOW", "KW_DROP", "KW_DUMP", 
			"KW_ELEM_TYPE", "KW_ELSE", "KW_ENABLE", "KW_END", "KW_ENFORCED", "KW_ESCAPED", 
			"KW_EVERY", "KW_EXCEPT", "KW_EXCHANGE", "KW_EXCLUSIVE", "KW_EXECUTE", 
			"KW_EXECUTED", "KW_EXISTS", "KW_EXPIRE_SNAPSHOTS", "KW_EXPLAIN", "KW_EXPORT", 
			"KW_EXPRESSION", "KW_EXTENDED", "KW_EXTERNAL", "KW_EXTRACT", "KW_FALSE", 
			"KW_FETCH", "KW_FIELDS", "KW_FILE", "KW_FILEFORMAT", "KW_FIRST", "KW_FLOAT", 
			"KW_FLOOR", "KW_FOLLOWING", "KW_FOR", "KW_FORCE", "KW_FOREIGN", "KW_FORMAT", 
			"KW_FORMATTED", "KW_FROM", "KW_FULL", "KW_FUNCTION", "KW_FUNCTIONS", 
			"KW_GRANT", "KW_GROUP", "KW_GROUPING", "KW_HAVING", "KW_HOLD_DDLTIME", 
			"KW_HOUR", "KW_IDXPROPERTIES", "KW_IF", "KW_IGNORE", "KW_IMPORT", "KW_IN", 
			"KW_INDEX", "KW_INDEXES", "KW_INNER", "KW_INPATH", "KW_INPUTDRIVER", 
			"KW_INPUTFORMAT", "KW_INSERT", "KW_INT", "KW_INTERSECT", "KW_INTERVAL", 
			"KW_INTO", "KW_IS", "KW_ISOLATION", "KW_ITEMS", "KW_JAR", "KW_JOIN", 
			"KW_JOINCOST", "KW_KEY", "KW_KEYS", "KW_KEY_TYPE", "KW_KILL", "KW_LAST", 
			"KW_LATERAL", "KW_LEADING", "KW_LEFT", "KW_LESS", "KW_LEVEL", "KW_LIKE", 
			"KW_LIMIT", "KW_LINES", "KW_LOAD", "KW_LOCAL", "KW_LOCATION", "KW_LOCK", 
			"KW_LOCKS", "KW_LOGICAL", "KW_LONG", "KW_MACRO", "KW_MANAGED", "KW_MANAGEDLOCATION", 
			"KW_MANAGEMENT", "KW_MAP", "KW_MAPJOIN", "KW_MAPPING", "KW_MATCHED", 
			"KW_MATERIALIZED", "KW_MERGE", "KW_METADATA", "KW_MINUS", "KW_MINUTE", 
			"KW_MONTH", "KW_MORE", "KW_MOVE", "KW_MSCK", "KW_NONE", "KW_NORELY", 
			"KW_NOSCAN", "KW_NOT", "KW_NOVALIDATE", "KW_NO_DROP", "KW_NULL", "KW_NULLS", 
			"KW_OF", "KW_OFFLINE", "KW_OFFSET", "KW_ON", "KW_ONLY", "KW_OPERATOR", 
			"KW_OPTION", "KW_OR", "KW_ORDER", "KW_OUT", "KW_OUTER", "KW_OUTPUTDRIVER", 
			"KW_OUTPUTFORMAT", "KW_OVER", "KW_OVERWRITE", "KW_OWNER", "KW_PARTITION", 
			"KW_PARTITIONED", "KW_PARTITIONS", "KW_PATH", "KW_PERCENT", "KW_PKFK_JOIN", 
			"KW_PLAN", "KW_PLANS", "KW_PLUS", "KW_POOL", "KW_PRECEDING", "KW_PRECISION", 
			"KW_PREPARE", "KW_PRESERVE", "KW_PRIMARY", "KW_PRINCIPALS", "KW_PROCEDURE", 
			"KW_PROTECTION", "KW_PURGE", "KW_QUALIFY", "KW_QUARTER", "KW_QUERY", 
			"KW_QUERY_PARALLELISM", "KW_RANGE", "KW_READ", "KW_READONLY", "KW_READS", 
			"KW_REAL", "KW_REBUILD", "KW_RECORDREADER", "KW_RECORDWRITER", "KW_REDUCE", 
			"KW_REFERENCES", "KW_REGEXP", "KW_RELOAD", "KW_RELY", "KW_REMOTE", "KW_RENAME", 
			"KW_REOPTIMIZATION", "KW_REPAIR", "KW_REPL", "KW_REPLACE", "KW_REPLICATION", 
			"KW_RESOURCE", "KW_RESPECT", "KW_RESTRICT", "KW_REVOKE", "KW_REWRITE", 
			"KW_RIGHT", "KW_RLIKE", "KW_ROLE", "KW_ROLES", "KW_ROLLBACK", "KW_ROLLUP", 
			"KW_ROW", "KW_ROWS", "KW_SCHEDULED", "KW_SCHEDULING_POLICY", "KW_SCHEMA", 
			"KW_SCHEMAS", "KW_SECOND", "KW_SELECT", "KW_SEMI", "KW_SERDE", "KW_SERDEPROPERTIES", 
			"KW_SERVER", "KW_SET", "KW_SETS", "KW_SET_CURRENT_SNAPSHOT", "KW_SHARED", 
			"KW_SHOW", "KW_SHOW_DATABASE", "KW_SKEWED", "KW_SMALLINT", "KW_SNAPSHOT", 
			"KW_SOME", "KW_SORT", "KW_SORTED", "KW_SPEC", "KW_SSL", "KW_START", "KW_STATISTICS", 
			"KW_STATUS", "KW_STORED", "KW_STREAMTABLE", "KW_STRING", "KW_STRUCT", 
			"KW_SUMMARY", "KW_SYNC", "KW_SYSTEM_TIME", "KW_SYSTEM_VERSION", "KW_TABLE", 
			"KW_TABLES", "KW_TABLESAMPLE", "KW_TBLPROPERTIES", "KW_TEMPORARY", "KW_TERMINATED", 
			"KW_THEN", "KW_TIME", "KW_TIMESTAMP", "KW_TIMESTAMPLOCALTZ", "KW_TIMESTAMPTZ", 
			"KW_TINYINT", "KW_TO", "KW_TOUCH", "KW_TRAILING", "KW_TRANSACTION", "KW_TRANSACTIONAL", 
			"KW_TRANSACTIONS", "KW_TRANSFORM", "KW_TRIGGER", "KW_TRIM", "KW_TRUE", 
			"KW_TRUNCATE", "KW_TYPE", "KW_UNARCHIVE", "KW_UNBOUNDED", "KW_UNDO", 
			"KW_UNION", "KW_UNIONTYPE", "KW_UNIQUE", "KW_UNIQUEJOIN", "KW_UNKNOWN", 
			"KW_UNLOCK", "KW_UNMANAGED", "KW_UNSET", "KW_UNSIGNED", "KW_UPDATE", 
			"KW_URI", "KW_URL", "KW_USE", "KW_USER", "KW_USING", "KW_UTC", "KW_UTCTIMESTAMP", 
			"KW_VALIDATE", "KW_VALUES", "KW_VALUE_TYPE", "KW_VARCHAR", "KW_VECTORIZATION", 
			"KW_VIEW", "KW_VIEWS", "KW_WAIT", "KW_WEEK", "KW_WHEN", "KW_WHERE", "KW_WHILE", 
			"KW_WINDOW", "KW_WITH", "KW_WITHIN", "KW_WORK", "KW_WORKLOAD", "KW_WRITE", 
			"KW_YEAR", "KW_ZONE", "DOT", "COLON", "COMMA", "SEMICOLON", "LPAREN", 
			"RPAREN", "LSQUARE", "RSQUARE", "LCURLY", "RCURLY", "EQUAL", "EQUAL_NS", 
			"NOTEQUAL", "LESSTHANOREQUALTO", "LESSTHAN", "GREATERTHANOREQUALTO", 
			"GREATERTHAN", "DIVIDE", "PLUS", "MINUS", "STAR", "MOD", "DIV", "AMPERSAND", 
			"TILDE", "BITWISEOR", "CONCATENATE", "BITWISEXOR", "QUESTION", "DOLLAR", 
			"StringLiteral", "CharSetLiteral", "IntegralLiteral", "NumberLiteral", 
			"ByteLengthLiteral", "Number", "Identifier", "CharSetName", "WHITE_SPACE", 
			"LINE_COMMENT", "QUERY_HINT", "SHOW_HINT", "HIDDEN_HINT"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "HiveParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public HiveParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StatementContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(HiveParser.EOF, 0); }
		public ExplainStatementContext explainStatement() {
			return getRuleContext(ExplainStatementContext.class,0);
		}
		public ExecStatementContext execStatement() {
			return getRuleContext(ExecStatementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(998);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_EXPLAIN:
				{
				setState(996);
				explainStatement();
				}
				break;
			case KW_ABORT:
			case KW_ALTER:
			case KW_ANALYZE:
			case KW_COMMIT:
			case KW_CREATE:
			case KW_DELETE:
			case KW_DESC:
			case KW_DESCRIBE:
			case KW_DISABLE:
			case KW_DROP:
			case KW_ENABLE:
			case KW_EXECUTE:
			case KW_EXPORT:
			case KW_FROM:
			case KW_GRANT:
			case KW_IMPORT:
			case KW_INSERT:
			case KW_KILL:
			case KW_LOAD:
			case KW_LOCK:
			case KW_MAP:
			case KW_MERGE:
			case KW_MSCK:
			case KW_PREPARE:
			case KW_REDUCE:
			case KW_RELOAD:
			case KW_REPL:
			case KW_REPLACE:
			case KW_REVOKE:
			case KW_ROLLBACK:
			case KW_SELECT:
			case KW_SET:
			case KW_SHOW:
			case KW_START:
			case KW_TRUNCATE:
			case KW_UNLOCK:
			case KW_UPDATE:
			case KW_USE:
			case KW_VALUES:
			case KW_WITH:
			case LPAREN:
				{
				setState(997);
				execStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1000);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExplainStatementContext extends ParserRuleContext {
		public TerminalNode KW_EXPLAIN() { return getToken(HiveParser.KW_EXPLAIN, 0); }
		public ExecStatementContext execStatement() {
			return getRuleContext(ExecStatementContext.class,0);
		}
		public TerminalNode KW_REWRITE() { return getToken(HiveParser.KW_REWRITE, 0); }
		public QueryStatementExpressionContext queryStatementExpression() {
			return getRuleContext(QueryStatementExpressionContext.class,0);
		}
		public List<ExplainOptionContext> explainOption() {
			return getRuleContexts(ExplainOptionContext.class);
		}
		public ExplainOptionContext explainOption(int i) {
			return getRuleContext(ExplainOptionContext.class,i);
		}
		public ExplainStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterExplainStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitExplainStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitExplainStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainStatementContext explainStatement() throws RecognitionException {
		ExplainStatementContext _localctx = new ExplainStatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_explainStatement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1002);
			match(KW_EXPLAIN);
			setState(1012);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_ABORT:
			case KW_ALTER:
			case KW_ANALYZE:
			case KW_AST:
			case KW_AUTHORIZATION:
			case KW_CBO:
			case KW_COMMIT:
			case KW_CREATE:
			case KW_DDL:
			case KW_DEBUG:
			case KW_DELETE:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DESCRIBE:
			case KW_DISABLE:
			case KW_DROP:
			case KW_ENABLE:
			case KW_EXECUTE:
			case KW_EXPORT:
			case KW_EXTENDED:
			case KW_FORMATTED:
			case KW_FROM:
			case KW_GRANT:
			case KW_IMPORT:
			case KW_INSERT:
			case KW_KILL:
			case KW_LOAD:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_MAP:
			case KW_MERGE:
			case KW_MSCK:
			case KW_PREPARE:
			case KW_REDUCE:
			case KW_RELOAD:
			case KW_REOPTIMIZATION:
			case KW_REPL:
			case KW_REPLACE:
			case KW_REVOKE:
			case KW_ROLLBACK:
			case KW_SELECT:
			case KW_SET:
			case KW_SHOW:
			case KW_START:
			case KW_TRUNCATE:
			case KW_UNLOCK:
			case KW_UPDATE:
			case KW_USE:
			case KW_VALUES:
			case KW_VECTORIZATION:
			case KW_WITH:
			case LPAREN:
				{
				setState(1006);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1003);
						explainOption();
						}
						} 
					}
					setState(1008);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1,_ctx);
				}
				setState(1009);
				execStatement();
				}
				break;
			case KW_REWRITE:
				{
				setState(1010);
				match(KW_REWRITE);
				setState(1011);
				queryStatementExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExplainOptionContext extends ParserRuleContext {
		public TerminalNode KW_EXTENDED() { return getToken(HiveParser.KW_EXTENDED, 0); }
		public TerminalNode KW_FORMATTED() { return getToken(HiveParser.KW_FORMATTED, 0); }
		public TerminalNode KW_DEPENDENCY() { return getToken(HiveParser.KW_DEPENDENCY, 0); }
		public TerminalNode KW_CBO() { return getToken(HiveParser.KW_CBO, 0); }
		public TerminalNode KW_COST() { return getToken(HiveParser.KW_COST, 0); }
		public TerminalNode KW_JOINCOST() { return getToken(HiveParser.KW_JOINCOST, 0); }
		public TerminalNode KW_LOGICAL() { return getToken(HiveParser.KW_LOGICAL, 0); }
		public TerminalNode KW_AUTHORIZATION() { return getToken(HiveParser.KW_AUTHORIZATION, 0); }
		public TerminalNode KW_ANALYZE() { return getToken(HiveParser.KW_ANALYZE, 0); }
		public TerminalNode KW_REOPTIMIZATION() { return getToken(HiveParser.KW_REOPTIMIZATION, 0); }
		public TerminalNode KW_LOCKS() { return getToken(HiveParser.KW_LOCKS, 0); }
		public TerminalNode KW_AST() { return getToken(HiveParser.KW_AST, 0); }
		public TerminalNode KW_VECTORIZATION() { return getToken(HiveParser.KW_VECTORIZATION, 0); }
		public VectorizationOnlyContext vectorizationOnly() {
			return getRuleContext(VectorizationOnlyContext.class,0);
		}
		public VectorizatonDetailContext vectorizatonDetail() {
			return getRuleContext(VectorizatonDetailContext.class,0);
		}
		public TerminalNode KW_DEBUG() { return getToken(HiveParser.KW_DEBUG, 0); }
		public TerminalNode KW_DDL() { return getToken(HiveParser.KW_DDL, 0); }
		public ExplainOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterExplainOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitExplainOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitExplainOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainOptionContext explainOption() throws RecognitionException {
		ExplainOptionContext _localctx = new ExplainOptionContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_explainOption);
		int _la;
		try {
			setState(1036);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_EXTENDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(1014);
				match(KW_EXTENDED);
				}
				break;
			case KW_FORMATTED:
				enterOuterAlt(_localctx, 2);
				{
				setState(1015);
				match(KW_FORMATTED);
				}
				break;
			case KW_DEPENDENCY:
				enterOuterAlt(_localctx, 3);
				{
				setState(1016);
				match(KW_DEPENDENCY);
				}
				break;
			case KW_CBO:
				enterOuterAlt(_localctx, 4);
				{
				setState(1017);
				match(KW_CBO);
				setState(1019);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_COST || _la==KW_JOINCOST) {
					{
					setState(1018);
					_la = _input.LA(1);
					if ( !(_la==KW_COST || _la==KW_JOINCOST) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case KW_LOGICAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(1021);
				match(KW_LOGICAL);
				}
				break;
			case KW_AUTHORIZATION:
				enterOuterAlt(_localctx, 6);
				{
				setState(1022);
				match(KW_AUTHORIZATION);
				}
				break;
			case KW_ANALYZE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1023);
				match(KW_ANALYZE);
				}
				break;
			case KW_REOPTIMIZATION:
				enterOuterAlt(_localctx, 8);
				{
				setState(1024);
				match(KW_REOPTIMIZATION);
				}
				break;
			case KW_LOCKS:
				enterOuterAlt(_localctx, 9);
				{
				setState(1025);
				match(KW_LOCKS);
				}
				break;
			case KW_AST:
				enterOuterAlt(_localctx, 10);
				{
				setState(1026);
				match(KW_AST);
				}
				break;
			case KW_VECTORIZATION:
				enterOuterAlt(_localctx, 11);
				{
				setState(1027);
				match(KW_VECTORIZATION);
				setState(1029);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_ONLY) {
					{
					setState(1028);
					vectorizationOnly();
					}
				}

				setState(1032);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_DETAIL || _la==KW_EXPRESSION || _la==KW_OPERATOR || _la==KW_SUMMARY) {
					{
					setState(1031);
					vectorizatonDetail();
					}
				}

				}
				break;
			case KW_DEBUG:
				enterOuterAlt(_localctx, 12);
				{
				setState(1034);
				match(KW_DEBUG);
				}
				break;
			case KW_DDL:
				enterOuterAlt(_localctx, 13);
				{
				setState(1035);
				match(KW_DDL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VectorizationOnlyContext extends ParserRuleContext {
		public TerminalNode KW_ONLY() { return getToken(HiveParser.KW_ONLY, 0); }
		public VectorizationOnlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vectorizationOnly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterVectorizationOnly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitVectorizationOnly(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitVectorizationOnly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VectorizationOnlyContext vectorizationOnly() throws RecognitionException {
		VectorizationOnlyContext _localctx = new VectorizationOnlyContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_vectorizationOnly);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1038);
			match(KW_ONLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VectorizatonDetailContext extends ParserRuleContext {
		public TerminalNode KW_SUMMARY() { return getToken(HiveParser.KW_SUMMARY, 0); }
		public TerminalNode KW_OPERATOR() { return getToken(HiveParser.KW_OPERATOR, 0); }
		public TerminalNode KW_EXPRESSION() { return getToken(HiveParser.KW_EXPRESSION, 0); }
		public TerminalNode KW_DETAIL() { return getToken(HiveParser.KW_DETAIL, 0); }
		public VectorizatonDetailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vectorizatonDetail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterVectorizatonDetail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitVectorizatonDetail(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitVectorizatonDetail(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VectorizatonDetailContext vectorizatonDetail() throws RecognitionException {
		VectorizatonDetailContext _localctx = new VectorizatonDetailContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_vectorizatonDetail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1040);
			_la = _input.LA(1);
			if ( !(_la==KW_DETAIL || _la==KW_EXPRESSION || _la==KW_OPERATOR || _la==KW_SUMMARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExecStatementContext extends ParserRuleContext {
		public QueryStatementExpressionContext queryStatementExpression() {
			return getRuleContext(QueryStatementExpressionContext.class,0);
		}
		public LoadStatementContext loadStatement() {
			return getRuleContext(LoadStatementContext.class,0);
		}
		public ExportStatementContext exportStatement() {
			return getRuleContext(ExportStatementContext.class,0);
		}
		public ImportStatementContext importStatement() {
			return getRuleContext(ImportStatementContext.class,0);
		}
		public ReplDumpStatementContext replDumpStatement() {
			return getRuleContext(ReplDumpStatementContext.class,0);
		}
		public ReplLoadStatementContext replLoadStatement() {
			return getRuleContext(ReplLoadStatementContext.class,0);
		}
		public ReplStatusStatementContext replStatusStatement() {
			return getRuleContext(ReplStatusStatementContext.class,0);
		}
		public DdlStatementContext ddlStatement() {
			return getRuleContext(DdlStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public SqlTransactionStatementContext sqlTransactionStatement() {
			return getRuleContext(SqlTransactionStatementContext.class,0);
		}
		public MergeStatementContext mergeStatement() {
			return getRuleContext(MergeStatementContext.class,0);
		}
		public PrepareStatementContext prepareStatement() {
			return getRuleContext(PrepareStatementContext.class,0);
		}
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public ExecStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterExecStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitExecStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitExecStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecStatementContext execStatement() throws RecognitionException {
		ExecStatementContext _localctx = new ExecStatementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_execStatement);
		try {
			setState(1056);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1042);
				queryStatementExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1043);
				loadStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1044);
				exportStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1045);
				importStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1046);
				replDumpStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1047);
				replLoadStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1048);
				replStatusStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1049);
				ddlStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1050);
				deleteStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1051);
				updateStatement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1052);
				sqlTransactionStatement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1053);
				mergeStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1054);
				prepareStatement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1055);
				executeStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LoadStatementContext extends ParserRuleContext {
		public TerminalNode KW_LOAD() { return getToken(HiveParser.KW_LOAD, 0); }
		public TerminalNode KW_DATA() { return getToken(HiveParser.KW_DATA, 0); }
		public TerminalNode KW_INPATH() { return getToken(HiveParser.KW_INPATH, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TerminalNode KW_INTO() { return getToken(HiveParser.KW_INTO, 0); }
		public TerminalNode KW_TABLE() { return getToken(HiveParser.KW_TABLE, 0); }
		public TableOrPartitionContext tableOrPartition() {
			return getRuleContext(TableOrPartitionContext.class,0);
		}
		public TerminalNode KW_LOCAL() { return getToken(HiveParser.KW_LOCAL, 0); }
		public TerminalNode KW_OVERWRITE() { return getToken(HiveParser.KW_OVERWRITE, 0); }
		public InputFileFormatContext inputFileFormat() {
			return getRuleContext(InputFileFormatContext.class,0);
		}
		public LoadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterLoadStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitLoadStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitLoadStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadStatementContext loadStatement() throws RecognitionException {
		LoadStatementContext _localctx = new LoadStatementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_loadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1058);
			match(KW_LOAD);
			setState(1059);
			match(KW_DATA);
			setState(1061);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_LOCAL) {
				{
				setState(1060);
				match(KW_LOCAL);
				}
			}

			setState(1063);
			match(KW_INPATH);
			setState(1064);
			match(StringLiteral);
			setState(1066);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_OVERWRITE) {
				{
				setState(1065);
				match(KW_OVERWRITE);
				}
			}

			setState(1068);
			match(KW_INTO);
			setState(1069);
			match(KW_TABLE);
			setState(1070);
			tableOrPartition();
			setState(1072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_INPUTFORMAT) {
				{
				setState(1071);
				inputFileFormat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplicationClauseContext extends ParserRuleContext {
		public TerminalNode KW_FOR() { return getToken(HiveParser.KW_FOR, 0); }
		public TerminalNode KW_REPLICATION() { return getToken(HiveParser.KW_REPLICATION, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public TerminalNode KW_METADATA() { return getToken(HiveParser.KW_METADATA, 0); }
		public ReplicationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterReplicationClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitReplicationClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitReplicationClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationClauseContext replicationClause() throws RecognitionException {
		ReplicationClauseContext _localctx = new ReplicationClauseContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_replicationClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1074);
			match(KW_FOR);
			setState(1076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_METADATA) {
				{
				setState(1075);
				match(KW_METADATA);
				}
			}

			setState(1078);
			match(KW_REPLICATION);
			setState(1079);
			match(LPAREN);
			setState(1080);
			match(StringLiteral);
			setState(1081);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExportStatementContext extends ParserRuleContext {
		public TerminalNode KW_EXPORT() { return getToken(HiveParser.KW_EXPORT, 0); }
		public TerminalNode KW_TABLE() { return getToken(HiveParser.KW_TABLE, 0); }
		public TableOrPartitionContext tableOrPartition() {
			return getRuleContext(TableOrPartitionContext.class,0);
		}
		public TerminalNode KW_TO() { return getToken(HiveParser.KW_TO, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public ReplicationClauseContext replicationClause() {
			return getRuleContext(ReplicationClauseContext.class,0);
		}
		public ExportStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exportStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterExportStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitExportStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitExportStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExportStatementContext exportStatement() throws RecognitionException {
		ExportStatementContext _localctx = new ExportStatementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_exportStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1083);
			match(KW_EXPORT);
			setState(1084);
			match(KW_TABLE);
			setState(1085);
			tableOrPartition();
			setState(1086);
			match(KW_TO);
			setState(1087);
			match(StringLiteral);
			setState(1089);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_FOR) {
				{
				setState(1088);
				replicationClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ImportStatementContext extends ParserRuleContext {
		public Token path;
		public TerminalNode KW_IMPORT() { return getToken(HiveParser.KW_IMPORT, 0); }
		public TerminalNode KW_FROM() { return getToken(HiveParser.KW_FROM, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TerminalNode KW_TABLE() { return getToken(HiveParser.KW_TABLE, 0); }
		public TableOrPartitionContext tableOrPartition() {
			return getRuleContext(TableOrPartitionContext.class,0);
		}
		public TableLocationContext tableLocation() {
			return getRuleContext(TableLocationContext.class,0);
		}
		public TerminalNode KW_EXTERNAL() { return getToken(HiveParser.KW_EXTERNAL, 0); }
		public ImportStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterImportStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitImportStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitImportStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImportStatementContext importStatement() throws RecognitionException {
		ImportStatementContext _localctx = new ImportStatementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_importStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1091);
			match(KW_IMPORT);
			setState(1097);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_EXTERNAL || _la==KW_TABLE) {
				{
				setState(1093);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_EXTERNAL) {
					{
					setState(1092);
					match(KW_EXTERNAL);
					}
				}

				setState(1095);
				match(KW_TABLE);
				setState(1096);
				tableOrPartition();
				}
			}

			setState(1099);
			match(KW_FROM);
			setState(1100);
			((ImportStatementContext)_localctx).path = match(StringLiteral);
			setState(1102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_LOCATION) {
				{
				setState(1101);
				tableLocation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplDumpStatementContext extends ParserRuleContext {
		public ReplDbPolicyContext dbPolicy;
		public ReplDbPolicyContext oldDbPolicy;
		public ReplConfigsContext replConf;
		public TerminalNode KW_REPL() { return getToken(HiveParser.KW_REPL, 0); }
		public TerminalNode KW_DUMP() { return getToken(HiveParser.KW_DUMP, 0); }
		public List<ReplDbPolicyContext> replDbPolicy() {
			return getRuleContexts(ReplDbPolicyContext.class);
		}
		public ReplDbPolicyContext replDbPolicy(int i) {
			return getRuleContext(ReplDbPolicyContext.class,i);
		}
		public TerminalNode KW_REPLACE() { return getToken(HiveParser.KW_REPLACE, 0); }
		public TerminalNode KW_WITH() { return getToken(HiveParser.KW_WITH, 0); }
		public ReplConfigsContext replConfigs() {
			return getRuleContext(ReplConfigsContext.class,0);
		}
		public ReplDumpStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replDumpStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterReplDumpStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitReplDumpStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitReplDumpStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplDumpStatementContext replDumpStatement() throws RecognitionException {
		ReplDumpStatementContext _localctx = new ReplDumpStatementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_replDumpStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1104);
			match(KW_REPL);
			setState(1105);
			match(KW_DUMP);
			setState(1106);
			((ReplDumpStatementContext)_localctx).dbPolicy = replDbPolicy();
			setState(1109);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_REPLACE) {
				{
				setState(1107);
				match(KW_REPLACE);
				setState(1108);
				((ReplDumpStatementContext)_localctx).oldDbPolicy = replDbPolicy();
				}
			}

			setState(1113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WITH) {
				{
				setState(1111);
				match(KW_WITH);
				setState(1112);
				((ReplDumpStatementContext)_localctx).replConf = replConfigs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplDbPolicyContext extends ParserRuleContext {
		public Id_Context dbName;
		public ReplTableLevelPolicyContext tablePolicy;
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode DOT() { return getToken(HiveParser.DOT, 0); }
		public ReplTableLevelPolicyContext replTableLevelPolicy() {
			return getRuleContext(ReplTableLevelPolicyContext.class,0);
		}
		public ReplDbPolicyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replDbPolicy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterReplDbPolicy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitReplDbPolicy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitReplDbPolicy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplDbPolicyContext replDbPolicy() throws RecognitionException {
		ReplDbPolicyContext _localctx = new ReplDbPolicyContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_replDbPolicy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1115);
			((ReplDbPolicyContext)_localctx).dbName = id_();
			setState(1118);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(1116);
				match(DOT);
				setState(1117);
				((ReplDbPolicyContext)_localctx).tablePolicy = replTableLevelPolicy();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplLoadStatementContext extends ParserRuleContext {
		public ReplDbPolicyContext sourceDbPolicy;
		public Id_Context dbName;
		public ReplConfigsContext replConf;
		public TerminalNode KW_REPL() { return getToken(HiveParser.KW_REPL, 0); }
		public TerminalNode KW_LOAD() { return getToken(HiveParser.KW_LOAD, 0); }
		public ReplDbPolicyContext replDbPolicy() {
			return getRuleContext(ReplDbPolicyContext.class,0);
		}
		public TerminalNode KW_INTO() { return getToken(HiveParser.KW_INTO, 0); }
		public TerminalNode KW_WITH() { return getToken(HiveParser.KW_WITH, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public ReplConfigsContext replConfigs() {
			return getRuleContext(ReplConfigsContext.class,0);
		}
		public ReplLoadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replLoadStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterReplLoadStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitReplLoadStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitReplLoadStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplLoadStatementContext replLoadStatement() throws RecognitionException {
		ReplLoadStatementContext _localctx = new ReplLoadStatementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_replLoadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1120);
			match(KW_REPL);
			setState(1121);
			match(KW_LOAD);
			setState(1122);
			((ReplLoadStatementContext)_localctx).sourceDbPolicy = replDbPolicy();
			setState(1125);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_INTO) {
				{
				setState(1123);
				match(KW_INTO);
				setState(1124);
				((ReplLoadStatementContext)_localctx).dbName = id_();
				}
			}

			setState(1129);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WITH) {
				{
				setState(1127);
				match(KW_WITH);
				setState(1128);
				((ReplLoadStatementContext)_localctx).replConf = replConfigs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplConfigsContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public ReplConfigsListContext replConfigsList() {
			return getRuleContext(ReplConfigsListContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public ReplConfigsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replConfigs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterReplConfigs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitReplConfigs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitReplConfigs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplConfigsContext replConfigs() throws RecognitionException {
		ReplConfigsContext _localctx = new ReplConfigsContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_replConfigs);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1131);
			match(LPAREN);
			setState(1132);
			replConfigsList();
			setState(1133);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplConfigsListContext extends ParserRuleContext {
		public List<KeyValuePropertyContext> keyValueProperty() {
			return getRuleContexts(KeyValuePropertyContext.class);
		}
		public KeyValuePropertyContext keyValueProperty(int i) {
			return getRuleContext(KeyValuePropertyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public ReplConfigsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replConfigsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterReplConfigsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitReplConfigsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitReplConfigsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplConfigsListContext replConfigsList() throws RecognitionException {
		ReplConfigsListContext _localctx = new ReplConfigsListContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_replConfigsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1135);
			keyValueProperty();
			setState(1140);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1136);
				match(COMMA);
				setState(1137);
				keyValueProperty();
				}
				}
				setState(1142);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplTableLevelPolicyContext extends ParserRuleContext {
		public Token replTablesIncludeList;
		public Token replTablesExcludeList;
		public List<TerminalNode> StringLiteral() { return getTokens(HiveParser.StringLiteral); }
		public TerminalNode StringLiteral(int i) {
			return getToken(HiveParser.StringLiteral, i);
		}
		public TerminalNode DOT() { return getToken(HiveParser.DOT, 0); }
		public ReplTableLevelPolicyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replTableLevelPolicy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterReplTableLevelPolicy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitReplTableLevelPolicy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitReplTableLevelPolicy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplTableLevelPolicyContext replTableLevelPolicy() throws RecognitionException {
		ReplTableLevelPolicyContext _localctx = new ReplTableLevelPolicyContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_replTableLevelPolicy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1143);
			((ReplTableLevelPolicyContext)_localctx).replTablesIncludeList = match(StringLiteral);
			setState(1146);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(1144);
				match(DOT);
				setState(1145);
				((ReplTableLevelPolicyContext)_localctx).replTablesExcludeList = match(StringLiteral);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplStatusStatementContext extends ParserRuleContext {
		public Id_Context dbName;
		public ReplConfigsContext replConf;
		public TerminalNode KW_REPL() { return getToken(HiveParser.KW_REPL, 0); }
		public TerminalNode KW_STATUS() { return getToken(HiveParser.KW_STATUS, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode KW_WITH() { return getToken(HiveParser.KW_WITH, 0); }
		public ReplConfigsContext replConfigs() {
			return getRuleContext(ReplConfigsContext.class,0);
		}
		public ReplStatusStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replStatusStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterReplStatusStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitReplStatusStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitReplStatusStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplStatusStatementContext replStatusStatement() throws RecognitionException {
		ReplStatusStatementContext _localctx = new ReplStatusStatementContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_replStatusStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1148);
			match(KW_REPL);
			setState(1149);
			match(KW_STATUS);
			setState(1150);
			((ReplStatusStatementContext)_localctx).dbName = id_();
			setState(1153);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WITH) {
				{
				setState(1151);
				match(KW_WITH);
				setState(1152);
				((ReplStatusStatementContext)_localctx).replConf = replConfigs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DdlStatementContext extends ParserRuleContext {
		public CreateDatabaseStatementContext createDatabaseStatement() {
			return getRuleContext(CreateDatabaseStatementContext.class,0);
		}
		public SwitchDatabaseStatementContext switchDatabaseStatement() {
			return getRuleContext(SwitchDatabaseStatementContext.class,0);
		}
		public DropDatabaseStatementContext dropDatabaseStatement() {
			return getRuleContext(DropDatabaseStatementContext.class,0);
		}
		public CreateTableStatementContext createTableStatement() {
			return getRuleContext(CreateTableStatementContext.class,0);
		}
		public DropTableStatementContext dropTableStatement() {
			return getRuleContext(DropTableStatementContext.class,0);
		}
		public TruncateTableStatementContext truncateTableStatement() {
			return getRuleContext(TruncateTableStatementContext.class,0);
		}
		public AlterStatementContext alterStatement() {
			return getRuleContext(AlterStatementContext.class,0);
		}
		public DescStatementContext descStatement() {
			return getRuleContext(DescStatementContext.class,0);
		}
		public ShowStatementContext showStatement() {
			return getRuleContext(ShowStatementContext.class,0);
		}
		public MetastoreCheckContext metastoreCheck() {
			return getRuleContext(MetastoreCheckContext.class,0);
		}
		public CreateViewStatementContext createViewStatement() {
			return getRuleContext(CreateViewStatementContext.class,0);
		}
		public CreateMaterializedViewStatementContext createMaterializedViewStatement() {
			return getRuleContext(CreateMaterializedViewStatementContext.class,0);
		}
		public CreateScheduledQueryStatementContext createScheduledQueryStatement() {
			return getRuleContext(CreateScheduledQueryStatementContext.class,0);
		}
		public AlterScheduledQueryStatementContext alterScheduledQueryStatement() {
			return getRuleContext(AlterScheduledQueryStatementContext.class,0);
		}
		public DropScheduledQueryStatementContext dropScheduledQueryStatement() {
			return getRuleContext(DropScheduledQueryStatementContext.class,0);
		}
		public DropViewStatementContext dropViewStatement() {
			return getRuleContext(DropViewStatementContext.class,0);
		}
		public DropMaterializedViewStatementContext dropMaterializedViewStatement() {
			return getRuleContext(DropMaterializedViewStatementContext.class,0);
		}
		public CreateFunctionStatementContext createFunctionStatement() {
			return getRuleContext(CreateFunctionStatementContext.class,0);
		}
		public CreateMacroStatementContext createMacroStatement() {
			return getRuleContext(CreateMacroStatementContext.class,0);
		}
		public DropFunctionStatementContext dropFunctionStatement() {
			return getRuleContext(DropFunctionStatementContext.class,0);
		}
		public ReloadFunctionsStatementContext reloadFunctionsStatement() {
			return getRuleContext(ReloadFunctionsStatementContext.class,0);
		}
		public DropMacroStatementContext dropMacroStatement() {
			return getRuleContext(DropMacroStatementContext.class,0);
		}
		public AnalyzeStatementContext analyzeStatement() {
			return getRuleContext(AnalyzeStatementContext.class,0);
		}
		public LockStatementContext lockStatement() {
			return getRuleContext(LockStatementContext.class,0);
		}
		public UnlockStatementContext unlockStatement() {
			return getRuleContext(UnlockStatementContext.class,0);
		}
		public LockDatabaseContext lockDatabase() {
			return getRuleContext(LockDatabaseContext.class,0);
		}
		public UnlockDatabaseContext unlockDatabase() {
			return getRuleContext(UnlockDatabaseContext.class,0);
		}
		public CreateRoleStatementContext createRoleStatement() {
			return getRuleContext(CreateRoleStatementContext.class,0);
		}
		public DropRoleStatementContext dropRoleStatement() {
			return getRuleContext(DropRoleStatementContext.class,0);
		}
		public GrantPrivilegesContext grantPrivileges() {
			return getRuleContext(GrantPrivilegesContext.class,0);
		}
		public RevokePrivilegesContext revokePrivileges() {
			return getRuleContext(RevokePrivilegesContext.class,0);
		}
		public ShowGrantsContext showGrants() {
			return getRuleContext(ShowGrantsContext.class,0);
		}
		public ShowRoleGrantsContext showRoleGrants() {
			return getRuleContext(ShowRoleGrantsContext.class,0);
		}
		public ShowRolePrincipalsContext showRolePrincipals() {
			return getRuleContext(ShowRolePrincipalsContext.class,0);
		}
		public ShowRolesContext showRoles() {
			return getRuleContext(ShowRolesContext.class,0);
		}
		public GrantRoleContext grantRole() {
			return getRuleContext(GrantRoleContext.class,0);
		}
		public RevokeRoleContext revokeRole() {
			return getRuleContext(RevokeRoleContext.class,0);
		}
		public SetRoleContext setRole() {
			return getRuleContext(SetRoleContext.class,0);
		}
		public ShowCurrentRoleContext showCurrentRole() {
			return getRuleContext(ShowCurrentRoleContext.class,0);
		}
		public AbortTransactionStatementContext abortTransactionStatement() {
			return getRuleContext(AbortTransactionStatementContext.class,0);
		}
		public AbortCompactionStatementContext abortCompactionStatement() {
			return getRuleContext(AbortCompactionStatementContext.class,0);
		}
		public KillQueryStatementContext killQueryStatement() {
			return getRuleContext(KillQueryStatementContext.class,0);
		}
		public ResourcePlanDdlStatementsContext resourcePlanDdlStatements() {
			return getRuleContext(ResourcePlanDdlStatementsContext.class,0);
		}
		public CreateDataConnectorStatementContext createDataConnectorStatement() {
			return getRuleContext(CreateDataConnectorStatementContext.class,0);
		}
		public DropDataConnectorStatementContext dropDataConnectorStatement() {
			return getRuleContext(DropDataConnectorStatementContext.class,0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDdlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDdlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDdlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DdlStatementContext ddlStatement() throws RecognitionException {
		DdlStatementContext _localctx = new DdlStatementContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_ddlStatement);
		try {
			setState(1200);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1155);
				createDatabaseStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1156);
				switchDatabaseStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1157);
				dropDatabaseStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1158);
				createTableStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1159);
				dropTableStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1160);
				truncateTableStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1161);
				alterStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1162);
				descStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1163);
				showStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1164);
				metastoreCheck();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1165);
				createViewStatement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1166);
				createMaterializedViewStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1167);
				createScheduledQueryStatement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1168);
				alterScheduledQueryStatement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1169);
				dropScheduledQueryStatement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1170);
				dropViewStatement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1171);
				dropMaterializedViewStatement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1172);
				createFunctionStatement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1173);
				createMacroStatement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1174);
				dropFunctionStatement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1175);
				reloadFunctionsStatement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1176);
				dropMacroStatement();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1177);
				analyzeStatement();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1178);
				lockStatement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1179);
				unlockStatement();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1180);
				lockDatabase();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1181);
				unlockDatabase();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1182);
				createRoleStatement();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1183);
				dropRoleStatement();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1184);
				grantPrivileges();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1185);
				revokePrivileges();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1186);
				showGrants();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1187);
				showRoleGrants();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1188);
				showRolePrincipals();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1189);
				showRoles();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1190);
				grantRole();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1191);
				revokeRole();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1192);
				setRole();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1193);
				showCurrentRole();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1194);
				abortTransactionStatement();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1195);
				abortCompactionStatement();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1196);
				killQueryStatement();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1197);
				resourcePlanDdlStatements();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1198);
				createDataConnectorStatement();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(1199);
				dropDataConnectorStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode KW_IF() { return getToken(HiveParser.KW_IF, 0); }
		public TerminalNode KW_EXISTS() { return getToken(HiveParser.KW_EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterIfExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitIfExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitIfExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1202);
			match(KW_IF);
			setState(1203);
			match(KW_EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RestrictOrCascadeContext extends ParserRuleContext {
		public TerminalNode KW_RESTRICT() { return getToken(HiveParser.KW_RESTRICT, 0); }
		public TerminalNode KW_CASCADE() { return getToken(HiveParser.KW_CASCADE, 0); }
		public RestrictOrCascadeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restrictOrCascade; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterRestrictOrCascade(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitRestrictOrCascade(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitRestrictOrCascade(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RestrictOrCascadeContext restrictOrCascade() throws RecognitionException {
		RestrictOrCascadeContext _localctx = new RestrictOrCascadeContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_restrictOrCascade);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1205);
			_la = _input.LA(1);
			if ( !(_la==KW_CASCADE || _la==KW_RESTRICT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode KW_IF() { return getToken(HiveParser.KW_IF, 0); }
		public TerminalNode KW_NOT() { return getToken(HiveParser.KW_NOT, 0); }
		public TerminalNode KW_EXISTS() { return getToken(HiveParser.KW_EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterIfNotExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitIfNotExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitIfNotExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1207);
			match(KW_IF);
			setState(1208);
			match(KW_NOT);
			setState(1209);
			match(KW_EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForceContext extends ParserRuleContext {
		public TerminalNode KW_FORCE() { return getToken(HiveParser.KW_FORCE, 0); }
		public ForceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_force; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterForce(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitForce(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitForce(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForceContext force() throws RecognitionException {
		ForceContext _localctx = new ForceContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_force);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1211);
			match(KW_FORCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RewriteEnabledContext extends ParserRuleContext {
		public TerminalNode KW_ENABLE() { return getToken(HiveParser.KW_ENABLE, 0); }
		public TerminalNode KW_REWRITE() { return getToken(HiveParser.KW_REWRITE, 0); }
		public RewriteEnabledContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rewriteEnabled; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterRewriteEnabled(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitRewriteEnabled(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitRewriteEnabled(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RewriteEnabledContext rewriteEnabled() throws RecognitionException {
		RewriteEnabledContext _localctx = new RewriteEnabledContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_rewriteEnabled);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1213);
			match(KW_ENABLE);
			setState(1214);
			match(KW_REWRITE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RewriteDisabledContext extends ParserRuleContext {
		public TerminalNode KW_DISABLE() { return getToken(HiveParser.KW_DISABLE, 0); }
		public TerminalNode KW_REWRITE() { return getToken(HiveParser.KW_REWRITE, 0); }
		public RewriteDisabledContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rewriteDisabled; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterRewriteDisabled(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitRewriteDisabled(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitRewriteDisabled(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RewriteDisabledContext rewriteDisabled() throws RecognitionException {
		RewriteDisabledContext _localctx = new RewriteDisabledContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_rewriteDisabled);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1216);
			match(KW_DISABLE);
			setState(1217);
			match(KW_REWRITE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StoredAsDirsContext extends ParserRuleContext {
		public TerminalNode KW_STORED() { return getToken(HiveParser.KW_STORED, 0); }
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public TerminalNode KW_DIRECTORIES() { return getToken(HiveParser.KW_DIRECTORIES, 0); }
		public StoredAsDirsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storedAsDirs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterStoredAsDirs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitStoredAsDirs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitStoredAsDirs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StoredAsDirsContext storedAsDirs() throws RecognitionException {
		StoredAsDirsContext _localctx = new StoredAsDirsContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_storedAsDirs);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1219);
			match(KW_STORED);
			setState(1220);
			match(KW_AS);
			setState(1221);
			match(KW_DIRECTORIES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrReplaceContext extends ParserRuleContext {
		public TerminalNode KW_OR() { return getToken(HiveParser.KW_OR, 0); }
		public TerminalNode KW_REPLACE() { return getToken(HiveParser.KW_REPLACE, 0); }
		public OrReplaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orReplace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterOrReplace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitOrReplace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitOrReplace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrReplaceContext orReplace() throws RecognitionException {
		OrReplaceContext _localctx = new OrReplaceContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_orReplace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1223);
			match(KW_OR);
			setState(1224);
			match(KW_REPLACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateDatabaseStatementContext extends ParserRuleContext {
		public Id_Context name;
		public DbPropertiesContext dbprops;
		public TerminalNode KW_CREATE() { return getToken(HiveParser.KW_CREATE, 0); }
		public Db_schemaContext db_schema() {
			return getRuleContext(Db_schemaContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public DatabaseCommentContext databaseComment() {
			return getRuleContext(DatabaseCommentContext.class,0);
		}
		public DbLocationContext dbLocation() {
			return getRuleContext(DbLocationContext.class,0);
		}
		public DbManagedLocationContext dbManagedLocation() {
			return getRuleContext(DbManagedLocationContext.class,0);
		}
		public TerminalNode KW_WITH() { return getToken(HiveParser.KW_WITH, 0); }
		public TerminalNode KW_DBPROPERTIES() { return getToken(HiveParser.KW_DBPROPERTIES, 0); }
		public DbPropertiesContext dbProperties() {
			return getRuleContext(DbPropertiesContext.class,0);
		}
		public TerminalNode KW_REMOTE() { return getToken(HiveParser.KW_REMOTE, 0); }
		public DbConnectorNameContext dbConnectorName() {
			return getRuleContext(DbConnectorNameContext.class,0);
		}
		public CreateDatabaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCreateDatabaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCreateDatabaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCreateDatabaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseStatementContext createDatabaseStatement() throws RecognitionException {
		CreateDatabaseStatementContext _localctx = new CreateDatabaseStatementContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_createDatabaseStatement);
		int _la;
		try {
			setState(1262);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1226);
				match(KW_CREATE);
				setState(1227);
				db_schema();
				setState(1229);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_IF) {
					{
					setState(1228);
					ifNotExists();
					}
				}

				setState(1231);
				((CreateDatabaseStatementContext)_localctx).name = id_();
				setState(1233);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_COMMENT) {
					{
					setState(1232);
					databaseComment();
					}
				}

				setState(1236);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_LOCATION) {
					{
					setState(1235);
					dbLocation();
					}
				}

				setState(1239);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_MANAGEDLOCATION) {
					{
					setState(1238);
					dbManagedLocation();
					}
				}

				setState(1244);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_WITH) {
					{
					setState(1241);
					match(KW_WITH);
					setState(1242);
					match(KW_DBPROPERTIES);
					setState(1243);
					((CreateDatabaseStatementContext)_localctx).dbprops = dbProperties();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1246);
				match(KW_CREATE);
				setState(1247);
				match(KW_REMOTE);
				setState(1248);
				db_schema();
				setState(1250);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_IF) {
					{
					setState(1249);
					ifNotExists();
					}
				}

				setState(1252);
				((CreateDatabaseStatementContext)_localctx).name = id_();
				setState(1254);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_COMMENT) {
					{
					setState(1253);
					databaseComment();
					}
				}

				setState(1256);
				dbConnectorName();
				setState(1260);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_WITH) {
					{
					setState(1257);
					match(KW_WITH);
					setState(1258);
					match(KW_DBPROPERTIES);
					setState(1259);
					((CreateDatabaseStatementContext)_localctx).dbprops = dbProperties();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DbLocationContext extends ParserRuleContext {
		public Token locn;
		public TerminalNode KW_LOCATION() { return getToken(HiveParser.KW_LOCATION, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public DbLocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbLocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDbLocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDbLocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDbLocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DbLocationContext dbLocation() throws RecognitionException {
		DbLocationContext _localctx = new DbLocationContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_dbLocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1264);
			match(KW_LOCATION);
			setState(1265);
			((DbLocationContext)_localctx).locn = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DbManagedLocationContext extends ParserRuleContext {
		public Token locn;
		public TerminalNode KW_MANAGEDLOCATION() { return getToken(HiveParser.KW_MANAGEDLOCATION, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public DbManagedLocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbManagedLocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDbManagedLocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDbManagedLocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDbManagedLocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DbManagedLocationContext dbManagedLocation() throws RecognitionException {
		DbManagedLocationContext _localctx = new DbManagedLocationContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_dbManagedLocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1267);
			match(KW_MANAGEDLOCATION);
			setState(1268);
			((DbManagedLocationContext)_localctx).locn = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DbPropertiesContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public DbPropertiesListContext dbPropertiesList() {
			return getRuleContext(DbPropertiesListContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public DbPropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbProperties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDbProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDbProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDbProperties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DbPropertiesContext dbProperties() throws RecognitionException {
		DbPropertiesContext _localctx = new DbPropertiesContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_dbProperties);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1270);
			match(LPAREN);
			setState(1271);
			dbPropertiesList();
			setState(1272);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DbPropertiesListContext extends ParserRuleContext {
		public List<KeyValuePropertyContext> keyValueProperty() {
			return getRuleContexts(KeyValuePropertyContext.class);
		}
		public KeyValuePropertyContext keyValueProperty(int i) {
			return getRuleContext(KeyValuePropertyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public DbPropertiesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbPropertiesList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDbPropertiesList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDbPropertiesList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDbPropertiesList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DbPropertiesListContext dbPropertiesList() throws RecognitionException {
		DbPropertiesListContext _localctx = new DbPropertiesListContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_dbPropertiesList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1274);
			keyValueProperty();
			setState(1279);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1275);
				match(COMMA);
				setState(1276);
				keyValueProperty();
				}
				}
				setState(1281);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DbConnectorNameContext extends ParserRuleContext {
		public Id_Context dcName;
		public TerminalNode KW_USING() { return getToken(HiveParser.KW_USING, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public DbConnectorNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbConnectorName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDbConnectorName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDbConnectorName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDbConnectorName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DbConnectorNameContext dbConnectorName() throws RecognitionException {
		DbConnectorNameContext _localctx = new DbConnectorNameContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_dbConnectorName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1282);
			match(KW_USING);
			setState(1283);
			((DbConnectorNameContext)_localctx).dcName = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SwitchDatabaseStatementContext extends ParserRuleContext {
		public TerminalNode KW_USE() { return getToken(HiveParser.KW_USE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public SwitchDatabaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switchDatabaseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSwitchDatabaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSwitchDatabaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSwitchDatabaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SwitchDatabaseStatementContext switchDatabaseStatement() throws RecognitionException {
		SwitchDatabaseStatementContext _localctx = new SwitchDatabaseStatementContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_switchDatabaseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1285);
			match(KW_USE);
			setState(1286);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropDatabaseStatementContext extends ParserRuleContext {
		public TerminalNode KW_DROP() { return getToken(HiveParser.KW_DROP, 0); }
		public Db_schemaContext db_schema() {
			return getRuleContext(Db_schemaContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public RestrictOrCascadeContext restrictOrCascade() {
			return getRuleContext(RestrictOrCascadeContext.class,0);
		}
		public DropDatabaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabaseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDropDatabaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDropDatabaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDropDatabaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseStatementContext dropDatabaseStatement() throws RecognitionException {
		DropDatabaseStatementContext _localctx = new DropDatabaseStatementContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_dropDatabaseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1288);
			match(KW_DROP);
			setState(1289);
			db_schema();
			setState(1291);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_IF) {
				{
				setState(1290);
				ifExists();
				}
			}

			setState(1293);
			id_();
			setState(1295);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_CASCADE || _la==KW_RESTRICT) {
				{
				setState(1294);
				restrictOrCascade();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatabaseCommentContext extends ParserRuleContext {
		public Token comment;
		public TerminalNode KW_COMMENT() { return getToken(HiveParser.KW_COMMENT, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public DatabaseCommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseComment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDatabaseComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDatabaseComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDatabaseComment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseCommentContext databaseComment() throws RecognitionException {
		DatabaseCommentContext _localctx = new DatabaseCommentContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_databaseComment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1297);
			match(KW_COMMENT);
			setState(1298);
			((DatabaseCommentContext)_localctx).comment = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TruncateTableStatementContext extends ParserRuleContext {
		public TerminalNode KW_TRUNCATE() { return getToken(HiveParser.KW_TRUNCATE, 0); }
		public TablePartitionPrefixContext tablePartitionPrefix() {
			return getRuleContext(TablePartitionPrefixContext.class,0);
		}
		public TerminalNode KW_TABLE() { return getToken(HiveParser.KW_TABLE, 0); }
		public TerminalNode KW_COLUMNS() { return getToken(HiveParser.KW_COLUMNS, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public ColumnNameListContext columnNameList() {
			return getRuleContext(ColumnNameListContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public ForceContext force() {
			return getRuleContext(ForceContext.class,0);
		}
		public TruncateTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTruncateTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTruncateTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTruncateTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateTableStatementContext truncateTableStatement() throws RecognitionException {
		TruncateTableStatementContext _localctx = new TruncateTableStatementContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_truncateTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1300);
			match(KW_TRUNCATE);
			setState(1302);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_TABLE) {
				{
				setState(1301);
				match(KW_TABLE);
				}
			}

			setState(1304);
			tablePartitionPrefix();
			setState(1310);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COLUMNS) {
				{
				setState(1305);
				match(KW_COLUMNS);
				setState(1306);
				match(LPAREN);
				setState(1307);
				columnNameList();
				setState(1308);
				match(RPAREN);
				}
			}

			setState(1313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_FORCE) {
				{
				setState(1312);
				force();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropTableStatementContext extends ParserRuleContext {
		public TerminalNode KW_DROP() { return getToken(HiveParser.KW_DROP, 0); }
		public TerminalNode KW_TABLE() { return getToken(HiveParser.KW_TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode KW_PURGE() { return getToken(HiveParser.KW_PURGE, 0); }
		public ReplicationClauseContext replicationClause() {
			return getRuleContext(ReplicationClauseContext.class,0);
		}
		public DropTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDropTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDropTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDropTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableStatementContext dropTableStatement() throws RecognitionException {
		DropTableStatementContext _localctx = new DropTableStatementContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_dropTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1315);
			match(KW_DROP);
			setState(1316);
			match(KW_TABLE);
			setState(1318);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_IF) {
				{
				setState(1317);
				ifExists();
				}
			}

			setState(1320);
			tableName();
			setState(1322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PURGE) {
				{
				setState(1321);
				match(KW_PURGE);
				}
			}

			setState(1325);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_FOR) {
				{
				setState(1324);
				replicationClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InputFileFormatContext extends ParserRuleContext {
		public Token inFmt;
		public Token serdeCls;
		public TerminalNode KW_INPUTFORMAT() { return getToken(HiveParser.KW_INPUTFORMAT, 0); }
		public TerminalNode KW_SERDE() { return getToken(HiveParser.KW_SERDE, 0); }
		public List<TerminalNode> StringLiteral() { return getTokens(HiveParser.StringLiteral); }
		public TerminalNode StringLiteral(int i) {
			return getToken(HiveParser.StringLiteral, i);
		}
		public InputFileFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inputFileFormat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterInputFileFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitInputFileFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitInputFileFormat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InputFileFormatContext inputFileFormat() throws RecognitionException {
		InputFileFormatContext _localctx = new InputFileFormatContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_inputFileFormat);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1327);
			match(KW_INPUTFORMAT);
			setState(1328);
			((InputFileFormatContext)_localctx).inFmt = match(StringLiteral);
			setState(1329);
			match(KW_SERDE);
			setState(1330);
			((InputFileFormatContext)_localctx).serdeCls = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TabTypeExprContext extends ParserRuleContext {
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(HiveParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(HiveParser.DOT, i);
		}
		public List<TerminalNode> KW_ELEM_TYPE() { return getTokens(HiveParser.KW_ELEM_TYPE); }
		public TerminalNode KW_ELEM_TYPE(int i) {
			return getToken(HiveParser.KW_ELEM_TYPE, i);
		}
		public List<TerminalNode> KW_KEY_TYPE() { return getTokens(HiveParser.KW_KEY_TYPE); }
		public TerminalNode KW_KEY_TYPE(int i) {
			return getToken(HiveParser.KW_KEY_TYPE, i);
		}
		public List<TerminalNode> KW_VALUE_TYPE() { return getTokens(HiveParser.KW_VALUE_TYPE); }
		public TerminalNode KW_VALUE_TYPE(int i) {
			return getToken(HiveParser.KW_VALUE_TYPE, i);
		}
		public TabTypeExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tabTypeExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTabTypeExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTabTypeExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTabTypeExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TabTypeExprContext tabTypeExpr() throws RecognitionException {
		TabTypeExprContext _localctx = new TabTypeExprContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_tabTypeExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1332);
			id_();
			setState(1335);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(1333);
				match(DOT);
				setState(1334);
				id_();
				}
			}

			setState(1350);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				setState(1337);
				id_();
				setState(1347);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DOT) {
					{
					{
					setState(1338);
					match(DOT);
					setState(1343);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
					case 1:
						{
						setState(1339);
						match(KW_ELEM_TYPE);
						}
						break;
					case 2:
						{
						setState(1340);
						match(KW_KEY_TYPE);
						}
						break;
					case 3:
						{
						setState(1341);
						match(KW_VALUE_TYPE);
						}
						break;
					case 4:
						{
						setState(1342);
						id_();
						}
						break;
					}
					}
					}
					setState(1349);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartTypeExprContext extends ParserRuleContext {
		public TabTypeExprContext tabTypeExpr() {
			return getRuleContext(TabTypeExprContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public PartTypeExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partTypeExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPartTypeExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPartTypeExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPartTypeExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartTypeExprContext partTypeExpr() throws RecognitionException {
		PartTypeExprContext _localctx = new PartTypeExprContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_partTypeExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1352);
			tabTypeExpr();
			setState(1354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PARTITION) {
				{
				setState(1353);
				partitionSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TabPartColTypeExprContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public ExtColumnNameContext extColumnName() {
			return getRuleContext(ExtColumnNameContext.class,0);
		}
		public TabPartColTypeExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tabPartColTypeExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTabPartColTypeExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTabPartColTypeExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTabPartColTypeExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TabPartColTypeExprContext tabPartColTypeExpr() throws RecognitionException {
		TabPartColTypeExprContext _localctx = new TabPartColTypeExprContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_tabPartColTypeExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1356);
			tableName();
			setState(1358);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PARTITION) {
				{
				setState(1357);
				partitionSpec();
				}
			}

			setState(1361);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 808078815591695742L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 1083038567331911621L) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 8916819943869537315L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & 4159991143015340909L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8484708576009596927L) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & 17776728909112555L) != 0) || _la==Identifier) {
				{
				setState(1360);
				extColumnName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DescStatementContext extends ParserRuleContext {
		public Id_Context dbName;
		public Id_Context dcName;
		public DescFuncNamesContext name;
		public Token descOptions;
		public TabPartColTypeExprContext parttype;
		public TerminalNode KW_DESCRIBE() { return getToken(HiveParser.KW_DESCRIBE, 0); }
		public TerminalNode KW_DESC() { return getToken(HiveParser.KW_DESC, 0); }
		public Db_schemaContext db_schema() {
			return getRuleContext(Db_schemaContext.class,0);
		}
		public TerminalNode KW_DATACONNECTOR() { return getToken(HiveParser.KW_DATACONNECTOR, 0); }
		public TerminalNode KW_FUNCTION() { return getToken(HiveParser.KW_FUNCTION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public DescFuncNamesContext descFuncNames() {
			return getRuleContext(DescFuncNamesContext.class,0);
		}
		public TabPartColTypeExprContext tabPartColTypeExpr() {
			return getRuleContext(TabPartColTypeExprContext.class,0);
		}
		public TerminalNode KW_EXTENDED() { return getToken(HiveParser.KW_EXTENDED, 0); }
		public TerminalNode KW_FORMATTED() { return getToken(HiveParser.KW_FORMATTED, 0); }
		public DescStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_descStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDescStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDescStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDescStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescStatementContext descStatement() throws RecognitionException {
		DescStatementContext _localctx = new DescStatementContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_descStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1363);
			_la = _input.LA(1);
			if ( !(_la==KW_DESC || _la==KW_DESCRIBE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1386);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				setState(1364);
				db_schema();
				setState(1366);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_EXTENDED) {
					{
					setState(1365);
					match(KW_EXTENDED);
					}
				}

				setState(1368);
				((DescStatementContext)_localctx).dbName = id_();
				}
				break;
			case 2:
				{
				setState(1370);
				match(KW_DATACONNECTOR);
				setState(1372);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_EXTENDED) {
					{
					setState(1371);
					match(KW_EXTENDED);
					}
				}

				setState(1374);
				((DescStatementContext)_localctx).dcName = id_();
				}
				break;
			case 3:
				{
				setState(1375);
				match(KW_FUNCTION);
				setState(1377);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_EXTENDED) {
					{
					setState(1376);
					match(KW_EXTENDED);
					}
				}

				setState(1379);
				((DescStatementContext)_localctx).name = descFuncNames();
				}
				break;
			case 4:
				{
				setState(1382);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_FORMATTED:
					{
					setState(1380);
					((DescStatementContext)_localctx).descOptions = match(KW_FORMATTED);
					}
					break;
				case KW_EXTENDED:
					{
					setState(1381);
					((DescStatementContext)_localctx).descOptions = match(KW_EXTENDED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1384);
				((DescStatementContext)_localctx).parttype = tabPartColTypeExpr();
				}
				break;
			case 5:
				{
				setState(1385);
				((DescStatementContext)_localctx).parttype = tabPartColTypeExpr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AnalyzeStatementContext extends ParserRuleContext {
		public TableOrPartitionContext parttype;
		public Token noscan;
		public ColumnNameListContext statsColumnName;
		public TerminalNode KW_ANALYZE() { return getToken(HiveParser.KW_ANALYZE, 0); }
		public TerminalNode KW_TABLE() { return getToken(HiveParser.KW_TABLE, 0); }
		public TableOrPartitionContext tableOrPartition() {
			return getRuleContext(TableOrPartitionContext.class,0);
		}
		public TerminalNode KW_COMPUTE() { return getToken(HiveParser.KW_COMPUTE, 0); }
		public TerminalNode KW_STATISTICS() { return getToken(HiveParser.KW_STATISTICS, 0); }
		public TerminalNode KW_CACHE() { return getToken(HiveParser.KW_CACHE, 0); }
		public TerminalNode KW_METADATA() { return getToken(HiveParser.KW_METADATA, 0); }
		public TerminalNode KW_FOR() { return getToken(HiveParser.KW_FOR, 0); }
		public TerminalNode KW_COLUMNS() { return getToken(HiveParser.KW_COLUMNS, 0); }
		public TerminalNode KW_NOSCAN() { return getToken(HiveParser.KW_NOSCAN, 0); }
		public ColumnNameListContext columnNameList() {
			return getRuleContext(ColumnNameListContext.class,0);
		}
		public AnalyzeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAnalyzeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAnalyzeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAnalyzeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeStatementContext analyzeStatement() throws RecognitionException {
		AnalyzeStatementContext _localctx = new AnalyzeStatementContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_analyzeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1388);
			match(KW_ANALYZE);
			setState(1389);
			match(KW_TABLE);
			setState(1390);
			((AnalyzeStatementContext)_localctx).parttype = tableOrPartition();
			setState(1403);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_COMPUTE:
				{
				setState(1391);
				match(KW_COMPUTE);
				setState(1392);
				match(KW_STATISTICS);
				setState(1399);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_NOSCAN:
					{
					setState(1393);
					((AnalyzeStatementContext)_localctx).noscan = match(KW_NOSCAN);
					}
					break;
				case KW_FOR:
					{
					setState(1394);
					match(KW_FOR);
					setState(1395);
					match(KW_COLUMNS);
					setState(1397);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 808078815591695742L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 1083038567331911621L) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 8916819943869537315L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & 4159991143015340909L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8484708576009596927L) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & 17776728909112555L) != 0) || _la==Identifier) {
						{
						setState(1396);
						((AnalyzeStatementContext)_localctx).statsColumnName = columnNameList();
						}
					}

					}
					break;
				case EOF:
					break;
				default:
					break;
				}
				}
				break;
			case KW_CACHE:
				{
				setState(1401);
				match(KW_CACHE);
				setState(1402);
				match(KW_METADATA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class From_inContext extends ParserRuleContext {
		public TerminalNode KW_FROM() { return getToken(HiveParser.KW_FROM, 0); }
		public TerminalNode KW_IN() { return getToken(HiveParser.KW_IN, 0); }
		public From_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterFrom_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitFrom_in(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitFrom_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_inContext from_in() throws RecognitionException {
		From_inContext _localctx = new From_inContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_from_in);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1405);
			_la = _input.LA(1);
			if ( !(_la==KW_FROM || _la==KW_IN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Db_schemaContext extends ParserRuleContext {
		public TerminalNode KW_DATABASE() { return getToken(HiveParser.KW_DATABASE, 0); }
		public TerminalNode KW_SCHEMA() { return getToken(HiveParser.KW_SCHEMA, 0); }
		public Db_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDb_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDb_schema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDb_schema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db_schemaContext db_schema() throws RecognitionException {
		Db_schemaContext _localctx = new Db_schemaContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_db_schema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1407);
			_la = _input.LA(1);
			if ( !(_la==KW_DATABASE || _la==KW_SCHEMA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowStatementContext extends ParserRuleContext {
		public Token isExtended;
		public Id_Context db_name;
		public ShowTablesFilterExprContext filter;
		public TableNameContext tabName;
		public Token prptyName;
		public Id_Context dbName;
		public PartTypeExprContext parttype;
		public Id_Context rp_name;
		public TerminalNode KW_SHOW() { return getToken(HiveParser.KW_SHOW, 0); }
		public TerminalNode KW_DATABASES() { return getToken(HiveParser.KW_DATABASES, 0); }
		public TerminalNode KW_SCHEMAS() { return getToken(HiveParser.KW_SCHEMAS, 0); }
		public TerminalNode KW_LIKE() { return getToken(HiveParser.KW_LIKE, 0); }
		public ShowStmtIdentifierContext showStmtIdentifier() {
			return getRuleContext(ShowStmtIdentifierContext.class,0);
		}
		public TerminalNode KW_TABLES() { return getToken(HiveParser.KW_TABLES, 0); }
		public List<From_inContext> from_in() {
			return getRuleContexts(From_inContext.class);
		}
		public From_inContext from_in(int i) {
			return getRuleContext(From_inContext.class,i);
		}
		public TerminalNode KW_EXTENDED() { return getToken(HiveParser.KW_EXTENDED, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public ShowTablesFilterExprContext showTablesFilterExpr() {
			return getRuleContext(ShowTablesFilterExprContext.class,0);
		}
		public TerminalNode KW_VIEWS() { return getToken(HiveParser.KW_VIEWS, 0); }
		public TerminalNode KW_MATERIALIZED() { return getToken(HiveParser.KW_MATERIALIZED, 0); }
		public TerminalNode KW_COLUMNS() { return getToken(HiveParser.KW_COLUMNS, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode KW_SORTED() { return getToken(HiveParser.KW_SORTED, 0); }
		public TerminalNode KW_FUNCTIONS() { return getToken(HiveParser.KW_FUNCTIONS, 0); }
		public ShowFunctionIdentifierContext showFunctionIdentifier() {
			return getRuleContext(ShowFunctionIdentifierContext.class,0);
		}
		public TerminalNode KW_PARTITIONS() { return getToken(HiveParser.KW_PARTITIONS, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public TerminalNode KW_CREATE() { return getToken(HiveParser.KW_CREATE, 0); }
		public Db_schemaContext db_schema() {
			return getRuleContext(Db_schemaContext.class,0);
		}
		public TerminalNode KW_TABLE() { return getToken(HiveParser.KW_TABLE, 0); }
		public TerminalNode KW_TBLPROPERTIES() { return getToken(HiveParser.KW_TBLPROPERTIES, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TerminalNode KW_LOCKS() { return getToken(HiveParser.KW_LOCKS, 0); }
		public PartTypeExprContext partTypeExpr() {
			return getRuleContext(PartTypeExprContext.class,0);
		}
		public TerminalNode KW_COMPACTIONS() { return getToken(HiveParser.KW_COMPACTIONS, 0); }
		public CompactionIdContext compactionId() {
			return getRuleContext(CompactionIdContext.class,0);
		}
		public CompactionPoolContext compactionPool() {
			return getRuleContext(CompactionPoolContext.class,0);
		}
		public CompactionTypeContext compactionType() {
			return getRuleContext(CompactionTypeContext.class,0);
		}
		public CompactionStatusContext compactionStatus() {
			return getRuleContext(CompactionStatusContext.class,0);
		}
		public TerminalNode KW_TRANSACTIONS() { return getToken(HiveParser.KW_TRANSACTIONS, 0); }
		public TerminalNode KW_CONF() { return getToken(HiveParser.KW_CONF, 0); }
		public TerminalNode KW_RESOURCE() { return getToken(HiveParser.KW_RESOURCE, 0); }
		public TerminalNode KW_PLAN() { return getToken(HiveParser.KW_PLAN, 0); }
		public TerminalNode KW_PLANS() { return getToken(HiveParser.KW_PLANS, 0); }
		public TerminalNode KW_DATACONNECTORS() { return getToken(HiveParser.KW_DATACONNECTORS, 0); }
		public ShowStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterShowStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitShowStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitShowStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowStatementContext showStatement() throws RecognitionException {
		ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_showStatement);
		int _la;
		try {
			setState(1590);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1409);
				match(KW_SHOW);
				setState(1410);
				_la = _input.LA(1);
				if ( !(_la==KW_DATABASES || _la==KW_SCHEMAS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1413);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_LIKE) {
					{
					setState(1411);
					match(KW_LIKE);
					setState(1412);
					showStmtIdentifier();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1415);
				match(KW_SHOW);
				setState(1417);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_EXTENDED) {
					{
					setState(1416);
					((ShowStatementContext)_localctx).isExtended = match(KW_EXTENDED);
					}
				}

				setState(1419);
				match(KW_TABLES);
				setState(1423);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_FROM || _la==KW_IN) {
					{
					setState(1420);
					from_in();
					setState(1421);
					((ShowStatementContext)_localctx).db_name = id_();
					}
				}

				setState(1426);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 808078815591695742L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 1083038567331911621L) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 8916837536055581731L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & 4159991143015340909L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8484708576009596927L) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & 17794321095156971L) != 0) || _la==StringLiteral || _la==Identifier) {
					{
					setState(1425);
					((ShowStatementContext)_localctx).filter = showTablesFilterExpr();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1428);
				match(KW_SHOW);
				setState(1429);
				match(KW_VIEWS);
				setState(1433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_FROM || _la==KW_IN) {
					{
					setState(1430);
					from_in();
					setState(1431);
					((ShowStatementContext)_localctx).db_name = id_();
					}
				}

				setState(1438);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_LIKE:
					{
					setState(1435);
					match(KW_LIKE);
					setState(1436);
					showStmtIdentifier();
					}
					break;
				case KW_ABORT:
				case KW_ACTIVATE:
				case KW_ACTIVE:
				case KW_ADD:
				case KW_ADMIN:
				case KW_AFTER:
				case KW_ALLOC_FRACTION:
				case KW_ANALYZE:
				case KW_ARCHIVE:
				case KW_ASC:
				case KW_AST:
				case KW_AT:
				case KW_AUTOCOMMIT:
				case KW_BATCH:
				case KW_BEFORE:
				case KW_BUCKET:
				case KW_BUCKETS:
				case KW_CACHE:
				case KW_CASCADE:
				case KW_CBO:
				case KW_CHANGE:
				case KW_CHECK:
				case KW_CLUSTER:
				case KW_CLUSTERED:
				case KW_CLUSTERSTATUS:
				case KW_COLLECTION:
				case KW_COLUMNS:
				case KW_COMMENT:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_COMPUTE:
				case KW_CONCATENATE:
				case KW_CONTINUE:
				case KW_COST:
				case KW_CRON:
				case KW_DATA:
				case KW_DATABASES:
				case KW_DATETIME:
				case KW_DAY:
				case KW_DAYOFWEEK:
				case KW_DBPROPERTIES:
				case KW_DCPROPERTIES:
				case KW_DEBUG:
				case KW_DEFAULT:
				case KW_DEFERRED:
				case KW_DEFINED:
				case KW_DELIMITED:
				case KW_DEPENDENCY:
				case KW_DESC:
				case KW_DETAIL:
				case KW_DIRECTORIES:
				case KW_DIRECTORY:
				case KW_DISABLE:
				case KW_DISTRIBUTE:
				case KW_DISTRIBUTED:
				case KW_DO:
				case KW_DOW:
				case KW_DUMP:
				case KW_ELEM_TYPE:
				case KW_ENABLE:
				case KW_ENFORCED:
				case KW_ESCAPED:
				case KW_EVERY:
				case KW_EXCLUSIVE:
				case KW_EXECUTE:
				case KW_EXECUTED:
				case KW_EXPIRE_SNAPSHOTS:
				case KW_EXPLAIN:
				case KW_EXPORT:
				case KW_EXPRESSION:
				case KW_FIELDS:
				case KW_FILE:
				case KW_FILEFORMAT:
				case KW_FIRST:
				case KW_FORMAT:
				case KW_FORMATTED:
				case KW_FUNCTIONS:
				case KW_HOLD_DDLTIME:
				case KW_HOUR:
				case KW_IDXPROPERTIES:
				case KW_IGNORE:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_INPATH:
				case KW_INPUTDRIVER:
				case KW_INPUTFORMAT:
				case KW_ISOLATION:
				case KW_ITEMS:
				case KW_JAR:
				case KW_JOINCOST:
				case KW_KEY:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_KILL:
				case KW_LAST:
				case KW_LEVEL:
				case KW_LIMIT:
				case KW_LINES:
				case KW_LOAD:
				case KW_LOCATION:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_LOGICAL:
				case KW_LONG:
				case KW_MANAGED:
				case KW_MANAGEDLOCATION:
				case KW_MANAGEMENT:
				case KW_MAPJOIN:
				case KW_MAPPING:
				case KW_MATCHED:
				case KW_MATERIALIZED:
				case KW_METADATA:
				case KW_MINUTE:
				case KW_MONTH:
				case KW_MOVE:
				case KW_MSCK:
				case KW_NORELY:
				case KW_NOSCAN:
				case KW_NOVALIDATE:
				case KW_NO_DROP:
				case KW_NULLS:
				case KW_OFFLINE:
				case KW_OFFSET:
				case KW_OPERATOR:
				case KW_OPTION:
				case KW_OUTPUTDRIVER:
				case KW_OUTPUTFORMAT:
				case KW_OVERWRITE:
				case KW_OWNER:
				case KW_PARTITIONED:
				case KW_PARTITIONS:
				case KW_PATH:
				case KW_PLAN:
				case KW_PLANS:
				case KW_PLUS:
				case KW_POOL:
				case KW_PRINCIPALS:
				case KW_PROTECTION:
				case KW_PURGE:
				case KW_QUARTER:
				case KW_QUERY:
				case KW_QUERY_PARALLELISM:
				case KW_READ:
				case KW_READONLY:
				case KW_REBUILD:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_RELOAD:
				case KW_RELY:
				case KW_REMOTE:
				case KW_RENAME:
				case KW_REOPTIMIZATION:
				case KW_REPAIR:
				case KW_REPL:
				case KW_REPLACE:
				case KW_REPLICATION:
				case KW_RESOURCE:
				case KW_RESPECT:
				case KW_RESTRICT:
				case KW_REWRITE:
				case KW_ROLE:
				case KW_ROLES:
				case KW_SCHEDULED:
				case KW_SCHEDULING_POLICY:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SECOND:
				case KW_SEMI:
				case KW_SERDE:
				case KW_SERDEPROPERTIES:
				case KW_SERVER:
				case KW_SETS:
				case KW_SET_CURRENT_SNAPSHOT:
				case KW_SHARED:
				case KW_SHOW:
				case KW_SHOW_DATABASE:
				case KW_SKEWED:
				case KW_SNAPSHOT:
				case KW_SORT:
				case KW_SORTED:
				case KW_SPEC:
				case KW_SSL:
				case KW_STATISTICS:
				case KW_STATUS:
				case KW_STORED:
				case KW_STREAMTABLE:
				case KW_STRING:
				case KW_STRUCT:
				case KW_SUMMARY:
				case KW_SYSTEM_TIME:
				case KW_SYSTEM_VERSION:
				case KW_TABLES:
				case KW_TBLPROPERTIES:
				case KW_TEMPORARY:
				case KW_TERMINATED:
				case KW_TIMESTAMPTZ:
				case KW_TINYINT:
				case KW_TOUCH:
				case KW_TRANSACTION:
				case KW_TRANSACTIONAL:
				case KW_TRANSACTIONS:
				case KW_TRIM:
				case KW_TYPE:
				case KW_UNARCHIVE:
				case KW_UNDO:
				case KW_UNIONTYPE:
				case KW_UNKNOWN:
				case KW_UNLOCK:
				case KW_UNMANAGED:
				case KW_UNSET:
				case KW_UNSIGNED:
				case KW_URI:
				case KW_URL:
				case KW_USE:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_VALIDATE:
				case KW_VALUE_TYPE:
				case KW_VECTORIZATION:
				case KW_VIEW:
				case KW_VIEWS:
				case KW_WAIT:
				case KW_WEEK:
				case KW_WHILE:
				case KW_WITHIN:
				case KW_WORK:
				case KW_WORKLOAD:
				case KW_WRITE:
				case KW_YEAR:
				case KW_ZONE:
				case StringLiteral:
				case Identifier:
					{
					setState(1437);
					showStmtIdentifier();
					}
					break;
				case EOF:
					break;
				default:
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1440);
				match(KW_SHOW);
				setState(1441);
				match(KW_MATERIALIZED);
				setState(1442);
				match(KW_VIEWS);
				setState(1446);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_FROM || _la==KW_IN) {
					{
					setState(1443);
					from_in();
					setState(1444);
					((ShowStatementContext)_localctx).db_name = id_();
					}
				}

				setState(1451);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_LIKE:
					{
					setState(1448);
					match(KW_LIKE);
					setState(1449);
					showStmtIdentifier();
					}
					break;
				case KW_ABORT:
				case KW_ACTIVATE:
				case KW_ACTIVE:
				case KW_ADD:
				case KW_ADMIN:
				case KW_AFTER:
				case KW_ALLOC_FRACTION:
				case KW_ANALYZE:
				case KW_ARCHIVE:
				case KW_ASC:
				case KW_AST:
				case KW_AT:
				case KW_AUTOCOMMIT:
				case KW_BATCH:
				case KW_BEFORE:
				case KW_BUCKET:
				case KW_BUCKETS:
				case KW_CACHE:
				case KW_CASCADE:
				case KW_CBO:
				case KW_CHANGE:
				case KW_CHECK:
				case KW_CLUSTER:
				case KW_CLUSTERED:
				case KW_CLUSTERSTATUS:
				case KW_COLLECTION:
				case KW_COLUMNS:
				case KW_COMMENT:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_COMPUTE:
				case KW_CONCATENATE:
				case KW_CONTINUE:
				case KW_COST:
				case KW_CRON:
				case KW_DATA:
				case KW_DATABASES:
				case KW_DATETIME:
				case KW_DAY:
				case KW_DAYOFWEEK:
				case KW_DBPROPERTIES:
				case KW_DCPROPERTIES:
				case KW_DEBUG:
				case KW_DEFAULT:
				case KW_DEFERRED:
				case KW_DEFINED:
				case KW_DELIMITED:
				case KW_DEPENDENCY:
				case KW_DESC:
				case KW_DETAIL:
				case KW_DIRECTORIES:
				case KW_DIRECTORY:
				case KW_DISABLE:
				case KW_DISTRIBUTE:
				case KW_DISTRIBUTED:
				case KW_DO:
				case KW_DOW:
				case KW_DUMP:
				case KW_ELEM_TYPE:
				case KW_ENABLE:
				case KW_ENFORCED:
				case KW_ESCAPED:
				case KW_EVERY:
				case KW_EXCLUSIVE:
				case KW_EXECUTE:
				case KW_EXECUTED:
				case KW_EXPIRE_SNAPSHOTS:
				case KW_EXPLAIN:
				case KW_EXPORT:
				case KW_EXPRESSION:
				case KW_FIELDS:
				case KW_FILE:
				case KW_FILEFORMAT:
				case KW_FIRST:
				case KW_FORMAT:
				case KW_FORMATTED:
				case KW_FUNCTIONS:
				case KW_HOLD_DDLTIME:
				case KW_HOUR:
				case KW_IDXPROPERTIES:
				case KW_IGNORE:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_INPATH:
				case KW_INPUTDRIVER:
				case KW_INPUTFORMAT:
				case KW_ISOLATION:
				case KW_ITEMS:
				case KW_JAR:
				case KW_JOINCOST:
				case KW_KEY:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_KILL:
				case KW_LAST:
				case KW_LEVEL:
				case KW_LIMIT:
				case KW_LINES:
				case KW_LOAD:
				case KW_LOCATION:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_LOGICAL:
				case KW_LONG:
				case KW_MANAGED:
				case KW_MANAGEDLOCATION:
				case KW_MANAGEMENT:
				case KW_MAPJOIN:
				case KW_MAPPING:
				case KW_MATCHED:
				case KW_MATERIALIZED:
				case KW_METADATA:
				case KW_MINUTE:
				case KW_MONTH:
				case KW_MOVE:
				case KW_MSCK:
				case KW_NORELY:
				case KW_NOSCAN:
				case KW_NOVALIDATE:
				case KW_NO_DROP:
				case KW_NULLS:
				case KW_OFFLINE:
				case KW_OFFSET:
				case KW_OPERATOR:
				case KW_OPTION:
				case KW_OUTPUTDRIVER:
				case KW_OUTPUTFORMAT:
				case KW_OVERWRITE:
				case KW_OWNER:
				case KW_PARTITIONED:
				case KW_PARTITIONS:
				case KW_PATH:
				case KW_PLAN:
				case KW_PLANS:
				case KW_PLUS:
				case KW_POOL:
				case KW_PRINCIPALS:
				case KW_PROTECTION:
				case KW_PURGE:
				case KW_QUARTER:
				case KW_QUERY:
				case KW_QUERY_PARALLELISM:
				case KW_READ:
				case KW_READONLY:
				case KW_REBUILD:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_RELOAD:
				case KW_RELY:
				case KW_REMOTE:
				case KW_RENAME:
				case KW_REOPTIMIZATION:
				case KW_REPAIR:
				case KW_REPL:
				case KW_REPLACE:
				case KW_REPLICATION:
				case KW_RESOURCE:
				case KW_RESPECT:
				case KW_RESTRICT:
				case KW_REWRITE:
				case KW_ROLE:
				case KW_ROLES:
				case KW_SCHEDULED:
				case KW_SCHEDULING_POLICY:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SECOND:
				case KW_SEMI:
				case KW_SERDE:
				case KW_SERDEPROPERTIES:
				case KW_SERVER:
				case KW_SETS:
				case KW_SET_CURRENT_SNAPSHOT:
				case KW_SHARED:
				case KW_SHOW:
				case KW_SHOW_DATABASE:
				case KW_SKEWED:
				case KW_SNAPSHOT:
				case KW_SORT:
				case KW_SORTED:
				case KW_SPEC:
				case KW_SSL:
				case KW_STATISTICS:
				case KW_STATUS:
				case KW_STORED:
				case KW_STREAMTABLE:
				case KW_STRING:
				case KW_STRUCT:
				case KW_SUMMARY:
				case KW_SYSTEM_TIME:
				case KW_SYSTEM_VERSION:
				case KW_TABLES:
				case KW_TBLPROPERTIES:
				case KW_TEMPORARY:
				case KW_TERMINATED:
				case KW_TIMESTAMPTZ:
				case KW_TINYINT:
				case KW_TOUCH:
				case KW_TRANSACTION:
				case KW_TRANSACTIONAL:
				case KW_TRANSACTIONS:
				case KW_TRIM:
				case KW_TYPE:
				case KW_UNARCHIVE:
				case KW_UNDO:
				case KW_UNIONTYPE:
				case KW_UNKNOWN:
				case KW_UNLOCK:
				case KW_UNMANAGED:
				case KW_UNSET:
				case KW_UNSIGNED:
				case KW_URI:
				case KW_URL:
				case KW_USE:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_VALIDATE:
				case KW_VALUE_TYPE:
				case KW_VECTORIZATION:
				case KW_VIEW:
				case KW_VIEWS:
				case KW_WAIT:
				case KW_WEEK:
				case KW_WHILE:
				case KW_WITHIN:
				case KW_WORK:
				case KW_WORKLOAD:
				case KW_WRITE:
				case KW_YEAR:
				case KW_ZONE:
				case StringLiteral:
				case Identifier:
					{
					setState(1450);
					showStmtIdentifier();
					}
					break;
				case EOF:
					break;
				default:
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1453);
				match(KW_SHOW);
				setState(1455);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_SORTED) {
					{
					setState(1454);
					match(KW_SORTED);
					}
				}

				setState(1457);
				match(KW_COLUMNS);
				setState(1458);
				from_in();
				setState(1459);
				tableName();
				setState(1463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_FROM || _la==KW_IN) {
					{
					setState(1460);
					from_in();
					setState(1461);
					((ShowStatementContext)_localctx).db_name = id_();
					}
				}

				setState(1468);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_LIKE:
					{
					setState(1465);
					match(KW_LIKE);
					setState(1466);
					showStmtIdentifier();
					}
					break;
				case KW_ABORT:
				case KW_ACTIVATE:
				case KW_ACTIVE:
				case KW_ADD:
				case KW_ADMIN:
				case KW_AFTER:
				case KW_ALLOC_FRACTION:
				case KW_ANALYZE:
				case KW_ARCHIVE:
				case KW_ASC:
				case KW_AST:
				case KW_AT:
				case KW_AUTOCOMMIT:
				case KW_BATCH:
				case KW_BEFORE:
				case KW_BUCKET:
				case KW_BUCKETS:
				case KW_CACHE:
				case KW_CASCADE:
				case KW_CBO:
				case KW_CHANGE:
				case KW_CHECK:
				case KW_CLUSTER:
				case KW_CLUSTERED:
				case KW_CLUSTERSTATUS:
				case KW_COLLECTION:
				case KW_COLUMNS:
				case KW_COMMENT:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_COMPUTE:
				case KW_CONCATENATE:
				case KW_CONTINUE:
				case KW_COST:
				case KW_CRON:
				case KW_DATA:
				case KW_DATABASES:
				case KW_DATETIME:
				case KW_DAY:
				case KW_DAYOFWEEK:
				case KW_DBPROPERTIES:
				case KW_DCPROPERTIES:
				case KW_DEBUG:
				case KW_DEFAULT:
				case KW_DEFERRED:
				case KW_DEFINED:
				case KW_DELIMITED:
				case KW_DEPENDENCY:
				case KW_DESC:
				case KW_DETAIL:
				case KW_DIRECTORIES:
				case KW_DIRECTORY:
				case KW_DISABLE:
				case KW_DISTRIBUTE:
				case KW_DISTRIBUTED:
				case KW_DO:
				case KW_DOW:
				case KW_DUMP:
				case KW_ELEM_TYPE:
				case KW_ENABLE:
				case KW_ENFORCED:
				case KW_ESCAPED:
				case KW_EVERY:
				case KW_EXCLUSIVE:
				case KW_EXECUTE:
				case KW_EXECUTED:
				case KW_EXPIRE_SNAPSHOTS:
				case KW_EXPLAIN:
				case KW_EXPORT:
				case KW_EXPRESSION:
				case KW_FIELDS:
				case KW_FILE:
				case KW_FILEFORMAT:
				case KW_FIRST:
				case KW_FORMAT:
				case KW_FORMATTED:
				case KW_FUNCTIONS:
				case KW_HOLD_DDLTIME:
				case KW_HOUR:
				case KW_IDXPROPERTIES:
				case KW_IGNORE:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_INPATH:
				case KW_INPUTDRIVER:
				case KW_INPUTFORMAT:
				case KW_ISOLATION:
				case KW_ITEMS:
				case KW_JAR:
				case KW_JOINCOST:
				case KW_KEY:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_KILL:
				case KW_LAST:
				case KW_LEVEL:
				case KW_LIMIT:
				case KW_LINES:
				case KW_LOAD:
				case KW_LOCATION:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_LOGICAL:
				case KW_LONG:
				case KW_MANAGED:
				case KW_MANAGEDLOCATION:
				case KW_MANAGEMENT:
				case KW_MAPJOIN:
				case KW_MAPPING:
				case KW_MATCHED:
				case KW_MATERIALIZED:
				case KW_METADATA:
				case KW_MINUTE:
				case KW_MONTH:
				case KW_MOVE:
				case KW_MSCK:
				case KW_NORELY:
				case KW_NOSCAN:
				case KW_NOVALIDATE:
				case KW_NO_DROP:
				case KW_NULLS:
				case KW_OFFLINE:
				case KW_OFFSET:
				case KW_OPERATOR:
				case KW_OPTION:
				case KW_OUTPUTDRIVER:
				case KW_OUTPUTFORMAT:
				case KW_OVERWRITE:
				case KW_OWNER:
				case KW_PARTITIONED:
				case KW_PARTITIONS:
				case KW_PATH:
				case KW_PLAN:
				case KW_PLANS:
				case KW_PLUS:
				case KW_POOL:
				case KW_PRINCIPALS:
				case KW_PROTECTION:
				case KW_PURGE:
				case KW_QUARTER:
				case KW_QUERY:
				case KW_QUERY_PARALLELISM:
				case KW_READ:
				case KW_READONLY:
				case KW_REBUILD:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_RELOAD:
				case KW_RELY:
				case KW_REMOTE:
				case KW_RENAME:
				case KW_REOPTIMIZATION:
				case KW_REPAIR:
				case KW_REPL:
				case KW_REPLACE:
				case KW_REPLICATION:
				case KW_RESOURCE:
				case KW_RESPECT:
				case KW_RESTRICT:
				case KW_REWRITE:
				case KW_ROLE:
				case KW_ROLES:
				case KW_SCHEDULED:
				case KW_SCHEDULING_POLICY:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SECOND:
				case KW_SEMI:
				case KW_SERDE:
				case KW_SERDEPROPERTIES:
				case KW_SERVER:
				case KW_SETS:
				case KW_SET_CURRENT_SNAPSHOT:
				case KW_SHARED:
				case KW_SHOW:
				case KW_SHOW_DATABASE:
				case KW_SKEWED:
				case KW_SNAPSHOT:
				case KW_SORT:
				case KW_SORTED:
				case KW_SPEC:
				case KW_SSL:
				case KW_STATISTICS:
				case KW_STATUS:
				case KW_STORED:
				case KW_STREAMTABLE:
				case KW_STRING:
				case KW_STRUCT:
				case KW_SUMMARY:
				case KW_SYSTEM_TIME:
				case KW_SYSTEM_VERSION:
				case KW_TABLES:
				case KW_TBLPROPERTIES:
				case KW_TEMPORARY:
				case KW_TERMINATED:
				case KW_TIMESTAMPTZ:
				case KW_TINYINT:
				case KW_TOUCH:
				case KW_TRANSACTION:
				case KW_TRANSACTIONAL:
				case KW_TRANSACTIONS:
				case KW_TRIM:
				case KW_TYPE:
				case KW_UNARCHIVE:
				case KW_UNDO:
				case KW_UNIONTYPE:
				case KW_UNKNOWN:
				case KW_UNLOCK:
				case KW_UNMANAGED:
				case KW_UNSET:
				case KW_UNSIGNED:
				case KW_URI:
				case KW_URL:
				case KW_USE:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_VALIDATE:
				case KW_VALUE_TYPE:
				case KW_VECTORIZATION:
				case KW_VIEW:
				case KW_VIEWS:
				case KW_WAIT:
				case KW_WEEK:
				case KW_WHILE:
				case KW_WITHIN:
				case KW_WORK:
				case KW_WORKLOAD:
				case KW_WRITE:
				case KW_YEAR:
				case KW_ZONE:
				case StringLiteral:
				case Identifier:
					{
					setState(1467);
					showStmtIdentifier();
					}
					break;
				case EOF:
					break;
				default:
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1470);
				match(KW_SHOW);
				setState(1471);
				match(KW_FUNCTIONS);
				setState(1474);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_LIKE) {
					{
					setState(1472);
					match(KW_LIKE);
					setState(1473);
					showFunctionIdentifier();
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1476);
				match(KW_SHOW);
				setState(1477);
				match(KW_PARTITIONS);
				setState(1478);
				((ShowStatementContext)_localctx).tabName = tableName();
				setState(1480);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_PARTITION) {
					{
					setState(1479);
					partitionSpec();
					}
				}

				setState(1483);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_WHERE) {
					{
					setState(1482);
					whereClause();
					}
				}

				setState(1486);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_ORDER) {
					{
					setState(1485);
					orderByClause();
					}
				}

				setState(1489);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_LIMIT) {
					{
					setState(1488);
					limitClause();
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1491);
				match(KW_SHOW);
				setState(1492);
				match(KW_CREATE);
				setState(1498);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_DATABASE:
				case KW_SCHEMA:
					{
					setState(1493);
					db_schema();
					setState(1494);
					((ShowStatementContext)_localctx).db_name = id_();
					}
					break;
				case KW_TABLE:
					{
					setState(1496);
					match(KW_TABLE);
					setState(1497);
					((ShowStatementContext)_localctx).tabName = tableName();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1500);
				match(KW_SHOW);
				setState(1501);
				match(KW_TABLE);
				setState(1502);
				match(KW_EXTENDED);
				setState(1506);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_FROM || _la==KW_IN) {
					{
					setState(1503);
					from_in();
					setState(1504);
					((ShowStatementContext)_localctx).db_name = id_();
					}
				}

				setState(1508);
				match(KW_LIKE);
				setState(1509);
				showStmtIdentifier();
				setState(1511);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_PARTITION) {
					{
					setState(1510);
					partitionSpec();
					}
				}

				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1513);
				match(KW_SHOW);
				setState(1514);
				match(KW_TBLPROPERTIES);
				setState(1515);
				tableName();
				setState(1519);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(1516);
					match(LPAREN);
					setState(1517);
					((ShowStatementContext)_localctx).prptyName = match(StringLiteral);
					setState(1518);
					match(RPAREN);
					}
				}

				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1521);
				match(KW_SHOW);
				setState(1522);
				match(KW_LOCKS);
				setState(1534);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
				case 1:
					{
					setState(1523);
					db_schema();
					setState(1524);
					((ShowStatementContext)_localctx).dbName = id_();
					setState(1526);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_EXTENDED) {
						{
						setState(1525);
						((ShowStatementContext)_localctx).isExtended = match(KW_EXTENDED);
						}
					}

					}
					break;
				case 2:
					{
					setState(1529);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 808078815591695742L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 1083038567331911621L) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 8916819943869537315L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & 4159991143015340909L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8484708576009596927L) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & 17776728909112555L) != 0) || _la==Identifier) {
						{
						setState(1528);
						((ShowStatementContext)_localctx).parttype = partTypeExpr();
						}
					}

					setState(1532);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_EXTENDED) {
						{
						setState(1531);
						((ShowStatementContext)_localctx).isExtended = match(KW_EXTENDED);
						}
					}

					}
					break;
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1536);
				match(KW_SHOW);
				setState(1537);
				match(KW_COMPACTIONS);
				setState(1574);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
				case 1:
					{
					setState(1538);
					compactionId();
					}
					break;
				case 2:
					{
					setState(1539);
					db_schema();
					setState(1540);
					((ShowStatementContext)_localctx).dbName = id_();
					setState(1542);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_POOL) {
						{
						setState(1541);
						compactionPool();
						}
					}

					setState(1545);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_TYPE) {
						{
						setState(1544);
						compactionType();
						}
					}

					setState(1548);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_STATUS) {
						{
						setState(1547);
						compactionStatus();
						}
					}

					setState(1551);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_ORDER) {
						{
						setState(1550);
						orderByClause();
						}
					}

					setState(1554);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_LIMIT) {
						{
						setState(1553);
						limitClause();
						}
					}

					}
					break;
				case 3:
					{
					setState(1557);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
					case 1:
						{
						setState(1556);
						((ShowStatementContext)_localctx).parttype = partTypeExpr();
						}
						break;
					}
					setState(1560);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_POOL) {
						{
						setState(1559);
						compactionPool();
						}
					}

					setState(1563);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_TYPE) {
						{
						setState(1562);
						compactionType();
						}
					}

					setState(1566);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_STATUS) {
						{
						setState(1565);
						compactionStatus();
						}
					}

					setState(1569);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_ORDER) {
						{
						setState(1568);
						orderByClause();
						}
					}

					setState(1572);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_LIMIT) {
						{
						setState(1571);
						limitClause();
						}
					}

					}
					break;
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1576);
				match(KW_SHOW);
				setState(1577);
				match(KW_TRANSACTIONS);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1578);
				match(KW_SHOW);
				setState(1579);
				match(KW_CONF);
				setState(1580);
				match(StringLiteral);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1581);
				match(KW_SHOW);
				setState(1582);
				match(KW_RESOURCE);
				setState(1586);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_PLAN:
					{
					setState(1583);
					match(KW_PLAN);
					setState(1584);
					((ShowStatementContext)_localctx).rp_name = id_();
					}
					break;
				case KW_PLANS:
					{
					setState(1585);
					match(KW_PLANS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1588);
				match(KW_SHOW);
				setState(1589);
				match(KW_DATACONNECTORS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowTablesFilterExprContext extends ParserRuleContext {
		public TerminalNode KW_WHERE() { return getToken(HiveParser.KW_WHERE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode EQUAL() { return getToken(HiveParser.EQUAL, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TerminalNode KW_LIKE() { return getToken(HiveParser.KW_LIKE, 0); }
		public ShowStmtIdentifierContext showStmtIdentifier() {
			return getRuleContext(ShowStmtIdentifierContext.class,0);
		}
		public ShowTablesFilterExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showTablesFilterExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterShowTablesFilterExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitShowTablesFilterExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitShowTablesFilterExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowTablesFilterExprContext showTablesFilterExpr() throws RecognitionException {
		ShowTablesFilterExprContext _localctx = new ShowTablesFilterExprContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_showTablesFilterExpr);
		try {
			setState(1600);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_WHERE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1592);
				match(KW_WHERE);
				setState(1593);
				id_();
				setState(1594);
				match(EQUAL);
				setState(1595);
				match(StringLiteral);
				}
				break;
			case KW_LIKE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1597);
				match(KW_LIKE);
				setState(1598);
				showStmtIdentifier();
				}
				break;
			case KW_ABORT:
			case KW_ACTIVATE:
			case KW_ACTIVE:
			case KW_ADD:
			case KW_ADMIN:
			case KW_AFTER:
			case KW_ALLOC_FRACTION:
			case KW_ANALYZE:
			case KW_ARCHIVE:
			case KW_ASC:
			case KW_AST:
			case KW_AT:
			case KW_AUTOCOMMIT:
			case KW_BATCH:
			case KW_BEFORE:
			case KW_BUCKET:
			case KW_BUCKETS:
			case KW_CACHE:
			case KW_CASCADE:
			case KW_CBO:
			case KW_CHANGE:
			case KW_CHECK:
			case KW_CLUSTER:
			case KW_CLUSTERED:
			case KW_CLUSTERSTATUS:
			case KW_COLLECTION:
			case KW_COLUMNS:
			case KW_COMMENT:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_COMPUTE:
			case KW_CONCATENATE:
			case KW_CONTINUE:
			case KW_COST:
			case KW_CRON:
			case KW_DATA:
			case KW_DATABASES:
			case KW_DATETIME:
			case KW_DAY:
			case KW_DAYOFWEEK:
			case KW_DBPROPERTIES:
			case KW_DCPROPERTIES:
			case KW_DEBUG:
			case KW_DEFAULT:
			case KW_DEFERRED:
			case KW_DEFINED:
			case KW_DELIMITED:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DETAIL:
			case KW_DIRECTORIES:
			case KW_DIRECTORY:
			case KW_DISABLE:
			case KW_DISTRIBUTE:
			case KW_DISTRIBUTED:
			case KW_DO:
			case KW_DOW:
			case KW_DUMP:
			case KW_ELEM_TYPE:
			case KW_ENABLE:
			case KW_ENFORCED:
			case KW_ESCAPED:
			case KW_EVERY:
			case KW_EXCLUSIVE:
			case KW_EXECUTE:
			case KW_EXECUTED:
			case KW_EXPIRE_SNAPSHOTS:
			case KW_EXPLAIN:
			case KW_EXPORT:
			case KW_EXPRESSION:
			case KW_FIELDS:
			case KW_FILE:
			case KW_FILEFORMAT:
			case KW_FIRST:
			case KW_FORMAT:
			case KW_FORMATTED:
			case KW_FUNCTIONS:
			case KW_HOLD_DDLTIME:
			case KW_HOUR:
			case KW_IDXPROPERTIES:
			case KW_IGNORE:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_INPATH:
			case KW_INPUTDRIVER:
			case KW_INPUTFORMAT:
			case KW_ISOLATION:
			case KW_ITEMS:
			case KW_JAR:
			case KW_JOINCOST:
			case KW_KEY:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LAST:
			case KW_LEVEL:
			case KW_LIMIT:
			case KW_LINES:
			case KW_LOAD:
			case KW_LOCATION:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_LONG:
			case KW_MANAGED:
			case KW_MANAGEDLOCATION:
			case KW_MANAGEMENT:
			case KW_MAPJOIN:
			case KW_MAPPING:
			case KW_MATCHED:
			case KW_MATERIALIZED:
			case KW_METADATA:
			case KW_MINUTE:
			case KW_MONTH:
			case KW_MOVE:
			case KW_MSCK:
			case KW_NORELY:
			case KW_NOSCAN:
			case KW_NOVALIDATE:
			case KW_NO_DROP:
			case KW_NULLS:
			case KW_OFFLINE:
			case KW_OFFSET:
			case KW_OPERATOR:
			case KW_OPTION:
			case KW_OUTPUTDRIVER:
			case KW_OUTPUTFORMAT:
			case KW_OVERWRITE:
			case KW_OWNER:
			case KW_PARTITIONED:
			case KW_PARTITIONS:
			case KW_PATH:
			case KW_PLAN:
			case KW_PLANS:
			case KW_PLUS:
			case KW_POOL:
			case KW_PRINCIPALS:
			case KW_PROTECTION:
			case KW_PURGE:
			case KW_QUARTER:
			case KW_QUERY:
			case KW_QUERY_PARALLELISM:
			case KW_READ:
			case KW_READONLY:
			case KW_REBUILD:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_RELOAD:
			case KW_RELY:
			case KW_REMOTE:
			case KW_RENAME:
			case KW_REOPTIMIZATION:
			case KW_REPAIR:
			case KW_REPL:
			case KW_REPLACE:
			case KW_REPLICATION:
			case KW_RESOURCE:
			case KW_RESPECT:
			case KW_RESTRICT:
			case KW_REWRITE:
			case KW_ROLE:
			case KW_ROLES:
			case KW_SCHEDULED:
			case KW_SCHEDULING_POLICY:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SECOND:
			case KW_SEMI:
			case KW_SERDE:
			case KW_SERDEPROPERTIES:
			case KW_SERVER:
			case KW_SETS:
			case KW_SET_CURRENT_SNAPSHOT:
			case KW_SHARED:
			case KW_SHOW:
			case KW_SHOW_DATABASE:
			case KW_SKEWED:
			case KW_SNAPSHOT:
			case KW_SORT:
			case KW_SORTED:
			case KW_SPEC:
			case KW_SSL:
			case KW_STATISTICS:
			case KW_STATUS:
			case KW_STORED:
			case KW_STREAMTABLE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_SUMMARY:
			case KW_SYSTEM_TIME:
			case KW_SYSTEM_VERSION:
			case KW_TABLES:
			case KW_TBLPROPERTIES:
			case KW_TEMPORARY:
			case KW_TERMINATED:
			case KW_TIMESTAMPTZ:
			case KW_TINYINT:
			case KW_TOUCH:
			case KW_TRANSACTION:
			case KW_TRANSACTIONAL:
			case KW_TRANSACTIONS:
			case KW_TRIM:
			case KW_TYPE:
			case KW_UNARCHIVE:
			case KW_UNDO:
			case KW_UNIONTYPE:
			case KW_UNKNOWN:
			case KW_UNLOCK:
			case KW_UNMANAGED:
			case KW_UNSET:
			case KW_UNSIGNED:
			case KW_URI:
			case KW_URL:
			case KW_USE:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_VALIDATE:
			case KW_VALUE_TYPE:
			case KW_VECTORIZATION:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_WAIT:
			case KW_WEEK:
			case KW_WHILE:
			case KW_WITHIN:
			case KW_WORK:
			case KW_WORKLOAD:
			case KW_WRITE:
			case KW_YEAR:
			case KW_ZONE:
			case StringLiteral:
			case Identifier:
				enterOuterAlt(_localctx, 3);
				{
				setState(1599);
				showStmtIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LockStatementContext extends ParserRuleContext {
		public TerminalNode KW_LOCK() { return getToken(HiveParser.KW_LOCK, 0); }
		public TerminalNode KW_TABLE() { return getToken(HiveParser.KW_TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public LockModeContext lockMode() {
			return getRuleContext(LockModeContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public LockStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterLockStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitLockStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitLockStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockStatementContext lockStatement() throws RecognitionException {
		LockStatementContext _localctx = new LockStatementContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_lockStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1602);
			match(KW_LOCK);
			setState(1603);
			match(KW_TABLE);
			setState(1604);
			tableName();
			setState(1606);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PARTITION) {
				{
				setState(1605);
				partitionSpec();
				}
			}

			setState(1608);
			lockMode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LockDatabaseContext extends ParserRuleContext {
		public Id_Context dbName;
		public TerminalNode KW_LOCK() { return getToken(HiveParser.KW_LOCK, 0); }
		public Db_schemaContext db_schema() {
			return getRuleContext(Db_schemaContext.class,0);
		}
		public LockModeContext lockMode() {
			return getRuleContext(LockModeContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public LockDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterLockDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitLockDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitLockDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockDatabaseContext lockDatabase() throws RecognitionException {
		LockDatabaseContext _localctx = new LockDatabaseContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_lockDatabase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1610);
			match(KW_LOCK);
			setState(1611);
			db_schema();
			setState(1612);
			((LockDatabaseContext)_localctx).dbName = id_();
			setState(1613);
			lockMode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LockModeContext extends ParserRuleContext {
		public TerminalNode KW_SHARED() { return getToken(HiveParser.KW_SHARED, 0); }
		public TerminalNode KW_EXCLUSIVE() { return getToken(HiveParser.KW_EXCLUSIVE, 0); }
		public LockModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterLockMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitLockMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitLockMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockModeContext lockMode() throws RecognitionException {
		LockModeContext _localctx = new LockModeContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_lockMode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1615);
			_la = _input.LA(1);
			if ( !(_la==KW_EXCLUSIVE || _la==KW_SHARED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnlockStatementContext extends ParserRuleContext {
		public TerminalNode KW_UNLOCK() { return getToken(HiveParser.KW_UNLOCK, 0); }
		public TerminalNode KW_TABLE() { return getToken(HiveParser.KW_TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public UnlockStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlockStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterUnlockStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitUnlockStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitUnlockStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlockStatementContext unlockStatement() throws RecognitionException {
		UnlockStatementContext _localctx = new UnlockStatementContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_unlockStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1617);
			match(KW_UNLOCK);
			setState(1618);
			match(KW_TABLE);
			setState(1619);
			tableName();
			setState(1621);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PARTITION) {
				{
				setState(1620);
				partitionSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnlockDatabaseContext extends ParserRuleContext {
		public Id_Context dbName;
		public TerminalNode KW_UNLOCK() { return getToken(HiveParser.KW_UNLOCK, 0); }
		public Db_schemaContext db_schema() {
			return getRuleContext(Db_schemaContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public UnlockDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlockDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterUnlockDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitUnlockDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitUnlockDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlockDatabaseContext unlockDatabase() throws RecognitionException {
		UnlockDatabaseContext _localctx = new UnlockDatabaseContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_unlockDatabase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1623);
			match(KW_UNLOCK);
			setState(1624);
			db_schema();
			setState(1625);
			((UnlockDatabaseContext)_localctx).dbName = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateRoleStatementContext extends ParserRuleContext {
		public Id_Context roleName;
		public TerminalNode KW_CREATE() { return getToken(HiveParser.KW_CREATE, 0); }
		public TerminalNode KW_ROLE() { return getToken(HiveParser.KW_ROLE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public CreateRoleStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRoleStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCreateRoleStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCreateRoleStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCreateRoleStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRoleStatementContext createRoleStatement() throws RecognitionException {
		CreateRoleStatementContext _localctx = new CreateRoleStatementContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_createRoleStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1627);
			match(KW_CREATE);
			setState(1628);
			match(KW_ROLE);
			setState(1629);
			((CreateRoleStatementContext)_localctx).roleName = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropRoleStatementContext extends ParserRuleContext {
		public Id_Context roleName;
		public TerminalNode KW_DROP() { return getToken(HiveParser.KW_DROP, 0); }
		public TerminalNode KW_ROLE() { return getToken(HiveParser.KW_ROLE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public DropRoleStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRoleStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDropRoleStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDropRoleStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDropRoleStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRoleStatementContext dropRoleStatement() throws RecognitionException {
		DropRoleStatementContext _localctx = new DropRoleStatementContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_dropRoleStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1631);
			match(KW_DROP);
			setState(1632);
			match(KW_ROLE);
			setState(1633);
			((DropRoleStatementContext)_localctx).roleName = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GrantPrivilegesContext extends ParserRuleContext {
		public PrivilegeListContext privList;
		public TerminalNode KW_GRANT() { return getToken(HiveParser.KW_GRANT, 0); }
		public TerminalNode KW_TO() { return getToken(HiveParser.KW_TO, 0); }
		public PrincipalSpecificationContext principalSpecification() {
			return getRuleContext(PrincipalSpecificationContext.class,0);
		}
		public PrivilegeListContext privilegeList() {
			return getRuleContext(PrivilegeListContext.class,0);
		}
		public PrivilegeObjectContext privilegeObject() {
			return getRuleContext(PrivilegeObjectContext.class,0);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public GrantPrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantPrivileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterGrantPrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitGrantPrivileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitGrantPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantPrivilegesContext grantPrivileges() throws RecognitionException {
		GrantPrivilegesContext _localctx = new GrantPrivilegesContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_grantPrivileges);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1635);
			match(KW_GRANT);
			setState(1636);
			((GrantPrivilegesContext)_localctx).privList = privilegeList();
			setState(1638);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ON) {
				{
				setState(1637);
				privilegeObject();
				}
			}

			setState(1640);
			match(KW_TO);
			setState(1641);
			principalSpecification();
			setState(1643);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WITH) {
				{
				setState(1642);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RevokePrivilegesContext extends ParserRuleContext {
		public TerminalNode KW_REVOKE() { return getToken(HiveParser.KW_REVOKE, 0); }
		public PrivilegeListContext privilegeList() {
			return getRuleContext(PrivilegeListContext.class,0);
		}
		public TerminalNode KW_FROM() { return getToken(HiveParser.KW_FROM, 0); }
		public PrincipalSpecificationContext principalSpecification() {
			return getRuleContext(PrincipalSpecificationContext.class,0);
		}
		public GrantOptionForContext grantOptionFor() {
			return getRuleContext(GrantOptionForContext.class,0);
		}
		public PrivilegeObjectContext privilegeObject() {
			return getRuleContext(PrivilegeObjectContext.class,0);
		}
		public RevokePrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokePrivileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterRevokePrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitRevokePrivileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitRevokePrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokePrivilegesContext revokePrivileges() throws RecognitionException {
		RevokePrivilegesContext _localctx = new RevokePrivilegesContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_revokePrivileges);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1645);
			match(KW_REVOKE);
			setState(1647);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_GRANT) {
				{
				setState(1646);
				grantOptionFor();
				}
			}

			setState(1649);
			privilegeList();
			setState(1651);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ON) {
				{
				setState(1650);
				privilegeObject();
				}
			}

			setState(1653);
			match(KW_FROM);
			setState(1654);
			principalSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GrantRoleContext extends ParserRuleContext {
		public TerminalNode KW_GRANT() { return getToken(HiveParser.KW_GRANT, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode KW_TO() { return getToken(HiveParser.KW_TO, 0); }
		public PrincipalSpecificationContext principalSpecification() {
			return getRuleContext(PrincipalSpecificationContext.class,0);
		}
		public TerminalNode KW_ROLE() { return getToken(HiveParser.KW_ROLE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public WithAdminOptionContext withAdminOption() {
			return getRuleContext(WithAdminOptionContext.class,0);
		}
		public GrantRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterGrantRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitGrantRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitGrantRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantRoleContext grantRole() throws RecognitionException {
		GrantRoleContext _localctx = new GrantRoleContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_grantRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1656);
			match(KW_GRANT);
			setState(1658);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
			case 1:
				{
				setState(1657);
				match(KW_ROLE);
				}
				break;
			}
			setState(1660);
			id_();
			setState(1665);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1661);
				match(COMMA);
				setState(1662);
				id_();
				}
				}
				setState(1667);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1668);
			match(KW_TO);
			setState(1669);
			principalSpecification();
			setState(1671);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WITH) {
				{
				setState(1670);
				withAdminOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RevokeRoleContext extends ParserRuleContext {
		public TerminalNode KW_REVOKE() { return getToken(HiveParser.KW_REVOKE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode KW_FROM() { return getToken(HiveParser.KW_FROM, 0); }
		public PrincipalSpecificationContext principalSpecification() {
			return getRuleContext(PrincipalSpecificationContext.class,0);
		}
		public AdminOptionForContext adminOptionFor() {
			return getRuleContext(AdminOptionForContext.class,0);
		}
		public TerminalNode KW_ROLE() { return getToken(HiveParser.KW_ROLE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public RevokeRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterRevokeRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitRevokeRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitRevokeRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeRoleContext revokeRole() throws RecognitionException {
		RevokeRoleContext _localctx = new RevokeRoleContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_revokeRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1673);
			match(KW_REVOKE);
			setState(1675);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				setState(1674);
				adminOptionFor();
				}
				break;
			}
			setState(1678);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				{
				setState(1677);
				match(KW_ROLE);
				}
				break;
			}
			setState(1680);
			id_();
			setState(1685);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1681);
				match(COMMA);
				setState(1682);
				id_();
				}
				}
				setState(1687);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1688);
			match(KW_FROM);
			setState(1689);
			principalSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowRoleGrantsContext extends ParserRuleContext {
		public TerminalNode KW_SHOW() { return getToken(HiveParser.KW_SHOW, 0); }
		public TerminalNode KW_ROLE() { return getToken(HiveParser.KW_ROLE, 0); }
		public TerminalNode KW_GRANT() { return getToken(HiveParser.KW_GRANT, 0); }
		public PrincipalNameContext principalName() {
			return getRuleContext(PrincipalNameContext.class,0);
		}
		public ShowRoleGrantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showRoleGrants; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterShowRoleGrants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitShowRoleGrants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitShowRoleGrants(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowRoleGrantsContext showRoleGrants() throws RecognitionException {
		ShowRoleGrantsContext _localctx = new ShowRoleGrantsContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_showRoleGrants);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1691);
			match(KW_SHOW);
			setState(1692);
			match(KW_ROLE);
			setState(1693);
			match(KW_GRANT);
			setState(1694);
			principalName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowRolesContext extends ParserRuleContext {
		public TerminalNode KW_SHOW() { return getToken(HiveParser.KW_SHOW, 0); }
		public TerminalNode KW_ROLES() { return getToken(HiveParser.KW_ROLES, 0); }
		public ShowRolesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showRoles; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterShowRoles(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitShowRoles(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitShowRoles(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowRolesContext showRoles() throws RecognitionException {
		ShowRolesContext _localctx = new ShowRolesContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_showRoles);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1696);
			match(KW_SHOW);
			setState(1697);
			match(KW_ROLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowCurrentRoleContext extends ParserRuleContext {
		public TerminalNode KW_SHOW() { return getToken(HiveParser.KW_SHOW, 0); }
		public TerminalNode KW_CURRENT() { return getToken(HiveParser.KW_CURRENT, 0); }
		public TerminalNode KW_ROLES() { return getToken(HiveParser.KW_ROLES, 0); }
		public ShowCurrentRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCurrentRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterShowCurrentRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitShowCurrentRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitShowCurrentRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCurrentRoleContext showCurrentRole() throws RecognitionException {
		ShowCurrentRoleContext _localctx = new ShowCurrentRoleContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_showCurrentRole);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1699);
			match(KW_SHOW);
			setState(1700);
			match(KW_CURRENT);
			setState(1701);
			match(KW_ROLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetRoleContext extends ParserRuleContext {
		public Token all;
		public Token none;
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public TerminalNode KW_ROLE() { return getToken(HiveParser.KW_ROLE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode KW_ALL() { return getToken(HiveParser.KW_ALL, 0); }
		public TerminalNode KW_NONE() { return getToken(HiveParser.KW_NONE, 0); }
		public SetRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSetRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSetRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSetRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetRoleContext setRole() throws RecognitionException {
		SetRoleContext _localctx = new SetRoleContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_setRole);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1703);
			match(KW_SET);
			setState(1704);
			match(KW_ROLE);
			setState(1708);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_ALL:
				{
				setState(1705);
				((SetRoleContext)_localctx).all = match(KW_ALL);
				}
				break;
			case KW_NONE:
				{
				setState(1706);
				((SetRoleContext)_localctx).none = match(KW_NONE);
				}
				break;
			case KW_ABORT:
			case KW_ACTIVATE:
			case KW_ACTIVE:
			case KW_ADD:
			case KW_ADMIN:
			case KW_AFTER:
			case KW_ALLOC_FRACTION:
			case KW_ANALYZE:
			case KW_ARCHIVE:
			case KW_ASC:
			case KW_AST:
			case KW_AT:
			case KW_AUTOCOMMIT:
			case KW_BATCH:
			case KW_BEFORE:
			case KW_BUCKET:
			case KW_BUCKETS:
			case KW_CACHE:
			case KW_CASCADE:
			case KW_CBO:
			case KW_CHANGE:
			case KW_CHECK:
			case KW_CLUSTER:
			case KW_CLUSTERED:
			case KW_CLUSTERSTATUS:
			case KW_COLLECTION:
			case KW_COLUMNS:
			case KW_COMMENT:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_COMPUTE:
			case KW_CONCATENATE:
			case KW_CONTINUE:
			case KW_COST:
			case KW_CRON:
			case KW_DATA:
			case KW_DATABASES:
			case KW_DATETIME:
			case KW_DAY:
			case KW_DAYOFWEEK:
			case KW_DBPROPERTIES:
			case KW_DCPROPERTIES:
			case KW_DEBUG:
			case KW_DEFAULT:
			case KW_DEFERRED:
			case KW_DEFINED:
			case KW_DELIMITED:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DETAIL:
			case KW_DIRECTORIES:
			case KW_DIRECTORY:
			case KW_DISABLE:
			case KW_DISTRIBUTE:
			case KW_DISTRIBUTED:
			case KW_DO:
			case KW_DOW:
			case KW_DUMP:
			case KW_ELEM_TYPE:
			case KW_ENABLE:
			case KW_ENFORCED:
			case KW_ESCAPED:
			case KW_EVERY:
			case KW_EXCLUSIVE:
			case KW_EXECUTE:
			case KW_EXECUTED:
			case KW_EXPIRE_SNAPSHOTS:
			case KW_EXPLAIN:
			case KW_EXPORT:
			case KW_EXPRESSION:
			case KW_FIELDS:
			case KW_FILE:
			case KW_FILEFORMAT:
			case KW_FIRST:
			case KW_FORMAT:
			case KW_FORMATTED:
			case KW_FUNCTIONS:
			case KW_HOLD_DDLTIME:
			case KW_HOUR:
			case KW_IDXPROPERTIES:
			case KW_IGNORE:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_INPATH:
			case KW_INPUTDRIVER:
			case KW_INPUTFORMAT:
			case KW_ISOLATION:
			case KW_ITEMS:
			case KW_JAR:
			case KW_JOINCOST:
			case KW_KEY:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LAST:
			case KW_LEVEL:
			case KW_LIMIT:
			case KW_LINES:
			case KW_LOAD:
			case KW_LOCATION:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_LONG:
			case KW_MANAGED:
			case KW_MANAGEDLOCATION:
			case KW_MANAGEMENT:
			case KW_MAPJOIN:
			case KW_MAPPING:
			case KW_MATCHED:
			case KW_MATERIALIZED:
			case KW_METADATA:
			case KW_MINUTE:
			case KW_MONTH:
			case KW_MOVE:
			case KW_MSCK:
			case KW_NORELY:
			case KW_NOSCAN:
			case KW_NOVALIDATE:
			case KW_NO_DROP:
			case KW_NULLS:
			case KW_OFFLINE:
			case KW_OFFSET:
			case KW_OPERATOR:
			case KW_OPTION:
			case KW_OUTPUTDRIVER:
			case KW_OUTPUTFORMAT:
			case KW_OVERWRITE:
			case KW_OWNER:
			case KW_PARTITIONED:
			case KW_PARTITIONS:
			case KW_PATH:
			case KW_PLAN:
			case KW_PLANS:
			case KW_PLUS:
			case KW_POOL:
			case KW_PRINCIPALS:
			case KW_PROTECTION:
			case KW_PURGE:
			case KW_QUARTER:
			case KW_QUERY:
			case KW_QUERY_PARALLELISM:
			case KW_READ:
			case KW_READONLY:
			case KW_REBUILD:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_RELOAD:
			case KW_RELY:
			case KW_REMOTE:
			case KW_RENAME:
			case KW_REOPTIMIZATION:
			case KW_REPAIR:
			case KW_REPL:
			case KW_REPLACE:
			case KW_REPLICATION:
			case KW_RESOURCE:
			case KW_RESPECT:
			case KW_RESTRICT:
			case KW_REWRITE:
			case KW_ROLE:
			case KW_ROLES:
			case KW_SCHEDULED:
			case KW_SCHEDULING_POLICY:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SECOND:
			case KW_SEMI:
			case KW_SERDE:
			case KW_SERDEPROPERTIES:
			case KW_SERVER:
			case KW_SETS:
			case KW_SET_CURRENT_SNAPSHOT:
			case KW_SHARED:
			case KW_SHOW:
			case KW_SHOW_DATABASE:
			case KW_SKEWED:
			case KW_SNAPSHOT:
			case KW_SORT:
			case KW_SORTED:
			case KW_SPEC:
			case KW_SSL:
			case KW_STATISTICS:
			case KW_STATUS:
			case KW_STORED:
			case KW_STREAMTABLE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_SUMMARY:
			case KW_SYSTEM_TIME:
			case KW_SYSTEM_VERSION:
			case KW_TABLES:
			case KW_TBLPROPERTIES:
			case KW_TEMPORARY:
			case KW_TERMINATED:
			case KW_TIMESTAMPTZ:
			case KW_TINYINT:
			case KW_TOUCH:
			case KW_TRANSACTION:
			case KW_TRANSACTIONAL:
			case KW_TRANSACTIONS:
			case KW_TRIM:
			case KW_TYPE:
			case KW_UNARCHIVE:
			case KW_UNDO:
			case KW_UNIONTYPE:
			case KW_UNKNOWN:
			case KW_UNLOCK:
			case KW_UNMANAGED:
			case KW_UNSET:
			case KW_UNSIGNED:
			case KW_URI:
			case KW_URL:
			case KW_USE:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_VALIDATE:
			case KW_VALUE_TYPE:
			case KW_VECTORIZATION:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_WAIT:
			case KW_WEEK:
			case KW_WHILE:
			case KW_WITHIN:
			case KW_WORK:
			case KW_WORKLOAD:
			case KW_WRITE:
			case KW_YEAR:
			case KW_ZONE:
			case Identifier:
				{
				setState(1707);
				id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowGrantsContext extends ParserRuleContext {
		public TerminalNode KW_SHOW() { return getToken(HiveParser.KW_SHOW, 0); }
		public TerminalNode KW_GRANT() { return getToken(HiveParser.KW_GRANT, 0); }
		public PrincipalNameContext principalName() {
			return getRuleContext(PrincipalNameContext.class,0);
		}
		public TerminalNode KW_ON() { return getToken(HiveParser.KW_ON, 0); }
		public PrivilegeIncludeColObjectContext privilegeIncludeColObject() {
			return getRuleContext(PrivilegeIncludeColObjectContext.class,0);
		}
		public ShowGrantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showGrants; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterShowGrants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitShowGrants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitShowGrants(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowGrantsContext showGrants() throws RecognitionException {
		ShowGrantsContext _localctx = new ShowGrantsContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_showGrants);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1710);
			match(KW_SHOW);
			setState(1711);
			match(KW_GRANT);
			setState(1713);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_GROUP || _la==KW_ROLE || _la==KW_USER) {
				{
				setState(1712);
				principalName();
				}
			}

			setState(1717);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ON) {
				{
				setState(1715);
				match(KW_ON);
				setState(1716);
				privilegeIncludeColObject();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowRolePrincipalsContext extends ParserRuleContext {
		public Id_Context roleName;
		public TerminalNode KW_SHOW() { return getToken(HiveParser.KW_SHOW, 0); }
		public TerminalNode KW_PRINCIPALS() { return getToken(HiveParser.KW_PRINCIPALS, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public ShowRolePrincipalsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showRolePrincipals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterShowRolePrincipals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitShowRolePrincipals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitShowRolePrincipals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowRolePrincipalsContext showRolePrincipals() throws RecognitionException {
		ShowRolePrincipalsContext _localctx = new ShowRolePrincipalsContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_showRolePrincipals);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1719);
			match(KW_SHOW);
			setState(1720);
			match(KW_PRINCIPALS);
			setState(1721);
			((ShowRolePrincipalsContext)_localctx).roleName = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivilegeIncludeColObjectContext extends ParserRuleContext {
		public TerminalNode KW_ALL() { return getToken(HiveParser.KW_ALL, 0); }
		public PrivObjectColsContext privObjectCols() {
			return getRuleContext(PrivObjectColsContext.class,0);
		}
		public PrivilegeIncludeColObjectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeIncludeColObject; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrivilegeIncludeColObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrivilegeIncludeColObject(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrivilegeIncludeColObject(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeIncludeColObjectContext privilegeIncludeColObject() throws RecognitionException {
		PrivilegeIncludeColObjectContext _localctx = new PrivilegeIncludeColObjectContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_privilegeIncludeColObject);
		try {
			setState(1725);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1723);
				match(KW_ALL);
				}
				break;
			case KW_ABORT:
			case KW_ACTIVATE:
			case KW_ACTIVE:
			case KW_ADD:
			case KW_ADMIN:
			case KW_AFTER:
			case KW_ALLOC_FRACTION:
			case KW_ANALYZE:
			case KW_ARCHIVE:
			case KW_ASC:
			case KW_AST:
			case KW_AT:
			case KW_AUTOCOMMIT:
			case KW_BATCH:
			case KW_BEFORE:
			case KW_BUCKET:
			case KW_BUCKETS:
			case KW_CACHE:
			case KW_CASCADE:
			case KW_CBO:
			case KW_CHANGE:
			case KW_CHECK:
			case KW_CLUSTER:
			case KW_CLUSTERED:
			case KW_CLUSTERSTATUS:
			case KW_COLLECTION:
			case KW_COLUMNS:
			case KW_COMMENT:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_COMPUTE:
			case KW_CONCATENATE:
			case KW_CONTINUE:
			case KW_COST:
			case KW_CRON:
			case KW_DATA:
			case KW_DATABASE:
			case KW_DATABASES:
			case KW_DATETIME:
			case KW_DAY:
			case KW_DAYOFWEEK:
			case KW_DBPROPERTIES:
			case KW_DCPROPERTIES:
			case KW_DEBUG:
			case KW_DEFAULT:
			case KW_DEFERRED:
			case KW_DEFINED:
			case KW_DELIMITED:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DETAIL:
			case KW_DIRECTORIES:
			case KW_DIRECTORY:
			case KW_DISABLE:
			case KW_DISTRIBUTE:
			case KW_DISTRIBUTED:
			case KW_DO:
			case KW_DOW:
			case KW_DUMP:
			case KW_ELEM_TYPE:
			case KW_ENABLE:
			case KW_ENFORCED:
			case KW_ESCAPED:
			case KW_EVERY:
			case KW_EXCLUSIVE:
			case KW_EXECUTE:
			case KW_EXECUTED:
			case KW_EXPIRE_SNAPSHOTS:
			case KW_EXPLAIN:
			case KW_EXPORT:
			case KW_EXPRESSION:
			case KW_FIELDS:
			case KW_FILE:
			case KW_FILEFORMAT:
			case KW_FIRST:
			case KW_FORMAT:
			case KW_FORMATTED:
			case KW_FUNCTIONS:
			case KW_HOLD_DDLTIME:
			case KW_HOUR:
			case KW_IDXPROPERTIES:
			case KW_IGNORE:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_INPATH:
			case KW_INPUTDRIVER:
			case KW_INPUTFORMAT:
			case KW_ISOLATION:
			case KW_ITEMS:
			case KW_JAR:
			case KW_JOINCOST:
			case KW_KEY:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LAST:
			case KW_LEVEL:
			case KW_LIMIT:
			case KW_LINES:
			case KW_LOAD:
			case KW_LOCATION:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_LONG:
			case KW_MANAGED:
			case KW_MANAGEDLOCATION:
			case KW_MANAGEMENT:
			case KW_MAPJOIN:
			case KW_MAPPING:
			case KW_MATCHED:
			case KW_MATERIALIZED:
			case KW_METADATA:
			case KW_MINUTE:
			case KW_MONTH:
			case KW_MOVE:
			case KW_MSCK:
			case KW_NORELY:
			case KW_NOSCAN:
			case KW_NOVALIDATE:
			case KW_NO_DROP:
			case KW_NULLS:
			case KW_OFFLINE:
			case KW_OFFSET:
			case KW_OPERATOR:
			case KW_OPTION:
			case KW_OUTPUTDRIVER:
			case KW_OUTPUTFORMAT:
			case KW_OVERWRITE:
			case KW_OWNER:
			case KW_PARTITIONED:
			case KW_PARTITIONS:
			case KW_PATH:
			case KW_PLAN:
			case KW_PLANS:
			case KW_PLUS:
			case KW_POOL:
			case KW_PRINCIPALS:
			case KW_PROTECTION:
			case KW_PURGE:
			case KW_QUARTER:
			case KW_QUERY:
			case KW_QUERY_PARALLELISM:
			case KW_READ:
			case KW_READONLY:
			case KW_REBUILD:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_RELOAD:
			case KW_RELY:
			case KW_REMOTE:
			case KW_RENAME:
			case KW_REOPTIMIZATION:
			case KW_REPAIR:
			case KW_REPL:
			case KW_REPLACE:
			case KW_REPLICATION:
			case KW_RESOURCE:
			case KW_RESPECT:
			case KW_RESTRICT:
			case KW_REWRITE:
			case KW_ROLE:
			case KW_ROLES:
			case KW_SCHEDULED:
			case KW_SCHEDULING_POLICY:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SECOND:
			case KW_SEMI:
			case KW_SERDE:
			case KW_SERDEPROPERTIES:
			case KW_SERVER:
			case KW_SETS:
			case KW_SET_CURRENT_SNAPSHOT:
			case KW_SHARED:
			case KW_SHOW:
			case KW_SHOW_DATABASE:
			case KW_SKEWED:
			case KW_SNAPSHOT:
			case KW_SORT:
			case KW_SORTED:
			case KW_SPEC:
			case KW_SSL:
			case KW_STATISTICS:
			case KW_STATUS:
			case KW_STORED:
			case KW_STREAMTABLE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_SUMMARY:
			case KW_SYSTEM_TIME:
			case KW_SYSTEM_VERSION:
			case KW_TABLE:
			case KW_TABLES:
			case KW_TBLPROPERTIES:
			case KW_TEMPORARY:
			case KW_TERMINATED:
			case KW_TIMESTAMPTZ:
			case KW_TINYINT:
			case KW_TOUCH:
			case KW_TRANSACTION:
			case KW_TRANSACTIONAL:
			case KW_TRANSACTIONS:
			case KW_TRIM:
			case KW_TYPE:
			case KW_UNARCHIVE:
			case KW_UNDO:
			case KW_UNIONTYPE:
			case KW_UNKNOWN:
			case KW_UNLOCK:
			case KW_UNMANAGED:
			case KW_UNSET:
			case KW_UNSIGNED:
			case KW_URI:
			case KW_URL:
			case KW_USE:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_VALIDATE:
			case KW_VALUE_TYPE:
			case KW_VECTORIZATION:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_WAIT:
			case KW_WEEK:
			case KW_WHILE:
			case KW_WITHIN:
			case KW_WORK:
			case KW_WORKLOAD:
			case KW_WRITE:
			case KW_YEAR:
			case KW_ZONE:
			case Identifier:
				enterOuterAlt(_localctx, 2);
				{
				setState(1724);
				privObjectCols();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivilegeObjectContext extends ParserRuleContext {
		public TerminalNode KW_ON() { return getToken(HiveParser.KW_ON, 0); }
		public PrivObjectContext privObject() {
			return getRuleContext(PrivObjectContext.class,0);
		}
		public PrivilegeObjectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeObject; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrivilegeObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrivilegeObject(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrivilegeObject(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeObjectContext privilegeObject() throws RecognitionException {
		PrivilegeObjectContext _localctx = new PrivilegeObjectContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_privilegeObject);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1727);
			match(KW_ON);
			setState(1728);
			privObject();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivObjectContext extends ParserRuleContext {
		public Token path;
		public Db_schemaContext db_schema() {
			return getRuleContext(Db_schemaContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode KW_TABLE() { return getToken(HiveParser.KW_TABLE, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TerminalNode KW_URI() { return getToken(HiveParser.KW_URI, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TerminalNode KW_SERVER() { return getToken(HiveParser.KW_SERVER, 0); }
		public PrivObjectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privObject; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrivObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrivObject(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrivObject(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivObjectContext privObject() throws RecognitionException {
		PrivObjectContext _localctx = new PrivObjectContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_privObject);
		int _la;
		try {
			setState(1744);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1730);
				db_schema();
				setState(1731);
				id_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1734);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_TABLE) {
					{
					setState(1733);
					match(KW_TABLE);
					}
				}

				setState(1736);
				tableName();
				setState(1738);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_PARTITION) {
					{
					setState(1737);
					partitionSpec();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1740);
				match(KW_URI);
				setState(1741);
				((PrivObjectContext)_localctx).path = match(StringLiteral);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1742);
				match(KW_SERVER);
				setState(1743);
				id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivObjectColsContext extends ParserRuleContext {
		public ColumnNameListContext cols;
		public Token path;
		public Db_schemaContext db_schema() {
			return getRuleContext(Db_schemaContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode KW_TABLE() { return getToken(HiveParser.KW_TABLE, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public ColumnNameListContext columnNameList() {
			return getRuleContext(ColumnNameListContext.class,0);
		}
		public TerminalNode KW_URI() { return getToken(HiveParser.KW_URI, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TerminalNode KW_SERVER() { return getToken(HiveParser.KW_SERVER, 0); }
		public PrivObjectColsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privObjectCols; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrivObjectCols(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrivObjectCols(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrivObjectCols(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivObjectColsContext privObjectCols() throws RecognitionException {
		PrivObjectColsContext _localctx = new PrivObjectColsContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_privObjectCols);
		int _la;
		try {
			setState(1766);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1746);
				db_schema();
				setState(1747);
				id_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1750);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_TABLE) {
					{
					setState(1749);
					match(KW_TABLE);
					}
				}

				setState(1752);
				tableName();
				setState(1757);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(1753);
					match(LPAREN);
					setState(1754);
					((PrivObjectColsContext)_localctx).cols = columnNameList();
					setState(1755);
					match(RPAREN);
					}
				}

				setState(1760);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_PARTITION) {
					{
					setState(1759);
					partitionSpec();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1762);
				match(KW_URI);
				setState(1763);
				((PrivObjectColsContext)_localctx).path = match(StringLiteral);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1764);
				match(KW_SERVER);
				setState(1765);
				id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivilegeListContext extends ParserRuleContext {
		public List<PrivlegeDefContext> privlegeDef() {
			return getRuleContexts(PrivlegeDefContext.class);
		}
		public PrivlegeDefContext privlegeDef(int i) {
			return getRuleContext(PrivlegeDefContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public PrivilegeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrivilegeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrivilegeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrivilegeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeListContext privilegeList() throws RecognitionException {
		PrivilegeListContext _localctx = new PrivilegeListContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_privilegeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1768);
			privlegeDef();
			setState(1773);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1769);
				match(COMMA);
				setState(1770);
				privlegeDef();
				}
				}
				setState(1775);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivlegeDefContext extends ParserRuleContext {
		public ColumnNameListContext cols;
		public PrivilegeTypeContext privilegeType() {
			return getRuleContext(PrivilegeTypeContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public ColumnNameListContext columnNameList() {
			return getRuleContext(ColumnNameListContext.class,0);
		}
		public PrivlegeDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privlegeDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrivlegeDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrivlegeDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrivlegeDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivlegeDefContext privlegeDef() throws RecognitionException {
		PrivlegeDefContext _localctx = new PrivlegeDefContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_privlegeDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1776);
			privilegeType();
			setState(1781);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(1777);
				match(LPAREN);
				setState(1778);
				((PrivlegeDefContext)_localctx).cols = columnNameList();
				setState(1779);
				match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivilegeTypeContext extends ParserRuleContext {
		public TerminalNode KW_ALL() { return getToken(HiveParser.KW_ALL, 0); }
		public TerminalNode KW_ALTER() { return getToken(HiveParser.KW_ALTER, 0); }
		public TerminalNode KW_UPDATE() { return getToken(HiveParser.KW_UPDATE, 0); }
		public TerminalNode KW_CREATE() { return getToken(HiveParser.KW_CREATE, 0); }
		public TerminalNode KW_DROP() { return getToken(HiveParser.KW_DROP, 0); }
		public TerminalNode KW_LOCK() { return getToken(HiveParser.KW_LOCK, 0); }
		public TerminalNode KW_SELECT() { return getToken(HiveParser.KW_SELECT, 0); }
		public TerminalNode KW_SHOW_DATABASE() { return getToken(HiveParser.KW_SHOW_DATABASE, 0); }
		public TerminalNode KW_INSERT() { return getToken(HiveParser.KW_INSERT, 0); }
		public TerminalNode KW_DELETE() { return getToken(HiveParser.KW_DELETE, 0); }
		public PrivilegeTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrivilegeType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrivilegeType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrivilegeType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeTypeContext privilegeType() throws RecognitionException {
		PrivilegeTypeContext _localctx = new PrivilegeTypeContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_privilegeType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1783);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 288230376151712384L) != 0) || _la==KW_DELETE || _la==KW_DROP || _la==KW_INSERT || _la==KW_LOCK || _la==KW_SELECT || _la==KW_SHOW_DATABASE || _la==KW_UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrincipalSpecificationContext extends ParserRuleContext {
		public List<PrincipalNameContext> principalName() {
			return getRuleContexts(PrincipalNameContext.class);
		}
		public PrincipalNameContext principalName(int i) {
			return getRuleContext(PrincipalNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public PrincipalSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_principalSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrincipalSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrincipalSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrincipalSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrincipalSpecificationContext principalSpecification() throws RecognitionException {
		PrincipalSpecificationContext _localctx = new PrincipalSpecificationContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_principalSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1785);
			principalName();
			setState(1790);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1786);
				match(COMMA);
				setState(1787);
				principalName();
				}
				}
				setState(1792);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrincipalNameContext extends ParserRuleContext {
		public TerminalNode KW_USER() { return getToken(HiveParser.KW_USER, 0); }
		public PrincipalIdentifierContext principalIdentifier() {
			return getRuleContext(PrincipalIdentifierContext.class,0);
		}
		public TerminalNode KW_GROUP() { return getToken(HiveParser.KW_GROUP, 0); }
		public TerminalNode KW_ROLE() { return getToken(HiveParser.KW_ROLE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public PrincipalNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_principalName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrincipalName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrincipalName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrincipalName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrincipalNameContext principalName() throws RecognitionException {
		PrincipalNameContext _localctx = new PrincipalNameContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_principalName);
		try {
			setState(1799);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_USER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1793);
				match(KW_USER);
				setState(1794);
				principalIdentifier();
				}
				break;
			case KW_GROUP:
				enterOuterAlt(_localctx, 2);
				{
				setState(1795);
				match(KW_GROUP);
				setState(1796);
				principalIdentifier();
				}
				break;
			case KW_ROLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1797);
				match(KW_ROLE);
				setState(1798);
				id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithGrantOptionContext extends ParserRuleContext {
		public TerminalNode KW_WITH() { return getToken(HiveParser.KW_WITH, 0); }
		public TerminalNode KW_GRANT() { return getToken(HiveParser.KW_GRANT, 0); }
		public TerminalNode KW_OPTION() { return getToken(HiveParser.KW_OPTION, 0); }
		public WithGrantOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withGrantOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterWithGrantOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitWithGrantOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitWithGrantOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithGrantOptionContext withGrantOption() throws RecognitionException {
		WithGrantOptionContext _localctx = new WithGrantOptionContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_withGrantOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1801);
			match(KW_WITH);
			setState(1802);
			match(KW_GRANT);
			setState(1803);
			match(KW_OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GrantOptionForContext extends ParserRuleContext {
		public TerminalNode KW_GRANT() { return getToken(HiveParser.KW_GRANT, 0); }
		public TerminalNode KW_OPTION() { return getToken(HiveParser.KW_OPTION, 0); }
		public TerminalNode KW_FOR() { return getToken(HiveParser.KW_FOR, 0); }
		public GrantOptionForContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantOptionFor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterGrantOptionFor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitGrantOptionFor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitGrantOptionFor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantOptionForContext grantOptionFor() throws RecognitionException {
		GrantOptionForContext _localctx = new GrantOptionForContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_grantOptionFor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1805);
			match(KW_GRANT);
			setState(1806);
			match(KW_OPTION);
			setState(1807);
			match(KW_FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AdminOptionForContext extends ParserRuleContext {
		public TerminalNode KW_ADMIN() { return getToken(HiveParser.KW_ADMIN, 0); }
		public TerminalNode KW_OPTION() { return getToken(HiveParser.KW_OPTION, 0); }
		public TerminalNode KW_FOR() { return getToken(HiveParser.KW_FOR, 0); }
		public AdminOptionForContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_adminOptionFor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAdminOptionFor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAdminOptionFor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAdminOptionFor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdminOptionForContext adminOptionFor() throws RecognitionException {
		AdminOptionForContext _localctx = new AdminOptionForContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_adminOptionFor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1809);
			match(KW_ADMIN);
			setState(1810);
			match(KW_OPTION);
			setState(1811);
			match(KW_FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithAdminOptionContext extends ParserRuleContext {
		public TerminalNode KW_WITH() { return getToken(HiveParser.KW_WITH, 0); }
		public TerminalNode KW_ADMIN() { return getToken(HiveParser.KW_ADMIN, 0); }
		public TerminalNode KW_OPTION() { return getToken(HiveParser.KW_OPTION, 0); }
		public WithAdminOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withAdminOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterWithAdminOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitWithAdminOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitWithAdminOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithAdminOptionContext withAdminOption() throws RecognitionException {
		WithAdminOptionContext _localctx = new WithAdminOptionContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_withAdminOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1813);
			match(KW_WITH);
			setState(1814);
			match(KW_ADMIN);
			setState(1815);
			match(KW_OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MetastoreCheckContext extends ParserRuleContext {
		public Token repair;
		public Token opt;
		public Token parts;
		public TerminalNode KW_MSCK() { return getToken(HiveParser.KW_MSCK, 0); }
		public TerminalNode KW_TABLE() { return getToken(HiveParser.KW_TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode KW_REPAIR() { return getToken(HiveParser.KW_REPAIR, 0); }
		public TerminalNode KW_PARTITIONS() { return getToken(HiveParser.KW_PARTITIONS, 0); }
		public TerminalNode KW_ADD() { return getToken(HiveParser.KW_ADD, 0); }
		public TerminalNode KW_DROP() { return getToken(HiveParser.KW_DROP, 0); }
		public TerminalNode KW_SYNC() { return getToken(HiveParser.KW_SYNC, 0); }
		public PartitionSelectorSpecContext partitionSelectorSpec() {
			return getRuleContext(PartitionSelectorSpecContext.class,0);
		}
		public MetastoreCheckContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_metastoreCheck; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterMetastoreCheck(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitMetastoreCheck(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitMetastoreCheck(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MetastoreCheckContext metastoreCheck() throws RecognitionException {
		MetastoreCheckContext _localctx = new MetastoreCheckContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_metastoreCheck);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1817);
			match(KW_MSCK);
			setState(1819);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_REPAIR) {
				{
				setState(1818);
				((MetastoreCheckContext)_localctx).repair = match(KW_REPAIR);
				}
			}

			{
			setState(1821);
			match(KW_TABLE);
			setState(1822);
			tableName();
			setState(1828);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ADD || _la==KW_DROP || _la==KW_SYNC) {
				{
				setState(1823);
				((MetastoreCheckContext)_localctx).opt = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==KW_ADD || _la==KW_DROP || _la==KW_SYNC) ) {
					((MetastoreCheckContext)_localctx).opt = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1824);
				((MetastoreCheckContext)_localctx).parts = match(KW_PARTITIONS);
				setState(1826);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(1825);
					partitionSelectorSpec();
					}
				}

				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResourceListContext extends ParserRuleContext {
		public List<ResourceContext> resource() {
			return getRuleContexts(ResourceContext.class);
		}
		public ResourceContext resource(int i) {
			return getRuleContext(ResourceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public ResourceListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterResourceList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitResourceList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitResourceList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResourceListContext resourceList() throws RecognitionException {
		ResourceListContext _localctx = new ResourceListContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_resourceList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1830);
			resource();
			setState(1835);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1831);
				match(COMMA);
				setState(1832);
				resource();
				}
				}
				setState(1837);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResourceContext extends ParserRuleContext {
		public ResourceTypeContext resType;
		public Token resPath;
		public ResourceTypeContext resourceType() {
			return getRuleContext(ResourceTypeContext.class,0);
		}
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public ResourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterResource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitResource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitResource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResourceContext resource() throws RecognitionException {
		ResourceContext _localctx = new ResourceContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_resource);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1838);
			((ResourceContext)_localctx).resType = resourceType();
			setState(1839);
			((ResourceContext)_localctx).resPath = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResourceTypeContext extends ParserRuleContext {
		public TerminalNode KW_JAR() { return getToken(HiveParser.KW_JAR, 0); }
		public TerminalNode KW_FILE() { return getToken(HiveParser.KW_FILE, 0); }
		public TerminalNode KW_ARCHIVE() { return getToken(HiveParser.KW_ARCHIVE, 0); }
		public ResourceTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterResourceType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitResourceType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitResourceType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResourceTypeContext resourceType() throws RecognitionException {
		ResourceTypeContext _localctx = new ResourceTypeContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_resourceType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1841);
			_la = _input.LA(1);
			if ( !(_la==KW_ARCHIVE || _la==KW_FILE || _la==KW_JAR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateFunctionStatementContext extends ParserRuleContext {
		public Token temp;
		public ResourceListContext rList;
		public TerminalNode KW_CREATE() { return getToken(HiveParser.KW_CREATE, 0); }
		public TerminalNode KW_FUNCTION() { return getToken(HiveParser.KW_FUNCTION, 0); }
		public FunctionIdentifierContext functionIdentifier() {
			return getRuleContext(FunctionIdentifierContext.class,0);
		}
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TerminalNode KW_USING() { return getToken(HiveParser.KW_USING, 0); }
		public TerminalNode KW_TEMPORARY() { return getToken(HiveParser.KW_TEMPORARY, 0); }
		public ResourceListContext resourceList() {
			return getRuleContext(ResourceListContext.class,0);
		}
		public CreateFunctionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCreateFunctionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCreateFunctionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCreateFunctionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementContext createFunctionStatement() throws RecognitionException {
		CreateFunctionStatementContext _localctx = new CreateFunctionStatementContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_createFunctionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1843);
			match(KW_CREATE);
			setState(1845);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_TEMPORARY) {
				{
				setState(1844);
				((CreateFunctionStatementContext)_localctx).temp = match(KW_TEMPORARY);
				}
			}

			setState(1847);
			match(KW_FUNCTION);
			setState(1848);
			functionIdentifier();
			setState(1849);
			match(KW_AS);
			setState(1850);
			match(StringLiteral);
			setState(1853);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_USING) {
				{
				setState(1851);
				match(KW_USING);
				setState(1852);
				((CreateFunctionStatementContext)_localctx).rList = resourceList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropFunctionStatementContext extends ParserRuleContext {
		public Token temp;
		public TerminalNode KW_DROP() { return getToken(HiveParser.KW_DROP, 0); }
		public TerminalNode KW_FUNCTION() { return getToken(HiveParser.KW_FUNCTION, 0); }
		public FunctionIdentifierContext functionIdentifier() {
			return getRuleContext(FunctionIdentifierContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode KW_TEMPORARY() { return getToken(HiveParser.KW_TEMPORARY, 0); }
		public DropFunctionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunctionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDropFunctionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDropFunctionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDropFunctionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFunctionStatementContext dropFunctionStatement() throws RecognitionException {
		DropFunctionStatementContext _localctx = new DropFunctionStatementContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_dropFunctionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1855);
			match(KW_DROP);
			setState(1857);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_TEMPORARY) {
				{
				setState(1856);
				((DropFunctionStatementContext)_localctx).temp = match(KW_TEMPORARY);
				}
			}

			setState(1859);
			match(KW_FUNCTION);
			setState(1861);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_IF) {
				{
				setState(1860);
				ifExists();
				}
			}

			setState(1863);
			functionIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReloadFunctionsStatementContext extends ParserRuleContext {
		public TerminalNode KW_RELOAD() { return getToken(HiveParser.KW_RELOAD, 0); }
		public TerminalNode KW_FUNCTIONS() { return getToken(HiveParser.KW_FUNCTIONS, 0); }
		public TerminalNode KW_FUNCTION() { return getToken(HiveParser.KW_FUNCTION, 0); }
		public ReloadFunctionsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloadFunctionsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterReloadFunctionsStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitReloadFunctionsStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitReloadFunctionsStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloadFunctionsStatementContext reloadFunctionsStatement() throws RecognitionException {
		ReloadFunctionsStatementContext _localctx = new ReloadFunctionsStatementContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_reloadFunctionsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1865);
			match(KW_RELOAD);
			setState(1866);
			_la = _input.LA(1);
			if ( !(_la==KW_FUNCTION || _la==KW_FUNCTIONS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateMacroStatementContext extends ParserRuleContext {
		public TerminalNode KW_CREATE() { return getToken(HiveParser.KW_CREATE, 0); }
		public TerminalNode KW_TEMPORARY() { return getToken(HiveParser.KW_TEMPORARY, 0); }
		public TerminalNode KW_MACRO() { return getToken(HiveParser.KW_MACRO, 0); }
		public TerminalNode Identifier() { return getToken(HiveParser.Identifier, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ColumnNameTypeListContext columnNameTypeList() {
			return getRuleContext(ColumnNameTypeListContext.class,0);
		}
		public CreateMacroStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createMacroStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCreateMacroStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCreateMacroStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCreateMacroStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateMacroStatementContext createMacroStatement() throws RecognitionException {
		CreateMacroStatementContext _localctx = new CreateMacroStatementContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_createMacroStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1868);
			match(KW_CREATE);
			setState(1869);
			match(KW_TEMPORARY);
			setState(1870);
			match(KW_MACRO);
			setState(1871);
			match(Identifier);
			setState(1872);
			match(LPAREN);
			setState(1874);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 808078815591695742L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 1083038567331911621L) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 8916819943869537315L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & 4159991143015340909L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8484708576009596927L) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & 17776728909112555L) != 0) || _la==Identifier) {
				{
				setState(1873);
				columnNameTypeList();
				}
			}

			setState(1876);
			match(RPAREN);
			setState(1877);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropMacroStatementContext extends ParserRuleContext {
		public TerminalNode KW_DROP() { return getToken(HiveParser.KW_DROP, 0); }
		public TerminalNode KW_TEMPORARY() { return getToken(HiveParser.KW_TEMPORARY, 0); }
		public TerminalNode KW_MACRO() { return getToken(HiveParser.KW_MACRO, 0); }
		public TerminalNode Identifier() { return getToken(HiveParser.Identifier, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropMacroStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropMacroStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDropMacroStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDropMacroStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDropMacroStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropMacroStatementContext dropMacroStatement() throws RecognitionException {
		DropMacroStatementContext _localctx = new DropMacroStatementContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_dropMacroStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1879);
			match(KW_DROP);
			setState(1880);
			match(KW_TEMPORARY);
			setState(1881);
			match(KW_MACRO);
			setState(1883);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_IF) {
				{
				setState(1882);
				ifExists();
				}
			}

			setState(1885);
			match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateViewStatementContext extends ParserRuleContext {
		public TableNameContext name;
		public TerminalNode KW_CREATE() { return getToken(HiveParser.KW_CREATE, 0); }
		public TerminalNode KW_VIEW() { return getToken(HiveParser.KW_VIEW, 0); }
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public SelectStatementWithCTEContext selectStatementWithCTE() {
			return getRuleContext(SelectStatementWithCTEContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public OrReplaceContext orReplace() {
			return getRuleContext(OrReplaceContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public ColumnNameCommentListContext columnNameCommentList() {
			return getRuleContext(ColumnNameCommentListContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public TableCommentContext tableComment() {
			return getRuleContext(TableCommentContext.class,0);
		}
		public ViewPartitionContext viewPartition() {
			return getRuleContext(ViewPartitionContext.class,0);
		}
		public TablePropertiesPrefixedContext tablePropertiesPrefixed() {
			return getRuleContext(TablePropertiesPrefixedContext.class,0);
		}
		public CreateViewStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createViewStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCreateViewStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCreateViewStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCreateViewStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewStatementContext createViewStatement() throws RecognitionException {
		CreateViewStatementContext _localctx = new CreateViewStatementContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_createViewStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1887);
			match(KW_CREATE);
			setState(1889);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_OR) {
				{
				setState(1888);
				orReplace();
				}
			}

			setState(1891);
			match(KW_VIEW);
			setState(1893);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_IF) {
				{
				setState(1892);
				ifNotExists();
				}
			}

			setState(1895);
			((CreateViewStatementContext)_localctx).name = tableName();
			setState(1900);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(1896);
				match(LPAREN);
				setState(1897);
				columnNameCommentList();
				setState(1898);
				match(RPAREN);
				}
			}

			setState(1903);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COMMENT) {
				{
				setState(1902);
				tableComment();
				}
			}

			setState(1906);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PARTITIONED) {
				{
				setState(1905);
				viewPartition();
				}
			}

			setState(1909);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_TBLPROPERTIES) {
				{
				setState(1908);
				tablePropertiesPrefixed();
				}
			}

			setState(1911);
			match(KW_AS);
			setState(1912);
			selectStatementWithCTE();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewPartitionContext extends ParserRuleContext {
		public PartitionTransformSpecContext spec;
		public TerminalNode KW_PARTITIONED() { return getToken(HiveParser.KW_PARTITIONED, 0); }
		public TerminalNode KW_ON() { return getToken(HiveParser.KW_ON, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public ColumnNameListContext columnNameList() {
			return getRuleContext(ColumnNameListContext.class,0);
		}
		public TerminalNode KW_SPEC() { return getToken(HiveParser.KW_SPEC, 0); }
		public PartitionTransformSpecContext partitionTransformSpec() {
			return getRuleContext(PartitionTransformSpecContext.class,0);
		}
		public ViewPartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewPartition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterViewPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitViewPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitViewPartition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewPartitionContext viewPartition() throws RecognitionException {
		ViewPartitionContext _localctx = new ViewPartitionContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_viewPartition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1914);
			match(KW_PARTITIONED);
			setState(1915);
			match(KW_ON);
			setState(1921);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
				{
				setState(1916);
				match(LPAREN);
				setState(1917);
				columnNameList();
				}
				break;
			case KW_SPEC:
				{
				setState(1918);
				match(KW_SPEC);
				setState(1919);
				match(LPAREN);
				setState(1920);
				((ViewPartitionContext)_localctx).spec = partitionTransformSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1923);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewOrganizationContext extends ParserRuleContext {
		public ViewClusterSpecContext viewClusterSpec() {
			return getRuleContext(ViewClusterSpecContext.class,0);
		}
		public ViewComplexSpecContext viewComplexSpec() {
			return getRuleContext(ViewComplexSpecContext.class,0);
		}
		public ViewOrganizationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewOrganization; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterViewOrganization(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitViewOrganization(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitViewOrganization(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewOrganizationContext viewOrganization() throws RecognitionException {
		ViewOrganizationContext _localctx = new ViewOrganizationContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_viewOrganization);
		try {
			setState(1927);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_CLUSTERED:
				enterOuterAlt(_localctx, 1);
				{
				setState(1925);
				viewClusterSpec();
				}
				break;
			case KW_DISTRIBUTED:
				enterOuterAlt(_localctx, 2);
				{
				setState(1926);
				viewComplexSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewClusterSpecContext extends ParserRuleContext {
		public TerminalNode KW_CLUSTERED() { return getToken(HiveParser.KW_CLUSTERED, 0); }
		public TerminalNode KW_ON() { return getToken(HiveParser.KW_ON, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public ColumnNameListContext columnNameList() {
			return getRuleContext(ColumnNameListContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public ViewClusterSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewClusterSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterViewClusterSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitViewClusterSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitViewClusterSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewClusterSpecContext viewClusterSpec() throws RecognitionException {
		ViewClusterSpecContext _localctx = new ViewClusterSpecContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_viewClusterSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1929);
			match(KW_CLUSTERED);
			setState(1930);
			match(KW_ON);
			setState(1931);
			match(LPAREN);
			setState(1932);
			columnNameList();
			setState(1933);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewComplexSpecContext extends ParserRuleContext {
		public ViewDistSpecContext viewDistSpec() {
			return getRuleContext(ViewDistSpecContext.class,0);
		}
		public ViewSortSpecContext viewSortSpec() {
			return getRuleContext(ViewSortSpecContext.class,0);
		}
		public ViewComplexSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewComplexSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterViewComplexSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitViewComplexSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitViewComplexSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewComplexSpecContext viewComplexSpec() throws RecognitionException {
		ViewComplexSpecContext _localctx = new ViewComplexSpecContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_viewComplexSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1935);
			viewDistSpec();
			setState(1936);
			viewSortSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewDistSpecContext extends ParserRuleContext {
		public ColumnNameListContext colList;
		public TerminalNode KW_DISTRIBUTED() { return getToken(HiveParser.KW_DISTRIBUTED, 0); }
		public TerminalNode KW_ON() { return getToken(HiveParser.KW_ON, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public ColumnNameListContext columnNameList() {
			return getRuleContext(ColumnNameListContext.class,0);
		}
		public ViewDistSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewDistSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterViewDistSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitViewDistSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitViewDistSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewDistSpecContext viewDistSpec() throws RecognitionException {
		ViewDistSpecContext _localctx = new ViewDistSpecContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_viewDistSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1938);
			match(KW_DISTRIBUTED);
			setState(1939);
			match(KW_ON);
			setState(1940);
			match(LPAREN);
			setState(1941);
			((ViewDistSpecContext)_localctx).colList = columnNameList();
			setState(1942);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewSortSpecContext extends ParserRuleContext {
		public ColumnNameListContext colList;
		public TerminalNode KW_SORTED() { return getToken(HiveParser.KW_SORTED, 0); }
		public TerminalNode KW_ON() { return getToken(HiveParser.KW_ON, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public ColumnNameListContext columnNameList() {
			return getRuleContext(ColumnNameListContext.class,0);
		}
		public ViewSortSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewSortSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterViewSortSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitViewSortSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitViewSortSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewSortSpecContext viewSortSpec() throws RecognitionException {
		ViewSortSpecContext _localctx = new ViewSortSpecContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_viewSortSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1944);
			match(KW_SORTED);
			setState(1945);
			match(KW_ON);
			setState(1946);
			match(LPAREN);
			setState(1947);
			((ViewSortSpecContext)_localctx).colList = columnNameList();
			setState(1948);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropViewStatementContext extends ParserRuleContext {
		public TerminalNode KW_DROP() { return getToken(HiveParser.KW_DROP, 0); }
		public TerminalNode KW_VIEW() { return getToken(HiveParser.KW_VIEW, 0); }
		public ViewNameContext viewName() {
			return getRuleContext(ViewNameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropViewStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropViewStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDropViewStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDropViewStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDropViewStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropViewStatementContext dropViewStatement() throws RecognitionException {
		DropViewStatementContext _localctx = new DropViewStatementContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_dropViewStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1950);
			match(KW_DROP);
			setState(1951);
			match(KW_VIEW);
			setState(1953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_IF) {
				{
				setState(1952);
				ifExists();
				}
			}

			setState(1955);
			viewName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateMaterializedViewStatementContext extends ParserRuleContext {
		public TableNameContext name;
		public TerminalNode KW_CREATE() { return getToken(HiveParser.KW_CREATE, 0); }
		public TerminalNode KW_MATERIALIZED() { return getToken(HiveParser.KW_MATERIALIZED, 0); }
		public TerminalNode KW_VIEW() { return getToken(HiveParser.KW_VIEW, 0); }
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public SelectStatementWithCTEContext selectStatementWithCTE() {
			return getRuleContext(SelectStatementWithCTEContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public RewriteDisabledContext rewriteDisabled() {
			return getRuleContext(RewriteDisabledContext.class,0);
		}
		public TableCommentContext tableComment() {
			return getRuleContext(TableCommentContext.class,0);
		}
		public ViewPartitionContext viewPartition() {
			return getRuleContext(ViewPartitionContext.class,0);
		}
		public ViewOrganizationContext viewOrganization() {
			return getRuleContext(ViewOrganizationContext.class,0);
		}
		public TableRowFormatContext tableRowFormat() {
			return getRuleContext(TableRowFormatContext.class,0);
		}
		public TableFileFormatContext tableFileFormat() {
			return getRuleContext(TableFileFormatContext.class,0);
		}
		public TableLocationContext tableLocation() {
			return getRuleContext(TableLocationContext.class,0);
		}
		public TablePropertiesPrefixedContext tablePropertiesPrefixed() {
			return getRuleContext(TablePropertiesPrefixedContext.class,0);
		}
		public CreateMaterializedViewStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createMaterializedViewStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCreateMaterializedViewStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCreateMaterializedViewStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCreateMaterializedViewStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateMaterializedViewStatementContext createMaterializedViewStatement() throws RecognitionException {
		CreateMaterializedViewStatementContext _localctx = new CreateMaterializedViewStatementContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_createMaterializedViewStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1957);
			match(KW_CREATE);
			setState(1958);
			match(KW_MATERIALIZED);
			setState(1959);
			match(KW_VIEW);
			setState(1961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_IF) {
				{
				setState(1960);
				ifNotExists();
				}
			}

			setState(1963);
			((CreateMaterializedViewStatementContext)_localctx).name = tableName();
			setState(1965);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_DISABLE) {
				{
				setState(1964);
				rewriteDisabled();
				}
			}

			setState(1968);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COMMENT) {
				{
				setState(1967);
				tableComment();
				}
			}

			setState(1971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PARTITIONED) {
				{
				setState(1970);
				viewPartition();
				}
			}

			setState(1974);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_CLUSTERED || _la==KW_DISTRIBUTED) {
				{
				setState(1973);
				viewOrganization();
				}
			}

			setState(1977);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ROW) {
				{
				setState(1976);
				tableRowFormat();
				}
			}

			setState(1980);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_STORED) {
				{
				setState(1979);
				tableFileFormat();
				}
			}

			setState(1983);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_LOCATION) {
				{
				setState(1982);
				tableLocation();
				}
			}

			setState(1986);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_TBLPROPERTIES) {
				{
				setState(1985);
				tablePropertiesPrefixed();
				}
			}

			setState(1988);
			match(KW_AS);
			setState(1989);
			selectStatementWithCTE();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropMaterializedViewStatementContext extends ParserRuleContext {
		public TerminalNode KW_DROP() { return getToken(HiveParser.KW_DROP, 0); }
		public TerminalNode KW_MATERIALIZED() { return getToken(HiveParser.KW_MATERIALIZED, 0); }
		public TerminalNode KW_VIEW() { return getToken(HiveParser.KW_VIEW, 0); }
		public ViewNameContext viewName() {
			return getRuleContext(ViewNameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropMaterializedViewStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropMaterializedViewStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDropMaterializedViewStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDropMaterializedViewStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDropMaterializedViewStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropMaterializedViewStatementContext dropMaterializedViewStatement() throws RecognitionException {
		DropMaterializedViewStatementContext _localctx = new DropMaterializedViewStatementContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_dropMaterializedViewStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1991);
			match(KW_DROP);
			setState(1992);
			match(KW_MATERIALIZED);
			setState(1993);
			match(KW_VIEW);
			setState(1995);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_IF) {
				{
				setState(1994);
				ifExists();
				}
			}

			setState(1997);
			viewName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateScheduledQueryStatementContext extends ParserRuleContext {
		public Id_Context name;
		public TerminalNode KW_CREATE() { return getToken(HiveParser.KW_CREATE, 0); }
		public TerminalNode KW_SCHEDULED() { return getToken(HiveParser.KW_SCHEDULED, 0); }
		public TerminalNode KW_QUERY() { return getToken(HiveParser.KW_QUERY, 0); }
		public ScheduleSpecContext scheduleSpec() {
			return getRuleContext(ScheduleSpecContext.class,0);
		}
		public DefinedAsSpecContext definedAsSpec() {
			return getRuleContext(DefinedAsSpecContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public ExecutedAsSpecContext executedAsSpec() {
			return getRuleContext(ExecutedAsSpecContext.class,0);
		}
		public EnableSpecificationContext enableSpecification() {
			return getRuleContext(EnableSpecificationContext.class,0);
		}
		public CreateScheduledQueryStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createScheduledQueryStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCreateScheduledQueryStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCreateScheduledQueryStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCreateScheduledQueryStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateScheduledQueryStatementContext createScheduledQueryStatement() throws RecognitionException {
		CreateScheduledQueryStatementContext _localctx = new CreateScheduledQueryStatementContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_createScheduledQueryStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1999);
			match(KW_CREATE);
			setState(2000);
			match(KW_SCHEDULED);
			setState(2001);
			match(KW_QUERY);
			setState(2002);
			((CreateScheduledQueryStatementContext)_localctx).name = id_();
			setState(2003);
			scheduleSpec();
			setState(2005);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_EXECUTED) {
				{
				setState(2004);
				executedAsSpec();
				}
			}

			setState(2008);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_DISABLE || _la==KW_ENABLE) {
				{
				setState(2007);
				enableSpecification();
				}
			}

			setState(2010);
			definedAsSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropScheduledQueryStatementContext extends ParserRuleContext {
		public Id_Context name;
		public TerminalNode KW_DROP() { return getToken(HiveParser.KW_DROP, 0); }
		public TerminalNode KW_SCHEDULED() { return getToken(HiveParser.KW_SCHEDULED, 0); }
		public TerminalNode KW_QUERY() { return getToken(HiveParser.KW_QUERY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public DropScheduledQueryStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropScheduledQueryStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDropScheduledQueryStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDropScheduledQueryStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDropScheduledQueryStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropScheduledQueryStatementContext dropScheduledQueryStatement() throws RecognitionException {
		DropScheduledQueryStatementContext _localctx = new DropScheduledQueryStatementContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_dropScheduledQueryStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2012);
			match(KW_DROP);
			setState(2013);
			match(KW_SCHEDULED);
			setState(2014);
			match(KW_QUERY);
			setState(2015);
			((DropScheduledQueryStatementContext)_localctx).name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterScheduledQueryStatementContext extends ParserRuleContext {
		public Id_Context name;
		public AlterScheduledQueryChangeContext mod;
		public TerminalNode KW_ALTER() { return getToken(HiveParser.KW_ALTER, 0); }
		public TerminalNode KW_SCHEDULED() { return getToken(HiveParser.KW_SCHEDULED, 0); }
		public TerminalNode KW_QUERY() { return getToken(HiveParser.KW_QUERY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public AlterScheduledQueryChangeContext alterScheduledQueryChange() {
			return getRuleContext(AlterScheduledQueryChangeContext.class,0);
		}
		public AlterScheduledQueryStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterScheduledQueryStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterScheduledQueryStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterScheduledQueryStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterScheduledQueryStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterScheduledQueryStatementContext alterScheduledQueryStatement() throws RecognitionException {
		AlterScheduledQueryStatementContext _localctx = new AlterScheduledQueryStatementContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_alterScheduledQueryStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2017);
			match(KW_ALTER);
			setState(2018);
			match(KW_SCHEDULED);
			setState(2019);
			match(KW_QUERY);
			setState(2020);
			((AlterScheduledQueryStatementContext)_localctx).name = id_();
			setState(2021);
			((AlterScheduledQueryStatementContext)_localctx).mod = alterScheduledQueryChange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterScheduledQueryChangeContext extends ParserRuleContext {
		public ScheduleSpecContext scheduleSpec() {
			return getRuleContext(ScheduleSpecContext.class,0);
		}
		public ExecutedAsSpecContext executedAsSpec() {
			return getRuleContext(ExecutedAsSpecContext.class,0);
		}
		public EnableSpecificationContext enableSpecification() {
			return getRuleContext(EnableSpecificationContext.class,0);
		}
		public DefinedAsSpecContext definedAsSpec() {
			return getRuleContext(DefinedAsSpecContext.class,0);
		}
		public TerminalNode KW_EXECUTE() { return getToken(HiveParser.KW_EXECUTE, 0); }
		public AlterScheduledQueryChangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterScheduledQueryChange; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterScheduledQueryChange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterScheduledQueryChange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterScheduledQueryChange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterScheduledQueryChangeContext alterScheduledQueryChange() throws RecognitionException {
		AlterScheduledQueryChangeContext _localctx = new AlterScheduledQueryChangeContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_alterScheduledQueryChange);
		try {
			setState(2028);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_CRON:
			case KW_EVERY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2023);
				scheduleSpec();
				}
				break;
			case KW_EXECUTED:
				enterOuterAlt(_localctx, 2);
				{
				setState(2024);
				executedAsSpec();
				}
				break;
			case KW_DISABLE:
			case KW_ENABLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2025);
				enableSpecification();
				}
				break;
			case KW_AS:
			case KW_DEFINED:
				enterOuterAlt(_localctx, 4);
				{
				setState(2026);
				definedAsSpec();
				}
				break;
			case KW_EXECUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2027);
				match(KW_EXECUTE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ScheduleSpecContext extends ParserRuleContext {
		public Token cronString;
		public Token value;
		public IntervalQualifiersContext qualifier;
		public Token offsetTs;
		public TerminalNode KW_CRON() { return getToken(HiveParser.KW_CRON, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TerminalNode KW_EVERY() { return getToken(HiveParser.KW_EVERY, 0); }
		public IntervalQualifiersContext intervalQualifiers() {
			return getRuleContext(IntervalQualifiersContext.class,0);
		}
		public TerminalNode Number() { return getToken(HiveParser.Number, 0); }
		public TerminalNode KW_AT() { return getToken(HiveParser.KW_AT, 0); }
		public TerminalNode KW_OFFSET() { return getToken(HiveParser.KW_OFFSET, 0); }
		public TerminalNode KW_BY() { return getToken(HiveParser.KW_BY, 0); }
		public ScheduleSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scheduleSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterScheduleSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitScheduleSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitScheduleSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScheduleSpecContext scheduleSpec() throws RecognitionException {
		ScheduleSpecContext _localctx = new ScheduleSpecContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_scheduleSpec);
		int _la;
		try {
			setState(2045);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_CRON:
				enterOuterAlt(_localctx, 1);
				{
				setState(2030);
				match(KW_CRON);
				setState(2031);
				((ScheduleSpecContext)_localctx).cronString = match(StringLiteral);
				}
				break;
			case KW_EVERY:
				enterOuterAlt(_localctx, 2);
				{
				setState(2032);
				match(KW_EVERY);
				setState(2034);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==Number) {
					{
					setState(2033);
					((ScheduleSpecContext)_localctx).value = match(Number);
					}
				}

				setState(2036);
				((ScheduleSpecContext)_localctx).qualifier = intervalQualifiers();
				setState(2043);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_AT || _la==KW_OFFSET) {
					{
					setState(2040);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case KW_AT:
						{
						setState(2037);
						match(KW_AT);
						}
						break;
					case KW_OFFSET:
						{
						setState(2038);
						match(KW_OFFSET);
						setState(2039);
						match(KW_BY);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2042);
					((ScheduleSpecContext)_localctx).offsetTs = match(StringLiteral);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExecutedAsSpecContext extends ParserRuleContext {
		public Token executedAs;
		public TerminalNode KW_EXECUTED() { return getToken(HiveParser.KW_EXECUTED, 0); }
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public ExecutedAsSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executedAsSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterExecutedAsSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitExecutedAsSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitExecutedAsSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecutedAsSpecContext executedAsSpec() throws RecognitionException {
		ExecutedAsSpecContext _localctx = new ExecutedAsSpecContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_executedAsSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2047);
			match(KW_EXECUTED);
			setState(2048);
			match(KW_AS);
			setState(2049);
			((ExecutedAsSpecContext)_localctx).executedAs = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefinedAsSpecContext extends ParserRuleContext {
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public TerminalNode KW_DEFINED() { return getToken(HiveParser.KW_DEFINED, 0); }
		public DefinedAsSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definedAsSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDefinedAsSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDefinedAsSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDefinedAsSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinedAsSpecContext definedAsSpec() throws RecognitionException {
		DefinedAsSpecContext _localctx = new DefinedAsSpecContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_definedAsSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2052);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_DEFINED) {
				{
				setState(2051);
				match(KW_DEFINED);
				}
			}

			setState(2054);
			match(KW_AS);
			setState(2055);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowFunctionIdentifierContext extends ParserRuleContext {
		public FunctionIdentifierContext functionIdentifier() {
			return getRuleContext(FunctionIdentifierContext.class,0);
		}
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public ShowFunctionIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showFunctionIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterShowFunctionIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitShowFunctionIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitShowFunctionIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowFunctionIdentifierContext showFunctionIdentifier() throws RecognitionException {
		ShowFunctionIdentifierContext _localctx = new ShowFunctionIdentifierContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_showFunctionIdentifier);
		try {
			setState(2059);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_ABORT:
			case KW_ACTIVATE:
			case KW_ACTIVE:
			case KW_ADD:
			case KW_ADMIN:
			case KW_AFTER:
			case KW_ALLOC_FRACTION:
			case KW_ANALYZE:
			case KW_ARCHIVE:
			case KW_ASC:
			case KW_AST:
			case KW_AT:
			case KW_AUTOCOMMIT:
			case KW_BATCH:
			case KW_BEFORE:
			case KW_BUCKET:
			case KW_BUCKETS:
			case KW_CACHE:
			case KW_CASCADE:
			case KW_CBO:
			case KW_CHANGE:
			case KW_CHECK:
			case KW_CLUSTER:
			case KW_CLUSTERED:
			case KW_CLUSTERSTATUS:
			case KW_COLLECTION:
			case KW_COLUMNS:
			case KW_COMMENT:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_COMPUTE:
			case KW_CONCATENATE:
			case KW_CONTINUE:
			case KW_COST:
			case KW_CRON:
			case KW_DATA:
			case KW_DATABASES:
			case KW_DATETIME:
			case KW_DAY:
			case KW_DAYOFWEEK:
			case KW_DBPROPERTIES:
			case KW_DCPROPERTIES:
			case KW_DEBUG:
			case KW_DEFAULT:
			case KW_DEFERRED:
			case KW_DEFINED:
			case KW_DELIMITED:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DETAIL:
			case KW_DIRECTORIES:
			case KW_DIRECTORY:
			case KW_DISABLE:
			case KW_DISTRIBUTE:
			case KW_DISTRIBUTED:
			case KW_DO:
			case KW_DOW:
			case KW_DUMP:
			case KW_ELEM_TYPE:
			case KW_ENABLE:
			case KW_ENFORCED:
			case KW_ESCAPED:
			case KW_EVERY:
			case KW_EXCLUSIVE:
			case KW_EXECUTE:
			case KW_EXECUTED:
			case KW_EXPIRE_SNAPSHOTS:
			case KW_EXPLAIN:
			case KW_EXPORT:
			case KW_EXPRESSION:
			case KW_FIELDS:
			case KW_FILE:
			case KW_FILEFORMAT:
			case KW_FIRST:
			case KW_FORMAT:
			case KW_FORMATTED:
			case KW_FUNCTIONS:
			case KW_HOLD_DDLTIME:
			case KW_HOUR:
			case KW_IDXPROPERTIES:
			case KW_IGNORE:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_INPATH:
			case KW_INPUTDRIVER:
			case KW_INPUTFORMAT:
			case KW_ISOLATION:
			case KW_ITEMS:
			case KW_JAR:
			case KW_JOINCOST:
			case KW_KEY:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LAST:
			case KW_LEVEL:
			case KW_LIMIT:
			case KW_LINES:
			case KW_LOAD:
			case KW_LOCATION:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_LONG:
			case KW_MANAGED:
			case KW_MANAGEDLOCATION:
			case KW_MANAGEMENT:
			case KW_MAPJOIN:
			case KW_MAPPING:
			case KW_MATCHED:
			case KW_MATERIALIZED:
			case KW_METADATA:
			case KW_MINUTE:
			case KW_MONTH:
			case KW_MOVE:
			case KW_MSCK:
			case KW_NORELY:
			case KW_NOSCAN:
			case KW_NOVALIDATE:
			case KW_NO_DROP:
			case KW_NULLS:
			case KW_OFFLINE:
			case KW_OFFSET:
			case KW_OPERATOR:
			case KW_OPTION:
			case KW_OUTPUTDRIVER:
			case KW_OUTPUTFORMAT:
			case KW_OVERWRITE:
			case KW_OWNER:
			case KW_PARTITIONED:
			case KW_PARTITIONS:
			case KW_PATH:
			case KW_PLAN:
			case KW_PLANS:
			case KW_PLUS:
			case KW_POOL:
			case KW_PRINCIPALS:
			case KW_PROTECTION:
			case KW_PURGE:
			case KW_QUARTER:
			case KW_QUERY:
			case KW_QUERY_PARALLELISM:
			case KW_READ:
			case KW_READONLY:
			case KW_REBUILD:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_RELOAD:
			case KW_RELY:
			case KW_REMOTE:
			case KW_RENAME:
			case KW_REOPTIMIZATION:
			case KW_REPAIR:
			case KW_REPL:
			case KW_REPLACE:
			case KW_REPLICATION:
			case KW_RESOURCE:
			case KW_RESPECT:
			case KW_RESTRICT:
			case KW_REWRITE:
			case KW_ROLE:
			case KW_ROLES:
			case KW_SCHEDULED:
			case KW_SCHEDULING_POLICY:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SECOND:
			case KW_SEMI:
			case KW_SERDE:
			case KW_SERDEPROPERTIES:
			case KW_SERVER:
			case KW_SETS:
			case KW_SET_CURRENT_SNAPSHOT:
			case KW_SHARED:
			case KW_SHOW:
			case KW_SHOW_DATABASE:
			case KW_SKEWED:
			case KW_SNAPSHOT:
			case KW_SORT:
			case KW_SORTED:
			case KW_SPEC:
			case KW_SSL:
			case KW_STATISTICS:
			case KW_STATUS:
			case KW_STORED:
			case KW_STREAMTABLE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_SUMMARY:
			case KW_SYSTEM_TIME:
			case KW_SYSTEM_VERSION:
			case KW_TABLES:
			case KW_TBLPROPERTIES:
			case KW_TEMPORARY:
			case KW_TERMINATED:
			case KW_TIMESTAMPTZ:
			case KW_TINYINT:
			case KW_TOUCH:
			case KW_TRANSACTION:
			case KW_TRANSACTIONAL:
			case KW_TRANSACTIONS:
			case KW_TRIM:
			case KW_TYPE:
			case KW_UNARCHIVE:
			case KW_UNDO:
			case KW_UNIONTYPE:
			case KW_UNKNOWN:
			case KW_UNLOCK:
			case KW_UNMANAGED:
			case KW_UNSET:
			case KW_UNSIGNED:
			case KW_URI:
			case KW_URL:
			case KW_USE:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_VALIDATE:
			case KW_VALUE_TYPE:
			case KW_VECTORIZATION:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_WAIT:
			case KW_WEEK:
			case KW_WHILE:
			case KW_WITHIN:
			case KW_WORK:
			case KW_WORKLOAD:
			case KW_WRITE:
			case KW_YEAR:
			case KW_ZONE:
			case Identifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(2057);
				functionIdentifier();
				}
				break;
			case StringLiteral:
				enterOuterAlt(_localctx, 2);
				{
				setState(2058);
				match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowStmtIdentifierContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public ShowStmtIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStmtIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterShowStmtIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitShowStmtIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitShowStmtIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowStmtIdentifierContext showStmtIdentifier() throws RecognitionException {
		ShowStmtIdentifierContext _localctx = new ShowStmtIdentifierContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_showStmtIdentifier);
		try {
			setState(2063);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_ABORT:
			case KW_ACTIVATE:
			case KW_ACTIVE:
			case KW_ADD:
			case KW_ADMIN:
			case KW_AFTER:
			case KW_ALLOC_FRACTION:
			case KW_ANALYZE:
			case KW_ARCHIVE:
			case KW_ASC:
			case KW_AST:
			case KW_AT:
			case KW_AUTOCOMMIT:
			case KW_BATCH:
			case KW_BEFORE:
			case KW_BUCKET:
			case KW_BUCKETS:
			case KW_CACHE:
			case KW_CASCADE:
			case KW_CBO:
			case KW_CHANGE:
			case KW_CHECK:
			case KW_CLUSTER:
			case KW_CLUSTERED:
			case KW_CLUSTERSTATUS:
			case KW_COLLECTION:
			case KW_COLUMNS:
			case KW_COMMENT:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_COMPUTE:
			case KW_CONCATENATE:
			case KW_CONTINUE:
			case KW_COST:
			case KW_CRON:
			case KW_DATA:
			case KW_DATABASES:
			case KW_DATETIME:
			case KW_DAY:
			case KW_DAYOFWEEK:
			case KW_DBPROPERTIES:
			case KW_DCPROPERTIES:
			case KW_DEBUG:
			case KW_DEFAULT:
			case KW_DEFERRED:
			case KW_DEFINED:
			case KW_DELIMITED:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DETAIL:
			case KW_DIRECTORIES:
			case KW_DIRECTORY:
			case KW_DISABLE:
			case KW_DISTRIBUTE:
			case KW_DISTRIBUTED:
			case KW_DO:
			case KW_DOW:
			case KW_DUMP:
			case KW_ELEM_TYPE:
			case KW_ENABLE:
			case KW_ENFORCED:
			case KW_ESCAPED:
			case KW_EVERY:
			case KW_EXCLUSIVE:
			case KW_EXECUTE:
			case KW_EXECUTED:
			case KW_EXPIRE_SNAPSHOTS:
			case KW_EXPLAIN:
			case KW_EXPORT:
			case KW_EXPRESSION:
			case KW_FIELDS:
			case KW_FILE:
			case KW_FILEFORMAT:
			case KW_FIRST:
			case KW_FORMAT:
			case KW_FORMATTED:
			case KW_FUNCTIONS:
			case KW_HOLD_DDLTIME:
			case KW_HOUR:
			case KW_IDXPROPERTIES:
			case KW_IGNORE:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_INPATH:
			case KW_INPUTDRIVER:
			case KW_INPUTFORMAT:
			case KW_ISOLATION:
			case KW_ITEMS:
			case KW_JAR:
			case KW_JOINCOST:
			case KW_KEY:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LAST:
			case KW_LEVEL:
			case KW_LIMIT:
			case KW_LINES:
			case KW_LOAD:
			case KW_LOCATION:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_LONG:
			case KW_MANAGED:
			case KW_MANAGEDLOCATION:
			case KW_MANAGEMENT:
			case KW_MAPJOIN:
			case KW_MAPPING:
			case KW_MATCHED:
			case KW_MATERIALIZED:
			case KW_METADATA:
			case KW_MINUTE:
			case KW_MONTH:
			case KW_MOVE:
			case KW_MSCK:
			case KW_NORELY:
			case KW_NOSCAN:
			case KW_NOVALIDATE:
			case KW_NO_DROP:
			case KW_NULLS:
			case KW_OFFLINE:
			case KW_OFFSET:
			case KW_OPERATOR:
			case KW_OPTION:
			case KW_OUTPUTDRIVER:
			case KW_OUTPUTFORMAT:
			case KW_OVERWRITE:
			case KW_OWNER:
			case KW_PARTITIONED:
			case KW_PARTITIONS:
			case KW_PATH:
			case KW_PLAN:
			case KW_PLANS:
			case KW_PLUS:
			case KW_POOL:
			case KW_PRINCIPALS:
			case KW_PROTECTION:
			case KW_PURGE:
			case KW_QUARTER:
			case KW_QUERY:
			case KW_QUERY_PARALLELISM:
			case KW_READ:
			case KW_READONLY:
			case KW_REBUILD:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_RELOAD:
			case KW_RELY:
			case KW_REMOTE:
			case KW_RENAME:
			case KW_REOPTIMIZATION:
			case KW_REPAIR:
			case KW_REPL:
			case KW_REPLACE:
			case KW_REPLICATION:
			case KW_RESOURCE:
			case KW_RESPECT:
			case KW_RESTRICT:
			case KW_REWRITE:
			case KW_ROLE:
			case KW_ROLES:
			case KW_SCHEDULED:
			case KW_SCHEDULING_POLICY:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SECOND:
			case KW_SEMI:
			case KW_SERDE:
			case KW_SERDEPROPERTIES:
			case KW_SERVER:
			case KW_SETS:
			case KW_SET_CURRENT_SNAPSHOT:
			case KW_SHARED:
			case KW_SHOW:
			case KW_SHOW_DATABASE:
			case KW_SKEWED:
			case KW_SNAPSHOT:
			case KW_SORT:
			case KW_SORTED:
			case KW_SPEC:
			case KW_SSL:
			case KW_STATISTICS:
			case KW_STATUS:
			case KW_STORED:
			case KW_STREAMTABLE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_SUMMARY:
			case KW_SYSTEM_TIME:
			case KW_SYSTEM_VERSION:
			case KW_TABLES:
			case KW_TBLPROPERTIES:
			case KW_TEMPORARY:
			case KW_TERMINATED:
			case KW_TIMESTAMPTZ:
			case KW_TINYINT:
			case KW_TOUCH:
			case KW_TRANSACTION:
			case KW_TRANSACTIONAL:
			case KW_TRANSACTIONS:
			case KW_TRIM:
			case KW_TYPE:
			case KW_UNARCHIVE:
			case KW_UNDO:
			case KW_UNIONTYPE:
			case KW_UNKNOWN:
			case KW_UNLOCK:
			case KW_UNMANAGED:
			case KW_UNSET:
			case KW_UNSIGNED:
			case KW_URI:
			case KW_URL:
			case KW_USE:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_VALIDATE:
			case KW_VALUE_TYPE:
			case KW_VECTORIZATION:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_WAIT:
			case KW_WEEK:
			case KW_WHILE:
			case KW_WITHIN:
			case KW_WORK:
			case KW_WORKLOAD:
			case KW_WRITE:
			case KW_YEAR:
			case KW_ZONE:
			case Identifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(2061);
				id_();
				}
				break;
			case StringLiteral:
				enterOuterAlt(_localctx, 2);
				{
				setState(2062);
				match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableCommentContext extends ParserRuleContext {
		public Token comment;
		public TerminalNode KW_COMMENT() { return getToken(HiveParser.KW_COMMENT, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TableCommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableComment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableComment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableCommentContext tableComment() throws RecognitionException {
		TableCommentContext _localctx = new TableCommentContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_tableComment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2065);
			match(KW_COMMENT);
			setState(2066);
			((TableCommentContext)_localctx).comment = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTablePartitionSpecContext extends ParserRuleContext {
		public CreateTablePartitionColumnTypeSpecContext opt1;
		public CreateTablePartitionColumnSpecContext opt2;
		public PartitionTransformSpecContext spec;
		public TerminalNode KW_PARTITIONED() { return getToken(HiveParser.KW_PARTITIONED, 0); }
		public TerminalNode KW_BY() { return getToken(HiveParser.KW_BY, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode KW_SPEC() { return getToken(HiveParser.KW_SPEC, 0); }
		public PartitionTransformSpecContext partitionTransformSpec() {
			return getRuleContext(PartitionTransformSpecContext.class,0);
		}
		public CreateTablePartitionColumnTypeSpecContext createTablePartitionColumnTypeSpec() {
			return getRuleContext(CreateTablePartitionColumnTypeSpecContext.class,0);
		}
		public CreateTablePartitionColumnSpecContext createTablePartitionColumnSpec() {
			return getRuleContext(CreateTablePartitionColumnSpecContext.class,0);
		}
		public CreateTablePartitionSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablePartitionSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCreateTablePartitionSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCreateTablePartitionSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCreateTablePartitionSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablePartitionSpecContext createTablePartitionSpec() throws RecognitionException {
		CreateTablePartitionSpecContext _localctx = new CreateTablePartitionSpecContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_createTablePartitionSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2068);
			match(KW_PARTITIONED);
			setState(2069);
			match(KW_BY);
			setState(2078);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
				{
				setState(2070);
				match(LPAREN);
				setState(2073);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
				case 1:
					{
					setState(2071);
					((CreateTablePartitionSpecContext)_localctx).opt1 = createTablePartitionColumnTypeSpec();
					}
					break;
				case 2:
					{
					setState(2072);
					((CreateTablePartitionSpecContext)_localctx).opt2 = createTablePartitionColumnSpec();
					}
					break;
				}
				}
				break;
			case KW_SPEC:
				{
				setState(2075);
				match(KW_SPEC);
				setState(2076);
				match(LPAREN);
				setState(2077);
				((CreateTablePartitionSpecContext)_localctx).spec = partitionTransformSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2080);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTablePartitionColumnTypeSpecContext extends ParserRuleContext {
		public List<ColumnNameTypeConstraintContext> columnNameTypeConstraint() {
			return getRuleContexts(ColumnNameTypeConstraintContext.class);
		}
		public ColumnNameTypeConstraintContext columnNameTypeConstraint(int i) {
			return getRuleContext(ColumnNameTypeConstraintContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public CreateTablePartitionColumnTypeSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablePartitionColumnTypeSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCreateTablePartitionColumnTypeSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCreateTablePartitionColumnTypeSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCreateTablePartitionColumnTypeSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablePartitionColumnTypeSpecContext createTablePartitionColumnTypeSpec() throws RecognitionException {
		CreateTablePartitionColumnTypeSpecContext _localctx = new CreateTablePartitionColumnTypeSpecContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_createTablePartitionColumnTypeSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2082);
			columnNameTypeConstraint();
			setState(2087);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2083);
				match(COMMA);
				setState(2084);
				columnNameTypeConstraint();
				}
				}
				setState(2089);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTablePartitionColumnSpecContext extends ParserRuleContext {
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public CreateTablePartitionColumnSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablePartitionColumnSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCreateTablePartitionColumnSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCreateTablePartitionColumnSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCreateTablePartitionColumnSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablePartitionColumnSpecContext createTablePartitionColumnSpec() throws RecognitionException {
		CreateTablePartitionColumnSpecContext _localctx = new CreateTablePartitionColumnSpecContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_createTablePartitionColumnSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2090);
			columnName();
			setState(2095);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2091);
				match(COMMA);
				setState(2092);
				columnName();
				}
				}
				setState(2097);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionTransformSpecContext extends ParserRuleContext {
		public List<ColumnNameTransformConstraintContext> columnNameTransformConstraint() {
			return getRuleContexts(ColumnNameTransformConstraintContext.class);
		}
		public ColumnNameTransformConstraintContext columnNameTransformConstraint(int i) {
			return getRuleContext(ColumnNameTransformConstraintContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public PartitionTransformSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionTransformSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPartitionTransformSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPartitionTransformSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPartitionTransformSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionTransformSpecContext partitionTransformSpec() throws RecognitionException {
		PartitionTransformSpecContext _localctx = new PartitionTransformSpecContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_partitionTransformSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2098);
			columnNameTransformConstraint();
			setState(2103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2099);
				match(COMMA);
				setState(2100);
				columnNameTransformConstraint();
				}
				}
				setState(2105);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnNameTransformConstraintContext extends ParserRuleContext {
		public PartitionTransformTypeContext partitionTransformType() {
			return getRuleContext(PartitionTransformTypeContext.class,0);
		}
		public ColumnNameTransformConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameTransformConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColumnNameTransformConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColumnNameTransformConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColumnNameTransformConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameTransformConstraintContext columnNameTransformConstraint() throws RecognitionException {
		ColumnNameTransformConstraintContext _localctx = new ColumnNameTransformConstraintContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_columnNameTransformConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2106);
			partitionTransformType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionTransformTypeContext extends ParserRuleContext {
		public Token value;
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public TerminalNode KW_YEAR() { return getToken(HiveParser.KW_YEAR, 0); }
		public TerminalNode KW_MONTH() { return getToken(HiveParser.KW_MONTH, 0); }
		public TerminalNode KW_DAY() { return getToken(HiveParser.KW_DAY, 0); }
		public TerminalNode KW_HOUR() { return getToken(HiveParser.KW_HOUR, 0); }
		public TerminalNode COMMA() { return getToken(HiveParser.COMMA, 0); }
		public TerminalNode KW_TRUNCATE() { return getToken(HiveParser.KW_TRUNCATE, 0); }
		public TerminalNode KW_BUCKET() { return getToken(HiveParser.KW_BUCKET, 0); }
		public TerminalNode Number() { return getToken(HiveParser.Number, 0); }
		public PartitionTransformTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionTransformType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPartitionTransformType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPartitionTransformType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPartitionTransformType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionTransformTypeContext partitionTransformType() throws RecognitionException {
		PartitionTransformTypeContext _localctx = new PartitionTransformTypeContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_partitionTransformType);
		int _la;
		try {
			setState(2121);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2108);
				columnName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2109);
				_la = _input.LA(1);
				if ( !(_la==KW_DAY || _la==KW_HOUR || _la==KW_MONTH || _la==KW_YEAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2110);
				match(LPAREN);
				setState(2111);
				columnName();
				setState(2112);
				match(RPAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2114);
				_la = _input.LA(1);
				if ( !(_la==KW_BUCKET || _la==KW_TRUNCATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2115);
				match(LPAREN);
				setState(2116);
				((PartitionTransformTypeContext)_localctx).value = match(Number);
				setState(2117);
				match(COMMA);
				setState(2118);
				columnName();
				setState(2119);
				match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableBucketsContext extends ParserRuleContext {
		public ColumnNameListContext bucketCols;
		public ColumnNameOrderListContext sortCols;
		public Token num;
		public TerminalNode KW_CLUSTERED() { return getToken(HiveParser.KW_CLUSTERED, 0); }
		public List<TerminalNode> KW_BY() { return getTokens(HiveParser.KW_BY); }
		public TerminalNode KW_BY(int i) {
			return getToken(HiveParser.KW_BY, i);
		}
		public List<TerminalNode> LPAREN() { return getTokens(HiveParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(HiveParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(HiveParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(HiveParser.RPAREN, i);
		}
		public TerminalNode KW_INTO() { return getToken(HiveParser.KW_INTO, 0); }
		public TerminalNode KW_BUCKETS() { return getToken(HiveParser.KW_BUCKETS, 0); }
		public ColumnNameListContext columnNameList() {
			return getRuleContext(ColumnNameListContext.class,0);
		}
		public TerminalNode Number() { return getToken(HiveParser.Number, 0); }
		public TerminalNode KW_SORTED() { return getToken(HiveParser.KW_SORTED, 0); }
		public ColumnNameOrderListContext columnNameOrderList() {
			return getRuleContext(ColumnNameOrderListContext.class,0);
		}
		public TableBucketsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableBuckets; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableBuckets(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableBuckets(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableBuckets(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableBucketsContext tableBuckets() throws RecognitionException {
		TableBucketsContext _localctx = new TableBucketsContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_tableBuckets);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2123);
			match(KW_CLUSTERED);
			setState(2124);
			match(KW_BY);
			setState(2125);
			match(LPAREN);
			setState(2126);
			((TableBucketsContext)_localctx).bucketCols = columnNameList();
			setState(2127);
			match(RPAREN);
			setState(2134);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_SORTED) {
				{
				setState(2128);
				match(KW_SORTED);
				setState(2129);
				match(KW_BY);
				setState(2130);
				match(LPAREN);
				setState(2131);
				((TableBucketsContext)_localctx).sortCols = columnNameOrderList();
				setState(2132);
				match(RPAREN);
				}
			}

			setState(2136);
			match(KW_INTO);
			setState(2137);
			((TableBucketsContext)_localctx).num = match(Number);
			setState(2138);
			match(KW_BUCKETS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableImplBucketsContext extends ParserRuleContext {
		public Token num;
		public TerminalNode KW_CLUSTERED() { return getToken(HiveParser.KW_CLUSTERED, 0); }
		public TerminalNode KW_INTO() { return getToken(HiveParser.KW_INTO, 0); }
		public TerminalNode KW_BUCKETS() { return getToken(HiveParser.KW_BUCKETS, 0); }
		public TerminalNode Number() { return getToken(HiveParser.Number, 0); }
		public TableImplBucketsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableImplBuckets; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableImplBuckets(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableImplBuckets(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableImplBuckets(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableImplBucketsContext tableImplBuckets() throws RecognitionException {
		TableImplBucketsContext _localctx = new TableImplBucketsContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_tableImplBuckets);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2140);
			match(KW_CLUSTERED);
			setState(2141);
			match(KW_INTO);
			setState(2142);
			((TableImplBucketsContext)_localctx).num = match(Number);
			setState(2143);
			match(KW_BUCKETS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableSkewedContext extends ParserRuleContext {
		public ColumnNameListContext skewedCols;
		public SkewedValueElementContext skewedValues;
		public TerminalNode KW_SKEWED() { return getToken(HiveParser.KW_SKEWED, 0); }
		public TerminalNode KW_BY() { return getToken(HiveParser.KW_BY, 0); }
		public List<TerminalNode> LPAREN() { return getTokens(HiveParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(HiveParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(HiveParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(HiveParser.RPAREN, i);
		}
		public TerminalNode KW_ON() { return getToken(HiveParser.KW_ON, 0); }
		public ColumnNameListContext columnNameList() {
			return getRuleContext(ColumnNameListContext.class,0);
		}
		public SkewedValueElementContext skewedValueElement() {
			return getRuleContext(SkewedValueElementContext.class,0);
		}
		public StoredAsDirsContext storedAsDirs() {
			return getRuleContext(StoredAsDirsContext.class,0);
		}
		public TableSkewedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSkewed; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableSkewed(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableSkewed(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableSkewed(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSkewedContext tableSkewed() throws RecognitionException {
		TableSkewedContext _localctx = new TableSkewedContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_tableSkewed);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2145);
			match(KW_SKEWED);
			setState(2146);
			match(KW_BY);
			setState(2147);
			match(LPAREN);
			setState(2148);
			((TableSkewedContext)_localctx).skewedCols = columnNameList();
			setState(2149);
			match(RPAREN);
			setState(2150);
			match(KW_ON);
			setState(2151);
			match(LPAREN);
			setState(2152);
			((TableSkewedContext)_localctx).skewedValues = skewedValueElement();
			setState(2153);
			match(RPAREN);
			setState(2155);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				setState(2154);
				storedAsDirs();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowFormatContext extends ParserRuleContext {
		public RowFormatSerdeContext rowFormatSerde() {
			return getRuleContext(RowFormatSerdeContext.class,0);
		}
		public RowFormatDelimitedContext rowFormatDelimited() {
			return getRuleContext(RowFormatDelimitedContext.class,0);
		}
		public RowFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowFormat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterRowFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitRowFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitRowFormat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowFormatContext rowFormat() throws RecognitionException {
		RowFormatContext _localctx = new RowFormatContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_rowFormat);
		try {
			setState(2159);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2157);
				rowFormatSerde();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2158);
				rowFormatDelimited();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RecordReaderContext extends ParserRuleContext {
		public TerminalNode KW_RECORDREADER() { return getToken(HiveParser.KW_RECORDREADER, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public RecordReaderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recordReader; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterRecordReader(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitRecordReader(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitRecordReader(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RecordReaderContext recordReader() throws RecognitionException {
		RecordReaderContext _localctx = new RecordReaderContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_recordReader);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2161);
			match(KW_RECORDREADER);
			setState(2162);
			match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RecordWriterContext extends ParserRuleContext {
		public TerminalNode KW_RECORDWRITER() { return getToken(HiveParser.KW_RECORDWRITER, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public RecordWriterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recordWriter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterRecordWriter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitRecordWriter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitRecordWriter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RecordWriterContext recordWriter() throws RecognitionException {
		RecordWriterContext _localctx = new RecordWriterContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_recordWriter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2164);
			match(KW_RECORDWRITER);
			setState(2165);
			match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowFormatSerdeContext extends ParserRuleContext {
		public Token name;
		public TablePropertiesContext serdeprops;
		public TerminalNode KW_ROW() { return getToken(HiveParser.KW_ROW, 0); }
		public TerminalNode KW_FORMAT() { return getToken(HiveParser.KW_FORMAT, 0); }
		public TerminalNode KW_SERDE() { return getToken(HiveParser.KW_SERDE, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TerminalNode KW_WITH() { return getToken(HiveParser.KW_WITH, 0); }
		public TerminalNode KW_SERDEPROPERTIES() { return getToken(HiveParser.KW_SERDEPROPERTIES, 0); }
		public TablePropertiesContext tableProperties() {
			return getRuleContext(TablePropertiesContext.class,0);
		}
		public RowFormatSerdeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowFormatSerde; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterRowFormatSerde(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitRowFormatSerde(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitRowFormatSerde(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowFormatSerdeContext rowFormatSerde() throws RecognitionException {
		RowFormatSerdeContext _localctx = new RowFormatSerdeContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_rowFormatSerde);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2167);
			match(KW_ROW);
			setState(2168);
			match(KW_FORMAT);
			setState(2169);
			match(KW_SERDE);
			setState(2170);
			((RowFormatSerdeContext)_localctx).name = match(StringLiteral);
			setState(2174);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WITH) {
				{
				setState(2171);
				match(KW_WITH);
				setState(2172);
				match(KW_SERDEPROPERTIES);
				setState(2173);
				((RowFormatSerdeContext)_localctx).serdeprops = tableProperties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowFormatDelimitedContext extends ParserRuleContext {
		public TerminalNode KW_ROW() { return getToken(HiveParser.KW_ROW, 0); }
		public TerminalNode KW_FORMAT() { return getToken(HiveParser.KW_FORMAT, 0); }
		public TerminalNode KW_DELIMITED() { return getToken(HiveParser.KW_DELIMITED, 0); }
		public TableRowFormatFieldIdentifierContext tableRowFormatFieldIdentifier() {
			return getRuleContext(TableRowFormatFieldIdentifierContext.class,0);
		}
		public TableRowFormatCollItemsIdentifierContext tableRowFormatCollItemsIdentifier() {
			return getRuleContext(TableRowFormatCollItemsIdentifierContext.class,0);
		}
		public TableRowFormatMapKeysIdentifierContext tableRowFormatMapKeysIdentifier() {
			return getRuleContext(TableRowFormatMapKeysIdentifierContext.class,0);
		}
		public TableRowFormatLinesIdentifierContext tableRowFormatLinesIdentifier() {
			return getRuleContext(TableRowFormatLinesIdentifierContext.class,0);
		}
		public TableRowNullFormatContext tableRowNullFormat() {
			return getRuleContext(TableRowNullFormatContext.class,0);
		}
		public RowFormatDelimitedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowFormatDelimited; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterRowFormatDelimited(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitRowFormatDelimited(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitRowFormatDelimited(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowFormatDelimitedContext rowFormatDelimited() throws RecognitionException {
		RowFormatDelimitedContext _localctx = new RowFormatDelimitedContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_rowFormatDelimited);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2176);
			match(KW_ROW);
			setState(2177);
			match(KW_FORMAT);
			setState(2178);
			match(KW_DELIMITED);
			setState(2180);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_FIELDS) {
				{
				setState(2179);
				tableRowFormatFieldIdentifier();
				}
			}

			setState(2183);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COLLECTION) {
				{
				setState(2182);
				tableRowFormatCollItemsIdentifier();
				}
			}

			setState(2186);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				setState(2185);
				tableRowFormatMapKeysIdentifier();
				}
				break;
			}
			setState(2189);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_LINES) {
				{
				setState(2188);
				tableRowFormatLinesIdentifier();
				}
			}

			setState(2192);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_NULL) {
				{
				setState(2191);
				tableRowNullFormat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableRowFormatContext extends ParserRuleContext {
		public RowFormatDelimitedContext rowFormatDelimited() {
			return getRuleContext(RowFormatDelimitedContext.class,0);
		}
		public RowFormatSerdeContext rowFormatSerde() {
			return getRuleContext(RowFormatSerdeContext.class,0);
		}
		public TableRowFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRowFormat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableRowFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableRowFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableRowFormat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableRowFormatContext tableRowFormat() throws RecognitionException {
		TableRowFormatContext _localctx = new TableRowFormatContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_tableRowFormat);
		try {
			setState(2196);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2194);
				rowFormatDelimited();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2195);
				rowFormatSerde();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablePropertiesPrefixedContext extends ParserRuleContext {
		public TerminalNode KW_TBLPROPERTIES() { return getToken(HiveParser.KW_TBLPROPERTIES, 0); }
		public TablePropertiesContext tableProperties() {
			return getRuleContext(TablePropertiesContext.class,0);
		}
		public TablePropertiesPrefixedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablePropertiesPrefixed; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTablePropertiesPrefixed(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTablePropertiesPrefixed(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTablePropertiesPrefixed(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablePropertiesPrefixedContext tablePropertiesPrefixed() throws RecognitionException {
		TablePropertiesPrefixedContext _localctx = new TablePropertiesPrefixedContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_tablePropertiesPrefixed);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2198);
			match(KW_TBLPROPERTIES);
			setState(2199);
			tableProperties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablePropertiesContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TablePropertiesListContext tablePropertiesList() {
			return getRuleContext(TablePropertiesListContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public TablePropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableProperties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableProperties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablePropertiesContext tableProperties() throws RecognitionException {
		TablePropertiesContext _localctx = new TablePropertiesContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_tableProperties);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2201);
			match(LPAREN);
			setState(2202);
			tablePropertiesList();
			setState(2203);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablePropertiesListContext extends ParserRuleContext {
		public List<KeyValuePropertyContext> keyValueProperty() {
			return getRuleContexts(KeyValuePropertyContext.class);
		}
		public KeyValuePropertyContext keyValueProperty(int i) {
			return getRuleContext(KeyValuePropertyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public List<KeyPropertyContext> keyProperty() {
			return getRuleContexts(KeyPropertyContext.class);
		}
		public KeyPropertyContext keyProperty(int i) {
			return getRuleContext(KeyPropertyContext.class,i);
		}
		public TablePropertiesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablePropertiesList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTablePropertiesList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTablePropertiesList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTablePropertiesList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablePropertiesListContext tablePropertiesList() throws RecognitionException {
		TablePropertiesListContext _localctx = new TablePropertiesListContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_tablePropertiesList);
		int _la;
		try {
			setState(2221);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2205);
				keyValueProperty();
				setState(2210);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2206);
					match(COMMA);
					setState(2207);
					keyValueProperty();
					}
					}
					setState(2212);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2213);
				keyProperty();
				setState(2218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2214);
					match(COMMA);
					setState(2215);
					keyProperty();
					}
					}
					setState(2220);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeyValuePropertyContext extends ParserRuleContext {
		public Token key;
		public Token value;
		public TerminalNode EQUAL() { return getToken(HiveParser.EQUAL, 0); }
		public List<TerminalNode> StringLiteral() { return getTokens(HiveParser.StringLiteral); }
		public TerminalNode StringLiteral(int i) {
			return getToken(HiveParser.StringLiteral, i);
		}
		public KeyValuePropertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyValueProperty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterKeyValueProperty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitKeyValueProperty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitKeyValueProperty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyValuePropertyContext keyValueProperty() throws RecognitionException {
		KeyValuePropertyContext _localctx = new KeyValuePropertyContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_keyValueProperty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2223);
			((KeyValuePropertyContext)_localctx).key = match(StringLiteral);
			setState(2224);
			match(EQUAL);
			setState(2225);
			((KeyValuePropertyContext)_localctx).value = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeyPropertyContext extends ParserRuleContext {
		public Token key;
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public KeyPropertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyProperty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterKeyProperty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitKeyProperty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitKeyProperty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyPropertyContext keyProperty() throws RecognitionException {
		KeyPropertyContext _localctx = new KeyPropertyContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_keyProperty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2227);
			((KeyPropertyContext)_localctx).key = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableRowFormatFieldIdentifierContext extends ParserRuleContext {
		public Token fldIdnt;
		public Token fldEscape;
		public TerminalNode KW_FIELDS() { return getToken(HiveParser.KW_FIELDS, 0); }
		public TerminalNode KW_TERMINATED() { return getToken(HiveParser.KW_TERMINATED, 0); }
		public List<TerminalNode> KW_BY() { return getTokens(HiveParser.KW_BY); }
		public TerminalNode KW_BY(int i) {
			return getToken(HiveParser.KW_BY, i);
		}
		public List<TerminalNode> StringLiteral() { return getTokens(HiveParser.StringLiteral); }
		public TerminalNode StringLiteral(int i) {
			return getToken(HiveParser.StringLiteral, i);
		}
		public TerminalNode KW_ESCAPED() { return getToken(HiveParser.KW_ESCAPED, 0); }
		public TableRowFormatFieldIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRowFormatFieldIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableRowFormatFieldIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableRowFormatFieldIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableRowFormatFieldIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableRowFormatFieldIdentifierContext tableRowFormatFieldIdentifier() throws RecognitionException {
		TableRowFormatFieldIdentifierContext _localctx = new TableRowFormatFieldIdentifierContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_tableRowFormatFieldIdentifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2229);
			match(KW_FIELDS);
			setState(2230);
			match(KW_TERMINATED);
			setState(2231);
			match(KW_BY);
			setState(2232);
			((TableRowFormatFieldIdentifierContext)_localctx).fldIdnt = match(StringLiteral);
			setState(2236);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ESCAPED) {
				{
				setState(2233);
				match(KW_ESCAPED);
				setState(2234);
				match(KW_BY);
				setState(2235);
				((TableRowFormatFieldIdentifierContext)_localctx).fldEscape = match(StringLiteral);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableRowFormatCollItemsIdentifierContext extends ParserRuleContext {
		public Token collIdnt;
		public TerminalNode KW_COLLECTION() { return getToken(HiveParser.KW_COLLECTION, 0); }
		public TerminalNode KW_ITEMS() { return getToken(HiveParser.KW_ITEMS, 0); }
		public TerminalNode KW_TERMINATED() { return getToken(HiveParser.KW_TERMINATED, 0); }
		public TerminalNode KW_BY() { return getToken(HiveParser.KW_BY, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TableRowFormatCollItemsIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRowFormatCollItemsIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableRowFormatCollItemsIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableRowFormatCollItemsIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableRowFormatCollItemsIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableRowFormatCollItemsIdentifierContext tableRowFormatCollItemsIdentifier() throws RecognitionException {
		TableRowFormatCollItemsIdentifierContext _localctx = new TableRowFormatCollItemsIdentifierContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_tableRowFormatCollItemsIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2238);
			match(KW_COLLECTION);
			setState(2239);
			match(KW_ITEMS);
			setState(2240);
			match(KW_TERMINATED);
			setState(2241);
			match(KW_BY);
			setState(2242);
			((TableRowFormatCollItemsIdentifierContext)_localctx).collIdnt = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableRowFormatMapKeysIdentifierContext extends ParserRuleContext {
		public Token mapKeysIdnt;
		public TerminalNode KW_MAP() { return getToken(HiveParser.KW_MAP, 0); }
		public TerminalNode KW_KEYS() { return getToken(HiveParser.KW_KEYS, 0); }
		public TerminalNode KW_TERMINATED() { return getToken(HiveParser.KW_TERMINATED, 0); }
		public TerminalNode KW_BY() { return getToken(HiveParser.KW_BY, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TableRowFormatMapKeysIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRowFormatMapKeysIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableRowFormatMapKeysIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableRowFormatMapKeysIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableRowFormatMapKeysIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableRowFormatMapKeysIdentifierContext tableRowFormatMapKeysIdentifier() throws RecognitionException {
		TableRowFormatMapKeysIdentifierContext _localctx = new TableRowFormatMapKeysIdentifierContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_tableRowFormatMapKeysIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2244);
			match(KW_MAP);
			setState(2245);
			match(KW_KEYS);
			setState(2246);
			match(KW_TERMINATED);
			setState(2247);
			match(KW_BY);
			setState(2248);
			((TableRowFormatMapKeysIdentifierContext)_localctx).mapKeysIdnt = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableRowFormatLinesIdentifierContext extends ParserRuleContext {
		public Token linesIdnt;
		public TerminalNode KW_LINES() { return getToken(HiveParser.KW_LINES, 0); }
		public TerminalNode KW_TERMINATED() { return getToken(HiveParser.KW_TERMINATED, 0); }
		public TerminalNode KW_BY() { return getToken(HiveParser.KW_BY, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TableRowFormatLinesIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRowFormatLinesIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableRowFormatLinesIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableRowFormatLinesIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableRowFormatLinesIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableRowFormatLinesIdentifierContext tableRowFormatLinesIdentifier() throws RecognitionException {
		TableRowFormatLinesIdentifierContext _localctx = new TableRowFormatLinesIdentifierContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_tableRowFormatLinesIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2250);
			match(KW_LINES);
			setState(2251);
			match(KW_TERMINATED);
			setState(2252);
			match(KW_BY);
			setState(2253);
			((TableRowFormatLinesIdentifierContext)_localctx).linesIdnt = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableRowNullFormatContext extends ParserRuleContext {
		public Token nullIdnt;
		public TerminalNode KW_NULL() { return getToken(HiveParser.KW_NULL, 0); }
		public TerminalNode KW_DEFINED() { return getToken(HiveParser.KW_DEFINED, 0); }
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TableRowNullFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRowNullFormat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableRowNullFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableRowNullFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableRowNullFormat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableRowNullFormatContext tableRowNullFormat() throws RecognitionException {
		TableRowNullFormatContext _localctx = new TableRowNullFormatContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_tableRowNullFormat);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2255);
			match(KW_NULL);
			setState(2256);
			match(KW_DEFINED);
			setState(2257);
			match(KW_AS);
			setState(2258);
			((TableRowNullFormatContext)_localctx).nullIdnt = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableFileFormatContext extends ParserRuleContext {
		public Token inFmt;
		public Token outFmt;
		public Token inDriver;
		public Token outDriver;
		public Token storageHandler;
		public TablePropertiesContext serdeprops;
		public Id_Context fileformat;
		public Id_Context genericSpec;
		public List<TerminalNode> KW_STORED() { return getTokens(HiveParser.KW_STORED); }
		public TerminalNode KW_STORED(int i) {
			return getToken(HiveParser.KW_STORED, i);
		}
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public TerminalNode KW_INPUTFORMAT() { return getToken(HiveParser.KW_INPUTFORMAT, 0); }
		public TerminalNode KW_OUTPUTFORMAT() { return getToken(HiveParser.KW_OUTPUTFORMAT, 0); }
		public List<TerminalNode> StringLiteral() { return getTokens(HiveParser.StringLiteral); }
		public TerminalNode StringLiteral(int i) {
			return getToken(HiveParser.StringLiteral, i);
		}
		public TerminalNode KW_INPUTDRIVER() { return getToken(HiveParser.KW_INPUTDRIVER, 0); }
		public TerminalNode KW_OUTPUTDRIVER() { return getToken(HiveParser.KW_OUTPUTDRIVER, 0); }
		public TerminalNode KW_BY() { return getToken(HiveParser.KW_BY, 0); }
		public TerminalNode KW_WITH() { return getToken(HiveParser.KW_WITH, 0); }
		public TerminalNode KW_SERDEPROPERTIES() { return getToken(HiveParser.KW_SERDEPROPERTIES, 0); }
		public TablePropertiesContext tableProperties() {
			return getRuleContext(TablePropertiesContext.class,0);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TableFileFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFileFormat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableFileFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableFileFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableFileFormat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFileFormatContext tableFileFormat() throws RecognitionException {
		TableFileFormatContext _localctx = new TableFileFormatContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_tableFileFormat);
		int _la;
		try {
			setState(2301);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2260);
				match(KW_STORED);
				setState(2261);
				match(KW_AS);
				setState(2262);
				match(KW_INPUTFORMAT);
				setState(2263);
				((TableFileFormatContext)_localctx).inFmt = match(StringLiteral);
				setState(2264);
				match(KW_OUTPUTFORMAT);
				setState(2265);
				((TableFileFormatContext)_localctx).outFmt = match(StringLiteral);
				setState(2270);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_INPUTDRIVER) {
					{
					setState(2266);
					match(KW_INPUTDRIVER);
					setState(2267);
					((TableFileFormatContext)_localctx).inDriver = match(StringLiteral);
					setState(2268);
					match(KW_OUTPUTDRIVER);
					setState(2269);
					((TableFileFormatContext)_localctx).outDriver = match(StringLiteral);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2272);
				match(KW_STORED);
				setState(2273);
				match(KW_BY);
				setState(2274);
				((TableFileFormatContext)_localctx).storageHandler = match(StringLiteral);
				setState(2278);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_WITH) {
					{
					setState(2275);
					match(KW_WITH);
					setState(2276);
					match(KW_SERDEPROPERTIES);
					setState(2277);
					((TableFileFormatContext)_localctx).serdeprops = tableProperties();
					}
				}

				setState(2283);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_STORED) {
					{
					setState(2280);
					match(KW_STORED);
					setState(2281);
					match(KW_AS);
					setState(2282);
					((TableFileFormatContext)_localctx).fileformat = id_();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2285);
				match(KW_STORED);
				setState(2286);
				match(KW_BY);
				setState(2287);
				((TableFileFormatContext)_localctx).genericSpec = id_();
				setState(2291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_WITH) {
					{
					setState(2288);
					match(KW_WITH);
					setState(2289);
					match(KW_SERDEPROPERTIES);
					setState(2290);
					((TableFileFormatContext)_localctx).serdeprops = tableProperties();
					}
				}

				setState(2296);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_STORED) {
					{
					setState(2293);
					match(KW_STORED);
					setState(2294);
					match(KW_AS);
					setState(2295);
					((TableFileFormatContext)_localctx).fileformat = id_();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2298);
				match(KW_STORED);
				setState(2299);
				match(KW_AS);
				setState(2300);
				((TableFileFormatContext)_localctx).genericSpec = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableLocationContext extends ParserRuleContext {
		public Token locn;
		public TerminalNode KW_LOCATION() { return getToken(HiveParser.KW_LOCATION, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TableLocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableLocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableLocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableLocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLocationContext tableLocation() throws RecognitionException {
		TableLocationContext _localctx = new TableLocationContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_tableLocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2303);
			match(KW_LOCATION);
			setState(2304);
			((TableLocationContext)_localctx).locn = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnNameTypeListContext extends ParserRuleContext {
		public List<ColumnNameTypeContext> columnNameType() {
			return getRuleContexts(ColumnNameTypeContext.class);
		}
		public ColumnNameTypeContext columnNameType(int i) {
			return getRuleContext(ColumnNameTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public ColumnNameTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameTypeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColumnNameTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColumnNameTypeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColumnNameTypeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameTypeListContext columnNameTypeList() throws RecognitionException {
		ColumnNameTypeListContext _localctx = new ColumnNameTypeListContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_columnNameTypeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2306);
			columnNameType();
			setState(2311);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2307);
				match(COMMA);
				setState(2308);
				columnNameType();
				}
				}
				setState(2313);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnNameTypeOrConstraintListContext extends ParserRuleContext {
		public List<ColumnNameTypeOrConstraintContext> columnNameTypeOrConstraint() {
			return getRuleContexts(ColumnNameTypeOrConstraintContext.class);
		}
		public ColumnNameTypeOrConstraintContext columnNameTypeOrConstraint(int i) {
			return getRuleContext(ColumnNameTypeOrConstraintContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public ColumnNameTypeOrConstraintListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameTypeOrConstraintList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColumnNameTypeOrConstraintList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColumnNameTypeOrConstraintList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColumnNameTypeOrConstraintList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameTypeOrConstraintListContext columnNameTypeOrConstraintList() throws RecognitionException {
		ColumnNameTypeOrConstraintListContext _localctx = new ColumnNameTypeOrConstraintListContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_columnNameTypeOrConstraintList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2314);
			columnNameTypeOrConstraint();
			setState(2319);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2315);
				match(COMMA);
				setState(2316);
				columnNameTypeOrConstraint();
				}
				}
				setState(2321);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnNameColonTypeListContext extends ParserRuleContext {
		public List<ColumnNameColonTypeContext> columnNameColonType() {
			return getRuleContexts(ColumnNameColonTypeContext.class);
		}
		public ColumnNameColonTypeContext columnNameColonType(int i) {
			return getRuleContext(ColumnNameColonTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public ColumnNameColonTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameColonTypeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColumnNameColonTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColumnNameColonTypeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColumnNameColonTypeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameColonTypeListContext columnNameColonTypeList() throws RecognitionException {
		ColumnNameColonTypeListContext _localctx = new ColumnNameColonTypeListContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_columnNameColonTypeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2322);
			columnNameColonType();
			setState(2327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2323);
				match(COMMA);
				setState(2324);
				columnNameColonType();
				}
				}
				setState(2329);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnNameListContext extends ParserRuleContext {
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public ColumnNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColumnNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColumnNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColumnNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameListContext columnNameList() throws RecognitionException {
		ColumnNameListContext _localctx = new ColumnNameListContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_columnNameList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2330);
			columnName();
			setState(2335);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2331);
				match(COMMA);
				setState(2332);
				columnName();
				}
				}
				setState(2337);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnNameContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public ColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameContext columnName() throws RecognitionException {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_columnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2338);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExtColumnNameContext extends ParserRuleContext {
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(HiveParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(HiveParser.DOT, i);
		}
		public List<TerminalNode> KW_ELEM_TYPE() { return getTokens(HiveParser.KW_ELEM_TYPE); }
		public TerminalNode KW_ELEM_TYPE(int i) {
			return getToken(HiveParser.KW_ELEM_TYPE, i);
		}
		public List<TerminalNode> KW_KEY_TYPE() { return getTokens(HiveParser.KW_KEY_TYPE); }
		public TerminalNode KW_KEY_TYPE(int i) {
			return getToken(HiveParser.KW_KEY_TYPE, i);
		}
		public List<TerminalNode> KW_VALUE_TYPE() { return getTokens(HiveParser.KW_VALUE_TYPE); }
		public TerminalNode KW_VALUE_TYPE(int i) {
			return getToken(HiveParser.KW_VALUE_TYPE, i);
		}
		public ExtColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterExtColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitExtColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitExtColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtColumnNameContext extColumnName() throws RecognitionException {
		ExtColumnNameContext _localctx = new ExtColumnNameContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_extColumnName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2340);
			id_();
			setState(2350);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DOT) {
				{
				{
				setState(2341);
				match(DOT);
				setState(2346);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
				case 1:
					{
					setState(2342);
					match(KW_ELEM_TYPE);
					}
					break;
				case 2:
					{
					setState(2343);
					match(KW_KEY_TYPE);
					}
					break;
				case 3:
					{
					setState(2344);
					match(KW_VALUE_TYPE);
					}
					break;
				case 4:
					{
					setState(2345);
					id_();
					}
					break;
				}
				}
				}
				setState(2352);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnNameOrderListContext extends ParserRuleContext {
		public List<ColumnNameOrderContext> columnNameOrder() {
			return getRuleContexts(ColumnNameOrderContext.class);
		}
		public ColumnNameOrderContext columnNameOrder(int i) {
			return getRuleContext(ColumnNameOrderContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public ColumnNameOrderListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameOrderList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColumnNameOrderList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColumnNameOrderList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColumnNameOrderList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameOrderListContext columnNameOrderList() throws RecognitionException {
		ColumnNameOrderListContext _localctx = new ColumnNameOrderListContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_columnNameOrderList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2353);
			columnNameOrder();
			setState(2358);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2354);
				match(COMMA);
				setState(2355);
				columnNameOrder();
				}
				}
				setState(2360);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnParenthesesListContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public ColumnNameListContext columnNameList() {
			return getRuleContext(ColumnNameListContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public ColumnParenthesesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnParenthesesList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColumnParenthesesList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColumnParenthesesList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColumnParenthesesList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnParenthesesListContext columnParenthesesList() throws RecognitionException {
		ColumnParenthesesListContext _localctx = new ColumnParenthesesListContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_columnParenthesesList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2361);
			match(LPAREN);
			setState(2362);
			columnNameList();
			setState(2363);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EnableValidateSpecificationContext extends ParserRuleContext {
		public EnableSpecificationContext enableSpecification() {
			return getRuleContext(EnableSpecificationContext.class,0);
		}
		public ValidateSpecificationContext validateSpecification() {
			return getRuleContext(ValidateSpecificationContext.class,0);
		}
		public EnforcedSpecificationContext enforcedSpecification() {
			return getRuleContext(EnforcedSpecificationContext.class,0);
		}
		public EnableValidateSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enableValidateSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterEnableValidateSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitEnableValidateSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitEnableValidateSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnableValidateSpecificationContext enableValidateSpecification() throws RecognitionException {
		EnableValidateSpecificationContext _localctx = new EnableValidateSpecificationContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_enableValidateSpecification);
		int _la;
		try {
			setState(2370);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_DISABLE:
			case KW_ENABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2365);
				enableSpecification();
				setState(2367);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_NOVALIDATE || _la==KW_VALIDATE) {
					{
					setState(2366);
					validateSpecification();
					}
				}

				}
				break;
			case KW_ENFORCED:
			case KW_NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2369);
				enforcedSpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EnableSpecificationContext extends ParserRuleContext {
		public TerminalNode KW_ENABLE() { return getToken(HiveParser.KW_ENABLE, 0); }
		public TerminalNode KW_DISABLE() { return getToken(HiveParser.KW_DISABLE, 0); }
		public EnableSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enableSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterEnableSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitEnableSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitEnableSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnableSpecificationContext enableSpecification() throws RecognitionException {
		EnableSpecificationContext _localctx = new EnableSpecificationContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_enableSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2372);
			_la = _input.LA(1);
			if ( !(_la==KW_DISABLE || _la==KW_ENABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValidateSpecificationContext extends ParserRuleContext {
		public TerminalNode KW_VALIDATE() { return getToken(HiveParser.KW_VALIDATE, 0); }
		public TerminalNode KW_NOVALIDATE() { return getToken(HiveParser.KW_NOVALIDATE, 0); }
		public ValidateSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_validateSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterValidateSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitValidateSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitValidateSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValidateSpecificationContext validateSpecification() throws RecognitionException {
		ValidateSpecificationContext _localctx = new ValidateSpecificationContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_validateSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2374);
			_la = _input.LA(1);
			if ( !(_la==KW_NOVALIDATE || _la==KW_VALIDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EnforcedSpecificationContext extends ParserRuleContext {
		public TerminalNode KW_ENFORCED() { return getToken(HiveParser.KW_ENFORCED, 0); }
		public TerminalNode KW_NOT() { return getToken(HiveParser.KW_NOT, 0); }
		public EnforcedSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enforcedSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterEnforcedSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitEnforcedSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitEnforcedSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnforcedSpecificationContext enforcedSpecification() throws RecognitionException {
		EnforcedSpecificationContext _localctx = new EnforcedSpecificationContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_enforcedSpecification);
		try {
			setState(2379);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_ENFORCED:
				enterOuterAlt(_localctx, 1);
				{
				setState(2376);
				match(KW_ENFORCED);
				}
				break;
			case KW_NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2377);
				match(KW_NOT);
				setState(2378);
				match(KW_ENFORCED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RelySpecificationContext extends ParserRuleContext {
		public TerminalNode KW_RELY() { return getToken(HiveParser.KW_RELY, 0); }
		public TerminalNode KW_NORELY() { return getToken(HiveParser.KW_NORELY, 0); }
		public RelySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterRelySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitRelySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitRelySpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelySpecificationContext relySpecification() throws RecognitionException {
		RelySpecificationContext _localctx = new RelySpecificationContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_relySpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2381);
			_la = _input.LA(1);
			if ( !(_la==KW_NORELY || _la==KW_RELY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateConstraintContext extends ParserRuleContext {
		public Id_Context constraintName;
		public TableLevelConstraintContext tableLevelConstraint() {
			return getRuleContext(TableLevelConstraintContext.class,0);
		}
		public TerminalNode KW_CONSTRAINT() { return getToken(HiveParser.KW_CONSTRAINT, 0); }
		public ConstraintOptsCreateContext constraintOptsCreate() {
			return getRuleContext(ConstraintOptsCreateContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public CreateConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCreateConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCreateConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCreateConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateConstraintContext createConstraint() throws RecognitionException {
		CreateConstraintContext _localctx = new CreateConstraintContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_createConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2385);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_CONSTRAINT) {
				{
				setState(2383);
				match(KW_CONSTRAINT);
				setState(2384);
				((CreateConstraintContext)_localctx).constraintName = id_();
				}
			}

			setState(2387);
			tableLevelConstraint();
			setState(2389);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 10241L) != 0) || _la==KW_NOT) {
				{
				setState(2388);
				constraintOptsCreate();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterConstraintWithNameContext extends ParserRuleContext {
		public Id_Context constraintName;
		public TerminalNode KW_CONSTRAINT() { return getToken(HiveParser.KW_CONSTRAINT, 0); }
		public TableLevelConstraintContext tableLevelConstraint() {
			return getRuleContext(TableLevelConstraintContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public ConstraintOptsAlterContext constraintOptsAlter() {
			return getRuleContext(ConstraintOptsAlterContext.class,0);
		}
		public AlterConstraintWithNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterConstraintWithName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterConstraintWithName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterConstraintWithName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterConstraintWithName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterConstraintWithNameContext alterConstraintWithName() throws RecognitionException {
		AlterConstraintWithNameContext _localctx = new AlterConstraintWithNameContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_alterConstraintWithName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2391);
			match(KW_CONSTRAINT);
			setState(2392);
			((AlterConstraintWithNameContext)_localctx).constraintName = id_();
			setState(2393);
			tableLevelConstraint();
			setState(2395);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 10241L) != 0) || _la==KW_NOT) {
				{
				setState(2394);
				constraintOptsAlter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableLevelConstraintContext extends ParserRuleContext {
		public PkUkConstraintContext pkUkConstraint() {
			return getRuleContext(PkUkConstraintContext.class,0);
		}
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public TableLevelConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLevelConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableLevelConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableLevelConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableLevelConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLevelConstraintContext tableLevelConstraint() throws RecognitionException {
		TableLevelConstraintContext _localctx = new TableLevelConstraintContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_tableLevelConstraint);
		try {
			setState(2399);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_PRIMARY:
			case KW_UNIQUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2397);
				pkUkConstraint();
				}
				break;
			case KW_CHECK:
				enterOuterAlt(_localctx, 2);
				{
				setState(2398);
				checkConstraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PkUkConstraintContext extends ParserRuleContext {
		public ColumnParenthesesListContext pkCols;
		public TableConstraintTypeContext tableConstraintType() {
			return getRuleContext(TableConstraintTypeContext.class,0);
		}
		public ColumnParenthesesListContext columnParenthesesList() {
			return getRuleContext(ColumnParenthesesListContext.class,0);
		}
		public PkUkConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pkUkConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPkUkConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPkUkConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPkUkConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PkUkConstraintContext pkUkConstraint() throws RecognitionException {
		PkUkConstraintContext _localctx = new PkUkConstraintContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_pkUkConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2401);
			tableConstraintType();
			setState(2402);
			((PkUkConstraintContext)_localctx).pkCols = columnParenthesesList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CheckConstraintContext extends ParserRuleContext {
		public TerminalNode KW_CHECK() { return getToken(HiveParser.KW_CHECK, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public CheckConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCheckConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCheckConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCheckConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckConstraintContext checkConstraint() throws RecognitionException {
		CheckConstraintContext _localctx = new CheckConstraintContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_checkConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2404);
			match(KW_CHECK);
			setState(2405);
			match(LPAREN);
			setState(2406);
			expression();
			setState(2407);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateForeignKeyContext extends ParserRuleContext {
		public Id_Context constraintName;
		public ColumnParenthesesListContext fkCols;
		public TableNameContext tabName;
		public ColumnParenthesesListContext parCols;
		public TerminalNode KW_FOREIGN() { return getToken(HiveParser.KW_FOREIGN, 0); }
		public TerminalNode KW_KEY() { return getToken(HiveParser.KW_KEY, 0); }
		public TerminalNode KW_REFERENCES() { return getToken(HiveParser.KW_REFERENCES, 0); }
		public List<ColumnParenthesesListContext> columnParenthesesList() {
			return getRuleContexts(ColumnParenthesesListContext.class);
		}
		public ColumnParenthesesListContext columnParenthesesList(int i) {
			return getRuleContext(ColumnParenthesesListContext.class,i);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode KW_CONSTRAINT() { return getToken(HiveParser.KW_CONSTRAINT, 0); }
		public ConstraintOptsCreateContext constraintOptsCreate() {
			return getRuleContext(ConstraintOptsCreateContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public CreateForeignKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCreateForeignKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCreateForeignKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCreateForeignKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignKeyContext createForeignKey() throws RecognitionException {
		CreateForeignKeyContext _localctx = new CreateForeignKeyContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_createForeignKey);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2411);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_CONSTRAINT) {
				{
				setState(2409);
				match(KW_CONSTRAINT);
				setState(2410);
				((CreateForeignKeyContext)_localctx).constraintName = id_();
				}
			}

			setState(2413);
			match(KW_FOREIGN);
			setState(2414);
			match(KW_KEY);
			setState(2415);
			((CreateForeignKeyContext)_localctx).fkCols = columnParenthesesList();
			setState(2416);
			match(KW_REFERENCES);
			setState(2417);
			((CreateForeignKeyContext)_localctx).tabName = tableName();
			setState(2418);
			((CreateForeignKeyContext)_localctx).parCols = columnParenthesesList();
			setState(2420);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 10241L) != 0) || _la==KW_NOT) {
				{
				setState(2419);
				constraintOptsCreate();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterForeignKeyWithNameContext extends ParserRuleContext {
		public Id_Context constraintName;
		public ColumnParenthesesListContext fkCols;
		public TableNameContext tabName;
		public ColumnParenthesesListContext parCols;
		public TerminalNode KW_CONSTRAINT() { return getToken(HiveParser.KW_CONSTRAINT, 0); }
		public TerminalNode KW_FOREIGN() { return getToken(HiveParser.KW_FOREIGN, 0); }
		public TerminalNode KW_KEY() { return getToken(HiveParser.KW_KEY, 0); }
		public TerminalNode KW_REFERENCES() { return getToken(HiveParser.KW_REFERENCES, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public List<ColumnParenthesesListContext> columnParenthesesList() {
			return getRuleContexts(ColumnParenthesesListContext.class);
		}
		public ColumnParenthesesListContext columnParenthesesList(int i) {
			return getRuleContext(ColumnParenthesesListContext.class,i);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public ConstraintOptsAlterContext constraintOptsAlter() {
			return getRuleContext(ConstraintOptsAlterContext.class,0);
		}
		public AlterForeignKeyWithNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignKeyWithName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterForeignKeyWithName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterForeignKeyWithName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterForeignKeyWithName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignKeyWithNameContext alterForeignKeyWithName() throws RecognitionException {
		AlterForeignKeyWithNameContext _localctx = new AlterForeignKeyWithNameContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_alterForeignKeyWithName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2422);
			match(KW_CONSTRAINT);
			setState(2423);
			((AlterForeignKeyWithNameContext)_localctx).constraintName = id_();
			setState(2424);
			match(KW_FOREIGN);
			setState(2425);
			match(KW_KEY);
			setState(2426);
			((AlterForeignKeyWithNameContext)_localctx).fkCols = columnParenthesesList();
			setState(2427);
			match(KW_REFERENCES);
			setState(2428);
			((AlterForeignKeyWithNameContext)_localctx).tabName = tableName();
			setState(2429);
			((AlterForeignKeyWithNameContext)_localctx).parCols = columnParenthesesList();
			setState(2431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 10241L) != 0) || _la==KW_NOT) {
				{
				setState(2430);
				constraintOptsAlter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SkewedValueElementContext extends ParserRuleContext {
		public SkewedColumnValuesContext skewedColumnValues() {
			return getRuleContext(SkewedColumnValuesContext.class,0);
		}
		public SkewedColumnValuePairListContext skewedColumnValuePairList() {
			return getRuleContext(SkewedColumnValuePairListContext.class,0);
		}
		public SkewedValueElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skewedValueElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSkewedValueElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSkewedValueElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSkewedValueElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SkewedValueElementContext skewedValueElement() throws RecognitionException {
		SkewedValueElementContext _localctx = new SkewedValueElementContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_skewedValueElement);
		try {
			setState(2435);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_DATE:
			case KW_FALSE:
			case KW_NULL:
			case KW_TIMESTAMP:
			case KW_TIMESTAMPLOCALTZ:
			case KW_TRUE:
			case QUESTION:
			case StringLiteral:
			case IntegralLiteral:
			case NumberLiteral:
			case Number:
			case CharSetName:
				enterOuterAlt(_localctx, 1);
				{
				setState(2433);
				skewedColumnValues();
				}
				break;
			case LPAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2434);
				skewedColumnValuePairList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SkewedColumnValuePairListContext extends ParserRuleContext {
		public List<SkewedColumnValuePairContext> skewedColumnValuePair() {
			return getRuleContexts(SkewedColumnValuePairContext.class);
		}
		public SkewedColumnValuePairContext skewedColumnValuePair(int i) {
			return getRuleContext(SkewedColumnValuePairContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public SkewedColumnValuePairListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skewedColumnValuePairList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSkewedColumnValuePairList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSkewedColumnValuePairList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSkewedColumnValuePairList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SkewedColumnValuePairListContext skewedColumnValuePairList() throws RecognitionException {
		SkewedColumnValuePairListContext _localctx = new SkewedColumnValuePairListContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_skewedColumnValuePairList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2437);
			skewedColumnValuePair();
			setState(2442);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2438);
				match(COMMA);
				setState(2439);
				skewedColumnValuePair();
				}
				}
				setState(2444);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SkewedColumnValuePairContext extends ParserRuleContext {
		public SkewedColumnValuesContext colValues;
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public SkewedColumnValuesContext skewedColumnValues() {
			return getRuleContext(SkewedColumnValuesContext.class,0);
		}
		public SkewedColumnValuePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skewedColumnValuePair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSkewedColumnValuePair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSkewedColumnValuePair(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSkewedColumnValuePair(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SkewedColumnValuePairContext skewedColumnValuePair() throws RecognitionException {
		SkewedColumnValuePairContext _localctx = new SkewedColumnValuePairContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_skewedColumnValuePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2445);
			match(LPAREN);
			setState(2446);
			((SkewedColumnValuePairContext)_localctx).colValues = skewedColumnValues();
			setState(2447);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SkewedColumnValuesContext extends ParserRuleContext {
		public List<SkewedColumnValueContext> skewedColumnValue() {
			return getRuleContexts(SkewedColumnValueContext.class);
		}
		public SkewedColumnValueContext skewedColumnValue(int i) {
			return getRuleContext(SkewedColumnValueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public SkewedColumnValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skewedColumnValues; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSkewedColumnValues(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSkewedColumnValues(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSkewedColumnValues(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SkewedColumnValuesContext skewedColumnValues() throws RecognitionException {
		SkewedColumnValuesContext _localctx = new SkewedColumnValuesContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_skewedColumnValues);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2449);
			skewedColumnValue();
			setState(2454);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2450);
				match(COMMA);
				setState(2451);
				skewedColumnValue();
				}
				}
				setState(2456);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SkewedColumnValueContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public SkewedColumnValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skewedColumnValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSkewedColumnValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSkewedColumnValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSkewedColumnValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SkewedColumnValueContext skewedColumnValue() throws RecognitionException {
		SkewedColumnValueContext _localctx = new SkewedColumnValueContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_skewedColumnValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2457);
			constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SkewedValueLocationElementContext extends ParserRuleContext {
		public SkewedColumnValueContext skewedColumnValue() {
			return getRuleContext(SkewedColumnValueContext.class,0);
		}
		public SkewedColumnValuePairContext skewedColumnValuePair() {
			return getRuleContext(SkewedColumnValuePairContext.class,0);
		}
		public SkewedValueLocationElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skewedValueLocationElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSkewedValueLocationElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSkewedValueLocationElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSkewedValueLocationElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SkewedValueLocationElementContext skewedValueLocationElement() throws RecognitionException {
		SkewedValueLocationElementContext _localctx = new SkewedValueLocationElementContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_skewedValueLocationElement);
		try {
			setState(2461);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_DATE:
			case KW_FALSE:
			case KW_NULL:
			case KW_TIMESTAMP:
			case KW_TIMESTAMPLOCALTZ:
			case KW_TRUE:
			case QUESTION:
			case StringLiteral:
			case IntegralLiteral:
			case NumberLiteral:
			case Number:
			case CharSetName:
				enterOuterAlt(_localctx, 1);
				{
				setState(2459);
				skewedColumnValue();
				}
				break;
			case LPAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2460);
				skewedColumnValuePair();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrderSpecificationContext extends ParserRuleContext {
		public TerminalNode KW_ASC() { return getToken(HiveParser.KW_ASC, 0); }
		public TerminalNode KW_DESC() { return getToken(HiveParser.KW_DESC, 0); }
		public OrderSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterOrderSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitOrderSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitOrderSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderSpecificationContext orderSpecification() throws RecognitionException {
		OrderSpecificationContext _localctx = new OrderSpecificationContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_orderSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2463);
			_la = _input.LA(1);
			if ( !(_la==KW_ASC || _la==KW_DESC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NullOrderingContext extends ParserRuleContext {
		public TerminalNode KW_NULLS() { return getToken(HiveParser.KW_NULLS, 0); }
		public TerminalNode KW_FIRST() { return getToken(HiveParser.KW_FIRST, 0); }
		public TerminalNode KW_LAST() { return getToken(HiveParser.KW_LAST, 0); }
		public NullOrderingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullOrdering; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterNullOrdering(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitNullOrdering(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitNullOrdering(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullOrderingContext nullOrdering() throws RecognitionException {
		NullOrderingContext _localctx = new NullOrderingContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_nullOrdering);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2465);
			match(KW_NULLS);
			setState(2466);
			_la = _input.LA(1);
			if ( !(_la==KW_FIRST || _la==KW_LAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnNameOrderContext extends ParserRuleContext {
		public OrderSpecificationContext orderSpec;
		public NullOrderingContext nullSpec;
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public OrderSpecificationContext orderSpecification() {
			return getRuleContext(OrderSpecificationContext.class,0);
		}
		public NullOrderingContext nullOrdering() {
			return getRuleContext(NullOrderingContext.class,0);
		}
		public ColumnNameOrderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameOrder; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColumnNameOrder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColumnNameOrder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColumnNameOrder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameOrderContext columnNameOrder() throws RecognitionException {
		ColumnNameOrderContext _localctx = new ColumnNameOrderContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_columnNameOrder);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2468);
			id_();
			setState(2470);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ASC || _la==KW_DESC) {
				{
				setState(2469);
				((ColumnNameOrderContext)_localctx).orderSpec = orderSpecification();
				}
			}

			setState(2473);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_NULLS) {
				{
				setState(2472);
				((ColumnNameOrderContext)_localctx).nullSpec = nullOrdering();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnNameCommentListContext extends ParserRuleContext {
		public List<ColumnNameCommentContext> columnNameComment() {
			return getRuleContexts(ColumnNameCommentContext.class);
		}
		public ColumnNameCommentContext columnNameComment(int i) {
			return getRuleContext(ColumnNameCommentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public ColumnNameCommentListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameCommentList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColumnNameCommentList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColumnNameCommentList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColumnNameCommentList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameCommentListContext columnNameCommentList() throws RecognitionException {
		ColumnNameCommentListContext _localctx = new ColumnNameCommentListContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_columnNameCommentList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2475);
			columnNameComment();
			setState(2480);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2476);
				match(COMMA);
				setState(2477);
				columnNameComment();
				}
				}
				setState(2482);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnNameCommentContext extends ParserRuleContext {
		public Id_Context colName;
		public Token comment;
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode KW_COMMENT() { return getToken(HiveParser.KW_COMMENT, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public ColumnNameCommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameComment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColumnNameComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColumnNameComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColumnNameComment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameCommentContext columnNameComment() throws RecognitionException {
		ColumnNameCommentContext _localctx = new ColumnNameCommentContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_columnNameComment);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2483);
			((ColumnNameCommentContext)_localctx).colName = id_();
			setState(2486);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COMMENT) {
				{
				setState(2484);
				match(KW_COMMENT);
				setState(2485);
				((ColumnNameCommentContext)_localctx).comment = match(StringLiteral);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrderSpecificationRewriteContext extends ParserRuleContext {
		public TerminalNode KW_ASC() { return getToken(HiveParser.KW_ASC, 0); }
		public TerminalNode KW_DESC() { return getToken(HiveParser.KW_DESC, 0); }
		public OrderSpecificationRewriteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderSpecificationRewrite; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterOrderSpecificationRewrite(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitOrderSpecificationRewrite(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitOrderSpecificationRewrite(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderSpecificationRewriteContext orderSpecificationRewrite() throws RecognitionException {
		OrderSpecificationRewriteContext _localctx = new OrderSpecificationRewriteContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_orderSpecificationRewrite);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2488);
			_la = _input.LA(1);
			if ( !(_la==KW_ASC || _la==KW_DESC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnRefOrderContext extends ParserRuleContext {
		public OrderSpecificationRewriteContext orderSpec;
		public NullOrderingContext nullSpec;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderSpecificationRewriteContext orderSpecificationRewrite() {
			return getRuleContext(OrderSpecificationRewriteContext.class,0);
		}
		public NullOrderingContext nullOrdering() {
			return getRuleContext(NullOrderingContext.class,0);
		}
		public ColumnRefOrderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnRefOrder; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColumnRefOrder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColumnRefOrder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColumnRefOrder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnRefOrderContext columnRefOrder() throws RecognitionException {
		ColumnRefOrderContext _localctx = new ColumnRefOrderContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_columnRefOrder);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2490);
			expression();
			setState(2492);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ASC || _la==KW_DESC) {
				{
				setState(2491);
				((ColumnRefOrderContext)_localctx).orderSpec = orderSpecificationRewrite();
				}
			}

			setState(2495);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_NULLS) {
				{
				setState(2494);
				((ColumnRefOrderContext)_localctx).nullSpec = nullOrdering();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnNameTypeContext extends ParserRuleContext {
		public Id_Context colName;
		public Token comment;
		public ColTypeContext colType() {
			return getRuleContext(ColTypeContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode KW_COMMENT() { return getToken(HiveParser.KW_COMMENT, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public ColumnNameTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColumnNameType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColumnNameType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColumnNameType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameTypeContext columnNameType() throws RecognitionException {
		ColumnNameTypeContext _localctx = new ColumnNameTypeContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_columnNameType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2497);
			((ColumnNameTypeContext)_localctx).colName = id_();
			setState(2498);
			colType();
			setState(2501);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COMMENT) {
				{
				setState(2499);
				match(KW_COMMENT);
				setState(2500);
				((ColumnNameTypeContext)_localctx).comment = match(StringLiteral);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnNameTypeOrConstraintContext extends ParserRuleContext {
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public ColumnNameTypeConstraintContext columnNameTypeConstraint() {
			return getRuleContext(ColumnNameTypeConstraintContext.class,0);
		}
		public ColumnNameTypeOrConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameTypeOrConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColumnNameTypeOrConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColumnNameTypeOrConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColumnNameTypeOrConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameTypeOrConstraintContext columnNameTypeOrConstraint() throws RecognitionException {
		ColumnNameTypeOrConstraintContext _localctx = new ColumnNameTypeOrConstraintContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_columnNameTypeOrConstraint);
		try {
			setState(2505);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2503);
				tableConstraint();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2504);
				columnNameTypeConstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableConstraintContext extends ParserRuleContext {
		public CreateForeignKeyContext createForeignKey() {
			return getRuleContext(CreateForeignKeyContext.class,0);
		}
		public CreateConstraintContext createConstraint() {
			return getRuleContext(CreateConstraintContext.class,0);
		}
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_tableConstraint);
		try {
			setState(2509);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2507);
				createForeignKey();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2508);
				createConstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnNameTypeConstraintContext extends ParserRuleContext {
		public Id_Context colName;
		public Token comment;
		public ColTypeContext colType() {
			return getRuleContext(ColTypeContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public ColumnConstraintContext columnConstraint() {
			return getRuleContext(ColumnConstraintContext.class,0);
		}
		public TerminalNode KW_COMMENT() { return getToken(HiveParser.KW_COMMENT, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public ColumnNameTypeConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameTypeConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColumnNameTypeConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColumnNameTypeConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColumnNameTypeConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameTypeConstraintContext columnNameTypeConstraint() throws RecognitionException {
		ColumnNameTypeConstraintContext _localctx = new ColumnNameTypeConstraintContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_columnNameTypeConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2511);
			((ColumnNameTypeConstraintContext)_localctx).colName = id_();
			setState(2512);
			colType();
			setState(2514);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 40)) & ~0x3f) == 0 && ((1L << (_la - 40)) & 1099511660545L) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & 9007233614479361L) != 0) || _la==KW_UNIQUE) {
				{
				setState(2513);
				columnConstraint();
				}
			}

			setState(2518);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COMMENT) {
				{
				setState(2516);
				match(KW_COMMENT);
				setState(2517);
				((ColumnNameTypeConstraintContext)_localctx).comment = match(StringLiteral);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnConstraintContext extends ParserRuleContext {
		public ForeignKeyConstraintContext foreignKeyConstraint() {
			return getRuleContext(ForeignKeyConstraintContext.class,0);
		}
		public ColConstraintContext colConstraint() {
			return getRuleContext(ColConstraintContext.class,0);
		}
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_columnConstraint);
		try {
			setState(2522);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2520);
				foreignKeyConstraint();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2521);
				colConstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForeignKeyConstraintContext extends ParserRuleContext {
		public Id_Context constraintName;
		public TableNameContext tabName;
		public ColumnNameContext colName;
		public TerminalNode KW_REFERENCES() { return getToken(HiveParser.KW_REFERENCES, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode KW_CONSTRAINT() { return getToken(HiveParser.KW_CONSTRAINT, 0); }
		public ConstraintOptsCreateContext constraintOptsCreate() {
			return getRuleContext(ConstraintOptsCreateContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public ForeignKeyConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreignKeyConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterForeignKeyConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitForeignKeyConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitForeignKeyConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForeignKeyConstraintContext foreignKeyConstraint() throws RecognitionException {
		ForeignKeyConstraintContext _localctx = new ForeignKeyConstraintContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_foreignKeyConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2526);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_CONSTRAINT) {
				{
				setState(2524);
				match(KW_CONSTRAINT);
				setState(2525);
				((ForeignKeyConstraintContext)_localctx).constraintName = id_();
				}
			}

			setState(2528);
			match(KW_REFERENCES);
			setState(2529);
			((ForeignKeyConstraintContext)_localctx).tabName = tableName();
			setState(2530);
			match(LPAREN);
			setState(2531);
			((ForeignKeyConstraintContext)_localctx).colName = columnName();
			setState(2532);
			match(RPAREN);
			setState(2534);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 10241L) != 0) || _la==KW_NOT) {
				{
				setState(2533);
				constraintOptsCreate();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColConstraintContext extends ParserRuleContext {
		public Id_Context constraintName;
		public ColumnConstraintTypeContext columnConstraintType() {
			return getRuleContext(ColumnConstraintTypeContext.class,0);
		}
		public TerminalNode KW_CONSTRAINT() { return getToken(HiveParser.KW_CONSTRAINT, 0); }
		public ConstraintOptsCreateContext constraintOptsCreate() {
			return getRuleContext(ConstraintOptsCreateContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public ColConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColConstraintContext colConstraint() throws RecognitionException {
		ColConstraintContext _localctx = new ColConstraintContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_colConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2538);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_CONSTRAINT) {
				{
				setState(2536);
				match(KW_CONSTRAINT);
				setState(2537);
				((ColConstraintContext)_localctx).constraintName = id_();
				}
			}

			setState(2540);
			columnConstraintType();
			setState(2542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 10241L) != 0) || _la==KW_NOT) {
				{
				setState(2541);
				constraintOptsCreate();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterColumnConstraintContext extends ParserRuleContext {
		public AlterForeignKeyConstraintContext alterForeignKeyConstraint() {
			return getRuleContext(AlterForeignKeyConstraintContext.class,0);
		}
		public AlterColConstraintContext alterColConstraint() {
			return getRuleContext(AlterColConstraintContext.class,0);
		}
		public AlterColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColumnConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterColumnConstraintContext alterColumnConstraint() throws RecognitionException {
		AlterColumnConstraintContext _localctx = new AlterColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_alterColumnConstraint);
		try {
			setState(2546);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2544);
				alterForeignKeyConstraint();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2545);
				alterColConstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterForeignKeyConstraintContext extends ParserRuleContext {
		public Id_Context constraintName;
		public TableNameContext tabName;
		public ColumnNameContext colName;
		public TerminalNode KW_REFERENCES() { return getToken(HiveParser.KW_REFERENCES, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode KW_CONSTRAINT() { return getToken(HiveParser.KW_CONSTRAINT, 0); }
		public ConstraintOptsAlterContext constraintOptsAlter() {
			return getRuleContext(ConstraintOptsAlterContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public AlterForeignKeyConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignKeyConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterForeignKeyConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterForeignKeyConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterForeignKeyConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignKeyConstraintContext alterForeignKeyConstraint() throws RecognitionException {
		AlterForeignKeyConstraintContext _localctx = new AlterForeignKeyConstraintContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_alterForeignKeyConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2550);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_CONSTRAINT) {
				{
				setState(2548);
				match(KW_CONSTRAINT);
				setState(2549);
				((AlterForeignKeyConstraintContext)_localctx).constraintName = id_();
				}
			}

			setState(2552);
			match(KW_REFERENCES);
			setState(2553);
			((AlterForeignKeyConstraintContext)_localctx).tabName = tableName();
			setState(2554);
			match(LPAREN);
			setState(2555);
			((AlterForeignKeyConstraintContext)_localctx).colName = columnName();
			setState(2556);
			match(RPAREN);
			setState(2558);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 10241L) != 0) || _la==KW_NOT) {
				{
				setState(2557);
				constraintOptsAlter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterColConstraintContext extends ParserRuleContext {
		public Id_Context constraintName;
		public ColumnConstraintTypeContext columnConstraintType() {
			return getRuleContext(ColumnConstraintTypeContext.class,0);
		}
		public TerminalNode KW_CONSTRAINT() { return getToken(HiveParser.KW_CONSTRAINT, 0); }
		public ConstraintOptsAlterContext constraintOptsAlter() {
			return getRuleContext(ConstraintOptsAlterContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public AlterColConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterColConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterColConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterColConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterColConstraintContext alterColConstraint() throws RecognitionException {
		AlterColConstraintContext _localctx = new AlterColConstraintContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_alterColConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2562);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_CONSTRAINT) {
				{
				setState(2560);
				match(KW_CONSTRAINT);
				setState(2561);
				((AlterColConstraintContext)_localctx).constraintName = id_();
				}
			}

			setState(2564);
			columnConstraintType();
			setState(2566);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 10241L) != 0) || _la==KW_NOT) {
				{
				setState(2565);
				constraintOptsAlter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnConstraintTypeContext extends ParserRuleContext {
		public TerminalNode KW_NOT() { return getToken(HiveParser.KW_NOT, 0); }
		public TerminalNode KW_NULL() { return getToken(HiveParser.KW_NULL, 0); }
		public TerminalNode KW_DEFAULT() { return getToken(HiveParser.KW_DEFAULT, 0); }
		public DefaultValContext defaultVal() {
			return getRuleContext(DefaultValContext.class,0);
		}
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public TableConstraintTypeContext tableConstraintType() {
			return getRuleContext(TableConstraintTypeContext.class,0);
		}
		public ColumnConstraintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraintType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColumnConstraintType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColumnConstraintType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColumnConstraintType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintTypeContext columnConstraintType() throws RecognitionException {
		ColumnConstraintTypeContext _localctx = new ColumnConstraintTypeContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_columnConstraintType);
		try {
			setState(2574);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2568);
				match(KW_NOT);
				setState(2569);
				match(KW_NULL);
				}
				break;
			case KW_DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2570);
				match(KW_DEFAULT);
				setState(2571);
				defaultVal();
				}
				break;
			case KW_CHECK:
				enterOuterAlt(_localctx, 3);
				{
				setState(2572);
				checkConstraint();
				}
				break;
			case KW_PRIMARY:
			case KW_UNIQUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2573);
				tableConstraintType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefaultValContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Function_Context function_() {
			return getRuleContext(Function_Context.class,0);
		}
		public CastExpressionContext castExpression() {
			return getRuleContext(CastExpressionContext.class,0);
		}
		public DefaultValContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultVal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDefaultVal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDefaultVal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDefaultVal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultValContext defaultVal() throws RecognitionException {
		DefaultValContext _localctx = new DefaultValContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_defaultVal);
		try {
			setState(2579);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2576);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2577);
				function_();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2578);
				castExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableConstraintTypeContext extends ParserRuleContext {
		public TerminalNode KW_PRIMARY() { return getToken(HiveParser.KW_PRIMARY, 0); }
		public TerminalNode KW_KEY() { return getToken(HiveParser.KW_KEY, 0); }
		public TerminalNode KW_UNIQUE() { return getToken(HiveParser.KW_UNIQUE, 0); }
		public TableConstraintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraintType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableConstraintType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableConstraintType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableConstraintType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintTypeContext tableConstraintType() throws RecognitionException {
		TableConstraintTypeContext _localctx = new TableConstraintTypeContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_tableConstraintType);
		try {
			setState(2584);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_PRIMARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2581);
				match(KW_PRIMARY);
				setState(2582);
				match(KW_KEY);
				}
				break;
			case KW_UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2583);
				match(KW_UNIQUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintOptsCreateContext extends ParserRuleContext {
		public EnableValidateSpecificationContext enableValidateSpecification() {
			return getRuleContext(EnableValidateSpecificationContext.class,0);
		}
		public RelySpecificationContext relySpecification() {
			return getRuleContext(RelySpecificationContext.class,0);
		}
		public ConstraintOptsCreateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintOptsCreate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterConstraintOptsCreate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitConstraintOptsCreate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitConstraintOptsCreate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintOptsCreateContext constraintOptsCreate() throws RecognitionException {
		ConstraintOptsCreateContext _localctx = new ConstraintOptsCreateContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_constraintOptsCreate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2586);
			enableValidateSpecification();
			setState(2588);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_NORELY || _la==KW_RELY) {
				{
				setState(2587);
				relySpecification();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintOptsAlterContext extends ParserRuleContext {
		public EnableValidateSpecificationContext enableValidateSpecification() {
			return getRuleContext(EnableValidateSpecificationContext.class,0);
		}
		public RelySpecificationContext relySpecification() {
			return getRuleContext(RelySpecificationContext.class,0);
		}
		public ConstraintOptsAlterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintOptsAlter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterConstraintOptsAlter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitConstraintOptsAlter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitConstraintOptsAlter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintOptsAlterContext constraintOptsAlter() throws RecognitionException {
		ConstraintOptsAlterContext _localctx = new ConstraintOptsAlterContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_constraintOptsAlter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2590);
			enableValidateSpecification();
			setState(2592);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_NORELY || _la==KW_RELY) {
				{
				setState(2591);
				relySpecification();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnNameColonTypeContext extends ParserRuleContext {
		public Id_Context colName;
		public Token comment;
		public TerminalNode COLON() { return getToken(HiveParser.COLON, 0); }
		public ColTypeContext colType() {
			return getRuleContext(ColTypeContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode KW_COMMENT() { return getToken(HiveParser.KW_COMMENT, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public ColumnNameColonTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNameColonType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColumnNameColonType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColumnNameColonType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColumnNameColonType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameColonTypeContext columnNameColonType() throws RecognitionException {
		ColumnNameColonTypeContext _localctx = new ColumnNameColonTypeContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_columnNameColonType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2594);
			((ColumnNameColonTypeContext)_localctx).colName = id_();
			setState(2595);
			match(COLON);
			setState(2596);
			colType();
			setState(2599);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COMMENT) {
				{
				setState(2597);
				match(KW_COMMENT);
				setState(2598);
				((ColumnNameColonTypeContext)_localctx).comment = match(StringLiteral);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColTypeContext extends ParserRuleContext {
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public ColTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColTypeContext colType() throws RecognitionException {
		ColTypeContext _localctx = new ColTypeContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_colType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2601);
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColTypeListContext extends ParserRuleContext {
		public List<ColTypeContext> colType() {
			return getRuleContexts(ColTypeContext.class);
		}
		public ColTypeContext colType(int i) {
			return getRuleContext(ColTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public ColTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colTypeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColTypeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColTypeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColTypeListContext colTypeList() throws RecognitionException {
		ColTypeListContext _localctx = new ColTypeListContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_colTypeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2603);
			colType();
			setState(2608);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2604);
				match(COMMA);
				setState(2605);
				colType();
				}
				}
				setState(2610);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypeContext extends ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return getRuleContext(PrimitiveTypeContext.class,0);
		}
		public ListTypeContext listType() {
			return getRuleContext(ListTypeContext.class,0);
		}
		public StructTypeContext structType() {
			return getRuleContext(StructTypeContext.class,0);
		}
		public MapTypeContext mapType() {
			return getRuleContext(MapTypeContext.class,0);
		}
		public UnionTypeContext unionType() {
			return getRuleContext(UnionTypeContext.class,0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeContext type() throws RecognitionException {
		TypeContext _localctx = new TypeContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_type);
		try {
			setState(2616);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_BIGINT:
			case KW_BINARY:
			case KW_BOOLEAN:
			case KW_CHAR:
			case KW_DATE:
			case KW_DATETIME:
			case KW_DECIMAL:
			case KW_DOUBLE:
			case KW_FLOAT:
			case KW_INT:
			case KW_REAL:
			case KW_SMALLINT:
			case KW_STRING:
			case KW_TIMESTAMP:
			case KW_TIMESTAMPLOCALTZ:
			case KW_TINYINT:
			case KW_VARCHAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(2611);
				primitiveType();
				}
				break;
			case KW_ARRAY:
				enterOuterAlt(_localctx, 2);
				{
				setState(2612);
				listType();
				}
				break;
			case KW_STRUCT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2613);
				structType();
				}
				break;
			case KW_MAP:
				enterOuterAlt(_localctx, 4);
				{
				setState(2614);
				mapType();
				}
				break;
			case KW_UNIONTYPE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2615);
				unionType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrimitiveTypeContext extends ParserRuleContext {
		public Token prec;
		public Token scale;
		public Token length;
		public TerminalNode KW_TINYINT() { return getToken(HiveParser.KW_TINYINT, 0); }
		public TerminalNode KW_SMALLINT() { return getToken(HiveParser.KW_SMALLINT, 0); }
		public TerminalNode KW_INT() { return getToken(HiveParser.KW_INT, 0); }
		public TerminalNode KW_BIGINT() { return getToken(HiveParser.KW_BIGINT, 0); }
		public TerminalNode KW_BOOLEAN() { return getToken(HiveParser.KW_BOOLEAN, 0); }
		public TerminalNode KW_FLOAT() { return getToken(HiveParser.KW_FLOAT, 0); }
		public TerminalNode KW_REAL() { return getToken(HiveParser.KW_REAL, 0); }
		public TerminalNode KW_DOUBLE() { return getToken(HiveParser.KW_DOUBLE, 0); }
		public TerminalNode KW_PRECISION() { return getToken(HiveParser.KW_PRECISION, 0); }
		public TerminalNode KW_DATE() { return getToken(HiveParser.KW_DATE, 0); }
		public TerminalNode KW_DATETIME() { return getToken(HiveParser.KW_DATETIME, 0); }
		public TerminalNode KW_TIMESTAMP() { return getToken(HiveParser.KW_TIMESTAMP, 0); }
		public TerminalNode KW_TIMESTAMPLOCALTZ() { return getToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0); }
		public TerminalNode KW_WITH() { return getToken(HiveParser.KW_WITH, 0); }
		public TerminalNode KW_LOCAL() { return getToken(HiveParser.KW_LOCAL, 0); }
		public TerminalNode KW_TIME() { return getToken(HiveParser.KW_TIME, 0); }
		public TerminalNode KW_ZONE() { return getToken(HiveParser.KW_ZONE, 0); }
		public TerminalNode KW_STRING() { return getToken(HiveParser.KW_STRING, 0); }
		public TerminalNode KW_BINARY() { return getToken(HiveParser.KW_BINARY, 0); }
		public TerminalNode KW_DECIMAL() { return getToken(HiveParser.KW_DECIMAL, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public List<TerminalNode> Number() { return getTokens(HiveParser.Number); }
		public TerminalNode Number(int i) {
			return getToken(HiveParser.Number, i);
		}
		public TerminalNode COMMA() { return getToken(HiveParser.COMMA, 0); }
		public TerminalNode KW_VARCHAR() { return getToken(HiveParser.KW_VARCHAR, 0); }
		public TerminalNode KW_CHAR() { return getToken(HiveParser.KW_CHAR, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitiveType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrimitiveType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrimitiveType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrimitiveType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrimitiveTypeContext primitiveType() throws RecognitionException {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_primitiveType);
		int _la;
		try {
			setState(2654);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2618);
				match(KW_TINYINT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2619);
				match(KW_SMALLINT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2620);
				match(KW_INT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2621);
				match(KW_BIGINT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2622);
				match(KW_BOOLEAN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2623);
				match(KW_FLOAT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2624);
				match(KW_REAL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2625);
				match(KW_DOUBLE);
				setState(2627);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_PRECISION) {
					{
					setState(2626);
					match(KW_PRECISION);
					}
				}

				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2629);
				match(KW_DATE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2630);
				match(KW_DATETIME);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2631);
				match(KW_TIMESTAMP);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2632);
				match(KW_TIMESTAMPLOCALTZ);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2633);
				match(KW_TIMESTAMP);
				setState(2634);
				match(KW_WITH);
				setState(2635);
				match(KW_LOCAL);
				setState(2636);
				match(KW_TIME);
				setState(2637);
				match(KW_ZONE);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2638);
				match(KW_STRING);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2639);
				match(KW_BINARY);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2640);
				match(KW_DECIMAL);
				setState(2648);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LPAREN) {
					{
					setState(2641);
					match(LPAREN);
					setState(2642);
					((PrimitiveTypeContext)_localctx).prec = match(Number);
					setState(2645);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2643);
						match(COMMA);
						setState(2644);
						((PrimitiveTypeContext)_localctx).scale = match(Number);
						}
					}

					setState(2647);
					match(RPAREN);
					}
				}

				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2650);
				_la = _input.LA(1);
				if ( !(_la==KW_CHAR || _la==KW_VARCHAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2651);
				match(LPAREN);
				setState(2652);
				((PrimitiveTypeContext)_localctx).length = match(Number);
				setState(2653);
				match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ListTypeContext extends ParserRuleContext {
		public TerminalNode KW_ARRAY() { return getToken(HiveParser.KW_ARRAY, 0); }
		public TerminalNode LESSTHAN() { return getToken(HiveParser.LESSTHAN, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode GREATERTHAN() { return getToken(HiveParser.GREATERTHAN, 0); }
		public ListTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterListType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitListType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitListType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListTypeContext listType() throws RecognitionException {
		ListTypeContext _localctx = new ListTypeContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_listType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2656);
			match(KW_ARRAY);
			setState(2657);
			match(LESSTHAN);
			setState(2658);
			type();
			setState(2659);
			match(GREATERTHAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StructTypeContext extends ParserRuleContext {
		public TerminalNode KW_STRUCT() { return getToken(HiveParser.KW_STRUCT, 0); }
		public TerminalNode LESSTHAN() { return getToken(HiveParser.LESSTHAN, 0); }
		public ColumnNameColonTypeListContext columnNameColonTypeList() {
			return getRuleContext(ColumnNameColonTypeListContext.class,0);
		}
		public TerminalNode GREATERTHAN() { return getToken(HiveParser.GREATERTHAN, 0); }
		public StructTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_structType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterStructType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitStructType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitStructType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StructTypeContext structType() throws RecognitionException {
		StructTypeContext _localctx = new StructTypeContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_structType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2661);
			match(KW_STRUCT);
			setState(2662);
			match(LESSTHAN);
			setState(2663);
			columnNameColonTypeList();
			setState(2664);
			match(GREATERTHAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MapTypeContext extends ParserRuleContext {
		public PrimitiveTypeContext left;
		public TypeContext right;
		public TerminalNode KW_MAP() { return getToken(HiveParser.KW_MAP, 0); }
		public TerminalNode LESSTHAN() { return getToken(HiveParser.LESSTHAN, 0); }
		public TerminalNode COMMA() { return getToken(HiveParser.COMMA, 0); }
		public TerminalNode GREATERTHAN() { return getToken(HiveParser.GREATERTHAN, 0); }
		public PrimitiveTypeContext primitiveType() {
			return getRuleContext(PrimitiveTypeContext.class,0);
		}
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public MapTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mapType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterMapType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitMapType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitMapType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MapTypeContext mapType() throws RecognitionException {
		MapTypeContext _localctx = new MapTypeContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_mapType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2666);
			match(KW_MAP);
			setState(2667);
			match(LESSTHAN);
			setState(2668);
			((MapTypeContext)_localctx).left = primitiveType();
			setState(2669);
			match(COMMA);
			setState(2670);
			((MapTypeContext)_localctx).right = type();
			setState(2671);
			match(GREATERTHAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnionTypeContext extends ParserRuleContext {
		public TerminalNode KW_UNIONTYPE() { return getToken(HiveParser.KW_UNIONTYPE, 0); }
		public TerminalNode LESSTHAN() { return getToken(HiveParser.LESSTHAN, 0); }
		public ColTypeListContext colTypeList() {
			return getRuleContext(ColTypeListContext.class,0);
		}
		public TerminalNode GREATERTHAN() { return getToken(HiveParser.GREATERTHAN, 0); }
		public UnionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterUnionType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitUnionType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitUnionType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionTypeContext unionType() throws RecognitionException {
		UnionTypeContext _localctx = new UnionTypeContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_unionType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2673);
			match(KW_UNIONTYPE);
			setState(2674);
			match(LESSTHAN);
			setState(2675);
			colTypeList();
			setState(2676);
			match(GREATERTHAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetOperatorContext extends ParserRuleContext {
		public TerminalNode KW_UNION() { return getToken(HiveParser.KW_UNION, 0); }
		public TerminalNode KW_INTERSECT() { return getToken(HiveParser.KW_INTERSECT, 0); }
		public TerminalNode KW_EXCEPT() { return getToken(HiveParser.KW_EXCEPT, 0); }
		public TerminalNode KW_MINUS() { return getToken(HiveParser.KW_MINUS, 0); }
		public TerminalNode KW_ALL() { return getToken(HiveParser.KW_ALL, 0); }
		public TerminalNode KW_DISTINCT() { return getToken(HiveParser.KW_DISTINCT, 0); }
		public SetOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSetOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSetOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSetOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetOperatorContext setOperator() throws RecognitionException {
		SetOperatorContext _localctx = new SetOperatorContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_setOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2678);
			_la = _input.LA(1);
			if ( !(_la==KW_EXCEPT || _la==KW_INTERSECT || _la==KW_MINUS || _la==KW_UNION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2680);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ALL || _la==KW_DISTINCT) {
				{
				setState(2679);
				_la = _input.LA(1);
				if ( !(_la==KW_ALL || _la==KW_DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryStatementExpressionContext extends ParserRuleContext {
		public WithClauseContext w;
		public QueryStatementExpressionBodyContext queryStatementExpressionBody() {
			return getRuleContext(QueryStatementExpressionBodyContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public QueryStatementExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryStatementExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterQueryStatementExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitQueryStatementExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitQueryStatementExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryStatementExpressionContext queryStatementExpression() throws RecognitionException {
		QueryStatementExpressionContext _localctx = new QueryStatementExpressionContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_queryStatementExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2683);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WITH) {
				{
				setState(2682);
				((QueryStatementExpressionContext)_localctx).w = withClause();
				}
			}

			setState(2685);
			queryStatementExpressionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryStatementExpressionBodyContext extends ParserRuleContext {
		public FromStatementContext fromStatement() {
			return getRuleContext(FromStatementContext.class,0);
		}
		public RegularBodyContext regularBody() {
			return getRuleContext(RegularBodyContext.class,0);
		}
		public QueryStatementExpressionBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryStatementExpressionBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterQueryStatementExpressionBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitQueryStatementExpressionBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitQueryStatementExpressionBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryStatementExpressionBodyContext queryStatementExpressionBody() throws RecognitionException {
		QueryStatementExpressionBodyContext _localctx = new QueryStatementExpressionBodyContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_queryStatementExpressionBody);
		try {
			setState(2689);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_FROM:
				enterOuterAlt(_localctx, 1);
				{
				setState(2687);
				fromStatement();
				}
				break;
			case KW_INSERT:
			case KW_MAP:
			case KW_REDUCE:
			case KW_SELECT:
			case KW_VALUES:
			case LPAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2688);
				regularBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithClauseContext extends ParserRuleContext {
		public TerminalNode KW_WITH() { return getToken(HiveParser.KW_WITH, 0); }
		public List<CteStatementContext> cteStatement() {
			return getRuleContexts(CteStatementContext.class);
		}
		public CteStatementContext cteStatement(int i) {
			return getRuleContext(CteStatementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterWithClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitWithClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitWithClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithClauseContext withClause() throws RecognitionException {
		WithClauseContext _localctx = new WithClauseContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_withClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2691);
			match(KW_WITH);
			setState(2692);
			cteStatement();
			setState(2697);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2693);
				match(COMMA);
				setState(2694);
				cteStatement();
				}
				}
				setState(2699);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CteStatementContext extends ParserRuleContext {
		public ColumnNameListContext colAliases;
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public List<TerminalNode> LPAREN() { return getTokens(HiveParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(HiveParser.LPAREN, i);
		}
		public QueryStatementExpressionContext queryStatementExpression() {
			return getRuleContext(QueryStatementExpressionContext.class,0);
		}
		public List<TerminalNode> RPAREN() { return getTokens(HiveParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(HiveParser.RPAREN, i);
		}
		public ColumnNameListContext columnNameList() {
			return getRuleContext(ColumnNameListContext.class,0);
		}
		public CteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CteStatementContext cteStatement() throws RecognitionException {
		CteStatementContext _localctx = new CteStatementContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_cteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2700);
			id_();
			setState(2705);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(2701);
				match(LPAREN);
				setState(2702);
				((CteStatementContext)_localctx).colAliases = columnNameList();
				setState(2703);
				match(RPAREN);
				}
			}

			setState(2707);
			match(KW_AS);
			setState(2708);
			match(LPAREN);
			setState(2709);
			queryStatementExpression();
			setState(2710);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FromStatementContext extends ParserRuleContext {
		public SetOperatorContext u;
		public SingleFromStatementContext r;
		public List<SingleFromStatementContext> singleFromStatement() {
			return getRuleContexts(SingleFromStatementContext.class);
		}
		public SingleFromStatementContext singleFromStatement(int i) {
			return getRuleContext(SingleFromStatementContext.class,i);
		}
		public List<SetOperatorContext> setOperator() {
			return getRuleContexts(SetOperatorContext.class);
		}
		public SetOperatorContext setOperator(int i) {
			return getRuleContext(SetOperatorContext.class,i);
		}
		public FromStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterFromStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitFromStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitFromStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromStatementContext fromStatement() throws RecognitionException {
		FromStatementContext _localctx = new FromStatementContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_fromStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2712);
			singleFromStatement();
			setState(2718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==KW_EXCEPT || _la==KW_INTERSECT || _la==KW_MINUS || _la==KW_UNION) {
				{
				{
				setState(2713);
				((FromStatementContext)_localctx).u = setOperator();
				setState(2714);
				((FromStatementContext)_localctx).r = singleFromStatement();
				}
				}
				setState(2720);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleFromStatementContext extends ParserRuleContext {
		public BodyContext body;
		public List<BodyContext> b = new ArrayList<BodyContext>();
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public List<BodyContext> body() {
			return getRuleContexts(BodyContext.class);
		}
		public BodyContext body(int i) {
			return getRuleContext(BodyContext.class,i);
		}
		public SingleFromStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleFromStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSingleFromStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSingleFromStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSingleFromStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleFromStatementContext singleFromStatement() throws RecognitionException {
		SingleFromStatementContext _localctx = new SingleFromStatementContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_singleFromStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2721);
			fromClause();
			setState(2723); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2722);
				((SingleFromStatementContext)_localctx).body = body();
				((SingleFromStatementContext)_localctx).b.add(((SingleFromStatementContext)_localctx).body);
				}
				}
				setState(2725); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==KW_INSERT || _la==KW_MAP || _la==KW_REDUCE || _la==KW_SELECT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RegularBodyContext extends ParserRuleContext {
		public InsertClauseContext i;
		public SelectStatementContext s;
		public InsertClauseContext insertClause() {
			return getRuleContext(InsertClauseContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public RegularBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regularBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterRegularBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitRegularBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitRegularBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegularBodyContext regularBody() throws RecognitionException {
		RegularBodyContext _localctx = new RegularBodyContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_regularBody);
		try {
			setState(2731);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_INSERT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2727);
				((RegularBodyContext)_localctx).i = insertClause();
				setState(2728);
				((RegularBodyContext)_localctx).s = selectStatement();
				}
				break;
			case KW_MAP:
			case KW_REDUCE:
			case KW_SELECT:
			case KW_VALUES:
			case LPAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2730);
				selectStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AtomSelectStatementContext extends ParserRuleContext {
		public SelectClauseContext s;
		public FromClauseContext f;
		public WhereClauseContext w;
		public GroupByClauseContext g;
		public HavingClauseContext h;
		public Window_clauseContext win;
		public QualifyClauseContext q;
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public QualifyClauseContext qualifyClause() {
			return getRuleContext(QualifyClauseContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public ValuesSourceContext valuesSource() {
			return getRuleContext(ValuesSourceContext.class,0);
		}
		public AtomSelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atomSelectStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAtomSelectStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAtomSelectStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAtomSelectStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AtomSelectStatementContext atomSelectStatement() throws RecognitionException {
		AtomSelectStatementContext _localctx = new AtomSelectStatementContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_atomSelectStatement);
		int _la;
		try {
			setState(2757);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_MAP:
			case KW_REDUCE:
			case KW_SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2733);
				((AtomSelectStatementContext)_localctx).s = selectClause();
				setState(2735);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_FROM) {
					{
					setState(2734);
					((AtomSelectStatementContext)_localctx).f = fromClause();
					}
				}

				setState(2738);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_WHERE) {
					{
					setState(2737);
					((AtomSelectStatementContext)_localctx).w = whereClause();
					}
				}

				setState(2741);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_GROUP) {
					{
					setState(2740);
					((AtomSelectStatementContext)_localctx).g = groupByClause();
					}
				}

				setState(2744);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_HAVING) {
					{
					setState(2743);
					((AtomSelectStatementContext)_localctx).h = havingClause();
					}
				}

				setState(2747);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_WINDOW) {
					{
					setState(2746);
					((AtomSelectStatementContext)_localctx).win = window_clause();
					}
				}

				setState(2750);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_QUALIFY) {
					{
					setState(2749);
					((AtomSelectStatementContext)_localctx).q = qualifyClause();
					}
				}

				}
				break;
			case LPAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2752);
				match(LPAREN);
				setState(2753);
				selectStatement();
				setState(2754);
				match(RPAREN);
				}
				break;
			case KW_VALUES:
				enterOuterAlt(_localctx, 3);
				{
				setState(2756);
				valuesSource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectStatementContext extends ParserRuleContext {
		public AtomSelectStatementContext a;
		public SetOpSelectStatementContext set;
		public OrderByClauseContext o;
		public ClusterByClauseContext c;
		public DistributeByClauseContext d;
		public SortByClauseContext sort;
		public LimitClauseContext l;
		public AtomSelectStatementContext atomSelectStatement() {
			return getRuleContext(AtomSelectStatementContext.class,0);
		}
		public SetOpSelectStatementContext setOpSelectStatement() {
			return getRuleContext(SetOpSelectStatementContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public ClusterByClauseContext clusterByClause() {
			return getRuleContext(ClusterByClauseContext.class,0);
		}
		public DistributeByClauseContext distributeByClause() {
			return getRuleContext(DistributeByClauseContext.class,0);
		}
		public SortByClauseContext sortByClause() {
			return getRuleContext(SortByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSelectStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSelectStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSelectStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_selectStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2759);
			((SelectStatementContext)_localctx).a = atomSelectStatement();
			setState(2761);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_EXCEPT || _la==KW_INTERSECT || _la==KW_MINUS || _la==KW_UNION) {
				{
				setState(2760);
				((SelectStatementContext)_localctx).set = setOpSelectStatement();
				}
			}

			setState(2764);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ORDER) {
				{
				setState(2763);
				((SelectStatementContext)_localctx).o = orderByClause();
				}
			}

			setState(2767);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_CLUSTER) {
				{
				setState(2766);
				((SelectStatementContext)_localctx).c = clusterByClause();
				}
			}

			setState(2770);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_DISTRIBUTE) {
				{
				setState(2769);
				((SelectStatementContext)_localctx).d = distributeByClause();
				}
			}

			setState(2773);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_SORT) {
				{
				setState(2772);
				((SelectStatementContext)_localctx).sort = sortByClause();
				}
			}

			setState(2776);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_LIMIT) {
				{
				setState(2775);
				((SelectStatementContext)_localctx).l = limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetOpSelectStatementContext extends ParserRuleContext {
		public SetOperatorContext u;
		public AtomSelectStatementContext b;
		public List<SetOperatorContext> setOperator() {
			return getRuleContexts(SetOperatorContext.class);
		}
		public SetOperatorContext setOperator(int i) {
			return getRuleContext(SetOperatorContext.class,i);
		}
		public List<AtomSelectStatementContext> atomSelectStatement() {
			return getRuleContexts(AtomSelectStatementContext.class);
		}
		public AtomSelectStatementContext atomSelectStatement(int i) {
			return getRuleContext(AtomSelectStatementContext.class,i);
		}
		public SetOpSelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setOpSelectStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSetOpSelectStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSetOpSelectStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSetOpSelectStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetOpSelectStatementContext setOpSelectStatement() throws RecognitionException {
		SetOpSelectStatementContext _localctx = new SetOpSelectStatementContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_setOpSelectStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2781); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2778);
				((SetOpSelectStatementContext)_localctx).u = setOperator();
				setState(2779);
				((SetOpSelectStatementContext)_localctx).b = atomSelectStatement();
				}
				}
				setState(2783); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==KW_EXCEPT || _la==KW_INTERSECT || _la==KW_MINUS || _la==KW_UNION );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectStatementWithCTEContext extends ParserRuleContext {
		public WithClauseContext w;
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public SelectStatementWithCTEContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatementWithCTE; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSelectStatementWithCTE(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSelectStatementWithCTE(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSelectStatementWithCTE(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementWithCTEContext selectStatementWithCTE() throws RecognitionException {
		SelectStatementWithCTEContext _localctx = new SelectStatementWithCTEContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_selectStatementWithCTE);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WITH) {
				{
				setState(2785);
				((SelectStatementWithCTEContext)_localctx).w = withClause();
				}
			}

			setState(2788);
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BodyContext extends ParserRuleContext {
		public InsertClauseContext insertClause() {
			return getRuleContext(InsertClauseContext.class,0);
		}
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public LateralViewContext lateralView() {
			return getRuleContext(LateralViewContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public QualifyClauseContext qualifyClause() {
			return getRuleContext(QualifyClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public ClusterByClauseContext clusterByClause() {
			return getRuleContext(ClusterByClauseContext.class,0);
		}
		public DistributeByClauseContext distributeByClause() {
			return getRuleContext(DistributeByClauseContext.class,0);
		}
		public SortByClauseContext sortByClause() {
			return getRuleContext(SortByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_body);
		int _la;
		try {
			setState(2859);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_INSERT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2790);
				insertClause();
				setState(2791);
				selectClause();
				setState(2793);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_LATERAL || _la==COMMA) {
					{
					setState(2792);
					lateralView();
					}
				}

				setState(2796);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_WHERE) {
					{
					setState(2795);
					whereClause();
					}
				}

				setState(2799);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_GROUP) {
					{
					setState(2798);
					groupByClause();
					}
				}

				setState(2802);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_HAVING) {
					{
					setState(2801);
					havingClause();
					}
				}

				setState(2805);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_WINDOW) {
					{
					setState(2804);
					window_clause();
					}
				}

				setState(2808);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_QUALIFY) {
					{
					setState(2807);
					qualifyClause();
					}
				}

				setState(2811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_ORDER) {
					{
					setState(2810);
					orderByClause();
					}
				}

				setState(2814);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_CLUSTER) {
					{
					setState(2813);
					clusterByClause();
					}
				}

				setState(2817);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_DISTRIBUTE) {
					{
					setState(2816);
					distributeByClause();
					}
				}

				setState(2820);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_SORT) {
					{
					setState(2819);
					sortByClause();
					}
				}

				setState(2823);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_LIMIT) {
					{
					setState(2822);
					limitClause();
					}
				}

				}
				break;
			case KW_MAP:
			case KW_REDUCE:
			case KW_SELECT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2825);
				selectClause();
				setState(2827);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_LATERAL || _la==COMMA) {
					{
					setState(2826);
					lateralView();
					}
				}

				setState(2830);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_WHERE) {
					{
					setState(2829);
					whereClause();
					}
				}

				setState(2833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_GROUP) {
					{
					setState(2832);
					groupByClause();
					}
				}

				setState(2836);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_HAVING) {
					{
					setState(2835);
					havingClause();
					}
				}

				setState(2839);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_WINDOW) {
					{
					setState(2838);
					window_clause();
					}
				}

				setState(2842);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_QUALIFY) {
					{
					setState(2841);
					qualifyClause();
					}
				}

				setState(2845);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_ORDER) {
					{
					setState(2844);
					orderByClause();
					}
				}

				setState(2848);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_CLUSTER) {
					{
					setState(2847);
					clusterByClause();
					}
				}

				setState(2851);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_DISTRIBUTE) {
					{
					setState(2850);
					distributeByClause();
					}
				}

				setState(2854);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_SORT) {
					{
					setState(2853);
					sortByClause();
					}
				}

				setState(2857);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_LIMIT) {
					{
					setState(2856);
					limitClause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertClauseContext extends ParserRuleContext {
		public ColumnNameListContext targetCols;
		public TerminalNode KW_INSERT() { return getToken(HiveParser.KW_INSERT, 0); }
		public TerminalNode KW_OVERWRITE() { return getToken(HiveParser.KW_OVERWRITE, 0); }
		public DestinationContext destination() {
			return getRuleContext(DestinationContext.class,0);
		}
		public TerminalNode KW_INTO() { return getToken(HiveParser.KW_INTO, 0); }
		public TableOrPartitionContext tableOrPartition() {
			return getRuleContext(TableOrPartitionContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode KW_TABLE() { return getToken(HiveParser.KW_TABLE, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public ColumnNameListContext columnNameList() {
			return getRuleContext(ColumnNameListContext.class,0);
		}
		public InsertClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterInsertClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitInsertClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitInsertClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertClauseContext insertClause() throws RecognitionException {
		InsertClauseContext _localctx = new InsertClauseContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_insertClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2861);
			match(KW_INSERT);
			setState(2878);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_OVERWRITE:
				{
				setState(2862);
				match(KW_OVERWRITE);
				setState(2863);
				destination();
				setState(2865);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_IF) {
					{
					setState(2864);
					ifNotExists();
					}
				}

				}
				break;
			case KW_INTO:
				{
				setState(2867);
				match(KW_INTO);
				setState(2869);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_TABLE) {
					{
					setState(2868);
					match(KW_TABLE);
					}
				}

				setState(2871);
				tableOrPartition();
				setState(2876);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
				case 1:
					{
					setState(2872);
					match(LPAREN);
					setState(2873);
					((InsertClauseContext)_localctx).targetCols = columnNameList();
					setState(2874);
					match(RPAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DestinationContext extends ParserRuleContext {
		public Token local;
		public TerminalNode KW_DIRECTORY() { return getToken(HiveParser.KW_DIRECTORY, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TableRowFormatContext tableRowFormat() {
			return getRuleContext(TableRowFormatContext.class,0);
		}
		public TableFileFormatContext tableFileFormat() {
			return getRuleContext(TableFileFormatContext.class,0);
		}
		public TerminalNode KW_LOCAL() { return getToken(HiveParser.KW_LOCAL, 0); }
		public TerminalNode KW_TABLE() { return getToken(HiveParser.KW_TABLE, 0); }
		public TableOrPartitionContext tableOrPartition() {
			return getRuleContext(TableOrPartitionContext.class,0);
		}
		public DestinationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_destination; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDestination(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDestination(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDestination(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DestinationContext destination() throws RecognitionException {
		DestinationContext _localctx = new DestinationContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_destination);
		int _la;
		try {
			setState(2893);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_DIRECTORY:
			case KW_LOCAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2881);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_LOCAL) {
					{
					setState(2880);
					((DestinationContext)_localctx).local = match(KW_LOCAL);
					}
				}

				setState(2883);
				match(KW_DIRECTORY);
				setState(2884);
				match(StringLiteral);
				setState(2886);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_ROW) {
					{
					setState(2885);
					tableRowFormat();
					}
				}

				setState(2889);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_STORED) {
					{
					setState(2888);
					tableFileFormat();
					}
				}

				}
				break;
			case KW_TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2891);
				match(KW_TABLE);
				setState(2892);
				tableOrPartition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LimitClauseContext extends ParserRuleContext {
		public Token offset;
		public Token num;
		public TerminalNode KW_LIMIT() { return getToken(HiveParser.KW_LIMIT, 0); }
		public TerminalNode KW_OFFSET() { return getToken(HiveParser.KW_OFFSET, 0); }
		public List<TerminalNode> Number() { return getTokens(HiveParser.Number); }
		public TerminalNode Number(int i) {
			return getToken(HiveParser.Number, i);
		}
		public TerminalNode COMMA() { return getToken(HiveParser.COMMA, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2895);
			match(KW_LIMIT);
			setState(2904);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				{
				setState(2898);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
				case 1:
					{
					setState(2896);
					((LimitClauseContext)_localctx).offset = match(Number);
					setState(2897);
					match(COMMA);
					}
					break;
				}
				setState(2900);
				((LimitClauseContext)_localctx).num = match(Number);
				}
				break;
			case 2:
				{
				setState(2901);
				((LimitClauseContext)_localctx).num = match(Number);
				setState(2902);
				match(KW_OFFSET);
				setState(2903);
				((LimitClauseContext)_localctx).offset = match(Number);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeleteStatementContext extends ParserRuleContext {
		public TerminalNode KW_DELETE() { return getToken(HiveParser.KW_DELETE, 0); }
		public TerminalNode KW_FROM() { return getToken(HiveParser.KW_FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_deleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2906);
			match(KW_DELETE);
			setState(2907);
			match(KW_FROM);
			setState(2908);
			tableName();
			setState(2910);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WHERE) {
				{
				setState(2909);
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnAssignmentClauseContext extends ParserRuleContext {
		public TableOrColumnContext tableOrColumn() {
			return getRuleContext(TableOrColumnContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(HiveParser.EQUAL, 0); }
		public PrecedencePlusExpressionOrDefaultContext precedencePlusExpressionOrDefault() {
			return getRuleContext(PrecedencePlusExpressionOrDefaultContext.class,0);
		}
		public ColumnAssignmentClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnAssignmentClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColumnAssignmentClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColumnAssignmentClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColumnAssignmentClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnAssignmentClauseContext columnAssignmentClause() throws RecognitionException {
		ColumnAssignmentClauseContext _localctx = new ColumnAssignmentClauseContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_columnAssignmentClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2912);
			tableOrColumn();
			setState(2913);
			match(EQUAL);
			setState(2914);
			precedencePlusExpressionOrDefault();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedencePlusExpressionOrDefaultContext extends ParserRuleContext {
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public PrecedencePlusExpressionContext precedencePlusExpression() {
			return getRuleContext(PrecedencePlusExpressionContext.class,0);
		}
		public PrecedencePlusExpressionOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedencePlusExpressionOrDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedencePlusExpressionOrDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedencePlusExpressionOrDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedencePlusExpressionOrDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedencePlusExpressionOrDefaultContext precedencePlusExpressionOrDefault() throws RecognitionException {
		PrecedencePlusExpressionOrDefaultContext _localctx = new PrecedencePlusExpressionOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_precedencePlusExpressionOrDefault);
		try {
			setState(2918);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2916);
				defaultValue();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2917);
				precedencePlusExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetColumnsClauseContext extends ParserRuleContext {
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public List<ColumnAssignmentClauseContext> columnAssignmentClause() {
			return getRuleContexts(ColumnAssignmentClauseContext.class);
		}
		public ColumnAssignmentClauseContext columnAssignmentClause(int i) {
			return getRuleContext(ColumnAssignmentClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public SetColumnsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setColumnsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSetColumnsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSetColumnsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSetColumnsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetColumnsClauseContext setColumnsClause() throws RecognitionException {
		SetColumnsClauseContext _localctx = new SetColumnsClauseContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_setColumnsClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2920);
			match(KW_SET);
			setState(2921);
			columnAssignmentClause();
			setState(2926);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2922);
				match(COMMA);
				setState(2923);
				columnAssignmentClause();
				}
				}
				setState(2928);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UpdateStatementContext extends ParserRuleContext {
		public TerminalNode KW_UPDATE() { return getToken(HiveParser.KW_UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public SetColumnsClauseContext setColumnsClause() {
			return getRuleContext(SetColumnsClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_updateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2929);
			match(KW_UPDATE);
			setState(2930);
			tableName();
			setState(2931);
			setColumnsClause();
			setState(2933);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WHERE) {
				{
				setState(2932);
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SqlTransactionStatementContext extends ParserRuleContext {
		public StartTransactionStatementContext startTransactionStatement() {
			return getRuleContext(StartTransactionStatementContext.class,0);
		}
		public CommitStatementContext commitStatement() {
			return getRuleContext(CommitStatementContext.class,0);
		}
		public RollbackStatementContext rollbackStatement() {
			return getRuleContext(RollbackStatementContext.class,0);
		}
		public SetAutoCommitStatementContext setAutoCommitStatement() {
			return getRuleContext(SetAutoCommitStatementContext.class,0);
		}
		public SqlTransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlTransactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSqlTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSqlTransactionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSqlTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlTransactionStatementContext sqlTransactionStatement() throws RecognitionException {
		SqlTransactionStatementContext _localctx = new SqlTransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_sqlTransactionStatement);
		try {
			setState(2939);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_START:
				enterOuterAlt(_localctx, 1);
				{
				setState(2935);
				startTransactionStatement();
				}
				break;
			case KW_COMMIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2936);
				commitStatement();
				}
				break;
			case KW_ROLLBACK:
				enterOuterAlt(_localctx, 3);
				{
				setState(2937);
				rollbackStatement();
				}
				break;
			case KW_SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(2938);
				setAutoCommitStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StartTransactionStatementContext extends ParserRuleContext {
		public TerminalNode KW_START() { return getToken(HiveParser.KW_START, 0); }
		public TerminalNode KW_TRANSACTION() { return getToken(HiveParser.KW_TRANSACTION, 0); }
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public StartTransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startTransactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterStartTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitStartTransactionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitStartTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartTransactionStatementContext startTransactionStatement() throws RecognitionException {
		StartTransactionStatementContext _localctx = new StartTransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_startTransactionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2941);
			match(KW_START);
			setState(2942);
			match(KW_TRANSACTION);
			setState(2951);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ISOLATION || _la==KW_READ) {
				{
				setState(2943);
				transactionMode();
				setState(2948);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2944);
					match(COMMA);
					setState(2945);
					transactionMode();
					}
					}
					setState(2950);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionModeContext extends ParserRuleContext {
		public IsolationLevelContext isolationLevel() {
			return getRuleContext(IsolationLevelContext.class,0);
		}
		public TransactionAccessModeContext transactionAccessMode() {
			return getRuleContext(TransactionAccessModeContext.class,0);
		}
		public TransactionModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTransactionMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTransactionMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTransactionMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeContext transactionMode() throws RecognitionException {
		TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_transactionMode);
		try {
			setState(2955);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_ISOLATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(2953);
				isolationLevel();
				}
				break;
			case KW_READ:
				enterOuterAlt(_localctx, 2);
				{
				setState(2954);
				transactionAccessMode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionAccessModeContext extends ParserRuleContext {
		public TerminalNode KW_READ() { return getToken(HiveParser.KW_READ, 0); }
		public TerminalNode KW_ONLY() { return getToken(HiveParser.KW_ONLY, 0); }
		public TerminalNode KW_WRITE() { return getToken(HiveParser.KW_WRITE, 0); }
		public TransactionAccessModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionAccessMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTransactionAccessMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTransactionAccessMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTransactionAccessMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionAccessModeContext transactionAccessMode() throws RecognitionException {
		TransactionAccessModeContext _localctx = new TransactionAccessModeContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_transactionAccessMode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2957);
			match(KW_READ);
			setState(2958);
			_la = _input.LA(1);
			if ( !(_la==KW_ONLY || _la==KW_WRITE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IsolationLevelContext extends ParserRuleContext {
		public TerminalNode KW_ISOLATION() { return getToken(HiveParser.KW_ISOLATION, 0); }
		public TerminalNode KW_LEVEL() { return getToken(HiveParser.KW_LEVEL, 0); }
		public LevelOfIsolationContext levelOfIsolation() {
			return getRuleContext(LevelOfIsolationContext.class,0);
		}
		public IsolationLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isolationLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterIsolationLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitIsolationLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitIsolationLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsolationLevelContext isolationLevel() throws RecognitionException {
		IsolationLevelContext _localctx = new IsolationLevelContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_isolationLevel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2960);
			match(KW_ISOLATION);
			setState(2961);
			match(KW_LEVEL);
			setState(2962);
			levelOfIsolation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LevelOfIsolationContext extends ParserRuleContext {
		public TerminalNode KW_SNAPSHOT() { return getToken(HiveParser.KW_SNAPSHOT, 0); }
		public LevelOfIsolationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelOfIsolation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterLevelOfIsolation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitLevelOfIsolation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitLevelOfIsolation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelOfIsolationContext levelOfIsolation() throws RecognitionException {
		LevelOfIsolationContext _localctx = new LevelOfIsolationContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_levelOfIsolation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2964);
			match(KW_SNAPSHOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommitStatementContext extends ParserRuleContext {
		public TerminalNode KW_COMMIT() { return getToken(HiveParser.KW_COMMIT, 0); }
		public TerminalNode KW_WORK() { return getToken(HiveParser.KW_WORK, 0); }
		public CommitStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCommitStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCommitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCommitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitStatementContext commitStatement() throws RecognitionException {
		CommitStatementContext _localctx = new CommitStatementContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_commitStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2966);
			match(KW_COMMIT);
			setState(2968);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WORK) {
				{
				setState(2967);
				match(KW_WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RollbackStatementContext extends ParserRuleContext {
		public TerminalNode KW_ROLLBACK() { return getToken(HiveParser.KW_ROLLBACK, 0); }
		public TerminalNode KW_WORK() { return getToken(HiveParser.KW_WORK, 0); }
		public RollbackStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterRollbackStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitRollbackStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitRollbackStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackStatementContext rollbackStatement() throws RecognitionException {
		RollbackStatementContext _localctx = new RollbackStatementContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_rollbackStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2970);
			match(KW_ROLLBACK);
			setState(2972);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WORK) {
				{
				setState(2971);
				match(KW_WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetAutoCommitStatementContext extends ParserRuleContext {
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public TerminalNode KW_AUTOCOMMIT() { return getToken(HiveParser.KW_AUTOCOMMIT, 0); }
		public BooleanValueTokContext booleanValueTok() {
			return getRuleContext(BooleanValueTokContext.class,0);
		}
		public SetAutoCommitStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAutoCommitStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSetAutoCommitStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSetAutoCommitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSetAutoCommitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetAutoCommitStatementContext setAutoCommitStatement() throws RecognitionException {
		SetAutoCommitStatementContext _localctx = new SetAutoCommitStatementContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_setAutoCommitStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2974);
			match(KW_SET);
			setState(2975);
			match(KW_AUTOCOMMIT);
			setState(2976);
			booleanValueTok();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AbortTransactionStatementContext extends ParserRuleContext {
		public TerminalNode KW_ABORT() { return getToken(HiveParser.KW_ABORT, 0); }
		public TerminalNode KW_TRANSACTIONS() { return getToken(HiveParser.KW_TRANSACTIONS, 0); }
		public List<TerminalNode> Number() { return getTokens(HiveParser.Number); }
		public TerminalNode Number(int i) {
			return getToken(HiveParser.Number, i);
		}
		public AbortTransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_abortTransactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAbortTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAbortTransactionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAbortTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AbortTransactionStatementContext abortTransactionStatement() throws RecognitionException {
		AbortTransactionStatementContext _localctx = new AbortTransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_abortTransactionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2978);
			match(KW_ABORT);
			setState(2979);
			match(KW_TRANSACTIONS);
			setState(2981); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2980);
				match(Number);
				}
				}
				setState(2983); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==Number );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AbortCompactionStatementContext extends ParserRuleContext {
		public TerminalNode KW_ABORT() { return getToken(HiveParser.KW_ABORT, 0); }
		public TerminalNode KW_COMPACTIONS() { return getToken(HiveParser.KW_COMPACTIONS, 0); }
		public List<TerminalNode> Number() { return getTokens(HiveParser.Number); }
		public TerminalNode Number(int i) {
			return getToken(HiveParser.Number, i);
		}
		public AbortCompactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_abortCompactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAbortCompactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAbortCompactionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAbortCompactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AbortCompactionStatementContext abortCompactionStatement() throws RecognitionException {
		AbortCompactionStatementContext _localctx = new AbortCompactionStatementContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_abortCompactionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2985);
			match(KW_ABORT);
			setState(2986);
			match(KW_COMPACTIONS);
			setState(2988); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2987);
				match(Number);
				}
				}
				setState(2990); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==Number );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MergeStatementContext extends ParserRuleContext {
		public TerminalNode KW_MERGE() { return getToken(HiveParser.KW_MERGE, 0); }
		public TerminalNode KW_INTO() { return getToken(HiveParser.KW_INTO, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode KW_USING() { return getToken(HiveParser.KW_USING, 0); }
		public JoinSourcePartContext joinSourcePart() {
			return getRuleContext(JoinSourcePartContext.class,0);
		}
		public TerminalNode KW_ON() { return getToken(HiveParser.KW_ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public WhenClausesContext whenClauses() {
			return getRuleContext(WhenClausesContext.class,0);
		}
		public TerminalNode QUERY_HINT() { return getToken(HiveParser.QUERY_HINT, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public MergeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mergeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterMergeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitMergeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitMergeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MergeStatementContext mergeStatement() throws RecognitionException {
		MergeStatementContext _localctx = new MergeStatementContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_mergeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2992);
			match(KW_MERGE);
			setState(2994);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUERY_HINT) {
				{
				setState(2993);
				match(QUERY_HINT);
				}
			}

			setState(2996);
			match(KW_INTO);
			setState(2997);
			tableName();
			setState(3002);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 808078815591826814L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 1083038567331911621L) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 8916819943869537315L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & 4159991143015340909L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8484708576009596927L) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & 17776728909112555L) != 0) || _la==Identifier) {
				{
				setState(2999);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_AS) {
					{
					setState(2998);
					match(KW_AS);
					}
				}

				setState(3001);
				id_();
				}
			}

			setState(3004);
			match(KW_USING);
			setState(3005);
			joinSourcePart();
			setState(3006);
			match(KW_ON);
			setState(3007);
			expression();
			setState(3008);
			whenClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhenClausesContext extends ParserRuleContext {
		public List<WhenMatchedAndClauseContext> whenMatchedAndClause() {
			return getRuleContexts(WhenMatchedAndClauseContext.class);
		}
		public WhenMatchedAndClauseContext whenMatchedAndClause(int i) {
			return getRuleContext(WhenMatchedAndClauseContext.class,i);
		}
		public List<WhenMatchedThenClauseContext> whenMatchedThenClause() {
			return getRuleContexts(WhenMatchedThenClauseContext.class);
		}
		public WhenMatchedThenClauseContext whenMatchedThenClause(int i) {
			return getRuleContext(WhenMatchedThenClauseContext.class,i);
		}
		public WhenNotMatchedClauseContext whenNotMatchedClause() {
			return getRuleContext(WhenNotMatchedClauseContext.class,0);
		}
		public WhenClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterWhenClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitWhenClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitWhenClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenClausesContext whenClauses() throws RecognitionException {
		WhenClausesContext _localctx = new WhenClausesContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_whenClauses);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3014);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,315,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(3012);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
					case 1:
						{
						setState(3010);
						whenMatchedAndClause();
						}
						break;
					case 2:
						{
						setState(3011);
						whenMatchedThenClause();
						}
						break;
					}
					} 
				}
				setState(3016);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,315,_ctx);
			}
			setState(3018);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WHEN) {
				{
				setState(3017);
				whenNotMatchedClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhenNotMatchedClauseContext extends ParserRuleContext {
		public ColumnParenthesesListContext targetCols;
		public TerminalNode KW_WHEN() { return getToken(HiveParser.KW_WHEN, 0); }
		public TerminalNode KW_NOT() { return getToken(HiveParser.KW_NOT, 0); }
		public TerminalNode KW_MATCHED() { return getToken(HiveParser.KW_MATCHED, 0); }
		public TerminalNode KW_THEN() { return getToken(HiveParser.KW_THEN, 0); }
		public TerminalNode KW_INSERT() { return getToken(HiveParser.KW_INSERT, 0); }
		public TerminalNode KW_VALUES() { return getToken(HiveParser.KW_VALUES, 0); }
		public ValueRowConstructorContext valueRowConstructor() {
			return getRuleContext(ValueRowConstructorContext.class,0);
		}
		public TerminalNode KW_AND() { return getToken(HiveParser.KW_AND, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ColumnParenthesesListContext columnParenthesesList() {
			return getRuleContext(ColumnParenthesesListContext.class,0);
		}
		public WhenNotMatchedClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenNotMatchedClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterWhenNotMatchedClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitWhenNotMatchedClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitWhenNotMatchedClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenNotMatchedClauseContext whenNotMatchedClause() throws RecognitionException {
		WhenNotMatchedClauseContext _localctx = new WhenNotMatchedClauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_whenNotMatchedClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3020);
			match(KW_WHEN);
			setState(3021);
			match(KW_NOT);
			setState(3022);
			match(KW_MATCHED);
			setState(3025);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_AND) {
				{
				setState(3023);
				match(KW_AND);
				setState(3024);
				expression();
				}
			}

			setState(3027);
			match(KW_THEN);
			setState(3028);
			match(KW_INSERT);
			setState(3030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(3029);
				((WhenNotMatchedClauseContext)_localctx).targetCols = columnParenthesesList();
				}
			}

			setState(3032);
			match(KW_VALUES);
			setState(3033);
			valueRowConstructor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhenMatchedAndClauseContext extends ParserRuleContext {
		public TerminalNode KW_WHEN() { return getToken(HiveParser.KW_WHEN, 0); }
		public TerminalNode KW_MATCHED() { return getToken(HiveParser.KW_MATCHED, 0); }
		public TerminalNode KW_AND() { return getToken(HiveParser.KW_AND, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode KW_THEN() { return getToken(HiveParser.KW_THEN, 0); }
		public UpdateOrDeleteContext updateOrDelete() {
			return getRuleContext(UpdateOrDeleteContext.class,0);
		}
		public WhenMatchedAndClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenMatchedAndClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterWhenMatchedAndClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitWhenMatchedAndClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitWhenMatchedAndClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenMatchedAndClauseContext whenMatchedAndClause() throws RecognitionException {
		WhenMatchedAndClauseContext _localctx = new WhenMatchedAndClauseContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_whenMatchedAndClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3035);
			match(KW_WHEN);
			setState(3036);
			match(KW_MATCHED);
			setState(3037);
			match(KW_AND);
			setState(3038);
			expression();
			setState(3039);
			match(KW_THEN);
			setState(3040);
			updateOrDelete();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhenMatchedThenClauseContext extends ParserRuleContext {
		public TerminalNode KW_WHEN() { return getToken(HiveParser.KW_WHEN, 0); }
		public TerminalNode KW_MATCHED() { return getToken(HiveParser.KW_MATCHED, 0); }
		public TerminalNode KW_THEN() { return getToken(HiveParser.KW_THEN, 0); }
		public UpdateOrDeleteContext updateOrDelete() {
			return getRuleContext(UpdateOrDeleteContext.class,0);
		}
		public WhenMatchedThenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenMatchedThenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterWhenMatchedThenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitWhenMatchedThenClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitWhenMatchedThenClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenMatchedThenClauseContext whenMatchedThenClause() throws RecognitionException {
		WhenMatchedThenClauseContext _localctx = new WhenMatchedThenClauseContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_whenMatchedThenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3042);
			match(KW_WHEN);
			setState(3043);
			match(KW_MATCHED);
			setState(3044);
			match(KW_THEN);
			setState(3045);
			updateOrDelete();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UpdateOrDeleteContext extends ParserRuleContext {
		public TerminalNode KW_UPDATE() { return getToken(HiveParser.KW_UPDATE, 0); }
		public SetColumnsClauseContext setColumnsClause() {
			return getRuleContext(SetColumnsClauseContext.class,0);
		}
		public TerminalNode KW_DELETE() { return getToken(HiveParser.KW_DELETE, 0); }
		public UpdateOrDeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateOrDelete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterUpdateOrDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitUpdateOrDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitUpdateOrDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateOrDeleteContext updateOrDelete() throws RecognitionException {
		UpdateOrDeleteContext _localctx = new UpdateOrDeleteContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_updateOrDelete);
		try {
			setState(3050);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_UPDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3047);
				match(KW_UPDATE);
				setState(3048);
				setColumnsClause();
				}
				break;
			case KW_DELETE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3049);
				match(KW_DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KillQueryStatementContext extends ParserRuleContext {
		public TerminalNode KW_KILL() { return getToken(HiveParser.KW_KILL, 0); }
		public TerminalNode KW_QUERY() { return getToken(HiveParser.KW_QUERY, 0); }
		public List<TerminalNode> StringLiteral() { return getTokens(HiveParser.StringLiteral); }
		public TerminalNode StringLiteral(int i) {
			return getToken(HiveParser.StringLiteral, i);
		}
		public KillQueryStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_killQueryStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterKillQueryStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitKillQueryStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitKillQueryStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KillQueryStatementContext killQueryStatement() throws RecognitionException {
		KillQueryStatementContext _localctx = new KillQueryStatementContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_killQueryStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3052);
			match(KW_KILL);
			setState(3053);
			match(KW_QUERY);
			setState(3055); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3054);
				match(StringLiteral);
				}
				}
				setState(3057); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==StringLiteral );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompactionIdContext extends ParserRuleContext {
		public Token compactId;
		public TerminalNode KW_COMPACT_ID() { return getToken(HiveParser.KW_COMPACT_ID, 0); }
		public TerminalNode EQUAL() { return getToken(HiveParser.EQUAL, 0); }
		public TerminalNode Number() { return getToken(HiveParser.Number, 0); }
		public CompactionIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compactionId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCompactionId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCompactionId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCompactionId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompactionIdContext compactionId() throws RecognitionException {
		CompactionIdContext _localctx = new CompactionIdContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_compactionId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3059);
			match(KW_COMPACT_ID);
			setState(3060);
			match(EQUAL);
			setState(3061);
			((CompactionIdContext)_localctx).compactId = match(Number);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompactionPoolContext extends ParserRuleContext {
		public Token poolName;
		public TerminalNode KW_POOL() { return getToken(HiveParser.KW_POOL, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public CompactionPoolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compactionPool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCompactionPool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCompactionPool(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCompactionPool(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompactionPoolContext compactionPool() throws RecognitionException {
		CompactionPoolContext _localctx = new CompactionPoolContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_compactionPool);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3063);
			match(KW_POOL);
			setState(3064);
			((CompactionPoolContext)_localctx).poolName = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompactionTypeContext extends ParserRuleContext {
		public Token compactType;
		public TerminalNode KW_TYPE() { return getToken(HiveParser.KW_TYPE, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public CompactionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compactionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCompactionType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCompactionType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCompactionType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompactionTypeContext compactionType() throws RecognitionException {
		CompactionTypeContext _localctx = new CompactionTypeContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_compactionType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3066);
			match(KW_TYPE);
			setState(3067);
			((CompactionTypeContext)_localctx).compactType = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompactionStatusContext extends ParserRuleContext {
		public Token status;
		public TerminalNode KW_STATUS() { return getToken(HiveParser.KW_STATUS, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public CompactionStatusContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compactionStatus; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCompactionStatus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCompactionStatus(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCompactionStatus(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompactionStatusContext compactionStatus() throws RecognitionException {
		CompactionStatusContext _localctx = new CompactionStatusContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_compactionStatus);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3069);
			match(KW_STATUS);
			setState(3070);
			((CompactionStatusContext)_localctx).status = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementContext extends ParserRuleContext {
		public TableNameContext tableNameTree;
		public TerminalNode KW_ALTER() { return getToken(HiveParser.KW_ALTER, 0); }
		public TerminalNode KW_TABLE() { return getToken(HiveParser.KW_TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public AlterTableStatementSuffixContext alterTableStatementSuffix() {
			return getRuleContext(AlterTableStatementSuffixContext.class,0);
		}
		public TerminalNode KW_VIEW() { return getToken(HiveParser.KW_VIEW, 0); }
		public AlterViewStatementSuffixContext alterViewStatementSuffix() {
			return getRuleContext(AlterViewStatementSuffixContext.class,0);
		}
		public TerminalNode KW_MATERIALIZED() { return getToken(HiveParser.KW_MATERIALIZED, 0); }
		public AlterMaterializedViewStatementSuffixContext alterMaterializedViewStatementSuffix() {
			return getRuleContext(AlterMaterializedViewStatementSuffixContext.class,0);
		}
		public Db_schemaContext db_schema() {
			return getRuleContext(Db_schemaContext.class,0);
		}
		public AlterDatabaseStatementSuffixContext alterDatabaseStatementSuffix() {
			return getRuleContext(AlterDatabaseStatementSuffixContext.class,0);
		}
		public TerminalNode KW_DATACONNECTOR() { return getToken(HiveParser.KW_DATACONNECTOR, 0); }
		public AlterDataConnectorStatementSuffixContext alterDataConnectorStatementSuffix() {
			return getRuleContext(AlterDataConnectorStatementSuffixContext.class,0);
		}
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public AlterStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementContext alterStatement() throws RecognitionException {
		AlterStatementContext _localctx = new AlterStatementContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_alterStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3072);
			match(KW_ALTER);
			setState(3094);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_TABLE:
				{
				setState(3073);
				match(KW_TABLE);
				setState(3074);
				tableName();
				setState(3075);
				alterTableStatementSuffix();
				}
				break;
			case KW_VIEW:
				{
				setState(3077);
				match(KW_VIEW);
				setState(3078);
				tableName();
				setState(3080);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_AS) {
					{
					setState(3079);
					match(KW_AS);
					}
				}

				setState(3082);
				alterViewStatementSuffix();
				}
				break;
			case KW_MATERIALIZED:
				{
				setState(3084);
				match(KW_MATERIALIZED);
				setState(3085);
				match(KW_VIEW);
				setState(3086);
				((AlterStatementContext)_localctx).tableNameTree = tableName();
				setState(3087);
				alterMaterializedViewStatementSuffix();
				}
				break;
			case KW_DATABASE:
			case KW_SCHEMA:
				{
				setState(3089);
				db_schema();
				setState(3090);
				alterDatabaseStatementSuffix();
				}
				break;
			case KW_DATACONNECTOR:
				{
				setState(3092);
				match(KW_DATACONNECTOR);
				setState(3093);
				alterDataConnectorStatementSuffix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTableStatementSuffixContext extends ParserRuleContext {
		public AlterStatementSuffixRenameContext alterStatementSuffixRename() {
			return getRuleContext(AlterStatementSuffixRenameContext.class,0);
		}
		public AlterStatementSuffixDropPartitionsContext alterStatementSuffixDropPartitions() {
			return getRuleContext(AlterStatementSuffixDropPartitionsContext.class,0);
		}
		public AlterStatementSuffixAddPartitionsContext alterStatementSuffixAddPartitions() {
			return getRuleContext(AlterStatementSuffixAddPartitionsContext.class,0);
		}
		public AlterStatementSuffixTouchContext alterStatementSuffixTouch() {
			return getRuleContext(AlterStatementSuffixTouchContext.class,0);
		}
		public AlterStatementSuffixArchiveContext alterStatementSuffixArchive() {
			return getRuleContext(AlterStatementSuffixArchiveContext.class,0);
		}
		public AlterStatementSuffixUnArchiveContext alterStatementSuffixUnArchive() {
			return getRuleContext(AlterStatementSuffixUnArchiveContext.class,0);
		}
		public AlterStatementSuffixPropertiesContext alterStatementSuffixProperties() {
			return getRuleContext(AlterStatementSuffixPropertiesContext.class,0);
		}
		public AlterStatementSuffixSkewedbyContext alterStatementSuffixSkewedby() {
			return getRuleContext(AlterStatementSuffixSkewedbyContext.class,0);
		}
		public AlterStatementSuffixExchangePartitionContext alterStatementSuffixExchangePartition() {
			return getRuleContext(AlterStatementSuffixExchangePartitionContext.class,0);
		}
		public AlterStatementPartitionKeyTypeContext alterStatementPartitionKeyType() {
			return getRuleContext(AlterStatementPartitionKeyTypeContext.class,0);
		}
		public AlterStatementSuffixDropConstraintContext alterStatementSuffixDropConstraint() {
			return getRuleContext(AlterStatementSuffixDropConstraintContext.class,0);
		}
		public AlterStatementSuffixAddConstraintContext alterStatementSuffixAddConstraint() {
			return getRuleContext(AlterStatementSuffixAddConstraintContext.class,0);
		}
		public AlterTblPartitionStatementSuffixContext alterTblPartitionStatementSuffix() {
			return getRuleContext(AlterTblPartitionStatementSuffixContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public AlterStatementSuffixSetOwnerContext alterStatementSuffixSetOwner() {
			return getRuleContext(AlterStatementSuffixSetOwnerContext.class,0);
		}
		public AlterStatementSuffixSetPartSpecContext alterStatementSuffixSetPartSpec() {
			return getRuleContext(AlterStatementSuffixSetPartSpecContext.class,0);
		}
		public AlterStatementSuffixExecuteContext alterStatementSuffixExecute() {
			return getRuleContext(AlterStatementSuffixExecuteContext.class,0);
		}
		public AlterTableStatementSuffixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableStatementSuffix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterTableStatementSuffix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterTableStatementSuffix(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterTableStatementSuffix(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableStatementSuffixContext alterTableStatementSuffix() throws RecognitionException {
		AlterTableStatementSuffixContext _localctx = new AlterTableStatementSuffixContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_alterTableStatementSuffix);
		try {
			setState(3115);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3096);
				alterStatementSuffixRename();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3097);
				alterStatementSuffixDropPartitions();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3098);
				alterStatementSuffixAddPartitions();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3099);
				alterStatementSuffixTouch();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3100);
				alterStatementSuffixArchive();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3101);
				alterStatementSuffixUnArchive();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3102);
				alterStatementSuffixProperties();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3103);
				alterStatementSuffixSkewedby();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3104);
				alterStatementSuffixExchangePartition();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3105);
				alterStatementPartitionKeyType();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3106);
				alterStatementSuffixDropConstraint();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3107);
				alterStatementSuffixAddConstraint();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3108);
				alterTblPartitionStatementSuffix();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3109);
				partitionSpec();
				setState(3110);
				alterTblPartitionStatementSuffix();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3112);
				alterStatementSuffixSetOwner();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3113);
				alterStatementSuffixSetPartSpec();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3114);
				alterStatementSuffixExecute();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTblPartitionStatementSuffixContext extends ParserRuleContext {
		public AlterStatementSuffixFileFormatContext alterStatementSuffixFileFormat() {
			return getRuleContext(AlterStatementSuffixFileFormatContext.class,0);
		}
		public AlterStatementSuffixLocationContext alterStatementSuffixLocation() {
			return getRuleContext(AlterStatementSuffixLocationContext.class,0);
		}
		public AlterStatementSuffixMergeFilesContext alterStatementSuffixMergeFiles() {
			return getRuleContext(AlterStatementSuffixMergeFilesContext.class,0);
		}
		public AlterStatementSuffixSerdePropertiesContext alterStatementSuffixSerdeProperties() {
			return getRuleContext(AlterStatementSuffixSerdePropertiesContext.class,0);
		}
		public AlterStatementSuffixRenamePartContext alterStatementSuffixRenamePart() {
			return getRuleContext(AlterStatementSuffixRenamePartContext.class,0);
		}
		public AlterStatementSuffixBucketNumContext alterStatementSuffixBucketNum() {
			return getRuleContext(AlterStatementSuffixBucketNumContext.class,0);
		}
		public AlterTblPartitionStatementSuffixSkewedLocationContext alterTblPartitionStatementSuffixSkewedLocation() {
			return getRuleContext(AlterTblPartitionStatementSuffixSkewedLocationContext.class,0);
		}
		public AlterStatementSuffixClusterbySortbyContext alterStatementSuffixClusterbySortby() {
			return getRuleContext(AlterStatementSuffixClusterbySortbyContext.class,0);
		}
		public AlterStatementSuffixCompactContext alterStatementSuffixCompact() {
			return getRuleContext(AlterStatementSuffixCompactContext.class,0);
		}
		public AlterStatementSuffixUpdateStatsColContext alterStatementSuffixUpdateStatsCol() {
			return getRuleContext(AlterStatementSuffixUpdateStatsColContext.class,0);
		}
		public AlterStatementSuffixUpdateStatsContext alterStatementSuffixUpdateStats() {
			return getRuleContext(AlterStatementSuffixUpdateStatsContext.class,0);
		}
		public AlterStatementSuffixRenameColContext alterStatementSuffixRenameCol() {
			return getRuleContext(AlterStatementSuffixRenameColContext.class,0);
		}
		public AlterStatementSuffixAddColContext alterStatementSuffixAddCol() {
			return getRuleContext(AlterStatementSuffixAddColContext.class,0);
		}
		public AlterStatementSuffixUpdateColumnsContext alterStatementSuffixUpdateColumns() {
			return getRuleContext(AlterStatementSuffixUpdateColumnsContext.class,0);
		}
		public AlterTblPartitionStatementSuffixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTblPartitionStatementSuffix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterTblPartitionStatementSuffix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterTblPartitionStatementSuffix(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterTblPartitionStatementSuffix(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTblPartitionStatementSuffixContext alterTblPartitionStatementSuffix() throws RecognitionException {
		AlterTblPartitionStatementSuffixContext _localctx = new AlterTblPartitionStatementSuffixContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_alterTblPartitionStatementSuffix);
		try {
			setState(3131);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3117);
				alterStatementSuffixFileFormat();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3118);
				alterStatementSuffixLocation();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3119);
				alterStatementSuffixMergeFiles();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3120);
				alterStatementSuffixSerdeProperties();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3121);
				alterStatementSuffixRenamePart();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3122);
				alterStatementSuffixBucketNum();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3123);
				alterTblPartitionStatementSuffixSkewedLocation();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3124);
				alterStatementSuffixClusterbySortby();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3125);
				alterStatementSuffixCompact();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3126);
				alterStatementSuffixUpdateStatsCol();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3127);
				alterStatementSuffixUpdateStats();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3128);
				alterStatementSuffixRenameCol();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3129);
				alterStatementSuffixAddCol();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3130);
				alterStatementSuffixUpdateColumns();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementPartitionKeyTypeContext extends ParserRuleContext {
		public TerminalNode KW_PARTITION() { return getToken(HiveParser.KW_PARTITION, 0); }
		public TerminalNode KW_COLUMN() { return getToken(HiveParser.KW_COLUMN, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public ColumnNameTypeContext columnNameType() {
			return getRuleContext(ColumnNameTypeContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public AlterStatementPartitionKeyTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementPartitionKeyType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementPartitionKeyType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementPartitionKeyType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementPartitionKeyType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementPartitionKeyTypeContext alterStatementPartitionKeyType() throws RecognitionException {
		AlterStatementPartitionKeyTypeContext _localctx = new AlterStatementPartitionKeyTypeContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_alterStatementPartitionKeyType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3133);
			match(KW_PARTITION);
			setState(3134);
			match(KW_COLUMN);
			setState(3135);
			match(LPAREN);
			setState(3136);
			columnNameType();
			setState(3137);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterViewStatementSuffixContext extends ParserRuleContext {
		public AlterViewSuffixPropertiesContext alterViewSuffixProperties() {
			return getRuleContext(AlterViewSuffixPropertiesContext.class,0);
		}
		public AlterStatementSuffixRenameContext alterStatementSuffixRename() {
			return getRuleContext(AlterStatementSuffixRenameContext.class,0);
		}
		public AlterStatementSuffixAddPartitionsContext alterStatementSuffixAddPartitions() {
			return getRuleContext(AlterStatementSuffixAddPartitionsContext.class,0);
		}
		public AlterStatementSuffixDropPartitionsContext alterStatementSuffixDropPartitions() {
			return getRuleContext(AlterStatementSuffixDropPartitionsContext.class,0);
		}
		public SelectStatementWithCTEContext selectStatementWithCTE() {
			return getRuleContext(SelectStatementWithCTEContext.class,0);
		}
		public AlterViewStatementSuffixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterViewStatementSuffix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterViewStatementSuffix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterViewStatementSuffix(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterViewStatementSuffix(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewStatementSuffixContext alterViewStatementSuffix() throws RecognitionException {
		AlterViewStatementSuffixContext _localctx = new AlterViewStatementSuffixContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_alterViewStatementSuffix);
		try {
			setState(3144);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_SET:
			case KW_UNSET:
				enterOuterAlt(_localctx, 1);
				{
				setState(3139);
				alterViewSuffixProperties();
				}
				break;
			case KW_RENAME:
				enterOuterAlt(_localctx, 2);
				{
				setState(3140);
				alterStatementSuffixRename();
				}
				break;
			case KW_ADD:
				enterOuterAlt(_localctx, 3);
				{
				setState(3141);
				alterStatementSuffixAddPartitions();
				}
				break;
			case KW_DROP:
				enterOuterAlt(_localctx, 4);
				{
				setState(3142);
				alterStatementSuffixDropPartitions();
				}
				break;
			case KW_MAP:
			case KW_REDUCE:
			case KW_SELECT:
			case KW_VALUES:
			case KW_WITH:
			case LPAREN:
				enterOuterAlt(_localctx, 5);
				{
				setState(3143);
				selectStatementWithCTE();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterMaterializedViewStatementSuffixContext extends ParserRuleContext {
		public AlterMaterializedViewSuffixRewriteContext alterMaterializedViewSuffixRewrite() {
			return getRuleContext(AlterMaterializedViewSuffixRewriteContext.class,0);
		}
		public AlterMaterializedViewSuffixRebuildContext alterMaterializedViewSuffixRebuild() {
			return getRuleContext(AlterMaterializedViewSuffixRebuildContext.class,0);
		}
		public AlterMaterializedViewStatementSuffixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterMaterializedViewStatementSuffix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterMaterializedViewStatementSuffix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterMaterializedViewStatementSuffix(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterMaterializedViewStatementSuffix(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterMaterializedViewStatementSuffixContext alterMaterializedViewStatementSuffix() throws RecognitionException {
		AlterMaterializedViewStatementSuffixContext _localctx = new AlterMaterializedViewStatementSuffixContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_alterMaterializedViewStatementSuffix);
		try {
			setState(3148);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_DISABLE:
			case KW_ENABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3146);
				alterMaterializedViewSuffixRewrite();
				}
				break;
			case KW_REBUILD:
				enterOuterAlt(_localctx, 2);
				{
				setState(3147);
				alterMaterializedViewSuffixRebuild();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterMaterializedViewSuffixRewriteContext extends ParserRuleContext {
		public RewriteEnabledContext mvRewriteFlag;
		public RewriteDisabledContext mvRewriteFlag2;
		public RewriteEnabledContext rewriteEnabled() {
			return getRuleContext(RewriteEnabledContext.class,0);
		}
		public RewriteDisabledContext rewriteDisabled() {
			return getRuleContext(RewriteDisabledContext.class,0);
		}
		public AlterMaterializedViewSuffixRewriteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterMaterializedViewSuffixRewrite; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterMaterializedViewSuffixRewrite(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterMaterializedViewSuffixRewrite(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterMaterializedViewSuffixRewrite(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterMaterializedViewSuffixRewriteContext alterMaterializedViewSuffixRewrite() throws RecognitionException {
		AlterMaterializedViewSuffixRewriteContext _localctx = new AlterMaterializedViewSuffixRewriteContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_alterMaterializedViewSuffixRewrite);
		try {
			setState(3152);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_ENABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3150);
				((AlterMaterializedViewSuffixRewriteContext)_localctx).mvRewriteFlag = rewriteEnabled();
				}
				break;
			case KW_DISABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3151);
				((AlterMaterializedViewSuffixRewriteContext)_localctx).mvRewriteFlag2 = rewriteDisabled();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterMaterializedViewSuffixRebuildContext extends ParserRuleContext {
		public TerminalNode KW_REBUILD() { return getToken(HiveParser.KW_REBUILD, 0); }
		public AlterMaterializedViewSuffixRebuildContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterMaterializedViewSuffixRebuild; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterMaterializedViewSuffixRebuild(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterMaterializedViewSuffixRebuild(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterMaterializedViewSuffixRebuild(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterMaterializedViewSuffixRebuildContext alterMaterializedViewSuffixRebuild() throws RecognitionException {
		AlterMaterializedViewSuffixRebuildContext _localctx = new AlterMaterializedViewSuffixRebuildContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_alterMaterializedViewSuffixRebuild);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3154);
			match(KW_REBUILD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDatabaseStatementSuffixContext extends ParserRuleContext {
		public AlterDatabaseSuffixPropertiesContext alterDatabaseSuffixProperties() {
			return getRuleContext(AlterDatabaseSuffixPropertiesContext.class,0);
		}
		public AlterDatabaseSuffixSetOwnerContext alterDatabaseSuffixSetOwner() {
			return getRuleContext(AlterDatabaseSuffixSetOwnerContext.class,0);
		}
		public AlterDatabaseSuffixSetLocationContext alterDatabaseSuffixSetLocation() {
			return getRuleContext(AlterDatabaseSuffixSetLocationContext.class,0);
		}
		public AlterDatabaseStatementSuffixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseStatementSuffix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterDatabaseStatementSuffix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterDatabaseStatementSuffix(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterDatabaseStatementSuffix(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseStatementSuffixContext alterDatabaseStatementSuffix() throws RecognitionException {
		AlterDatabaseStatementSuffixContext _localctx = new AlterDatabaseStatementSuffixContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_alterDatabaseStatementSuffix);
		try {
			setState(3159);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3156);
				alterDatabaseSuffixProperties();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3157);
				alterDatabaseSuffixSetOwner();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3158);
				alterDatabaseSuffixSetLocation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDatabaseSuffixPropertiesContext extends ParserRuleContext {
		public Id_Context name;
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public TerminalNode KW_DBPROPERTIES() { return getToken(HiveParser.KW_DBPROPERTIES, 0); }
		public DbPropertiesContext dbProperties() {
			return getRuleContext(DbPropertiesContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public AlterDatabaseSuffixPropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseSuffixProperties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterDatabaseSuffixProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterDatabaseSuffixProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterDatabaseSuffixProperties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseSuffixPropertiesContext alterDatabaseSuffixProperties() throws RecognitionException {
		AlterDatabaseSuffixPropertiesContext _localctx = new AlterDatabaseSuffixPropertiesContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_alterDatabaseSuffixProperties);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3161);
			((AlterDatabaseSuffixPropertiesContext)_localctx).name = id_();
			setState(3162);
			match(KW_SET);
			setState(3163);
			match(KW_DBPROPERTIES);
			setState(3164);
			dbProperties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDatabaseSuffixSetOwnerContext extends ParserRuleContext {
		public Id_Context dbName;
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public TerminalNode KW_OWNER() { return getToken(HiveParser.KW_OWNER, 0); }
		public PrincipalNameContext principalName() {
			return getRuleContext(PrincipalNameContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public AlterDatabaseSuffixSetOwnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseSuffixSetOwner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterDatabaseSuffixSetOwner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterDatabaseSuffixSetOwner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterDatabaseSuffixSetOwner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseSuffixSetOwnerContext alterDatabaseSuffixSetOwner() throws RecognitionException {
		AlterDatabaseSuffixSetOwnerContext _localctx = new AlterDatabaseSuffixSetOwnerContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_alterDatabaseSuffixSetOwner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3166);
			((AlterDatabaseSuffixSetOwnerContext)_localctx).dbName = id_();
			setState(3167);
			match(KW_SET);
			setState(3168);
			match(KW_OWNER);
			setState(3169);
			principalName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDatabaseSuffixSetLocationContext extends ParserRuleContext {
		public Id_Context dbName;
		public Token newLocation;
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode KW_LOCATION() { return getToken(HiveParser.KW_LOCATION, 0); }
		public TerminalNode KW_MANAGEDLOCATION() { return getToken(HiveParser.KW_MANAGEDLOCATION, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public AlterDatabaseSuffixSetLocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseSuffixSetLocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterDatabaseSuffixSetLocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterDatabaseSuffixSetLocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterDatabaseSuffixSetLocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseSuffixSetLocationContext alterDatabaseSuffixSetLocation() throws RecognitionException {
		AlterDatabaseSuffixSetLocationContext _localctx = new AlterDatabaseSuffixSetLocationContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_alterDatabaseSuffixSetLocation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3171);
			((AlterDatabaseSuffixSetLocationContext)_localctx).dbName = id_();
			setState(3172);
			match(KW_SET);
			setState(3173);
			_la = _input.LA(1);
			if ( !(_la==KW_LOCATION || _la==KW_MANAGEDLOCATION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3174);
			((AlterDatabaseSuffixSetLocationContext)_localctx).newLocation = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDatabaseSuffixSetManagedLocationContext extends ParserRuleContext {
		public Id_Context dbName;
		public Token newLocation;
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public TerminalNode KW_MANAGEDLOCATION() { return getToken(HiveParser.KW_MANAGEDLOCATION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public AlterDatabaseSuffixSetManagedLocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseSuffixSetManagedLocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterDatabaseSuffixSetManagedLocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterDatabaseSuffixSetManagedLocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterDatabaseSuffixSetManagedLocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseSuffixSetManagedLocationContext alterDatabaseSuffixSetManagedLocation() throws RecognitionException {
		AlterDatabaseSuffixSetManagedLocationContext _localctx = new AlterDatabaseSuffixSetManagedLocationContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_alterDatabaseSuffixSetManagedLocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3176);
			((AlterDatabaseSuffixSetManagedLocationContext)_localctx).dbName = id_();
			setState(3177);
			match(KW_SET);
			setState(3178);
			match(KW_MANAGEDLOCATION);
			setState(3179);
			((AlterDatabaseSuffixSetManagedLocationContext)_localctx).newLocation = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixRenameContext extends ParserRuleContext {
		public TerminalNode KW_RENAME() { return getToken(HiveParser.KW_RENAME, 0); }
		public TerminalNode KW_TO() { return getToken(HiveParser.KW_TO, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public AlterStatementSuffixRenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixRename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixRename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixRename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixRename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixRenameContext alterStatementSuffixRename() throws RecognitionException {
		AlterStatementSuffixRenameContext _localctx = new AlterStatementSuffixRenameContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_alterStatementSuffixRename);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3181);
			match(KW_RENAME);
			setState(3182);
			match(KW_TO);
			setState(3183);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixAddColContext extends ParserRuleContext {
		public Token add;
		public Token replace;
		public TerminalNode KW_COLUMNS() { return getToken(HiveParser.KW_COLUMNS, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public ColumnNameTypeListContext columnNameTypeList() {
			return getRuleContext(ColumnNameTypeListContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public TerminalNode KW_ADD() { return getToken(HiveParser.KW_ADD, 0); }
		public TerminalNode KW_REPLACE() { return getToken(HiveParser.KW_REPLACE, 0); }
		public RestrictOrCascadeContext restrictOrCascade() {
			return getRuleContext(RestrictOrCascadeContext.class,0);
		}
		public AlterStatementSuffixAddColContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixAddCol; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixAddCol(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixAddCol(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixAddCol(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixAddColContext alterStatementSuffixAddCol() throws RecognitionException {
		AlterStatementSuffixAddColContext _localctx = new AlterStatementSuffixAddColContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_alterStatementSuffixAddCol);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3187);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_ADD:
				{
				setState(3185);
				((AlterStatementSuffixAddColContext)_localctx).add = match(KW_ADD);
				}
				break;
			case KW_REPLACE:
				{
				setState(3186);
				((AlterStatementSuffixAddColContext)_localctx).replace = match(KW_REPLACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3189);
			match(KW_COLUMNS);
			setState(3190);
			match(LPAREN);
			setState(3191);
			columnNameTypeList();
			setState(3192);
			match(RPAREN);
			setState(3194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_CASCADE || _la==KW_RESTRICT) {
				{
				setState(3193);
				restrictOrCascade();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixAddConstraintContext extends ParserRuleContext {
		public AlterForeignKeyWithNameContext fk;
		public TerminalNode KW_ADD() { return getToken(HiveParser.KW_ADD, 0); }
		public AlterConstraintWithNameContext alterConstraintWithName() {
			return getRuleContext(AlterConstraintWithNameContext.class,0);
		}
		public AlterForeignKeyWithNameContext alterForeignKeyWithName() {
			return getRuleContext(AlterForeignKeyWithNameContext.class,0);
		}
		public AlterStatementSuffixAddConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixAddConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixAddConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixAddConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixAddConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixAddConstraintContext alterStatementSuffixAddConstraint() throws RecognitionException {
		AlterStatementSuffixAddConstraintContext _localctx = new AlterStatementSuffixAddConstraintContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_alterStatementSuffixAddConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3196);
			match(KW_ADD);
			setState(3199);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
			case 1:
				{
				setState(3197);
				((AlterStatementSuffixAddConstraintContext)_localctx).fk = alterForeignKeyWithName();
				}
				break;
			case 2:
				{
				setState(3198);
				alterConstraintWithName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixUpdateColumnsContext extends ParserRuleContext {
		public TerminalNode KW_UPDATE() { return getToken(HiveParser.KW_UPDATE, 0); }
		public TerminalNode KW_COLUMNS() { return getToken(HiveParser.KW_COLUMNS, 0); }
		public RestrictOrCascadeContext restrictOrCascade() {
			return getRuleContext(RestrictOrCascadeContext.class,0);
		}
		public AlterStatementSuffixUpdateColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixUpdateColumns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixUpdateColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixUpdateColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixUpdateColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixUpdateColumnsContext alterStatementSuffixUpdateColumns() throws RecognitionException {
		AlterStatementSuffixUpdateColumnsContext _localctx = new AlterStatementSuffixUpdateColumnsContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_alterStatementSuffixUpdateColumns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3201);
			match(KW_UPDATE);
			setState(3202);
			match(KW_COLUMNS);
			setState(3204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_CASCADE || _la==KW_RESTRICT) {
				{
				setState(3203);
				restrictOrCascade();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixDropConstraintContext extends ParserRuleContext {
		public Id_Context cName;
		public TerminalNode KW_DROP() { return getToken(HiveParser.KW_DROP, 0); }
		public TerminalNode KW_CONSTRAINT() { return getToken(HiveParser.KW_CONSTRAINT, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public AlterStatementSuffixDropConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixDropConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixDropConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixDropConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixDropConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixDropConstraintContext alterStatementSuffixDropConstraint() throws RecognitionException {
		AlterStatementSuffixDropConstraintContext _localctx = new AlterStatementSuffixDropConstraintContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_alterStatementSuffixDropConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3206);
			match(KW_DROP);
			setState(3207);
			match(KW_CONSTRAINT);
			setState(3208);
			((AlterStatementSuffixDropConstraintContext)_localctx).cName = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixRenameColContext extends ParserRuleContext {
		public Id_Context oldName;
		public Id_Context newName;
		public Token comment;
		public TerminalNode KW_CHANGE() { return getToken(HiveParser.KW_CHANGE, 0); }
		public ColTypeContext colType() {
			return getRuleContext(ColTypeContext.class,0);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode KW_COLUMN() { return getToken(HiveParser.KW_COLUMN, 0); }
		public AlterColumnConstraintContext alterColumnConstraint() {
			return getRuleContext(AlterColumnConstraintContext.class,0);
		}
		public TerminalNode KW_COMMENT() { return getToken(HiveParser.KW_COMMENT, 0); }
		public AlterStatementChangeColPositionContext alterStatementChangeColPosition() {
			return getRuleContext(AlterStatementChangeColPositionContext.class,0);
		}
		public RestrictOrCascadeContext restrictOrCascade() {
			return getRuleContext(RestrictOrCascadeContext.class,0);
		}
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public AlterStatementSuffixRenameColContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixRenameCol; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixRenameCol(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixRenameCol(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixRenameCol(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixRenameColContext alterStatementSuffixRenameCol() throws RecognitionException {
		AlterStatementSuffixRenameColContext _localctx = new AlterStatementSuffixRenameColContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_alterStatementSuffixRenameCol);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3210);
			match(KW_CHANGE);
			setState(3212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COLUMN) {
				{
				setState(3211);
				match(KW_COLUMN);
				}
			}

			setState(3214);
			((AlterStatementSuffixRenameColContext)_localctx).oldName = id_();
			setState(3215);
			((AlterStatementSuffixRenameColContext)_localctx).newName = id_();
			setState(3216);
			colType();
			setState(3218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 40)) & ~0x3f) == 0 && ((1L << (_la - 40)) & 1099511660545L) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & 9007233614479361L) != 0) || _la==KW_UNIQUE) {
				{
				setState(3217);
				alterColumnConstraint();
				}
			}

			setState(3222);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COMMENT) {
				{
				setState(3220);
				match(KW_COMMENT);
				setState(3221);
				((AlterStatementSuffixRenameColContext)_localctx).comment = match(StringLiteral);
				}
			}

			setState(3225);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_AFTER || _la==KW_FIRST) {
				{
				setState(3224);
				alterStatementChangeColPosition();
				}
			}

			setState(3228);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_CASCADE || _la==KW_RESTRICT) {
				{
				setState(3227);
				restrictOrCascade();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixUpdateStatsColContext extends ParserRuleContext {
		public Id_Context colName;
		public Token comment;
		public TerminalNode KW_UPDATE() { return getToken(HiveParser.KW_UPDATE, 0); }
		public TerminalNode KW_STATISTICS() { return getToken(HiveParser.KW_STATISTICS, 0); }
		public TerminalNode KW_FOR() { return getToken(HiveParser.KW_FOR, 0); }
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public TablePropertiesContext tableProperties() {
			return getRuleContext(TablePropertiesContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode KW_COLUMN() { return getToken(HiveParser.KW_COLUMN, 0); }
		public TerminalNode KW_COMMENT() { return getToken(HiveParser.KW_COMMENT, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public AlterStatementSuffixUpdateStatsColContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixUpdateStatsCol; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixUpdateStatsCol(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixUpdateStatsCol(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixUpdateStatsCol(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixUpdateStatsColContext alterStatementSuffixUpdateStatsCol() throws RecognitionException {
		AlterStatementSuffixUpdateStatsColContext _localctx = new AlterStatementSuffixUpdateStatsColContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_alterStatementSuffixUpdateStatsCol);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3230);
			match(KW_UPDATE);
			setState(3231);
			match(KW_STATISTICS);
			setState(3232);
			match(KW_FOR);
			setState(3234);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COLUMN) {
				{
				setState(3233);
				match(KW_COLUMN);
				}
			}

			setState(3236);
			((AlterStatementSuffixUpdateStatsColContext)_localctx).colName = id_();
			setState(3237);
			match(KW_SET);
			setState(3238);
			tableProperties();
			setState(3241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COMMENT) {
				{
				setState(3239);
				match(KW_COMMENT);
				setState(3240);
				((AlterStatementSuffixUpdateStatsColContext)_localctx).comment = match(StringLiteral);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixUpdateStatsContext extends ParserRuleContext {
		public TerminalNode KW_UPDATE() { return getToken(HiveParser.KW_UPDATE, 0); }
		public TerminalNode KW_STATISTICS() { return getToken(HiveParser.KW_STATISTICS, 0); }
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public TablePropertiesContext tableProperties() {
			return getRuleContext(TablePropertiesContext.class,0);
		}
		public AlterStatementSuffixUpdateStatsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixUpdateStats; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixUpdateStats(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixUpdateStats(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixUpdateStats(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixUpdateStatsContext alterStatementSuffixUpdateStats() throws RecognitionException {
		AlterStatementSuffixUpdateStatsContext _localctx = new AlterStatementSuffixUpdateStatsContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_alterStatementSuffixUpdateStats);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3243);
			match(KW_UPDATE);
			setState(3244);
			match(KW_STATISTICS);
			setState(3245);
			match(KW_SET);
			setState(3246);
			tableProperties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementChangeColPositionContext extends ParserRuleContext {
		public Token first;
		public Id_Context afterCol;
		public TerminalNode KW_FIRST() { return getToken(HiveParser.KW_FIRST, 0); }
		public TerminalNode KW_AFTER() { return getToken(HiveParser.KW_AFTER, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public AlterStatementChangeColPositionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementChangeColPosition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementChangeColPosition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementChangeColPosition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementChangeColPosition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementChangeColPositionContext alterStatementChangeColPosition() throws RecognitionException {
		AlterStatementChangeColPositionContext _localctx = new AlterStatementChangeColPositionContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_alterStatementChangeColPosition);
		try {
			setState(3251);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_FIRST:
				enterOuterAlt(_localctx, 1);
				{
				setState(3248);
				((AlterStatementChangeColPositionContext)_localctx).first = match(KW_FIRST);
				}
				break;
			case KW_AFTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3249);
				match(KW_AFTER);
				setState(3250);
				((AlterStatementChangeColPositionContext)_localctx).afterCol = id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixAddPartitionsContext extends ParserRuleContext {
		public TerminalNode KW_ADD() { return getToken(HiveParser.KW_ADD, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<AlterStatementSuffixAddPartitionsElementContext> alterStatementSuffixAddPartitionsElement() {
			return getRuleContexts(AlterStatementSuffixAddPartitionsElementContext.class);
		}
		public AlterStatementSuffixAddPartitionsElementContext alterStatementSuffixAddPartitionsElement(int i) {
			return getRuleContext(AlterStatementSuffixAddPartitionsElementContext.class,i);
		}
		public AlterStatementSuffixAddPartitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixAddPartitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixAddPartitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixAddPartitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixAddPartitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixAddPartitionsContext alterStatementSuffixAddPartitions() throws RecognitionException {
		AlterStatementSuffixAddPartitionsContext _localctx = new AlterStatementSuffixAddPartitionsContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_alterStatementSuffixAddPartitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3253);
			match(KW_ADD);
			setState(3255);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_IF) {
				{
				setState(3254);
				ifNotExists();
				}
			}

			setState(3258); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3257);
				alterStatementSuffixAddPartitionsElement();
				}
				}
				setState(3260); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==KW_PARTITION );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixAddPartitionsElementContext extends ParserRuleContext {
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public PartitionLocationContext partitionLocation() {
			return getRuleContext(PartitionLocationContext.class,0);
		}
		public AlterStatementSuffixAddPartitionsElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixAddPartitionsElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixAddPartitionsElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixAddPartitionsElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixAddPartitionsElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixAddPartitionsElementContext alterStatementSuffixAddPartitionsElement() throws RecognitionException {
		AlterStatementSuffixAddPartitionsElementContext _localctx = new AlterStatementSuffixAddPartitionsElementContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_alterStatementSuffixAddPartitionsElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3262);
			partitionSpec();
			setState(3264);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_LOCATION) {
				{
				setState(3263);
				partitionLocation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixTouchContext extends ParserRuleContext {
		public TerminalNode KW_TOUCH() { return getToken(HiveParser.KW_TOUCH, 0); }
		public List<PartitionSpecContext> partitionSpec() {
			return getRuleContexts(PartitionSpecContext.class);
		}
		public PartitionSpecContext partitionSpec(int i) {
			return getRuleContext(PartitionSpecContext.class,i);
		}
		public AlterStatementSuffixTouchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixTouch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixTouch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixTouch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixTouch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixTouchContext alterStatementSuffixTouch() throws RecognitionException {
		AlterStatementSuffixTouchContext _localctx = new AlterStatementSuffixTouchContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_alterStatementSuffixTouch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3266);
			match(KW_TOUCH);
			setState(3270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==KW_PARTITION) {
				{
				{
				setState(3267);
				partitionSpec();
				}
				}
				setState(3272);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixArchiveContext extends ParserRuleContext {
		public TerminalNode KW_ARCHIVE() { return getToken(HiveParser.KW_ARCHIVE, 0); }
		public List<PartitionSpecContext> partitionSpec() {
			return getRuleContexts(PartitionSpecContext.class);
		}
		public PartitionSpecContext partitionSpec(int i) {
			return getRuleContext(PartitionSpecContext.class,i);
		}
		public AlterStatementSuffixArchiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixArchive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixArchive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixArchive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixArchive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixArchiveContext alterStatementSuffixArchive() throws RecognitionException {
		AlterStatementSuffixArchiveContext _localctx = new AlterStatementSuffixArchiveContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_alterStatementSuffixArchive);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3273);
			match(KW_ARCHIVE);
			setState(3277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==KW_PARTITION) {
				{
				{
				setState(3274);
				partitionSpec();
				}
				}
				setState(3279);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixUnArchiveContext extends ParserRuleContext {
		public TerminalNode KW_UNARCHIVE() { return getToken(HiveParser.KW_UNARCHIVE, 0); }
		public List<PartitionSpecContext> partitionSpec() {
			return getRuleContexts(PartitionSpecContext.class);
		}
		public PartitionSpecContext partitionSpec(int i) {
			return getRuleContext(PartitionSpecContext.class,i);
		}
		public AlterStatementSuffixUnArchiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixUnArchive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixUnArchive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixUnArchive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixUnArchive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixUnArchiveContext alterStatementSuffixUnArchive() throws RecognitionException {
		AlterStatementSuffixUnArchiveContext _localctx = new AlterStatementSuffixUnArchiveContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_alterStatementSuffixUnArchive);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3280);
			match(KW_UNARCHIVE);
			setState(3284);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==KW_PARTITION) {
				{
				{
				setState(3281);
				partitionSpec();
				}
				}
				setState(3286);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionLocationContext extends ParserRuleContext {
		public Token locn;
		public TerminalNode KW_LOCATION() { return getToken(HiveParser.KW_LOCATION, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public PartitionLocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionLocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPartitionLocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPartitionLocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPartitionLocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionLocationContext partitionLocation() throws RecognitionException {
		PartitionLocationContext _localctx = new PartitionLocationContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_partitionLocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3287);
			match(KW_LOCATION);
			setState(3288);
			((PartitionLocationContext)_localctx).locn = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixDropPartitionsContext extends ParserRuleContext {
		public TerminalNode KW_DROP() { return getToken(HiveParser.KW_DROP, 0); }
		public List<TerminalNode> KW_PARTITION() { return getTokens(HiveParser.KW_PARTITION); }
		public TerminalNode KW_PARTITION(int i) {
			return getToken(HiveParser.KW_PARTITION, i);
		}
		public List<PartitionSelectorSpecContext> partitionSelectorSpec() {
			return getRuleContexts(PartitionSelectorSpecContext.class);
		}
		public PartitionSelectorSpecContext partitionSelectorSpec(int i) {
			return getRuleContext(PartitionSelectorSpecContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public TerminalNode KW_PURGE() { return getToken(HiveParser.KW_PURGE, 0); }
		public ReplicationClauseContext replicationClause() {
			return getRuleContext(ReplicationClauseContext.class,0);
		}
		public AlterStatementSuffixDropPartitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixDropPartitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixDropPartitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixDropPartitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixDropPartitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixDropPartitionsContext alterStatementSuffixDropPartitions() throws RecognitionException {
		AlterStatementSuffixDropPartitionsContext _localctx = new AlterStatementSuffixDropPartitionsContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_alterStatementSuffixDropPartitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3290);
			match(KW_DROP);
			setState(3292);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_IF) {
				{
				setState(3291);
				ifExists();
				}
			}

			setState(3294);
			match(KW_PARTITION);
			setState(3295);
			partitionSelectorSpec();
			setState(3301);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3296);
				match(COMMA);
				setState(3297);
				match(KW_PARTITION);
				setState(3298);
				partitionSelectorSpec();
				}
				}
				setState(3303);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3305);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PURGE) {
				{
				setState(3304);
				match(KW_PURGE);
				}
			}

			setState(3308);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_FOR) {
				{
				setState(3307);
				replicationClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixPropertiesContext extends ParserRuleContext {
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public TerminalNode KW_TBLPROPERTIES() { return getToken(HiveParser.KW_TBLPROPERTIES, 0); }
		public TablePropertiesContext tableProperties() {
			return getRuleContext(TablePropertiesContext.class,0);
		}
		public TerminalNode KW_UNSET() { return getToken(HiveParser.KW_UNSET, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterStatementSuffixPropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixProperties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixProperties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixPropertiesContext alterStatementSuffixProperties() throws RecognitionException {
		AlterStatementSuffixPropertiesContext _localctx = new AlterStatementSuffixPropertiesContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_alterStatementSuffixProperties);
		int _la;
		try {
			setState(3319);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(3310);
				match(KW_SET);
				setState(3311);
				match(KW_TBLPROPERTIES);
				setState(3312);
				tableProperties();
				}
				break;
			case KW_UNSET:
				enterOuterAlt(_localctx, 2);
				{
				setState(3313);
				match(KW_UNSET);
				setState(3314);
				match(KW_TBLPROPERTIES);
				setState(3316);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_IF) {
					{
					setState(3315);
					ifExists();
					}
				}

				setState(3318);
				tableProperties();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterViewSuffixPropertiesContext extends ParserRuleContext {
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public TerminalNode KW_TBLPROPERTIES() { return getToken(HiveParser.KW_TBLPROPERTIES, 0); }
		public TablePropertiesContext tableProperties() {
			return getRuleContext(TablePropertiesContext.class,0);
		}
		public TerminalNode KW_UNSET() { return getToken(HiveParser.KW_UNSET, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterViewSuffixPropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterViewSuffixProperties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterViewSuffixProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterViewSuffixProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterViewSuffixProperties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewSuffixPropertiesContext alterViewSuffixProperties() throws RecognitionException {
		AlterViewSuffixPropertiesContext _localctx = new AlterViewSuffixPropertiesContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_alterViewSuffixProperties);
		int _la;
		try {
			setState(3330);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(3321);
				match(KW_SET);
				setState(3322);
				match(KW_TBLPROPERTIES);
				setState(3323);
				tableProperties();
				}
				break;
			case KW_UNSET:
				enterOuterAlt(_localctx, 2);
				{
				setState(3324);
				match(KW_UNSET);
				setState(3325);
				match(KW_TBLPROPERTIES);
				setState(3327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_IF) {
					{
					setState(3326);
					ifExists();
					}
				}

				setState(3329);
				tableProperties();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixSerdePropertiesContext extends ParserRuleContext {
		public Token serdeName;
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public TerminalNode KW_SERDE() { return getToken(HiveParser.KW_SERDE, 0); }
		public TerminalNode KW_SERDEPROPERTIES() { return getToken(HiveParser.KW_SERDEPROPERTIES, 0); }
		public TablePropertiesContext tableProperties() {
			return getRuleContext(TablePropertiesContext.class,0);
		}
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TerminalNode KW_WITH() { return getToken(HiveParser.KW_WITH, 0); }
		public TerminalNode KW_UNSET() { return getToken(HiveParser.KW_UNSET, 0); }
		public AlterStatementSuffixSerdePropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixSerdeProperties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixSerdeProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixSerdeProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixSerdeProperties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixSerdePropertiesContext alterStatementSuffixSerdeProperties() throws RecognitionException {
		AlterStatementSuffixSerdePropertiesContext _localctx = new AlterStatementSuffixSerdePropertiesContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_alterStatementSuffixSerdeProperties);
		int _la;
		try {
			setState(3347);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(3332);
				match(KW_SET);
				setState(3342);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_SERDE:
					{
					setState(3333);
					match(KW_SERDE);
					setState(3334);
					((AlterStatementSuffixSerdePropertiesContext)_localctx).serdeName = match(StringLiteral);
					setState(3338);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_WITH) {
						{
						setState(3335);
						match(KW_WITH);
						setState(3336);
						match(KW_SERDEPROPERTIES);
						setState(3337);
						tableProperties();
						}
					}

					}
					break;
				case KW_SERDEPROPERTIES:
					{
					setState(3340);
					match(KW_SERDEPROPERTIES);
					setState(3341);
					tableProperties();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KW_UNSET:
				enterOuterAlt(_localctx, 2);
				{
				setState(3344);
				match(KW_UNSET);
				setState(3345);
				match(KW_SERDEPROPERTIES);
				setState(3346);
				tableProperties();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablePartitionPrefixContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TablePartitionPrefixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablePartitionPrefix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTablePartitionPrefix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTablePartitionPrefix(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTablePartitionPrefix(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablePartitionPrefixContext tablePartitionPrefix() throws RecognitionException {
		TablePartitionPrefixContext _localctx = new TablePartitionPrefixContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_tablePartitionPrefix);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3349);
			tableName();
			setState(3351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PARTITION) {
				{
				setState(3350);
				partitionSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixFileFormatContext extends ParserRuleContext {
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public TerminalNode KW_FILEFORMAT() { return getToken(HiveParser.KW_FILEFORMAT, 0); }
		public FileFormatContext fileFormat() {
			return getRuleContext(FileFormatContext.class,0);
		}
		public AlterStatementSuffixFileFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixFileFormat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixFileFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixFileFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixFileFormat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixFileFormatContext alterStatementSuffixFileFormat() throws RecognitionException {
		AlterStatementSuffixFileFormatContext _localctx = new AlterStatementSuffixFileFormatContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_alterStatementSuffixFileFormat);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3353);
			match(KW_SET);
			setState(3354);
			match(KW_FILEFORMAT);
			setState(3355);
			fileFormat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixClusterbySortbyContext extends ParserRuleContext {
		public TerminalNode KW_NOT() { return getToken(HiveParser.KW_NOT, 0); }
		public TerminalNode KW_CLUSTERED() { return getToken(HiveParser.KW_CLUSTERED, 0); }
		public TerminalNode KW_SORTED() { return getToken(HiveParser.KW_SORTED, 0); }
		public TableBucketsContext tableBuckets() {
			return getRuleContext(TableBucketsContext.class,0);
		}
		public AlterStatementSuffixClusterbySortbyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixClusterbySortby; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixClusterbySortby(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixClusterbySortby(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixClusterbySortby(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixClusterbySortbyContext alterStatementSuffixClusterbySortby() throws RecognitionException {
		AlterStatementSuffixClusterbySortbyContext _localctx = new AlterStatementSuffixClusterbySortbyContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_alterStatementSuffixClusterbySortby);
		int _la;
		try {
			setState(3360);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3357);
				match(KW_NOT);
				setState(3358);
				_la = _input.LA(1);
				if ( !(_la==KW_CLUSTERED || _la==KW_SORTED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case KW_CLUSTERED:
				enterOuterAlt(_localctx, 2);
				{
				setState(3359);
				tableBuckets();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTblPartitionStatementSuffixSkewedLocationContext extends ParserRuleContext {
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public TerminalNode KW_SKEWED() { return getToken(HiveParser.KW_SKEWED, 0); }
		public TerminalNode KW_LOCATION() { return getToken(HiveParser.KW_LOCATION, 0); }
		public SkewedLocationsContext skewedLocations() {
			return getRuleContext(SkewedLocationsContext.class,0);
		}
		public AlterTblPartitionStatementSuffixSkewedLocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTblPartitionStatementSuffixSkewedLocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterTblPartitionStatementSuffixSkewedLocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterTblPartitionStatementSuffixSkewedLocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterTblPartitionStatementSuffixSkewedLocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTblPartitionStatementSuffixSkewedLocationContext alterTblPartitionStatementSuffixSkewedLocation() throws RecognitionException {
		AlterTblPartitionStatementSuffixSkewedLocationContext _localctx = new AlterTblPartitionStatementSuffixSkewedLocationContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_alterTblPartitionStatementSuffixSkewedLocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3362);
			match(KW_SET);
			setState(3363);
			match(KW_SKEWED);
			setState(3364);
			match(KW_LOCATION);
			setState(3365);
			skewedLocations();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SkewedLocationsContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public SkewedLocationsListContext skewedLocationsList() {
			return getRuleContext(SkewedLocationsListContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public SkewedLocationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skewedLocations; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSkewedLocations(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSkewedLocations(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSkewedLocations(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SkewedLocationsContext skewedLocations() throws RecognitionException {
		SkewedLocationsContext _localctx = new SkewedLocationsContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_skewedLocations);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3367);
			match(LPAREN);
			setState(3368);
			skewedLocationsList();
			setState(3369);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SkewedLocationsListContext extends ParserRuleContext {
		public List<SkewedLocationMapContext> skewedLocationMap() {
			return getRuleContexts(SkewedLocationMapContext.class);
		}
		public SkewedLocationMapContext skewedLocationMap(int i) {
			return getRuleContext(SkewedLocationMapContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public SkewedLocationsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skewedLocationsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSkewedLocationsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSkewedLocationsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSkewedLocationsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SkewedLocationsListContext skewedLocationsList() throws RecognitionException {
		SkewedLocationsListContext _localctx = new SkewedLocationsListContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_skewedLocationsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3371);
			skewedLocationMap();
			setState(3376);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3372);
				match(COMMA);
				setState(3373);
				skewedLocationMap();
				}
				}
				setState(3378);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SkewedLocationMapContext extends ParserRuleContext {
		public SkewedValueLocationElementContext key;
		public Token value;
		public TerminalNode EQUAL() { return getToken(HiveParser.EQUAL, 0); }
		public SkewedValueLocationElementContext skewedValueLocationElement() {
			return getRuleContext(SkewedValueLocationElementContext.class,0);
		}
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public SkewedLocationMapContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skewedLocationMap; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSkewedLocationMap(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSkewedLocationMap(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSkewedLocationMap(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SkewedLocationMapContext skewedLocationMap() throws RecognitionException {
		SkewedLocationMapContext _localctx = new SkewedLocationMapContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_skewedLocationMap);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3379);
			((SkewedLocationMapContext)_localctx).key = skewedValueLocationElement();
			setState(3380);
			match(EQUAL);
			setState(3381);
			((SkewedLocationMapContext)_localctx).value = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixLocationContext extends ParserRuleContext {
		public Token newLoc;
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public TerminalNode KW_LOCATION() { return getToken(HiveParser.KW_LOCATION, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public AlterStatementSuffixLocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixLocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixLocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixLocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixLocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixLocationContext alterStatementSuffixLocation() throws RecognitionException {
		AlterStatementSuffixLocationContext _localctx = new AlterStatementSuffixLocationContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_alterStatementSuffixLocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3383);
			match(KW_SET);
			setState(3384);
			match(KW_LOCATION);
			setState(3385);
			((AlterStatementSuffixLocationContext)_localctx).newLoc = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixSkewedbyContext extends ParserRuleContext {
		public TableSkewedContext tableSkewed() {
			return getRuleContext(TableSkewedContext.class,0);
		}
		public TerminalNode KW_NOT() { return getToken(HiveParser.KW_NOT, 0); }
		public TerminalNode KW_SKEWED() { return getToken(HiveParser.KW_SKEWED, 0); }
		public StoredAsDirsContext storedAsDirs() {
			return getRuleContext(StoredAsDirsContext.class,0);
		}
		public AlterStatementSuffixSkewedbyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixSkewedby; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixSkewedby(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixSkewedby(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixSkewedby(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixSkewedbyContext alterStatementSuffixSkewedby() throws RecognitionException {
		AlterStatementSuffixSkewedbyContext _localctx = new AlterStatementSuffixSkewedbyContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_alterStatementSuffixSkewedby);
		try {
			setState(3393);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_SKEWED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3387);
				tableSkewed();
				}
				break;
			case KW_NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3388);
				match(KW_NOT);
				setState(3391);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_SKEWED:
					{
					setState(3389);
					match(KW_SKEWED);
					}
					break;
				case KW_STORED:
					{
					setState(3390);
					storedAsDirs();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixExchangePartitionContext extends ParserRuleContext {
		public TableNameContext exchangename;
		public TerminalNode KW_EXCHANGE() { return getToken(HiveParser.KW_EXCHANGE, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TerminalNode KW_WITH() { return getToken(HiveParser.KW_WITH, 0); }
		public TerminalNode KW_TABLE() { return getToken(HiveParser.KW_TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public AlterStatementSuffixExchangePartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixExchangePartition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixExchangePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixExchangePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixExchangePartition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixExchangePartitionContext alterStatementSuffixExchangePartition() throws RecognitionException {
		AlterStatementSuffixExchangePartitionContext _localctx = new AlterStatementSuffixExchangePartitionContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_alterStatementSuffixExchangePartition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3395);
			match(KW_EXCHANGE);
			setState(3396);
			partitionSpec();
			setState(3397);
			match(KW_WITH);
			setState(3398);
			match(KW_TABLE);
			setState(3399);
			((AlterStatementSuffixExchangePartitionContext)_localctx).exchangename = tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixRenamePartContext extends ParserRuleContext {
		public TerminalNode KW_RENAME() { return getToken(HiveParser.KW_RENAME, 0); }
		public TerminalNode KW_TO() { return getToken(HiveParser.KW_TO, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public AlterStatementSuffixRenamePartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixRenamePart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixRenamePart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixRenamePart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixRenamePart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixRenamePartContext alterStatementSuffixRenamePart() throws RecognitionException {
		AlterStatementSuffixRenamePartContext _localctx = new AlterStatementSuffixRenamePartContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_alterStatementSuffixRenamePart);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3401);
			match(KW_RENAME);
			setState(3402);
			match(KW_TO);
			setState(3403);
			partitionSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixStatsPartContext extends ParserRuleContext {
		public Id_Context colName;
		public Token comment;
		public TerminalNode KW_UPDATE() { return getToken(HiveParser.KW_UPDATE, 0); }
		public TerminalNode KW_STATISTICS() { return getToken(HiveParser.KW_STATISTICS, 0); }
		public TerminalNode KW_FOR() { return getToken(HiveParser.KW_FOR, 0); }
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public TablePropertiesContext tableProperties() {
			return getRuleContext(TablePropertiesContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode KW_COLUMN() { return getToken(HiveParser.KW_COLUMN, 0); }
		public TerminalNode KW_COMMENT() { return getToken(HiveParser.KW_COMMENT, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public AlterStatementSuffixStatsPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixStatsPart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixStatsPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixStatsPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixStatsPart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixStatsPartContext alterStatementSuffixStatsPart() throws RecognitionException {
		AlterStatementSuffixStatsPartContext _localctx = new AlterStatementSuffixStatsPartContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_alterStatementSuffixStatsPart);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3405);
			match(KW_UPDATE);
			setState(3406);
			match(KW_STATISTICS);
			setState(3407);
			match(KW_FOR);
			setState(3409);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COLUMN) {
				{
				setState(3408);
				match(KW_COLUMN);
				}
			}

			setState(3411);
			((AlterStatementSuffixStatsPartContext)_localctx).colName = id_();
			setState(3412);
			match(KW_SET);
			setState(3413);
			tableProperties();
			setState(3416);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COMMENT) {
				{
				setState(3414);
				match(KW_COMMENT);
				setState(3415);
				((AlterStatementSuffixStatsPartContext)_localctx).comment = match(StringLiteral);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixMergeFilesContext extends ParserRuleContext {
		public TerminalNode KW_CONCATENATE() { return getToken(HiveParser.KW_CONCATENATE, 0); }
		public AlterStatementSuffixMergeFilesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixMergeFiles; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixMergeFiles(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixMergeFiles(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixMergeFiles(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixMergeFilesContext alterStatementSuffixMergeFiles() throws RecognitionException {
		AlterStatementSuffixMergeFilesContext _localctx = new AlterStatementSuffixMergeFilesContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_alterStatementSuffixMergeFiles);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3418);
			match(KW_CONCATENATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixBucketNumContext extends ParserRuleContext {
		public Token num;
		public TerminalNode KW_INTO() { return getToken(HiveParser.KW_INTO, 0); }
		public TerminalNode KW_BUCKETS() { return getToken(HiveParser.KW_BUCKETS, 0); }
		public TerminalNode Number() { return getToken(HiveParser.Number, 0); }
		public AlterStatementSuffixBucketNumContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixBucketNum; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixBucketNum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixBucketNum(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixBucketNum(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixBucketNumContext alterStatementSuffixBucketNum() throws RecognitionException {
		AlterStatementSuffixBucketNumContext _localctx = new AlterStatementSuffixBucketNumContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_alterStatementSuffixBucketNum);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3420);
			match(KW_INTO);
			setState(3421);
			((AlterStatementSuffixBucketNumContext)_localctx).num = match(Number);
			setState(3422);
			match(KW_BUCKETS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BlockingContext extends ParserRuleContext {
		public TerminalNode KW_AND() { return getToken(HiveParser.KW_AND, 0); }
		public TerminalNode KW_WAIT() { return getToken(HiveParser.KW_WAIT, 0); }
		public BlockingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_blocking; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterBlocking(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitBlocking(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitBlocking(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlockingContext blocking() throws RecognitionException {
		BlockingContext _localctx = new BlockingContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_blocking);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3424);
			match(KW_AND);
			setState(3425);
			match(KW_WAIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompactPoolContext extends ParserRuleContext {
		public Token poolName;
		public TerminalNode KW_POOL() { return getToken(HiveParser.KW_POOL, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public CompactPoolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compactPool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCompactPool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCompactPool(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCompactPool(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompactPoolContext compactPool() throws RecognitionException {
		CompactPoolContext _localctx = new CompactPoolContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_compactPool);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3427);
			match(KW_POOL);
			setState(3428);
			((CompactPoolContext)_localctx).poolName = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixCompactContext extends ParserRuleContext {
		public Token compactType;
		public TerminalNode KW_COMPACT() { return getToken(HiveParser.KW_COMPACT, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TableImplBucketsContext tableImplBuckets() {
			return getRuleContext(TableImplBucketsContext.class,0);
		}
		public BlockingContext blocking() {
			return getRuleContext(BlockingContext.class,0);
		}
		public CompactPoolContext compactPool() {
			return getRuleContext(CompactPoolContext.class,0);
		}
		public TerminalNode KW_WITH() { return getToken(HiveParser.KW_WITH, 0); }
		public TerminalNode KW_OVERWRITE() { return getToken(HiveParser.KW_OVERWRITE, 0); }
		public TerminalNode KW_TBLPROPERTIES() { return getToken(HiveParser.KW_TBLPROPERTIES, 0); }
		public TablePropertiesContext tableProperties() {
			return getRuleContext(TablePropertiesContext.class,0);
		}
		public AlterStatementSuffixCompactContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixCompact; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixCompact(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixCompact(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixCompact(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixCompactContext alterStatementSuffixCompact() throws RecognitionException {
		AlterStatementSuffixCompactContext _localctx = new AlterStatementSuffixCompactContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_alterStatementSuffixCompact);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3430);
			match(KW_COMPACT);
			setState(3431);
			((AlterStatementSuffixCompactContext)_localctx).compactType = match(StringLiteral);
			setState(3433);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_CLUSTERED) {
				{
				setState(3432);
				tableImplBuckets();
				}
			}

			setState(3436);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_AND) {
				{
				setState(3435);
				blocking();
				}
			}

			setState(3439);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_POOL) {
				{
				setState(3438);
				compactPool();
				}
			}

			setState(3445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WITH) {
				{
				setState(3441);
				match(KW_WITH);
				setState(3442);
				match(KW_OVERWRITE);
				setState(3443);
				match(KW_TBLPROPERTIES);
				setState(3444);
				tableProperties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixSetOwnerContext extends ParserRuleContext {
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public TerminalNode KW_OWNER() { return getToken(HiveParser.KW_OWNER, 0); }
		public PrincipalNameContext principalName() {
			return getRuleContext(PrincipalNameContext.class,0);
		}
		public AlterStatementSuffixSetOwnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixSetOwner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixSetOwner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixSetOwner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixSetOwner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixSetOwnerContext alterStatementSuffixSetOwner() throws RecognitionException {
		AlterStatementSuffixSetOwnerContext _localctx = new AlterStatementSuffixSetOwnerContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_alterStatementSuffixSetOwner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3447);
			match(KW_SET);
			setState(3448);
			match(KW_OWNER);
			setState(3449);
			principalName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixSetPartSpecContext extends ParserRuleContext {
		public PartitionTransformSpecContext spec;
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public TerminalNode KW_PARTITION() { return getToken(HiveParser.KW_PARTITION, 0); }
		public TerminalNode KW_SPEC() { return getToken(HiveParser.KW_SPEC, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public PartitionTransformSpecContext partitionTransformSpec() {
			return getRuleContext(PartitionTransformSpecContext.class,0);
		}
		public AlterStatementSuffixSetPartSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixSetPartSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixSetPartSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixSetPartSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixSetPartSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixSetPartSpecContext alterStatementSuffixSetPartSpec() throws RecognitionException {
		AlterStatementSuffixSetPartSpecContext _localctx = new AlterStatementSuffixSetPartSpecContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_alterStatementSuffixSetPartSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3451);
			match(KW_SET);
			setState(3452);
			match(KW_PARTITION);
			setState(3453);
			match(KW_SPEC);
			setState(3454);
			match(LPAREN);
			setState(3455);
			((AlterStatementSuffixSetPartSpecContext)_localctx).spec = partitionTransformSpec();
			setState(3456);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterStatementSuffixExecuteContext extends ParserRuleContext {
		public Token rollbackParam;
		public Token expireParam;
		public Token snapshotParam;
		public TerminalNode KW_EXECUTE() { return getToken(HiveParser.KW_EXECUTE, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public TerminalNode KW_ROLLBACK() { return getToken(HiveParser.KW_ROLLBACK, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode KW_EXPIRE_SNAPSHOTS() { return getToken(HiveParser.KW_EXPIRE_SNAPSHOTS, 0); }
		public TerminalNode KW_SET_CURRENT_SNAPSHOT() { return getToken(HiveParser.KW_SET_CURRENT_SNAPSHOT, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TerminalNode Number() { return getToken(HiveParser.Number, 0); }
		public AlterStatementSuffixExecuteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatementSuffixExecute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterStatementSuffixExecute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterStatementSuffixExecute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterStatementSuffixExecute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementSuffixExecuteContext alterStatementSuffixExecute() throws RecognitionException {
		AlterStatementSuffixExecuteContext _localctx = new AlterStatementSuffixExecuteContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_alterStatementSuffixExecute);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3458);
			match(KW_EXECUTE);
			setState(3468);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_ROLLBACK:
				{
				setState(3459);
				match(KW_ROLLBACK);
				setState(3460);
				match(LPAREN);
				setState(3461);
				((AlterStatementSuffixExecuteContext)_localctx).rollbackParam = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==StringLiteral || _la==Number) ) {
					((AlterStatementSuffixExecuteContext)_localctx).rollbackParam = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case KW_EXPIRE_SNAPSHOTS:
				{
				setState(3462);
				match(KW_EXPIRE_SNAPSHOTS);
				setState(3463);
				match(LPAREN);
				setState(3464);
				((AlterStatementSuffixExecuteContext)_localctx).expireParam = match(StringLiteral);
				}
				break;
			case KW_SET_CURRENT_SNAPSHOT:
				{
				setState(3465);
				match(KW_SET_CURRENT_SNAPSHOT);
				setState(3466);
				match(LPAREN);
				setState(3467);
				((AlterStatementSuffixExecuteContext)_localctx).snapshotParam = match(Number);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3470);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FileFormatContext extends ParserRuleContext {
		public Token inFmt;
		public Token outFmt;
		public Token serdeCls;
		public Token inDriver;
		public Token outDriver;
		public Id_Context genericSpec;
		public TerminalNode KW_INPUTFORMAT() { return getToken(HiveParser.KW_INPUTFORMAT, 0); }
		public TerminalNode KW_OUTPUTFORMAT() { return getToken(HiveParser.KW_OUTPUTFORMAT, 0); }
		public TerminalNode KW_SERDE() { return getToken(HiveParser.KW_SERDE, 0); }
		public List<TerminalNode> StringLiteral() { return getTokens(HiveParser.StringLiteral); }
		public TerminalNode StringLiteral(int i) {
			return getToken(HiveParser.StringLiteral, i);
		}
		public TerminalNode KW_INPUTDRIVER() { return getToken(HiveParser.KW_INPUTDRIVER, 0); }
		public TerminalNode KW_OUTPUTDRIVER() { return getToken(HiveParser.KW_OUTPUTDRIVER, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public FileFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileFormat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterFileFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitFileFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitFileFormat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileFormatContext fileFormat() throws RecognitionException {
		FileFormatContext _localctx = new FileFormatContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_fileFormat);
		int _la;
		try {
			setState(3485);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3472);
				match(KW_INPUTFORMAT);
				setState(3473);
				((FileFormatContext)_localctx).inFmt = match(StringLiteral);
				setState(3474);
				match(KW_OUTPUTFORMAT);
				setState(3475);
				((FileFormatContext)_localctx).outFmt = match(StringLiteral);
				setState(3476);
				match(KW_SERDE);
				setState(3477);
				((FileFormatContext)_localctx).serdeCls = match(StringLiteral);
				setState(3482);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_INPUTDRIVER) {
					{
					setState(3478);
					match(KW_INPUTDRIVER);
					setState(3479);
					((FileFormatContext)_localctx).inDriver = match(StringLiteral);
					setState(3480);
					match(KW_OUTPUTDRIVER);
					setState(3481);
					((FileFormatContext)_localctx).outDriver = match(StringLiteral);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3484);
				((FileFormatContext)_localctx).genericSpec = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDataConnectorStatementSuffixContext extends ParserRuleContext {
		public AlterDataConnectorSuffixPropertiesContext alterDataConnectorSuffixProperties() {
			return getRuleContext(AlterDataConnectorSuffixPropertiesContext.class,0);
		}
		public AlterDataConnectorSuffixSetOwnerContext alterDataConnectorSuffixSetOwner() {
			return getRuleContext(AlterDataConnectorSuffixSetOwnerContext.class,0);
		}
		public AlterDataConnectorSuffixSetUrlContext alterDataConnectorSuffixSetUrl() {
			return getRuleContext(AlterDataConnectorSuffixSetUrlContext.class,0);
		}
		public AlterDataConnectorStatementSuffixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDataConnectorStatementSuffix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterDataConnectorStatementSuffix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterDataConnectorStatementSuffix(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterDataConnectorStatementSuffix(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDataConnectorStatementSuffixContext alterDataConnectorStatementSuffix() throws RecognitionException {
		AlterDataConnectorStatementSuffixContext _localctx = new AlterDataConnectorStatementSuffixContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_alterDataConnectorStatementSuffix);
		try {
			setState(3490);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3487);
				alterDataConnectorSuffixProperties();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3488);
				alterDataConnectorSuffixSetOwner();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3489);
				alterDataConnectorSuffixSetUrl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDataConnectorSuffixPropertiesContext extends ParserRuleContext {
		public Id_Context name;
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public TerminalNode KW_DCPROPERTIES() { return getToken(HiveParser.KW_DCPROPERTIES, 0); }
		public DcPropertiesContext dcProperties() {
			return getRuleContext(DcPropertiesContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public AlterDataConnectorSuffixPropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDataConnectorSuffixProperties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterDataConnectorSuffixProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterDataConnectorSuffixProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterDataConnectorSuffixProperties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDataConnectorSuffixPropertiesContext alterDataConnectorSuffixProperties() throws RecognitionException {
		AlterDataConnectorSuffixPropertiesContext _localctx = new AlterDataConnectorSuffixPropertiesContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_alterDataConnectorSuffixProperties);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3492);
			((AlterDataConnectorSuffixPropertiesContext)_localctx).name = id_();
			setState(3493);
			match(KW_SET);
			setState(3494);
			match(KW_DCPROPERTIES);
			setState(3495);
			dcProperties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDataConnectorSuffixSetOwnerContext extends ParserRuleContext {
		public Id_Context dcName;
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public TerminalNode KW_OWNER() { return getToken(HiveParser.KW_OWNER, 0); }
		public PrincipalNameContext principalName() {
			return getRuleContext(PrincipalNameContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public AlterDataConnectorSuffixSetOwnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDataConnectorSuffixSetOwner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterDataConnectorSuffixSetOwner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterDataConnectorSuffixSetOwner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterDataConnectorSuffixSetOwner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDataConnectorSuffixSetOwnerContext alterDataConnectorSuffixSetOwner() throws RecognitionException {
		AlterDataConnectorSuffixSetOwnerContext _localctx = new AlterDataConnectorSuffixSetOwnerContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_alterDataConnectorSuffixSetOwner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3497);
			((AlterDataConnectorSuffixSetOwnerContext)_localctx).dcName = id_();
			setState(3498);
			match(KW_SET);
			setState(3499);
			match(KW_OWNER);
			setState(3500);
			principalName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDataConnectorSuffixSetUrlContext extends ParserRuleContext {
		public Id_Context dcName;
		public Token newUri;
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public TerminalNode KW_URL() { return getToken(HiveParser.KW_URL, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public AlterDataConnectorSuffixSetUrlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDataConnectorSuffixSetUrl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterDataConnectorSuffixSetUrl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterDataConnectorSuffixSetUrl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterDataConnectorSuffixSetUrl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDataConnectorSuffixSetUrlContext alterDataConnectorSuffixSetUrl() throws RecognitionException {
		AlterDataConnectorSuffixSetUrlContext _localctx = new AlterDataConnectorSuffixSetUrlContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_alterDataConnectorSuffixSetUrl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3502);
			((AlterDataConnectorSuffixSetUrlContext)_localctx).dcName = id_();
			setState(3503);
			match(KW_SET);
			setState(3504);
			match(KW_URL);
			setState(3505);
			((AlterDataConnectorSuffixSetUrlContext)_localctx).newUri = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LikeTableOrFileContext extends ParserRuleContext {
		public Id_Context format;
		public Token uri;
		public TableNameContext likeName;
		public TerminalNode KW_LIKE() { return getToken(HiveParser.KW_LIKE, 0); }
		public TerminalNode KW_FILE() { return getToken(HiveParser.KW_FILE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public LikeTableOrFileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likeTableOrFile; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterLikeTableOrFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitLikeTableOrFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitLikeTableOrFile(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LikeTableOrFileContext likeTableOrFile() throws RecognitionException {
		LikeTableOrFileContext _localctx = new LikeTableOrFileContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_likeTableOrFile);
		try {
			setState(3516);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3507);
				match(KW_LIKE);
				setState(3508);
				match(KW_FILE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3509);
				match(KW_LIKE);
				setState(3510);
				match(KW_FILE);
				setState(3511);
				((LikeTableOrFileContext)_localctx).format = id_();
				setState(3512);
				((LikeTableOrFileContext)_localctx).uri = match(StringLiteral);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3514);
				match(KW_LIKE);
				setState(3515);
				((LikeTableOrFileContext)_localctx).likeName = tableName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableStatementContext extends ParserRuleContext {
		public Token temp;
		public Token trans;
		public Token ext;
		public TableNameContext name;
		public Token mgd;
		public TerminalNode KW_CREATE() { return getToken(HiveParser.KW_CREATE, 0); }
		public TerminalNode KW_TABLE() { return getToken(HiveParser.KW_TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public LikeTableOrFileContext likeTableOrFile() {
			return getRuleContext(LikeTableOrFileContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode KW_TEMPORARY() { return getToken(HiveParser.KW_TEMPORARY, 0); }
		public TerminalNode KW_TRANSACTIONAL() { return getToken(HiveParser.KW_TRANSACTIONAL, 0); }
		public TerminalNode KW_EXTERNAL() { return getToken(HiveParser.KW_EXTERNAL, 0); }
		public CreateTablePartitionSpecContext createTablePartitionSpec() {
			return getRuleContext(CreateTablePartitionSpecContext.class,0);
		}
		public TableRowFormatContext tableRowFormat() {
			return getRuleContext(TableRowFormatContext.class,0);
		}
		public TableFileFormatContext tableFileFormat() {
			return getRuleContext(TableFileFormatContext.class,0);
		}
		public TableLocationContext tableLocation() {
			return getRuleContext(TableLocationContext.class,0);
		}
		public TablePropertiesPrefixedContext tablePropertiesPrefixed() {
			return getRuleContext(TablePropertiesPrefixedContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public ColumnNameTypeOrConstraintListContext columnNameTypeOrConstraintList() {
			return getRuleContext(ColumnNameTypeOrConstraintListContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public TableCommentContext tableComment() {
			return getRuleContext(TableCommentContext.class,0);
		}
		public TableBucketsContext tableBuckets() {
			return getRuleContext(TableBucketsContext.class,0);
		}
		public TableSkewedContext tableSkewed() {
			return getRuleContext(TableSkewedContext.class,0);
		}
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public SelectStatementWithCTEContext selectStatementWithCTE() {
			return getRuleContext(SelectStatementWithCTEContext.class,0);
		}
		public TerminalNode KW_MANAGED() { return getToken(HiveParser.KW_MANAGED, 0); }
		public CreateTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCreateTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCreateTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCreateTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableStatementContext createTableStatement() throws RecognitionException {
		CreateTableStatementContext _localctx = new CreateTableStatementContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_createTableStatement);
		int _la;
		try {
			setState(3641);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3518);
				match(KW_CREATE);
				setState(3520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_TEMPORARY) {
					{
					setState(3519);
					((CreateTableStatementContext)_localctx).temp = match(KW_TEMPORARY);
					}
				}

				setState(3523);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_TRANSACTIONAL) {
					{
					setState(3522);
					((CreateTableStatementContext)_localctx).trans = match(KW_TRANSACTIONAL);
					}
				}

				setState(3526);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_EXTERNAL) {
					{
					setState(3525);
					((CreateTableStatementContext)_localctx).ext = match(KW_EXTERNAL);
					}
				}

				setState(3528);
				match(KW_TABLE);
				setState(3530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_IF) {
					{
					setState(3529);
					ifNotExists();
					}
				}

				setState(3532);
				((CreateTableStatementContext)_localctx).name = tableName();
				setState(3583);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_LIKE:
					{
					setState(3533);
					likeTableOrFile();
					setState(3535);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_PARTITIONED) {
						{
						setState(3534);
						createTablePartitionSpec();
						}
					}

					setState(3538);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_ROW) {
						{
						setState(3537);
						tableRowFormat();
						}
					}

					setState(3541);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_STORED) {
						{
						setState(3540);
						tableFileFormat();
						}
					}

					setState(3544);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_LOCATION) {
						{
						setState(3543);
						tableLocation();
						}
					}

					setState(3547);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_TBLPROPERTIES) {
						{
						setState(3546);
						tablePropertiesPrefixed();
						}
					}

					}
					break;
				case EOF:
				case KW_AS:
				case KW_CLUSTERED:
				case KW_COMMENT:
				case KW_LOCATION:
				case KW_PARTITIONED:
				case KW_ROW:
				case KW_SKEWED:
				case KW_STORED:
				case KW_TBLPROPERTIES:
				case LPAREN:
					{
					setState(3553);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LPAREN) {
						{
						setState(3549);
						match(LPAREN);
						setState(3550);
						columnNameTypeOrConstraintList();
						setState(3551);
						match(RPAREN);
						}
					}

					setState(3556);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_COMMENT) {
						{
						setState(3555);
						tableComment();
						}
					}

					setState(3559);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_PARTITIONED) {
						{
						setState(3558);
						createTablePartitionSpec();
						}
					}

					setState(3562);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_CLUSTERED) {
						{
						setState(3561);
						tableBuckets();
						}
					}

					setState(3565);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_SKEWED) {
						{
						setState(3564);
						tableSkewed();
						}
					}

					setState(3568);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_ROW) {
						{
						setState(3567);
						tableRowFormat();
						}
					}

					setState(3571);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_STORED) {
						{
						setState(3570);
						tableFileFormat();
						}
					}

					setState(3574);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_LOCATION) {
						{
						setState(3573);
						tableLocation();
						}
					}

					setState(3577);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_TBLPROPERTIES) {
						{
						setState(3576);
						tablePropertiesPrefixed();
						}
					}

					setState(3581);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_AS) {
						{
						setState(3579);
						match(KW_AS);
						setState(3580);
						selectStatementWithCTE();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3585);
				match(KW_CREATE);
				setState(3586);
				((CreateTableStatementContext)_localctx).mgd = match(KW_MANAGED);
				setState(3587);
				match(KW_TABLE);
				setState(3589);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_IF) {
					{
					setState(3588);
					ifNotExists();
					}
				}

				setState(3591);
				((CreateTableStatementContext)_localctx).name = tableName();
				setState(3639);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_LIKE:
					{
					setState(3592);
					likeTableOrFile();
					setState(3594);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_ROW) {
						{
						setState(3593);
						tableRowFormat();
						}
					}

					setState(3597);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_STORED) {
						{
						setState(3596);
						tableFileFormat();
						}
					}

					setState(3600);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_LOCATION) {
						{
						setState(3599);
						tableLocation();
						}
					}

					setState(3603);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_TBLPROPERTIES) {
						{
						setState(3602);
						tablePropertiesPrefixed();
						}
					}

					}
					break;
				case EOF:
				case KW_AS:
				case KW_CLUSTERED:
				case KW_COMMENT:
				case KW_LOCATION:
				case KW_PARTITIONED:
				case KW_ROW:
				case KW_SKEWED:
				case KW_STORED:
				case KW_TBLPROPERTIES:
				case LPAREN:
					{
					setState(3609);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LPAREN) {
						{
						setState(3605);
						match(LPAREN);
						setState(3606);
						columnNameTypeOrConstraintList();
						setState(3607);
						match(RPAREN);
						}
					}

					setState(3612);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_COMMENT) {
						{
						setState(3611);
						tableComment();
						}
					}

					setState(3615);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_PARTITIONED) {
						{
						setState(3614);
						createTablePartitionSpec();
						}
					}

					setState(3618);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_CLUSTERED) {
						{
						setState(3617);
						tableBuckets();
						}
					}

					setState(3621);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_SKEWED) {
						{
						setState(3620);
						tableSkewed();
						}
					}

					setState(3624);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_ROW) {
						{
						setState(3623);
						tableRowFormat();
						}
					}

					setState(3627);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_STORED) {
						{
						setState(3626);
						tableFileFormat();
						}
					}

					setState(3630);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_LOCATION) {
						{
						setState(3629);
						tableLocation();
						}
					}

					setState(3633);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_TBLPROPERTIES) {
						{
						setState(3632);
						tablePropertiesPrefixed();
						}
					}

					setState(3637);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_AS) {
						{
						setState(3635);
						match(KW_AS);
						setState(3636);
						selectStatementWithCTE();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateDataConnectorStatementContext extends ParserRuleContext {
		public Id_Context name;
		public DcPropertiesContext dcprops;
		public TerminalNode KW_CREATE() { return getToken(HiveParser.KW_CREATE, 0); }
		public TerminalNode KW_DATACONNECTOR() { return getToken(HiveParser.KW_DATACONNECTOR, 0); }
		public DataConnectorTypeContext dataConnectorType() {
			return getRuleContext(DataConnectorTypeContext.class,0);
		}
		public DataConnectorUrlContext dataConnectorUrl() {
			return getRuleContext(DataConnectorUrlContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public DataConnectorCommentContext dataConnectorComment() {
			return getRuleContext(DataConnectorCommentContext.class,0);
		}
		public TerminalNode KW_WITH() { return getToken(HiveParser.KW_WITH, 0); }
		public TerminalNode KW_DCPROPERTIES() { return getToken(HiveParser.KW_DCPROPERTIES, 0); }
		public DcPropertiesContext dcProperties() {
			return getRuleContext(DcPropertiesContext.class,0);
		}
		public CreateDataConnectorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDataConnectorStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCreateDataConnectorStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCreateDataConnectorStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCreateDataConnectorStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDataConnectorStatementContext createDataConnectorStatement() throws RecognitionException {
		CreateDataConnectorStatementContext _localctx = new CreateDataConnectorStatementContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_createDataConnectorStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3643);
			match(KW_CREATE);
			setState(3644);
			match(KW_DATACONNECTOR);
			setState(3646);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_IF) {
				{
				setState(3645);
				ifNotExists();
				}
			}

			setState(3648);
			((CreateDataConnectorStatementContext)_localctx).name = id_();
			setState(3649);
			dataConnectorType();
			setState(3650);
			dataConnectorUrl();
			setState(3652);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_COMMENT) {
				{
				setState(3651);
				dataConnectorComment();
				}
			}

			setState(3657);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WITH) {
				{
				setState(3654);
				match(KW_WITH);
				setState(3655);
				match(KW_DCPROPERTIES);
				setState(3656);
				((CreateDataConnectorStatementContext)_localctx).dcprops = dcProperties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataConnectorCommentContext extends ParserRuleContext {
		public Token comment;
		public TerminalNode KW_COMMENT() { return getToken(HiveParser.KW_COMMENT, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public DataConnectorCommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataConnectorComment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDataConnectorComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDataConnectorComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDataConnectorComment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataConnectorCommentContext dataConnectorComment() throws RecognitionException {
		DataConnectorCommentContext _localctx = new DataConnectorCommentContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_dataConnectorComment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3659);
			match(KW_COMMENT);
			setState(3660);
			((DataConnectorCommentContext)_localctx).comment = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataConnectorUrlContext extends ParserRuleContext {
		public Token url;
		public TerminalNode KW_URL() { return getToken(HiveParser.KW_URL, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public DataConnectorUrlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataConnectorUrl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDataConnectorUrl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDataConnectorUrl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDataConnectorUrl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataConnectorUrlContext dataConnectorUrl() throws RecognitionException {
		DataConnectorUrlContext _localctx = new DataConnectorUrlContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_dataConnectorUrl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3662);
			match(KW_URL);
			setState(3663);
			((DataConnectorUrlContext)_localctx).url = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataConnectorTypeContext extends ParserRuleContext {
		public Token dcType;
		public TerminalNode KW_TYPE() { return getToken(HiveParser.KW_TYPE, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public DataConnectorTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataConnectorType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDataConnectorType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDataConnectorType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDataConnectorType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataConnectorTypeContext dataConnectorType() throws RecognitionException {
		DataConnectorTypeContext _localctx = new DataConnectorTypeContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_dataConnectorType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3665);
			match(KW_TYPE);
			setState(3666);
			((DataConnectorTypeContext)_localctx).dcType = match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DcPropertiesContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public DbPropertiesListContext dbPropertiesList() {
			return getRuleContext(DbPropertiesListContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public DcPropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dcProperties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDcProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDcProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDcProperties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DcPropertiesContext dcProperties() throws RecognitionException {
		DcPropertiesContext _localctx = new DcPropertiesContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_dcProperties);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3668);
			match(LPAREN);
			setState(3669);
			dbPropertiesList();
			setState(3670);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropDataConnectorStatementContext extends ParserRuleContext {
		public TerminalNode KW_DROP() { return getToken(HiveParser.KW_DROP, 0); }
		public TerminalNode KW_DATACONNECTOR() { return getToken(HiveParser.KW_DATACONNECTOR, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDataConnectorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDataConnectorStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDropDataConnectorStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDropDataConnectorStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDropDataConnectorStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDataConnectorStatementContext dropDataConnectorStatement() throws RecognitionException {
		DropDataConnectorStatementContext _localctx = new DropDataConnectorStatementContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_dropDataConnectorStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3672);
			match(KW_DROP);
			setState(3673);
			match(KW_DATACONNECTOR);
			setState(3675);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_IF) {
				{
				setState(3674);
				ifExists();
				}
			}

			setState(3677);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableAllColumnsContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(HiveParser.STAR, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(HiveParser.DOT, 0); }
		public TableAllColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAllColumns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableAllColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableAllColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableAllColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAllColumnsContext tableAllColumns() throws RecognitionException {
		TableAllColumnsContext _localctx = new TableAllColumnsContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_tableAllColumns);
		try {
			setState(3684);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3679);
				match(STAR);
				}
				break;
			case KW_ABORT:
			case KW_ACTIVATE:
			case KW_ACTIVE:
			case KW_ADD:
			case KW_ADMIN:
			case KW_AFTER:
			case KW_ALLOC_FRACTION:
			case KW_ANALYZE:
			case KW_ARCHIVE:
			case KW_ASC:
			case KW_AST:
			case KW_AT:
			case KW_AUTOCOMMIT:
			case KW_BATCH:
			case KW_BEFORE:
			case KW_BUCKET:
			case KW_BUCKETS:
			case KW_CACHE:
			case KW_CASCADE:
			case KW_CBO:
			case KW_CHANGE:
			case KW_CHECK:
			case KW_CLUSTER:
			case KW_CLUSTERED:
			case KW_CLUSTERSTATUS:
			case KW_COLLECTION:
			case KW_COLUMNS:
			case KW_COMMENT:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_COMPUTE:
			case KW_CONCATENATE:
			case KW_CONTINUE:
			case KW_COST:
			case KW_CRON:
			case KW_DATA:
			case KW_DATABASES:
			case KW_DATETIME:
			case KW_DAY:
			case KW_DAYOFWEEK:
			case KW_DBPROPERTIES:
			case KW_DCPROPERTIES:
			case KW_DEBUG:
			case KW_DEFAULT:
			case KW_DEFERRED:
			case KW_DEFINED:
			case KW_DELIMITED:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DETAIL:
			case KW_DIRECTORIES:
			case KW_DIRECTORY:
			case KW_DISABLE:
			case KW_DISTRIBUTE:
			case KW_DISTRIBUTED:
			case KW_DO:
			case KW_DOW:
			case KW_DUMP:
			case KW_ELEM_TYPE:
			case KW_ENABLE:
			case KW_ENFORCED:
			case KW_ESCAPED:
			case KW_EVERY:
			case KW_EXCLUSIVE:
			case KW_EXECUTE:
			case KW_EXECUTED:
			case KW_EXPIRE_SNAPSHOTS:
			case KW_EXPLAIN:
			case KW_EXPORT:
			case KW_EXPRESSION:
			case KW_FIELDS:
			case KW_FILE:
			case KW_FILEFORMAT:
			case KW_FIRST:
			case KW_FORMAT:
			case KW_FORMATTED:
			case KW_FUNCTIONS:
			case KW_HOLD_DDLTIME:
			case KW_HOUR:
			case KW_IDXPROPERTIES:
			case KW_IGNORE:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_INPATH:
			case KW_INPUTDRIVER:
			case KW_INPUTFORMAT:
			case KW_ISOLATION:
			case KW_ITEMS:
			case KW_JAR:
			case KW_JOINCOST:
			case KW_KEY:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LAST:
			case KW_LEVEL:
			case KW_LIMIT:
			case KW_LINES:
			case KW_LOAD:
			case KW_LOCATION:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_LONG:
			case KW_MANAGED:
			case KW_MANAGEDLOCATION:
			case KW_MANAGEMENT:
			case KW_MAPJOIN:
			case KW_MAPPING:
			case KW_MATCHED:
			case KW_MATERIALIZED:
			case KW_METADATA:
			case KW_MINUTE:
			case KW_MONTH:
			case KW_MOVE:
			case KW_MSCK:
			case KW_NORELY:
			case KW_NOSCAN:
			case KW_NOVALIDATE:
			case KW_NO_DROP:
			case KW_NULLS:
			case KW_OFFLINE:
			case KW_OFFSET:
			case KW_OPERATOR:
			case KW_OPTION:
			case KW_OUTPUTDRIVER:
			case KW_OUTPUTFORMAT:
			case KW_OVERWRITE:
			case KW_OWNER:
			case KW_PARTITIONED:
			case KW_PARTITIONS:
			case KW_PATH:
			case KW_PLAN:
			case KW_PLANS:
			case KW_PLUS:
			case KW_POOL:
			case KW_PRINCIPALS:
			case KW_PROTECTION:
			case KW_PURGE:
			case KW_QUARTER:
			case KW_QUERY:
			case KW_QUERY_PARALLELISM:
			case KW_READ:
			case KW_READONLY:
			case KW_REBUILD:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_RELOAD:
			case KW_RELY:
			case KW_REMOTE:
			case KW_RENAME:
			case KW_REOPTIMIZATION:
			case KW_REPAIR:
			case KW_REPL:
			case KW_REPLACE:
			case KW_REPLICATION:
			case KW_RESOURCE:
			case KW_RESPECT:
			case KW_RESTRICT:
			case KW_REWRITE:
			case KW_ROLE:
			case KW_ROLES:
			case KW_SCHEDULED:
			case KW_SCHEDULING_POLICY:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SECOND:
			case KW_SEMI:
			case KW_SERDE:
			case KW_SERDEPROPERTIES:
			case KW_SERVER:
			case KW_SETS:
			case KW_SET_CURRENT_SNAPSHOT:
			case KW_SHARED:
			case KW_SHOW:
			case KW_SHOW_DATABASE:
			case KW_SKEWED:
			case KW_SNAPSHOT:
			case KW_SORT:
			case KW_SORTED:
			case KW_SPEC:
			case KW_SSL:
			case KW_STATISTICS:
			case KW_STATUS:
			case KW_STORED:
			case KW_STREAMTABLE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_SUMMARY:
			case KW_SYSTEM_TIME:
			case KW_SYSTEM_VERSION:
			case KW_TABLES:
			case KW_TBLPROPERTIES:
			case KW_TEMPORARY:
			case KW_TERMINATED:
			case KW_TIMESTAMPTZ:
			case KW_TINYINT:
			case KW_TOUCH:
			case KW_TRANSACTION:
			case KW_TRANSACTIONAL:
			case KW_TRANSACTIONS:
			case KW_TRIM:
			case KW_TYPE:
			case KW_UNARCHIVE:
			case KW_UNDO:
			case KW_UNIONTYPE:
			case KW_UNKNOWN:
			case KW_UNLOCK:
			case KW_UNMANAGED:
			case KW_UNSET:
			case KW_UNSIGNED:
			case KW_URI:
			case KW_URL:
			case KW_USE:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_VALIDATE:
			case KW_VALUE_TYPE:
			case KW_VECTORIZATION:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_WAIT:
			case KW_WEEK:
			case KW_WHILE:
			case KW_WITHIN:
			case KW_WORK:
			case KW_WORKLOAD:
			case KW_WRITE:
			case KW_YEAR:
			case KW_ZONE:
			case Identifier:
				enterOuterAlt(_localctx, 2);
				{
				setState(3680);
				tableName();
				setState(3681);
				match(DOT);
				setState(3682);
				match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableOrColumnContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TableOrColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOrColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableOrColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableOrColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableOrColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOrColumnContext tableOrColumn() throws RecognitionException {
		TableOrColumnContext _localctx = new TableOrColumnContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_tableOrColumn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3686);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefaultValueContext extends ParserRuleContext {
		public TerminalNode KW_DEFAULT() { return getToken(HiveParser.KW_DEFAULT, 0); }
		public DefaultValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDefaultValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDefaultValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDefaultValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultValueContext defaultValue() throws RecognitionException {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_defaultValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3688);
			match(KW_DEFAULT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionListContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterExpressionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitExpressionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitExpressionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionListContext expressionList() throws RecognitionException {
		ExpressionListContext _localctx = new ExpressionListContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_expressionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3690);
			expression();
			setState(3695);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3691);
				match(COMMA);
				setState(3692);
				expression();
				}
				}
				setState(3697);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AliasListContext extends ParserRuleContext {
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public AliasListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aliasList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAliasList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAliasList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAliasList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasListContext aliasList() throws RecognitionException {
		AliasListContext _localctx = new AliasListContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_aliasList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3698);
			id_();
			setState(3703);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3699);
				match(COMMA);
				setState(3700);
				id_();
				}
				}
				setState(3705);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode KW_FROM() { return getToken(HiveParser.KW_FROM, 0); }
		public FromSourceContext fromSource() {
			return getRuleContext(FromSourceContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_fromClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3706);
			match(KW_FROM);
			setState(3707);
			fromSource();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FromSourceContext extends ParserRuleContext {
		public UniqueJoinTokenContext uniqueJoinToken() {
			return getRuleContext(UniqueJoinTokenContext.class,0);
		}
		public List<UniqueJoinSourceContext> uniqueJoinSource() {
			return getRuleContexts(UniqueJoinSourceContext.class);
		}
		public UniqueJoinSourceContext uniqueJoinSource(int i) {
			return getRuleContext(UniqueJoinSourceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public JoinSourceContext joinSource() {
			return getRuleContext(JoinSourceContext.class,0);
		}
		public FromSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterFromSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitFromSource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitFromSource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromSourceContext fromSource() throws RecognitionException {
		FromSourceContext _localctx = new FromSourceContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_fromSource);
		int _la;
		try {
			setState(3718);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_UNIQUEJOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3709);
				uniqueJoinToken();
				setState(3710);
				uniqueJoinSource();
				setState(3713); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3711);
					match(COMMA);
					setState(3712);
					uniqueJoinSource();
					}
					}
					setState(3715); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				}
				break;
			case KW_ABORT:
			case KW_ACTIVATE:
			case KW_ACTIVE:
			case KW_ADD:
			case KW_ADMIN:
			case KW_AFTER:
			case KW_ALLOC_FRACTION:
			case KW_ANALYZE:
			case KW_ARCHIVE:
			case KW_ASC:
			case KW_AST:
			case KW_AT:
			case KW_AUTOCOMMIT:
			case KW_BATCH:
			case KW_BEFORE:
			case KW_BUCKET:
			case KW_BUCKETS:
			case KW_CACHE:
			case KW_CASCADE:
			case KW_CBO:
			case KW_CHANGE:
			case KW_CHECK:
			case KW_CLUSTER:
			case KW_CLUSTERED:
			case KW_CLUSTERSTATUS:
			case KW_COLLECTION:
			case KW_COLUMNS:
			case KW_COMMENT:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_COMPUTE:
			case KW_CONCATENATE:
			case KW_CONTINUE:
			case KW_COST:
			case KW_CRON:
			case KW_DATA:
			case KW_DATABASES:
			case KW_DATETIME:
			case KW_DAY:
			case KW_DAYOFWEEK:
			case KW_DBPROPERTIES:
			case KW_DCPROPERTIES:
			case KW_DEBUG:
			case KW_DEFAULT:
			case KW_DEFERRED:
			case KW_DEFINED:
			case KW_DELIMITED:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DETAIL:
			case KW_DIRECTORIES:
			case KW_DIRECTORY:
			case KW_DISABLE:
			case KW_DISTRIBUTE:
			case KW_DISTRIBUTED:
			case KW_DO:
			case KW_DOW:
			case KW_DUMP:
			case KW_ELEM_TYPE:
			case KW_ENABLE:
			case KW_ENFORCED:
			case KW_ESCAPED:
			case KW_EVERY:
			case KW_EXCLUSIVE:
			case KW_EXECUTE:
			case KW_EXECUTED:
			case KW_EXPIRE_SNAPSHOTS:
			case KW_EXPLAIN:
			case KW_EXPORT:
			case KW_EXPRESSION:
			case KW_FIELDS:
			case KW_FILE:
			case KW_FILEFORMAT:
			case KW_FIRST:
			case KW_FORMAT:
			case KW_FORMATTED:
			case KW_FUNCTIONS:
			case KW_HOLD_DDLTIME:
			case KW_HOUR:
			case KW_IDXPROPERTIES:
			case KW_IGNORE:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_INPATH:
			case KW_INPUTDRIVER:
			case KW_INPUTFORMAT:
			case KW_ISOLATION:
			case KW_ITEMS:
			case KW_JAR:
			case KW_JOINCOST:
			case KW_KEY:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LAST:
			case KW_LEVEL:
			case KW_LIMIT:
			case KW_LINES:
			case KW_LOAD:
			case KW_LOCATION:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_LONG:
			case KW_MANAGED:
			case KW_MANAGEDLOCATION:
			case KW_MANAGEMENT:
			case KW_MAPJOIN:
			case KW_MAPPING:
			case KW_MATCHED:
			case KW_MATERIALIZED:
			case KW_METADATA:
			case KW_MINUTE:
			case KW_MONTH:
			case KW_MOVE:
			case KW_MSCK:
			case KW_NORELY:
			case KW_NOSCAN:
			case KW_NOVALIDATE:
			case KW_NO_DROP:
			case KW_NULLS:
			case KW_OFFLINE:
			case KW_OFFSET:
			case KW_OPERATOR:
			case KW_OPTION:
			case KW_OUTPUTDRIVER:
			case KW_OUTPUTFORMAT:
			case KW_OVERWRITE:
			case KW_OWNER:
			case KW_PARTITIONED:
			case KW_PARTITIONS:
			case KW_PATH:
			case KW_PLAN:
			case KW_PLANS:
			case KW_PLUS:
			case KW_POOL:
			case KW_PRINCIPALS:
			case KW_PROTECTION:
			case KW_PURGE:
			case KW_QUARTER:
			case KW_QUERY:
			case KW_QUERY_PARALLELISM:
			case KW_READ:
			case KW_READONLY:
			case KW_REBUILD:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_RELOAD:
			case KW_RELY:
			case KW_REMOTE:
			case KW_RENAME:
			case KW_REOPTIMIZATION:
			case KW_REPAIR:
			case KW_REPL:
			case KW_REPLACE:
			case KW_REPLICATION:
			case KW_RESOURCE:
			case KW_RESPECT:
			case KW_RESTRICT:
			case KW_REWRITE:
			case KW_ROLE:
			case KW_ROLES:
			case KW_SCHEDULED:
			case KW_SCHEDULING_POLICY:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SECOND:
			case KW_SEMI:
			case KW_SERDE:
			case KW_SERDEPROPERTIES:
			case KW_SERVER:
			case KW_SETS:
			case KW_SET_CURRENT_SNAPSHOT:
			case KW_SHARED:
			case KW_SHOW:
			case KW_SHOW_DATABASE:
			case KW_SKEWED:
			case KW_SNAPSHOT:
			case KW_SORT:
			case KW_SORTED:
			case KW_SPEC:
			case KW_SSL:
			case KW_STATISTICS:
			case KW_STATUS:
			case KW_STORED:
			case KW_STREAMTABLE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_SUMMARY:
			case KW_SYSTEM_TIME:
			case KW_SYSTEM_VERSION:
			case KW_TABLE:
			case KW_TABLES:
			case KW_TBLPROPERTIES:
			case KW_TEMPORARY:
			case KW_TERMINATED:
			case KW_TIMESTAMPTZ:
			case KW_TINYINT:
			case KW_TOUCH:
			case KW_TRANSACTION:
			case KW_TRANSACTIONAL:
			case KW_TRANSACTIONS:
			case KW_TRIM:
			case KW_TYPE:
			case KW_UNARCHIVE:
			case KW_UNDO:
			case KW_UNIONTYPE:
			case KW_UNKNOWN:
			case KW_UNLOCK:
			case KW_UNMANAGED:
			case KW_UNSET:
			case KW_UNSIGNED:
			case KW_URI:
			case KW_URL:
			case KW_USE:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_VALIDATE:
			case KW_VALUE_TYPE:
			case KW_VECTORIZATION:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_WAIT:
			case KW_WEEK:
			case KW_WHILE:
			case KW_WITHIN:
			case KW_WORK:
			case KW_WORKLOAD:
			case KW_WRITE:
			case KW_YEAR:
			case KW_ZONE:
			case LPAREN:
			case Identifier:
				enterOuterAlt(_localctx, 2);
				{
				setState(3717);
				joinSource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AtomjoinSourceContext extends ParserRuleContext {
		public TableSourceContext tableSource() {
			return getRuleContext(TableSourceContext.class,0);
		}
		public List<LateralViewContext> lateralView() {
			return getRuleContexts(LateralViewContext.class);
		}
		public LateralViewContext lateralView(int i) {
			return getRuleContext(LateralViewContext.class,i);
		}
		public VirtualTableSourceContext virtualTableSource() {
			return getRuleContext(VirtualTableSourceContext.class,0);
		}
		public SubQuerySourceContext subQuerySource() {
			return getRuleContext(SubQuerySourceContext.class,0);
		}
		public PartitionedTableFunctionContext partitionedTableFunction() {
			return getRuleContext(PartitionedTableFunctionContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public JoinSourceContext joinSource() {
			return getRuleContext(JoinSourceContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public AtomjoinSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atomjoinSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAtomjoinSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAtomjoinSource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAtomjoinSource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AtomjoinSourceContext atomjoinSource() throws RecognitionException {
		AtomjoinSourceContext _localctx = new AtomjoinSourceContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_atomjoinSource);
		try {
			int _alt;
			setState(3752);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3720);
				tableSource();
				setState(3724);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,420,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3721);
						lateralView();
						}
						} 
					}
					setState(3726);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,420,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3727);
				virtualTableSource();
				setState(3731);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,421,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3728);
						lateralView();
						}
						} 
					}
					setState(3733);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,421,_ctx);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3734);
				subQuerySource();
				setState(3738);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,422,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3735);
						lateralView();
						}
						} 
					}
					setState(3740);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,422,_ctx);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3741);
				partitionedTableFunction();
				setState(3745);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,423,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3742);
						lateralView();
						}
						} 
					}
					setState(3747);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,423,_ctx);
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3748);
				match(LPAREN);
				setState(3749);
				joinSource();
				setState(3750);
				match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JoinSourceContext extends ParserRuleContext {
		public AtomjoinSourceContext atomjoinSource() {
			return getRuleContext(AtomjoinSourceContext.class,0);
		}
		public List<JoinTokenContext> joinToken() {
			return getRuleContexts(JoinTokenContext.class);
		}
		public JoinTokenContext joinToken(int i) {
			return getRuleContext(JoinTokenContext.class,i);
		}
		public List<JoinSourcePartContext> joinSourcePart() {
			return getRuleContexts(JoinSourcePartContext.class);
		}
		public JoinSourcePartContext joinSourcePart(int i) {
			return getRuleContext(JoinSourcePartContext.class,i);
		}
		public List<TerminalNode> KW_ON() { return getTokens(HiveParser.KW_ON); }
		public TerminalNode KW_ON(int i) {
			return getToken(HiveParser.KW_ON, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> KW_USING() { return getTokens(HiveParser.KW_USING); }
		public TerminalNode KW_USING(int i) {
			return getToken(HiveParser.KW_USING, i);
		}
		public List<ColumnParenthesesListContext> columnParenthesesList() {
			return getRuleContexts(ColumnParenthesesListContext.class);
		}
		public ColumnParenthesesListContext columnParenthesesList(int i) {
			return getRuleContext(ColumnParenthesesListContext.class,i);
		}
		public JoinSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterJoinSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitJoinSource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitJoinSource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinSourceContext joinSource() throws RecognitionException {
		JoinSourceContext _localctx = new JoinSourceContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_joinSource);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3754);
			atomjoinSource();
			setState(3765);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==KW_CROSS || ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & 275414843393L) != 0) || _la==KW_RIGHT || _la==COMMA) {
				{
				{
				setState(3755);
				joinToken();
				setState(3756);
				joinSourcePart();
				setState(3761);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_ON:
					{
					setState(3757);
					match(KW_ON);
					setState(3758);
					expression();
					}
					break;
				case KW_USING:
					{
					setState(3759);
					match(KW_USING);
					setState(3760);
					columnParenthesesList();
					}
					break;
				case EOF:
				case KW_CLUSTER:
				case KW_CROSS:
				case KW_DISTRIBUTE:
				case KW_EXCEPT:
				case KW_FULL:
				case KW_GROUP:
				case KW_HAVING:
				case KW_INNER:
				case KW_INSERT:
				case KW_INTERSECT:
				case KW_JOIN:
				case KW_LEFT:
				case KW_LIMIT:
				case KW_MAP:
				case KW_MINUS:
				case KW_ORDER:
				case KW_QUALIFY:
				case KW_REDUCE:
				case KW_RIGHT:
				case KW_SELECT:
				case KW_SORT:
				case KW_UNION:
				case KW_WHERE:
				case KW_WINDOW:
				case COMMA:
				case RPAREN:
					break;
				default:
					break;
				}
				}
				}
				setState(3767);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JoinSourcePartContext extends ParserRuleContext {
		public TableSourceContext tableSource() {
			return getRuleContext(TableSourceContext.class,0);
		}
		public VirtualTableSourceContext virtualTableSource() {
			return getRuleContext(VirtualTableSourceContext.class,0);
		}
		public SubQuerySourceContext subQuerySource() {
			return getRuleContext(SubQuerySourceContext.class,0);
		}
		public PartitionedTableFunctionContext partitionedTableFunction() {
			return getRuleContext(PartitionedTableFunctionContext.class,0);
		}
		public List<LateralViewContext> lateralView() {
			return getRuleContexts(LateralViewContext.class);
		}
		public LateralViewContext lateralView(int i) {
			return getRuleContext(LateralViewContext.class,i);
		}
		public JoinSourcePartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinSourcePart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterJoinSourcePart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitJoinSourcePart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitJoinSourcePart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinSourcePartContext joinSourcePart() throws RecognitionException {
		JoinSourcePartContext _localctx = new JoinSourcePartContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_joinSourcePart);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3772);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
			case 1:
				{
				setState(3768);
				tableSource();
				}
				break;
			case 2:
				{
				setState(3769);
				virtualTableSource();
				}
				break;
			case 3:
				{
				setState(3770);
				subQuerySource();
				}
				break;
			case 4:
				{
				setState(3771);
				partitionedTableFunction();
				}
				break;
			}
			setState(3777);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,428,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3774);
					lateralView();
					}
					} 
				}
				setState(3779);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,428,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UniqueJoinSourceContext extends ParserRuleContext {
		public UniqueJoinTableSourceContext uniqueJoinTableSource() {
			return getRuleContext(UniqueJoinTableSourceContext.class,0);
		}
		public UniqueJoinExprContext uniqueJoinExpr() {
			return getRuleContext(UniqueJoinExprContext.class,0);
		}
		public TerminalNode KW_PRESERVE() { return getToken(HiveParser.KW_PRESERVE, 0); }
		public UniqueJoinSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uniqueJoinSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterUniqueJoinSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitUniqueJoinSource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitUniqueJoinSource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UniqueJoinSourceContext uniqueJoinSource() throws RecognitionException {
		UniqueJoinSourceContext _localctx = new UniqueJoinSourceContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_uniqueJoinSource);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3781);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PRESERVE) {
				{
				setState(3780);
				match(KW_PRESERVE);
				}
			}

			setState(3783);
			uniqueJoinTableSource();
			setState(3784);
			uniqueJoinExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UniqueJoinExprContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public ExpressionListContext expressionList() {
			return getRuleContext(ExpressionListContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public UniqueJoinExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uniqueJoinExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterUniqueJoinExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitUniqueJoinExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitUniqueJoinExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UniqueJoinExprContext uniqueJoinExpr() throws RecognitionException {
		UniqueJoinExprContext _localctx = new UniqueJoinExprContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_uniqueJoinExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3786);
			match(LPAREN);
			setState(3787);
			expressionList();
			setState(3788);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UniqueJoinTokenContext extends ParserRuleContext {
		public TerminalNode KW_UNIQUEJOIN() { return getToken(HiveParser.KW_UNIQUEJOIN, 0); }
		public UniqueJoinTokenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uniqueJoinToken; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterUniqueJoinToken(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitUniqueJoinToken(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitUniqueJoinToken(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UniqueJoinTokenContext uniqueJoinToken() throws RecognitionException {
		UniqueJoinTokenContext _localctx = new UniqueJoinTokenContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_uniqueJoinToken);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3790);
			match(KW_UNIQUEJOIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JoinTokenContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(HiveParser.COMMA, 0); }
		public TerminalNode KW_JOIN() { return getToken(HiveParser.KW_JOIN, 0); }
		public TerminalNode KW_INNER() { return getToken(HiveParser.KW_INNER, 0); }
		public TerminalNode KW_CROSS() { return getToken(HiveParser.KW_CROSS, 0); }
		public TerminalNode KW_LEFT() { return getToken(HiveParser.KW_LEFT, 0); }
		public TerminalNode KW_RIGHT() { return getToken(HiveParser.KW_RIGHT, 0); }
		public TerminalNode KW_FULL() { return getToken(HiveParser.KW_FULL, 0); }
		public TerminalNode KW_OUTER() { return getToken(HiveParser.KW_OUTER, 0); }
		public TerminalNode KW_SEMI() { return getToken(HiveParser.KW_SEMI, 0); }
		public TerminalNode KW_ANTI() { return getToken(HiveParser.KW_ANTI, 0); }
		public JoinTokenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinToken; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterJoinToken(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitJoinToken(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitJoinToken(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinTokenContext joinToken() throws RecognitionException {
		JoinTokenContext _localctx = new JoinTokenContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_joinToken);
		int _la;
		try {
			setState(3806);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(3792);
				match(COMMA);
				}
				break;
			case KW_CROSS:
			case KW_FULL:
			case KW_INNER:
			case KW_JOIN:
			case KW_LEFT:
			case KW_RIGHT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3803);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_INNER:
					{
					setState(3793);
					match(KW_INNER);
					}
					break;
				case KW_CROSS:
					{
					setState(3794);
					match(KW_CROSS);
					}
					break;
				case KW_FULL:
				case KW_RIGHT:
					{
					setState(3795);
					_la = _input.LA(1);
					if ( !(_la==KW_FULL || _la==KW_RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3797);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_OUTER) {
						{
						setState(3796);
						match(KW_OUTER);
						}
					}

					}
					break;
				case KW_LEFT:
					{
					setState(3799);
					match(KW_LEFT);
					setState(3801);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_ANTI || _la==KW_OUTER || _la==KW_SEMI) {
						{
						setState(3800);
						_la = _input.LA(1);
						if ( !(_la==KW_ANTI || _la==KW_OUTER || _la==KW_SEMI) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				case KW_JOIN:
					break;
				default:
					break;
				}
				setState(3805);
				match(KW_JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LateralViewContext extends ParserRuleContext {
		public TerminalNode KW_LATERAL() { return getToken(HiveParser.KW_LATERAL, 0); }
		public TerminalNode KW_VIEW() { return getToken(HiveParser.KW_VIEW, 0); }
		public TerminalNode KW_OUTER() { return getToken(HiveParser.KW_OUTER, 0); }
		public Function_Context function_() {
			return getRuleContext(Function_Context.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public TerminalNode KW_TABLE() { return getToken(HiveParser.KW_TABLE, 0); }
		public List<TerminalNode> LPAREN() { return getTokens(HiveParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(HiveParser.LPAREN, i);
		}
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public List<TerminalNode> RPAREN() { return getTokens(HiveParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(HiveParser.RPAREN, i);
		}
		public LateralViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lateralView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterLateralView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitLateralView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitLateralView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LateralViewContext lateralView() throws RecognitionException {
		LateralViewContext _localctx = new LateralViewContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_lateralView);
		int _la;
		try {
			int _alt;
			setState(3865);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3808);
				match(KW_LATERAL);
				setState(3809);
				match(KW_VIEW);
				setState(3810);
				match(KW_OUTER);
				setState(3811);
				function_();
				setState(3812);
				tableAlias();
				setState(3822);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_AS) {
					{
					setState(3813);
					match(KW_AS);
					setState(3814);
					id_();
					setState(3819);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,434,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3815);
							match(COMMA);
							setState(3816);
							id_();
							}
							} 
						}
						setState(3821);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,434,_ctx);
					}
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3825);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3824);
					match(COMMA);
					}
				}

				setState(3827);
				match(KW_LATERAL);
				setState(3863);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_VIEW:
					{
					setState(3828);
					match(KW_VIEW);
					setState(3829);
					function_();
					setState(3830);
					tableAlias();
					setState(3840);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_AS) {
						{
						setState(3831);
						match(KW_AS);
						setState(3832);
						id_();
						setState(3837);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,437,_ctx);
						while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								setState(3833);
								match(COMMA);
								setState(3834);
								id_();
								}
								} 
							}
							setState(3839);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,437,_ctx);
						}
						}
					}

					}
					break;
				case KW_TABLE:
					{
					setState(3842);
					match(KW_TABLE);
					setState(3843);
					match(LPAREN);
					setState(3844);
					valuesClause();
					setState(3845);
					match(RPAREN);
					setState(3847);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_AS) {
						{
						setState(3846);
						match(KW_AS);
						}
					}

					setState(3849);
					tableAlias();
					setState(3861);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LPAREN) {
						{
						setState(3850);
						match(LPAREN);
						setState(3851);
						id_();
						setState(3856);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(3852);
							match(COMMA);
							setState(3853);
							id_();
							}
							}
							setState(3858);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(3859);
						match(RPAREN);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableAliasContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TableAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAliasContext tableAlias() throws RecognitionException {
		TableAliasContext _localctx = new TableAliasContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_tableAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3867);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableBucketSampleContext extends ParserRuleContext {
		public Token numerator;
		public Token denominator;
		public ExpressionContext expression;
		public List<ExpressionContext> expr = new ArrayList<ExpressionContext>();
		public TerminalNode KW_TABLESAMPLE() { return getToken(HiveParser.KW_TABLESAMPLE, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode KW_BUCKET() { return getToken(HiveParser.KW_BUCKET, 0); }
		public TerminalNode KW_OUT() { return getToken(HiveParser.KW_OUT, 0); }
		public TerminalNode KW_OF() { return getToken(HiveParser.KW_OF, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public List<TerminalNode> Number() { return getTokens(HiveParser.Number); }
		public TerminalNode Number(int i) {
			return getToken(HiveParser.Number, i);
		}
		public TerminalNode KW_ON() { return getToken(HiveParser.KW_ON, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public TableBucketSampleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableBucketSample; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableBucketSample(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableBucketSample(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableBucketSample(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableBucketSampleContext tableBucketSample() throws RecognitionException {
		TableBucketSampleContext _localctx = new TableBucketSampleContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_tableBucketSample);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3869);
			match(KW_TABLESAMPLE);
			setState(3870);
			match(LPAREN);
			setState(3871);
			match(KW_BUCKET);
			setState(3872);
			((TableBucketSampleContext)_localctx).numerator = match(Number);
			setState(3873);
			match(KW_OUT);
			setState(3874);
			match(KW_OF);
			setState(3875);
			((TableBucketSampleContext)_localctx).denominator = match(Number);
			setState(3885);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ON) {
				{
				setState(3876);
				match(KW_ON);
				setState(3877);
				((TableBucketSampleContext)_localctx).expression = expression();
				((TableBucketSampleContext)_localctx).expr.add(((TableBucketSampleContext)_localctx).expression);
				setState(3882);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3878);
					match(COMMA);
					setState(3879);
					((TableBucketSampleContext)_localctx).expression = expression();
					((TableBucketSampleContext)_localctx).expr.add(((TableBucketSampleContext)_localctx).expression);
					}
					}
					setState(3884);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3887);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SplitSampleContext extends ParserRuleContext {
		public TerminalNode KW_TABLESAMPLE() { return getToken(HiveParser.KW_TABLESAMPLE, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public TerminalNode Number() { return getToken(HiveParser.Number, 0); }
		public TerminalNode ByteLengthLiteral() { return getToken(HiveParser.ByteLengthLiteral, 0); }
		public TerminalNode KW_PERCENT() { return getToken(HiveParser.KW_PERCENT, 0); }
		public TerminalNode KW_ROWS() { return getToken(HiveParser.KW_ROWS, 0); }
		public SplitSampleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_splitSample; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSplitSample(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSplitSample(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSplitSample(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SplitSampleContext splitSample() throws RecognitionException {
		SplitSampleContext _localctx = new SplitSampleContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_splitSample);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3889);
			match(KW_TABLESAMPLE);
			setState(3890);
			match(LPAREN);
			setState(3894);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Number:
				{
				setState(3891);
				match(Number);
				setState(3892);
				_la = _input.LA(1);
				if ( !(_la==KW_PERCENT || _la==KW_ROWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ByteLengthLiteral:
				{
				setState(3893);
				match(ByteLengthLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3896);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableSampleContext extends ParserRuleContext {
		public TableBucketSampleContext tableBucketSample() {
			return getRuleContext(TableBucketSampleContext.class,0);
		}
		public SplitSampleContext splitSample() {
			return getRuleContext(SplitSampleContext.class,0);
		}
		public TableSampleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSample; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableSample(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableSample(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableSample(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSampleContext tableSample() throws RecognitionException {
		TableSampleContext _localctx = new TableSampleContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_tableSample);
		try {
			setState(3900);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3898);
				tableBucketSample();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3899);
				splitSample();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableSourceContext extends ParserRuleContext {
		public TableNameContext tabname;
		public TablePropertiesContext props;
		public TableSampleContext ts;
		public AsOfClauseContext asOf;
		public Id_Context alias;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TablePropertiesContext tableProperties() {
			return getRuleContext(TablePropertiesContext.class,0);
		}
		public TableSampleContext tableSample() {
			return getRuleContext(TableSampleContext.class,0);
		}
		public AsOfClauseContext asOfClause() {
			return getRuleContext(AsOfClauseContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public TableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableSource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableSource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceContext tableSource() throws RecognitionException {
		TableSourceContext _localctx = new TableSourceContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_tableSource);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3902);
			((TableSourceContext)_localctx).tabname = tableName();
			setState(3904);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(3903);
				((TableSourceContext)_localctx).props = tableProperties();
				}
			}

			setState(3907);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_TABLESAMPLE) {
				{
				setState(3906);
				((TableSourceContext)_localctx).ts = tableSample();
				}
			}

			setState(3910);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_FOR) {
				{
				setState(3909);
				((TableSourceContext)_localctx).asOf = asOfClause();
				}
			}

			setState(3916);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
			case 1:
				{
				setState(3913);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_AS) {
					{
					setState(3912);
					match(KW_AS);
					}
				}

				setState(3915);
				((TableSourceContext)_localctx).alias = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AsOfClauseContext extends ParserRuleContext {
		public ExpressionContext asOfTime;
		public Token asOfVersion;
		public List<TerminalNode> KW_FOR() { return getTokens(HiveParser.KW_FOR); }
		public TerminalNode KW_FOR(int i) {
			return getToken(HiveParser.KW_FOR, i);
		}
		public TerminalNode KW_SYSTEM_TIME() { return getToken(HiveParser.KW_SYSTEM_TIME, 0); }
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public TerminalNode KW_OF() { return getToken(HiveParser.KW_OF, 0); }
		public TerminalNode KW_SYSTEM_VERSION() { return getToken(HiveParser.KW_SYSTEM_VERSION, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode Number() { return getToken(HiveParser.Number, 0); }
		public AsOfClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asOfClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAsOfClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAsOfClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAsOfClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsOfClauseContext asOfClause() throws RecognitionException {
		AsOfClauseContext _localctx = new AsOfClauseContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_asOfClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3918);
			match(KW_FOR);
			setState(3928);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_SYSTEM_TIME:
				{
				setState(3919);
				match(KW_SYSTEM_TIME);
				setState(3920);
				match(KW_AS);
				setState(3921);
				match(KW_OF);
				setState(3922);
				((AsOfClauseContext)_localctx).asOfTime = expression();
				}
				break;
			case KW_FOR:
				{
				setState(3923);
				match(KW_FOR);
				setState(3924);
				match(KW_SYSTEM_VERSION);
				setState(3925);
				match(KW_AS);
				setState(3926);
				match(KW_OF);
				setState(3927);
				((AsOfClauseContext)_localctx).asOfVersion = match(Number);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UniqueJoinTableSourceContext extends ParserRuleContext {
		public TableNameContext tabname;
		public TableSampleContext ts;
		public Id_Context alias;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TableSampleContext tableSample() {
			return getRuleContext(TableSampleContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public UniqueJoinTableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uniqueJoinTableSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterUniqueJoinTableSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitUniqueJoinTableSource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitUniqueJoinTableSource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UniqueJoinTableSourceContext uniqueJoinTableSource() throws RecognitionException {
		UniqueJoinTableSourceContext _localctx = new UniqueJoinTableSourceContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_uniqueJoinTableSource);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3930);
			((UniqueJoinTableSourceContext)_localctx).tabname = tableName();
			setState(3932);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_TABLESAMPLE) {
				{
				setState(3931);
				((UniqueJoinTableSourceContext)_localctx).ts = tableSample();
				}
			}

			setState(3938);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 808078815591826814L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 1083038567331911621L) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 8916819943869537315L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & 4159991143015340909L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8484708576009596927L) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & 17776728909112555L) != 0) || _la==Identifier) {
				{
				setState(3935);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_AS) {
					{
					setState(3934);
					match(KW_AS);
					}
				}

				setState(3937);
				((UniqueJoinTableSourceContext)_localctx).alias = id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableNameContext extends ParserRuleContext {
		public Id_Context db;
		public Id_Context tab;
		public Id_Context meta;
		public List<TerminalNode> DOT() { return getTokens(HiveParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(HiveParser.DOT, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_tableName);
		try {
			setState(3948);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3940);
				((TableNameContext)_localctx).db = id_();
				setState(3941);
				match(DOT);
				setState(3942);
				((TableNameContext)_localctx).tab = id_();
				setState(3945);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
				case 1:
					{
					setState(3943);
					match(DOT);
					setState(3944);
					((TableNameContext)_localctx).meta = id_();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3947);
				((TableNameContext)_localctx).tab = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewNameContext extends ParserRuleContext {
		public Id_Context db;
		public Id_Context view;
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode DOT() { return getToken(HiveParser.DOT, 0); }
		public ViewNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterViewName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitViewName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitViewName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewNameContext viewName() throws RecognitionException {
		ViewNameContext _localctx = new ViewNameContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_viewName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3953);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
			case 1:
				{
				setState(3950);
				((ViewNameContext)_localctx).db = id_();
				setState(3951);
				match(DOT);
				}
				break;
			}
			setState(3955);
			((ViewNameContext)_localctx).view = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubQuerySourceContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public QueryStatementExpressionContext queryStatementExpression() {
			return getRuleContext(QueryStatementExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public SubQuerySourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subQuerySource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSubQuerySource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSubQuerySource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSubQuerySource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubQuerySourceContext subQuerySource() throws RecognitionException {
		SubQuerySourceContext _localctx = new SubQuerySourceContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_subQuerySource);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3957);
			match(LPAREN);
			setState(3958);
			queryStatementExpression();
			setState(3959);
			match(RPAREN);
			setState(3961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_AS) {
				{
				setState(3960);
				match(KW_AS);
				}
			}

			setState(3963);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitioningSpecContext extends ParserRuleContext {
		public PartitionByClauseContext partitionByClause() {
			return getRuleContext(PartitionByClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public DistributeByClauseContext distributeByClause() {
			return getRuleContext(DistributeByClauseContext.class,0);
		}
		public SortByClauseContext sortByClause() {
			return getRuleContext(SortByClauseContext.class,0);
		}
		public ClusterByClauseContext clusterByClause() {
			return getRuleContext(ClusterByClauseContext.class,0);
		}
		public PartitioningSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitioningSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPartitioningSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPartitioningSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPartitioningSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitioningSpecContext partitioningSpec() throws RecognitionException {
		PartitioningSpecContext _localctx = new PartitioningSpecContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_partitioningSpec);
		int _la;
		try {
			setState(3976);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_PARTITION:
				enterOuterAlt(_localctx, 1);
				{
				setState(3965);
				partitionByClause();
				setState(3967);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_ORDER) {
					{
					setState(3966);
					orderByClause();
					}
				}

				}
				break;
			case KW_ORDER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3969);
				orderByClause();
				}
				break;
			case KW_DISTRIBUTE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3970);
				distributeByClause();
				setState(3972);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_SORT) {
					{
					setState(3971);
					sortByClause();
					}
				}

				}
				break;
			case KW_SORT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3974);
				sortByClause();
				}
				break;
			case KW_CLUSTER:
				enterOuterAlt(_localctx, 5);
				{
				setState(3975);
				clusterByClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionTableFunctionSourceContext extends ParserRuleContext {
		public SubQuerySourceContext subQuerySource() {
			return getRuleContext(SubQuerySourceContext.class,0);
		}
		public TableSourceContext tableSource() {
			return getRuleContext(TableSourceContext.class,0);
		}
		public PartitionedTableFunctionContext partitionedTableFunction() {
			return getRuleContext(PartitionedTableFunctionContext.class,0);
		}
		public PartitionTableFunctionSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionTableFunctionSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPartitionTableFunctionSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPartitionTableFunctionSource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPartitionTableFunctionSource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionTableFunctionSourceContext partitionTableFunctionSource() throws RecognitionException {
		PartitionTableFunctionSourceContext _localctx = new PartitionTableFunctionSourceContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_partitionTableFunctionSource);
		try {
			setState(3981);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3978);
				subQuerySource();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3979);
				tableSource();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3980);
				partitionedTableFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionedTableFunctionContext extends ParserRuleContext {
		public Id_Context n;
		public PartitionTableFunctionSourceContext ptfsrc;
		public PartitioningSpecContext spec;
		public Id_Context alias;
		public List<TerminalNode> LPAREN() { return getTokens(HiveParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(HiveParser.LPAREN, i);
		}
		public TerminalNode KW_ON() { return getToken(HiveParser.KW_ON, 0); }
		public List<TerminalNode> RPAREN() { return getTokens(HiveParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(HiveParser.RPAREN, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public PartitionTableFunctionSourceContext partitionTableFunctionSource() {
			return getRuleContext(PartitionTableFunctionSourceContext.class,0);
		}
		public List<TerminalNode> Identifier() { return getTokens(HiveParser.Identifier); }
		public TerminalNode Identifier(int i) {
			return getToken(HiveParser.Identifier, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public PartitioningSpecContext partitioningSpec() {
			return getRuleContext(PartitioningSpecContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public PartitionedTableFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionedTableFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPartitionedTableFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPartitionedTableFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPartitionedTableFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionedTableFunctionContext partitionedTableFunction() throws RecognitionException {
		PartitionedTableFunctionContext _localctx = new PartitionedTableFunctionContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_partitionedTableFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3983);
			((PartitionedTableFunctionContext)_localctx).n = id_();
			setState(3984);
			match(LPAREN);
			setState(3985);
			match(KW_ON);
			setState(3986);
			((PartitionedTableFunctionContext)_localctx).ptfsrc = partitionTableFunctionSource();
			setState(3988);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_CLUSTER || _la==KW_DISTRIBUTE || _la==KW_ORDER || _la==KW_PARTITION || _la==KW_SORT) {
				{
				setState(3987);
				((PartitionedTableFunctionContext)_localctx).spec = partitioningSpec();
				}
			}

			setState(4005);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==Identifier) {
				{
				setState(3990);
				match(Identifier);
				setState(3991);
				match(LPAREN);
				setState(3992);
				expression();
				setState(3993);
				match(RPAREN);
				setState(4002);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3994);
					match(COMMA);
					setState(3995);
					match(Identifier);
					setState(3996);
					match(LPAREN);
					setState(3997);
					expression();
					setState(3998);
					match(RPAREN);
					}
					}
					setState(4004);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4007);
			match(RPAREN);
			setState(4009);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
			case 1:
				{
				setState(4008);
				((PartitionedTableFunctionContext)_localctx).alias = id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode KW_WHERE() { return getToken(HiveParser.KW_WHERE, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitWhereClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4011);
			match(KW_WHERE);
			setState(4012);
			searchCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SearchConditionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SearchConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSearchCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSearchCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSearchCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SearchConditionContext searchCondition() throws RecognitionException {
		SearchConditionContext _localctx = new SearchConditionContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_searchCondition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4014);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValuesSourceContext extends ParserRuleContext {
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public ValuesSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterValuesSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitValuesSource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitValuesSource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesSourceContext valuesSource() throws RecognitionException {
		ValuesSourceContext _localctx = new ValuesSourceContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_valuesSource);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4016);
			valuesClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValuesClauseContext extends ParserRuleContext {
		public TerminalNode KW_VALUES() { return getToken(HiveParser.KW_VALUES, 0); }
		public ValuesTableConstructorContext valuesTableConstructor() {
			return getRuleContext(ValuesTableConstructorContext.class,0);
		}
		public ValuesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterValuesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitValuesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitValuesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesClauseContext valuesClause() throws RecognitionException {
		ValuesClauseContext _localctx = new ValuesClauseContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_valuesClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4018);
			match(KW_VALUES);
			setState(4019);
			valuesTableConstructor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValuesTableConstructorContext extends ParserRuleContext {
		public List<ValueRowConstructorContext> valueRowConstructor() {
			return getRuleContexts(ValueRowConstructorContext.class);
		}
		public ValueRowConstructorContext valueRowConstructor(int i) {
			return getRuleContext(ValueRowConstructorContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public FirstValueRowConstructorContext firstValueRowConstructor() {
			return getRuleContext(FirstValueRowConstructorContext.class,0);
		}
		public ValuesTableConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesTableConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterValuesTableConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitValuesTableConstructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitValuesTableConstructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesTableConstructorContext valuesTableConstructor() throws RecognitionException {
		ValuesTableConstructorContext _localctx = new ValuesTableConstructorContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_valuesTableConstructor);
		int _la;
		try {
			setState(4037);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4021);
				valueRowConstructor();
				setState(4026);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4022);
					match(COMMA);
					setState(4023);
					valueRowConstructor();
					}
					}
					setState(4028);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4029);
				firstValueRowConstructor();
				setState(4034);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4030);
					match(COMMA);
					setState(4031);
					valueRowConstructor();
					}
					}
					setState(4036);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValueRowConstructorContext extends ParserRuleContext {
		public ExpressionsInParenthesisContext expressionsInParenthesis() {
			return getRuleContext(ExpressionsInParenthesisContext.class,0);
		}
		public ValueRowConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueRowConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterValueRowConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitValueRowConstructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitValueRowConstructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValueRowConstructorContext valueRowConstructor() throws RecognitionException {
		ValueRowConstructorContext _localctx = new ValueRowConstructorContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_valueRowConstructor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4039);
			expressionsInParenthesis();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FirstValueRowConstructorContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public FirstExpressionsWithAliasContext firstExpressionsWithAlias() {
			return getRuleContext(FirstExpressionsWithAliasContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public FirstValueRowConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_firstValueRowConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterFirstValueRowConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitFirstValueRowConstructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitFirstValueRowConstructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FirstValueRowConstructorContext firstValueRowConstructor() throws RecognitionException {
		FirstValueRowConstructorContext _localctx = new FirstValueRowConstructorContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_firstValueRowConstructor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4041);
			match(LPAREN);
			setState(4042);
			firstExpressionsWithAlias();
			setState(4043);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VirtualTableSourceContext extends ParserRuleContext {
		public TerminalNode KW_TABLE() { return getToken(HiveParser.KW_TABLE, 0); }
		public List<TerminalNode> LPAREN() { return getTokens(HiveParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(HiveParser.LPAREN, i);
		}
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public List<TerminalNode> RPAREN() { return getTokens(HiveParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(HiveParser.RPAREN, i);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public VirtualTableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_virtualTableSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterVirtualTableSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitVirtualTableSource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitVirtualTableSource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VirtualTableSourceContext virtualTableSource() throws RecognitionException {
		VirtualTableSourceContext _localctx = new VirtualTableSourceContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_virtualTableSource);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4045);
			match(KW_TABLE);
			setState(4046);
			match(LPAREN);
			setState(4047);
			valuesClause();
			setState(4048);
			match(RPAREN);
			setState(4050);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_AS) {
				{
				setState(4049);
				match(KW_AS);
				}
			}

			setState(4052);
			tableAlias();
			setState(4062);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(4053);
				match(LPAREN);
				setState(4054);
				id_();
				setState(4059);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4055);
					match(COMMA);
					setState(4056);
					id_();
					}
					}
					setState(4061);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4064);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectClauseContext extends ParserRuleContext {
		public TerminalNode KW_SELECT() { return getToken(HiveParser.KW_SELECT, 0); }
		public SelectListContext selectList() {
			return getRuleContext(SelectListContext.class,0);
		}
		public TerminalNode KW_TRANSFORM() { return getToken(HiveParser.KW_TRANSFORM, 0); }
		public SelectTrfmClauseContext selectTrfmClause() {
			return getRuleContext(SelectTrfmClauseContext.class,0);
		}
		public TerminalNode QUERY_HINT() { return getToken(HiveParser.QUERY_HINT, 0); }
		public All_distinctContext all_distinct() {
			return getRuleContext(All_distinctContext.class,0);
		}
		public TrfmClauseContext trfmClause() {
			return getRuleContext(TrfmClauseContext.class,0);
		}
		public SelectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSelectClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSelectClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSelectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectClauseContext selectClause() throws RecognitionException {
		SelectClauseContext _localctx = new SelectClauseContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_selectClause);
		int _la;
		try {
			setState(4079);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4066);
				match(KW_SELECT);
				setState(4068);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==QUERY_HINT) {
					{
					setState(4067);
					match(QUERY_HINT);
					}
				}

				setState(4076);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_ABORT:
				case KW_ACTIVATE:
				case KW_ACTIVE:
				case KW_ADD:
				case KW_ADMIN:
				case KW_AFTER:
				case KW_ALL:
				case KW_ALLOC_FRACTION:
				case KW_ANALYZE:
				case KW_ARCHIVE:
				case KW_ARRAY:
				case KW_ASC:
				case KW_AST:
				case KW_AT:
				case KW_AUTOCOMMIT:
				case KW_BATCH:
				case KW_BEFORE:
				case KW_BIGINT:
				case KW_BINARY:
				case KW_BOOLEAN:
				case KW_BUCKET:
				case KW_BUCKETS:
				case KW_CACHE:
				case KW_CASCADE:
				case KW_CASE:
				case KW_CAST:
				case KW_CBO:
				case KW_CHANGE:
				case KW_CHECK:
				case KW_CLUSTER:
				case KW_CLUSTERED:
				case KW_CLUSTERSTATUS:
				case KW_COLLECTION:
				case KW_COLUMNS:
				case KW_COMMENT:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_COMPUTE:
				case KW_CONCATENATE:
				case KW_CONTINUE:
				case KW_COST:
				case KW_CRON:
				case KW_CURRENT_DATE:
				case KW_CURRENT_TIMESTAMP:
				case KW_DATA:
				case KW_DATABASES:
				case KW_DATE:
				case KW_DATETIME:
				case KW_DAY:
				case KW_DAYOFWEEK:
				case KW_DBPROPERTIES:
				case KW_DCPROPERTIES:
				case KW_DEBUG:
				case KW_DEFAULT:
				case KW_DEFERRED:
				case KW_DEFINED:
				case KW_DELIMITED:
				case KW_DEPENDENCY:
				case KW_DESC:
				case KW_DETAIL:
				case KW_DIRECTORIES:
				case KW_DIRECTORY:
				case KW_DISABLE:
				case KW_DISTINCT:
				case KW_DISTRIBUTE:
				case KW_DISTRIBUTED:
				case KW_DO:
				case KW_DOUBLE:
				case KW_DOW:
				case KW_DUMP:
				case KW_ELEM_TYPE:
				case KW_ENABLE:
				case KW_ENFORCED:
				case KW_ESCAPED:
				case KW_EVERY:
				case KW_EXCLUSIVE:
				case KW_EXECUTE:
				case KW_EXECUTED:
				case KW_EXISTS:
				case KW_EXPIRE_SNAPSHOTS:
				case KW_EXPLAIN:
				case KW_EXPORT:
				case KW_EXPRESSION:
				case KW_EXTRACT:
				case KW_FALSE:
				case KW_FIELDS:
				case KW_FILE:
				case KW_FILEFORMAT:
				case KW_FIRST:
				case KW_FLOAT:
				case KW_FLOOR:
				case KW_FORMAT:
				case KW_FORMATTED:
				case KW_FUNCTIONS:
				case KW_GROUPING:
				case KW_HOLD_DDLTIME:
				case KW_HOUR:
				case KW_IDXPROPERTIES:
				case KW_IF:
				case KW_IGNORE:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_INPATH:
				case KW_INPUTDRIVER:
				case KW_INPUTFORMAT:
				case KW_INT:
				case KW_INTERVAL:
				case KW_ISOLATION:
				case KW_ITEMS:
				case KW_JAR:
				case KW_JOINCOST:
				case KW_KEY:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_KILL:
				case KW_LAST:
				case KW_LEVEL:
				case KW_LIMIT:
				case KW_LINES:
				case KW_LOAD:
				case KW_LOCATION:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_LOGICAL:
				case KW_LONG:
				case KW_MANAGED:
				case KW_MANAGEDLOCATION:
				case KW_MANAGEMENT:
				case KW_MAP:
				case KW_MAPJOIN:
				case KW_MAPPING:
				case KW_MATCHED:
				case KW_MATERIALIZED:
				case KW_METADATA:
				case KW_MINUTE:
				case KW_MONTH:
				case KW_MOVE:
				case KW_MSCK:
				case KW_NORELY:
				case KW_NOSCAN:
				case KW_NOT:
				case KW_NOVALIDATE:
				case KW_NO_DROP:
				case KW_NULL:
				case KW_NULLS:
				case KW_OFFLINE:
				case KW_OFFSET:
				case KW_OPERATOR:
				case KW_OPTION:
				case KW_OUTPUTDRIVER:
				case KW_OUTPUTFORMAT:
				case KW_OVERWRITE:
				case KW_OWNER:
				case KW_PARTITIONED:
				case KW_PARTITIONS:
				case KW_PATH:
				case KW_PLAN:
				case KW_PLANS:
				case KW_PLUS:
				case KW_POOL:
				case KW_PRINCIPALS:
				case KW_PROTECTION:
				case KW_PURGE:
				case KW_QUARTER:
				case KW_QUERY:
				case KW_QUERY_PARALLELISM:
				case KW_READ:
				case KW_READONLY:
				case KW_REAL:
				case KW_REBUILD:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_RELOAD:
				case KW_RELY:
				case KW_REMOTE:
				case KW_RENAME:
				case KW_REOPTIMIZATION:
				case KW_REPAIR:
				case KW_REPL:
				case KW_REPLACE:
				case KW_REPLICATION:
				case KW_RESOURCE:
				case KW_RESPECT:
				case KW_RESTRICT:
				case KW_REWRITE:
				case KW_ROLE:
				case KW_ROLES:
				case KW_SCHEDULED:
				case KW_SCHEDULING_POLICY:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SECOND:
				case KW_SEMI:
				case KW_SERDE:
				case KW_SERDEPROPERTIES:
				case KW_SERVER:
				case KW_SETS:
				case KW_SET_CURRENT_SNAPSHOT:
				case KW_SHARED:
				case KW_SHOW:
				case KW_SHOW_DATABASE:
				case KW_SKEWED:
				case KW_SMALLINT:
				case KW_SNAPSHOT:
				case KW_SORT:
				case KW_SORTED:
				case KW_SPEC:
				case KW_SSL:
				case KW_STATISTICS:
				case KW_STATUS:
				case KW_STORED:
				case KW_STREAMTABLE:
				case KW_STRING:
				case KW_STRUCT:
				case KW_SUMMARY:
				case KW_SYSTEM_TIME:
				case KW_SYSTEM_VERSION:
				case KW_TABLES:
				case KW_TBLPROPERTIES:
				case KW_TEMPORARY:
				case KW_TERMINATED:
				case KW_TIMESTAMP:
				case KW_TIMESTAMPLOCALTZ:
				case KW_TIMESTAMPTZ:
				case KW_TINYINT:
				case KW_TOUCH:
				case KW_TRANSACTION:
				case KW_TRANSACTIONAL:
				case KW_TRANSACTIONS:
				case KW_TRIM:
				case KW_TRUE:
				case KW_TYPE:
				case KW_UNARCHIVE:
				case KW_UNDO:
				case KW_UNIONTYPE:
				case KW_UNKNOWN:
				case KW_UNLOCK:
				case KW_UNMANAGED:
				case KW_UNSET:
				case KW_UNSIGNED:
				case KW_URI:
				case KW_URL:
				case KW_USE:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_VALIDATE:
				case KW_VALUE_TYPE:
				case KW_VECTORIZATION:
				case KW_VIEW:
				case KW_VIEWS:
				case KW_WAIT:
				case KW_WEEK:
				case KW_WHILE:
				case KW_WITHIN:
				case KW_WORK:
				case KW_WORKLOAD:
				case KW_WRITE:
				case KW_YEAR:
				case KW_ZONE:
				case LPAREN:
				case PLUS:
				case MINUS:
				case STAR:
				case TILDE:
				case QUESTION:
				case StringLiteral:
				case IntegralLiteral:
				case NumberLiteral:
				case Number:
				case Identifier:
				case CharSetName:
					{
					setState(4071);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_ALL || _la==KW_DISTINCT) {
						{
						setState(4070);
						all_distinct();
						}
					}

					setState(4073);
					selectList();
					}
					break;
				case KW_TRANSFORM:
					{
					setState(4074);
					match(KW_TRANSFORM);
					setState(4075);
					selectTrfmClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KW_MAP:
			case KW_REDUCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4078);
				trfmClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class All_distinctContext extends ParserRuleContext {
		public TerminalNode KW_ALL() { return getToken(HiveParser.KW_ALL, 0); }
		public TerminalNode KW_DISTINCT() { return getToken(HiveParser.KW_DISTINCT, 0); }
		public All_distinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_distinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAll_distinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAll_distinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAll_distinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_distinctContext all_distinct() throws RecognitionException {
		All_distinctContext _localctx = new All_distinctContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_all_distinct);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4081);
			_la = _input.LA(1);
			if ( !(_la==KW_ALL || _la==KW_DISTINCT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectListContext extends ParserRuleContext {
		public List<SelectItemContext> selectItem() {
			return getRuleContexts(SelectItemContext.class);
		}
		public SelectItemContext selectItem(int i) {
			return getRuleContext(SelectItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public SelectListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSelectList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSelectList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSelectList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectListContext selectList() throws RecognitionException {
		SelectListContext _localctx = new SelectListContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_selectList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4083);
			selectItem();
			setState(4088);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,479,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4084);
					match(COMMA);
					setState(4085);
					selectItem();
					}
					} 
				}
				setState(4090);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,479,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectTrfmClauseContext extends ParserRuleContext {
		public List<TerminalNode> LPAREN() { return getTokens(HiveParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(HiveParser.LPAREN, i);
		}
		public SelectExpressionListContext selectExpressionList() {
			return getRuleContext(SelectExpressionListContext.class,0);
		}
		public List<TerminalNode> RPAREN() { return getTokens(HiveParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(HiveParser.RPAREN, i);
		}
		public List<RowFormatContext> rowFormat() {
			return getRuleContexts(RowFormatContext.class);
		}
		public RowFormatContext rowFormat(int i) {
			return getRuleContext(RowFormatContext.class,i);
		}
		public RecordWriterContext recordWriter() {
			return getRuleContext(RecordWriterContext.class,0);
		}
		public TerminalNode KW_USING() { return getToken(HiveParser.KW_USING, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public RecordReaderContext recordReader() {
			return getRuleContext(RecordReaderContext.class,0);
		}
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public AliasListContext aliasList() {
			return getRuleContext(AliasListContext.class,0);
		}
		public ColumnNameTypeListContext columnNameTypeList() {
			return getRuleContext(ColumnNameTypeListContext.class,0);
		}
		public SelectTrfmClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectTrfmClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSelectTrfmClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSelectTrfmClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSelectTrfmClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectTrfmClauseContext selectTrfmClause() throws RecognitionException {
		SelectTrfmClauseContext _localctx = new SelectTrfmClauseContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_selectTrfmClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4091);
			match(LPAREN);
			setState(4092);
			selectExpressionList();
			setState(4093);
			match(RPAREN);
			setState(4094);
			rowFormat();
			setState(4095);
			recordWriter();
			setState(4096);
			match(KW_USING);
			setState(4097);
			match(StringLiteral);
			setState(4110);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_AS) {
				{
				setState(4098);
				match(KW_AS);
				setState(4108);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
				case 1:
					{
					setState(4099);
					match(LPAREN);
					setState(4102);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
					case 1:
						{
						setState(4100);
						aliasList();
						}
						break;
					case 2:
						{
						setState(4101);
						columnNameTypeList();
						}
						break;
					}
					setState(4104);
					match(RPAREN);
					}
					break;
				case 2:
					{
					setState(4106);
					aliasList();
					}
					break;
				case 3:
					{
					setState(4107);
					columnNameTypeList();
					}
					break;
				}
				}
			}

			setState(4112);
			rowFormat();
			setState(4113);
			recordReader();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectItemContext extends ParserRuleContext {
		public TableAllColumnsContext tableAllColumns() {
			return getRuleContext(TableAllColumnsContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public SelectItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSelectItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSelectItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSelectItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectItemContext selectItem() throws RecognitionException {
		SelectItemContext _localctx = new SelectItemContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_selectItem);
		int _la;
		try {
			setState(4135);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4115);
				tableAllColumns();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(4116);
				expression();
				setState(4133);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
				case 1:
					{
					setState(4118);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_AS) {
						{
						setState(4117);
						match(KW_AS);
						}
					}

					setState(4120);
					id_();
					}
					break;
				case 2:
					{
					setState(4121);
					match(KW_AS);
					setState(4122);
					match(LPAREN);
					setState(4123);
					id_();
					setState(4128);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4124);
						match(COMMA);
						setState(4125);
						id_();
						}
						}
						setState(4130);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4131);
					match(RPAREN);
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TrfmClauseContext extends ParserRuleContext {
		public SelectExpressionListContext selectExpressionList() {
			return getRuleContext(SelectExpressionListContext.class,0);
		}
		public List<RowFormatContext> rowFormat() {
			return getRuleContexts(RowFormatContext.class);
		}
		public RowFormatContext rowFormat(int i) {
			return getRuleContext(RowFormatContext.class,i);
		}
		public RecordWriterContext recordWriter() {
			return getRuleContext(RecordWriterContext.class,0);
		}
		public TerminalNode KW_USING() { return getToken(HiveParser.KW_USING, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public RecordReaderContext recordReader() {
			return getRuleContext(RecordReaderContext.class,0);
		}
		public TerminalNode KW_MAP() { return getToken(HiveParser.KW_MAP, 0); }
		public TerminalNode KW_REDUCE() { return getToken(HiveParser.KW_REDUCE, 0); }
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public AliasListContext aliasList() {
			return getRuleContext(AliasListContext.class,0);
		}
		public ColumnNameTypeListContext columnNameTypeList() {
			return getRuleContext(ColumnNameTypeListContext.class,0);
		}
		public TrfmClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trfmClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTrfmClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTrfmClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTrfmClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrfmClauseContext trfmClause() throws RecognitionException {
		TrfmClauseContext _localctx = new TrfmClauseContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_trfmClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4137);
			_la = _input.LA(1);
			if ( !(_la==KW_MAP || _la==KW_REDUCE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4138);
			selectExpressionList();
			setState(4139);
			rowFormat();
			setState(4140);
			recordWriter();
			setState(4141);
			match(KW_USING);
			setState(4142);
			match(StringLiteral);
			setState(4155);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_AS) {
				{
				setState(4143);
				match(KW_AS);
				setState(4153);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
				case 1:
					{
					setState(4144);
					match(LPAREN);
					setState(4147);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
					case 1:
						{
						setState(4145);
						aliasList();
						}
						break;
					case 2:
						{
						setState(4146);
						columnNameTypeList();
						}
						break;
					}
					setState(4149);
					match(RPAREN);
					}
					break;
				case 2:
					{
					setState(4151);
					aliasList();
					}
					break;
				case 3:
					{
					setState(4152);
					columnNameTypeList();
					}
					break;
				}
				}
			}

			setState(4157);
			rowFormat();
			setState(4158);
			recordReader();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectExpressionContext extends ParserRuleContext {
		public TableAllColumnsContext tableAllColumns() {
			return getRuleContext(TableAllColumnsContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SelectExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSelectExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSelectExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSelectExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectExpressionContext selectExpression() throws RecognitionException {
		SelectExpressionContext _localctx = new SelectExpressionContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_selectExpression);
		try {
			setState(4162);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4160);
				tableAllColumns();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4161);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectExpressionListContext extends ParserRuleContext {
		public List<SelectExpressionContext> selectExpression() {
			return getRuleContexts(SelectExpressionContext.class);
		}
		public SelectExpressionContext selectExpression(int i) {
			return getRuleContext(SelectExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public SelectExpressionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectExpressionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSelectExpressionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSelectExpressionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSelectExpressionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectExpressionListContext selectExpressionList() throws RecognitionException {
		SelectExpressionListContext _localctx = new SelectExpressionListContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_selectExpressionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4164);
			selectExpression();
			setState(4169);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4165);
				match(COMMA);
				setState(4166);
				selectExpression();
				}
				}
				setState(4171);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_clauseContext extends ParserRuleContext {
		public TerminalNode KW_WINDOW() { return getToken(HiveParser.KW_WINDOW, 0); }
		public List<Window_defnContext> window_defn() {
			return getRuleContexts(Window_defnContext.class);
		}
		public Window_defnContext window_defn(int i) {
			return getRuleContext(Window_defnContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterWindow_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitWindow_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitWindow_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_clauseContext window_clause() throws RecognitionException {
		Window_clauseContext _localctx = new Window_clauseContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_window_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4172);
			match(KW_WINDOW);
			setState(4173);
			window_defn();
			setState(4178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4174);
				match(COMMA);
				setState(4175);
				window_defn();
				}
				}
				setState(4180);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_defnContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public Window_defnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_defn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterWindow_defn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitWindow_defn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitWindow_defn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_defnContext window_defn() throws RecognitionException {
		Window_defnContext _localctx = new Window_defnContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_window_defn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4181);
			id_();
			setState(4182);
			match(KW_AS);
			setState(4183);
			window_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_specificationContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public PartitioningSpecContext partitioningSpec() {
			return getRuleContext(PartitioningSpecContext.class,0);
		}
		public Window_frameContext window_frame() {
			return getRuleContext(Window_frameContext.class,0);
		}
		public Window_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterWindow_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitWindow_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitWindow_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_specificationContext window_specification() throws RecognitionException {
		Window_specificationContext _localctx = new Window_specificationContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_window_specification);
		int _la;
		try {
			setState(4197);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_ABORT:
			case KW_ACTIVATE:
			case KW_ACTIVE:
			case KW_ADD:
			case KW_ADMIN:
			case KW_AFTER:
			case KW_ALLOC_FRACTION:
			case KW_ANALYZE:
			case KW_ARCHIVE:
			case KW_ASC:
			case KW_AST:
			case KW_AT:
			case KW_AUTOCOMMIT:
			case KW_BATCH:
			case KW_BEFORE:
			case KW_BUCKET:
			case KW_BUCKETS:
			case KW_CACHE:
			case KW_CASCADE:
			case KW_CBO:
			case KW_CHANGE:
			case KW_CHECK:
			case KW_CLUSTER:
			case KW_CLUSTERED:
			case KW_CLUSTERSTATUS:
			case KW_COLLECTION:
			case KW_COLUMNS:
			case KW_COMMENT:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_COMPUTE:
			case KW_CONCATENATE:
			case KW_CONTINUE:
			case KW_COST:
			case KW_CRON:
			case KW_DATA:
			case KW_DATABASES:
			case KW_DATETIME:
			case KW_DAY:
			case KW_DAYOFWEEK:
			case KW_DBPROPERTIES:
			case KW_DCPROPERTIES:
			case KW_DEBUG:
			case KW_DEFAULT:
			case KW_DEFERRED:
			case KW_DEFINED:
			case KW_DELIMITED:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DETAIL:
			case KW_DIRECTORIES:
			case KW_DIRECTORY:
			case KW_DISABLE:
			case KW_DISTRIBUTE:
			case KW_DISTRIBUTED:
			case KW_DO:
			case KW_DOW:
			case KW_DUMP:
			case KW_ELEM_TYPE:
			case KW_ENABLE:
			case KW_ENFORCED:
			case KW_ESCAPED:
			case KW_EVERY:
			case KW_EXCLUSIVE:
			case KW_EXECUTE:
			case KW_EXECUTED:
			case KW_EXPIRE_SNAPSHOTS:
			case KW_EXPLAIN:
			case KW_EXPORT:
			case KW_EXPRESSION:
			case KW_FIELDS:
			case KW_FILE:
			case KW_FILEFORMAT:
			case KW_FIRST:
			case KW_FORMAT:
			case KW_FORMATTED:
			case KW_FUNCTIONS:
			case KW_HOLD_DDLTIME:
			case KW_HOUR:
			case KW_IDXPROPERTIES:
			case KW_IGNORE:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_INPATH:
			case KW_INPUTDRIVER:
			case KW_INPUTFORMAT:
			case KW_ISOLATION:
			case KW_ITEMS:
			case KW_JAR:
			case KW_JOINCOST:
			case KW_KEY:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LAST:
			case KW_LEVEL:
			case KW_LIMIT:
			case KW_LINES:
			case KW_LOAD:
			case KW_LOCATION:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_LONG:
			case KW_MANAGED:
			case KW_MANAGEDLOCATION:
			case KW_MANAGEMENT:
			case KW_MAPJOIN:
			case KW_MAPPING:
			case KW_MATCHED:
			case KW_MATERIALIZED:
			case KW_METADATA:
			case KW_MINUTE:
			case KW_MONTH:
			case KW_MOVE:
			case KW_MSCK:
			case KW_NORELY:
			case KW_NOSCAN:
			case KW_NOVALIDATE:
			case KW_NO_DROP:
			case KW_NULLS:
			case KW_OFFLINE:
			case KW_OFFSET:
			case KW_OPERATOR:
			case KW_OPTION:
			case KW_OUTPUTDRIVER:
			case KW_OUTPUTFORMAT:
			case KW_OVERWRITE:
			case KW_OWNER:
			case KW_PARTITIONED:
			case KW_PARTITIONS:
			case KW_PATH:
			case KW_PLAN:
			case KW_PLANS:
			case KW_PLUS:
			case KW_POOL:
			case KW_PRINCIPALS:
			case KW_PROTECTION:
			case KW_PURGE:
			case KW_QUARTER:
			case KW_QUERY:
			case KW_QUERY_PARALLELISM:
			case KW_READ:
			case KW_READONLY:
			case KW_REBUILD:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_RELOAD:
			case KW_RELY:
			case KW_REMOTE:
			case KW_RENAME:
			case KW_REOPTIMIZATION:
			case KW_REPAIR:
			case KW_REPL:
			case KW_REPLACE:
			case KW_REPLICATION:
			case KW_RESOURCE:
			case KW_RESPECT:
			case KW_RESTRICT:
			case KW_REWRITE:
			case KW_ROLE:
			case KW_ROLES:
			case KW_SCHEDULED:
			case KW_SCHEDULING_POLICY:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SECOND:
			case KW_SEMI:
			case KW_SERDE:
			case KW_SERDEPROPERTIES:
			case KW_SERVER:
			case KW_SETS:
			case KW_SET_CURRENT_SNAPSHOT:
			case KW_SHARED:
			case KW_SHOW:
			case KW_SHOW_DATABASE:
			case KW_SKEWED:
			case KW_SNAPSHOT:
			case KW_SORT:
			case KW_SORTED:
			case KW_SPEC:
			case KW_SSL:
			case KW_STATISTICS:
			case KW_STATUS:
			case KW_STORED:
			case KW_STREAMTABLE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_SUMMARY:
			case KW_SYSTEM_TIME:
			case KW_SYSTEM_VERSION:
			case KW_TABLES:
			case KW_TBLPROPERTIES:
			case KW_TEMPORARY:
			case KW_TERMINATED:
			case KW_TIMESTAMPTZ:
			case KW_TINYINT:
			case KW_TOUCH:
			case KW_TRANSACTION:
			case KW_TRANSACTIONAL:
			case KW_TRANSACTIONS:
			case KW_TRIM:
			case KW_TYPE:
			case KW_UNARCHIVE:
			case KW_UNDO:
			case KW_UNIONTYPE:
			case KW_UNKNOWN:
			case KW_UNLOCK:
			case KW_UNMANAGED:
			case KW_UNSET:
			case KW_UNSIGNED:
			case KW_URI:
			case KW_URL:
			case KW_USE:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_VALIDATE:
			case KW_VALUE_TYPE:
			case KW_VECTORIZATION:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_WAIT:
			case KW_WEEK:
			case KW_WHILE:
			case KW_WITHIN:
			case KW_WORK:
			case KW_WORKLOAD:
			case KW_WRITE:
			case KW_YEAR:
			case KW_ZONE:
			case Identifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(4185);
				id_();
				}
				break;
			case LPAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(4186);
				match(LPAREN);
				setState(4188);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
				case 1:
					{
					setState(4187);
					id_();
					}
					break;
				}
				setState(4191);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_CLUSTER || _la==KW_DISTRIBUTE || _la==KW_ORDER || _la==KW_PARTITION || _la==KW_SORT) {
					{
					setState(4190);
					partitioningSpec();
					}
				}

				setState(4194);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_RANGE || _la==KW_ROWS) {
					{
					setState(4193);
					window_frame();
					}
				}

				setState(4196);
				match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_frameContext extends ParserRuleContext {
		public Window_range_expressionContext window_range_expression() {
			return getRuleContext(Window_range_expressionContext.class,0);
		}
		public Window_value_expressionContext window_value_expression() {
			return getRuleContext(Window_value_expressionContext.class,0);
		}
		public Window_frameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterWindow_frame(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitWindow_frame(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitWindow_frame(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frameContext window_frame() throws RecognitionException {
		Window_frameContext _localctx = new Window_frameContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_window_frame);
		try {
			setState(4201);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_ROWS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4199);
				window_range_expression();
				}
				break;
			case KW_RANGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4200);
				window_value_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_range_expressionContext extends ParserRuleContext {
		public TerminalNode KW_ROWS() { return getToken(HiveParser.KW_ROWS, 0); }
		public Window_frame_start_boundaryContext window_frame_start_boundary() {
			return getRuleContext(Window_frame_start_boundaryContext.class,0);
		}
		public TerminalNode KW_BETWEEN() { return getToken(HiveParser.KW_BETWEEN, 0); }
		public List<Window_frame_boundaryContext> window_frame_boundary() {
			return getRuleContexts(Window_frame_boundaryContext.class);
		}
		public Window_frame_boundaryContext window_frame_boundary(int i) {
			return getRuleContext(Window_frame_boundaryContext.class,i);
		}
		public TerminalNode KW_AND() { return getToken(HiveParser.KW_AND, 0); }
		public Window_range_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_range_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterWindow_range_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitWindow_range_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitWindow_range_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_range_expressionContext window_range_expression() throws RecognitionException {
		Window_range_expressionContext _localctx = new Window_range_expressionContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_window_range_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4203);
			match(KW_ROWS);
			setState(4210);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_CURRENT:
			case KW_UNBOUNDED:
			case Number:
				{
				setState(4204);
				window_frame_start_boundary();
				}
				break;
			case KW_BETWEEN:
				{
				setState(4205);
				match(KW_BETWEEN);
				setState(4206);
				window_frame_boundary();
				setState(4207);
				match(KW_AND);
				setState(4208);
				window_frame_boundary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_value_expressionContext extends ParserRuleContext {
		public TerminalNode KW_RANGE() { return getToken(HiveParser.KW_RANGE, 0); }
		public Window_frame_start_boundaryContext window_frame_start_boundary() {
			return getRuleContext(Window_frame_start_boundaryContext.class,0);
		}
		public TerminalNode KW_BETWEEN() { return getToken(HiveParser.KW_BETWEEN, 0); }
		public List<Window_frame_boundaryContext> window_frame_boundary() {
			return getRuleContexts(Window_frame_boundaryContext.class);
		}
		public Window_frame_boundaryContext window_frame_boundary(int i) {
			return getRuleContext(Window_frame_boundaryContext.class,i);
		}
		public TerminalNode KW_AND() { return getToken(HiveParser.KW_AND, 0); }
		public Window_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterWindow_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitWindow_value_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitWindow_value_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_value_expressionContext window_value_expression() throws RecognitionException {
		Window_value_expressionContext _localctx = new Window_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_window_value_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4212);
			match(KW_RANGE);
			setState(4219);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_CURRENT:
			case KW_UNBOUNDED:
			case Number:
				{
				setState(4213);
				window_frame_start_boundary();
				}
				break;
			case KW_BETWEEN:
				{
				setState(4214);
				match(KW_BETWEEN);
				setState(4215);
				window_frame_boundary();
				setState(4216);
				match(KW_AND);
				setState(4217);
				window_frame_boundary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_frame_start_boundaryContext extends ParserRuleContext {
		public TerminalNode KW_UNBOUNDED() { return getToken(HiveParser.KW_UNBOUNDED, 0); }
		public TerminalNode KW_PRECEDING() { return getToken(HiveParser.KW_PRECEDING, 0); }
		public TerminalNode KW_CURRENT() { return getToken(HiveParser.KW_CURRENT, 0); }
		public TerminalNode KW_ROW() { return getToken(HiveParser.KW_ROW, 0); }
		public TerminalNode Number() { return getToken(HiveParser.Number, 0); }
		public Window_frame_start_boundaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_start_boundary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterWindow_frame_start_boundary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitWindow_frame_start_boundary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitWindow_frame_start_boundary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_start_boundaryContext window_frame_start_boundary() throws RecognitionException {
		Window_frame_start_boundaryContext _localctx = new Window_frame_start_boundaryContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_window_frame_start_boundary);
		try {
			setState(4227);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(4221);
				match(KW_UNBOUNDED);
				setState(4222);
				match(KW_PRECEDING);
				}
				break;
			case KW_CURRENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4223);
				match(KW_CURRENT);
				setState(4224);
				match(KW_ROW);
				}
				break;
			case Number:
				enterOuterAlt(_localctx, 3);
				{
				setState(4225);
				match(Number);
				setState(4226);
				match(KW_PRECEDING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_frame_boundaryContext extends ParserRuleContext {
		public TerminalNode KW_UNBOUNDED() { return getToken(HiveParser.KW_UNBOUNDED, 0); }
		public TerminalNode Number() { return getToken(HiveParser.Number, 0); }
		public TerminalNode KW_PRECEDING() { return getToken(HiveParser.KW_PRECEDING, 0); }
		public TerminalNode KW_FOLLOWING() { return getToken(HiveParser.KW_FOLLOWING, 0); }
		public TerminalNode KW_CURRENT() { return getToken(HiveParser.KW_CURRENT, 0); }
		public TerminalNode KW_ROW() { return getToken(HiveParser.KW_ROW, 0); }
		public Window_frame_boundaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_boundary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterWindow_frame_boundary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitWindow_frame_boundary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitWindow_frame_boundary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_boundaryContext window_frame_boundary() throws RecognitionException {
		Window_frame_boundaryContext _localctx = new Window_frame_boundaryContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_window_frame_boundary);
		int _la;
		try {
			setState(4233);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_UNBOUNDED:
			case Number:
				enterOuterAlt(_localctx, 1);
				{
				setState(4229);
				_la = _input.LA(1);
				if ( !(_la==KW_UNBOUNDED || _la==Number) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4230);
				_la = _input.LA(1);
				if ( !(_la==KW_FOLLOWING || _la==KW_PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case KW_CURRENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4231);
				match(KW_CURRENT);
				setState(4232);
				match(KW_ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode KW_GROUP() { return getToken(HiveParser.KW_GROUP, 0); }
		public TerminalNode KW_BY() { return getToken(HiveParser.KW_BY, 0); }
		public Groupby_expressionContext groupby_expression() {
			return getRuleContext(Groupby_expressionContext.class,0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitGroupByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_groupByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4235);
			match(KW_GROUP);
			setState(4236);
			match(KW_BY);
			setState(4237);
			groupby_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Groupby_expressionContext extends ParserRuleContext {
		public RollupStandardContext rollupStandard() {
			return getRuleContext(RollupStandardContext.class,0);
		}
		public RollupOldSyntaxContext rollupOldSyntax() {
			return getRuleContext(RollupOldSyntaxContext.class,0);
		}
		public GroupByEmptyContext groupByEmpty() {
			return getRuleContext(GroupByEmptyContext.class,0);
		}
		public Groupby_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupby_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterGroupby_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitGroupby_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitGroupby_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Groupby_expressionContext groupby_expression() throws RecognitionException {
		Groupby_expressionContext _localctx = new Groupby_expressionContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_groupby_expression);
		try {
			setState(4242);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4239);
				rollupStandard();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4240);
				rollupOldSyntax();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4241);
				groupByEmpty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupByEmptyContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public GroupByEmptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByEmpty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterGroupByEmpty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitGroupByEmpty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitGroupByEmpty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByEmptyContext groupByEmpty() throws RecognitionException {
		GroupByEmptyContext _localctx = new GroupByEmptyContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_groupByEmpty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4244);
			match(LPAREN);
			setState(4245);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RollupStandardContext extends ParserRuleContext {
		public Token rollup;
		public Token cube;
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public TerminalNode KW_ROLLUP() { return getToken(HiveParser.KW_ROLLUP, 0); }
		public TerminalNode KW_CUBE() { return getToken(HiveParser.KW_CUBE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public RollupStandardContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollupStandard; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterRollupStandard(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitRollupStandard(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitRollupStandard(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollupStandardContext rollupStandard() throws RecognitionException {
		RollupStandardContext _localctx = new RollupStandardContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_rollupStandard);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4249);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_ROLLUP:
				{
				setState(4247);
				((RollupStandardContext)_localctx).rollup = match(KW_ROLLUP);
				}
				break;
			case KW_CUBE:
				{
				setState(4248);
				((RollupStandardContext)_localctx).cube = match(KW_CUBE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4251);
			match(LPAREN);
			setState(4252);
			expression();
			setState(4257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4253);
				match(COMMA);
				setState(4254);
				expression();
				}
				}
				setState(4259);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4260);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RollupOldSyntaxContext extends ParserRuleContext {
		public ExpressionsNotInParenthesisContext expr;
		public Token rollup;
		public Token cube;
		public Token sets;
		public ExpressionsNotInParenthesisContext expressionsNotInParenthesis() {
			return getRuleContext(ExpressionsNotInParenthesisContext.class,0);
		}
		public TerminalNode KW_ROLLUP() { return getToken(HiveParser.KW_ROLLUP, 0); }
		public TerminalNode KW_CUBE() { return getToken(HiveParser.KW_CUBE, 0); }
		public TerminalNode KW_SETS() { return getToken(HiveParser.KW_SETS, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public List<GroupingSetExpressionContext> groupingSetExpression() {
			return getRuleContexts(GroupingSetExpressionContext.class);
		}
		public GroupingSetExpressionContext groupingSetExpression(int i) {
			return getRuleContext(GroupingSetExpressionContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public TerminalNode KW_WITH() { return getToken(HiveParser.KW_WITH, 0); }
		public TerminalNode KW_GROUPING() { return getToken(HiveParser.KW_GROUPING, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public RollupOldSyntaxContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollupOldSyntax; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterRollupOldSyntax(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitRollupOldSyntax(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitRollupOldSyntax(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollupOldSyntaxContext rollupOldSyntax() throws RecognitionException {
		RollupOldSyntaxContext _localctx = new RollupOldSyntaxContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_rollupOldSyntax);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4262);
			((RollupOldSyntaxContext)_localctx).expr = expressionsNotInParenthesis();
			setState(4267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
			case 1:
				{
				setState(4263);
				((RollupOldSyntaxContext)_localctx).rollup = match(KW_WITH);
				setState(4264);
				match(KW_ROLLUP);
				}
				break;
			case 2:
				{
				setState(4265);
				((RollupOldSyntaxContext)_localctx).cube = match(KW_WITH);
				setState(4266);
				match(KW_CUBE);
				}
				break;
			}
			setState(4282);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_GROUPING) {
				{
				setState(4269);
				((RollupOldSyntaxContext)_localctx).sets = match(KW_GROUPING);
				setState(4270);
				match(KW_SETS);
				setState(4271);
				match(LPAREN);
				setState(4272);
				groupingSetExpression();
				setState(4277);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4273);
					match(COMMA);
					setState(4274);
					groupingSetExpression();
					}
					}
					setState(4279);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4280);
				match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupingSetExpressionContext extends ParserRuleContext {
		public GroupingSetExpressionMultipleContext groupingSetExpressionMultiple() {
			return getRuleContext(GroupingSetExpressionMultipleContext.class,0);
		}
		public GroupingExpressionSingleContext groupingExpressionSingle() {
			return getRuleContext(GroupingExpressionSingleContext.class,0);
		}
		public GroupingSetExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSetExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterGroupingSetExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitGroupingSetExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitGroupingSetExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingSetExpressionContext groupingSetExpression() throws RecognitionException {
		GroupingSetExpressionContext _localctx = new GroupingSetExpressionContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_groupingSetExpression);
		try {
			setState(4286);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4284);
				groupingSetExpressionMultiple();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4285);
				groupingExpressionSingle();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupingSetExpressionMultipleContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public GroupingSetExpressionMultipleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSetExpressionMultiple; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterGroupingSetExpressionMultiple(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitGroupingSetExpressionMultiple(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitGroupingSetExpressionMultiple(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingSetExpressionMultipleContext groupingSetExpressionMultiple() throws RecognitionException {
		GroupingSetExpressionMultipleContext _localctx = new GroupingSetExpressionMultipleContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_groupingSetExpressionMultiple);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4288);
			match(LPAREN);
			setState(4290);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8415293117714037378L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -171163878771171435L) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 9205050320105143587L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & 4448221519167061869L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8484709125765410815L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & 1224028420243305391L) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & 971843L) != 0)) {
				{
				setState(4289);
				expression();
				}
			}

			setState(4296);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4292);
				match(COMMA);
				setState(4293);
				expression();
				}
				}
				setState(4298);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4299);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupingExpressionSingleContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public GroupingExpressionSingleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingExpressionSingle; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterGroupingExpressionSingle(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitGroupingExpressionSingle(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitGroupingExpressionSingle(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingExpressionSingleContext groupingExpressionSingle() throws RecognitionException {
		GroupingExpressionSingleContext _localctx = new GroupingExpressionSingleContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_groupingExpressionSingle);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4301);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode KW_HAVING() { return getToken(HiveParser.KW_HAVING, 0); }
		public HavingConditionContext havingCondition() {
			return getRuleContext(HavingConditionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4303);
			match(KW_HAVING);
			setState(4304);
			havingCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QualifyClauseContext extends ParserRuleContext {
		public TerminalNode KW_QUALIFY() { return getToken(HiveParser.KW_QUALIFY, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public QualifyClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifyClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterQualifyClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitQualifyClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitQualifyClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifyClauseContext qualifyClause() throws RecognitionException {
		QualifyClauseContext _localctx = new QualifyClauseContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_qualifyClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4306);
			match(KW_QUALIFY);
			setState(4307);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HavingConditionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HavingConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterHavingCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitHavingCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitHavingCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingConditionContext havingCondition() throws RecognitionException {
		HavingConditionContext _localctx = new HavingConditionContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_havingCondition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4309);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionsInParenthesisContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public ExpressionsNotInParenthesisContext expressionsNotInParenthesis() {
			return getRuleContext(ExpressionsNotInParenthesisContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public ExpressionsInParenthesisContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionsInParenthesis; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterExpressionsInParenthesis(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitExpressionsInParenthesis(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitExpressionsInParenthesis(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsInParenthesisContext expressionsInParenthesis() throws RecognitionException {
		ExpressionsInParenthesisContext _localctx = new ExpressionsInParenthesisContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_expressionsInParenthesis);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4311);
			match(LPAREN);
			setState(4312);
			expressionsNotInParenthesis();
			setState(4313);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionsNotInParenthesisContext extends ParserRuleContext {
		public ExpressionOrDefaultContext first;
		public ExpressionPartContext more;
		public ExpressionOrDefaultContext expressionOrDefault() {
			return getRuleContext(ExpressionOrDefaultContext.class,0);
		}
		public ExpressionPartContext expressionPart() {
			return getRuleContext(ExpressionPartContext.class,0);
		}
		public ExpressionsNotInParenthesisContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionsNotInParenthesis; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterExpressionsNotInParenthesis(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitExpressionsNotInParenthesis(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitExpressionsNotInParenthesis(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsNotInParenthesisContext expressionsNotInParenthesis() throws RecognitionException {
		ExpressionsNotInParenthesisContext _localctx = new ExpressionsNotInParenthesisContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_expressionsNotInParenthesis);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4315);
			((ExpressionsNotInParenthesisContext)_localctx).first = expressionOrDefault();
			setState(4317);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4316);
				((ExpressionsNotInParenthesisContext)_localctx).more = expressionPart();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionPartContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public List<ExpressionOrDefaultContext> expressionOrDefault() {
			return getRuleContexts(ExpressionOrDefaultContext.class);
		}
		public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return getRuleContext(ExpressionOrDefaultContext.class,i);
		}
		public ExpressionPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionPart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterExpressionPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitExpressionPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitExpressionPart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionPartContext expressionPart() throws RecognitionException {
		ExpressionPartContext _localctx = new ExpressionPartContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_expressionPart);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4321); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4319);
				match(COMMA);
				setState(4320);
				expressionOrDefault();
				}
				}
				setState(4323); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMMA );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionOrDefaultContext extends ParserRuleContext {
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionOrDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterExpressionOrDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitExpressionOrDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitExpressionOrDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionOrDefaultContext expressionOrDefault() throws RecognitionException {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_expressionOrDefault);
		try {
			setState(4327);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4325);
				defaultValue();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4326);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FirstExpressionsWithAliasContext extends ParserRuleContext {
		public ExpressionContext first;
		public Id_Context colAlias;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public List<ExpressionWithAliasContext> expressionWithAlias() {
			return getRuleContexts(ExpressionWithAliasContext.class);
		}
		public ExpressionWithAliasContext expressionWithAlias(int i) {
			return getRuleContext(ExpressionWithAliasContext.class,i);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public FirstExpressionsWithAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_firstExpressionsWithAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterFirstExpressionsWithAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitFirstExpressionsWithAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitFirstExpressionsWithAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FirstExpressionsWithAliasContext firstExpressionsWithAlias() throws RecognitionException {
		FirstExpressionsWithAliasContext _localctx = new FirstExpressionsWithAliasContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_firstExpressionsWithAlias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4329);
			((FirstExpressionsWithAliasContext)_localctx).first = expression();
			setState(4331);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_AS) {
				{
				setState(4330);
				match(KW_AS);
				}
			}

			setState(4334);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 808078815591695742L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 1083038567331911621L) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 8916819943869537315L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & 4159991143015340909L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8484708576009596927L) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & 17776728909112555L) != 0) || _la==Identifier) {
				{
				setState(4333);
				((FirstExpressionsWithAliasContext)_localctx).colAlias = id_();
				}
			}

			setState(4340);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4336);
				match(COMMA);
				setState(4337);
				expressionWithAlias();
				}
				}
				setState(4342);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionWithAliasContext extends ParserRuleContext {
		public Id_Context alias;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public ExpressionWithAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionWithAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterExpressionWithAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitExpressionWithAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitExpressionWithAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionWithAliasContext expressionWithAlias() throws RecognitionException {
		ExpressionWithAliasContext _localctx = new ExpressionWithAliasContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_expressionWithAlias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4343);
			expression();
			setState(4345);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_AS) {
				{
				setState(4344);
				match(KW_AS);
				}
			}

			setState(4348);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 808078815591695742L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 1083038567331911621L) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 8916819943869537315L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & 4159991143015340909L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8484708576009596927L) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & 17776728909112555L) != 0) || _la==Identifier) {
				{
				setState(4347);
				((ExpressionWithAliasContext)_localctx).alias = id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionsContext extends ParserRuleContext {
		public ExpressionsInParenthesisContext expressionsInParenthesis() {
			return getRuleContext(ExpressionsInParenthesisContext.class,0);
		}
		public ExpressionsNotInParenthesisContext expressionsNotInParenthesis() {
			return getRuleContext(ExpressionsNotInParenthesisContext.class,0);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_expressions);
		try {
			setState(4352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4350);
				expressionsInParenthesis();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4351);
				expressionsNotInParenthesis();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnRefOrderInParenthesisContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public List<ColumnRefOrderContext> columnRefOrder() {
			return getRuleContexts(ColumnRefOrderContext.class);
		}
		public ColumnRefOrderContext columnRefOrder(int i) {
			return getRuleContext(ColumnRefOrderContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public ColumnRefOrderInParenthesisContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnRefOrderInParenthesis; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColumnRefOrderInParenthesis(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColumnRefOrderInParenthesis(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColumnRefOrderInParenthesis(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnRefOrderInParenthesisContext columnRefOrderInParenthesis() throws RecognitionException {
		ColumnRefOrderInParenthesisContext _localctx = new ColumnRefOrderInParenthesisContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_columnRefOrderInParenthesis);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4354);
			match(LPAREN);
			setState(4355);
			columnRefOrder();
			setState(4360);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4356);
				match(COMMA);
				setState(4357);
				columnRefOrder();
				}
				}
				setState(4362);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4363);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnRefOrderNotInParenthesisContext extends ParserRuleContext {
		public List<ColumnRefOrderContext> columnRefOrder() {
			return getRuleContexts(ColumnRefOrderContext.class);
		}
		public ColumnRefOrderContext columnRefOrder(int i) {
			return getRuleContext(ColumnRefOrderContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public ColumnRefOrderNotInParenthesisContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnRefOrderNotInParenthesis; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterColumnRefOrderNotInParenthesis(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitColumnRefOrderNotInParenthesis(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitColumnRefOrderNotInParenthesis(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnRefOrderNotInParenthesisContext columnRefOrderNotInParenthesis() throws RecognitionException {
		ColumnRefOrderNotInParenthesisContext _localctx = new ColumnRefOrderNotInParenthesisContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_columnRefOrderNotInParenthesis);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4365);
			columnRefOrder();
			setState(4370);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4366);
				match(COMMA);
				setState(4367);
				columnRefOrder();
				}
				}
				setState(4372);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode KW_ORDER() { return getToken(HiveParser.KW_ORDER, 0); }
		public TerminalNode KW_BY() { return getToken(HiveParser.KW_BY, 0); }
		public List<ColumnRefOrderContext> columnRefOrder() {
			return getRuleContexts(ColumnRefOrderContext.class);
		}
		public ColumnRefOrderContext columnRefOrder(int i) {
			return getRuleContext(ColumnRefOrderContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitOrderByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4373);
			match(KW_ORDER);
			setState(4374);
			match(KW_BY);
			setState(4375);
			columnRefOrder();
			setState(4380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4376);
				match(COMMA);
				setState(4377);
				columnRefOrder();
				}
				}
				setState(4382);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ClusterByClauseContext extends ParserRuleContext {
		public TerminalNode KW_CLUSTER() { return getToken(HiveParser.KW_CLUSTER, 0); }
		public TerminalNode KW_BY() { return getToken(HiveParser.KW_BY, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public ClusterByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterClusterByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitClusterByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitClusterByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterByClauseContext clusterByClause() throws RecognitionException {
		ClusterByClauseContext _localctx = new ClusterByClauseContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_clusterByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4383);
			match(KW_CLUSTER);
			setState(4384);
			match(KW_BY);
			setState(4385);
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionByClauseContext extends ParserRuleContext {
		public TerminalNode KW_PARTITION() { return getToken(HiveParser.KW_PARTITION, 0); }
		public TerminalNode KW_BY() { return getToken(HiveParser.KW_BY, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public PartitionByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPartitionByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPartitionByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPartitionByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionByClauseContext partitionByClause() throws RecognitionException {
		PartitionByClauseContext _localctx = new PartitionByClauseContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_partitionByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4387);
			match(KW_PARTITION);
			setState(4388);
			match(KW_BY);
			setState(4389);
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DistributeByClauseContext extends ParserRuleContext {
		public TerminalNode KW_DISTRIBUTE() { return getToken(HiveParser.KW_DISTRIBUTE, 0); }
		public TerminalNode KW_BY() { return getToken(HiveParser.KW_BY, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public DistributeByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distributeByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDistributeByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDistributeByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDistributeByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistributeByClauseContext distributeByClause() throws RecognitionException {
		DistributeByClauseContext _localctx = new DistributeByClauseContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_distributeByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4391);
			match(KW_DISTRIBUTE);
			setState(4392);
			match(KW_BY);
			setState(4393);
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SortByClauseContext extends ParserRuleContext {
		public TerminalNode KW_SORT() { return getToken(HiveParser.KW_SORT, 0); }
		public TerminalNode KW_BY() { return getToken(HiveParser.KW_BY, 0); }
		public ColumnRefOrderInParenthesisContext columnRefOrderInParenthesis() {
			return getRuleContext(ColumnRefOrderInParenthesisContext.class,0);
		}
		public ColumnRefOrderNotInParenthesisContext columnRefOrderNotInParenthesis() {
			return getRuleContext(ColumnRefOrderNotInParenthesisContext.class,0);
		}
		public SortByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSortByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSortByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSortByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortByClauseContext sortByClause() throws RecognitionException {
		SortByClauseContext _localctx = new SortByClauseContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_sortByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4395);
			match(KW_SORT);
			setState(4396);
			match(KW_BY);
			setState(4399);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
			case 1:
				{
				setState(4397);
				columnRefOrderInParenthesis();
				}
				break;
			case 2:
				{
				setState(4398);
				columnRefOrderNotInParenthesis();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TrimFunctionContext extends ParserRuleContext {
		public Token leading;
		public Token trailing;
		public SelectExpressionContext trim_characters;
		public SelectExpressionContext str;
		public TerminalNode KW_TRIM() { return getToken(HiveParser.KW_TRIM, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode KW_FROM() { return getToken(HiveParser.KW_FROM, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public List<SelectExpressionContext> selectExpression() {
			return getRuleContexts(SelectExpressionContext.class);
		}
		public SelectExpressionContext selectExpression(int i) {
			return getRuleContext(SelectExpressionContext.class,i);
		}
		public TerminalNode KW_BOTH() { return getToken(HiveParser.KW_BOTH, 0); }
		public TerminalNode KW_LEADING() { return getToken(HiveParser.KW_LEADING, 0); }
		public TerminalNode KW_TRAILING() { return getToken(HiveParser.KW_TRAILING, 0); }
		public TrimFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTrimFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTrimFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTrimFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrimFunctionContext trimFunction() throws RecognitionException {
		TrimFunctionContext _localctx = new TrimFunctionContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_trimFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4401);
			match(KW_TRIM);
			setState(4402);
			match(LPAREN);
			setState(4406);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_LEADING:
				{
				setState(4403);
				((TrimFunctionContext)_localctx).leading = match(KW_LEADING);
				}
				break;
			case KW_TRAILING:
				{
				setState(4404);
				((TrimFunctionContext)_localctx).trailing = match(KW_TRAILING);
				}
				break;
			case KW_BOTH:
				{
				setState(4405);
				match(KW_BOTH);
				}
				break;
			case KW_ABORT:
			case KW_ACTIVATE:
			case KW_ACTIVE:
			case KW_ADD:
			case KW_ADMIN:
			case KW_AFTER:
			case KW_ALLOC_FRACTION:
			case KW_ANALYZE:
			case KW_ARCHIVE:
			case KW_ARRAY:
			case KW_ASC:
			case KW_AST:
			case KW_AT:
			case KW_AUTOCOMMIT:
			case KW_BATCH:
			case KW_BEFORE:
			case KW_BIGINT:
			case KW_BINARY:
			case KW_BOOLEAN:
			case KW_BUCKET:
			case KW_BUCKETS:
			case KW_CACHE:
			case KW_CASCADE:
			case KW_CASE:
			case KW_CAST:
			case KW_CBO:
			case KW_CHANGE:
			case KW_CHECK:
			case KW_CLUSTER:
			case KW_CLUSTERED:
			case KW_CLUSTERSTATUS:
			case KW_COLLECTION:
			case KW_COLUMNS:
			case KW_COMMENT:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_COMPUTE:
			case KW_CONCATENATE:
			case KW_CONTINUE:
			case KW_COST:
			case KW_CRON:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_DATA:
			case KW_DATABASES:
			case KW_DATE:
			case KW_DATETIME:
			case KW_DAY:
			case KW_DAYOFWEEK:
			case KW_DBPROPERTIES:
			case KW_DCPROPERTIES:
			case KW_DEBUG:
			case KW_DEFAULT:
			case KW_DEFERRED:
			case KW_DEFINED:
			case KW_DELIMITED:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DETAIL:
			case KW_DIRECTORIES:
			case KW_DIRECTORY:
			case KW_DISABLE:
			case KW_DISTRIBUTE:
			case KW_DISTRIBUTED:
			case KW_DO:
			case KW_DOUBLE:
			case KW_DOW:
			case KW_DUMP:
			case KW_ELEM_TYPE:
			case KW_ENABLE:
			case KW_ENFORCED:
			case KW_ESCAPED:
			case KW_EVERY:
			case KW_EXCLUSIVE:
			case KW_EXECUTE:
			case KW_EXECUTED:
			case KW_EXISTS:
			case KW_EXPIRE_SNAPSHOTS:
			case KW_EXPLAIN:
			case KW_EXPORT:
			case KW_EXPRESSION:
			case KW_EXTRACT:
			case KW_FALSE:
			case KW_FIELDS:
			case KW_FILE:
			case KW_FILEFORMAT:
			case KW_FIRST:
			case KW_FLOAT:
			case KW_FLOOR:
			case KW_FORMAT:
			case KW_FORMATTED:
			case KW_FROM:
			case KW_FUNCTIONS:
			case KW_GROUPING:
			case KW_HOLD_DDLTIME:
			case KW_HOUR:
			case KW_IDXPROPERTIES:
			case KW_IF:
			case KW_IGNORE:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_INPATH:
			case KW_INPUTDRIVER:
			case KW_INPUTFORMAT:
			case KW_INT:
			case KW_INTERVAL:
			case KW_ISOLATION:
			case KW_ITEMS:
			case KW_JAR:
			case KW_JOINCOST:
			case KW_KEY:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LAST:
			case KW_LEVEL:
			case KW_LIMIT:
			case KW_LINES:
			case KW_LOAD:
			case KW_LOCATION:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_LONG:
			case KW_MANAGED:
			case KW_MANAGEDLOCATION:
			case KW_MANAGEMENT:
			case KW_MAP:
			case KW_MAPJOIN:
			case KW_MAPPING:
			case KW_MATCHED:
			case KW_MATERIALIZED:
			case KW_METADATA:
			case KW_MINUTE:
			case KW_MONTH:
			case KW_MOVE:
			case KW_MSCK:
			case KW_NORELY:
			case KW_NOSCAN:
			case KW_NOT:
			case KW_NOVALIDATE:
			case KW_NO_DROP:
			case KW_NULL:
			case KW_NULLS:
			case KW_OFFLINE:
			case KW_OFFSET:
			case KW_OPERATOR:
			case KW_OPTION:
			case KW_OUTPUTDRIVER:
			case KW_OUTPUTFORMAT:
			case KW_OVERWRITE:
			case KW_OWNER:
			case KW_PARTITIONED:
			case KW_PARTITIONS:
			case KW_PATH:
			case KW_PLAN:
			case KW_PLANS:
			case KW_PLUS:
			case KW_POOL:
			case KW_PRINCIPALS:
			case KW_PROTECTION:
			case KW_PURGE:
			case KW_QUARTER:
			case KW_QUERY:
			case KW_QUERY_PARALLELISM:
			case KW_READ:
			case KW_READONLY:
			case KW_REAL:
			case KW_REBUILD:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_RELOAD:
			case KW_RELY:
			case KW_REMOTE:
			case KW_RENAME:
			case KW_REOPTIMIZATION:
			case KW_REPAIR:
			case KW_REPL:
			case KW_REPLACE:
			case KW_REPLICATION:
			case KW_RESOURCE:
			case KW_RESPECT:
			case KW_RESTRICT:
			case KW_REWRITE:
			case KW_ROLE:
			case KW_ROLES:
			case KW_SCHEDULED:
			case KW_SCHEDULING_POLICY:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SECOND:
			case KW_SEMI:
			case KW_SERDE:
			case KW_SERDEPROPERTIES:
			case KW_SERVER:
			case KW_SETS:
			case KW_SET_CURRENT_SNAPSHOT:
			case KW_SHARED:
			case KW_SHOW:
			case KW_SHOW_DATABASE:
			case KW_SKEWED:
			case KW_SMALLINT:
			case KW_SNAPSHOT:
			case KW_SORT:
			case KW_SORTED:
			case KW_SPEC:
			case KW_SSL:
			case KW_STATISTICS:
			case KW_STATUS:
			case KW_STORED:
			case KW_STREAMTABLE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_SUMMARY:
			case KW_SYSTEM_TIME:
			case KW_SYSTEM_VERSION:
			case KW_TABLES:
			case KW_TBLPROPERTIES:
			case KW_TEMPORARY:
			case KW_TERMINATED:
			case KW_TIMESTAMP:
			case KW_TIMESTAMPLOCALTZ:
			case KW_TIMESTAMPTZ:
			case KW_TINYINT:
			case KW_TOUCH:
			case KW_TRANSACTION:
			case KW_TRANSACTIONAL:
			case KW_TRANSACTIONS:
			case KW_TRIM:
			case KW_TRUE:
			case KW_TYPE:
			case KW_UNARCHIVE:
			case KW_UNDO:
			case KW_UNIONTYPE:
			case KW_UNKNOWN:
			case KW_UNLOCK:
			case KW_UNMANAGED:
			case KW_UNSET:
			case KW_UNSIGNED:
			case KW_URI:
			case KW_URL:
			case KW_USE:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_VALIDATE:
			case KW_VALUE_TYPE:
			case KW_VECTORIZATION:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_WAIT:
			case KW_WEEK:
			case KW_WHILE:
			case KW_WITHIN:
			case KW_WORK:
			case KW_WORKLOAD:
			case KW_WRITE:
			case KW_YEAR:
			case KW_ZONE:
			case LPAREN:
			case PLUS:
			case MINUS:
			case STAR:
			case TILDE:
			case QUESTION:
			case StringLiteral:
			case IntegralLiteral:
			case NumberLiteral:
			case Number:
			case Identifier:
			case CharSetName:
				break;
			default:
				break;
			}
			setState(4409);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8415293117714037378L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -171163878771171435L) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 9205050320105143587L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & 4448221519167061869L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8484709125765410815L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & 1224028420243305391L) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & 971847L) != 0)) {
				{
				setState(4408);
				((TrimFunctionContext)_localctx).trim_characters = selectExpression();
				}
			}

			setState(4411);
			match(KW_FROM);
			setState(4412);
			((TrimFunctionContext)_localctx).str = selectExpression();
			setState(4413);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_Context extends ParserRuleContext {
		public Token star;
		public All_distinctContext dist;
		public Token within;
		public OrderByClauseContext ordBy;
		public Null_treatmentContext nt;
		public Window_specificationContext ws;
		public TrimFunctionContext trimFunction() {
			return getRuleContext(TrimFunctionContext.class,0);
		}
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public List<TerminalNode> LPAREN() { return getTokens(HiveParser.LPAREN); }
		public TerminalNode LPAREN(int i) {
			return getToken(HiveParser.LPAREN, i);
		}
		public List<TerminalNode> RPAREN() { return getTokens(HiveParser.RPAREN); }
		public TerminalNode RPAREN(int i) {
			return getToken(HiveParser.RPAREN, i);
		}
		public TerminalNode KW_GROUP() { return getToken(HiveParser.KW_GROUP, 0); }
		public TerminalNode KW_OVER() { return getToken(HiveParser.KW_OVER, 0); }
		public TerminalNode STAR() { return getToken(HiveParser.STAR, 0); }
		public TerminalNode KW_WITHIN() { return getToken(HiveParser.KW_WITHIN, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public Null_treatmentContext null_treatment() {
			return getRuleContext(Null_treatmentContext.class,0);
		}
		public List<SelectExpressionContext> selectExpression() {
			return getRuleContexts(SelectExpressionContext.class);
		}
		public SelectExpressionContext selectExpression(int i) {
			return getRuleContext(SelectExpressionContext.class,i);
		}
		public All_distinctContext all_distinct() {
			return getRuleContext(All_distinctContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public Function_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterFunction_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitFunction_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitFunction_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_Context function_() throws RecognitionException {
		Function_Context _localctx = new Function_Context(_ctx, getState());
		enterRule(_localctx, 752, RULE_function_);
		int _la;
		try {
			setState(4455);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4415);
				trimFunction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4416);
				functionName();
				setState(4417);
				match(LPAREN);
				setState(4432);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,529,_ctx) ) {
				case 1:
					{
					setState(4418);
					((Function_Context)_localctx).star = match(STAR);
					}
					break;
				case 2:
					{
					setState(4420);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_ALL || _la==KW_DISTINCT) {
						{
						setState(4419);
						((Function_Context)_localctx).dist = all_distinct();
						}
					}

					setState(4430);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
					case 1:
						{
						setState(4422);
						selectExpression();
						setState(4427);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(4423);
							match(COMMA);
							setState(4424);
							selectExpression();
							}
							}
							setState(4429);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					}
					}
					break;
				}
				setState(4453);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
				case 1:
					{
					setState(4434);
					match(RPAREN);
					setState(4435);
					((Function_Context)_localctx).within = match(KW_WITHIN);
					setState(4436);
					match(KW_GROUP);
					setState(4437);
					match(LPAREN);
					setState(4438);
					((Function_Context)_localctx).ordBy = orderByClause();
					setState(4439);
					match(RPAREN);
					}
					break;
				case 2:
					{
					setState(4441);
					match(RPAREN);
					setState(4443);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KW_IGNORE || _la==KW_RESPECT) {
						{
						setState(4442);
						((Function_Context)_localctx).nt = null_treatment();
						}
					}

					setState(4445);
					match(KW_OVER);
					setState(4446);
					((Function_Context)_localctx).ws = window_specification();
					}
					break;
				case 3:
					{
					setState(4447);
					((Function_Context)_localctx).nt = null_treatment();
					setState(4448);
					match(RPAREN);
					setState(4449);
					match(KW_OVER);
					setState(4450);
					((Function_Context)_localctx).ws = window_specification();
					}
					break;
				case 4:
					{
					setState(4452);
					match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Null_treatmentContext extends ParserRuleContext {
		public TerminalNode KW_RESPECT() { return getToken(HiveParser.KW_RESPECT, 0); }
		public TerminalNode KW_NULLS() { return getToken(HiveParser.KW_NULLS, 0); }
		public TerminalNode KW_IGNORE() { return getToken(HiveParser.KW_IGNORE, 0); }
		public Null_treatmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_treatment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterNull_treatment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitNull_treatment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitNull_treatment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_treatmentContext null_treatment() throws RecognitionException {
		Null_treatmentContext _localctx = new Null_treatmentContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_null_treatment);
		try {
			setState(4461);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_RESPECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4457);
				match(KW_RESPECT);
				setState(4458);
				match(KW_NULLS);
				}
				break;
			case KW_IGNORE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4459);
				match(KW_IGNORE);
				setState(4460);
				match(KW_NULLS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionNameContext extends ParserRuleContext {
		public FunctionIdentifierContext functionIdentifier() {
			return getRuleContext(FunctionIdentifierContext.class,0);
		}
		public Sql11ReservedKeywordsUsedAsFunctionNameContext sql11ReservedKeywordsUsedAsFunctionName() {
			return getRuleContext(Sql11ReservedKeywordsUsedAsFunctionNameContext.class,0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameContext functionName() throws RecognitionException {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_functionName);
		try {
			setState(4465);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_ABORT:
			case KW_ACTIVATE:
			case KW_ACTIVE:
			case KW_ADD:
			case KW_ADMIN:
			case KW_AFTER:
			case KW_ALLOC_FRACTION:
			case KW_ANALYZE:
			case KW_ARCHIVE:
			case KW_ASC:
			case KW_AST:
			case KW_AT:
			case KW_AUTOCOMMIT:
			case KW_BATCH:
			case KW_BEFORE:
			case KW_BUCKET:
			case KW_BUCKETS:
			case KW_CACHE:
			case KW_CASCADE:
			case KW_CBO:
			case KW_CHANGE:
			case KW_CHECK:
			case KW_CLUSTER:
			case KW_CLUSTERED:
			case KW_CLUSTERSTATUS:
			case KW_COLLECTION:
			case KW_COLUMNS:
			case KW_COMMENT:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_COMPUTE:
			case KW_CONCATENATE:
			case KW_CONTINUE:
			case KW_COST:
			case KW_CRON:
			case KW_DATA:
			case KW_DATABASES:
			case KW_DATETIME:
			case KW_DAY:
			case KW_DAYOFWEEK:
			case KW_DBPROPERTIES:
			case KW_DCPROPERTIES:
			case KW_DEBUG:
			case KW_DEFAULT:
			case KW_DEFERRED:
			case KW_DEFINED:
			case KW_DELIMITED:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DETAIL:
			case KW_DIRECTORIES:
			case KW_DIRECTORY:
			case KW_DISABLE:
			case KW_DISTRIBUTE:
			case KW_DISTRIBUTED:
			case KW_DO:
			case KW_DOW:
			case KW_DUMP:
			case KW_ELEM_TYPE:
			case KW_ENABLE:
			case KW_ENFORCED:
			case KW_ESCAPED:
			case KW_EVERY:
			case KW_EXCLUSIVE:
			case KW_EXECUTE:
			case KW_EXECUTED:
			case KW_EXPIRE_SNAPSHOTS:
			case KW_EXPLAIN:
			case KW_EXPORT:
			case KW_EXPRESSION:
			case KW_FIELDS:
			case KW_FILE:
			case KW_FILEFORMAT:
			case KW_FIRST:
			case KW_FORMAT:
			case KW_FORMATTED:
			case KW_FUNCTIONS:
			case KW_HOLD_DDLTIME:
			case KW_HOUR:
			case KW_IDXPROPERTIES:
			case KW_IGNORE:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_INPATH:
			case KW_INPUTDRIVER:
			case KW_INPUTFORMAT:
			case KW_ISOLATION:
			case KW_ITEMS:
			case KW_JAR:
			case KW_JOINCOST:
			case KW_KEY:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LAST:
			case KW_LEVEL:
			case KW_LIMIT:
			case KW_LINES:
			case KW_LOAD:
			case KW_LOCATION:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_LONG:
			case KW_MANAGED:
			case KW_MANAGEDLOCATION:
			case KW_MANAGEMENT:
			case KW_MAPJOIN:
			case KW_MAPPING:
			case KW_MATCHED:
			case KW_MATERIALIZED:
			case KW_METADATA:
			case KW_MINUTE:
			case KW_MONTH:
			case KW_MOVE:
			case KW_MSCK:
			case KW_NORELY:
			case KW_NOSCAN:
			case KW_NOVALIDATE:
			case KW_NO_DROP:
			case KW_NULLS:
			case KW_OFFLINE:
			case KW_OFFSET:
			case KW_OPERATOR:
			case KW_OPTION:
			case KW_OUTPUTDRIVER:
			case KW_OUTPUTFORMAT:
			case KW_OVERWRITE:
			case KW_OWNER:
			case KW_PARTITIONED:
			case KW_PARTITIONS:
			case KW_PATH:
			case KW_PLAN:
			case KW_PLANS:
			case KW_PLUS:
			case KW_POOL:
			case KW_PRINCIPALS:
			case KW_PROTECTION:
			case KW_PURGE:
			case KW_QUARTER:
			case KW_QUERY:
			case KW_QUERY_PARALLELISM:
			case KW_READ:
			case KW_READONLY:
			case KW_REBUILD:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_RELOAD:
			case KW_RELY:
			case KW_REMOTE:
			case KW_RENAME:
			case KW_REOPTIMIZATION:
			case KW_REPAIR:
			case KW_REPL:
			case KW_REPLACE:
			case KW_REPLICATION:
			case KW_RESOURCE:
			case KW_RESPECT:
			case KW_RESTRICT:
			case KW_REWRITE:
			case KW_ROLE:
			case KW_ROLES:
			case KW_SCHEDULED:
			case KW_SCHEDULING_POLICY:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SECOND:
			case KW_SEMI:
			case KW_SERDE:
			case KW_SERDEPROPERTIES:
			case KW_SERVER:
			case KW_SETS:
			case KW_SET_CURRENT_SNAPSHOT:
			case KW_SHARED:
			case KW_SHOW:
			case KW_SHOW_DATABASE:
			case KW_SKEWED:
			case KW_SNAPSHOT:
			case KW_SORT:
			case KW_SORTED:
			case KW_SPEC:
			case KW_SSL:
			case KW_STATISTICS:
			case KW_STATUS:
			case KW_STORED:
			case KW_STREAMTABLE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_SUMMARY:
			case KW_SYSTEM_TIME:
			case KW_SYSTEM_VERSION:
			case KW_TABLES:
			case KW_TBLPROPERTIES:
			case KW_TEMPORARY:
			case KW_TERMINATED:
			case KW_TIMESTAMPTZ:
			case KW_TINYINT:
			case KW_TOUCH:
			case KW_TRANSACTION:
			case KW_TRANSACTIONAL:
			case KW_TRANSACTIONS:
			case KW_TRIM:
			case KW_TYPE:
			case KW_UNARCHIVE:
			case KW_UNDO:
			case KW_UNIONTYPE:
			case KW_UNKNOWN:
			case KW_UNLOCK:
			case KW_UNMANAGED:
			case KW_UNSET:
			case KW_UNSIGNED:
			case KW_URI:
			case KW_URL:
			case KW_USE:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_VALIDATE:
			case KW_VALUE_TYPE:
			case KW_VECTORIZATION:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_WAIT:
			case KW_WEEK:
			case KW_WHILE:
			case KW_WITHIN:
			case KW_WORK:
			case KW_WORKLOAD:
			case KW_WRITE:
			case KW_YEAR:
			case KW_ZONE:
			case Identifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(4463);
				functionIdentifier();
				}
				break;
			case KW_ARRAY:
			case KW_BIGINT:
			case KW_BINARY:
			case KW_BOOLEAN:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_DATE:
			case KW_DOUBLE:
			case KW_FLOAT:
			case KW_GROUPING:
			case KW_IF:
			case KW_INT:
			case KW_MAP:
			case KW_REAL:
			case KW_SMALLINT:
			case KW_TIMESTAMP:
				enterOuterAlt(_localctx, 2);
				{
				setState(4464);
				sql11ReservedKeywordsUsedAsFunctionName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CastExpressionContext extends ParserRuleContext {
		public PrimitiveTypeContext toType;
		public Token fmt;
		public TerminalNode KW_CAST() { return getToken(HiveParser.KW_CAST, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode KW_AS() { return getToken(HiveParser.KW_AS, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public PrimitiveTypeContext primitiveType() {
			return getRuleContext(PrimitiveTypeContext.class,0);
		}
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TerminalNode KW_FORMAT() { return getToken(HiveParser.KW_FORMAT, 0); }
		public CastExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCastExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCastExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCastExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastExpressionContext castExpression() throws RecognitionException {
		CastExpressionContext _localctx = new CastExpressionContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_castExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4467);
			match(KW_CAST);
			setState(4468);
			match(LPAREN);
			setState(4469);
			expression();
			setState(4470);
			match(KW_AS);
			setState(4471);
			((CastExpressionContext)_localctx).toType = primitiveType();
			setState(4474);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_FORMAT) {
				{
				setState(4472);
				((CastExpressionContext)_localctx).fmt = match(KW_FORMAT);
				setState(4473);
				match(StringLiteral);
				}
			}

			setState(4476);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CaseExpressionContext extends ParserRuleContext {
		public TerminalNode KW_CASE() { return getToken(HiveParser.KW_CASE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode KW_END() { return getToken(HiveParser.KW_END, 0); }
		public List<TerminalNode> KW_WHEN() { return getTokens(HiveParser.KW_WHEN); }
		public TerminalNode KW_WHEN(int i) {
			return getToken(HiveParser.KW_WHEN, i);
		}
		public List<TerminalNode> KW_THEN() { return getTokens(HiveParser.KW_THEN); }
		public TerminalNode KW_THEN(int i) {
			return getToken(HiveParser.KW_THEN, i);
		}
		public TerminalNode KW_ELSE() { return getToken(HiveParser.KW_ELSE, 0); }
		public CaseExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCaseExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCaseExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCaseExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExpressionContext caseExpression() throws RecognitionException {
		CaseExpressionContext _localctx = new CaseExpressionContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_caseExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4478);
			match(KW_CASE);
			setState(4479);
			expression();
			setState(4485); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4480);
				match(KW_WHEN);
				setState(4481);
				expression();
				setState(4482);
				match(KW_THEN);
				setState(4483);
				expression();
				}
				}
				setState(4487); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==KW_WHEN );
			setState(4491);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ELSE) {
				{
				setState(4489);
				match(KW_ELSE);
				setState(4490);
				expression();
				}
			}

			setState(4493);
			match(KW_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhenExpressionContext extends ParserRuleContext {
		public TerminalNode KW_CASE() { return getToken(HiveParser.KW_CASE, 0); }
		public TerminalNode KW_END() { return getToken(HiveParser.KW_END, 0); }
		public List<TerminalNode> KW_WHEN() { return getTokens(HiveParser.KW_WHEN); }
		public TerminalNode KW_WHEN(int i) {
			return getToken(HiveParser.KW_WHEN, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> KW_THEN() { return getTokens(HiveParser.KW_THEN); }
		public TerminalNode KW_THEN(int i) {
			return getToken(HiveParser.KW_THEN, i);
		}
		public TerminalNode KW_ELSE() { return getToken(HiveParser.KW_ELSE, 0); }
		public WhenExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterWhenExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitWhenExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitWhenExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenExpressionContext whenExpression() throws RecognitionException {
		WhenExpressionContext _localctx = new WhenExpressionContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_whenExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4495);
			match(KW_CASE);
			setState(4501); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4496);
				match(KW_WHEN);
				setState(4497);
				expression();
				setState(4498);
				match(KW_THEN);
				setState(4499);
				expression();
				}
				}
				setState(4503); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==KW_WHEN );
			setState(4507);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_ELSE) {
				{
				setState(4505);
				match(KW_ELSE);
				setState(4506);
				expression();
				}
			}

			setState(4509);
			match(KW_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FloorExpressionContext extends ParserRuleContext {
		public FloorDateQualifiersContext floorUnit;
		public TerminalNode KW_FLOOR() { return getToken(HiveParser.KW_FLOOR, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public TerminalNode KW_TO() { return getToken(HiveParser.KW_TO, 0); }
		public FloorDateQualifiersContext floorDateQualifiers() {
			return getRuleContext(FloorDateQualifiersContext.class,0);
		}
		public FloorExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_floorExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterFloorExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitFloorExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitFloorExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FloorExpressionContext floorExpression() throws RecognitionException {
		FloorExpressionContext _localctx = new FloorExpressionContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_floorExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4511);
			match(KW_FLOOR);
			setState(4512);
			match(LPAREN);
			setState(4513);
			expression();
			setState(4516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_TO) {
				{
				setState(4514);
				match(KW_TO);
				setState(4515);
				((FloorExpressionContext)_localctx).floorUnit = floorDateQualifiers();
				}
			}

			setState(4518);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FloorDateQualifiersContext extends ParserRuleContext {
		public TerminalNode KW_YEAR() { return getToken(HiveParser.KW_YEAR, 0); }
		public TerminalNode KW_QUARTER() { return getToken(HiveParser.KW_QUARTER, 0); }
		public TerminalNode KW_MONTH() { return getToken(HiveParser.KW_MONTH, 0); }
		public TerminalNode KW_WEEK() { return getToken(HiveParser.KW_WEEK, 0); }
		public TerminalNode KW_DAY() { return getToken(HiveParser.KW_DAY, 0); }
		public TerminalNode KW_HOUR() { return getToken(HiveParser.KW_HOUR, 0); }
		public TerminalNode KW_MINUTE() { return getToken(HiveParser.KW_MINUTE, 0); }
		public TerminalNode KW_SECOND() { return getToken(HiveParser.KW_SECOND, 0); }
		public FloorDateQualifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_floorDateQualifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterFloorDateQualifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitFloorDateQualifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitFloorDateQualifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FloorDateQualifiersContext floorDateQualifiers() throws RecognitionException {
		FloorDateQualifiersContext _localctx = new FloorDateQualifiersContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_floorDateQualifiers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4520);
			_la = _input.LA(1);
			if ( !(_la==KW_DAY || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & 108086391056891905L) != 0) || _la==KW_QUARTER || _la==KW_SECOND || _la==KW_WEEK || _la==KW_YEAR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExtractExpressionContext extends ParserRuleContext {
		public TimeQualifiersContext timeUnit;
		public TerminalNode KW_EXTRACT() { return getToken(HiveParser.KW_EXTRACT, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode KW_FROM() { return getToken(HiveParser.KW_FROM, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public TimeQualifiersContext timeQualifiers() {
			return getRuleContext(TimeQualifiersContext.class,0);
		}
		public ExtractExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extractExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterExtractExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitExtractExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitExtractExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtractExpressionContext extractExpression() throws RecognitionException {
		ExtractExpressionContext _localctx = new ExtractExpressionContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_extractExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4522);
			match(KW_EXTRACT);
			setState(4523);
			match(LPAREN);
			setState(4524);
			((ExtractExpressionContext)_localctx).timeUnit = timeQualifiers();
			setState(4525);
			match(KW_FROM);
			setState(4526);
			expression();
			setState(4527);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimeQualifiersContext extends ParserRuleContext {
		public TerminalNode KW_YEAR() { return getToken(HiveParser.KW_YEAR, 0); }
		public TerminalNode KW_QUARTER() { return getToken(HiveParser.KW_QUARTER, 0); }
		public TerminalNode KW_MONTH() { return getToken(HiveParser.KW_MONTH, 0); }
		public TerminalNode KW_WEEK() { return getToken(HiveParser.KW_WEEK, 0); }
		public TerminalNode KW_DAY() { return getToken(HiveParser.KW_DAY, 0); }
		public TerminalNode KW_DOW() { return getToken(HiveParser.KW_DOW, 0); }
		public TerminalNode KW_HOUR() { return getToken(HiveParser.KW_HOUR, 0); }
		public TerminalNode KW_MINUTE() { return getToken(HiveParser.KW_MINUTE, 0); }
		public TerminalNode KW_SECOND() { return getToken(HiveParser.KW_SECOND, 0); }
		public TimeQualifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeQualifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTimeQualifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTimeQualifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTimeQualifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimeQualifiersContext timeQualifiers() throws RecognitionException {
		TimeQualifiersContext _localctx = new TimeQualifiersContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_timeQualifiers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4529);
			_la = _input.LA(1);
			if ( !(_la==KW_DAY || _la==KW_DOW || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & 108086391056891905L) != 0) || _la==KW_QUARTER || _la==KW_SECOND || _la==KW_WEEK || _la==KW_YEAR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstantContext extends ParserRuleContext {
		public IntervalLiteralContext intervalLiteral() {
			return getRuleContext(IntervalLiteralContext.class,0);
		}
		public TerminalNode Number() { return getToken(HiveParser.Number, 0); }
		public DateLiteralContext dateLiteral() {
			return getRuleContext(DateLiteralContext.class,0);
		}
		public TimestampLiteralContext timestampLiteral() {
			return getRuleContext(TimestampLiteralContext.class,0);
		}
		public TimestampLocalTZLiteralContext timestampLocalTZLiteral() {
			return getRuleContext(TimestampLocalTZLiteralContext.class,0);
		}
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public StringLiteralSequenceContext stringLiteralSequence() {
			return getRuleContext(StringLiteralSequenceContext.class,0);
		}
		public TerminalNode IntegralLiteral() { return getToken(HiveParser.IntegralLiteral, 0); }
		public TerminalNode NumberLiteral() { return getToken(HiveParser.NumberLiteral, 0); }
		public CharSetStringLiteralContext charSetStringLiteral() {
			return getRuleContext(CharSetStringLiteralContext.class,0);
		}
		public BooleanValueContext booleanValue() {
			return getRuleContext(BooleanValueContext.class,0);
		}
		public TerminalNode KW_NULL() { return getToken(HiveParser.KW_NULL, 0); }
		public PrepareStmtParamContext prepareStmtParam() {
			return getRuleContext(PrepareStmtParamContext.class,0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_constant);
		try {
			setState(4544);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4531);
				intervalLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4532);
				match(Number);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4533);
				dateLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4534);
				timestampLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4535);
				timestampLocalTZLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4536);
				match(StringLiteral);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4537);
				stringLiteralSequence();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4538);
				match(IntegralLiteral);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4539);
				match(NumberLiteral);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4540);
				charSetStringLiteral();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4541);
				booleanValue();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4542);
				match(KW_NULL);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4543);
				prepareStmtParam();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrepareStmtParamContext extends ParserRuleContext {
		public ParameterIdxContext p;
		public ParameterIdxContext parameterIdx() {
			return getRuleContext(ParameterIdxContext.class,0);
		}
		public PrepareStmtParamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepareStmtParam; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrepareStmtParam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrepareStmtParam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrepareStmtParam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareStmtParamContext prepareStmtParam() throws RecognitionException {
		PrepareStmtParamContext _localctx = new PrepareStmtParamContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_prepareStmtParam);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4546);
			((PrepareStmtParamContext)_localctx).p = parameterIdx();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParameterIdxContext extends ParserRuleContext {
		public TerminalNode QUESTION() { return getToken(HiveParser.QUESTION, 0); }
		public ParameterIdxContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterIdx; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterParameterIdx(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitParameterIdx(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitParameterIdx(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterIdxContext parameterIdx() throws RecognitionException {
		ParameterIdxContext _localctx = new ParameterIdxContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_parameterIdx);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4548);
			match(QUESTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StringLiteralSequenceContext extends ParserRuleContext {
		public List<TerminalNode> StringLiteral() { return getTokens(HiveParser.StringLiteral); }
		public TerminalNode StringLiteral(int i) {
			return getToken(HiveParser.StringLiteral, i);
		}
		public StringLiteralSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiteralSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterStringLiteralSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitStringLiteralSequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitStringLiteralSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringLiteralSequenceContext stringLiteralSequence() throws RecognitionException {
		StringLiteralSequenceContext _localctx = new StringLiteralSequenceContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_stringLiteralSequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4550);
			match(StringLiteral);
			setState(4552); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4551);
				match(StringLiteral);
				}
				}
				setState(4554); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==StringLiteral );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharSetStringLiteralContext extends ParserRuleContext {
		public Token csName;
		public Token csLiteral;
		public TerminalNode CharSetName() { return getToken(HiveParser.CharSetName, 0); }
		public TerminalNode CharSetLiteral() { return getToken(HiveParser.CharSetLiteral, 0); }
		public CharSetStringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charSetStringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCharSetStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCharSetStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCharSetStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharSetStringLiteralContext charSetStringLiteral() throws RecognitionException {
		CharSetStringLiteralContext _localctx = new CharSetStringLiteralContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_charSetStringLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4556);
			((CharSetStringLiteralContext)_localctx).csName = match(CharSetName);
			setState(4557);
			((CharSetStringLiteralContext)_localctx).csLiteral = match(CharSetLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DateLiteralContext extends ParserRuleContext {
		public TerminalNode KW_DATE() { return getToken(HiveParser.KW_DATE, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TerminalNode KW_CURRENT_DATE() { return getToken(HiveParser.KW_CURRENT_DATE, 0); }
		public DateLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDateLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDateLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDateLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DateLiteralContext dateLiteral() throws RecognitionException {
		DateLiteralContext _localctx = new DateLiteralContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_dateLiteral);
		try {
			setState(4562);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_DATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4559);
				match(KW_DATE);
				setState(4560);
				match(StringLiteral);
				}
				break;
			case KW_CURRENT_DATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4561);
				match(KW_CURRENT_DATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimestampLiteralContext extends ParserRuleContext {
		public TerminalNode KW_TIMESTAMP() { return getToken(HiveParser.KW_TIMESTAMP, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TerminalNode KW_CURRENT_TIMESTAMP() { return getToken(HiveParser.KW_CURRENT_TIMESTAMP, 0); }
		public TimestampLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestampLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTimestampLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTimestampLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTimestampLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimestampLiteralContext timestampLiteral() throws RecognitionException {
		TimestampLiteralContext _localctx = new TimestampLiteralContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_timestampLiteral);
		try {
			setState(4567);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(4564);
				match(KW_TIMESTAMP);
				setState(4565);
				match(StringLiteral);
				}
				break;
			case KW_CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 2);
				{
				setState(4566);
				match(KW_CURRENT_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimestampLocalTZLiteralContext extends ParserRuleContext {
		public TerminalNode KW_TIMESTAMPLOCALTZ() { return getToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TimestampLocalTZLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestampLocalTZLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTimestampLocalTZLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTimestampLocalTZLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTimestampLocalTZLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimestampLocalTZLiteralContext timestampLocalTZLiteral() throws RecognitionException {
		TimestampLocalTZLiteralContext _localctx = new TimestampLocalTZLiteralContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_timestampLocalTZLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4569);
			match(KW_TIMESTAMPLOCALTZ);
			setState(4570);
			match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IntervalValueContext extends ParserRuleContext {
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TerminalNode Number() { return getToken(HiveParser.Number, 0); }
		public IntervalValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterIntervalValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitIntervalValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitIntervalValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalValueContext intervalValue() throws RecognitionException {
		IntervalValueContext _localctx = new IntervalValueContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_intervalValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4572);
			_la = _input.LA(1);
			if ( !(_la==StringLiteral || _la==Number) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IntervalLiteralContext extends ParserRuleContext {
		public IntervalValueContext value;
		public IntervalQualifiersContext qualifiers;
		public IntervalValueContext intervalValue() {
			return getRuleContext(IntervalValueContext.class,0);
		}
		public IntervalQualifiersContext intervalQualifiers() {
			return getRuleContext(IntervalQualifiersContext.class,0);
		}
		public IntervalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterIntervalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitIntervalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitIntervalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalLiteralContext intervalLiteral() throws RecognitionException {
		IntervalLiteralContext _localctx = new IntervalLiteralContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_intervalLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4574);
			((IntervalLiteralContext)_localctx).value = intervalValue();
			setState(4575);
			((IntervalLiteralContext)_localctx).qualifiers = intervalQualifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IntervalExpressionContext extends ParserRuleContext {
		public IntervalValueContext value;
		public IntervalQualifiersContext qualifiers;
		public ExpressionContext expr;
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public IntervalValueContext intervalValue() {
			return getRuleContext(IntervalValueContext.class,0);
		}
		public IntervalQualifiersContext intervalQualifiers() {
			return getRuleContext(IntervalQualifiersContext.class,0);
		}
		public TerminalNode KW_INTERVAL() { return getToken(HiveParser.KW_INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterIntervalExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitIntervalExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitIntervalExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalExpressionContext intervalExpression() throws RecognitionException {
		IntervalExpressionContext _localctx = new IntervalExpressionContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_intervalExpression);
		try {
			setState(4592);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4577);
				match(LPAREN);
				setState(4578);
				((IntervalExpressionContext)_localctx).value = intervalValue();
				setState(4579);
				match(RPAREN);
				setState(4580);
				((IntervalExpressionContext)_localctx).qualifiers = intervalQualifiers();
				}
				break;
			case KW_INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4582);
				match(KW_INTERVAL);
				setState(4588);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case StringLiteral:
				case Number:
					{
					setState(4583);
					((IntervalExpressionContext)_localctx).value = intervalValue();
					}
					break;
				case LPAREN:
					{
					setState(4584);
					match(LPAREN);
					setState(4585);
					((IntervalExpressionContext)_localctx).expr = expression();
					setState(4586);
					match(RPAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4590);
				((IntervalExpressionContext)_localctx).qualifiers = intervalQualifiers();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IntervalQualifiersContext extends ParserRuleContext {
		public TerminalNode KW_YEAR() { return getToken(HiveParser.KW_YEAR, 0); }
		public TerminalNode KW_TO() { return getToken(HiveParser.KW_TO, 0); }
		public TerminalNode KW_MONTH() { return getToken(HiveParser.KW_MONTH, 0); }
		public TerminalNode KW_DAY() { return getToken(HiveParser.KW_DAY, 0); }
		public TerminalNode KW_SECOND() { return getToken(HiveParser.KW_SECOND, 0); }
		public TerminalNode KW_HOUR() { return getToken(HiveParser.KW_HOUR, 0); }
		public TerminalNode KW_MINUTE() { return getToken(HiveParser.KW_MINUTE, 0); }
		public IntervalQualifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalQualifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterIntervalQualifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitIntervalQualifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitIntervalQualifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalQualifiersContext intervalQualifiers() throws RecognitionException {
		IntervalQualifiersContext _localctx = new IntervalQualifiersContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_intervalQualifiers);
		try {
			setState(4606);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4594);
				match(KW_YEAR);
				setState(4595);
				match(KW_TO);
				setState(4596);
				match(KW_MONTH);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4597);
				match(KW_DAY);
				setState(4598);
				match(KW_TO);
				setState(4599);
				match(KW_SECOND);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4600);
				match(KW_YEAR);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4601);
				match(KW_MONTH);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4602);
				match(KW_DAY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4603);
				match(KW_HOUR);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4604);
				match(KW_MINUTE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4605);
				match(KW_SECOND);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionContext extends ParserRuleContext {
		public PrecedenceOrExpressionContext precedenceOrExpression() {
			return getRuleContext(PrecedenceOrExpressionContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4608);
			precedenceOrExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AtomExpressionContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public IntervalExpressionContext intervalExpression() {
			return getRuleContext(IntervalExpressionContext.class,0);
		}
		public CastExpressionContext castExpression() {
			return getRuleContext(CastExpressionContext.class,0);
		}
		public ExtractExpressionContext extractExpression() {
			return getRuleContext(ExtractExpressionContext.class,0);
		}
		public FloorExpressionContext floorExpression() {
			return getRuleContext(FloorExpressionContext.class,0);
		}
		public CaseExpressionContext caseExpression() {
			return getRuleContext(CaseExpressionContext.class,0);
		}
		public WhenExpressionContext whenExpression() {
			return getRuleContext(WhenExpressionContext.class,0);
		}
		public SubQueryExpressionContext subQueryExpression() {
			return getRuleContext(SubQueryExpressionContext.class,0);
		}
		public Function_Context function_() {
			return getRuleContext(Function_Context.class,0);
		}
		public TableOrColumnContext tableOrColumn() {
			return getRuleContext(TableOrColumnContext.class,0);
		}
		public ExpressionsInParenthesisContext expressionsInParenthesis() {
			return getRuleContext(ExpressionsInParenthesisContext.class,0);
		}
		public AtomExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atomExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAtomExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAtomExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAtomExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AtomExpressionContext atomExpression() throws RecognitionException {
		AtomExpressionContext _localctx = new AtomExpressionContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_atomExpression);
		try {
			setState(4621);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4610);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4611);
				intervalExpression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4612);
				castExpression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4613);
				extractExpression();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4614);
				floorExpression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4615);
				caseExpression();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4616);
				whenExpression();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4617);
				subQueryExpression();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4618);
				function_();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4619);
				tableOrColumn();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4620);
				expressionsInParenthesis();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceFieldExpressionContext extends ParserRuleContext {
		public AtomExpressionContext atomExpression() {
			return getRuleContext(AtomExpressionContext.class,0);
		}
		public List<TerminalNode> LSQUARE() { return getTokens(HiveParser.LSQUARE); }
		public TerminalNode LSQUARE(int i) {
			return getToken(HiveParser.LSQUARE, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> RSQUARE() { return getTokens(HiveParser.RSQUARE); }
		public TerminalNode RSQUARE(int i) {
			return getToken(HiveParser.RSQUARE, i);
		}
		public List<TerminalNode> DOT() { return getTokens(HiveParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(HiveParser.DOT, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public PrecedenceFieldExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceFieldExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceFieldExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceFieldExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceFieldExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceFieldExpressionContext precedenceFieldExpression() throws RecognitionException {
		PrecedenceFieldExpressionContext _localctx = new PrecedenceFieldExpressionContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_precedenceFieldExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4623);
			atomExpression();
			setState(4632);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DOT || _la==LSQUARE) {
				{
				setState(4630);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LSQUARE:
					{
					setState(4624);
					match(LSQUARE);
					setState(4625);
					expression();
					setState(4626);
					match(RSQUARE);
					}
					break;
				case DOT:
					{
					setState(4628);
					match(DOT);
					setState(4629);
					id_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(4634);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceUnaryOperatorContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(HiveParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(HiveParser.MINUS, 0); }
		public TerminalNode TILDE() { return getToken(HiveParser.TILDE, 0); }
		public PrecedenceUnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceUnaryOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceUnaryOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceUnaryOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceUnaryOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceUnaryOperatorContext precedenceUnaryOperator() throws RecognitionException {
		PrecedenceUnaryOperatorContext _localctx = new PrecedenceUnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_precedenceUnaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4635);
			_la = _input.LA(1);
			if ( !(((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & 67L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceUnaryPrefixExpressionContext extends ParserRuleContext {
		public PrecedenceFieldExpressionContext precedenceFieldExpression() {
			return getRuleContext(PrecedenceFieldExpressionContext.class,0);
		}
		public List<PrecedenceUnaryOperatorContext> precedenceUnaryOperator() {
			return getRuleContexts(PrecedenceUnaryOperatorContext.class);
		}
		public PrecedenceUnaryOperatorContext precedenceUnaryOperator(int i) {
			return getRuleContext(PrecedenceUnaryOperatorContext.class,i);
		}
		public PrecedenceUnaryPrefixExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceUnaryPrefixExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceUnaryPrefixExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceUnaryPrefixExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceUnaryPrefixExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceUnaryPrefixExpressionContext precedenceUnaryPrefixExpression() throws RecognitionException {
		PrecedenceUnaryPrefixExpressionContext _localctx = new PrecedenceUnaryPrefixExpressionContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_precedenceUnaryPrefixExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & 67L) != 0)) {
				{
				{
				setState(4637);
				precedenceUnaryOperator();
				}
				}
				setState(4642);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4643);
			precedenceFieldExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceBitwiseXorOperatorContext extends ParserRuleContext {
		public TerminalNode BITWISEXOR() { return getToken(HiveParser.BITWISEXOR, 0); }
		public PrecedenceBitwiseXorOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceBitwiseXorOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceBitwiseXorOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceBitwiseXorOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceBitwiseXorOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceBitwiseXorOperatorContext precedenceBitwiseXorOperator() throws RecognitionException {
		PrecedenceBitwiseXorOperatorContext _localctx = new PrecedenceBitwiseXorOperatorContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_precedenceBitwiseXorOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4645);
			match(BITWISEXOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceBitwiseXorExpressionContext extends ParserRuleContext {
		public List<PrecedenceUnaryPrefixExpressionContext> precedenceUnaryPrefixExpression() {
			return getRuleContexts(PrecedenceUnaryPrefixExpressionContext.class);
		}
		public PrecedenceUnaryPrefixExpressionContext precedenceUnaryPrefixExpression(int i) {
			return getRuleContext(PrecedenceUnaryPrefixExpressionContext.class,i);
		}
		public List<PrecedenceBitwiseXorOperatorContext> precedenceBitwiseXorOperator() {
			return getRuleContexts(PrecedenceBitwiseXorOperatorContext.class);
		}
		public PrecedenceBitwiseXorOperatorContext precedenceBitwiseXorOperator(int i) {
			return getRuleContext(PrecedenceBitwiseXorOperatorContext.class,i);
		}
		public PrecedenceBitwiseXorExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceBitwiseXorExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceBitwiseXorExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceBitwiseXorExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceBitwiseXorExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceBitwiseXorExpressionContext precedenceBitwiseXorExpression() throws RecognitionException {
		PrecedenceBitwiseXorExpressionContext _localctx = new PrecedenceBitwiseXorExpressionContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_precedenceBitwiseXorExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4647);
			precedenceUnaryPrefixExpression();
			setState(4653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==BITWISEXOR) {
				{
				{
				setState(4648);
				precedenceBitwiseXorOperator();
				setState(4649);
				precedenceUnaryPrefixExpression();
				}
				}
				setState(4655);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceStarOperatorContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(HiveParser.STAR, 0); }
		public TerminalNode DIVIDE() { return getToken(HiveParser.DIVIDE, 0); }
		public TerminalNode MOD() { return getToken(HiveParser.MOD, 0); }
		public TerminalNode DIV() { return getToken(HiveParser.DIV, 0); }
		public PrecedenceStarOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceStarOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceStarOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceStarOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceStarOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceStarOperatorContext precedenceStarOperator() throws RecognitionException {
		PrecedenceStarOperatorContext _localctx = new PrecedenceStarOperatorContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_precedenceStarOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4656);
			_la = _input.LA(1);
			if ( !(((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & 57L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceStarExpressionContext extends ParserRuleContext {
		public List<PrecedenceBitwiseXorExpressionContext> precedenceBitwiseXorExpression() {
			return getRuleContexts(PrecedenceBitwiseXorExpressionContext.class);
		}
		public PrecedenceBitwiseXorExpressionContext precedenceBitwiseXorExpression(int i) {
			return getRuleContext(PrecedenceBitwiseXorExpressionContext.class,i);
		}
		public List<PrecedenceStarOperatorContext> precedenceStarOperator() {
			return getRuleContexts(PrecedenceStarOperatorContext.class);
		}
		public PrecedenceStarOperatorContext precedenceStarOperator(int i) {
			return getRuleContext(PrecedenceStarOperatorContext.class,i);
		}
		public PrecedenceStarExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceStarExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceStarExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceStarExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceStarExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceStarExpressionContext precedenceStarExpression() throws RecognitionException {
		PrecedenceStarExpressionContext _localctx = new PrecedenceStarExpressionContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_precedenceStarExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4658);
			precedenceBitwiseXorExpression();
			setState(4664);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & 57L) != 0)) {
				{
				{
				setState(4659);
				precedenceStarOperator();
				setState(4660);
				precedenceBitwiseXorExpression();
				}
				}
				setState(4666);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedencePlusOperatorContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(HiveParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(HiveParser.MINUS, 0); }
		public PrecedencePlusOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedencePlusOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedencePlusOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedencePlusOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedencePlusOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedencePlusOperatorContext precedencePlusOperator() throws RecognitionException {
		PrecedencePlusOperatorContext _localctx = new PrecedencePlusOperatorContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_precedencePlusOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4667);
			_la = _input.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedencePlusExpressionContext extends ParserRuleContext {
		public List<PrecedenceStarExpressionContext> precedenceStarExpression() {
			return getRuleContexts(PrecedenceStarExpressionContext.class);
		}
		public PrecedenceStarExpressionContext precedenceStarExpression(int i) {
			return getRuleContext(PrecedenceStarExpressionContext.class,i);
		}
		public List<PrecedencePlusOperatorContext> precedencePlusOperator() {
			return getRuleContexts(PrecedencePlusOperatorContext.class);
		}
		public PrecedencePlusOperatorContext precedencePlusOperator(int i) {
			return getRuleContext(PrecedencePlusOperatorContext.class,i);
		}
		public PrecedencePlusExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedencePlusExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedencePlusExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedencePlusExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedencePlusExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedencePlusExpressionContext precedencePlusExpression() throws RecognitionException {
		PrecedencePlusExpressionContext _localctx = new PrecedencePlusExpressionContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_precedencePlusExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4669);
			precedenceStarExpression();
			setState(4675);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				setState(4670);
				precedencePlusOperator();
				setState(4671);
				precedenceStarExpression();
				}
				}
				setState(4677);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceConcatenateOperatorContext extends ParserRuleContext {
		public TerminalNode CONCATENATE() { return getToken(HiveParser.CONCATENATE, 0); }
		public PrecedenceConcatenateOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceConcatenateOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceConcatenateOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceConcatenateOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceConcatenateOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceConcatenateOperatorContext precedenceConcatenateOperator() throws RecognitionException {
		PrecedenceConcatenateOperatorContext _localctx = new PrecedenceConcatenateOperatorContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_precedenceConcatenateOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4678);
			match(CONCATENATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceConcatenateExpressionContext extends ParserRuleContext {
		public PrecedencePlusExpressionContext plus;
		public List<PrecedencePlusExpressionContext> precedencePlusExpression() {
			return getRuleContexts(PrecedencePlusExpressionContext.class);
		}
		public PrecedencePlusExpressionContext precedencePlusExpression(int i) {
			return getRuleContext(PrecedencePlusExpressionContext.class,i);
		}
		public List<PrecedenceConcatenateOperatorContext> precedenceConcatenateOperator() {
			return getRuleContexts(PrecedenceConcatenateOperatorContext.class);
		}
		public PrecedenceConcatenateOperatorContext precedenceConcatenateOperator(int i) {
			return getRuleContext(PrecedenceConcatenateOperatorContext.class,i);
		}
		public PrecedenceConcatenateExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceConcatenateExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceConcatenateExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceConcatenateExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceConcatenateExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceConcatenateExpressionContext precedenceConcatenateExpression() throws RecognitionException {
		PrecedenceConcatenateExpressionContext _localctx = new PrecedenceConcatenateExpressionContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_precedenceConcatenateExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4680);
			precedencePlusExpression();
			setState(4686);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CONCATENATE) {
				{
				{
				setState(4681);
				precedenceConcatenateOperator();
				setState(4682);
				((PrecedenceConcatenateExpressionContext)_localctx).plus = precedencePlusExpression();
				}
				}
				setState(4688);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceAmpersandOperatorContext extends ParserRuleContext {
		public TerminalNode AMPERSAND() { return getToken(HiveParser.AMPERSAND, 0); }
		public PrecedenceAmpersandOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceAmpersandOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceAmpersandOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceAmpersandOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceAmpersandOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceAmpersandOperatorContext precedenceAmpersandOperator() throws RecognitionException {
		PrecedenceAmpersandOperatorContext _localctx = new PrecedenceAmpersandOperatorContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_precedenceAmpersandOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4689);
			match(AMPERSAND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceAmpersandExpressionContext extends ParserRuleContext {
		public List<PrecedenceConcatenateExpressionContext> precedenceConcatenateExpression() {
			return getRuleContexts(PrecedenceConcatenateExpressionContext.class);
		}
		public PrecedenceConcatenateExpressionContext precedenceConcatenateExpression(int i) {
			return getRuleContext(PrecedenceConcatenateExpressionContext.class,i);
		}
		public List<PrecedenceAmpersandOperatorContext> precedenceAmpersandOperator() {
			return getRuleContexts(PrecedenceAmpersandOperatorContext.class);
		}
		public PrecedenceAmpersandOperatorContext precedenceAmpersandOperator(int i) {
			return getRuleContext(PrecedenceAmpersandOperatorContext.class,i);
		}
		public PrecedenceAmpersandExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceAmpersandExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceAmpersandExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceAmpersandExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceAmpersandExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceAmpersandExpressionContext precedenceAmpersandExpression() throws RecognitionException {
		PrecedenceAmpersandExpressionContext _localctx = new PrecedenceAmpersandExpressionContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_precedenceAmpersandExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4691);
			precedenceConcatenateExpression();
			setState(4697);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AMPERSAND) {
				{
				{
				setState(4692);
				precedenceAmpersandOperator();
				setState(4693);
				precedenceConcatenateExpression();
				}
				}
				setState(4699);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceBitwiseOrOperatorContext extends ParserRuleContext {
		public TerminalNode BITWISEOR() { return getToken(HiveParser.BITWISEOR, 0); }
		public PrecedenceBitwiseOrOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceBitwiseOrOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceBitwiseOrOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceBitwiseOrOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceBitwiseOrOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceBitwiseOrOperatorContext precedenceBitwiseOrOperator() throws RecognitionException {
		PrecedenceBitwiseOrOperatorContext _localctx = new PrecedenceBitwiseOrOperatorContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_precedenceBitwiseOrOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4700);
			match(BITWISEOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceBitwiseOrExpressionContext extends ParserRuleContext {
		public List<PrecedenceAmpersandExpressionContext> precedenceAmpersandExpression() {
			return getRuleContexts(PrecedenceAmpersandExpressionContext.class);
		}
		public PrecedenceAmpersandExpressionContext precedenceAmpersandExpression(int i) {
			return getRuleContext(PrecedenceAmpersandExpressionContext.class,i);
		}
		public List<PrecedenceBitwiseOrOperatorContext> precedenceBitwiseOrOperator() {
			return getRuleContexts(PrecedenceBitwiseOrOperatorContext.class);
		}
		public PrecedenceBitwiseOrOperatorContext precedenceBitwiseOrOperator(int i) {
			return getRuleContext(PrecedenceBitwiseOrOperatorContext.class,i);
		}
		public PrecedenceBitwiseOrExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceBitwiseOrExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceBitwiseOrExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceBitwiseOrExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceBitwiseOrExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceBitwiseOrExpressionContext precedenceBitwiseOrExpression() throws RecognitionException {
		PrecedenceBitwiseOrExpressionContext _localctx = new PrecedenceBitwiseOrExpressionContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_precedenceBitwiseOrExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4702);
			precedenceAmpersandExpression();
			setState(4708);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==BITWISEOR) {
				{
				{
				setState(4703);
				precedenceBitwiseOrOperator();
				setState(4704);
				precedenceAmpersandExpression();
				}
				}
				setState(4710);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceRegexpOperatorContext extends ParserRuleContext {
		public TerminalNode KW_LIKE() { return getToken(HiveParser.KW_LIKE, 0); }
		public TerminalNode KW_RLIKE() { return getToken(HiveParser.KW_RLIKE, 0); }
		public TerminalNode KW_REGEXP() { return getToken(HiveParser.KW_REGEXP, 0); }
		public PrecedenceRegexpOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceRegexpOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceRegexpOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceRegexpOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceRegexpOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceRegexpOperatorContext precedenceRegexpOperator() throws RecognitionException {
		PrecedenceRegexpOperatorContext _localctx = new PrecedenceRegexpOperatorContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_precedenceRegexpOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4711);
			_la = _input.LA(1);
			if ( !(_la==KW_LIKE || _la==KW_REGEXP || _la==KW_RLIKE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceSimilarOperatorContext extends ParserRuleContext {
		public PrecedenceRegexpOperatorContext precedenceRegexpOperator() {
			return getRuleContext(PrecedenceRegexpOperatorContext.class,0);
		}
		public TerminalNode LESSTHANOREQUALTO() { return getToken(HiveParser.LESSTHANOREQUALTO, 0); }
		public TerminalNode LESSTHAN() { return getToken(HiveParser.LESSTHAN, 0); }
		public TerminalNode GREATERTHANOREQUALTO() { return getToken(HiveParser.GREATERTHANOREQUALTO, 0); }
		public TerminalNode GREATERTHAN() { return getToken(HiveParser.GREATERTHAN, 0); }
		public PrecedenceSimilarOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceSimilarOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceSimilarOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceSimilarOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceSimilarOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceSimilarOperatorContext precedenceSimilarOperator() throws RecognitionException {
		PrecedenceSimilarOperatorContext _localctx = new PrecedenceSimilarOperatorContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_precedenceSimilarOperator);
		try {
			setState(4718);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_LIKE:
			case KW_REGEXP:
			case KW_RLIKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4713);
				precedenceRegexpOperator();
				}
				break;
			case LESSTHANOREQUALTO:
				enterOuterAlt(_localctx, 2);
				{
				setState(4714);
				match(LESSTHANOREQUALTO);
				}
				break;
			case LESSTHAN:
				enterOuterAlt(_localctx, 3);
				{
				setState(4715);
				match(LESSTHAN);
				}
				break;
			case GREATERTHANOREQUALTO:
				enterOuterAlt(_localctx, 4);
				{
				setState(4716);
				match(GREATERTHANOREQUALTO);
				}
				break;
			case GREATERTHAN:
				enterOuterAlt(_localctx, 5);
				{
				setState(4717);
				match(GREATERTHAN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubQueryExpressionContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public SubQueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subQueryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSubQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSubQueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSubQueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubQueryExpressionContext subQueryExpression() throws RecognitionException {
		SubQueryExpressionContext _localctx = new SubQueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_subQueryExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4720);
			match(LPAREN);
			setState(4721);
			selectStatement();
			setState(4722);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceSimilarExpressionContext extends ParserRuleContext {
		public PrecedenceSimilarExpressionMainContext precedenceSimilarExpressionMain() {
			return getRuleContext(PrecedenceSimilarExpressionMainContext.class,0);
		}
		public TerminalNode KW_EXISTS() { return getToken(HiveParser.KW_EXISTS, 0); }
		public SubQueryExpressionContext subQueryExpression() {
			return getRuleContext(SubQueryExpressionContext.class,0);
		}
		public PrecedenceSimilarExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceSimilarExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceSimilarExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceSimilarExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceSimilarExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceSimilarExpressionContext precedenceSimilarExpression() throws RecognitionException {
		PrecedenceSimilarExpressionContext _localctx = new PrecedenceSimilarExpressionContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_precedenceSimilarExpression);
		try {
			setState(4727);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_ABORT:
			case KW_ACTIVATE:
			case KW_ACTIVE:
			case KW_ADD:
			case KW_ADMIN:
			case KW_AFTER:
			case KW_ALLOC_FRACTION:
			case KW_ANALYZE:
			case KW_ARCHIVE:
			case KW_ARRAY:
			case KW_ASC:
			case KW_AST:
			case KW_AT:
			case KW_AUTOCOMMIT:
			case KW_BATCH:
			case KW_BEFORE:
			case KW_BIGINT:
			case KW_BINARY:
			case KW_BOOLEAN:
			case KW_BUCKET:
			case KW_BUCKETS:
			case KW_CACHE:
			case KW_CASCADE:
			case KW_CASE:
			case KW_CAST:
			case KW_CBO:
			case KW_CHANGE:
			case KW_CHECK:
			case KW_CLUSTER:
			case KW_CLUSTERED:
			case KW_CLUSTERSTATUS:
			case KW_COLLECTION:
			case KW_COLUMNS:
			case KW_COMMENT:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_COMPUTE:
			case KW_CONCATENATE:
			case KW_CONTINUE:
			case KW_COST:
			case KW_CRON:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_DATA:
			case KW_DATABASES:
			case KW_DATE:
			case KW_DATETIME:
			case KW_DAY:
			case KW_DAYOFWEEK:
			case KW_DBPROPERTIES:
			case KW_DCPROPERTIES:
			case KW_DEBUG:
			case KW_DEFAULT:
			case KW_DEFERRED:
			case KW_DEFINED:
			case KW_DELIMITED:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DETAIL:
			case KW_DIRECTORIES:
			case KW_DIRECTORY:
			case KW_DISABLE:
			case KW_DISTRIBUTE:
			case KW_DISTRIBUTED:
			case KW_DO:
			case KW_DOUBLE:
			case KW_DOW:
			case KW_DUMP:
			case KW_ELEM_TYPE:
			case KW_ENABLE:
			case KW_ENFORCED:
			case KW_ESCAPED:
			case KW_EVERY:
			case KW_EXCLUSIVE:
			case KW_EXECUTE:
			case KW_EXECUTED:
			case KW_EXPIRE_SNAPSHOTS:
			case KW_EXPLAIN:
			case KW_EXPORT:
			case KW_EXPRESSION:
			case KW_EXTRACT:
			case KW_FALSE:
			case KW_FIELDS:
			case KW_FILE:
			case KW_FILEFORMAT:
			case KW_FIRST:
			case KW_FLOAT:
			case KW_FLOOR:
			case KW_FORMAT:
			case KW_FORMATTED:
			case KW_FUNCTIONS:
			case KW_GROUPING:
			case KW_HOLD_DDLTIME:
			case KW_HOUR:
			case KW_IDXPROPERTIES:
			case KW_IF:
			case KW_IGNORE:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_INPATH:
			case KW_INPUTDRIVER:
			case KW_INPUTFORMAT:
			case KW_INT:
			case KW_INTERVAL:
			case KW_ISOLATION:
			case KW_ITEMS:
			case KW_JAR:
			case KW_JOINCOST:
			case KW_KEY:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LAST:
			case KW_LEVEL:
			case KW_LIMIT:
			case KW_LINES:
			case KW_LOAD:
			case KW_LOCATION:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_LONG:
			case KW_MANAGED:
			case KW_MANAGEDLOCATION:
			case KW_MANAGEMENT:
			case KW_MAP:
			case KW_MAPJOIN:
			case KW_MAPPING:
			case KW_MATCHED:
			case KW_MATERIALIZED:
			case KW_METADATA:
			case KW_MINUTE:
			case KW_MONTH:
			case KW_MOVE:
			case KW_MSCK:
			case KW_NORELY:
			case KW_NOSCAN:
			case KW_NOVALIDATE:
			case KW_NO_DROP:
			case KW_NULL:
			case KW_NULLS:
			case KW_OFFLINE:
			case KW_OFFSET:
			case KW_OPERATOR:
			case KW_OPTION:
			case KW_OUTPUTDRIVER:
			case KW_OUTPUTFORMAT:
			case KW_OVERWRITE:
			case KW_OWNER:
			case KW_PARTITIONED:
			case KW_PARTITIONS:
			case KW_PATH:
			case KW_PLAN:
			case KW_PLANS:
			case KW_PLUS:
			case KW_POOL:
			case KW_PRINCIPALS:
			case KW_PROTECTION:
			case KW_PURGE:
			case KW_QUARTER:
			case KW_QUERY:
			case KW_QUERY_PARALLELISM:
			case KW_READ:
			case KW_READONLY:
			case KW_REAL:
			case KW_REBUILD:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_RELOAD:
			case KW_RELY:
			case KW_REMOTE:
			case KW_RENAME:
			case KW_REOPTIMIZATION:
			case KW_REPAIR:
			case KW_REPL:
			case KW_REPLACE:
			case KW_REPLICATION:
			case KW_RESOURCE:
			case KW_RESPECT:
			case KW_RESTRICT:
			case KW_REWRITE:
			case KW_ROLE:
			case KW_ROLES:
			case KW_SCHEDULED:
			case KW_SCHEDULING_POLICY:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SECOND:
			case KW_SEMI:
			case KW_SERDE:
			case KW_SERDEPROPERTIES:
			case KW_SERVER:
			case KW_SETS:
			case KW_SET_CURRENT_SNAPSHOT:
			case KW_SHARED:
			case KW_SHOW:
			case KW_SHOW_DATABASE:
			case KW_SKEWED:
			case KW_SMALLINT:
			case KW_SNAPSHOT:
			case KW_SORT:
			case KW_SORTED:
			case KW_SPEC:
			case KW_SSL:
			case KW_STATISTICS:
			case KW_STATUS:
			case KW_STORED:
			case KW_STREAMTABLE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_SUMMARY:
			case KW_SYSTEM_TIME:
			case KW_SYSTEM_VERSION:
			case KW_TABLES:
			case KW_TBLPROPERTIES:
			case KW_TEMPORARY:
			case KW_TERMINATED:
			case KW_TIMESTAMP:
			case KW_TIMESTAMPLOCALTZ:
			case KW_TIMESTAMPTZ:
			case KW_TINYINT:
			case KW_TOUCH:
			case KW_TRANSACTION:
			case KW_TRANSACTIONAL:
			case KW_TRANSACTIONS:
			case KW_TRIM:
			case KW_TRUE:
			case KW_TYPE:
			case KW_UNARCHIVE:
			case KW_UNDO:
			case KW_UNIONTYPE:
			case KW_UNKNOWN:
			case KW_UNLOCK:
			case KW_UNMANAGED:
			case KW_UNSET:
			case KW_UNSIGNED:
			case KW_URI:
			case KW_URL:
			case KW_USE:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_VALIDATE:
			case KW_VALUE_TYPE:
			case KW_VECTORIZATION:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_WAIT:
			case KW_WEEK:
			case KW_WHILE:
			case KW_WITHIN:
			case KW_WORK:
			case KW_WORKLOAD:
			case KW_WRITE:
			case KW_YEAR:
			case KW_ZONE:
			case LPAREN:
			case PLUS:
			case MINUS:
			case TILDE:
			case QUESTION:
			case StringLiteral:
			case IntegralLiteral:
			case NumberLiteral:
			case Number:
			case Identifier:
			case CharSetName:
				enterOuterAlt(_localctx, 1);
				{
				setState(4724);
				precedenceSimilarExpressionMain();
				}
				break;
			case KW_EXISTS:
				enterOuterAlt(_localctx, 2);
				{
				setState(4725);
				match(KW_EXISTS);
				setState(4726);
				subQueryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceSimilarExpressionMainContext extends ParserRuleContext {
		public PrecedenceBitwiseOrExpressionContext a;
		public PrecedenceSimilarExpressionPartContext part;
		public PrecedenceBitwiseOrExpressionContext precedenceBitwiseOrExpression() {
			return getRuleContext(PrecedenceBitwiseOrExpressionContext.class,0);
		}
		public PrecedenceSimilarExpressionPartContext precedenceSimilarExpressionPart() {
			return getRuleContext(PrecedenceSimilarExpressionPartContext.class,0);
		}
		public PrecedenceSimilarExpressionMainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceSimilarExpressionMain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceSimilarExpressionMain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceSimilarExpressionMain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceSimilarExpressionMain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceSimilarExpressionMainContext precedenceSimilarExpressionMain() throws RecognitionException {
		PrecedenceSimilarExpressionMainContext _localctx = new PrecedenceSimilarExpressionMainContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_precedenceSimilarExpressionMain);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4729);
			((PrecedenceSimilarExpressionMainContext)_localctx).a = precedenceBitwiseOrExpression();
			setState(4731);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
			case 1:
				{
				setState(4730);
				((PrecedenceSimilarExpressionMainContext)_localctx).part = precedenceSimilarExpressionPart();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceSimilarExpressionPartContext extends ParserRuleContext {
		public PrecedenceBitwiseOrExpressionContext equalExpr;
		public PrecedenceSimilarOperatorContext precedenceSimilarOperator() {
			return getRuleContext(PrecedenceSimilarOperatorContext.class,0);
		}
		public PrecedenceBitwiseOrExpressionContext precedenceBitwiseOrExpression() {
			return getRuleContext(PrecedenceBitwiseOrExpressionContext.class,0);
		}
		public PrecedenceSimilarExpressionAtomContext precedenceSimilarExpressionAtom() {
			return getRuleContext(PrecedenceSimilarExpressionAtomContext.class,0);
		}
		public TerminalNode KW_NOT() { return getToken(HiveParser.KW_NOT, 0); }
		public PrecedenceSimilarExpressionPartNotContext precedenceSimilarExpressionPartNot() {
			return getRuleContext(PrecedenceSimilarExpressionPartNotContext.class,0);
		}
		public PrecedenceSimilarExpressionPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceSimilarExpressionPart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceSimilarExpressionPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceSimilarExpressionPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceSimilarExpressionPart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceSimilarExpressionPartContext precedenceSimilarExpressionPart() throws RecognitionException {
		PrecedenceSimilarExpressionPartContext _localctx = new PrecedenceSimilarExpressionPartContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_precedenceSimilarExpressionPart);
		try {
			setState(4739);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4733);
				precedenceSimilarOperator();
				setState(4734);
				((PrecedenceSimilarExpressionPartContext)_localctx).equalExpr = precedenceBitwiseOrExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4736);
				precedenceSimilarExpressionAtom();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4737);
				match(KW_NOT);
				setState(4738);
				precedenceSimilarExpressionPartNot();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceSimilarExpressionAtomContext extends ParserRuleContext {
		public PrecedenceBitwiseOrExpressionContext min;
		public PrecedenceBitwiseOrExpressionContext max;
		public ExpressionsInParenthesisContext expr;
		public TerminalNode KW_IN() { return getToken(HiveParser.KW_IN, 0); }
		public PrecedenceSimilarExpressionInContext precedenceSimilarExpressionIn() {
			return getRuleContext(PrecedenceSimilarExpressionInContext.class,0);
		}
		public TerminalNode KW_BETWEEN() { return getToken(HiveParser.KW_BETWEEN, 0); }
		public TerminalNode KW_AND() { return getToken(HiveParser.KW_AND, 0); }
		public List<PrecedenceBitwiseOrExpressionContext> precedenceBitwiseOrExpression() {
			return getRuleContexts(PrecedenceBitwiseOrExpressionContext.class);
		}
		public PrecedenceBitwiseOrExpressionContext precedenceBitwiseOrExpression(int i) {
			return getRuleContext(PrecedenceBitwiseOrExpressionContext.class,i);
		}
		public TerminalNode KW_LIKE() { return getToken(HiveParser.KW_LIKE, 0); }
		public TerminalNode KW_ANY() { return getToken(HiveParser.KW_ANY, 0); }
		public TerminalNode KW_ALL() { return getToken(HiveParser.KW_ALL, 0); }
		public ExpressionsInParenthesisContext expressionsInParenthesis() {
			return getRuleContext(ExpressionsInParenthesisContext.class,0);
		}
		public PrecedenceSimilarExpressionQuantifierPredicateContext precedenceSimilarExpressionQuantifierPredicate() {
			return getRuleContext(PrecedenceSimilarExpressionQuantifierPredicateContext.class,0);
		}
		public PrecedenceSimilarExpressionAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceSimilarExpressionAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceSimilarExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceSimilarExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceSimilarExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceSimilarExpressionAtomContext precedenceSimilarExpressionAtom() throws RecognitionException {
		PrecedenceSimilarExpressionAtomContext _localctx = new PrecedenceSimilarExpressionAtomContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_precedenceSimilarExpressionAtom);
		int _la;
		try {
			setState(4752);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_IN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4741);
				match(KW_IN);
				setState(4742);
				precedenceSimilarExpressionIn();
				}
				break;
			case KW_BETWEEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(4743);
				match(KW_BETWEEN);
				setState(4744);
				((PrecedenceSimilarExpressionAtomContext)_localctx).min = precedenceBitwiseOrExpression();
				setState(4745);
				match(KW_AND);
				setState(4746);
				((PrecedenceSimilarExpressionAtomContext)_localctx).max = precedenceBitwiseOrExpression();
				}
				break;
			case KW_LIKE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4748);
				match(KW_LIKE);
				setState(4749);
				_la = _input.LA(1);
				if ( !(_la==KW_ALL || _la==KW_ANY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4750);
				((PrecedenceSimilarExpressionAtomContext)_localctx).expr = expressionsInParenthesis();
				}
				break;
			case EQUAL:
			case NOTEQUAL:
			case LESSTHANOREQUALTO:
			case LESSTHAN:
			case GREATERTHANOREQUALTO:
			case GREATERTHAN:
				enterOuterAlt(_localctx, 4);
				{
				setState(4751);
				precedenceSimilarExpressionQuantifierPredicate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceSimilarExpressionQuantifierPredicateContext extends ParserRuleContext {
		public SubQuerySelectorOperatorContext subQuerySelectorOperator() {
			return getRuleContext(SubQuerySelectorOperatorContext.class,0);
		}
		public QuantifierTypeContext quantifierType() {
			return getRuleContext(QuantifierTypeContext.class,0);
		}
		public SubQueryExpressionContext subQueryExpression() {
			return getRuleContext(SubQueryExpressionContext.class,0);
		}
		public PrecedenceSimilarExpressionQuantifierPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceSimilarExpressionQuantifierPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceSimilarExpressionQuantifierPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceSimilarExpressionQuantifierPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceSimilarExpressionQuantifierPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceSimilarExpressionQuantifierPredicateContext precedenceSimilarExpressionQuantifierPredicate() throws RecognitionException {
		PrecedenceSimilarExpressionQuantifierPredicateContext _localctx = new PrecedenceSimilarExpressionQuantifierPredicateContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_precedenceSimilarExpressionQuantifierPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4754);
			subQuerySelectorOperator();
			setState(4755);
			quantifierType();
			setState(4756);
			subQueryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QuantifierTypeContext extends ParserRuleContext {
		public TerminalNode KW_ANY() { return getToken(HiveParser.KW_ANY, 0); }
		public TerminalNode KW_SOME() { return getToken(HiveParser.KW_SOME, 0); }
		public TerminalNode KW_ALL() { return getToken(HiveParser.KW_ALL, 0); }
		public QuantifierTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantifierType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterQuantifierType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitQuantifierType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitQuantifierType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuantifierTypeContext quantifierType() throws RecognitionException {
		QuantifierTypeContext _localctx = new QuantifierTypeContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_quantifierType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4758);
			_la = _input.LA(1);
			if ( !(_la==KW_ALL || _la==KW_ANY || _la==KW_SOME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceSimilarExpressionInContext extends ParserRuleContext {
		public ExpressionsInParenthesisContext expr;
		public SubQueryExpressionContext subQueryExpression() {
			return getRuleContext(SubQueryExpressionContext.class,0);
		}
		public ExpressionsInParenthesisContext expressionsInParenthesis() {
			return getRuleContext(ExpressionsInParenthesisContext.class,0);
		}
		public PrecedenceSimilarExpressionInContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceSimilarExpressionIn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceSimilarExpressionIn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceSimilarExpressionIn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceSimilarExpressionIn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceSimilarExpressionInContext precedenceSimilarExpressionIn() throws RecognitionException {
		PrecedenceSimilarExpressionInContext _localctx = new PrecedenceSimilarExpressionInContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_precedenceSimilarExpressionIn);
		try {
			setState(4762);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4760);
				subQueryExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4761);
				((PrecedenceSimilarExpressionInContext)_localctx).expr = expressionsInParenthesis();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceSimilarExpressionPartNotContext extends ParserRuleContext {
		public PrecedenceBitwiseOrExpressionContext notExpr;
		public PrecedenceRegexpOperatorContext precedenceRegexpOperator() {
			return getRuleContext(PrecedenceRegexpOperatorContext.class,0);
		}
		public PrecedenceBitwiseOrExpressionContext precedenceBitwiseOrExpression() {
			return getRuleContext(PrecedenceBitwiseOrExpressionContext.class,0);
		}
		public PrecedenceSimilarExpressionAtomContext precedenceSimilarExpressionAtom() {
			return getRuleContext(PrecedenceSimilarExpressionAtomContext.class,0);
		}
		public PrecedenceSimilarExpressionPartNotContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceSimilarExpressionPartNot; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceSimilarExpressionPartNot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceSimilarExpressionPartNot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceSimilarExpressionPartNot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceSimilarExpressionPartNotContext precedenceSimilarExpressionPartNot() throws RecognitionException {
		PrecedenceSimilarExpressionPartNotContext _localctx = new PrecedenceSimilarExpressionPartNotContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_precedenceSimilarExpressionPartNot);
		try {
			setState(4768);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,564,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4764);
				precedenceRegexpOperator();
				setState(4765);
				((PrecedenceSimilarExpressionPartNotContext)_localctx).notExpr = precedenceBitwiseOrExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4767);
				precedenceSimilarExpressionAtom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceDistinctOperatorContext extends ParserRuleContext {
		public TerminalNode KW_IS() { return getToken(HiveParser.KW_IS, 0); }
		public TerminalNode KW_DISTINCT() { return getToken(HiveParser.KW_DISTINCT, 0); }
		public TerminalNode KW_FROM() { return getToken(HiveParser.KW_FROM, 0); }
		public PrecedenceDistinctOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceDistinctOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceDistinctOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceDistinctOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceDistinctOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceDistinctOperatorContext precedenceDistinctOperator() throws RecognitionException {
		PrecedenceDistinctOperatorContext _localctx = new PrecedenceDistinctOperatorContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_precedenceDistinctOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4770);
			match(KW_IS);
			setState(4771);
			match(KW_DISTINCT);
			setState(4772);
			match(KW_FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceEqualOperatorContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(HiveParser.EQUAL, 0); }
		public TerminalNode EQUAL_NS() { return getToken(HiveParser.EQUAL_NS, 0); }
		public TerminalNode NOTEQUAL() { return getToken(HiveParser.NOTEQUAL, 0); }
		public TerminalNode KW_IS() { return getToken(HiveParser.KW_IS, 0); }
		public TerminalNode KW_NOT() { return getToken(HiveParser.KW_NOT, 0); }
		public TerminalNode KW_DISTINCT() { return getToken(HiveParser.KW_DISTINCT, 0); }
		public TerminalNode KW_FROM() { return getToken(HiveParser.KW_FROM, 0); }
		public PrecedenceEqualOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceEqualOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceEqualOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceEqualOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceEqualOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceEqualOperatorContext precedenceEqualOperator() throws RecognitionException {
		PrecedenceEqualOperatorContext _localctx = new PrecedenceEqualOperatorContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_precedenceEqualOperator);
		try {
			setState(4781);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4774);
				match(EQUAL);
				}
				break;
			case EQUAL_NS:
				enterOuterAlt(_localctx, 2);
				{
				setState(4775);
				match(EQUAL_NS);
				}
				break;
			case NOTEQUAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4776);
				match(NOTEQUAL);
				}
				break;
			case KW_IS:
				enterOuterAlt(_localctx, 4);
				{
				setState(4777);
				match(KW_IS);
				setState(4778);
				match(KW_NOT);
				setState(4779);
				match(KW_DISTINCT);
				setState(4780);
				match(KW_FROM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceEqualExpressionContext extends ParserRuleContext {
		public PrecedenceEqualOperatorContext precedenceEqualOperator;
		public List<PrecedenceEqualOperatorContext> equal = new ArrayList<PrecedenceEqualOperatorContext>();
		public PrecedenceSimilarExpressionContext precedenceSimilarExpression;
		public List<PrecedenceSimilarExpressionContext> p = new ArrayList<PrecedenceSimilarExpressionContext>();
		public PrecedenceDistinctOperatorContext precedenceDistinctOperator;
		public List<PrecedenceDistinctOperatorContext> dist = new ArrayList<PrecedenceDistinctOperatorContext>();
		public List<PrecedenceSimilarExpressionContext> precedenceSimilarExpression() {
			return getRuleContexts(PrecedenceSimilarExpressionContext.class);
		}
		public PrecedenceSimilarExpressionContext precedenceSimilarExpression(int i) {
			return getRuleContext(PrecedenceSimilarExpressionContext.class,i);
		}
		public List<PrecedenceEqualOperatorContext> precedenceEqualOperator() {
			return getRuleContexts(PrecedenceEqualOperatorContext.class);
		}
		public PrecedenceEqualOperatorContext precedenceEqualOperator(int i) {
			return getRuleContext(PrecedenceEqualOperatorContext.class,i);
		}
		public List<PrecedenceDistinctOperatorContext> precedenceDistinctOperator() {
			return getRuleContexts(PrecedenceDistinctOperatorContext.class);
		}
		public PrecedenceDistinctOperatorContext precedenceDistinctOperator(int i) {
			return getRuleContext(PrecedenceDistinctOperatorContext.class,i);
		}
		public PrecedenceEqualExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceEqualExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceEqualExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceEqualExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceEqualExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceEqualExpressionContext precedenceEqualExpression() throws RecognitionException {
		PrecedenceEqualExpressionContext _localctx = new PrecedenceEqualExpressionContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_precedenceEqualExpression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4783);
			precedenceSimilarExpression();
			setState(4792);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,567,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(4790);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,566,_ctx) ) {
					case 1:
						{
						setState(4784);
						((PrecedenceEqualExpressionContext)_localctx).precedenceEqualOperator = precedenceEqualOperator();
						((PrecedenceEqualExpressionContext)_localctx).equal.add(((PrecedenceEqualExpressionContext)_localctx).precedenceEqualOperator);
						setState(4785);
						((PrecedenceEqualExpressionContext)_localctx).precedenceSimilarExpression = precedenceSimilarExpression();
						((PrecedenceEqualExpressionContext)_localctx).p.add(((PrecedenceEqualExpressionContext)_localctx).precedenceSimilarExpression);
						}
						break;
					case 2:
						{
						setState(4787);
						((PrecedenceEqualExpressionContext)_localctx).precedenceDistinctOperator = precedenceDistinctOperator();
						((PrecedenceEqualExpressionContext)_localctx).dist.add(((PrecedenceEqualExpressionContext)_localctx).precedenceDistinctOperator);
						setState(4788);
						((PrecedenceEqualExpressionContext)_localctx).precedenceSimilarExpression = precedenceSimilarExpression();
						((PrecedenceEqualExpressionContext)_localctx).p.add(((PrecedenceEqualExpressionContext)_localctx).precedenceSimilarExpression);
						}
						break;
					}
					} 
				}
				setState(4794);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,567,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IsConditionContext extends ParserRuleContext {
		public TerminalNode KW_NULL() { return getToken(HiveParser.KW_NULL, 0); }
		public TerminalNode KW_TRUE() { return getToken(HiveParser.KW_TRUE, 0); }
		public TerminalNode KW_FALSE() { return getToken(HiveParser.KW_FALSE, 0); }
		public TerminalNode KW_UNKNOWN() { return getToken(HiveParser.KW_UNKNOWN, 0); }
		public TerminalNode KW_NOT() { return getToken(HiveParser.KW_NOT, 0); }
		public IsConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterIsCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitIsCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitIsCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsConditionContext isCondition() throws RecognitionException {
		IsConditionContext _localctx = new IsConditionContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_isCondition);
		try {
			setState(4807);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,568,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4795);
				match(KW_NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4796);
				match(KW_TRUE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4797);
				match(KW_FALSE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4798);
				match(KW_UNKNOWN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4799);
				match(KW_NOT);
				setState(4800);
				match(KW_NULL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4801);
				match(KW_NOT);
				setState(4802);
				match(KW_TRUE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4803);
				match(KW_NOT);
				setState(4804);
				match(KW_FALSE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4805);
				match(KW_NOT);
				setState(4806);
				match(KW_UNKNOWN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceUnarySuffixExpressionContext extends ParserRuleContext {
		public Token a;
		public PrecedenceEqualExpressionContext precedenceEqualExpression() {
			return getRuleContext(PrecedenceEqualExpressionContext.class,0);
		}
		public IsConditionContext isCondition() {
			return getRuleContext(IsConditionContext.class,0);
		}
		public TerminalNode KW_IS() { return getToken(HiveParser.KW_IS, 0); }
		public PrecedenceUnarySuffixExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceUnarySuffixExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceUnarySuffixExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceUnarySuffixExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceUnarySuffixExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceUnarySuffixExpressionContext precedenceUnarySuffixExpression() throws RecognitionException {
		PrecedenceUnarySuffixExpressionContext _localctx = new PrecedenceUnarySuffixExpressionContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_precedenceUnarySuffixExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4809);
			precedenceEqualExpression();
			setState(4812);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_IS) {
				{
				setState(4810);
				((PrecedenceUnarySuffixExpressionContext)_localctx).a = match(KW_IS);
				setState(4811);
				isCondition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceNotOperatorContext extends ParserRuleContext {
		public TerminalNode KW_NOT() { return getToken(HiveParser.KW_NOT, 0); }
		public PrecedenceNotOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceNotOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceNotOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceNotOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceNotOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceNotOperatorContext precedenceNotOperator() throws RecognitionException {
		PrecedenceNotOperatorContext _localctx = new PrecedenceNotOperatorContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_precedenceNotOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4814);
			match(KW_NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceNotExpressionContext extends ParserRuleContext {
		public PrecedenceUnarySuffixExpressionContext precedenceUnarySuffixExpression() {
			return getRuleContext(PrecedenceUnarySuffixExpressionContext.class,0);
		}
		public List<PrecedenceNotOperatorContext> precedenceNotOperator() {
			return getRuleContexts(PrecedenceNotOperatorContext.class);
		}
		public PrecedenceNotOperatorContext precedenceNotOperator(int i) {
			return getRuleContext(PrecedenceNotOperatorContext.class,i);
		}
		public PrecedenceNotExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceNotExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceNotExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceNotExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceNotExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceNotExpressionContext precedenceNotExpression() throws RecognitionException {
		PrecedenceNotExpressionContext _localctx = new PrecedenceNotExpressionContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_precedenceNotExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4819);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==KW_NOT) {
				{
				{
				setState(4816);
				precedenceNotOperator();
				}
				}
				setState(4821);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4822);
			precedenceUnarySuffixExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceAndOperatorContext extends ParserRuleContext {
		public TerminalNode KW_AND() { return getToken(HiveParser.KW_AND, 0); }
		public PrecedenceAndOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceAndOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceAndOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceAndOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceAndOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceAndOperatorContext precedenceAndOperator() throws RecognitionException {
		PrecedenceAndOperatorContext _localctx = new PrecedenceAndOperatorContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_precedenceAndOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4824);
			match(KW_AND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceAndExpressionContext extends ParserRuleContext {
		public List<PrecedenceNotExpressionContext> precedenceNotExpression() {
			return getRuleContexts(PrecedenceNotExpressionContext.class);
		}
		public PrecedenceNotExpressionContext precedenceNotExpression(int i) {
			return getRuleContext(PrecedenceNotExpressionContext.class,i);
		}
		public List<PrecedenceAndOperatorContext> precedenceAndOperator() {
			return getRuleContexts(PrecedenceAndOperatorContext.class);
		}
		public PrecedenceAndOperatorContext precedenceAndOperator(int i) {
			return getRuleContext(PrecedenceAndOperatorContext.class,i);
		}
		public PrecedenceAndExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceAndExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceAndExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceAndExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceAndExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceAndExpressionContext precedenceAndExpression() throws RecognitionException {
		PrecedenceAndExpressionContext _localctx = new PrecedenceAndExpressionContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_precedenceAndExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4826);
			precedenceNotExpression();
			setState(4832);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==KW_AND) {
				{
				{
				setState(4827);
				precedenceAndOperator();
				setState(4828);
				precedenceNotExpression();
				}
				}
				setState(4834);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceOrOperatorContext extends ParserRuleContext {
		public TerminalNode KW_OR() { return getToken(HiveParser.KW_OR, 0); }
		public PrecedenceOrOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceOrOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceOrOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceOrOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceOrOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceOrOperatorContext precedenceOrOperator() throws RecognitionException {
		PrecedenceOrOperatorContext _localctx = new PrecedenceOrOperatorContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_precedenceOrOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4835);
			match(KW_OR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecedenceOrExpressionContext extends ParserRuleContext {
		public List<PrecedenceAndExpressionContext> precedenceAndExpression() {
			return getRuleContexts(PrecedenceAndExpressionContext.class);
		}
		public PrecedenceAndExpressionContext precedenceAndExpression(int i) {
			return getRuleContext(PrecedenceAndExpressionContext.class,i);
		}
		public List<PrecedenceOrOperatorContext> precedenceOrOperator() {
			return getRuleContexts(PrecedenceOrOperatorContext.class);
		}
		public PrecedenceOrOperatorContext precedenceOrOperator(int i) {
			return getRuleContext(PrecedenceOrOperatorContext.class,i);
		}
		public PrecedenceOrExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precedenceOrExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrecedenceOrExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrecedenceOrExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrecedenceOrExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecedenceOrExpressionContext precedenceOrExpression() throws RecognitionException {
		PrecedenceOrExpressionContext _localctx = new PrecedenceOrExpressionContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_precedenceOrExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4837);
			precedenceAndExpression();
			setState(4843);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==KW_OR) {
				{
				{
				setState(4838);
				precedenceOrOperator();
				setState(4839);
				precedenceAndExpression();
				}
				}
				setState(4845);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BooleanValueContext extends ParserRuleContext {
		public TerminalNode KW_TRUE() { return getToken(HiveParser.KW_TRUE, 0); }
		public TerminalNode KW_FALSE() { return getToken(HiveParser.KW_FALSE, 0); }
		public BooleanValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterBooleanValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitBooleanValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitBooleanValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanValueContext booleanValue() throws RecognitionException {
		BooleanValueContext _localctx = new BooleanValueContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_booleanValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4846);
			_la = _input.LA(1);
			if ( !(_la==KW_FALSE || _la==KW_TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BooleanValueTokContext extends ParserRuleContext {
		public TerminalNode KW_TRUE() { return getToken(HiveParser.KW_TRUE, 0); }
		public TerminalNode KW_FALSE() { return getToken(HiveParser.KW_FALSE, 0); }
		public BooleanValueTokContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanValueTok; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterBooleanValueTok(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitBooleanValueTok(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitBooleanValueTok(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanValueTokContext booleanValueTok() throws RecognitionException {
		BooleanValueTokContext _localctx = new BooleanValueTokContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_booleanValueTok);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4848);
			_la = _input.LA(1);
			if ( !(_la==KW_FALSE || _la==KW_TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableOrPartitionContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TableOrPartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOrPartition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTableOrPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTableOrPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTableOrPartition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOrPartitionContext tableOrPartition() throws RecognitionException {
		TableOrPartitionContext _localctx = new TableOrPartitionContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_tableOrPartition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4850);
			tableName();
			setState(4852);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_PARTITION) {
				{
				setState(4851);
				partitionSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionSpecContext extends ParserRuleContext {
		public TerminalNode KW_PARTITION() { return getToken(HiveParser.KW_PARTITION, 0); }
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public List<PartitionValContext> partitionVal() {
			return getRuleContexts(PartitionValContext.class);
		}
		public PartitionValContext partitionVal(int i) {
			return getRuleContext(PartitionValContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public PartitionSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPartitionSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPartitionSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPartitionSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionSpecContext partitionSpec() throws RecognitionException {
		PartitionSpecContext _localctx = new PartitionSpecContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_partitionSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4854);
			match(KW_PARTITION);
			setState(4855);
			match(LPAREN);
			setState(4856);
			partitionVal();
			setState(4861);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4857);
				match(COMMA);
				setState(4858);
				partitionVal();
				}
				}
				setState(4863);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4864);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionValContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode EQUAL() { return getToken(HiveParser.EQUAL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public PartitionValContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionVal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPartitionVal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPartitionVal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPartitionVal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionValContext partitionVal() throws RecognitionException {
		PartitionValContext _localctx = new PartitionValContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_partitionVal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4866);
			id_();
			setState(4869);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(4867);
				match(EQUAL);
				setState(4868);
				constant();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionSelectorSpecContext extends ParserRuleContext {
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public List<PartitionSelectorValContext> partitionSelectorVal() {
			return getRuleContexts(PartitionSelectorValContext.class);
		}
		public PartitionSelectorValContext partitionSelectorVal(int i) {
			return getRuleContext(PartitionSelectorValContext.class,i);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public PartitionSelectorSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionSelectorSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPartitionSelectorSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPartitionSelectorSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPartitionSelectorSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionSelectorSpecContext partitionSelectorSpec() throws RecognitionException {
		PartitionSelectorSpecContext _localctx = new PartitionSelectorSpecContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_partitionSelectorSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4871);
			match(LPAREN);
			setState(4872);
			partitionSelectorVal();
			setState(4877);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4873);
				match(COMMA);
				setState(4874);
				partitionSelectorVal();
				}
				}
				setState(4879);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4880);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionSelectorValContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public PartitionSelectorOperatorContext partitionSelectorOperator() {
			return getRuleContext(PartitionSelectorOperatorContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public PartitionSelectorValContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionSelectorVal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPartitionSelectorVal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPartitionSelectorVal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPartitionSelectorVal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionSelectorValContext partitionSelectorVal() throws RecognitionException {
		PartitionSelectorValContext _localctx = new PartitionSelectorValContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_partitionSelectorVal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4882);
			id_();
			setState(4883);
			partitionSelectorOperator();
			setState(4884);
			constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionSelectorOperatorContext extends ParserRuleContext {
		public TerminalNode KW_LIKE() { return getToken(HiveParser.KW_LIKE, 0); }
		public SubQuerySelectorOperatorContext subQuerySelectorOperator() {
			return getRuleContext(SubQuerySelectorOperatorContext.class,0);
		}
		public PartitionSelectorOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionSelectorOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPartitionSelectorOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPartitionSelectorOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPartitionSelectorOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionSelectorOperatorContext partitionSelectorOperator() throws RecognitionException {
		PartitionSelectorOperatorContext _localctx = new PartitionSelectorOperatorContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_partitionSelectorOperator);
		try {
			setState(4888);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_LIKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4886);
				match(KW_LIKE);
				}
				break;
			case EQUAL:
			case NOTEQUAL:
			case LESSTHANOREQUALTO:
			case LESSTHAN:
			case GREATERTHANOREQUALTO:
			case GREATERTHAN:
				enterOuterAlt(_localctx, 2);
				{
				setState(4887);
				subQuerySelectorOperator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubQuerySelectorOperatorContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(HiveParser.EQUAL, 0); }
		public TerminalNode NOTEQUAL() { return getToken(HiveParser.NOTEQUAL, 0); }
		public TerminalNode LESSTHANOREQUALTO() { return getToken(HiveParser.LESSTHANOREQUALTO, 0); }
		public TerminalNode LESSTHAN() { return getToken(HiveParser.LESSTHAN, 0); }
		public TerminalNode GREATERTHANOREQUALTO() { return getToken(HiveParser.GREATERTHANOREQUALTO, 0); }
		public TerminalNode GREATERTHAN() { return getToken(HiveParser.GREATERTHAN, 0); }
		public SubQuerySelectorOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subQuerySelectorOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSubQuerySelectorOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSubQuerySelectorOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSubQuerySelectorOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubQuerySelectorOperatorContext subQuerySelectorOperator() throws RecognitionException {
		SubQuerySelectorOperatorContext _localctx = new SubQuerySelectorOperatorContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_subQuerySelectorOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4890);
			_la = _input.LA(1);
			if ( !(((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & 125L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SysFuncNamesContext extends ParserRuleContext {
		public TerminalNode KW_AND() { return getToken(HiveParser.KW_AND, 0); }
		public TerminalNode KW_OR() { return getToken(HiveParser.KW_OR, 0); }
		public TerminalNode KW_NOT() { return getToken(HiveParser.KW_NOT, 0); }
		public TerminalNode KW_LIKE() { return getToken(HiveParser.KW_LIKE, 0); }
		public TerminalNode KW_IF() { return getToken(HiveParser.KW_IF, 0); }
		public TerminalNode KW_CASE() { return getToken(HiveParser.KW_CASE, 0); }
		public TerminalNode KW_WHEN() { return getToken(HiveParser.KW_WHEN, 0); }
		public TerminalNode KW_FLOOR() { return getToken(HiveParser.KW_FLOOR, 0); }
		public TerminalNode KW_TINYINT() { return getToken(HiveParser.KW_TINYINT, 0); }
		public TerminalNode KW_SMALLINT() { return getToken(HiveParser.KW_SMALLINT, 0); }
		public TerminalNode KW_INT() { return getToken(HiveParser.KW_INT, 0); }
		public TerminalNode KW_BIGINT() { return getToken(HiveParser.KW_BIGINT, 0); }
		public TerminalNode KW_FLOAT() { return getToken(HiveParser.KW_FLOAT, 0); }
		public TerminalNode KW_REAL() { return getToken(HiveParser.KW_REAL, 0); }
		public TerminalNode KW_DOUBLE() { return getToken(HiveParser.KW_DOUBLE, 0); }
		public TerminalNode KW_BOOLEAN() { return getToken(HiveParser.KW_BOOLEAN, 0); }
		public TerminalNode KW_STRING() { return getToken(HiveParser.KW_STRING, 0); }
		public TerminalNode KW_BINARY() { return getToken(HiveParser.KW_BINARY, 0); }
		public TerminalNode KW_ARRAY() { return getToken(HiveParser.KW_ARRAY, 0); }
		public TerminalNode KW_MAP() { return getToken(HiveParser.KW_MAP, 0); }
		public TerminalNode KW_STRUCT() { return getToken(HiveParser.KW_STRUCT, 0); }
		public TerminalNode KW_UNIONTYPE() { return getToken(HiveParser.KW_UNIONTYPE, 0); }
		public TerminalNode EQUAL() { return getToken(HiveParser.EQUAL, 0); }
		public TerminalNode EQUAL_NS() { return getToken(HiveParser.EQUAL_NS, 0); }
		public TerminalNode NOTEQUAL() { return getToken(HiveParser.NOTEQUAL, 0); }
		public TerminalNode LESSTHANOREQUALTO() { return getToken(HiveParser.LESSTHANOREQUALTO, 0); }
		public TerminalNode LESSTHAN() { return getToken(HiveParser.LESSTHAN, 0); }
		public TerminalNode GREATERTHANOREQUALTO() { return getToken(HiveParser.GREATERTHANOREQUALTO, 0); }
		public TerminalNode GREATERTHAN() { return getToken(HiveParser.GREATERTHAN, 0); }
		public TerminalNode DIVIDE() { return getToken(HiveParser.DIVIDE, 0); }
		public TerminalNode PLUS() { return getToken(HiveParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(HiveParser.MINUS, 0); }
		public TerminalNode STAR() { return getToken(HiveParser.STAR, 0); }
		public TerminalNode MOD() { return getToken(HiveParser.MOD, 0); }
		public TerminalNode DIV() { return getToken(HiveParser.DIV, 0); }
		public TerminalNode AMPERSAND() { return getToken(HiveParser.AMPERSAND, 0); }
		public TerminalNode TILDE() { return getToken(HiveParser.TILDE, 0); }
		public TerminalNode BITWISEOR() { return getToken(HiveParser.BITWISEOR, 0); }
		public TerminalNode BITWISEXOR() { return getToken(HiveParser.BITWISEXOR, 0); }
		public TerminalNode KW_RLIKE() { return getToken(HiveParser.KW_RLIKE, 0); }
		public TerminalNode KW_REGEXP() { return getToken(HiveParser.KW_REGEXP, 0); }
		public TerminalNode KW_IN() { return getToken(HiveParser.KW_IN, 0); }
		public TerminalNode KW_BETWEEN() { return getToken(HiveParser.KW_BETWEEN, 0); }
		public SysFuncNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sysFuncNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSysFuncNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSysFuncNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSysFuncNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SysFuncNamesContext sysFuncNames() throws RecognitionException {
		SysFuncNamesContext _localctx = new SysFuncNamesContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_sysFuncNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4892);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 34863122432L) != 0) || ((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & 1157988057408864257L) != 0) || ((((_la - 176)) & ~0x3f) == 0 && ((1L << (_la - 176)) & 4399120269313L) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 864761497203507265L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -9223367638808133631L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & 98303L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DescFuncNamesContext extends ParserRuleContext {
		public SysFuncNamesContext sysFuncNames() {
			return getRuleContext(SysFuncNamesContext.class,0);
		}
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public FunctionIdentifierContext functionIdentifier() {
			return getRuleContext(FunctionIdentifierContext.class,0);
		}
		public DescFuncNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_descFuncNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDescFuncNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDescFuncNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDescFuncNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescFuncNamesContext descFuncNames() throws RecognitionException {
		DescFuncNamesContext _localctx = new DescFuncNamesContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_descFuncNames);
		try {
			setState(4897);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4894);
				sysFuncNames();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4895);
				match(StringLiteral);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4896);
				functionIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Id_Context extends ParserRuleContext {
		public TerminalNode Identifier() { return getToken(HiveParser.Identifier, 0); }
		public NonReservedContext nonReserved() {
			return getRuleContext(NonReservedContext.class,0);
		}
		public Id_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterId_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitId_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitId_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Id_Context id_() throws RecognitionException {
		Id_Context _localctx = new Id_Context(_ctx, getState());
		enterRule(_localctx, 896, RULE_id_);
		try {
			setState(4901);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Identifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(4899);
				match(Identifier);
				}
				break;
			case KW_ABORT:
			case KW_ACTIVATE:
			case KW_ACTIVE:
			case KW_ADD:
			case KW_ADMIN:
			case KW_AFTER:
			case KW_ALLOC_FRACTION:
			case KW_ANALYZE:
			case KW_ARCHIVE:
			case KW_ASC:
			case KW_AST:
			case KW_AT:
			case KW_AUTOCOMMIT:
			case KW_BATCH:
			case KW_BEFORE:
			case KW_BUCKET:
			case KW_BUCKETS:
			case KW_CACHE:
			case KW_CASCADE:
			case KW_CBO:
			case KW_CHANGE:
			case KW_CHECK:
			case KW_CLUSTER:
			case KW_CLUSTERED:
			case KW_CLUSTERSTATUS:
			case KW_COLLECTION:
			case KW_COLUMNS:
			case KW_COMMENT:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_COMPUTE:
			case KW_CONCATENATE:
			case KW_CONTINUE:
			case KW_COST:
			case KW_CRON:
			case KW_DATA:
			case KW_DATABASES:
			case KW_DATETIME:
			case KW_DAY:
			case KW_DAYOFWEEK:
			case KW_DBPROPERTIES:
			case KW_DCPROPERTIES:
			case KW_DEBUG:
			case KW_DEFAULT:
			case KW_DEFERRED:
			case KW_DEFINED:
			case KW_DELIMITED:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DETAIL:
			case KW_DIRECTORIES:
			case KW_DIRECTORY:
			case KW_DISABLE:
			case KW_DISTRIBUTE:
			case KW_DISTRIBUTED:
			case KW_DO:
			case KW_DOW:
			case KW_DUMP:
			case KW_ELEM_TYPE:
			case KW_ENABLE:
			case KW_ENFORCED:
			case KW_ESCAPED:
			case KW_EVERY:
			case KW_EXCLUSIVE:
			case KW_EXECUTE:
			case KW_EXECUTED:
			case KW_EXPIRE_SNAPSHOTS:
			case KW_EXPLAIN:
			case KW_EXPORT:
			case KW_EXPRESSION:
			case KW_FIELDS:
			case KW_FILE:
			case KW_FILEFORMAT:
			case KW_FIRST:
			case KW_FORMAT:
			case KW_FORMATTED:
			case KW_FUNCTIONS:
			case KW_HOLD_DDLTIME:
			case KW_HOUR:
			case KW_IDXPROPERTIES:
			case KW_IGNORE:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_INPATH:
			case KW_INPUTDRIVER:
			case KW_INPUTFORMAT:
			case KW_ISOLATION:
			case KW_ITEMS:
			case KW_JAR:
			case KW_JOINCOST:
			case KW_KEY:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LAST:
			case KW_LEVEL:
			case KW_LIMIT:
			case KW_LINES:
			case KW_LOAD:
			case KW_LOCATION:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_LONG:
			case KW_MANAGED:
			case KW_MANAGEDLOCATION:
			case KW_MANAGEMENT:
			case KW_MAPJOIN:
			case KW_MAPPING:
			case KW_MATCHED:
			case KW_MATERIALIZED:
			case KW_METADATA:
			case KW_MINUTE:
			case KW_MONTH:
			case KW_MOVE:
			case KW_MSCK:
			case KW_NORELY:
			case KW_NOSCAN:
			case KW_NOVALIDATE:
			case KW_NO_DROP:
			case KW_NULLS:
			case KW_OFFLINE:
			case KW_OFFSET:
			case KW_OPERATOR:
			case KW_OPTION:
			case KW_OUTPUTDRIVER:
			case KW_OUTPUTFORMAT:
			case KW_OVERWRITE:
			case KW_OWNER:
			case KW_PARTITIONED:
			case KW_PARTITIONS:
			case KW_PATH:
			case KW_PLAN:
			case KW_PLANS:
			case KW_PLUS:
			case KW_POOL:
			case KW_PRINCIPALS:
			case KW_PROTECTION:
			case KW_PURGE:
			case KW_QUARTER:
			case KW_QUERY:
			case KW_QUERY_PARALLELISM:
			case KW_READ:
			case KW_READONLY:
			case KW_REBUILD:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_RELOAD:
			case KW_RELY:
			case KW_REMOTE:
			case KW_RENAME:
			case KW_REOPTIMIZATION:
			case KW_REPAIR:
			case KW_REPL:
			case KW_REPLACE:
			case KW_REPLICATION:
			case KW_RESOURCE:
			case KW_RESPECT:
			case KW_RESTRICT:
			case KW_REWRITE:
			case KW_ROLE:
			case KW_ROLES:
			case KW_SCHEDULED:
			case KW_SCHEDULING_POLICY:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SECOND:
			case KW_SEMI:
			case KW_SERDE:
			case KW_SERDEPROPERTIES:
			case KW_SERVER:
			case KW_SETS:
			case KW_SET_CURRENT_SNAPSHOT:
			case KW_SHARED:
			case KW_SHOW:
			case KW_SHOW_DATABASE:
			case KW_SKEWED:
			case KW_SNAPSHOT:
			case KW_SORT:
			case KW_SORTED:
			case KW_SPEC:
			case KW_SSL:
			case KW_STATISTICS:
			case KW_STATUS:
			case KW_STORED:
			case KW_STREAMTABLE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_SUMMARY:
			case KW_SYSTEM_TIME:
			case KW_SYSTEM_VERSION:
			case KW_TABLES:
			case KW_TBLPROPERTIES:
			case KW_TEMPORARY:
			case KW_TERMINATED:
			case KW_TIMESTAMPTZ:
			case KW_TINYINT:
			case KW_TOUCH:
			case KW_TRANSACTION:
			case KW_TRANSACTIONAL:
			case KW_TRANSACTIONS:
			case KW_TRIM:
			case KW_TYPE:
			case KW_UNARCHIVE:
			case KW_UNDO:
			case KW_UNIONTYPE:
			case KW_UNKNOWN:
			case KW_UNLOCK:
			case KW_UNMANAGED:
			case KW_UNSET:
			case KW_UNSIGNED:
			case KW_URI:
			case KW_URL:
			case KW_USE:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_VALIDATE:
			case KW_VALUE_TYPE:
			case KW_VECTORIZATION:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_WAIT:
			case KW_WEEK:
			case KW_WHILE:
			case KW_WITHIN:
			case KW_WORK:
			case KW_WORKLOAD:
			case KW_WRITE:
			case KW_YEAR:
			case KW_ZONE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4900);
				nonReserved();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionIdentifierContext extends ParserRuleContext {
		public Id_Context fn;
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode DOT() { return getToken(HiveParser.DOT, 0); }
		public FunctionIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterFunctionIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitFunctionIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitFunctionIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionIdentifierContext functionIdentifier() throws RecognitionException {
		FunctionIdentifierContext _localctx = new FunctionIdentifierContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_functionIdentifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4903);
			id_();
			setState(4906);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(4904);
				match(DOT);
				setState(4905);
				((FunctionIdentifierContext)_localctx).fn = id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrincipalIdentifierContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public PrincipalIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_principalIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrincipalIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrincipalIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrincipalIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrincipalIdentifierContext principalIdentifier() throws RecognitionException {
		PrincipalIdentifierContext _localctx = new PrincipalIdentifierContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_principalIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4908);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NonReservedContext extends ParserRuleContext {
		public TerminalNode KW_ABORT() { return getToken(HiveParser.KW_ABORT, 0); }
		public TerminalNode KW_ACTIVATE() { return getToken(HiveParser.KW_ACTIVATE, 0); }
		public TerminalNode KW_ACTIVE() { return getToken(HiveParser.KW_ACTIVE, 0); }
		public TerminalNode KW_ADD() { return getToken(HiveParser.KW_ADD, 0); }
		public TerminalNode KW_ADMIN() { return getToken(HiveParser.KW_ADMIN, 0); }
		public TerminalNode KW_AFTER() { return getToken(HiveParser.KW_AFTER, 0); }
		public TerminalNode KW_ALLOC_FRACTION() { return getToken(HiveParser.KW_ALLOC_FRACTION, 0); }
		public TerminalNode KW_ANALYZE() { return getToken(HiveParser.KW_ANALYZE, 0); }
		public TerminalNode KW_ARCHIVE() { return getToken(HiveParser.KW_ARCHIVE, 0); }
		public TerminalNode KW_ASC() { return getToken(HiveParser.KW_ASC, 0); }
		public TerminalNode KW_AST() { return getToken(HiveParser.KW_AST, 0); }
		public TerminalNode KW_AT() { return getToken(HiveParser.KW_AT, 0); }
		public TerminalNode KW_AUTOCOMMIT() { return getToken(HiveParser.KW_AUTOCOMMIT, 0); }
		public TerminalNode KW_BATCH() { return getToken(HiveParser.KW_BATCH, 0); }
		public TerminalNode KW_BEFORE() { return getToken(HiveParser.KW_BEFORE, 0); }
		public TerminalNode KW_BUCKET() { return getToken(HiveParser.KW_BUCKET, 0); }
		public TerminalNode KW_BUCKETS() { return getToken(HiveParser.KW_BUCKETS, 0); }
		public TerminalNode KW_CACHE() { return getToken(HiveParser.KW_CACHE, 0); }
		public TerminalNode KW_CASCADE() { return getToken(HiveParser.KW_CASCADE, 0); }
		public TerminalNode KW_CBO() { return getToken(HiveParser.KW_CBO, 0); }
		public TerminalNode KW_CHANGE() { return getToken(HiveParser.KW_CHANGE, 0); }
		public TerminalNode KW_CHECK() { return getToken(HiveParser.KW_CHECK, 0); }
		public TerminalNode KW_CLUSTER() { return getToken(HiveParser.KW_CLUSTER, 0); }
		public TerminalNode KW_CLUSTERED() { return getToken(HiveParser.KW_CLUSTERED, 0); }
		public TerminalNode KW_CLUSTERSTATUS() { return getToken(HiveParser.KW_CLUSTERSTATUS, 0); }
		public TerminalNode KW_COLLECTION() { return getToken(HiveParser.KW_COLLECTION, 0); }
		public TerminalNode KW_COLUMNS() { return getToken(HiveParser.KW_COLUMNS, 0); }
		public TerminalNode KW_COMMENT() { return getToken(HiveParser.KW_COMMENT, 0); }
		public TerminalNode KW_COMPACT() { return getToken(HiveParser.KW_COMPACT, 0); }
		public TerminalNode KW_COMPACTIONS() { return getToken(HiveParser.KW_COMPACTIONS, 0); }
		public TerminalNode KW_COMPUTE() { return getToken(HiveParser.KW_COMPUTE, 0); }
		public TerminalNode KW_CONCATENATE() { return getToken(HiveParser.KW_CONCATENATE, 0); }
		public TerminalNode KW_CONTINUE() { return getToken(HiveParser.KW_CONTINUE, 0); }
		public TerminalNode KW_COST() { return getToken(HiveParser.KW_COST, 0); }
		public TerminalNode KW_CRON() { return getToken(HiveParser.KW_CRON, 0); }
		public TerminalNode KW_DATA() { return getToken(HiveParser.KW_DATA, 0); }
		public TerminalNode KW_DATABASES() { return getToken(HiveParser.KW_DATABASES, 0); }
		public TerminalNode KW_DATETIME() { return getToken(HiveParser.KW_DATETIME, 0); }
		public TerminalNode KW_DAY() { return getToken(HiveParser.KW_DAY, 0); }
		public TerminalNode KW_DAYOFWEEK() { return getToken(HiveParser.KW_DAYOFWEEK, 0); }
		public TerminalNode KW_DBPROPERTIES() { return getToken(HiveParser.KW_DBPROPERTIES, 0); }
		public TerminalNode KW_DCPROPERTIES() { return getToken(HiveParser.KW_DCPROPERTIES, 0); }
		public TerminalNode KW_DEBUG() { return getToken(HiveParser.KW_DEBUG, 0); }
		public TerminalNode KW_DEFAULT() { return getToken(HiveParser.KW_DEFAULT, 0); }
		public TerminalNode KW_DEFERRED() { return getToken(HiveParser.KW_DEFERRED, 0); }
		public TerminalNode KW_DEFINED() { return getToken(HiveParser.KW_DEFINED, 0); }
		public TerminalNode KW_DELIMITED() { return getToken(HiveParser.KW_DELIMITED, 0); }
		public TerminalNode KW_DEPENDENCY() { return getToken(HiveParser.KW_DEPENDENCY, 0); }
		public TerminalNode KW_DESC() { return getToken(HiveParser.KW_DESC, 0); }
		public TerminalNode KW_DETAIL() { return getToken(HiveParser.KW_DETAIL, 0); }
		public TerminalNode KW_DIRECTORIES() { return getToken(HiveParser.KW_DIRECTORIES, 0); }
		public TerminalNode KW_DIRECTORY() { return getToken(HiveParser.KW_DIRECTORY, 0); }
		public TerminalNode KW_DISABLE() { return getToken(HiveParser.KW_DISABLE, 0); }
		public TerminalNode KW_DISTRIBUTE() { return getToken(HiveParser.KW_DISTRIBUTE, 0); }
		public TerminalNode KW_DISTRIBUTED() { return getToken(HiveParser.KW_DISTRIBUTED, 0); }
		public TerminalNode KW_DO() { return getToken(HiveParser.KW_DO, 0); }
		public TerminalNode KW_DOW() { return getToken(HiveParser.KW_DOW, 0); }
		public TerminalNode KW_DUMP() { return getToken(HiveParser.KW_DUMP, 0); }
		public TerminalNode KW_ELEM_TYPE() { return getToken(HiveParser.KW_ELEM_TYPE, 0); }
		public TerminalNode KW_ENABLE() { return getToken(HiveParser.KW_ENABLE, 0); }
		public TerminalNode KW_ENFORCED() { return getToken(HiveParser.KW_ENFORCED, 0); }
		public TerminalNode KW_ESCAPED() { return getToken(HiveParser.KW_ESCAPED, 0); }
		public TerminalNode KW_EVERY() { return getToken(HiveParser.KW_EVERY, 0); }
		public TerminalNode KW_EXCLUSIVE() { return getToken(HiveParser.KW_EXCLUSIVE, 0); }
		public TerminalNode KW_EXECUTE() { return getToken(HiveParser.KW_EXECUTE, 0); }
		public TerminalNode KW_EXECUTED() { return getToken(HiveParser.KW_EXECUTED, 0); }
		public TerminalNode KW_EXPIRE_SNAPSHOTS() { return getToken(HiveParser.KW_EXPIRE_SNAPSHOTS, 0); }
		public TerminalNode KW_EXPLAIN() { return getToken(HiveParser.KW_EXPLAIN, 0); }
		public TerminalNode KW_EXPORT() { return getToken(HiveParser.KW_EXPORT, 0); }
		public TerminalNode KW_EXPRESSION() { return getToken(HiveParser.KW_EXPRESSION, 0); }
		public TerminalNode KW_FIELDS() { return getToken(HiveParser.KW_FIELDS, 0); }
		public TerminalNode KW_FILE() { return getToken(HiveParser.KW_FILE, 0); }
		public TerminalNode KW_FILEFORMAT() { return getToken(HiveParser.KW_FILEFORMAT, 0); }
		public TerminalNode KW_FIRST() { return getToken(HiveParser.KW_FIRST, 0); }
		public TerminalNode KW_FORMAT() { return getToken(HiveParser.KW_FORMAT, 0); }
		public TerminalNode KW_FORMATTED() { return getToken(HiveParser.KW_FORMATTED, 0); }
		public TerminalNode KW_FUNCTIONS() { return getToken(HiveParser.KW_FUNCTIONS, 0); }
		public TerminalNode KW_HOLD_DDLTIME() { return getToken(HiveParser.KW_HOLD_DDLTIME, 0); }
		public TerminalNode KW_HOUR() { return getToken(HiveParser.KW_HOUR, 0); }
		public TerminalNode KW_IDXPROPERTIES() { return getToken(HiveParser.KW_IDXPROPERTIES, 0); }
		public TerminalNode KW_IGNORE() { return getToken(HiveParser.KW_IGNORE, 0); }
		public TerminalNode KW_INDEX() { return getToken(HiveParser.KW_INDEX, 0); }
		public TerminalNode KW_INDEXES() { return getToken(HiveParser.KW_INDEXES, 0); }
		public TerminalNode KW_INPATH() { return getToken(HiveParser.KW_INPATH, 0); }
		public TerminalNode KW_INPUTDRIVER() { return getToken(HiveParser.KW_INPUTDRIVER, 0); }
		public TerminalNode KW_INPUTFORMAT() { return getToken(HiveParser.KW_INPUTFORMAT, 0); }
		public TerminalNode KW_ISOLATION() { return getToken(HiveParser.KW_ISOLATION, 0); }
		public TerminalNode KW_ITEMS() { return getToken(HiveParser.KW_ITEMS, 0); }
		public TerminalNode KW_JAR() { return getToken(HiveParser.KW_JAR, 0); }
		public TerminalNode KW_JOINCOST() { return getToken(HiveParser.KW_JOINCOST, 0); }
		public TerminalNode KW_KEY() { return getToken(HiveParser.KW_KEY, 0); }
		public TerminalNode KW_KEYS() { return getToken(HiveParser.KW_KEYS, 0); }
		public TerminalNode KW_KEY_TYPE() { return getToken(HiveParser.KW_KEY_TYPE, 0); }
		public TerminalNode KW_KILL() { return getToken(HiveParser.KW_KILL, 0); }
		public TerminalNode KW_LAST() { return getToken(HiveParser.KW_LAST, 0); }
		public TerminalNode KW_LEVEL() { return getToken(HiveParser.KW_LEVEL, 0); }
		public TerminalNode KW_LIMIT() { return getToken(HiveParser.KW_LIMIT, 0); }
		public TerminalNode KW_LINES() { return getToken(HiveParser.KW_LINES, 0); }
		public TerminalNode KW_LOAD() { return getToken(HiveParser.KW_LOAD, 0); }
		public TerminalNode KW_LOCATION() { return getToken(HiveParser.KW_LOCATION, 0); }
		public TerminalNode KW_LOCK() { return getToken(HiveParser.KW_LOCK, 0); }
		public TerminalNode KW_LOCKS() { return getToken(HiveParser.KW_LOCKS, 0); }
		public TerminalNode KW_LOGICAL() { return getToken(HiveParser.KW_LOGICAL, 0); }
		public TerminalNode KW_LONG() { return getToken(HiveParser.KW_LONG, 0); }
		public TerminalNode KW_MANAGED() { return getToken(HiveParser.KW_MANAGED, 0); }
		public TerminalNode KW_MANAGEDLOCATION() { return getToken(HiveParser.KW_MANAGEDLOCATION, 0); }
		public TerminalNode KW_MANAGEMENT() { return getToken(HiveParser.KW_MANAGEMENT, 0); }
		public TerminalNode KW_MAPJOIN() { return getToken(HiveParser.KW_MAPJOIN, 0); }
		public TerminalNode KW_MAPPING() { return getToken(HiveParser.KW_MAPPING, 0); }
		public TerminalNode KW_MATCHED() { return getToken(HiveParser.KW_MATCHED, 0); }
		public TerminalNode KW_MATERIALIZED() { return getToken(HiveParser.KW_MATERIALIZED, 0); }
		public TerminalNode KW_METADATA() { return getToken(HiveParser.KW_METADATA, 0); }
		public TerminalNode KW_MINUTE() { return getToken(HiveParser.KW_MINUTE, 0); }
		public TerminalNode KW_MONTH() { return getToken(HiveParser.KW_MONTH, 0); }
		public TerminalNode KW_MOVE() { return getToken(HiveParser.KW_MOVE, 0); }
		public TerminalNode KW_MSCK() { return getToken(HiveParser.KW_MSCK, 0); }
		public TerminalNode KW_NORELY() { return getToken(HiveParser.KW_NORELY, 0); }
		public TerminalNode KW_NOSCAN() { return getToken(HiveParser.KW_NOSCAN, 0); }
		public TerminalNode KW_NOVALIDATE() { return getToken(HiveParser.KW_NOVALIDATE, 0); }
		public TerminalNode KW_NO_DROP() { return getToken(HiveParser.KW_NO_DROP, 0); }
		public TerminalNode KW_NULLS() { return getToken(HiveParser.KW_NULLS, 0); }
		public TerminalNode KW_OFFLINE() { return getToken(HiveParser.KW_OFFLINE, 0); }
		public TerminalNode KW_OFFSET() { return getToken(HiveParser.KW_OFFSET, 0); }
		public TerminalNode KW_OPERATOR() { return getToken(HiveParser.KW_OPERATOR, 0); }
		public TerminalNode KW_OPTION() { return getToken(HiveParser.KW_OPTION, 0); }
		public TerminalNode KW_OUTPUTDRIVER() { return getToken(HiveParser.KW_OUTPUTDRIVER, 0); }
		public TerminalNode KW_OUTPUTFORMAT() { return getToken(HiveParser.KW_OUTPUTFORMAT, 0); }
		public TerminalNode KW_OVERWRITE() { return getToken(HiveParser.KW_OVERWRITE, 0); }
		public TerminalNode KW_OWNER() { return getToken(HiveParser.KW_OWNER, 0); }
		public TerminalNode KW_PARTITIONED() { return getToken(HiveParser.KW_PARTITIONED, 0); }
		public TerminalNode KW_PARTITIONS() { return getToken(HiveParser.KW_PARTITIONS, 0); }
		public TerminalNode KW_PATH() { return getToken(HiveParser.KW_PATH, 0); }
		public TerminalNode KW_PLAN() { return getToken(HiveParser.KW_PLAN, 0); }
		public TerminalNode KW_PLANS() { return getToken(HiveParser.KW_PLANS, 0); }
		public TerminalNode KW_PLUS() { return getToken(HiveParser.KW_PLUS, 0); }
		public TerminalNode KW_POOL() { return getToken(HiveParser.KW_POOL, 0); }
		public TerminalNode KW_PRINCIPALS() { return getToken(HiveParser.KW_PRINCIPALS, 0); }
		public TerminalNode KW_PROTECTION() { return getToken(HiveParser.KW_PROTECTION, 0); }
		public TerminalNode KW_PURGE() { return getToken(HiveParser.KW_PURGE, 0); }
		public TerminalNode KW_QUARTER() { return getToken(HiveParser.KW_QUARTER, 0); }
		public TerminalNode KW_QUERY() { return getToken(HiveParser.KW_QUERY, 0); }
		public TerminalNode KW_QUERY_PARALLELISM() { return getToken(HiveParser.KW_QUERY_PARALLELISM, 0); }
		public TerminalNode KW_READ() { return getToken(HiveParser.KW_READ, 0); }
		public TerminalNode KW_READONLY() { return getToken(HiveParser.KW_READONLY, 0); }
		public TerminalNode KW_REBUILD() { return getToken(HiveParser.KW_REBUILD, 0); }
		public TerminalNode KW_RECORDREADER() { return getToken(HiveParser.KW_RECORDREADER, 0); }
		public TerminalNode KW_RECORDWRITER() { return getToken(HiveParser.KW_RECORDWRITER, 0); }
		public TerminalNode KW_RELOAD() { return getToken(HiveParser.KW_RELOAD, 0); }
		public TerminalNode KW_RELY() { return getToken(HiveParser.KW_RELY, 0); }
		public TerminalNode KW_REMOTE() { return getToken(HiveParser.KW_REMOTE, 0); }
		public TerminalNode KW_RENAME() { return getToken(HiveParser.KW_RENAME, 0); }
		public TerminalNode KW_REOPTIMIZATION() { return getToken(HiveParser.KW_REOPTIMIZATION, 0); }
		public TerminalNode KW_REPAIR() { return getToken(HiveParser.KW_REPAIR, 0); }
		public TerminalNode KW_REPL() { return getToken(HiveParser.KW_REPL, 0); }
		public TerminalNode KW_REPLACE() { return getToken(HiveParser.KW_REPLACE, 0); }
		public TerminalNode KW_REPLICATION() { return getToken(HiveParser.KW_REPLICATION, 0); }
		public TerminalNode KW_RESOURCE() { return getToken(HiveParser.KW_RESOURCE, 0); }
		public TerminalNode KW_RESPECT() { return getToken(HiveParser.KW_RESPECT, 0); }
		public TerminalNode KW_RESTRICT() { return getToken(HiveParser.KW_RESTRICT, 0); }
		public TerminalNode KW_REWRITE() { return getToken(HiveParser.KW_REWRITE, 0); }
		public TerminalNode KW_ROLE() { return getToken(HiveParser.KW_ROLE, 0); }
		public TerminalNode KW_ROLES() { return getToken(HiveParser.KW_ROLES, 0); }
		public TerminalNode KW_SCHEDULED() { return getToken(HiveParser.KW_SCHEDULED, 0); }
		public TerminalNode KW_SCHEDULING_POLICY() { return getToken(HiveParser.KW_SCHEDULING_POLICY, 0); }
		public TerminalNode KW_SCHEMA() { return getToken(HiveParser.KW_SCHEMA, 0); }
		public TerminalNode KW_SCHEMAS() { return getToken(HiveParser.KW_SCHEMAS, 0); }
		public TerminalNode KW_SECOND() { return getToken(HiveParser.KW_SECOND, 0); }
		public TerminalNode KW_SEMI() { return getToken(HiveParser.KW_SEMI, 0); }
		public TerminalNode KW_SERDE() { return getToken(HiveParser.KW_SERDE, 0); }
		public TerminalNode KW_SERDEPROPERTIES() { return getToken(HiveParser.KW_SERDEPROPERTIES, 0); }
		public TerminalNode KW_SERVER() { return getToken(HiveParser.KW_SERVER, 0); }
		public TerminalNode KW_SETS() { return getToken(HiveParser.KW_SETS, 0); }
		public TerminalNode KW_SET_CURRENT_SNAPSHOT() { return getToken(HiveParser.KW_SET_CURRENT_SNAPSHOT, 0); }
		public TerminalNode KW_SHARED() { return getToken(HiveParser.KW_SHARED, 0); }
		public TerminalNode KW_SHOW() { return getToken(HiveParser.KW_SHOW, 0); }
		public TerminalNode KW_SHOW_DATABASE() { return getToken(HiveParser.KW_SHOW_DATABASE, 0); }
		public TerminalNode KW_SKEWED() { return getToken(HiveParser.KW_SKEWED, 0); }
		public TerminalNode KW_SNAPSHOT() { return getToken(HiveParser.KW_SNAPSHOT, 0); }
		public TerminalNode KW_SORT() { return getToken(HiveParser.KW_SORT, 0); }
		public TerminalNode KW_SORTED() { return getToken(HiveParser.KW_SORTED, 0); }
		public TerminalNode KW_SPEC() { return getToken(HiveParser.KW_SPEC, 0); }
		public TerminalNode KW_SSL() { return getToken(HiveParser.KW_SSL, 0); }
		public TerminalNode KW_STATISTICS() { return getToken(HiveParser.KW_STATISTICS, 0); }
		public TerminalNode KW_STATUS() { return getToken(HiveParser.KW_STATUS, 0); }
		public TerminalNode KW_STORED() { return getToken(HiveParser.KW_STORED, 0); }
		public TerminalNode KW_STREAMTABLE() { return getToken(HiveParser.KW_STREAMTABLE, 0); }
		public TerminalNode KW_STRING() { return getToken(HiveParser.KW_STRING, 0); }
		public TerminalNode KW_STRUCT() { return getToken(HiveParser.KW_STRUCT, 0); }
		public TerminalNode KW_SUMMARY() { return getToken(HiveParser.KW_SUMMARY, 0); }
		public TerminalNode KW_SYSTEM_TIME() { return getToken(HiveParser.KW_SYSTEM_TIME, 0); }
		public TerminalNode KW_SYSTEM_VERSION() { return getToken(HiveParser.KW_SYSTEM_VERSION, 0); }
		public TerminalNode KW_TABLES() { return getToken(HiveParser.KW_TABLES, 0); }
		public TerminalNode KW_TBLPROPERTIES() { return getToken(HiveParser.KW_TBLPROPERTIES, 0); }
		public TerminalNode KW_TEMPORARY() { return getToken(HiveParser.KW_TEMPORARY, 0); }
		public TerminalNode KW_TERMINATED() { return getToken(HiveParser.KW_TERMINATED, 0); }
		public TerminalNode KW_TIMESTAMPTZ() { return getToken(HiveParser.KW_TIMESTAMPTZ, 0); }
		public TerminalNode KW_TINYINT() { return getToken(HiveParser.KW_TINYINT, 0); }
		public TerminalNode KW_TOUCH() { return getToken(HiveParser.KW_TOUCH, 0); }
		public TerminalNode KW_TRANSACTION() { return getToken(HiveParser.KW_TRANSACTION, 0); }
		public TerminalNode KW_TRANSACTIONAL() { return getToken(HiveParser.KW_TRANSACTIONAL, 0); }
		public TerminalNode KW_TRANSACTIONS() { return getToken(HiveParser.KW_TRANSACTIONS, 0); }
		public TerminalNode KW_TRIM() { return getToken(HiveParser.KW_TRIM, 0); }
		public TerminalNode KW_TYPE() { return getToken(HiveParser.KW_TYPE, 0); }
		public TerminalNode KW_UNARCHIVE() { return getToken(HiveParser.KW_UNARCHIVE, 0); }
		public TerminalNode KW_UNDO() { return getToken(HiveParser.KW_UNDO, 0); }
		public TerminalNode KW_UNIONTYPE() { return getToken(HiveParser.KW_UNIONTYPE, 0); }
		public TerminalNode KW_UNKNOWN() { return getToken(HiveParser.KW_UNKNOWN, 0); }
		public TerminalNode KW_UNLOCK() { return getToken(HiveParser.KW_UNLOCK, 0); }
		public TerminalNode KW_UNMANAGED() { return getToken(HiveParser.KW_UNMANAGED, 0); }
		public TerminalNode KW_UNSET() { return getToken(HiveParser.KW_UNSET, 0); }
		public TerminalNode KW_UNSIGNED() { return getToken(HiveParser.KW_UNSIGNED, 0); }
		public TerminalNode KW_URI() { return getToken(HiveParser.KW_URI, 0); }
		public TerminalNode KW_URL() { return getToken(HiveParser.KW_URL, 0); }
		public TerminalNode KW_USE() { return getToken(HiveParser.KW_USE, 0); }
		public TerminalNode KW_UTC() { return getToken(HiveParser.KW_UTC, 0); }
		public TerminalNode KW_UTCTIMESTAMP() { return getToken(HiveParser.KW_UTCTIMESTAMP, 0); }
		public TerminalNode KW_VALIDATE() { return getToken(HiveParser.KW_VALIDATE, 0); }
		public TerminalNode KW_VALUE_TYPE() { return getToken(HiveParser.KW_VALUE_TYPE, 0); }
		public TerminalNode KW_VECTORIZATION() { return getToken(HiveParser.KW_VECTORIZATION, 0); }
		public TerminalNode KW_VIEW() { return getToken(HiveParser.KW_VIEW, 0); }
		public TerminalNode KW_VIEWS() { return getToken(HiveParser.KW_VIEWS, 0); }
		public TerminalNode KW_WAIT() { return getToken(HiveParser.KW_WAIT, 0); }
		public TerminalNode KW_WEEK() { return getToken(HiveParser.KW_WEEK, 0); }
		public TerminalNode KW_WHILE() { return getToken(HiveParser.KW_WHILE, 0); }
		public TerminalNode KW_WITHIN() { return getToken(HiveParser.KW_WITHIN, 0); }
		public TerminalNode KW_WORK() { return getToken(HiveParser.KW_WORK, 0); }
		public TerminalNode KW_WORKLOAD() { return getToken(HiveParser.KW_WORKLOAD, 0); }
		public TerminalNode KW_WRITE() { return getToken(HiveParser.KW_WRITE, 0); }
		public TerminalNode KW_YEAR() { return getToken(HiveParser.KW_YEAR, 0); }
		public TerminalNode KW_ZONE() { return getToken(HiveParser.KW_ZONE, 0); }
		public NonReservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonReserved; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterNonReserved(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitNonReserved(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitNonReserved(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonReservedContext nonReserved() throws RecognitionException {
		NonReservedContext _localctx = new NonReservedContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_nonReserved);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4910);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 808078815591695742L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 1083038567331911621L) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 8916819943869537315L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & 4159991143015340909L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8484708576009596927L) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & 17776728909112555L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sql11ReservedKeywordsUsedAsFunctionNameContext extends ParserRuleContext {
		public TerminalNode KW_ARRAY() { return getToken(HiveParser.KW_ARRAY, 0); }
		public TerminalNode KW_BIGINT() { return getToken(HiveParser.KW_BIGINT, 0); }
		public TerminalNode KW_BINARY() { return getToken(HiveParser.KW_BINARY, 0); }
		public TerminalNode KW_BOOLEAN() { return getToken(HiveParser.KW_BOOLEAN, 0); }
		public TerminalNode KW_CURRENT_DATE() { return getToken(HiveParser.KW_CURRENT_DATE, 0); }
		public TerminalNode KW_CURRENT_TIMESTAMP() { return getToken(HiveParser.KW_CURRENT_TIMESTAMP, 0); }
		public TerminalNode KW_DATE() { return getToken(HiveParser.KW_DATE, 0); }
		public TerminalNode KW_DOUBLE() { return getToken(HiveParser.KW_DOUBLE, 0); }
		public TerminalNode KW_FLOAT() { return getToken(HiveParser.KW_FLOAT, 0); }
		public TerminalNode KW_GROUPING() { return getToken(HiveParser.KW_GROUPING, 0); }
		public TerminalNode KW_IF() { return getToken(HiveParser.KW_IF, 0); }
		public TerminalNode KW_INT() { return getToken(HiveParser.KW_INT, 0); }
		public TerminalNode KW_MAP() { return getToken(HiveParser.KW_MAP, 0); }
		public TerminalNode KW_REAL() { return getToken(HiveParser.KW_REAL, 0); }
		public TerminalNode KW_SMALLINT() { return getToken(HiveParser.KW_SMALLINT, 0); }
		public TerminalNode KW_TIMESTAMP() { return getToken(HiveParser.KW_TIMESTAMP, 0); }
		public Sql11ReservedKeywordsUsedAsFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql11ReservedKeywordsUsedAsFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterSql11ReservedKeywordsUsedAsFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitSql11ReservedKeywordsUsedAsFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitSql11ReservedKeywordsUsedAsFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql11ReservedKeywordsUsedAsFunctionNameContext sql11ReservedKeywordsUsedAsFunctionName() throws RecognitionException {
		Sql11ReservedKeywordsUsedAsFunctionNameContext _localctx = new Sql11ReservedKeywordsUsedAsFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_sql11ReservedKeywordsUsedAsFunctionName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4912);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223372036384948224L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4611686022722355329L) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 1125899906908193L) != 0) || _la==KW_REAL || _la==KW_SMALLINT || _la==KW_TIMESTAMP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HintContext extends ParserRuleContext {
		public HintListContext hintList() {
			return getRuleContext(HintListContext.class,0);
		}
		public TerminalNode EOF() { return getToken(HiveParser.EOF, 0); }
		public HintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HintContext hint() throws RecognitionException {
		HintContext _localctx = new HintContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_hint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4914);
			hintList();
			setState(4915);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HintListContext extends ParserRuleContext {
		public List<HintItemContext> hintItem() {
			return getRuleContexts(HintItemContext.class);
		}
		public HintItemContext hintItem(int i) {
			return getRuleContext(HintItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public HintListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hintList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterHintList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitHintList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitHintList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HintListContext hintList() throws RecognitionException {
		HintListContext _localctx = new HintListContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_hintList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4917);
			hintItem();
			setState(4922);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4918);
				match(COMMA);
				setState(4919);
				hintItem();
				}
				}
				setState(4924);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HintItemContext extends ParserRuleContext {
		public HintNameContext hintName() {
			return getRuleContext(HintNameContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(HiveParser.LPAREN, 0); }
		public HintArgsContext hintArgs() {
			return getRuleContext(HintArgsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(HiveParser.RPAREN, 0); }
		public HintItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hintItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterHintItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitHintItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitHintItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HintItemContext hintItem() throws RecognitionException {
		HintItemContext _localctx = new HintItemContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_hintItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4925);
			hintName();
			setState(4930);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LPAREN) {
				{
				setState(4926);
				match(LPAREN);
				setState(4927);
				hintArgs();
				setState(4928);
				match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HintNameContext extends ParserRuleContext {
		public TerminalNode KW_MAPJOIN() { return getToken(HiveParser.KW_MAPJOIN, 0); }
		public TerminalNode KW_SEMI() { return getToken(HiveParser.KW_SEMI, 0); }
		public TerminalNode KW_STREAMTABLE() { return getToken(HiveParser.KW_STREAMTABLE, 0); }
		public TerminalNode KW_PKFK_JOIN() { return getToken(HiveParser.KW_PKFK_JOIN, 0); }
		public HintNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hintName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterHintName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitHintName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitHintName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HintNameContext hintName() throws RecognitionException {
		HintNameContext _localctx = new HintNameContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_hintName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4932);
			_la = _input.LA(1);
			if ( !(_la==KW_MAPJOIN || _la==KW_PKFK_JOIN || _la==KW_SEMI || _la==KW_STREAMTABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HintArgsContext extends ParserRuleContext {
		public List<HintArgNameContext> hintArgName() {
			return getRuleContexts(HintArgNameContext.class);
		}
		public HintArgNameContext hintArgName(int i) {
			return getRuleContext(HintArgNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public HintArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hintArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterHintArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitHintArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitHintArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HintArgsContext hintArgs() throws RecognitionException {
		HintArgsContext _localctx = new HintArgsContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_hintArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4934);
			hintArgName();
			setState(4939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4935);
				match(COMMA);
				setState(4936);
				hintArgName();
				}
				}
				setState(4941);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HintArgNameContext extends ParserRuleContext {
		public TerminalNode Identifier() { return getToken(HiveParser.Identifier, 0); }
		public TerminalNode Number() { return getToken(HiveParser.Number, 0); }
		public TerminalNode KW_NONE() { return getToken(HiveParser.KW_NONE, 0); }
		public HintArgNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hintArgName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterHintArgName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitHintArgName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitHintArgName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HintArgNameContext hintArgName() throws RecognitionException {
		HintArgNameContext _localctx = new HintArgNameContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_hintArgName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4942);
			_la = _input.LA(1);
			if ( !(_la==KW_NONE || _la==Number || _la==Identifier) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrepareStatementContext extends ParserRuleContext {
		public TerminalNode KW_PREPARE() { return getToken(HiveParser.KW_PREPARE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode KW_FROM() { return getToken(HiveParser.KW_FROM, 0); }
		public QueryStatementExpressionContext queryStatementExpression() {
			return getRuleContext(QueryStatementExpressionContext.class,0);
		}
		public PrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepareStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPrepareStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPrepareStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPrepareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareStatementContext prepareStatement() throws RecognitionException {
		PrepareStatementContext _localctx = new PrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_prepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4944);
			match(KW_PREPARE);
			setState(4945);
			id_();
			setState(4946);
			match(KW_FROM);
			setState(4947);
			queryStatementExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExecuteStatementContext extends ParserRuleContext {
		public TerminalNode KW_EXECUTE() { return getToken(HiveParser.KW_EXECUTE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode KW_USING() { return getToken(HiveParser.KW_USING, 0); }
		public ExecuteParamListContext executeParamList() {
			return getRuleContext(ExecuteParamListContext.class,0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterExecuteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitExecuteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitExecuteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStatementContext executeStatement() throws RecognitionException {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_executeStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4949);
			match(KW_EXECUTE);
			setState(4950);
			id_();
			setState(4951);
			match(KW_USING);
			setState(4952);
			executeParamList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExecuteParamListContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public ExecuteParamListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeParamList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterExecuteParamList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitExecuteParamList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitExecuteParamList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteParamListContext executeParamList() throws RecognitionException {
		ExecuteParamListContext _localctx = new ExecuteParamListContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_executeParamList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4954);
			constant();
			setState(4959);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4955);
				match(COMMA);
				setState(4956);
				constant();
				}
				}
				setState(4961);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResourcePlanDdlStatementsContext extends ParserRuleContext {
		public CreateResourcePlanStatementContext createResourcePlanStatement() {
			return getRuleContext(CreateResourcePlanStatementContext.class,0);
		}
		public AlterResourcePlanStatementContext alterResourcePlanStatement() {
			return getRuleContext(AlterResourcePlanStatementContext.class,0);
		}
		public DropResourcePlanStatementContext dropResourcePlanStatement() {
			return getRuleContext(DropResourcePlanStatementContext.class,0);
		}
		public GlobalWmStatementContext globalWmStatement() {
			return getRuleContext(GlobalWmStatementContext.class,0);
		}
		public ReplaceResourcePlanStatementContext replaceResourcePlanStatement() {
			return getRuleContext(ReplaceResourcePlanStatementContext.class,0);
		}
		public CreateTriggerStatementContext createTriggerStatement() {
			return getRuleContext(CreateTriggerStatementContext.class,0);
		}
		public AlterTriggerStatementContext alterTriggerStatement() {
			return getRuleContext(AlterTriggerStatementContext.class,0);
		}
		public DropTriggerStatementContext dropTriggerStatement() {
			return getRuleContext(DropTriggerStatementContext.class,0);
		}
		public CreatePoolStatementContext createPoolStatement() {
			return getRuleContext(CreatePoolStatementContext.class,0);
		}
		public AlterPoolStatementContext alterPoolStatement() {
			return getRuleContext(AlterPoolStatementContext.class,0);
		}
		public DropPoolStatementContext dropPoolStatement() {
			return getRuleContext(DropPoolStatementContext.class,0);
		}
		public CreateMappingStatementContext createMappingStatement() {
			return getRuleContext(CreateMappingStatementContext.class,0);
		}
		public AlterMappingStatementContext alterMappingStatement() {
			return getRuleContext(AlterMappingStatementContext.class,0);
		}
		public DropMappingStatementContext dropMappingStatement() {
			return getRuleContext(DropMappingStatementContext.class,0);
		}
		public ResourcePlanDdlStatementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourcePlanDdlStatements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterResourcePlanDdlStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitResourcePlanDdlStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitResourcePlanDdlStatements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResourcePlanDdlStatementsContext resourcePlanDdlStatements() throws RecognitionException {
		ResourcePlanDdlStatementsContext _localctx = new ResourcePlanDdlStatementsContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_resourcePlanDdlStatements);
		try {
			setState(4976);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,585,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4962);
				createResourcePlanStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4963);
				alterResourcePlanStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4964);
				dropResourcePlanStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4965);
				globalWmStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4966);
				replaceResourcePlanStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4967);
				createTriggerStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4968);
				alterTriggerStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4969);
				dropTriggerStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4970);
				createPoolStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4971);
				alterPoolStatement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4972);
				dropPoolStatement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4973);
				createMappingStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4974);
				alterMappingStatement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4975);
				dropMappingStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RpAssignContext extends ParserRuleContext {
		public Token parallelism;
		public TerminalNode KW_QUERY_PARALLELISM() { return getToken(HiveParser.KW_QUERY_PARALLELISM, 0); }
		public TerminalNode EQUAL() { return getToken(HiveParser.EQUAL, 0); }
		public TerminalNode Number() { return getToken(HiveParser.Number, 0); }
		public TerminalNode KW_DEFAULT() { return getToken(HiveParser.KW_DEFAULT, 0); }
		public TerminalNode KW_POOL() { return getToken(HiveParser.KW_POOL, 0); }
		public PoolPathContext poolPath() {
			return getRuleContext(PoolPathContext.class,0);
		}
		public RpAssignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rpAssign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterRpAssign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitRpAssign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitRpAssign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RpAssignContext rpAssign() throws RecognitionException {
		RpAssignContext _localctx = new RpAssignContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_rpAssign);
		try {
			setState(4985);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_QUERY_PARALLELISM:
				enterOuterAlt(_localctx, 1);
				{
				setState(4978);
				match(KW_QUERY_PARALLELISM);
				setState(4979);
				match(EQUAL);
				setState(4980);
				((RpAssignContext)_localctx).parallelism = match(Number);
				}
				break;
			case KW_DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4981);
				match(KW_DEFAULT);
				setState(4982);
				match(KW_POOL);
				setState(4983);
				match(EQUAL);
				setState(4984);
				poolPath();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RpAssignListContext extends ParserRuleContext {
		public List<RpAssignContext> rpAssign() {
			return getRuleContexts(RpAssignContext.class);
		}
		public RpAssignContext rpAssign(int i) {
			return getRuleContext(RpAssignContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public RpAssignListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rpAssignList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterRpAssignList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitRpAssignList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitRpAssignList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RpAssignListContext rpAssignList() throws RecognitionException {
		RpAssignListContext _localctx = new RpAssignListContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_rpAssignList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4987);
			rpAssign();
			setState(4992);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4988);
				match(COMMA);
				setState(4989);
				rpAssign();
				}
				}
				setState(4994);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RpUnassignContext extends ParserRuleContext {
		public TerminalNode KW_QUERY_PARALLELISM() { return getToken(HiveParser.KW_QUERY_PARALLELISM, 0); }
		public TerminalNode KW_DEFAULT() { return getToken(HiveParser.KW_DEFAULT, 0); }
		public TerminalNode KW_POOL() { return getToken(HiveParser.KW_POOL, 0); }
		public RpUnassignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rpUnassign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterRpUnassign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitRpUnassign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitRpUnassign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RpUnassignContext rpUnassign() throws RecognitionException {
		RpUnassignContext _localctx = new RpUnassignContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_rpUnassign);
		try {
			setState(4998);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_QUERY_PARALLELISM:
				enterOuterAlt(_localctx, 1);
				{
				setState(4995);
				match(KW_QUERY_PARALLELISM);
				}
				break;
			case KW_DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4996);
				match(KW_DEFAULT);
				setState(4997);
				match(KW_POOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RpUnassignListContext extends ParserRuleContext {
		public List<RpUnassignContext> rpUnassign() {
			return getRuleContexts(RpUnassignContext.class);
		}
		public RpUnassignContext rpUnassign(int i) {
			return getRuleContext(RpUnassignContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public RpUnassignListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rpUnassignList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterRpUnassignList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitRpUnassignList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitRpUnassignList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RpUnassignListContext rpUnassignList() throws RecognitionException {
		RpUnassignListContext _localctx = new RpUnassignListContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_rpUnassignList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5000);
			rpUnassign();
			setState(5005);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5001);
				match(COMMA);
				setState(5002);
				rpUnassign();
				}
				}
				setState(5007);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateResourcePlanStatementContext extends ParserRuleContext {
		public Id_Context name;
		public Id_Context likeName;
		public TerminalNode KW_CREATE() { return getToken(HiveParser.KW_CREATE, 0); }
		public TerminalNode KW_RESOURCE() { return getToken(HiveParser.KW_RESOURCE, 0); }
		public TerminalNode KW_PLAN() { return getToken(HiveParser.KW_PLAN, 0); }
		public TerminalNode KW_LIKE() { return getToken(HiveParser.KW_LIKE, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode KW_WITH() { return getToken(HiveParser.KW_WITH, 0); }
		public RpAssignListContext rpAssignList() {
			return getRuleContext(RpAssignListContext.class,0);
		}
		public CreateResourcePlanStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createResourcePlanStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCreateResourcePlanStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCreateResourcePlanStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCreateResourcePlanStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateResourcePlanStatementContext createResourcePlanStatement() throws RecognitionException {
		CreateResourcePlanStatementContext _localctx = new CreateResourcePlanStatementContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_createResourcePlanStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5008);
			match(KW_CREATE);
			setState(5009);
			match(KW_RESOURCE);
			setState(5010);
			match(KW_PLAN);
			setState(5012);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_IF) {
				{
				setState(5011);
				ifNotExists();
				}
			}

			setState(5023);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
			case 1:
				{
				setState(5014);
				((CreateResourcePlanStatementContext)_localctx).name = id_();
				setState(5015);
				match(KW_LIKE);
				setState(5016);
				((CreateResourcePlanStatementContext)_localctx).likeName = id_();
				}
				break;
			case 2:
				{
				setState(5018);
				((CreateResourcePlanStatementContext)_localctx).name = id_();
				setState(5021);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_WITH) {
					{
					setState(5019);
					match(KW_WITH);
					setState(5020);
					rpAssignList();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithReplaceContext extends ParserRuleContext {
		public TerminalNode KW_WITH() { return getToken(HiveParser.KW_WITH, 0); }
		public TerminalNode KW_REPLACE() { return getToken(HiveParser.KW_REPLACE, 0); }
		public WithReplaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withReplace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterWithReplace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitWithReplace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitWithReplace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithReplaceContext withReplace() throws RecognitionException {
		WithReplaceContext _localctx = new WithReplaceContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_withReplace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5025);
			match(KW_WITH);
			setState(5026);
			match(KW_REPLACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ActivateContext extends ParserRuleContext {
		public TerminalNode KW_ACTIVATE() { return getToken(HiveParser.KW_ACTIVATE, 0); }
		public WithReplaceContext withReplace() {
			return getRuleContext(WithReplaceContext.class,0);
		}
		public ActivateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_activate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterActivate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitActivate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitActivate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ActivateContext activate() throws RecognitionException {
		ActivateContext _localctx = new ActivateContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_activate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5028);
			match(KW_ACTIVATE);
			setState(5030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WITH) {
				{
				setState(5029);
				withReplace();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EnableContext extends ParserRuleContext {
		public TerminalNode KW_ENABLE() { return getToken(HiveParser.KW_ENABLE, 0); }
		public EnableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterEnable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitEnable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitEnable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnableContext enable() throws RecognitionException {
		EnableContext _localctx = new EnableContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_enable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5032);
			match(KW_ENABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DisableContext extends ParserRuleContext {
		public TerminalNode KW_DISABLE() { return getToken(HiveParser.KW_DISABLE, 0); }
		public DisableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDisable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDisable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDisable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DisableContext disable() throws RecognitionException {
		DisableContext _localctx = new DisableContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_disable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5034);
			match(KW_DISABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnmanagedContext extends ParserRuleContext {
		public TerminalNode KW_UNMANAGED() { return getToken(HiveParser.KW_UNMANAGED, 0); }
		public UnmanagedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unmanaged; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterUnmanaged(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitUnmanaged(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitUnmanaged(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnmanagedContext unmanaged() throws RecognitionException {
		UnmanagedContext _localctx = new UnmanagedContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_unmanaged);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5036);
			match(KW_UNMANAGED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterResourcePlanStatementContext extends ParserRuleContext {
		public Id_Context name;
		public Id_Context newName;
		public TerminalNode KW_ALTER() { return getToken(HiveParser.KW_ALTER, 0); }
		public TerminalNode KW_RESOURCE() { return getToken(HiveParser.KW_RESOURCE, 0); }
		public TerminalNode KW_PLAN() { return getToken(HiveParser.KW_PLAN, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode KW_VALIDATE() { return getToken(HiveParser.KW_VALIDATE, 0); }
		public TerminalNode KW_DISABLE() { return getToken(HiveParser.KW_DISABLE, 0); }
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public RpAssignListContext rpAssignList() {
			return getRuleContext(RpAssignListContext.class,0);
		}
		public TerminalNode KW_UNSET() { return getToken(HiveParser.KW_UNSET, 0); }
		public RpUnassignListContext rpUnassignList() {
			return getRuleContext(RpUnassignListContext.class,0);
		}
		public TerminalNode KW_RENAME() { return getToken(HiveParser.KW_RENAME, 0); }
		public TerminalNode KW_TO() { return getToken(HiveParser.KW_TO, 0); }
		public ActivateContext activate() {
			return getRuleContext(ActivateContext.class,0);
		}
		public EnableContext enable() {
			return getRuleContext(EnableContext.class,0);
		}
		public AlterResourcePlanStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterResourcePlanStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterResourcePlanStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterResourcePlanStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterResourcePlanStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterResourcePlanStatementContext alterResourcePlanStatement() throws RecognitionException {
		AlterResourcePlanStatementContext _localctx = new AlterResourcePlanStatementContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_alterResourcePlanStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5038);
			match(KW_ALTER);
			setState(5039);
			match(KW_RESOURCE);
			setState(5040);
			match(KW_PLAN);
			setState(5041);
			((AlterResourcePlanStatementContext)_localctx).name = id_();
			setState(5059);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_VALIDATE:
				{
				setState(5042);
				match(KW_VALIDATE);
				}
				break;
			case KW_DISABLE:
				{
				setState(5043);
				match(KW_DISABLE);
				}
				break;
			case KW_SET:
				{
				setState(5044);
				match(KW_SET);
				setState(5045);
				rpAssignList();
				}
				break;
			case KW_UNSET:
				{
				setState(5046);
				match(KW_UNSET);
				setState(5047);
				rpUnassignList();
				}
				break;
			case KW_RENAME:
				{
				setState(5048);
				match(KW_RENAME);
				setState(5049);
				match(KW_TO);
				setState(5050);
				((AlterResourcePlanStatementContext)_localctx).newName = id_();
				}
				break;
			case KW_ACTIVATE:
				{
				setState(5051);
				activate();
				setState(5053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_ENABLE) {
					{
					setState(5052);
					enable();
					}
				}

				}
				break;
			case KW_ENABLE:
				{
				setState(5055);
				enable();
				setState(5057);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KW_ACTIVATE) {
					{
					setState(5056);
					activate();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GlobalWmStatementContext extends ParserRuleContext {
		public TerminalNode KW_WORKLOAD() { return getToken(HiveParser.KW_WORKLOAD, 0); }
		public TerminalNode KW_MANAGEMENT() { return getToken(HiveParser.KW_MANAGEMENT, 0); }
		public TerminalNode KW_ENABLE() { return getToken(HiveParser.KW_ENABLE, 0); }
		public TerminalNode KW_DISABLE() { return getToken(HiveParser.KW_DISABLE, 0); }
		public GlobalWmStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_globalWmStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterGlobalWmStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitGlobalWmStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitGlobalWmStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GlobalWmStatementContext globalWmStatement() throws RecognitionException {
		GlobalWmStatementContext _localctx = new GlobalWmStatementContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_globalWmStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5061);
			_la = _input.LA(1);
			if ( !(_la==KW_DISABLE || _la==KW_ENABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5062);
			match(KW_WORKLOAD);
			setState(5063);
			match(KW_MANAGEMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplaceResourcePlanStatementContext extends ParserRuleContext {
		public Id_Context src;
		public Id_Context dest;
		public TerminalNode KW_REPLACE() { return getToken(HiveParser.KW_REPLACE, 0); }
		public TerminalNode KW_ACTIVE() { return getToken(HiveParser.KW_ACTIVE, 0); }
		public TerminalNode KW_RESOURCE() { return getToken(HiveParser.KW_RESOURCE, 0); }
		public TerminalNode KW_PLAN() { return getToken(HiveParser.KW_PLAN, 0); }
		public TerminalNode KW_WITH() { return getToken(HiveParser.KW_WITH, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public ReplaceResourcePlanStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceResourcePlanStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterReplaceResourcePlanStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitReplaceResourcePlanStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitReplaceResourcePlanStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceResourcePlanStatementContext replaceResourcePlanStatement() throws RecognitionException {
		ReplaceResourcePlanStatementContext _localctx = new ReplaceResourcePlanStatementContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_replaceResourcePlanStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5065);
			match(KW_REPLACE);
			setState(5077);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_ACTIVE:
				{
				setState(5066);
				match(KW_ACTIVE);
				setState(5067);
				match(KW_RESOURCE);
				setState(5068);
				match(KW_PLAN);
				setState(5069);
				match(KW_WITH);
				setState(5070);
				((ReplaceResourcePlanStatementContext)_localctx).src = id_();
				}
				break;
			case KW_RESOURCE:
				{
				setState(5071);
				match(KW_RESOURCE);
				setState(5072);
				match(KW_PLAN);
				setState(5073);
				((ReplaceResourcePlanStatementContext)_localctx).dest = id_();
				setState(5074);
				match(KW_WITH);
				setState(5075);
				((ReplaceResourcePlanStatementContext)_localctx).src = id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropResourcePlanStatementContext extends ParserRuleContext {
		public Id_Context name;
		public TerminalNode KW_DROP() { return getToken(HiveParser.KW_DROP, 0); }
		public TerminalNode KW_RESOURCE() { return getToken(HiveParser.KW_RESOURCE, 0); }
		public TerminalNode KW_PLAN() { return getToken(HiveParser.KW_PLAN, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropResourcePlanStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropResourcePlanStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDropResourcePlanStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDropResourcePlanStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDropResourcePlanStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropResourcePlanStatementContext dropResourcePlanStatement() throws RecognitionException {
		DropResourcePlanStatementContext _localctx = new DropResourcePlanStatementContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_dropResourcePlanStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5079);
			match(KW_DROP);
			setState(5080);
			match(KW_RESOURCE);
			setState(5081);
			match(KW_PLAN);
			setState(5083);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_IF) {
				{
				setState(5082);
				ifExists();
				}
			}

			setState(5085);
			((DropResourcePlanStatementContext)_localctx).name = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PoolPathContext extends ParserRuleContext {
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(HiveParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(HiveParser.DOT, i);
		}
		public PoolPathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_poolPath; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPoolPath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPoolPath(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPoolPath(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PoolPathContext poolPath() throws RecognitionException {
		PoolPathContext _localctx = new PoolPathContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_poolPath);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5087);
			id_();
			setState(5092);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DOT) {
				{
				{
				setState(5088);
				match(DOT);
				setState(5089);
				id_();
				}
				}
				setState(5094);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerExpressionContext extends ParserRuleContext {
		public TriggerAtomExpressionContext triggerAtomExpression() {
			return getRuleContext(TriggerAtomExpressionContext.class,0);
		}
		public TriggerExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTriggerExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTriggerExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTriggerExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerExpressionContext triggerExpression() throws RecognitionException {
		TriggerExpressionContext _localctx = new TriggerExpressionContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_triggerExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5095);
			triggerAtomExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerExpressionStandaloneContext extends ParserRuleContext {
		public TriggerExpressionContext triggerExpression() {
			return getRuleContext(TriggerExpressionContext.class,0);
		}
		public TerminalNode EOF() { return getToken(HiveParser.EOF, 0); }
		public TriggerExpressionStandaloneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerExpressionStandalone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTriggerExpressionStandalone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTriggerExpressionStandalone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTriggerExpressionStandalone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerExpressionStandaloneContext triggerExpressionStandalone() throws RecognitionException {
		TriggerExpressionStandaloneContext _localctx = new TriggerExpressionStandaloneContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_triggerExpressionStandalone);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5097);
			triggerExpression();
			setState(5098);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerOrExpressionContext extends ParserRuleContext {
		public List<TriggerAndExpressionContext> triggerAndExpression() {
			return getRuleContexts(TriggerAndExpressionContext.class);
		}
		public TriggerAndExpressionContext triggerAndExpression(int i) {
			return getRuleContext(TriggerAndExpressionContext.class,i);
		}
		public List<TerminalNode> KW_OR() { return getTokens(HiveParser.KW_OR); }
		public TerminalNode KW_OR(int i) {
			return getToken(HiveParser.KW_OR, i);
		}
		public TriggerOrExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerOrExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTriggerOrExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTriggerOrExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTriggerOrExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerOrExpressionContext triggerOrExpression() throws RecognitionException {
		TriggerOrExpressionContext _localctx = new TriggerOrExpressionContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_triggerOrExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5100);
			triggerAndExpression();
			setState(5105);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==KW_OR) {
				{
				{
				setState(5101);
				match(KW_OR);
				setState(5102);
				triggerAndExpression();
				}
				}
				setState(5107);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerAndExpressionContext extends ParserRuleContext {
		public List<TriggerAtomExpressionContext> triggerAtomExpression() {
			return getRuleContexts(TriggerAtomExpressionContext.class);
		}
		public TriggerAtomExpressionContext triggerAtomExpression(int i) {
			return getRuleContext(TriggerAtomExpressionContext.class,i);
		}
		public List<TerminalNode> KW_AND() { return getTokens(HiveParser.KW_AND); }
		public TerminalNode KW_AND(int i) {
			return getToken(HiveParser.KW_AND, i);
		}
		public TriggerAndExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerAndExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTriggerAndExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTriggerAndExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTriggerAndExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerAndExpressionContext triggerAndExpression() throws RecognitionException {
		TriggerAndExpressionContext _localctx = new TriggerAndExpressionContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_triggerAndExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5108);
			triggerAtomExpression();
			setState(5113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==KW_AND) {
				{
				{
				setState(5109);
				match(KW_AND);
				setState(5110);
				triggerAtomExpression();
				}
				}
				setState(5115);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerAtomExpressionContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public ComparisionOperatorContext comparisionOperator() {
			return getRuleContext(ComparisionOperatorContext.class,0);
		}
		public TriggerLiteralContext triggerLiteral() {
			return getRuleContext(TriggerLiteralContext.class,0);
		}
		public TriggerAtomExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerAtomExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTriggerAtomExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTriggerAtomExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTriggerAtomExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerAtomExpressionContext triggerAtomExpression() throws RecognitionException {
		TriggerAtomExpressionContext _localctx = new TriggerAtomExpressionContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_triggerAtomExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5116);
			id_();
			setState(5117);
			comparisionOperator();
			setState(5118);
			triggerLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerLiteralContext extends ParserRuleContext {
		public TerminalNode Number() { return getToken(HiveParser.Number, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public TriggerLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTriggerLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTriggerLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTriggerLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerLiteralContext triggerLiteral() throws RecognitionException {
		TriggerLiteralContext _localctx = new TriggerLiteralContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_triggerLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5120);
			_la = _input.LA(1);
			if ( !(_la==StringLiteral || _la==Number) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ComparisionOperatorContext extends ParserRuleContext {
		public TerminalNode GREATERTHAN() { return getToken(HiveParser.GREATERTHAN, 0); }
		public ComparisionOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisionOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterComparisionOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitComparisionOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitComparisionOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisionOperatorContext comparisionOperator() throws RecognitionException {
		ComparisionOperatorContext _localctx = new ComparisionOperatorContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_comparisionOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5122);
			match(GREATERTHAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerActionExpressionContext extends ParserRuleContext {
		public TerminalNode KW_KILL() { return getToken(HiveParser.KW_KILL, 0); }
		public TerminalNode KW_MOVE() { return getToken(HiveParser.KW_MOVE, 0); }
		public TerminalNode KW_TO() { return getToken(HiveParser.KW_TO, 0); }
		public PoolPathContext poolPath() {
			return getRuleContext(PoolPathContext.class,0);
		}
		public TriggerActionExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerActionExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTriggerActionExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTriggerActionExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTriggerActionExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerActionExpressionContext triggerActionExpression() throws RecognitionException {
		TriggerActionExpressionContext _localctx = new TriggerActionExpressionContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_triggerActionExpression);
		try {
			setState(5128);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_KILL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5124);
				match(KW_KILL);
				}
				break;
			case KW_MOVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5125);
				match(KW_MOVE);
				setState(5126);
				match(KW_TO);
				setState(5127);
				poolPath();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerActionExpressionStandaloneContext extends ParserRuleContext {
		public TriggerActionExpressionContext triggerActionExpression() {
			return getRuleContext(TriggerActionExpressionContext.class,0);
		}
		public TerminalNode EOF() { return getToken(HiveParser.EOF, 0); }
		public TriggerActionExpressionStandaloneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerActionExpressionStandalone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterTriggerActionExpressionStandalone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitTriggerActionExpressionStandalone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitTriggerActionExpressionStandalone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerActionExpressionStandaloneContext triggerActionExpressionStandalone() throws RecognitionException {
		TriggerActionExpressionStandaloneContext _localctx = new TriggerActionExpressionStandaloneContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_triggerActionExpressionStandalone);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5130);
			triggerActionExpression();
			setState(5131);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTriggerStatementContext extends ParserRuleContext {
		public Id_Context rpName;
		public Id_Context triggerName;
		public TerminalNode KW_CREATE() { return getToken(HiveParser.KW_CREATE, 0); }
		public TerminalNode KW_TRIGGER() { return getToken(HiveParser.KW_TRIGGER, 0); }
		public TerminalNode DOT() { return getToken(HiveParser.DOT, 0); }
		public TerminalNode KW_WHEN() { return getToken(HiveParser.KW_WHEN, 0); }
		public TriggerExpressionContext triggerExpression() {
			return getRuleContext(TriggerExpressionContext.class,0);
		}
		public TerminalNode KW_DO() { return getToken(HiveParser.KW_DO, 0); }
		public TriggerActionExpressionContext triggerActionExpression() {
			return getRuleContext(TriggerActionExpressionContext.class,0);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public CreateTriggerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTriggerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCreateTriggerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCreateTriggerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCreateTriggerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerStatementContext createTriggerStatement() throws RecognitionException {
		CreateTriggerStatementContext _localctx = new CreateTriggerStatementContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_createTriggerStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5133);
			match(KW_CREATE);
			setState(5134);
			match(KW_TRIGGER);
			setState(5135);
			((CreateTriggerStatementContext)_localctx).rpName = id_();
			setState(5136);
			match(DOT);
			setState(5137);
			((CreateTriggerStatementContext)_localctx).triggerName = id_();
			setState(5138);
			match(KW_WHEN);
			setState(5139);
			triggerExpression();
			setState(5140);
			match(KW_DO);
			setState(5141);
			triggerActionExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTriggerStatementContext extends ParserRuleContext {
		public Id_Context rpName;
		public Id_Context triggerName;
		public PoolPathContext poolName;
		public TerminalNode KW_ALTER() { return getToken(HiveParser.KW_ALTER, 0); }
		public TerminalNode KW_TRIGGER() { return getToken(HiveParser.KW_TRIGGER, 0); }
		public TerminalNode DOT() { return getToken(HiveParser.DOT, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode KW_WHEN() { return getToken(HiveParser.KW_WHEN, 0); }
		public TriggerExpressionContext triggerExpression() {
			return getRuleContext(TriggerExpressionContext.class,0);
		}
		public TerminalNode KW_DO() { return getToken(HiveParser.KW_DO, 0); }
		public TriggerActionExpressionContext triggerActionExpression() {
			return getRuleContext(TriggerActionExpressionContext.class,0);
		}
		public TerminalNode KW_ADD() { return getToken(HiveParser.KW_ADD, 0); }
		public TerminalNode KW_TO() { return getToken(HiveParser.KW_TO, 0); }
		public TerminalNode KW_DROP() { return getToken(HiveParser.KW_DROP, 0); }
		public TerminalNode KW_FROM() { return getToken(HiveParser.KW_FROM, 0); }
		public TerminalNode KW_POOL() { return getToken(HiveParser.KW_POOL, 0); }
		public TerminalNode KW_UNMANAGED() { return getToken(HiveParser.KW_UNMANAGED, 0); }
		public PoolPathContext poolPath() {
			return getRuleContext(PoolPathContext.class,0);
		}
		public AlterTriggerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTriggerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterTriggerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterTriggerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterTriggerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTriggerStatementContext alterTriggerStatement() throws RecognitionException {
		AlterTriggerStatementContext _localctx = new AlterTriggerStatementContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_alterTriggerStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5143);
			match(KW_ALTER);
			setState(5144);
			match(KW_TRIGGER);
			setState(5145);
			((AlterTriggerStatementContext)_localctx).rpName = id_();
			setState(5146);
			match(DOT);
			setState(5147);
			((AlterTriggerStatementContext)_localctx).triggerName = id_();
			setState(5164);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_WHEN:
				{
				setState(5148);
				match(KW_WHEN);
				setState(5149);
				triggerExpression();
				setState(5150);
				match(KW_DO);
				setState(5151);
				triggerActionExpression();
				}
				break;
			case KW_ADD:
			case KW_DROP:
				{
				setState(5157);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_ADD:
					{
					setState(5153);
					match(KW_ADD);
					setState(5154);
					match(KW_TO);
					}
					break;
				case KW_DROP:
					{
					setState(5155);
					match(KW_DROP);
					setState(5156);
					match(KW_FROM);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5162);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KW_POOL:
					{
					setState(5159);
					match(KW_POOL);
					setState(5160);
					((AlterTriggerStatementContext)_localctx).poolName = poolPath();
					}
					break;
				case KW_UNMANAGED:
					{
					setState(5161);
					match(KW_UNMANAGED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropTriggerStatementContext extends ParserRuleContext {
		public Id_Context rpName;
		public Id_Context triggerName;
		public TerminalNode KW_DROP() { return getToken(HiveParser.KW_DROP, 0); }
		public TerminalNode KW_TRIGGER() { return getToken(HiveParser.KW_TRIGGER, 0); }
		public TerminalNode DOT() { return getToken(HiveParser.DOT, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public DropTriggerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTriggerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDropTriggerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDropTriggerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDropTriggerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTriggerStatementContext dropTriggerStatement() throws RecognitionException {
		DropTriggerStatementContext _localctx = new DropTriggerStatementContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_dropTriggerStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5166);
			match(KW_DROP);
			setState(5167);
			match(KW_TRIGGER);
			setState(5168);
			((DropTriggerStatementContext)_localctx).rpName = id_();
			setState(5169);
			match(DOT);
			setState(5170);
			((DropTriggerStatementContext)_localctx).triggerName = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PoolAssignContext extends ParserRuleContext {
		public Token allocFraction;
		public Token parallelism;
		public Token policy;
		public PoolPathContext path;
		public TerminalNode KW_ALLOC_FRACTION() { return getToken(HiveParser.KW_ALLOC_FRACTION, 0); }
		public TerminalNode EQUAL() { return getToken(HiveParser.EQUAL, 0); }
		public TerminalNode KW_QUERY_PARALLELISM() { return getToken(HiveParser.KW_QUERY_PARALLELISM, 0); }
		public TerminalNode KW_SCHEDULING_POLICY() { return getToken(HiveParser.KW_SCHEDULING_POLICY, 0); }
		public TerminalNode KW_PATH() { return getToken(HiveParser.KW_PATH, 0); }
		public TerminalNode Number() { return getToken(HiveParser.Number, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public PoolPathContext poolPath() {
			return getRuleContext(PoolPathContext.class,0);
		}
		public PoolAssignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_poolAssign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPoolAssign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPoolAssign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPoolAssign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PoolAssignContext poolAssign() throws RecognitionException {
		PoolAssignContext _localctx = new PoolAssignContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_poolAssign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5184);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_ALLOC_FRACTION:
				{
				setState(5172);
				match(KW_ALLOC_FRACTION);
				setState(5173);
				match(EQUAL);
				setState(5174);
				((PoolAssignContext)_localctx).allocFraction = match(Number);
				}
				break;
			case KW_QUERY_PARALLELISM:
				{
				setState(5175);
				match(KW_QUERY_PARALLELISM);
				setState(5176);
				match(EQUAL);
				setState(5177);
				((PoolAssignContext)_localctx).parallelism = match(Number);
				}
				break;
			case KW_SCHEDULING_POLICY:
				{
				setState(5178);
				match(KW_SCHEDULING_POLICY);
				setState(5179);
				match(EQUAL);
				setState(5180);
				((PoolAssignContext)_localctx).policy = match(StringLiteral);
				}
				break;
			case KW_PATH:
				{
				setState(5181);
				match(KW_PATH);
				setState(5182);
				match(EQUAL);
				setState(5183);
				((PoolAssignContext)_localctx).path = poolPath();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PoolAssignListContext extends ParserRuleContext {
		public List<PoolAssignContext> poolAssign() {
			return getRuleContexts(PoolAssignContext.class);
		}
		public PoolAssignContext poolAssign(int i) {
			return getRuleContext(PoolAssignContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HiveParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HiveParser.COMMA, i);
		}
		public PoolAssignListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_poolAssignList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterPoolAssignList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitPoolAssignList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitPoolAssignList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PoolAssignListContext poolAssignList() throws RecognitionException {
		PoolAssignListContext _localctx = new PoolAssignListContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_poolAssignList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5186);
			poolAssign();
			setState(5191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5187);
				match(COMMA);
				setState(5188);
				poolAssign();
				}
				}
				setState(5193);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatePoolStatementContext extends ParserRuleContext {
		public Id_Context rpName;
		public TerminalNode KW_CREATE() { return getToken(HiveParser.KW_CREATE, 0); }
		public TerminalNode KW_POOL() { return getToken(HiveParser.KW_POOL, 0); }
		public TerminalNode DOT() { return getToken(HiveParser.DOT, 0); }
		public PoolPathContext poolPath() {
			return getRuleContext(PoolPathContext.class,0);
		}
		public TerminalNode KW_WITH() { return getToken(HiveParser.KW_WITH, 0); }
		public PoolAssignListContext poolAssignList() {
			return getRuleContext(PoolAssignListContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public CreatePoolStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createPoolStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCreatePoolStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCreatePoolStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCreatePoolStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatePoolStatementContext createPoolStatement() throws RecognitionException {
		CreatePoolStatementContext _localctx = new CreatePoolStatementContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_createPoolStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5194);
			match(KW_CREATE);
			setState(5195);
			match(KW_POOL);
			setState(5196);
			((CreatePoolStatementContext)_localctx).rpName = id_();
			setState(5197);
			match(DOT);
			setState(5198);
			poolPath();
			setState(5199);
			match(KW_WITH);
			setState(5200);
			poolAssignList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterPoolStatementContext extends ParserRuleContext {
		public Id_Context rpName;
		public Id_Context triggerName;
		public TerminalNode KW_ALTER() { return getToken(HiveParser.KW_ALTER, 0); }
		public TerminalNode KW_POOL() { return getToken(HiveParser.KW_POOL, 0); }
		public TerminalNode DOT() { return getToken(HiveParser.DOT, 0); }
		public PoolPathContext poolPath() {
			return getRuleContext(PoolPathContext.class,0);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode KW_SET() { return getToken(HiveParser.KW_SET, 0); }
		public PoolAssignListContext poolAssignList() {
			return getRuleContext(PoolAssignListContext.class,0);
		}
		public TerminalNode KW_UNSET() { return getToken(HiveParser.KW_UNSET, 0); }
		public TerminalNode KW_SCHEDULING_POLICY() { return getToken(HiveParser.KW_SCHEDULING_POLICY, 0); }
		public TerminalNode KW_TRIGGER() { return getToken(HiveParser.KW_TRIGGER, 0); }
		public TerminalNode KW_ADD() { return getToken(HiveParser.KW_ADD, 0); }
		public TerminalNode KW_DROP() { return getToken(HiveParser.KW_DROP, 0); }
		public AlterPoolStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPoolStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterPoolStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterPoolStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterPoolStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPoolStatementContext alterPoolStatement() throws RecognitionException {
		AlterPoolStatementContext _localctx = new AlterPoolStatementContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_alterPoolStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5202);
			match(KW_ALTER);
			setState(5203);
			match(KW_POOL);
			setState(5204);
			((AlterPoolStatementContext)_localctx).rpName = id_();
			setState(5205);
			match(DOT);
			setState(5206);
			poolPath();
			setState(5214);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_SET:
				{
				setState(5207);
				match(KW_SET);
				setState(5208);
				poolAssignList();
				}
				break;
			case KW_UNSET:
				{
				setState(5209);
				match(KW_UNSET);
				setState(5210);
				match(KW_SCHEDULING_POLICY);
				}
				break;
			case KW_ADD:
			case KW_DROP:
				{
				setState(5211);
				_la = _input.LA(1);
				if ( !(_la==KW_ADD || _la==KW_DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5212);
				match(KW_TRIGGER);
				setState(5213);
				((AlterPoolStatementContext)_localctx).triggerName = id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropPoolStatementContext extends ParserRuleContext {
		public Id_Context rpName;
		public TerminalNode KW_DROP() { return getToken(HiveParser.KW_DROP, 0); }
		public TerminalNode KW_POOL() { return getToken(HiveParser.KW_POOL, 0); }
		public TerminalNode DOT() { return getToken(HiveParser.DOT, 0); }
		public PoolPathContext poolPath() {
			return getRuleContext(PoolPathContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public DropPoolStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropPoolStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDropPoolStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDropPoolStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDropPoolStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropPoolStatementContext dropPoolStatement() throws RecognitionException {
		DropPoolStatementContext _localctx = new DropPoolStatementContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_dropPoolStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5216);
			match(KW_DROP);
			setState(5217);
			match(KW_POOL);
			setState(5218);
			((DropPoolStatementContext)_localctx).rpName = id_();
			setState(5219);
			match(DOT);
			setState(5220);
			poolPath();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateMappingStatementContext extends ParserRuleContext {
		public Token mappingType;
		public Token name;
		public Id_Context rpName;
		public PoolPathContext path;
		public Token order;
		public TerminalNode KW_CREATE() { return getToken(HiveParser.KW_CREATE, 0); }
		public TerminalNode KW_MAPPING() { return getToken(HiveParser.KW_MAPPING, 0); }
		public TerminalNode KW_IN() { return getToken(HiveParser.KW_IN, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode KW_USER() { return getToken(HiveParser.KW_USER, 0); }
		public TerminalNode KW_GROUP() { return getToken(HiveParser.KW_GROUP, 0); }
		public TerminalNode KW_APPLICATION() { return getToken(HiveParser.KW_APPLICATION, 0); }
		public TerminalNode KW_TO() { return getToken(HiveParser.KW_TO, 0); }
		public UnmanagedContext unmanaged() {
			return getRuleContext(UnmanagedContext.class,0);
		}
		public PoolPathContext poolPath() {
			return getRuleContext(PoolPathContext.class,0);
		}
		public TerminalNode KW_WITH() { return getToken(HiveParser.KW_WITH, 0); }
		public TerminalNode KW_ORDER() { return getToken(HiveParser.KW_ORDER, 0); }
		public TerminalNode Number() { return getToken(HiveParser.Number, 0); }
		public CreateMappingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createMappingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterCreateMappingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitCreateMappingStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitCreateMappingStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateMappingStatementContext createMappingStatement() throws RecognitionException {
		CreateMappingStatementContext _localctx = new CreateMappingStatementContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_createMappingStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5222);
			match(KW_CREATE);
			setState(5223);
			((CreateMappingStatementContext)_localctx).mappingType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==KW_APPLICATION || _la==KW_GROUP || _la==KW_USER) ) {
				((CreateMappingStatementContext)_localctx).mappingType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5224);
			match(KW_MAPPING);
			setState(5225);
			((CreateMappingStatementContext)_localctx).name = match(StringLiteral);
			setState(5226);
			match(KW_IN);
			setState(5227);
			((CreateMappingStatementContext)_localctx).rpName = id_();
			setState(5231);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_TO:
				{
				setState(5228);
				match(KW_TO);
				setState(5229);
				((CreateMappingStatementContext)_localctx).path = poolPath();
				}
				break;
			case KW_UNMANAGED:
				{
				setState(5230);
				unmanaged();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5236);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WITH) {
				{
				setState(5233);
				match(KW_WITH);
				setState(5234);
				match(KW_ORDER);
				setState(5235);
				((CreateMappingStatementContext)_localctx).order = match(Number);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterMappingStatementContext extends ParserRuleContext {
		public Token mappingType;
		public Token name;
		public Id_Context rpName;
		public PoolPathContext path;
		public Token order;
		public TerminalNode KW_ALTER() { return getToken(HiveParser.KW_ALTER, 0); }
		public TerminalNode KW_MAPPING() { return getToken(HiveParser.KW_MAPPING, 0); }
		public TerminalNode KW_IN() { return getToken(HiveParser.KW_IN, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode KW_USER() { return getToken(HiveParser.KW_USER, 0); }
		public TerminalNode KW_GROUP() { return getToken(HiveParser.KW_GROUP, 0); }
		public TerminalNode KW_APPLICATION() { return getToken(HiveParser.KW_APPLICATION, 0); }
		public TerminalNode KW_TO() { return getToken(HiveParser.KW_TO, 0); }
		public UnmanagedContext unmanaged() {
			return getRuleContext(UnmanagedContext.class,0);
		}
		public PoolPathContext poolPath() {
			return getRuleContext(PoolPathContext.class,0);
		}
		public TerminalNode KW_WITH() { return getToken(HiveParser.KW_WITH, 0); }
		public TerminalNode KW_ORDER() { return getToken(HiveParser.KW_ORDER, 0); }
		public TerminalNode Number() { return getToken(HiveParser.Number, 0); }
		public AlterMappingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterMappingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterAlterMappingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitAlterMappingStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitAlterMappingStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterMappingStatementContext alterMappingStatement() throws RecognitionException {
		AlterMappingStatementContext _localctx = new AlterMappingStatementContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_alterMappingStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5238);
			match(KW_ALTER);
			setState(5239);
			((AlterMappingStatementContext)_localctx).mappingType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==KW_APPLICATION || _la==KW_GROUP || _la==KW_USER) ) {
				((AlterMappingStatementContext)_localctx).mappingType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5240);
			match(KW_MAPPING);
			setState(5241);
			((AlterMappingStatementContext)_localctx).name = match(StringLiteral);
			setState(5242);
			match(KW_IN);
			setState(5243);
			((AlterMappingStatementContext)_localctx).rpName = id_();
			setState(5247);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KW_TO:
				{
				setState(5244);
				match(KW_TO);
				setState(5245);
				((AlterMappingStatementContext)_localctx).path = poolPath();
				}
				break;
			case KW_UNMANAGED:
				{
				setState(5246);
				unmanaged();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5252);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KW_WITH) {
				{
				setState(5249);
				match(KW_WITH);
				setState(5250);
				match(KW_ORDER);
				setState(5251);
				((AlterMappingStatementContext)_localctx).order = match(Number);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropMappingStatementContext extends ParserRuleContext {
		public Token mappingType;
		public Token name;
		public Id_Context rpName;
		public TerminalNode KW_DROP() { return getToken(HiveParser.KW_DROP, 0); }
		public TerminalNode KW_MAPPING() { return getToken(HiveParser.KW_MAPPING, 0); }
		public TerminalNode KW_IN() { return getToken(HiveParser.KW_IN, 0); }
		public TerminalNode StringLiteral() { return getToken(HiveParser.StringLiteral, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode KW_USER() { return getToken(HiveParser.KW_USER, 0); }
		public TerminalNode KW_GROUP() { return getToken(HiveParser.KW_GROUP, 0); }
		public TerminalNode KW_APPLICATION() { return getToken(HiveParser.KW_APPLICATION, 0); }
		public DropMappingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropMappingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).enterDropMappingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HiveParserListener ) ((HiveParserListener)listener).exitDropMappingStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HiveParserVisitor ) return ((HiveParserVisitor<? extends T>)visitor).visitDropMappingStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropMappingStatementContext dropMappingStatement() throws RecognitionException {
		DropMappingStatementContext _localctx = new DropMappingStatementContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_dropMappingStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5254);
			match(KW_DROP);
			setState(5255);
			((DropMappingStatementContext)_localctx).mappingType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==KW_APPLICATION || _la==KW_GROUP || _la==KW_USER) ) {
				((DropMappingStatementContext)_localctx).mappingType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5256);
			match(KW_MAPPING);
			setState(5257);
			((DropMappingStatementContext)_localctx).name = match(StringLiteral);
			setState(5258);
			match(KW_IN);
			setState(5259);
			((DropMappingStatementContext)_localctx).rpName = id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u01a8\u148e\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"+
		"\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"+
		"\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"+
		"\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"+
		"\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"+
		"\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"+
		"\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"+
		"\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"+
		"\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"+
		"\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"+
		"\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"+
		"\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"+
		"\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"+
		"\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"+
		"\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"+
		"\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"+
		"\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"+
		"\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"+
		"\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"+
		"\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"+
		"\u00ef\u0002\u00f0\u0007\u00f0\u0002\u00f1\u0007\u00f1\u0002\u00f2\u0007"+
		"\u00f2\u0002\u00f3\u0007\u00f3\u0002\u00f4\u0007\u00f4\u0002\u00f5\u0007"+
		"\u00f5\u0002\u00f6\u0007\u00f6\u0002\u00f7\u0007\u00f7\u0002\u00f8\u0007"+
		"\u00f8\u0002\u00f9\u0007\u00f9\u0002\u00fa\u0007\u00fa\u0002\u00fb\u0007"+
		"\u00fb\u0002\u00fc\u0007\u00fc\u0002\u00fd\u0007\u00fd\u0002\u00fe\u0007"+
		"\u00fe\u0002\u00ff\u0007\u00ff\u0002\u0100\u0007\u0100\u0002\u0101\u0007"+
		"\u0101\u0002\u0102\u0007\u0102\u0002\u0103\u0007\u0103\u0002\u0104\u0007"+
		"\u0104\u0002\u0105\u0007\u0105\u0002\u0106\u0007\u0106\u0002\u0107\u0007"+
		"\u0107\u0002\u0108\u0007\u0108\u0002\u0109\u0007\u0109\u0002\u010a\u0007"+
		"\u010a\u0002\u010b\u0007\u010b\u0002\u010c\u0007\u010c\u0002\u010d\u0007"+
		"\u010d\u0002\u010e\u0007\u010e\u0002\u010f\u0007\u010f\u0002\u0110\u0007"+
		"\u0110\u0002\u0111\u0007\u0111\u0002\u0112\u0007\u0112\u0002\u0113\u0007"+
		"\u0113\u0002\u0114\u0007\u0114\u0002\u0115\u0007\u0115\u0002\u0116\u0007"+
		"\u0116\u0002\u0117\u0007\u0117\u0002\u0118\u0007\u0118\u0002\u0119\u0007"+
		"\u0119\u0002\u011a\u0007\u011a\u0002\u011b\u0007\u011b\u0002\u011c\u0007"+
		"\u011c\u0002\u011d\u0007\u011d\u0002\u011e\u0007\u011e\u0002\u011f\u0007"+
		"\u011f\u0002\u0120\u0007\u0120\u0002\u0121\u0007\u0121\u0002\u0122\u0007"+
		"\u0122\u0002\u0123\u0007\u0123\u0002\u0124\u0007\u0124\u0002\u0125\u0007"+
		"\u0125\u0002\u0126\u0007\u0126\u0002\u0127\u0007\u0127\u0002\u0128\u0007"+
		"\u0128\u0002\u0129\u0007\u0129\u0002\u012a\u0007\u012a\u0002\u012b\u0007"+
		"\u012b\u0002\u012c\u0007\u012c\u0002\u012d\u0007\u012d\u0002\u012e\u0007"+
		"\u012e\u0002\u012f\u0007\u012f\u0002\u0130\u0007\u0130\u0002\u0131\u0007"+
		"\u0131\u0002\u0132\u0007\u0132\u0002\u0133\u0007\u0133\u0002\u0134\u0007"+
		"\u0134\u0002\u0135\u0007\u0135\u0002\u0136\u0007\u0136\u0002\u0137\u0007"+
		"\u0137\u0002\u0138\u0007\u0138\u0002\u0139\u0007\u0139\u0002\u013a\u0007"+
		"\u013a\u0002\u013b\u0007\u013b\u0002\u013c\u0007\u013c\u0002\u013d\u0007"+
		"\u013d\u0002\u013e\u0007\u013e\u0002\u013f\u0007\u013f\u0002\u0140\u0007"+
		"\u0140\u0002\u0141\u0007\u0141\u0002\u0142\u0007\u0142\u0002\u0143\u0007"+
		"\u0143\u0002\u0144\u0007\u0144\u0002\u0145\u0007\u0145\u0002\u0146\u0007"+
		"\u0146\u0002\u0147\u0007\u0147\u0002\u0148\u0007\u0148\u0002\u0149\u0007"+
		"\u0149\u0002\u014a\u0007\u014a\u0002\u014b\u0007\u014b\u0002\u014c\u0007"+
		"\u014c\u0002\u014d\u0007\u014d\u0002\u014e\u0007\u014e\u0002\u014f\u0007"+
		"\u014f\u0002\u0150\u0007\u0150\u0002\u0151\u0007\u0151\u0002\u0152\u0007"+
		"\u0152\u0002\u0153\u0007\u0153\u0002\u0154\u0007\u0154\u0002\u0155\u0007"+
		"\u0155\u0002\u0156\u0007\u0156\u0002\u0157\u0007\u0157\u0002\u0158\u0007"+
		"\u0158\u0002\u0159\u0007\u0159\u0002\u015a\u0007\u015a\u0002\u015b\u0007"+
		"\u015b\u0002\u015c\u0007\u015c\u0002\u015d\u0007\u015d\u0002\u015e\u0007"+
		"\u015e\u0002\u015f\u0007\u015f\u0002\u0160\u0007\u0160\u0002\u0161\u0007"+
		"\u0161\u0002\u0162\u0007\u0162\u0002\u0163\u0007\u0163\u0002\u0164\u0007"+
		"\u0164\u0002\u0165\u0007\u0165\u0002\u0166\u0007\u0166\u0002\u0167\u0007"+
		"\u0167\u0002\u0168\u0007\u0168\u0002\u0169\u0007\u0169\u0002\u016a\u0007"+
		"\u016a\u0002\u016b\u0007\u016b\u0002\u016c\u0007\u016c\u0002\u016d\u0007"+
		"\u016d\u0002\u016e\u0007\u016e\u0002\u016f\u0007\u016f\u0002\u0170\u0007"+
		"\u0170\u0002\u0171\u0007\u0171\u0002\u0172\u0007\u0172\u0002\u0173\u0007"+
		"\u0173\u0002\u0174\u0007\u0174\u0002\u0175\u0007\u0175\u0002\u0176\u0007"+
		"\u0176\u0002\u0177\u0007\u0177\u0002\u0178\u0007\u0178\u0002\u0179\u0007"+
		"\u0179\u0002\u017a\u0007\u017a\u0002\u017b\u0007\u017b\u0002\u017c\u0007"+
		"\u017c\u0002\u017d\u0007\u017d\u0002\u017e\u0007\u017e\u0002\u017f\u0007"+
		"\u017f\u0002\u0180\u0007\u0180\u0002\u0181\u0007\u0181\u0002\u0182\u0007"+
		"\u0182\u0002\u0183\u0007\u0183\u0002\u0184\u0007\u0184\u0002\u0185\u0007"+
		"\u0185\u0002\u0186\u0007\u0186\u0002\u0187\u0007\u0187\u0002\u0188\u0007"+
		"\u0188\u0002\u0189\u0007\u0189\u0002\u018a\u0007\u018a\u0002\u018b\u0007"+
		"\u018b\u0002\u018c\u0007\u018c\u0002\u018d\u0007\u018d\u0002\u018e\u0007"+
		"\u018e\u0002\u018f\u0007\u018f\u0002\u0190\u0007\u0190\u0002\u0191\u0007"+
		"\u0191\u0002\u0192\u0007\u0192\u0002\u0193\u0007\u0193\u0002\u0194\u0007"+
		"\u0194\u0002\u0195\u0007\u0195\u0002\u0196\u0007\u0196\u0002\u0197\u0007"+
		"\u0197\u0002\u0198\u0007\u0198\u0002\u0199\u0007\u0199\u0002\u019a\u0007"+
		"\u019a\u0002\u019b\u0007\u019b\u0002\u019c\u0007\u019c\u0002\u019d\u0007"+
		"\u019d\u0002\u019e\u0007\u019e\u0002\u019f\u0007\u019f\u0002\u01a0\u0007"+
		"\u01a0\u0002\u01a1\u0007\u01a1\u0002\u01a2\u0007\u01a2\u0002\u01a3\u0007"+
		"\u01a3\u0002\u01a4\u0007\u01a4\u0002\u01a5\u0007\u01a5\u0002\u01a6\u0007"+
		"\u01a6\u0002\u01a7\u0007\u01a7\u0002\u01a8\u0007\u01a8\u0002\u01a9\u0007"+
		"\u01a9\u0002\u01aa\u0007\u01aa\u0002\u01ab\u0007\u01ab\u0002\u01ac\u0007"+
		"\u01ac\u0002\u01ad\u0007\u01ad\u0002\u01ae\u0007\u01ae\u0002\u01af\u0007"+
		"\u01af\u0002\u01b0\u0007\u01b0\u0002\u01b1\u0007\u01b1\u0002\u01b2\u0007"+
		"\u01b2\u0002\u01b3\u0007\u01b3\u0002\u01b4\u0007\u01b4\u0002\u01b5\u0007"+
		"\u01b5\u0002\u01b6\u0007\u01b6\u0002\u01b7\u0007\u01b7\u0002\u01b8\u0007"+
		"\u01b8\u0002\u01b9\u0007\u01b9\u0002\u01ba\u0007\u01ba\u0002\u01bb\u0007"+
		"\u01bb\u0002\u01bc\u0007\u01bc\u0002\u01bd\u0007\u01bd\u0002\u01be\u0007"+
		"\u01be\u0002\u01bf\u0007\u01bf\u0002\u01c0\u0007\u01c0\u0002\u01c1\u0007"+
		"\u01c1\u0002\u01c2\u0007\u01c2\u0002\u01c3\u0007\u01c3\u0002\u01c4\u0007"+
		"\u01c4\u0002\u01c5\u0007\u01c5\u0002\u01c6\u0007\u01c6\u0002\u01c7\u0007"+
		"\u01c7\u0002\u01c8\u0007\u01c8\u0002\u01c9\u0007\u01c9\u0002\u01ca\u0007"+
		"\u01ca\u0002\u01cb\u0007\u01cb\u0002\u01cc\u0007\u01cc\u0002\u01cd\u0007"+
		"\u01cd\u0002\u01ce\u0007\u01ce\u0002\u01cf\u0007\u01cf\u0002\u01d0\u0007"+
		"\u01d0\u0002\u01d1\u0007\u01d1\u0002\u01d2\u0007\u01d2\u0002\u01d3\u0007"+
		"\u01d3\u0002\u01d4\u0007\u01d4\u0002\u01d5\u0007\u01d5\u0002\u01d6\u0007"+
		"\u01d6\u0002\u01d7\u0007\u01d7\u0002\u01d8\u0007\u01d8\u0002\u01d9\u0007"+
		"\u01d9\u0002\u01da\u0007\u01da\u0002\u01db\u0007\u01db\u0002\u01dc\u0007"+
		"\u01dc\u0002\u01dd\u0007\u01dd\u0002\u01de\u0007\u01de\u0002\u01df\u0007"+
		"\u01df\u0002\u01e0\u0007\u01e0\u0002\u01e1\u0007\u01e1\u0002\u01e2\u0007"+
		"\u01e2\u0002\u01e3\u0007\u01e3\u0002\u01e4\u0007\u01e4\u0002\u01e5\u0007"+
		"\u01e5\u0002\u01e6\u0007\u01e6\u0002\u01e7\u0007\u01e7\u0002\u01e8\u0007"+
		"\u01e8\u0002\u01e9\u0007\u01e9\u0002\u01ea\u0007\u01ea\u0002\u01eb\u0007"+
		"\u01eb\u0002\u01ec\u0007\u01ec\u0002\u01ed\u0007\u01ed\u0002\u01ee\u0007"+
		"\u01ee\u0002\u01ef\u0007\u01ef\u0002\u01f0\u0007\u01f0\u0002\u01f1\u0007"+
		"\u01f1\u0001\u0000\u0001\u0000\u0003\u0000\u03e7\b\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0001\u0001\u0001\u0005\u0001\u03ed\b\u0001\n\u0001\f\u0001"+
		"\u03f0\t\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0003\u0001\u03f5\b"+
		"\u0001\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0003"+
		"\u0002\u03fc\b\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0003\u0002\u0406\b\u0002\u0001"+
		"\u0002\u0003\u0002\u0409\b\u0002\u0001\u0002\u0001\u0002\u0003\u0002\u040d"+
		"\b\u0002\u0001\u0003\u0001\u0003\u0001\u0004\u0001\u0004\u0001\u0005\u0001"+
		"\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001"+
		"\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001"+
		"\u0005\u0003\u0005\u0421\b\u0005\u0001\u0006\u0001\u0006\u0001\u0006\u0003"+
		"\u0006\u0426\b\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0003\u0006\u042b"+
		"\b\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0003\u0006\u0431"+
		"\b\u0006\u0001\u0007\u0001\u0007\u0003\u0007\u0435\b\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\b\u0001\b\u0001"+
		"\b\u0001\b\u0001\b\u0001\b\u0003\b\u0442\b\b\u0001\t\u0001\t\u0003\t\u0446"+
		"\b\t\u0001\t\u0001\t\u0003\t\u044a\b\t\u0001\t\u0001\t\u0001\t\u0003\t"+
		"\u044f\b\t\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n\u0456\b\n\u0001"+
		"\n\u0001\n\u0003\n\u045a\b\n\u0001\u000b\u0001\u000b\u0001\u000b\u0003"+
		"\u000b\u045f\b\u000b\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0003\f\u0466"+
		"\b\f\u0001\f\u0001\f\u0003\f\u046a\b\f\u0001\r\u0001\r\u0001\r\u0001\r"+
		"\u0001\u000e\u0001\u000e\u0001\u000e\u0005\u000e\u0473\b\u000e\n\u000e"+
		"\f\u000e\u0476\t\u000e\u0001\u000f\u0001\u000f\u0001\u000f\u0003\u000f"+
		"\u047b\b\u000f\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010"+
		"\u0003\u0010\u0482\b\u0010\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011"+
		"\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011"+
		"\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011"+
		"\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011"+
		"\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011"+
		"\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011"+
		"\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011"+
		"\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0003\u0011"+
		"\u04b1\b\u0011\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0013\u0001\u0013"+
		"\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0015\u0001\u0015"+
		"\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0017\u0001\u0017\u0001\u0017"+
		"\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0019\u0001\u0019"+
		"\u0001\u0019\u0001\u001a\u0001\u001a\u0001\u001a\u0003\u001a\u04ce\b\u001a"+
		"\u0001\u001a\u0001\u001a\u0003\u001a\u04d2\b\u001a\u0001\u001a\u0003\u001a"+
		"\u04d5\b\u001a\u0001\u001a\u0003\u001a\u04d8\b\u001a\u0001\u001a\u0001"+
		"\u001a\u0001\u001a\u0003\u001a\u04dd\b\u001a\u0001\u001a\u0001\u001a\u0001"+
		"\u001a\u0001\u001a\u0003\u001a\u04e3\b\u001a\u0001\u001a\u0001\u001a\u0003"+
		"\u001a\u04e7\b\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0003"+
		"\u001a\u04ed\b\u001a\u0003\u001a\u04ef\b\u001a\u0001\u001b\u0001\u001b"+
		"\u0001\u001b\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001d\u0001\u001d"+
		"\u0001\u001d\u0001\u001d\u0001\u001e\u0001\u001e\u0001\u001e\u0005\u001e"+
		"\u04fe\b\u001e\n\u001e\f\u001e\u0501\t\u001e\u0001\u001f\u0001\u001f\u0001"+
		"\u001f\u0001 \u0001 \u0001 \u0001!\u0001!\u0001!\u0003!\u050c\b!\u0001"+
		"!\u0001!\u0003!\u0510\b!\u0001\"\u0001\"\u0001\"\u0001#\u0001#\u0003#"+
		"\u0517\b#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0003#\u051f\b#\u0001"+
		"#\u0003#\u0522\b#\u0001$\u0001$\u0001$\u0003$\u0527\b$\u0001$\u0001$\u0003"+
		"$\u052b\b$\u0001$\u0003$\u052e\b$\u0001%\u0001%\u0001%\u0001%\u0001%\u0001"+
		"&\u0001&\u0001&\u0003&\u0538\b&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0003&\u0540\b&\u0005&\u0542\b&\n&\f&\u0545\t&\u0003&\u0547\b&\u0001"+
		"\'\u0001\'\u0003\'\u054b\b\'\u0001(\u0001(\u0003(\u054f\b(\u0001(\u0003"+
		"(\u0552\b(\u0001)\u0001)\u0001)\u0003)\u0557\b)\u0001)\u0001)\u0001)\u0001"+
		")\u0003)\u055d\b)\u0001)\u0001)\u0001)\u0003)\u0562\b)\u0001)\u0001)\u0001"+
		")\u0003)\u0567\b)\u0001)\u0001)\u0003)\u056b\b)\u0001*\u0001*\u0001*\u0001"+
		"*\u0001*\u0001*\u0001*\u0001*\u0001*\u0003*\u0576\b*\u0003*\u0578\b*\u0001"+
		"*\u0001*\u0003*\u057c\b*\u0001+\u0001+\u0001,\u0001,\u0001-\u0001-\u0001"+
		"-\u0001-\u0003-\u0586\b-\u0001-\u0001-\u0003-\u058a\b-\u0001-\u0001-\u0001"+
		"-\u0001-\u0003-\u0590\b-\u0001-\u0003-\u0593\b-\u0001-\u0001-\u0001-\u0001"+
		"-\u0001-\u0003-\u059a\b-\u0001-\u0001-\u0001-\u0003-\u059f\b-\u0001-\u0001"+
		"-\u0001-\u0001-\u0001-\u0001-\u0003-\u05a7\b-\u0001-\u0001-\u0001-\u0003"+
		"-\u05ac\b-\u0001-\u0001-\u0003-\u05b0\b-\u0001-\u0001-\u0001-\u0001-\u0001"+
		"-\u0001-\u0003-\u05b8\b-\u0001-\u0001-\u0001-\u0003-\u05bd\b-\u0001-\u0001"+
		"-\u0001-\u0001-\u0003-\u05c3\b-\u0001-\u0001-\u0001-\u0001-\u0003-\u05c9"+
		"\b-\u0001-\u0003-\u05cc\b-\u0001-\u0003-\u05cf\b-\u0001-\u0003-\u05d2"+
		"\b-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0003-\u05db\b-\u0001"+
		"-\u0001-\u0001-\u0001-\u0001-\u0001-\u0003-\u05e3\b-\u0001-\u0001-\u0001"+
		"-\u0003-\u05e8\b-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0003-\u05f0"+
		"\b-\u0001-\u0001-\u0001-\u0001-\u0001-\u0003-\u05f7\b-\u0001-\u0003-\u05fa"+
		"\b-\u0001-\u0003-\u05fd\b-\u0003-\u05ff\b-\u0001-\u0001-\u0001-\u0001"+
		"-\u0001-\u0001-\u0003-\u0607\b-\u0001-\u0003-\u060a\b-\u0001-\u0003-\u060d"+
		"\b-\u0001-\u0003-\u0610\b-\u0001-\u0003-\u0613\b-\u0001-\u0003-\u0616"+
		"\b-\u0001-\u0003-\u0619\b-\u0001-\u0003-\u061c\b-\u0001-\u0003-\u061f"+
		"\b-\u0001-\u0003-\u0622\b-\u0001-\u0003-\u0625\b-\u0003-\u0627\b-\u0001"+
		"-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0003"+
		"-\u0633\b-\u0001-\u0001-\u0003-\u0637\b-\u0001.\u0001.\u0001.\u0001.\u0001"+
		".\u0001.\u0001.\u0001.\u0003.\u0641\b.\u0001/\u0001/\u0001/\u0001/\u0003"+
		"/\u0647\b/\u0001/\u0001/\u00010\u00010\u00010\u00010\u00010\u00011\u0001"+
		"1\u00012\u00012\u00012\u00012\u00032\u0656\b2\u00013\u00013\u00013\u0001"+
		"3\u00014\u00014\u00014\u00014\u00015\u00015\u00015\u00015\u00016\u0001"+
		"6\u00016\u00036\u0667\b6\u00016\u00016\u00016\u00036\u066c\b6\u00017\u0001"+
		"7\u00037\u0670\b7\u00017\u00017\u00037\u0674\b7\u00017\u00017\u00017\u0001"+
		"8\u00018\u00038\u067b\b8\u00018\u00018\u00018\u00058\u0680\b8\n8\f8\u0683"+
		"\t8\u00018\u00018\u00018\u00038\u0688\b8\u00019\u00019\u00039\u068c\b"+
		"9\u00019\u00039\u068f\b9\u00019\u00019\u00019\u00059\u0694\b9\n9\f9\u0697"+
		"\t9\u00019\u00019\u00019\u0001:\u0001:\u0001:\u0001:\u0001:\u0001;\u0001"+
		";\u0001;\u0001<\u0001<\u0001<\u0001<\u0001=\u0001=\u0001=\u0001=\u0001"+
		"=\u0003=\u06ad\b=\u0001>\u0001>\u0001>\u0003>\u06b2\b>\u0001>\u0001>\u0003"+
		">\u06b6\b>\u0001?\u0001?\u0001?\u0001?\u0001@\u0001@\u0003@\u06be\b@\u0001"+
		"A\u0001A\u0001A\u0001B\u0001B\u0001B\u0001B\u0003B\u06c7\bB\u0001B\u0001"+
		"B\u0003B\u06cb\bB\u0001B\u0001B\u0001B\u0001B\u0003B\u06d1\bB\u0001C\u0001"+
		"C\u0001C\u0001C\u0003C\u06d7\bC\u0001C\u0001C\u0001C\u0001C\u0001C\u0003"+
		"C\u06de\bC\u0001C\u0003C\u06e1\bC\u0001C\u0001C\u0001C\u0001C\u0003C\u06e7"+
		"\bC\u0001D\u0001D\u0001D\u0005D\u06ec\bD\nD\fD\u06ef\tD\u0001E\u0001E"+
		"\u0001E\u0001E\u0001E\u0003E\u06f6\bE\u0001F\u0001F\u0001G\u0001G\u0001"+
		"G\u0005G\u06fd\bG\nG\fG\u0700\tG\u0001H\u0001H\u0001H\u0001H\u0001H\u0001"+
		"H\u0003H\u0708\bH\u0001I\u0001I\u0001I\u0001I\u0001J\u0001J\u0001J\u0001"+
		"J\u0001K\u0001K\u0001K\u0001K\u0001L\u0001L\u0001L\u0001L\u0001M\u0001"+
		"M\u0003M\u071c\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0723\bM\u0003"+
		"M\u0725\bM\u0001N\u0001N\u0001N\u0005N\u072a\bN\nN\fN\u072d\tN\u0001O"+
		"\u0001O\u0001O\u0001P\u0001P\u0001Q\u0001Q\u0003Q\u0736\bQ\u0001Q\u0001"+
		"Q\u0001Q\u0001Q\u0001Q\u0001Q\u0003Q\u073e\bQ\u0001R\u0001R\u0003R\u0742"+
		"\bR\u0001R\u0001R\u0003R\u0746\bR\u0001R\u0001R\u0001S\u0001S\u0001S\u0001"+
		"T\u0001T\u0001T\u0001T\u0001T\u0001T\u0003T\u0753\bT\u0001T\u0001T\u0001"+
		"T\u0001U\u0001U\u0001U\u0001U\u0003U\u075c\bU\u0001U\u0001U\u0001V\u0001"+
		"V\u0003V\u0762\bV\u0001V\u0001V\u0003V\u0766\bV\u0001V\u0001V\u0001V\u0001"+
		"V\u0001V\u0003V\u076d\bV\u0001V\u0003V\u0770\bV\u0001V\u0003V\u0773\b"+
		"V\u0001V\u0003V\u0776\bV\u0001V\u0001V\u0001V\u0001W\u0001W\u0001W\u0001"+
		"W\u0001W\u0001W\u0001W\u0003W\u0782\bW\u0001W\u0001W\u0001X\u0001X\u0003"+
		"X\u0788\bX\u0001Y\u0001Y\u0001Y\u0001Y\u0001Y\u0001Y\u0001Z\u0001Z\u0001"+
		"Z\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0001\\\u0001\\\u0001\\\u0001"+
		"\\\u0001\\\u0001\\\u0001]\u0001]\u0001]\u0003]\u07a2\b]\u0001]\u0001]"+
		"\u0001^\u0001^\u0001^\u0001^\u0003^\u07aa\b^\u0001^\u0001^\u0003^\u07ae"+
		"\b^\u0001^\u0003^\u07b1\b^\u0001^\u0003^\u07b4\b^\u0001^\u0003^\u07b7"+
		"\b^\u0001^\u0003^\u07ba\b^\u0001^\u0003^\u07bd\b^\u0001^\u0003^\u07c0"+
		"\b^\u0001^\u0003^\u07c3\b^\u0001^\u0001^\u0001^\u0001_\u0001_\u0001_\u0001"+
		"_\u0003_\u07cc\b_\u0001_\u0001_\u0001`\u0001`\u0001`\u0001`\u0001`\u0001"+
		"`\u0003`\u07d6\b`\u0001`\u0003`\u07d9\b`\u0001`\u0001`\u0001a\u0001a\u0001"+
		"a\u0001a\u0001a\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001c\u0001"+
		"c\u0001c\u0001c\u0001c\u0003c\u07ed\bc\u0001d\u0001d\u0001d\u0001d\u0003"+
		"d\u07f3\bd\u0001d\u0001d\u0001d\u0001d\u0003d\u07f9\bd\u0001d\u0003d\u07fc"+
		"\bd\u0003d\u07fe\bd\u0001e\u0001e\u0001e\u0001e\u0001f\u0003f\u0805\b"+
		"f\u0001f\u0001f\u0001f\u0001g\u0001g\u0003g\u080c\bg\u0001h\u0001h\u0003"+
		"h\u0810\bh\u0001i\u0001i\u0001i\u0001j\u0001j\u0001j\u0001j\u0001j\u0003"+
		"j\u081a\bj\u0001j\u0001j\u0001j\u0003j\u081f\bj\u0001j\u0001j\u0001k\u0001"+
		"k\u0001k\u0005k\u0826\bk\nk\fk\u0829\tk\u0001l\u0001l\u0001l\u0005l\u082e"+
		"\bl\nl\fl\u0831\tl\u0001m\u0001m\u0001m\u0005m\u0836\bm\nm\fm\u0839\t"+
		"m\u0001n\u0001n\u0001o\u0001o\u0001o\u0001o\u0001o\u0001o\u0001o\u0001"+
		"o\u0001o\u0001o\u0001o\u0001o\u0001o\u0003o\u084a\bo\u0001p\u0001p\u0001"+
		"p\u0001p\u0001p\u0001p\u0001p\u0001p\u0001p\u0001p\u0001p\u0003p\u0857"+
		"\bp\u0001p\u0001p\u0001p\u0001p\u0001q\u0001q\u0001q\u0001q\u0001q\u0001"+
		"r\u0001r\u0001r\u0001r\u0001r\u0001r\u0001r\u0001r\u0001r\u0001r\u0003"+
		"r\u086c\br\u0001s\u0001s\u0003s\u0870\bs\u0001t\u0001t\u0001t\u0001u\u0001"+
		"u\u0001u\u0001v\u0001v\u0001v\u0001v\u0001v\u0001v\u0001v\u0003v\u087f"+
		"\bv\u0001w\u0001w\u0001w\u0001w\u0003w\u0885\bw\u0001w\u0003w\u0888\b"+
		"w\u0001w\u0003w\u088b\bw\u0001w\u0003w\u088e\bw\u0001w\u0003w\u0891\b"+
		"w\u0001x\u0001x\u0003x\u0895\bx\u0001y\u0001y\u0001y\u0001z\u0001z\u0001"+
		"z\u0001z\u0001{\u0001{\u0001{\u0005{\u08a1\b{\n{\f{\u08a4\t{\u0001{\u0001"+
		"{\u0001{\u0005{\u08a9\b{\n{\f{\u08ac\t{\u0003{\u08ae\b{\u0001|\u0001|"+
		"\u0001|\u0001|\u0001}\u0001}\u0001~\u0001~\u0001~\u0001~\u0001~\u0001"+
		"~\u0001~\u0003~\u08bd\b~\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f"+
		"\u0001\u007f\u0001\u007f\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080"+
		"\u0001\u0080\u0001\u0080\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081"+
		"\u0001\u0081\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083"+
		"\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0003\u0083\u08df\b\u0083"+
		"\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083"+
		"\u0003\u0083\u08e7\b\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0003\u0083"+
		"\u08ec\b\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083"+
		"\u0001\u0083\u0003\u0083\u08f4\b\u0083\u0001\u0083\u0001\u0083\u0001\u0083"+
		"\u0003\u0083\u08f9\b\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0003\u0083"+
		"\u08fe\b\u0083\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0085\u0001\u0085"+
		"\u0001\u0085\u0005\u0085\u0906\b\u0085\n\u0085\f\u0085\u0909\t\u0085\u0001"+
		"\u0086\u0001\u0086\u0001\u0086\u0005\u0086\u090e\b\u0086\n\u0086\f\u0086"+
		"\u0911\t\u0086\u0001\u0087\u0001\u0087\u0001\u0087\u0005\u0087\u0916\b"+
		"\u0087\n\u0087\f\u0087\u0919\t\u0087\u0001\u0088\u0001\u0088\u0001\u0088"+
		"\u0005\u0088\u091e\b\u0088\n\u0088\f\u0088\u0921\t\u0088\u0001\u0089\u0001"+
		"\u0089\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001"+
		"\u008a\u0003\u008a\u092b\b\u008a\u0005\u008a\u092d\b\u008a\n\u008a\f\u008a"+
		"\u0930\t\u008a\u0001\u008b\u0001\u008b\u0001\u008b\u0005\u008b\u0935\b"+
		"\u008b\n\u008b\f\u008b\u0938\t\u008b\u0001\u008c\u0001\u008c\u0001\u008c"+
		"\u0001\u008c\u0001\u008d\u0001\u008d\u0003\u008d\u0940\b\u008d\u0001\u008d"+
		"\u0003\u008d\u0943\b\u008d\u0001\u008e\u0001\u008e\u0001\u008f\u0001\u008f"+
		"\u0001\u0090\u0001\u0090\u0001\u0090\u0003\u0090\u094c\b\u0090\u0001\u0091"+
		"\u0001\u0091\u0001\u0092\u0001\u0092\u0003\u0092\u0952\b\u0092\u0001\u0092"+
		"\u0001\u0092\u0003\u0092\u0956\b\u0092\u0001\u0093\u0001\u0093\u0001\u0093"+
		"\u0001\u0093\u0003\u0093\u095c\b\u0093\u0001\u0094\u0001\u0094\u0003\u0094"+
		"\u0960\b\u0094\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0096\u0001\u0096"+
		"\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0097\u0001\u0097\u0003\u0097"+
		"\u096c\b\u0097\u0001\u0097\u0001\u0097\u0001\u0097\u0001\u0097\u0001\u0097"+
		"\u0001\u0097\u0001\u0097\u0003\u0097\u0975\b\u0097\u0001\u0098\u0001\u0098"+
		"\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098"+
		"\u0001\u0098\u0003\u0098\u0980\b\u0098\u0001\u0099\u0001\u0099\u0003\u0099"+
		"\u0984\b\u0099\u0001\u009a\u0001\u009a\u0001\u009a\u0005\u009a\u0989\b"+
		"\u009a\n\u009a\f\u009a\u098c\t\u009a\u0001\u009b\u0001\u009b\u0001\u009b"+
		"\u0001\u009b\u0001\u009c\u0001\u009c\u0001\u009c\u0005\u009c\u0995\b\u009c"+
		"\n\u009c\f\u009c\u0998\t\u009c\u0001\u009d\u0001\u009d\u0001\u009e\u0001"+
		"\u009e\u0003\u009e\u099e\b\u009e\u0001\u009f\u0001\u009f\u0001\u00a0\u0001"+
		"\u00a0\u0001\u00a0\u0001\u00a1\u0001\u00a1\u0003\u00a1\u09a7\b\u00a1\u0001"+
		"\u00a1\u0003\u00a1\u09aa\b\u00a1\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0005"+
		"\u00a2\u09af\b\u00a2\n\u00a2\f\u00a2\u09b2\t\u00a2\u0001\u00a3\u0001\u00a3"+
		"\u0001\u00a3\u0003\u00a3\u09b7\b\u00a3\u0001\u00a4\u0001\u00a4\u0001\u00a5"+
		"\u0001\u00a5\u0003\u00a5\u09bd\b\u00a5\u0001\u00a5\u0003\u00a5\u09c0\b"+
		"\u00a5\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0003\u00a6\u09c6"+
		"\b\u00a6\u0001\u00a7\u0001\u00a7\u0003\u00a7\u09ca\b\u00a7\u0001\u00a8"+
		"\u0001\u00a8\u0003\u00a8\u09ce\b\u00a8\u0001\u00a9\u0001\u00a9\u0001\u00a9"+
		"\u0003\u00a9\u09d3\b\u00a9\u0001\u00a9\u0001\u00a9\u0003\u00a9\u09d7\b"+
		"\u00a9\u0001\u00aa\u0001\u00aa\u0003\u00aa\u09db\b\u00aa\u0001\u00ab\u0001"+
		"\u00ab\u0003\u00ab\u09df\b\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001"+
		"\u00ab\u0001\u00ab\u0001\u00ab\u0003\u00ab\u09e7\b\u00ab\u0001\u00ac\u0001"+
		"\u00ac\u0003\u00ac\u09eb\b\u00ac\u0001\u00ac\u0001\u00ac\u0003\u00ac\u09ef"+
		"\b\u00ac\u0001\u00ad\u0001\u00ad\u0003\u00ad\u09f3\b\u00ad\u0001\u00ae"+
		"\u0001\u00ae\u0003\u00ae\u09f7\b\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae"+
		"\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0003\u00ae\u09ff\b\u00ae\u0001\u00af"+
		"\u0001\u00af\u0003\u00af\u0a03\b\u00af\u0001\u00af\u0001\u00af\u0003\u00af"+
		"\u0a07\b\u00af\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0"+
		"\u0001\u00b0\u0003\u00b0\u0a0f\b\u00b0\u0001\u00b1\u0001\u00b1\u0001\u00b1"+
		"\u0003\u00b1\u0a14\b\u00b1\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0003\u00b2"+
		"\u0a19\b\u00b2\u0001\u00b3\u0001\u00b3\u0003\u00b3\u0a1d\b\u00b3\u0001"+
		"\u00b4\u0001\u00b4\u0003\u00b4\u0a21\b\u00b4\u0001\u00b5\u0001\u00b5\u0001"+
		"\u00b5\u0001\u00b5\u0001\u00b5\u0003\u00b5\u0a28\b\u00b5\u0001\u00b6\u0001"+
		"\u00b6\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0005\u00b7\u0a2f\b\u00b7\n"+
		"\u00b7\f\u00b7\u0a32\t\u00b7\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0001"+
		"\u00b8\u0001\u00b8\u0003\u00b8\u0a39\b\u00b8\u0001\u00b9\u0001\u00b9\u0001"+
		"\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001"+
		"\u00b9\u0003\u00b9\u0a44\b\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001"+
		"\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001"+
		"\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001"+
		"\u00b9\u0003\u00b9\u0a56\b\u00b9\u0001\u00b9\u0003\u00b9\u0a59\b\u00b9"+
		"\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0003\u00b9\u0a5f\b\u00b9"+
		"\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00bb"+
		"\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bc\u0001\u00bc"+
		"\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bd"+
		"\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00be\u0001\u00be"+
		"\u0003\u00be\u0a79\b\u00be\u0001\u00bf\u0003\u00bf\u0a7c\b\u00bf\u0001"+
		"\u00bf\u0001\u00bf\u0001\u00c0\u0001\u00c0\u0003\u00c0\u0a82\b\u00c0\u0001"+
		"\u00c1\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0005\u00c1\u0a88\b\u00c1\n"+
		"\u00c1\f\u00c1\u0a8b\t\u00c1\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001"+
		"\u00c2\u0001\u00c2\u0003\u00c2\u0a92\b\u00c2\u0001\u00c2\u0001\u00c2\u0001"+
		"\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001"+
		"\u00c3\u0005\u00c3\u0a9d\b\u00c3\n\u00c3\f\u00c3\u0aa0\t\u00c3\u0001\u00c4"+
		"\u0001\u00c4\u0004\u00c4\u0aa4\b\u00c4\u000b\u00c4\f\u00c4\u0aa5\u0001"+
		"\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0003\u00c5\u0aac\b\u00c5\u0001"+
		"\u00c6\u0001\u00c6\u0003\u00c6\u0ab0\b\u00c6\u0001\u00c6\u0003\u00c6\u0ab3"+
		"\b\u00c6\u0001\u00c6\u0003\u00c6\u0ab6\b\u00c6\u0001\u00c6\u0003\u00c6"+
		"\u0ab9\b\u00c6\u0001\u00c6\u0003\u00c6\u0abc\b\u00c6\u0001\u00c6\u0003"+
		"\u00c6\u0abf\b\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001"+
		"\u00c6\u0003\u00c6\u0ac6\b\u00c6\u0001\u00c7\u0001\u00c7\u0003\u00c7\u0aca"+
		"\b\u00c7\u0001\u00c7\u0003\u00c7\u0acd\b\u00c7\u0001\u00c7\u0003\u00c7"+
		"\u0ad0\b\u00c7\u0001\u00c7\u0003\u00c7\u0ad3\b\u00c7\u0001\u00c7\u0003"+
		"\u00c7\u0ad6\b\u00c7\u0001\u00c7\u0003\u00c7\u0ad9\b\u00c7\u0001\u00c8"+
		"\u0001\u00c8\u0001\u00c8\u0004\u00c8\u0ade\b\u00c8\u000b\u00c8\f\u00c8"+
		"\u0adf\u0001\u00c9\u0003\u00c9\u0ae3\b\u00c9\u0001\u00c9\u0001\u00c9\u0001"+
		"\u00ca\u0001\u00ca\u0001\u00ca\u0003\u00ca\u0aea\b\u00ca\u0001\u00ca\u0003"+
		"\u00ca\u0aed\b\u00ca\u0001\u00ca\u0003\u00ca\u0af0\b\u00ca\u0001\u00ca"+
		"\u0003\u00ca\u0af3\b\u00ca\u0001\u00ca\u0003\u00ca\u0af6\b\u00ca\u0001"+
		"\u00ca\u0003\u00ca\u0af9\b\u00ca\u0001\u00ca\u0003\u00ca\u0afc\b\u00ca"+
		"\u0001\u00ca\u0003\u00ca\u0aff\b\u00ca\u0001\u00ca\u0003\u00ca\u0b02\b"+
		"\u00ca\u0001\u00ca\u0003\u00ca\u0b05\b\u00ca\u0001\u00ca\u0003\u00ca\u0b08"+
		"\b\u00ca\u0001\u00ca\u0001\u00ca\u0003\u00ca\u0b0c\b\u00ca\u0001\u00ca"+
		"\u0003\u00ca\u0b0f\b\u00ca\u0001\u00ca\u0003\u00ca\u0b12\b\u00ca\u0001"+
		"\u00ca\u0003\u00ca\u0b15\b\u00ca\u0001\u00ca\u0003\u00ca\u0b18\b\u00ca"+
		"\u0001\u00ca\u0003\u00ca\u0b1b\b\u00ca\u0001\u00ca\u0003\u00ca\u0b1e\b"+
		"\u00ca\u0001\u00ca\u0003\u00ca\u0b21\b\u00ca\u0001\u00ca\u0003\u00ca\u0b24"+
		"\b\u00ca\u0001\u00ca\u0003\u00ca\u0b27\b\u00ca\u0001\u00ca\u0003\u00ca"+
		"\u0b2a\b\u00ca\u0003\u00ca\u0b2c\b\u00ca\u0001\u00cb\u0001\u00cb\u0001"+
		"\u00cb\u0001\u00cb\u0003\u00cb\u0b32\b\u00cb\u0001\u00cb\u0001\u00cb\u0003"+
		"\u00cb\u0b36\b\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001"+
		"\u00cb\u0003\u00cb\u0b3d\b\u00cb\u0003\u00cb\u0b3f\b\u00cb\u0001\u00cc"+
		"\u0003\u00cc\u0b42\b\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0003\u00cc"+
		"\u0b47\b\u00cc\u0001\u00cc\u0003\u00cc\u0b4a\b\u00cc\u0001\u00cc\u0001"+
		"\u00cc\u0003\u00cc\u0b4e\b\u00cc\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0003"+
		"\u00cd\u0b53\b\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0003"+
		"\u00cd\u0b59\b\u00cd\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0003"+
		"\u00ce\u0b5f\b\u00ce\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001"+
		"\u00d0\u0001\u00d0\u0003\u00d0\u0b67\b\u00d0\u0001\u00d1\u0001\u00d1\u0001"+
		"\u00d1\u0001\u00d1\u0005\u00d1\u0b6d\b\u00d1\n\u00d1\f\u00d1\u0b70\t\u00d1"+
		"\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0003\u00d2\u0b76\b\u00d2"+
		"\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0003\u00d3\u0b7c\b\u00d3"+
		"\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0005\u00d4"+
		"\u0b83\b\u00d4\n\u00d4\f\u00d4\u0b86\t\u00d4\u0003\u00d4\u0b88\b\u00d4"+
		"\u0001\u00d5\u0001\u00d5\u0003\u00d5\u0b8c\b\u00d5\u0001\u00d6\u0001\u00d6"+
		"\u0001\u00d6\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d8"+
		"\u0001\u00d8\u0001\u00d9\u0001\u00d9\u0003\u00d9\u0b99\b\u00d9\u0001\u00da"+
		"\u0001\u00da\u0003\u00da\u0b9d\b\u00da\u0001\u00db\u0001\u00db\u0001\u00db"+
		"\u0001\u00db\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0004\u00dc\u0ba6\b\u00dc"+
		"\u000b\u00dc\f\u00dc\u0ba7\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0004\u00dd"+
		"\u0bad\b\u00dd\u000b\u00dd\f\u00dd\u0bae\u0001\u00de\u0001\u00de\u0003"+
		"\u00de\u0bb3\b\u00de\u0001\u00de\u0001\u00de\u0001\u00de\u0003\u00de\u0bb8"+
		"\b\u00de\u0001\u00de\u0003\u00de\u0bbb\b\u00de\u0001\u00de\u0001\u00de"+
		"\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00df\u0001\u00df"+
		"\u0005\u00df\u0bc5\b\u00df\n\u00df\f\u00df\u0bc8\t\u00df\u0001\u00df\u0003"+
		"\u00df\u0bcb\b\u00df\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001"+
		"\u00e0\u0003\u00e0\u0bd2\b\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0003"+
		"\u00e0\u0bd7\b\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e1\u0001"+
		"\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001"+
		"\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0003\u00e3\u0beb\b\u00e3\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0004\u00e4\u0bf0\b\u00e4\u000b\u00e4\f\u00e4\u0bf1\u0001\u00e5"+
		"\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e6\u0001\u00e6\u0001\u00e6"+
		"\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e8\u0001\u00e8\u0001\u00e8"+
		"\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9"+
		"\u0001\u00e9\u0001\u00e9\u0003\u00e9\u0c09\b\u00e9\u0001\u00e9\u0001\u00e9"+
		"\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9"+
		"\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0003\u00e9\u0c17\b\u00e9"+
		"\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea"+
		"\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea"+
		"\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea"+
		"\u0001\u00ea\u0003\u00ea\u0c2c\b\u00ea\u0001\u00eb\u0001\u00eb\u0001\u00eb"+
		"\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb"+
		"\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0003\u00eb"+
		"\u0c3c\b\u00eb\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec"+
		"\u0001\u00ec\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed"+
		"\u0003\u00ed\u0c49\b\u00ed\u0001\u00ee\u0001\u00ee\u0003\u00ee\u0c4d\b"+
		"\u00ee\u0001\u00ef\u0001\u00ef\u0003\u00ef\u0c51\b\u00ef\u0001\u00f0\u0001"+
		"\u00f0\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u0c58\b\u00f1\u0001"+
		"\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f3\u0001"+
		"\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f4\u0001\u00f4\u0001"+
		"\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001"+
		"\u00f5\u0001\u00f5\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001"+
		"\u00f7\u0001\u00f7\u0003\u00f7\u0c74\b\u00f7\u0001\u00f7\u0001\u00f7\u0001"+
		"\u00f7\u0001\u00f7\u0001\u00f7\u0003\u00f7\u0c7b\b\u00f7\u0001\u00f8\u0001"+
		"\u00f8\u0001\u00f8\u0003\u00f8\u0c80\b\u00f8\u0001\u00f9\u0001\u00f9\u0001"+
		"\u00f9\u0003\u00f9\u0c85\b\u00f9\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001"+
		"\u00fa\u0001\u00fb\u0001\u00fb\u0003\u00fb\u0c8d\b\u00fb\u0001\u00fb\u0001"+
		"\u00fb\u0001\u00fb\u0001\u00fb\u0003\u00fb\u0c93\b\u00fb\u0001\u00fb\u0001"+
		"\u00fb\u0003\u00fb\u0c97\b\u00fb\u0001\u00fb\u0003\u00fb\u0c9a\b\u00fb"+
		"\u0001\u00fb\u0003\u00fb\u0c9d\b\u00fb\u0001\u00fc\u0001\u00fc\u0001\u00fc"+
		"\u0001\u00fc\u0003\u00fc\u0ca3\b\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc"+
		"\u0001\u00fc\u0001\u00fc\u0003\u00fc\u0caa\b\u00fc\u0001\u00fd\u0001\u00fd"+
		"\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fe\u0001\u00fe\u0001\u00fe"+
		"\u0003\u00fe\u0cb4\b\u00fe\u0001\u00ff\u0001\u00ff\u0003\u00ff\u0cb8\b"+
		"\u00ff\u0001\u00ff\u0004\u00ff\u0cbb\b\u00ff\u000b\u00ff\f\u00ff\u0cbc"+
		"\u0001\u0100\u0001\u0100\u0003\u0100\u0cc1\b\u0100\u0001\u0101\u0001\u0101"+
		"\u0005\u0101\u0cc5\b\u0101\n\u0101\f\u0101\u0cc8\t\u0101\u0001\u0102\u0001"+
		"\u0102\u0005\u0102\u0ccc\b\u0102\n\u0102\f\u0102\u0ccf\t\u0102\u0001\u0103"+
		"\u0001\u0103\u0005\u0103\u0cd3\b\u0103\n\u0103\f\u0103\u0cd6\t\u0103\u0001"+
		"\u0104\u0001\u0104\u0001\u0104\u0001\u0105\u0001\u0105\u0003\u0105\u0cdd"+
		"\b\u0105\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0105\u0005"+
		"\u0105\u0ce4\b\u0105\n\u0105\f\u0105\u0ce7\t\u0105\u0001\u0105\u0003\u0105"+
		"\u0cea\b\u0105\u0001\u0105\u0003\u0105\u0ced\b\u0105\u0001\u0106\u0001"+
		"\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0003\u0106\u0cf5"+
		"\b\u0106\u0001\u0106\u0003\u0106\u0cf8\b\u0106\u0001\u0107\u0001\u0107"+
		"\u0001\u0107\u0001\u0107\u0001\u0107\u0001\u0107\u0003\u0107\u0d00\b\u0107"+
		"\u0001\u0107\u0003\u0107\u0d03\b\u0107\u0001\u0108\u0001\u0108\u0001\u0108"+
		"\u0001\u0108\u0001\u0108\u0001\u0108\u0003\u0108\u0d0b\b\u0108\u0001\u0108"+
		"\u0001\u0108\u0003\u0108\u0d0f\b\u0108\u0001\u0108\u0001\u0108\u0001\u0108"+
		"\u0003\u0108\u0d14\b\u0108\u0001\u0109\u0001\u0109\u0003\u0109\u0d18\b"+
		"\u0109\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010b\u0001"+
		"\u010b\u0001\u010b\u0003\u010b\u0d21\b\u010b\u0001\u010c\u0001\u010c\u0001"+
		"\u010c\u0001\u010c\u0001\u010c\u0001\u010d\u0001\u010d\u0001\u010d\u0001"+
		"\u010d\u0001\u010e\u0001\u010e\u0001\u010e\u0005\u010e\u0d2f\b\u010e\n"+
		"\u010e\f\u010e\u0d32\t\u010e\u0001\u010f\u0001\u010f\u0001\u010f\u0001"+
		"\u010f\u0001\u0110\u0001\u0110\u0001\u0110\u0001\u0110\u0001\u0111\u0001"+
		"\u0111\u0001\u0111\u0001\u0111\u0003\u0111\u0d40\b\u0111\u0003\u0111\u0d42"+
		"\b\u0111\u0001\u0112\u0001\u0112\u0001\u0112\u0001\u0112\u0001\u0112\u0001"+
		"\u0112\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0114\u0001"+
		"\u0114\u0001\u0114\u0001\u0114\u0003\u0114\u0d52\b\u0114\u0001\u0114\u0001"+
		"\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0003\u0114\u0d59\b\u0114\u0001"+
		"\u0115\u0001\u0115\u0001\u0116\u0001\u0116\u0001\u0116\u0001\u0116\u0001"+
		"\u0117\u0001\u0117\u0001\u0117\u0001\u0118\u0001\u0118\u0001\u0118\u0001"+
		"\u0119\u0001\u0119\u0001\u0119\u0003\u0119\u0d6a\b\u0119\u0001\u0119\u0003"+
		"\u0119\u0d6d\b\u0119\u0001\u0119\u0003\u0119\u0d70\b\u0119\u0001\u0119"+
		"\u0001\u0119\u0001\u0119\u0001\u0119\u0003\u0119\u0d76\b\u0119\u0001\u011a"+
		"\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011b\u0001\u011b\u0001\u011b"+
		"\u0001\u011b\u0001\u011b\u0001\u011b\u0001\u011b\u0001\u011c\u0001\u011c"+
		"\u0001\u011c\u0001\u011c\u0001\u011c\u0001\u011c\u0001\u011c\u0001\u011c"+
		"\u0001\u011c\u0001\u011c\u0003\u011c\u0d8d\b\u011c\u0001\u011c\u0001\u011c"+
		"\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d"+
		"\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0003\u011d\u0d9b\b\u011d"+
		"\u0001\u011d\u0003\u011d\u0d9e\b\u011d\u0001\u011e\u0001\u011e\u0001\u011e"+
		"\u0003\u011e\u0da3\b\u011e\u0001\u011f\u0001\u011f\u0001\u011f\u0001\u011f"+
		"\u0001\u011f\u0001\u0120\u0001\u0120\u0001\u0120\u0001\u0120\u0001\u0120"+
		"\u0001\u0121\u0001\u0121\u0001\u0121\u0001\u0121\u0001\u0121\u0001\u0122"+
		"\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122"+
		"\u0001\u0122\u0001\u0122\u0003\u0122\u0dbd\b\u0122\u0001\u0123\u0001\u0123"+
		"\u0003\u0123\u0dc1\b\u0123\u0001\u0123\u0003\u0123\u0dc4\b\u0123\u0001"+
		"\u0123\u0003\u0123\u0dc7\b\u0123\u0001\u0123\u0001\u0123\u0003\u0123\u0dcb"+
		"\b\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0003\u0123\u0dd0\b\u0123"+
		"\u0001\u0123\u0003\u0123\u0dd3\b\u0123\u0001\u0123\u0003\u0123\u0dd6\b"+
		"\u0123\u0001\u0123\u0003\u0123\u0dd9\b\u0123\u0001\u0123\u0003\u0123\u0ddc"+
		"\b\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0003\u0123\u0de2"+
		"\b\u0123\u0001\u0123\u0003\u0123\u0de5\b\u0123\u0001\u0123\u0003\u0123"+
		"\u0de8\b\u0123\u0001\u0123\u0003\u0123\u0deb\b\u0123\u0001\u0123\u0003"+
		"\u0123\u0dee\b\u0123\u0001\u0123\u0003\u0123\u0df1\b\u0123\u0001\u0123"+
		"\u0003\u0123\u0df4\b\u0123\u0001\u0123\u0003\u0123\u0df7\b\u0123\u0001"+
		"\u0123\u0003\u0123\u0dfa\b\u0123\u0001\u0123\u0001\u0123\u0003\u0123\u0dfe"+
		"\b\u0123\u0003\u0123\u0e00\b\u0123\u0001\u0123\u0001\u0123\u0001\u0123"+
		"\u0001\u0123\u0003\u0123\u0e06\b\u0123\u0001\u0123\u0001\u0123\u0001\u0123"+
		"\u0003\u0123\u0e0b\b\u0123\u0001\u0123\u0003\u0123\u0e0e\b\u0123\u0001"+
		"\u0123\u0003\u0123\u0e11\b\u0123\u0001\u0123\u0003\u0123\u0e14\b\u0123"+
		"\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0003\u0123\u0e1a\b\u0123"+
		"\u0001\u0123\u0003\u0123\u0e1d\b\u0123\u0001\u0123\u0003\u0123\u0e20\b"+
		"\u0123\u0001\u0123\u0003\u0123\u0e23\b\u0123\u0001\u0123\u0003\u0123\u0e26"+
		"\b\u0123\u0001\u0123\u0003\u0123\u0e29\b\u0123\u0001\u0123\u0003\u0123"+
		"\u0e2c\b\u0123\u0001\u0123\u0003\u0123\u0e2f\b\u0123\u0001\u0123\u0003"+
		"\u0123\u0e32\b\u0123\u0001\u0123\u0001\u0123\u0003\u0123\u0e36\b\u0123"+
		"\u0003\u0123\u0e38\b\u0123\u0003\u0123\u0e3a\b\u0123\u0001\u0124\u0001"+
		"\u0124\u0001\u0124\u0003\u0124\u0e3f\b\u0124\u0001\u0124\u0001\u0124\u0001"+
		"\u0124\u0001\u0124\u0003\u0124\u0e45\b\u0124\u0001\u0124\u0001\u0124\u0001"+
		"\u0124\u0003\u0124\u0e4a\b\u0124\u0001\u0125\u0001\u0125\u0001\u0125\u0001"+
		"\u0126\u0001\u0126\u0001\u0126\u0001\u0127\u0001\u0127\u0001\u0127\u0001"+
		"\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0129\u0001\u0129\u0001"+
		"\u0129\u0003\u0129\u0e5c\b\u0129\u0001\u0129\u0001\u0129\u0001\u012a\u0001"+
		"\u012a\u0001\u012a\u0001\u012a\u0001\u012a\u0003\u012a\u0e65\b\u012a\u0001"+
		"\u012b\u0001\u012b\u0001\u012c\u0001\u012c\u0001\u012d\u0001\u012d\u0001"+
		"\u012d\u0005\u012d\u0e6e\b\u012d\n\u012d\f\u012d\u0e71\t\u012d\u0001\u012e"+
		"\u0001\u012e\u0001\u012e\u0005\u012e\u0e76\b\u012e\n\u012e\f\u012e\u0e79"+
		"\t\u012e\u0001\u012f\u0001\u012f\u0001\u012f\u0001\u0130\u0001\u0130\u0001"+
		"\u0130\u0001\u0130\u0004\u0130\u0e82\b\u0130\u000b\u0130\f\u0130\u0e83"+
		"\u0001\u0130\u0003\u0130\u0e87\b\u0130\u0001\u0131\u0001\u0131\u0005\u0131"+
		"\u0e8b\b\u0131\n\u0131\f\u0131\u0e8e\t\u0131\u0001\u0131\u0001\u0131\u0005"+
		"\u0131\u0e92\b\u0131\n\u0131\f\u0131\u0e95\t\u0131\u0001\u0131\u0001\u0131"+
		"\u0005\u0131\u0e99\b\u0131\n\u0131\f\u0131\u0e9c\t\u0131\u0001\u0131\u0001"+
		"\u0131\u0005\u0131\u0ea0\b\u0131\n\u0131\f\u0131\u0ea3\t\u0131\u0001\u0131"+
		"\u0001\u0131\u0001\u0131\u0001\u0131\u0003\u0131\u0ea9\b\u0131\u0001\u0132"+
		"\u0001\u0132\u0001\u0132\u0001\u0132\u0001\u0132\u0001\u0132\u0001\u0132"+
		"\u0003\u0132\u0eb2\b\u0132\u0005\u0132\u0eb4\b\u0132\n\u0132\f\u0132\u0eb7"+
		"\t\u0132\u0001\u0133\u0001\u0133\u0001\u0133\u0001\u0133\u0003\u0133\u0ebd"+
		"\b\u0133\u0001\u0133\u0005\u0133\u0ec0\b\u0133\n\u0133\f\u0133\u0ec3\t"+
		"\u0133\u0001\u0134\u0003\u0134\u0ec6\b\u0134\u0001\u0134\u0001\u0134\u0001"+
		"\u0134\u0001\u0135\u0001\u0135\u0001\u0135\u0001\u0135\u0001\u0136\u0001"+
		"\u0136\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0003"+
		"\u0137\u0ed6\b\u0137\u0001\u0137\u0001\u0137\u0003\u0137\u0eda\b\u0137"+
		"\u0003\u0137\u0edc\b\u0137\u0001\u0137\u0003\u0137\u0edf\b\u0137\u0001"+
		"\u0138\u0001\u0138\u0001\u0138\u0001\u0138\u0001\u0138\u0001\u0138\u0001"+
		"\u0138\u0001\u0138\u0001\u0138\u0005\u0138\u0eea\b\u0138\n\u0138\f\u0138"+
		"\u0eed\t\u0138\u0003\u0138\u0eef\b\u0138\u0001\u0138\u0003\u0138\u0ef2"+
		"\b\u0138\u0001\u0138\u0001\u0138\u0001\u0138\u0001\u0138\u0001\u0138\u0001"+
		"\u0138\u0001\u0138\u0001\u0138\u0005\u0138\u0efc\b\u0138\n\u0138\f\u0138"+
		"\u0eff\t\u0138\u0003\u0138\u0f01\b\u0138\u0001\u0138\u0001\u0138\u0001"+
		"\u0138\u0001\u0138\u0001\u0138\u0003\u0138\u0f08\b\u0138\u0001\u0138\u0001"+
		"\u0138\u0001\u0138\u0001\u0138\u0001\u0138\u0005\u0138\u0f0f\b\u0138\n"+
		"\u0138\f\u0138\u0f12\t\u0138\u0001\u0138\u0001\u0138\u0003\u0138\u0f16"+
		"\b\u0138\u0003\u0138\u0f18\b\u0138\u0003\u0138\u0f1a\b\u0138\u0001\u0139"+
		"\u0001\u0139\u0001\u013a\u0001\u013a\u0001\u013a\u0001\u013a\u0001\u013a"+
		"\u0001\u013a\u0001\u013a\u0001\u013a\u0001\u013a\u0001\u013a\u0001\u013a"+
		"\u0005\u013a\u0f29\b\u013a\n\u013a\f\u013a\u0f2c\t\u013a\u0003\u013a\u0f2e"+
		"\b\u013a\u0001\u013a\u0001\u013a\u0001\u013b\u0001\u013b\u0001\u013b\u0001"+
		"\u013b\u0001\u013b\u0003\u013b\u0f37\b\u013b\u0001\u013b\u0001\u013b\u0001"+
		"\u013c\u0001\u013c\u0003\u013c\u0f3d\b\u013c\u0001\u013d\u0001\u013d\u0003"+
		"\u013d\u0f41\b\u013d\u0001\u013d\u0003\u013d\u0f44\b\u013d\u0001\u013d"+
		"\u0003\u013d\u0f47\b\u013d\u0001\u013d\u0003\u013d\u0f4a\b\u013d\u0001"+
		"\u013d\u0003\u013d\u0f4d\b\u013d\u0001\u013e\u0001\u013e\u0001\u013e\u0001"+
		"\u013e\u0001\u013e\u0001\u013e\u0001\u013e\u0001\u013e\u0001\u013e\u0001"+
		"\u013e\u0003\u013e\u0f59\b\u013e\u0001\u013f\u0001\u013f\u0003\u013f\u0f5d"+
		"\b\u013f\u0001\u013f\u0003\u013f\u0f60\b\u013f\u0001\u013f\u0003\u013f"+
		"\u0f63\b\u013f\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140"+
		"\u0003\u0140\u0f6a\b\u0140\u0001\u0140\u0003\u0140\u0f6d\b\u0140\u0001"+
		"\u0141\u0001\u0141\u0001\u0141\u0003\u0141\u0f72\b\u0141\u0001\u0141\u0001"+
		"\u0141\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0003\u0142\u0f7a"+
		"\b\u0142\u0001\u0142\u0001\u0142\u0001\u0143\u0001\u0143\u0003\u0143\u0f80"+
		"\b\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0003\u0143\u0f85\b\u0143"+
		"\u0001\u0143\u0001\u0143\u0003\u0143\u0f89\b\u0143\u0001\u0144\u0001\u0144"+
		"\u0001\u0144\u0003\u0144\u0f8e\b\u0144\u0001\u0145\u0001\u0145\u0001\u0145"+
		"\u0001\u0145\u0001\u0145\u0003\u0145\u0f95\b\u0145\u0001\u0145\u0001\u0145"+
		"\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145"+
		"\u0001\u0145\u0001\u0145\u0005\u0145\u0fa1\b\u0145\n\u0145\f\u0145\u0fa4"+
		"\t\u0145\u0003\u0145\u0fa6\b\u0145\u0001\u0145\u0001\u0145\u0003\u0145"+
		"\u0faa\b\u0145\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0147\u0001\u0147"+
		"\u0001\u0148\u0001\u0148\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u014a"+
		"\u0001\u014a\u0001\u014a\u0005\u014a\u0fb9\b\u014a\n\u014a\f\u014a\u0fbc"+
		"\t\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0005\u014a\u0fc1\b\u014a"+
		"\n\u014a\f\u014a\u0fc4\t\u014a\u0003\u014a\u0fc6\b\u014a\u0001\u014b\u0001"+
		"\u014b\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014d\u0001"+
		"\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0003\u014d\u0fd3\b\u014d\u0001"+
		"\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0005\u014d\u0fda"+
		"\b\u014d\n\u014d\f\u014d\u0fdd\t\u014d\u0003\u014d\u0fdf\b\u014d\u0001"+
		"\u014d\u0001\u014d\u0001\u014e\u0001\u014e\u0003\u014e\u0fe5\b\u014e\u0001"+
		"\u014e\u0003\u014e\u0fe8\b\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0003"+
		"\u014e\u0fed\b\u014e\u0001\u014e\u0003\u014e\u0ff0\b\u014e\u0001\u014f"+
		"\u0001\u014f\u0001\u0150\u0001\u0150\u0001\u0150\u0005\u0150\u0ff7\b\u0150"+
		"\n\u0150\f\u0150\u0ffa\t\u0150\u0001\u0151\u0001\u0151\u0001\u0151\u0001"+
		"\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001"+
		"\u0151\u0001\u0151\u0003\u0151\u1007\b\u0151\u0001\u0151\u0001\u0151\u0001"+
		"\u0151\u0001\u0151\u0003\u0151\u100d\b\u0151\u0003\u0151\u100f\b\u0151"+
		"\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0152\u0001\u0152\u0001\u0152"+
		"\u0003\u0152\u1017\b\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152"+
		"\u0001\u0152\u0001\u0152\u0005\u0152\u101f\b\u0152\n\u0152\f\u0152\u1022"+
		"\t\u0152\u0001\u0152\u0001\u0152\u0003\u0152\u1026\b\u0152\u0003\u0152"+
		"\u1028\b\u0152\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153"+
		"\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0003\u0153"+
		"\u1034\b\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0003\u0153"+
		"\u103a\b\u0153\u0003\u0153\u103c\b\u0153\u0001\u0153\u0001\u0153\u0001"+
		"\u0153\u0001\u0154\u0001\u0154\u0003\u0154\u1043\b\u0154\u0001\u0155\u0001"+
		"\u0155\u0001\u0155\u0005\u0155\u1048\b\u0155\n\u0155\f\u0155\u104b\t\u0155"+
		"\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0005\u0156\u1051\b\u0156"+
		"\n\u0156\f\u0156\u1054\t\u0156\u0001\u0157\u0001\u0157\u0001\u0157\u0001"+
		"\u0157\u0001\u0158\u0001\u0158\u0001\u0158\u0003\u0158\u105d\b\u0158\u0001"+
		"\u0158\u0003\u0158\u1060\b\u0158\u0001\u0158\u0003\u0158\u1063\b\u0158"+
		"\u0001\u0158\u0003\u0158\u1066\b\u0158\u0001\u0159\u0001\u0159\u0003\u0159"+
		"\u106a\b\u0159\u0001\u015a\u0001\u015a\u0001\u015a\u0001\u015a\u0001\u015a"+
		"\u0001\u015a\u0001\u015a\u0003\u015a\u1073\b\u015a\u0001\u015b\u0001\u015b"+
		"\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0003\u015b"+
		"\u107c\b\u015b\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c"+
		"\u0001\u015c\u0003\u015c\u1084\b\u015c\u0001\u015d\u0001\u015d\u0001\u015d"+
		"\u0001\u015d\u0003\u015d\u108a\b\u015d\u0001\u015e\u0001\u015e\u0001\u015e"+
		"\u0001\u015e\u0001\u015f\u0001\u015f\u0001\u015f\u0003\u015f\u1093\b\u015f"+
		"\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0161\u0001\u0161\u0003\u0161"+
		"\u109a\b\u0161\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161\u0005\u0161"+
		"\u10a0\b\u0161\n\u0161\f\u0161\u10a3\t\u0161\u0001\u0161\u0001\u0161\u0001"+
		"\u0162\u0001\u0162\u0001\u0162\u0001\u0162\u0001\u0162\u0003\u0162\u10ac"+
		"\b\u0162\u0001\u0162\u0001\u0162\u0001\u0162\u0001\u0162\u0001\u0162\u0001"+
		"\u0162\u0005\u0162\u10b4\b\u0162\n\u0162\f\u0162\u10b7\t\u0162\u0001\u0162"+
		"\u0001\u0162\u0003\u0162\u10bb\b\u0162\u0001\u0163\u0001\u0163\u0003\u0163"+
		"\u10bf\b\u0163\u0001\u0164\u0001\u0164\u0003\u0164\u10c3\b\u0164\u0001"+
		"\u0164\u0001\u0164\u0005\u0164\u10c7\b\u0164\n\u0164\f\u0164\u10ca\t\u0164"+
		"\u0001\u0164\u0001\u0164\u0001\u0165\u0001\u0165\u0001\u0166\u0001\u0166"+
		"\u0001\u0166\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0168\u0001\u0168"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u016a\u0001\u016a"+
		"\u0003\u016a\u10de\b\u016a\u0001\u016b\u0001\u016b\u0004\u016b\u10e2\b"+
		"\u016b\u000b\u016b\f\u016b\u10e3\u0001\u016c\u0001\u016c\u0003\u016c\u10e8"+
		"\b\u016c\u0001\u016d\u0001\u016d\u0003\u016d\u10ec\b\u016d\u0001\u016d"+
		"\u0003\u016d\u10ef\b\u016d\u0001\u016d\u0001\u016d\u0005\u016d\u10f3\b"+
		"\u016d\n\u016d\f\u016d\u10f6\t\u016d\u0001\u016e\u0001\u016e\u0003\u016e"+
		"\u10fa\b\u016e\u0001\u016e\u0003\u016e\u10fd\b\u016e\u0001\u016f\u0001"+
		"\u016f\u0003\u016f\u1101\b\u016f\u0001\u0170\u0001\u0170\u0001\u0170\u0001"+
		"\u0170\u0005\u0170\u1107\b\u0170\n\u0170\f\u0170\u110a\t\u0170\u0001\u0170"+
		"\u0001\u0170\u0001\u0171\u0001\u0171\u0001\u0171\u0005\u0171\u1111\b\u0171"+
		"\n\u0171\f\u0171\u1114\t\u0171\u0001\u0172\u0001\u0172\u0001\u0172\u0001"+
		"\u0172\u0001\u0172\u0005\u0172\u111b\b\u0172\n\u0172\f\u0172\u111e\t\u0172"+
		"\u0001\u0173\u0001\u0173\u0001\u0173\u0001\u0173\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175"+
		"\u0001\u0176\u0001\u0176\u0001\u0176\u0001\u0176\u0003\u0176\u1130\b\u0176"+
		"\u0001\u0177\u0001\u0177\u0001\u0177\u0001\u0177\u0001\u0177\u0003\u0177"+
		"\u1137\b\u0177\u0001\u0177\u0003\u0177\u113a\b\u0177\u0001\u0177\u0001"+
		"\u0177\u0001\u0177\u0001\u0177\u0001\u0178\u0001\u0178\u0001\u0178\u0001"+
		"\u0178\u0001\u0178\u0003\u0178\u1145\b\u0178\u0001\u0178\u0001\u0178\u0001"+
		"\u0178\u0005\u0178\u114a\b\u0178\n\u0178\f\u0178\u114d\t\u0178\u0003\u0178"+
		"\u114f\b\u0178\u0003\u0178\u1151\b\u0178\u0001\u0178\u0001\u0178\u0001"+
		"\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001"+
		"\u0178\u0003\u0178\u115c\b\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001"+
		"\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0003\u0178\u1166"+
		"\b\u0178\u0003\u0178\u1168\b\u0178\u0001\u0179\u0001\u0179\u0001\u0179"+
		"\u0001\u0179\u0003\u0179\u116e\b\u0179\u0001\u017a\u0001\u017a\u0003\u017a"+
		"\u1172\b\u017a\u0001\u017b\u0001\u017b\u0001\u017b\u0001\u017b\u0001\u017b"+
		"\u0001\u017b\u0001\u017b\u0003\u017b\u117b\b\u017b\u0001\u017b\u0001\u017b"+
		"\u0001\u017c\u0001\u017c\u0001\u017c\u0001\u017c\u0001\u017c\u0001\u017c"+
		"\u0001\u017c\u0004\u017c\u1186\b\u017c\u000b\u017c\f\u017c\u1187\u0001"+
		"\u017c\u0001\u017c\u0003\u017c\u118c\b\u017c\u0001\u017c\u0001\u017c\u0001"+
		"\u017d\u0001\u017d\u0001\u017d\u0001\u017d\u0001\u017d\u0001\u017d\u0004"+
		"\u017d\u1196\b\u017d\u000b\u017d\f\u017d\u1197\u0001\u017d\u0001\u017d"+
		"\u0003\u017d\u119c\b\u017d\u0001\u017d\u0001\u017d\u0001\u017e\u0001\u017e"+
		"\u0001\u017e\u0001\u017e\u0001\u017e\u0003\u017e\u11a5\b\u017e\u0001\u017e"+
		"\u0001\u017e\u0001\u017f\u0001\u017f\u0001\u0180\u0001\u0180\u0001\u0180"+
		"\u0001\u0180\u0001\u0180\u0001\u0180\u0001\u0180\u0001\u0181\u0001\u0181"+
		"\u0001\u0182\u0001\u0182\u0001\u0182\u0001\u0182\u0001\u0182\u0001\u0182"+
		"\u0001\u0182\u0001\u0182\u0001\u0182\u0001\u0182\u0001\u0182\u0001\u0182"+
		"\u0001\u0182\u0003\u0182\u11c1\b\u0182\u0001\u0183\u0001\u0183\u0001\u0184"+
		"\u0001\u0184\u0001\u0185\u0001\u0185\u0004\u0185\u11c9\b\u0185\u000b\u0185"+
		"\f\u0185\u11ca\u0001\u0186\u0001\u0186\u0001\u0186\u0001\u0187\u0001\u0187"+
		"\u0001\u0187\u0003\u0187\u11d3\b\u0187\u0001\u0188\u0001\u0188\u0001\u0188"+
		"\u0003\u0188\u11d8\b\u0188\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u018a"+
		"\u0001\u018a\u0001\u018b\u0001\u018b\u0001\u018b\u0001\u018c\u0001\u018c"+
		"\u0001\u018c\u0001\u018c\u0001\u018c\u0001\u018c\u0001\u018c\u0001\u018c"+
		"\u0001\u018c\u0001\u018c\u0001\u018c\u0003\u018c\u11ed\b\u018c\u0001\u018c"+
		"\u0001\u018c\u0003\u018c\u11f1\b\u018c\u0001\u018d\u0001\u018d\u0001\u018d"+
		"\u0001\u018d\u0001\u018d\u0001\u018d\u0001\u018d\u0001\u018d\u0001\u018d"+
		"\u0001\u018d\u0001\u018d\u0001\u018d\u0003\u018d\u11ff\b\u018d\u0001\u018e"+
		"\u0001\u018e\u0001\u018f\u0001\u018f\u0001\u018f\u0001\u018f\u0001\u018f"+
		"\u0001\u018f\u0001\u018f\u0001\u018f\u0001\u018f\u0001\u018f\u0001\u018f"+
		"\u0003\u018f\u120e\b\u018f\u0001\u0190\u0001\u0190\u0001\u0190\u0001\u0190"+
		"\u0001\u0190\u0001\u0190\u0001\u0190\u0005\u0190\u1217\b\u0190\n\u0190"+
		"\f\u0190\u121a\t\u0190\u0001\u0191\u0001\u0191\u0001\u0192\u0005\u0192"+
		"\u121f\b\u0192\n\u0192\f\u0192\u1222\t\u0192\u0001\u0192\u0001\u0192\u0001"+
		"\u0193\u0001\u0193\u0001\u0194\u0001\u0194\u0001\u0194\u0001\u0194\u0005"+
		"\u0194\u122c\b\u0194\n\u0194\f\u0194\u122f\t\u0194\u0001\u0195\u0001\u0195"+
		"\u0001\u0196\u0001\u0196\u0001\u0196\u0001\u0196\u0005\u0196\u1237\b\u0196"+
		"\n\u0196\f\u0196\u123a\t\u0196\u0001\u0197\u0001\u0197\u0001\u0198\u0001"+
		"\u0198\u0001\u0198\u0001\u0198\u0005\u0198\u1242\b\u0198\n\u0198\f\u0198"+
		"\u1245\t\u0198\u0001\u0199\u0001\u0199\u0001\u019a\u0001\u019a\u0001\u019a"+
		"\u0001\u019a\u0005\u019a\u124d\b\u019a\n\u019a\f\u019a\u1250\t\u019a\u0001"+
		"\u019b\u0001\u019b\u0001\u019c\u0001\u019c\u0001\u019c\u0001\u019c\u0005"+
		"\u019c\u1258\b\u019c\n\u019c\f\u019c\u125b\t\u019c\u0001\u019d\u0001\u019d"+
		"\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0005\u019e\u1263\b\u019e"+
		"\n\u019e\f\u019e\u1266\t\u019e\u0001\u019f\u0001\u019f\u0001\u01a0\u0001"+
		"\u01a0\u0001\u01a0\u0001\u01a0\u0001\u01a0\u0003\u01a0\u126f\b\u01a0\u0001"+
		"\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a2\u0001\u01a2\u0001"+
		"\u01a2\u0003\u01a2\u1278\b\u01a2\u0001\u01a3\u0001\u01a3\u0003\u01a3\u127c"+
		"\b\u01a3\u0001\u01a4\u0001\u01a4\u0001\u01a4\u0001\u01a4\u0001\u01a4\u0001"+
		"\u01a4\u0003\u01a4\u1284\b\u01a4\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001"+
		"\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001"+
		"\u01a5\u0001\u01a5\u0003\u01a5\u1291\b\u01a5\u0001\u01a6\u0001\u01a6\u0001"+
		"\u01a6\u0001\u01a6\u0001\u01a7\u0001\u01a7\u0001\u01a8\u0001\u01a8\u0003"+
		"\u01a8\u129b\b\u01a8\u0001\u01a9\u0001\u01a9\u0001\u01a9\u0001\u01a9\u0003"+
		"\u01a9\u12a1\b\u01a9\u0001\u01aa\u0001\u01aa\u0001\u01aa\u0001\u01aa\u0001"+
		"\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001"+
		"\u01ab\u0003\u01ab\u12ae\b\u01ab\u0001\u01ac\u0001\u01ac\u0001\u01ac\u0001"+
		"\u01ac\u0001\u01ac\u0001\u01ac\u0001\u01ac\u0005\u01ac\u12b7\b\u01ac\n"+
		"\u01ac\f\u01ac\u12ba\t\u01ac\u0001\u01ad\u0001\u01ad\u0001\u01ad\u0001"+
		"\u01ad\u0001\u01ad\u0001\u01ad\u0001\u01ad\u0001\u01ad\u0001\u01ad\u0001"+
		"\u01ad\u0001\u01ad\u0001\u01ad\u0003\u01ad\u12c8\b\u01ad\u0001\u01ae\u0001"+
		"\u01ae\u0001\u01ae\u0003\u01ae\u12cd\b\u01ae\u0001\u01af\u0001\u01af\u0001"+
		"\u01b0\u0005\u01b0\u12d2\b\u01b0\n\u01b0\f\u01b0\u12d5\t\u01b0\u0001\u01b0"+
		"\u0001\u01b0\u0001\u01b1\u0001\u01b1\u0001\u01b2\u0001\u01b2\u0001\u01b2"+
		"\u0001\u01b2\u0005\u01b2\u12df\b\u01b2\n\u01b2\f\u01b2\u12e2\t\u01b2\u0001"+
		"\u01b3\u0001\u01b3\u0001\u01b4\u0001\u01b4\u0001\u01b4\u0001\u01b4\u0005"+
		"\u01b4\u12ea\b\u01b4\n\u01b4\f\u01b4\u12ed\t\u01b4\u0001\u01b5\u0001\u01b5"+
		"\u0001\u01b6\u0001\u01b6\u0001\u01b7\u0001\u01b7\u0003\u01b7\u12f5\b\u01b7"+
		"\u0001\u01b8\u0001\u01b8\u0001\u01b8\u0001\u01b8\u0001\u01b8\u0005\u01b8"+
		"\u12fc\b\u01b8\n\u01b8\f\u01b8\u12ff\t\u01b8\u0001\u01b8\u0001\u01b8\u0001"+
		"\u01b9\u0001\u01b9\u0001\u01b9\u0003\u01b9\u1306\b\u01b9\u0001\u01ba\u0001"+
		"\u01ba\u0001\u01ba\u0001\u01ba\u0005\u01ba\u130c\b\u01ba\n\u01ba\f\u01ba"+
		"\u130f\t\u01ba\u0001\u01ba\u0001\u01ba\u0001\u01bb\u0001\u01bb\u0001\u01bb"+
		"\u0001\u01bb\u0001\u01bc\u0001\u01bc\u0003\u01bc\u1319\b\u01bc\u0001\u01bd"+
		"\u0001\u01bd\u0001\u01be\u0001\u01be\u0001\u01bf\u0001\u01bf\u0001\u01bf"+
		"\u0003\u01bf\u1322\b\u01bf\u0001\u01c0\u0001\u01c0\u0003\u01c0\u1326\b"+
		"\u01c0\u0001\u01c1\u0001\u01c1\u0001\u01c1\u0003\u01c1\u132b\b\u01c1\u0001"+
		"\u01c2\u0001\u01c2\u0001\u01c3\u0001\u01c3\u0001\u01c4\u0001\u01c4\u0001"+
		"\u01c5\u0001\u01c5\u0001\u01c5\u0001\u01c6\u0001\u01c6\u0001\u01c6\u0005"+
		"\u01c6\u1339\b\u01c6\n\u01c6\f\u01c6\u133c\t\u01c6\u0001\u01c7\u0001\u01c7"+
		"\u0001\u01c7\u0001\u01c7\u0001\u01c7\u0003\u01c7\u1343\b\u01c7\u0001\u01c8"+
		"\u0001\u01c8\u0001\u01c9\u0001\u01c9\u0001\u01c9\u0005\u01c9\u134a\b\u01c9"+
		"\n\u01c9\f\u01c9\u134d\t\u01c9\u0001\u01ca\u0001\u01ca\u0001\u01cb\u0001"+
		"\u01cb\u0001\u01cb\u0001\u01cb\u0001\u01cb\u0001\u01cc\u0001\u01cc\u0001"+
		"\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0005"+
		"\u01cd\u135e\b\u01cd\n\u01cd\f\u01cd\u1361\t\u01cd\u0001\u01ce\u0001\u01ce"+
		"\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce"+
		"\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce"+
		"\u0003\u01ce\u1371\b\u01ce\u0001\u01cf\u0001\u01cf\u0001\u01cf\u0001\u01cf"+
		"\u0001\u01cf\u0001\u01cf\u0001\u01cf\u0003\u01cf\u137a\b\u01cf\u0001\u01d0"+
		"\u0001\u01d0\u0001\u01d0\u0005\u01d0\u137f\b\u01d0\n\u01d0\f\u01d0\u1382"+
		"\t\u01d0\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0003\u01d1\u1387\b\u01d1"+
		"\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0005\u01d2\u138c\b\u01d2\n\u01d2"+
		"\f\u01d2\u138f\t\u01d2\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3"+
		"\u0003\u01d3\u1395\b\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3"+
		"\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0003\u01d3\u139e\b\u01d3\u0003\u01d3"+
		"\u13a0\b\u01d3\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d5\u0001\u01d5"+
		"\u0003\u01d5\u13a7\b\u01d5\u0001\u01d6\u0001\u01d6\u0001\u01d7\u0001\u01d7"+
		"\u0001\u01d8\u0001\u01d8\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0001\u01d9"+
		"\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0001\u01d9"+
		"\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0003\u01d9"+
		"\u13be\b\u01d9\u0001\u01d9\u0001\u01d9\u0003\u01d9\u13c2\b\u01d9\u0003"+
		"\u01d9\u13c4\b\u01d9\u0001\u01da\u0001\u01da\u0001\u01da\u0001\u01da\u0001"+
		"\u01db\u0001\u01db\u0001\u01db\u0001\u01db\u0001\u01db\u0001\u01db\u0001"+
		"\u01db\u0001\u01db\u0001\u01db\u0001\u01db\u0001\u01db\u0001\u01db\u0003"+
		"\u01db\u13d6\b\u01db\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0003"+
		"\u01dc\u13dc\b\u01dc\u0001\u01dc\u0001\u01dc\u0001\u01dd\u0001\u01dd\u0001"+
		"\u01dd\u0005\u01dd\u13e3\b\u01dd\n\u01dd\f\u01dd\u13e6\t\u01dd\u0001\u01de"+
		"\u0001\u01de\u0001\u01df\u0001\u01df\u0001\u01df\u0001\u01e0\u0001\u01e0"+
		"\u0001\u01e0\u0005\u01e0\u13f0\b\u01e0\n\u01e0\f\u01e0\u13f3\t\u01e0\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0005\u01e1\u13f8\b\u01e1\n\u01e1\f\u01e1"+
		"\u13fb\t\u01e1\u0001\u01e2\u0001\u01e2\u0001\u01e2\u0001\u01e2\u0001\u01e3"+
		"\u0001\u01e3\u0001\u01e4\u0001\u01e4\u0001\u01e5\u0001\u01e5\u0001\u01e5"+
		"\u0001\u01e5\u0003\u01e5\u1409\b\u01e5\u0001\u01e6\u0001\u01e6\u0001\u01e6"+
		"\u0001\u01e7\u0001\u01e7\u0001\u01e7\u0001\u01e7\u0001\u01e7\u0001\u01e7"+
		"\u0001\u01e7\u0001\u01e7\u0001\u01e7\u0001\u01e7\u0001\u01e8\u0001\u01e8"+
		"\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8"+
		"\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8"+
		"\u0003\u01e8\u1426\b\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0003\u01e8"+
		"\u142b\b\u01e8\u0003\u01e8\u142d\b\u01e8\u0001\u01e9\u0001\u01e9\u0001"+
		"\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01ea\u0001\u01ea\u0001"+
		"\u01ea\u0001\u01ea\u0001\u01ea\u0001\u01ea\u0001\u01ea\u0001\u01ea\u0001"+
		"\u01ea\u0001\u01ea\u0001\u01ea\u0001\u01ea\u0003\u01ea\u1441\b\u01ea\u0001"+
		"\u01eb\u0001\u01eb\u0001\u01eb\u0005\u01eb\u1446\b\u01eb\n\u01eb\f\u01eb"+
		"\u1449\t\u01eb\u0001\u01ec\u0001\u01ec\u0001\u01ec\u0001\u01ec\u0001\u01ec"+
		"\u0001\u01ec\u0001\u01ec\u0001\u01ec\u0001\u01ed\u0001\u01ed\u0001\u01ed"+
		"\u0001\u01ed\u0001\u01ed\u0001\u01ed\u0001\u01ed\u0001\u01ed\u0001\u01ed"+
		"\u0001\u01ed\u0001\u01ed\u0001\u01ed\u0003\u01ed\u145f\b\u01ed\u0001\u01ee"+
		"\u0001\u01ee\u0001\u01ee\u0001\u01ee\u0001\u01ee\u0001\u01ee\u0001\u01ef"+
		"\u0001\u01ef\u0001\u01ef\u0001\u01ef\u0001\u01ef\u0001\u01ef\u0001\u01ef"+
		"\u0001\u01ef\u0001\u01ef\u0003\u01ef\u1470\b\u01ef\u0001\u01ef\u0001\u01ef"+
		"\u0001\u01ef\u0003\u01ef\u1475\b\u01ef\u0001\u01f0\u0001\u01f0\u0001\u01f0"+
		"\u0001\u01f0\u0001\u01f0\u0001\u01f0\u0001\u01f0\u0001\u01f0\u0001\u01f0"+
		"\u0003\u01f0\u1480\b\u01f0\u0001\u01f0\u0001\u01f0\u0001\u01f0\u0003\u01f0"+
		"\u1485\b\u01f0\u0001\u01f1\u0001\u01f1\u0001\u01f1\u0001\u01f1\u0001\u01f1"+
		"\u0001\u01f1\u0001\u01f1\u0001\u01f1\u0000\u0000\u01f2\u0000\u0002\u0004"+
		"\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \""+
		"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086"+
		"\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e"+
		"\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6"+
		"\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce"+
		"\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6"+
		"\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe"+
		"\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116"+
		"\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e"+
		"\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146"+
		"\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e"+
		"\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176"+
		"\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e"+
		"\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6"+
		"\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be"+
		"\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6"+
		"\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee"+
		"\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206"+
		"\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e"+
		"\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236"+
		"\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e"+
		"\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266"+
		"\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e"+
		"\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296"+
		"\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae"+
		"\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6"+
		"\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de"+
		"\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6"+
		"\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e"+
		"\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326"+
		"\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e"+
		"\u0340\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356"+
		"\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e"+
		"\u0370\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386"+
		"\u0388\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e"+
		"\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4\u03b6"+
		"\u03b8\u03ba\u03bc\u03be\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce"+
		"\u03d0\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u00001\u0002"+
		"\u000099\u00a5\u00a5\u0004\u0000XXtt\u00d8\u00d8\u013a\u013a\u0002\u0000"+
		"\"\"\u0110\u0110\u0001\u0000VW\u0002\u0000\u0086\u0086\u0094\u0094\u0002"+
		"\u0000CC\u011d\u011d\u0002\u0000DD\u011e\u011e\u0002\u0000mm\u0128\u0128"+
		"\n\u0000\u0007\u0007\t\t::SSbb\u009b\u009b\u00b6\u00b6\u0120\u0120\u012a"+
		"\u012a\u0162\u0162\u0003\u0000\u0004\u0004bb\u013b\u013b\u0003\u0000\u000f"+
		"\u000f{{\u00a3\u00a3\u0001\u0000\u0088\u0089\u0004\u0000II\u008f\u008f"+
		"\u00c7\u00c7\u017c\u017c\u0002\u0000\u001e\u001e\u0154\u0154\u0002\u0000"+
		"[[ff\u0002\u0000\u00cf\u00cf\u016a\u016a\u0002\u0000\u00cc\u00cc\u0106"+
		"\u0106\u0002\u0000\u0012\u0012VV\u0002\u0000}}\u00aa\u00aa\u0002\u0000"+
		"\'\'\u016d\u016d\u0004\u0000kk\u009d\u009d\u00c5\u00c5\u0159\u0159\u0002"+
		"\u0000\u0007\u0007\\\\\u0002\u0000\u00d7\u00d7\u017b\u017b\u0002\u0000"+
		"\u00b5\u00b5\u00bc\u00bc\u0002\u0000**\u0130\u0130\u0002\u0000\u019c\u019c"+
		"\u01a1\u01a1\u0002\u0000\u0087\u0087\u0113\u0113\u0003\u0000\f\f\u00dd"+
		"\u00dd\u0121\u0121\u0002\u0000\u00e7\u00e7\u011a\u011a\u0002\u0000\u00be"+
		"\u00be\u0102\u0102\u0002\u0000\u0157\u0157\u01a1\u01a1\u0002\u0000\u0080"+
		"\u0080\u00ed\u00ed\u0007\u0000II\u008f\u008f\u00c6\u00c7\u00f7\u00f7\u011f"+
		"\u011f\u0172\u0172\u017c\u017c\b\u0000IIaa\u008f\u008f\u00c6\u00c7\u00f7"+
		"\u00f7\u011f\u011f\u0172\u0172\u017c\u017c\u0002\u0000\u0190\u0191\u0196"+
		"\u0196\u0002\u0000\u018f\u018f\u0192\u0194\u0001\u0000\u0190\u0191\u0003"+
		"\u0000\u00b0\u00b0\u0104\u0104\u0114\u0114\u0002\u0000\u0007\u0007\r\r"+
		"\u0003\u0000\u0007\u0007\r\r\u012e\u012e\u0002\u0000xx\u0153\u0153\u0002"+
		"\u0000\u0188\u0188\u018a\u018e\u0017\u0000\u000b\u000b\u0010\u0010\u0019"+
		"\u001c##``~\u007f\u0091\u0091\u0094\u0094\u009c\u009c\u00b0\u00b0\u00be"+
		"\u00be\u00ce\u00ce\u00da\u00da\u00fe\u00fe\u0104\u0104\u0114\u0114\u012c"+
		"\u012c\u0138\u0139\u0149\u0149\u015a\u015a\u0173\u0173\u0188\u0197\u0199"+
		"\u0199V\u0000\u0001\u0006\b\b\n\n\u000f\u000f\u0012\u0014\u0016\u0018"+
		"\u001e\u001f!\"%&(,./124589;;BBDDHLNNPRTVX[]_aacdffhjmoqtz}\u0084\u0085"+
		"\u0089\u0089\u008e\u0090\u0092\u0092\u0095\u0096\u0098\u009a\u00a1\u00a3"+
		"\u00a5\u00aa\u00af\u00af\u00b1\u00b3\u00b5\u00b9\u00bb\u00bd\u00bf\u00c2"+
		"\u00c4\u00c4\u00c6\u00c7\u00c9\u00ca\u00cc\u00cd\u00cf\u00d0\u00d2\u00d2"+
		"\u00d4\u00d5\u00d8\u00d9\u00de\u00df\u00e1\u00e2\u00e4\u00e6\u00e9\u00ec"+
		"\u00f2\u00f2\u00f4\u00f5\u00f7\u00f9\u00fb\u00fc\u00ff\u0101\u0105\u0110"+
		"\u0112\u0112\u0115\u0116\u011b\u011f\u0121\u0124\u0126\u012b\u012d\u012d"+
		"\u012f\u0132\u0134\u013a\u013c\u013d\u013f\u013f\u0141\u0143\u0148\u0149"+
		"\u014b\u014b\u014d\u014f\u0152\u0152\u0155\u0156\u0158\u0158\u015a\u015a"+
		"\u015d\u0161\u0163\u0165\u0168\u016a\u016c\u016c\u016e\u0172\u0175\u0175"+
		"\u0178\u017d\r\u0000\u0010\u0010\u001a\u001c?@GG``~~\u008c\u008c\u0091"+
		"\u0091\u009c\u009c\u00be\u00be\u00fe\u00fe\u012c\u012c\u0146\u0146\u0004"+
		"\u0000\u00bf\u00bf\u00e8\u00e8\u0121\u0121\u0137\u0137\u0002\u0000\u00cb"+
		"\u00cb\u01a1\u01a2\u0002\u0000\u0004\u0004bb\u0003\u0000\u000e\u000e\u008b"+
		"\u008b\u0166\u0166\u15fa\u0000\u03e6\u0001\u0000\u0000\u0000\u0002\u03ea"+
		"\u0001\u0000\u0000\u0000\u0004\u040c\u0001\u0000\u0000\u0000\u0006\u040e"+
		"\u0001\u0000\u0000\u0000\b\u0410\u0001\u0000\u0000\u0000\n\u0420\u0001"+
		"\u0000\u0000\u0000\f\u0422\u0001\u0000\u0000\u0000\u000e\u0432\u0001\u0000"+
		"\u0000\u0000\u0010\u043b\u0001\u0000\u0000\u0000\u0012\u0443\u0001\u0000"+
		"\u0000\u0000\u0014\u0450\u0001\u0000\u0000\u0000\u0016\u045b\u0001\u0000"+
		"\u0000\u0000\u0018\u0460\u0001\u0000\u0000\u0000\u001a\u046b\u0001\u0000"+
		"\u0000\u0000\u001c\u046f\u0001\u0000\u0000\u0000\u001e\u0477\u0001\u0000"+
		"\u0000\u0000 \u047c\u0001\u0000\u0000\u0000\"\u04b0\u0001\u0000\u0000"+
		"\u0000$\u04b2\u0001\u0000\u0000\u0000&\u04b5\u0001\u0000\u0000\u0000("+
		"\u04b7\u0001\u0000\u0000\u0000*\u04bb\u0001\u0000\u0000\u0000,\u04bd\u0001"+
		"\u0000\u0000\u0000.\u04c0\u0001\u0000\u0000\u00000\u04c3\u0001\u0000\u0000"+
		"\u00002\u04c7\u0001\u0000\u0000\u00004\u04ee\u0001\u0000\u0000\u00006"+
		"\u04f0\u0001\u0000\u0000\u00008\u04f3\u0001\u0000\u0000\u0000:\u04f6\u0001"+
		"\u0000\u0000\u0000<\u04fa\u0001\u0000\u0000\u0000>\u0502\u0001\u0000\u0000"+
		"\u0000@\u0505\u0001\u0000\u0000\u0000B\u0508\u0001\u0000\u0000\u0000D"+
		"\u0511\u0001\u0000\u0000\u0000F\u0514\u0001\u0000\u0000\u0000H\u0523\u0001"+
		"\u0000\u0000\u0000J\u052f\u0001\u0000\u0000\u0000L\u0534\u0001\u0000\u0000"+
		"\u0000N\u0548\u0001\u0000\u0000\u0000P\u054c\u0001\u0000\u0000\u0000R"+
		"\u0553\u0001\u0000\u0000\u0000T\u056c\u0001\u0000\u0000\u0000V\u057d\u0001"+
		"\u0000\u0000\u0000X\u057f\u0001\u0000\u0000\u0000Z\u0636\u0001\u0000\u0000"+
		"\u0000\\\u0640\u0001\u0000\u0000\u0000^\u0642\u0001\u0000\u0000\u0000"+
		"`\u064a\u0001\u0000\u0000\u0000b\u064f\u0001\u0000\u0000\u0000d\u0651"+
		"\u0001\u0000\u0000\u0000f\u0657\u0001\u0000\u0000\u0000h\u065b\u0001\u0000"+
		"\u0000\u0000j\u065f\u0001\u0000\u0000\u0000l\u0663\u0001\u0000\u0000\u0000"+
		"n\u066d\u0001\u0000\u0000\u0000p\u0678\u0001\u0000\u0000\u0000r\u0689"+
		"\u0001\u0000\u0000\u0000t\u069b\u0001\u0000\u0000\u0000v\u06a0\u0001\u0000"+
		"\u0000\u0000x\u06a3\u0001\u0000\u0000\u0000z\u06a7\u0001\u0000\u0000\u0000"+
		"|\u06ae\u0001\u0000\u0000\u0000~\u06b7\u0001\u0000\u0000\u0000\u0080\u06bd"+
		"\u0001\u0000\u0000\u0000\u0082\u06bf\u0001\u0000\u0000\u0000\u0084\u06d0"+
		"\u0001\u0000\u0000\u0000\u0086\u06e6\u0001\u0000\u0000\u0000\u0088\u06e8"+
		"\u0001\u0000\u0000\u0000\u008a\u06f0\u0001\u0000\u0000\u0000\u008c\u06f7"+
		"\u0001\u0000\u0000\u0000\u008e\u06f9\u0001\u0000\u0000\u0000\u0090\u0707"+
		"\u0001\u0000\u0000\u0000\u0092\u0709\u0001\u0000\u0000\u0000\u0094\u070d"+
		"\u0001\u0000\u0000\u0000\u0096\u0711\u0001\u0000\u0000\u0000\u0098\u0715"+
		"\u0001\u0000\u0000\u0000\u009a\u0719\u0001\u0000\u0000\u0000\u009c\u0726"+
		"\u0001\u0000\u0000\u0000\u009e\u072e\u0001\u0000\u0000\u0000\u00a0\u0731"+
		"\u0001\u0000\u0000\u0000\u00a2\u0733\u0001\u0000\u0000\u0000\u00a4\u073f"+
		"\u0001\u0000\u0000\u0000\u00a6\u0749\u0001\u0000\u0000\u0000\u00a8\u074c"+
		"\u0001\u0000\u0000\u0000\u00aa\u0757\u0001\u0000\u0000\u0000\u00ac\u075f"+
		"\u0001\u0000\u0000\u0000\u00ae\u077a\u0001\u0000\u0000\u0000\u00b0\u0787"+
		"\u0001\u0000\u0000\u0000\u00b2\u0789\u0001\u0000\u0000\u0000\u00b4\u078f"+
		"\u0001\u0000\u0000\u0000\u00b6\u0792\u0001\u0000\u0000\u0000\u00b8\u0798"+
		"\u0001\u0000\u0000\u0000\u00ba\u079e\u0001\u0000\u0000\u0000\u00bc\u07a5"+
		"\u0001\u0000\u0000\u0000\u00be\u07c7\u0001\u0000\u0000\u0000\u00c0\u07cf"+
		"\u0001\u0000\u0000\u0000\u00c2\u07dc\u0001\u0000\u0000\u0000\u00c4\u07e1"+
		"\u0001\u0000\u0000\u0000\u00c6\u07ec\u0001\u0000\u0000\u0000\u00c8\u07fd"+
		"\u0001\u0000\u0000\u0000\u00ca\u07ff\u0001\u0000\u0000\u0000\u00cc\u0804"+
		"\u0001\u0000\u0000\u0000\u00ce\u080b\u0001\u0000\u0000\u0000\u00d0\u080f"+
		"\u0001\u0000\u0000\u0000\u00d2\u0811\u0001\u0000\u0000\u0000\u00d4\u0814"+
		"\u0001\u0000\u0000\u0000\u00d6\u0822\u0001\u0000\u0000\u0000\u00d8\u082a"+
		"\u0001\u0000\u0000\u0000\u00da\u0832\u0001\u0000\u0000\u0000\u00dc\u083a"+
		"\u0001\u0000\u0000\u0000\u00de\u0849\u0001\u0000\u0000\u0000\u00e0\u084b"+
		"\u0001\u0000\u0000\u0000\u00e2\u085c\u0001\u0000\u0000\u0000\u00e4\u0861"+
		"\u0001\u0000\u0000\u0000\u00e6\u086f\u0001\u0000\u0000\u0000\u00e8\u0871"+
		"\u0001\u0000\u0000\u0000\u00ea\u0874\u0001\u0000\u0000\u0000\u00ec\u0877"+
		"\u0001\u0000\u0000\u0000\u00ee\u0880\u0001\u0000\u0000\u0000\u00f0\u0894"+
		"\u0001\u0000\u0000\u0000\u00f2\u0896\u0001\u0000\u0000\u0000\u00f4\u0899"+
		"\u0001\u0000\u0000\u0000\u00f6\u08ad\u0001\u0000\u0000\u0000\u00f8\u08af"+
		"\u0001\u0000\u0000\u0000\u00fa\u08b3\u0001\u0000\u0000\u0000\u00fc\u08b5"+
		"\u0001\u0000\u0000\u0000\u00fe\u08be\u0001\u0000\u0000\u0000\u0100\u08c4"+
		"\u0001\u0000\u0000\u0000\u0102\u08ca\u0001\u0000\u0000\u0000\u0104\u08cf"+
		"\u0001\u0000\u0000\u0000\u0106\u08fd\u0001\u0000\u0000\u0000\u0108\u08ff"+
		"\u0001\u0000\u0000\u0000\u010a\u0902\u0001\u0000\u0000\u0000\u010c\u090a"+
		"\u0001\u0000\u0000\u0000\u010e\u0912\u0001\u0000\u0000\u0000\u0110\u091a"+
		"\u0001\u0000\u0000\u0000\u0112\u0922\u0001\u0000\u0000\u0000\u0114\u0924"+
		"\u0001\u0000\u0000\u0000\u0116\u0931\u0001\u0000\u0000\u0000\u0118\u0939"+
		"\u0001\u0000\u0000\u0000\u011a\u0942\u0001\u0000\u0000\u0000\u011c\u0944"+
		"\u0001\u0000\u0000\u0000\u011e\u0946\u0001\u0000\u0000\u0000\u0120\u094b"+
		"\u0001\u0000\u0000\u0000\u0122\u094d\u0001\u0000\u0000\u0000\u0124\u0951"+
		"\u0001\u0000\u0000\u0000\u0126\u0957\u0001\u0000\u0000\u0000\u0128\u095f"+
		"\u0001\u0000\u0000\u0000\u012a\u0961\u0001\u0000\u0000\u0000\u012c\u0964"+
		"\u0001\u0000\u0000\u0000\u012e\u096b\u0001\u0000\u0000\u0000\u0130\u0976"+
		"\u0001\u0000\u0000\u0000\u0132\u0983\u0001\u0000\u0000\u0000\u0134\u0985"+
		"\u0001\u0000\u0000\u0000\u0136\u098d\u0001\u0000\u0000\u0000\u0138\u0991"+
		"\u0001\u0000\u0000\u0000\u013a\u0999\u0001\u0000\u0000\u0000\u013c\u099d"+
		"\u0001\u0000\u0000\u0000\u013e\u099f\u0001\u0000\u0000\u0000\u0140\u09a1"+
		"\u0001\u0000\u0000\u0000\u0142\u09a4\u0001\u0000\u0000\u0000\u0144\u09ab"+
		"\u0001\u0000\u0000\u0000\u0146\u09b3\u0001\u0000\u0000\u0000\u0148\u09b8"+
		"\u0001\u0000\u0000\u0000\u014a\u09ba\u0001\u0000\u0000\u0000\u014c\u09c1"+
		"\u0001\u0000\u0000\u0000\u014e\u09c9\u0001\u0000\u0000\u0000\u0150\u09cd"+
		"\u0001\u0000\u0000\u0000\u0152\u09cf\u0001\u0000\u0000\u0000\u0154\u09da"+
		"\u0001\u0000\u0000\u0000\u0156\u09de\u0001\u0000\u0000\u0000\u0158\u09ea"+
		"\u0001\u0000\u0000\u0000\u015a\u09f2\u0001\u0000\u0000\u0000\u015c\u09f6"+
		"\u0001\u0000\u0000\u0000\u015e\u0a02\u0001\u0000\u0000\u0000\u0160\u0a0e"+
		"\u0001\u0000\u0000\u0000\u0162\u0a13\u0001\u0000\u0000\u0000\u0164\u0a18"+
		"\u0001\u0000\u0000\u0000\u0166\u0a1a\u0001\u0000\u0000\u0000\u0168\u0a1e"+
		"\u0001\u0000\u0000\u0000\u016a\u0a22\u0001\u0000\u0000\u0000\u016c\u0a29"+
		"\u0001\u0000\u0000\u0000\u016e\u0a2b\u0001\u0000\u0000\u0000\u0170\u0a38"+
		"\u0001\u0000\u0000\u0000\u0172\u0a5e\u0001\u0000\u0000\u0000\u0174\u0a60"+
		"\u0001\u0000\u0000\u0000\u0176\u0a65\u0001\u0000\u0000\u0000\u0178\u0a6a"+
		"\u0001\u0000\u0000\u0000\u017a\u0a71\u0001\u0000\u0000\u0000\u017c\u0a76"+
		"\u0001\u0000\u0000\u0000\u017e\u0a7b\u0001\u0000\u0000\u0000\u0180\u0a81"+
		"\u0001\u0000\u0000\u0000\u0182\u0a83\u0001\u0000\u0000\u0000\u0184\u0a8c"+
		"\u0001\u0000\u0000\u0000\u0186\u0a98\u0001\u0000\u0000\u0000\u0188\u0aa1"+
		"\u0001\u0000\u0000\u0000\u018a\u0aab\u0001\u0000\u0000\u0000\u018c\u0ac5"+
		"\u0001\u0000\u0000\u0000\u018e\u0ac7\u0001\u0000\u0000\u0000\u0190\u0add"+
		"\u0001\u0000\u0000\u0000\u0192\u0ae2\u0001\u0000\u0000\u0000\u0194\u0b2b"+
		"\u0001\u0000\u0000\u0000\u0196\u0b2d\u0001\u0000\u0000\u0000\u0198\u0b4d"+
		"\u0001\u0000\u0000\u0000\u019a\u0b4f\u0001\u0000\u0000\u0000\u019c\u0b5a"+
		"\u0001\u0000\u0000\u0000\u019e\u0b60\u0001\u0000\u0000\u0000\u01a0\u0b66"+
		"\u0001\u0000\u0000\u0000\u01a2\u0b68\u0001\u0000\u0000\u0000\u01a4\u0b71"+
		"\u0001\u0000\u0000\u0000\u01a6\u0b7b\u0001\u0000\u0000\u0000\u01a8\u0b7d"+
		"\u0001\u0000\u0000\u0000\u01aa\u0b8b\u0001\u0000\u0000\u0000\u01ac\u0b8d"+
		"\u0001\u0000\u0000\u0000\u01ae\u0b90\u0001\u0000\u0000\u0000\u01b0\u0b94"+
		"\u0001\u0000\u0000\u0000\u01b2\u0b96\u0001\u0000\u0000\u0000\u01b4\u0b9a"+
		"\u0001\u0000\u0000\u0000\u01b6\u0b9e\u0001\u0000\u0000\u0000\u01b8\u0ba2"+
		"\u0001\u0000\u0000\u0000\u01ba\u0ba9\u0001\u0000\u0000\u0000\u01bc\u0bb0"+
		"\u0001\u0000\u0000\u0000\u01be\u0bc6\u0001\u0000\u0000\u0000\u01c0\u0bcc"+
		"\u0001\u0000\u0000\u0000\u01c2\u0bdb\u0001\u0000\u0000\u0000\u01c4\u0be2"+
		"\u0001\u0000\u0000\u0000\u01c6\u0bea\u0001\u0000\u0000\u0000\u01c8\u0bec"+
		"\u0001\u0000\u0000\u0000\u01ca\u0bf3\u0001\u0000\u0000\u0000\u01cc\u0bf7"+
		"\u0001\u0000\u0000\u0000\u01ce\u0bfa\u0001\u0000\u0000\u0000\u01d0\u0bfd"+
		"\u0001\u0000\u0000\u0000\u01d2\u0c00\u0001\u0000\u0000\u0000\u01d4\u0c2b"+
		"\u0001\u0000\u0000\u0000\u01d6\u0c3b\u0001\u0000\u0000\u0000\u01d8\u0c3d"+
		"\u0001\u0000\u0000\u0000\u01da\u0c48\u0001\u0000\u0000\u0000\u01dc\u0c4c"+
		"\u0001\u0000\u0000\u0000\u01de\u0c50\u0001\u0000\u0000\u0000\u01e0\u0c52"+
		"\u0001\u0000\u0000\u0000\u01e2\u0c57\u0001\u0000\u0000\u0000\u01e4\u0c59"+
		"\u0001\u0000\u0000\u0000\u01e6\u0c5e\u0001\u0000\u0000\u0000\u01e8\u0c63"+
		"\u0001\u0000\u0000\u0000\u01ea\u0c68\u0001\u0000\u0000\u0000\u01ec\u0c6d"+
		"\u0001\u0000\u0000\u0000\u01ee\u0c73\u0001\u0000\u0000\u0000\u01f0\u0c7c"+
		"\u0001\u0000\u0000\u0000\u01f2\u0c81\u0001\u0000\u0000\u0000\u01f4\u0c86"+
		"\u0001\u0000\u0000\u0000\u01f6\u0c8a\u0001\u0000\u0000\u0000\u01f8\u0c9e"+
		"\u0001\u0000\u0000\u0000\u01fa\u0cab\u0001\u0000\u0000\u0000\u01fc\u0cb3"+
		"\u0001\u0000\u0000\u0000\u01fe\u0cb5\u0001\u0000\u0000\u0000\u0200\u0cbe"+
		"\u0001\u0000\u0000\u0000\u0202\u0cc2\u0001\u0000\u0000\u0000\u0204\u0cc9"+
		"\u0001\u0000\u0000\u0000\u0206\u0cd0\u0001\u0000\u0000\u0000\u0208\u0cd7"+
		"\u0001\u0000\u0000\u0000\u020a\u0cda\u0001\u0000\u0000\u0000\u020c\u0cf7"+
		"\u0001\u0000\u0000\u0000\u020e\u0d02\u0001\u0000\u0000\u0000\u0210\u0d13"+
		"\u0001\u0000\u0000\u0000\u0212\u0d15\u0001\u0000\u0000\u0000\u0214\u0d19"+
		"\u0001\u0000\u0000\u0000\u0216\u0d20\u0001\u0000\u0000\u0000\u0218\u0d22"+
		"\u0001\u0000\u0000\u0000\u021a\u0d27\u0001\u0000\u0000\u0000\u021c\u0d2b"+
		"\u0001\u0000\u0000\u0000\u021e\u0d33\u0001\u0000\u0000\u0000\u0220\u0d37"+
		"\u0001\u0000\u0000\u0000\u0222\u0d41\u0001\u0000\u0000\u0000\u0224\u0d43"+
		"\u0001\u0000\u0000\u0000\u0226\u0d49\u0001\u0000\u0000\u0000\u0228\u0d4d"+
		"\u0001\u0000\u0000\u0000\u022a\u0d5a\u0001\u0000\u0000\u0000\u022c\u0d5c"+
		"\u0001\u0000\u0000\u0000\u022e\u0d60\u0001\u0000\u0000\u0000\u0230\u0d63"+
		"\u0001\u0000\u0000\u0000\u0232\u0d66\u0001\u0000\u0000\u0000\u0234\u0d77"+
		"\u0001\u0000\u0000\u0000\u0236\u0d7b\u0001\u0000\u0000\u0000\u0238\u0d82"+
		"\u0001\u0000\u0000\u0000\u023a\u0d9d\u0001\u0000\u0000\u0000\u023c\u0da2"+
		"\u0001\u0000\u0000\u0000\u023e\u0da4\u0001\u0000\u0000\u0000\u0240\u0da9"+
		"\u0001\u0000\u0000\u0000\u0242\u0dae\u0001\u0000\u0000\u0000\u0244\u0dbc"+
		"\u0001\u0000\u0000\u0000\u0246\u0e39\u0001\u0000\u0000\u0000\u0248\u0e3b"+
		"\u0001\u0000\u0000\u0000\u024a\u0e4b\u0001\u0000\u0000\u0000\u024c\u0e4e"+
		"\u0001\u0000\u0000\u0000\u024e\u0e51\u0001\u0000\u0000\u0000\u0250\u0e54"+
		"\u0001\u0000\u0000\u0000\u0252\u0e58\u0001\u0000\u0000\u0000\u0254\u0e64"+
		"\u0001\u0000\u0000\u0000\u0256\u0e66\u0001\u0000\u0000\u0000\u0258\u0e68"+
		"\u0001\u0000\u0000\u0000\u025a\u0e6a\u0001\u0000\u0000\u0000\u025c\u0e72"+
		"\u0001\u0000\u0000\u0000\u025e\u0e7a\u0001\u0000\u0000\u0000\u0260\u0e86"+
		"\u0001\u0000\u0000\u0000\u0262\u0ea8\u0001\u0000\u0000\u0000\u0264\u0eaa"+
		"\u0001\u0000\u0000\u0000\u0266\u0ebc\u0001\u0000\u0000\u0000\u0268\u0ec5"+
		"\u0001\u0000\u0000\u0000\u026a\u0eca\u0001\u0000\u0000\u0000\u026c\u0ece"+
		"\u0001\u0000\u0000\u0000\u026e\u0ede\u0001\u0000\u0000\u0000\u0270\u0f19"+
		"\u0001\u0000\u0000\u0000\u0272\u0f1b\u0001\u0000\u0000\u0000\u0274\u0f1d"+
		"\u0001\u0000\u0000\u0000\u0276\u0f31\u0001\u0000\u0000\u0000\u0278\u0f3c"+
		"\u0001\u0000\u0000\u0000\u027a\u0f3e\u0001\u0000\u0000\u0000\u027c\u0f4e"+
		"\u0001\u0000\u0000\u0000\u027e\u0f5a\u0001\u0000\u0000\u0000\u0280\u0f6c"+
		"\u0001\u0000\u0000\u0000\u0282\u0f71\u0001\u0000\u0000\u0000\u0284\u0f75"+
		"\u0001\u0000\u0000\u0000\u0286\u0f88\u0001\u0000\u0000\u0000\u0288\u0f8d"+
		"\u0001\u0000\u0000\u0000\u028a\u0f8f\u0001\u0000\u0000\u0000\u028c\u0fab"+
		"\u0001\u0000\u0000\u0000\u028e\u0fae\u0001\u0000\u0000\u0000\u0290\u0fb0"+
		"\u0001\u0000\u0000\u0000\u0292\u0fb2\u0001\u0000\u0000\u0000\u0294\u0fc5"+
		"\u0001\u0000\u0000\u0000\u0296\u0fc7\u0001\u0000\u0000\u0000\u0298\u0fc9"+
		"\u0001\u0000\u0000\u0000\u029a\u0fcd\u0001\u0000\u0000\u0000\u029c\u0fef"+
		"\u0001\u0000\u0000\u0000\u029e\u0ff1\u0001\u0000\u0000\u0000\u02a0\u0ff3"+
		"\u0001\u0000\u0000\u0000\u02a2\u0ffb\u0001\u0000\u0000\u0000\u02a4\u1027"+
		"\u0001\u0000\u0000\u0000\u02a6\u1029\u0001\u0000\u0000\u0000\u02a8\u1042"+
		"\u0001\u0000\u0000\u0000\u02aa\u1044\u0001\u0000\u0000\u0000\u02ac\u104c"+
		"\u0001\u0000\u0000\u0000\u02ae\u1055\u0001\u0000\u0000\u0000\u02b0\u1065"+
		"\u0001\u0000\u0000\u0000\u02b2\u1069\u0001\u0000\u0000\u0000\u02b4\u106b"+
		"\u0001\u0000\u0000\u0000\u02b6\u1074\u0001\u0000\u0000\u0000\u02b8\u1083"+
		"\u0001\u0000\u0000\u0000\u02ba\u1089\u0001\u0000\u0000\u0000\u02bc\u108b"+
		"\u0001\u0000\u0000\u0000\u02be\u1092\u0001\u0000\u0000\u0000\u02c0\u1094"+
		"\u0001\u0000\u0000\u0000\u02c2\u1099\u0001\u0000\u0000\u0000\u02c4\u10a6"+
		"\u0001\u0000\u0000\u0000\u02c6\u10be\u0001\u0000\u0000\u0000\u02c8\u10c0"+
		"\u0001\u0000\u0000\u0000\u02ca\u10cd\u0001\u0000\u0000\u0000\u02cc\u10cf"+
		"\u0001\u0000\u0000\u0000\u02ce\u10d2\u0001\u0000\u0000\u0000\u02d0\u10d5"+
		"\u0001\u0000\u0000\u0000\u02d2\u10d7\u0001\u0000\u0000\u0000\u02d4\u10db"+
		"\u0001\u0000\u0000\u0000\u02d6\u10e1\u0001\u0000\u0000\u0000\u02d8\u10e7"+
		"\u0001\u0000\u0000\u0000\u02da\u10e9\u0001\u0000\u0000\u0000\u02dc\u10f7"+
		"\u0001\u0000\u0000\u0000\u02de\u1100\u0001\u0000\u0000\u0000\u02e0\u1102"+
		"\u0001\u0000\u0000\u0000\u02e2\u110d\u0001\u0000\u0000\u0000\u02e4\u1115"+
		"\u0001\u0000\u0000\u0000\u02e6\u111f\u0001\u0000\u0000\u0000\u02e8\u1123"+
		"\u0001\u0000\u0000\u0000\u02ea\u1127\u0001\u0000\u0000\u0000\u02ec\u112b"+
		"\u0001\u0000\u0000\u0000\u02ee\u1131\u0001\u0000\u0000\u0000\u02f0\u1167"+
		"\u0001\u0000\u0000\u0000\u02f2\u116d\u0001\u0000\u0000\u0000\u02f4\u1171"+
		"\u0001\u0000\u0000\u0000\u02f6\u1173\u0001\u0000\u0000\u0000\u02f8\u117e"+
		"\u0001\u0000\u0000\u0000\u02fa\u118f\u0001\u0000\u0000\u0000\u02fc\u119f"+
		"\u0001\u0000\u0000\u0000\u02fe\u11a8\u0001\u0000\u0000\u0000\u0300\u11aa"+
		"\u0001\u0000\u0000\u0000\u0302\u11b1\u0001\u0000\u0000\u0000\u0304\u11c0"+
		"\u0001\u0000\u0000\u0000\u0306\u11c2\u0001\u0000\u0000\u0000\u0308\u11c4"+
		"\u0001\u0000\u0000\u0000\u030a\u11c6\u0001\u0000\u0000\u0000\u030c\u11cc"+
		"\u0001\u0000\u0000\u0000\u030e\u11d2\u0001\u0000\u0000\u0000\u0310\u11d7"+
		"\u0001\u0000\u0000\u0000\u0312\u11d9\u0001\u0000\u0000\u0000\u0314\u11dc"+
		"\u0001\u0000\u0000\u0000\u0316\u11de\u0001\u0000\u0000\u0000\u0318\u11f0"+
		"\u0001\u0000\u0000\u0000\u031a\u11fe\u0001\u0000\u0000\u0000\u031c\u1200"+
		"\u0001\u0000\u0000\u0000\u031e\u120d\u0001\u0000\u0000\u0000\u0320\u120f"+
		"\u0001\u0000\u0000\u0000\u0322\u121b\u0001\u0000\u0000\u0000\u0324\u1220"+
		"\u0001\u0000\u0000\u0000\u0326\u1225\u0001\u0000\u0000\u0000\u0328\u1227"+
		"\u0001\u0000\u0000\u0000\u032a\u1230\u0001\u0000\u0000\u0000\u032c\u1232"+
		"\u0001\u0000\u0000\u0000\u032e\u123b\u0001\u0000\u0000\u0000\u0330\u123d"+
		"\u0001\u0000\u0000\u0000\u0332\u1246\u0001\u0000\u0000\u0000\u0334\u1248"+
		"\u0001\u0000\u0000\u0000\u0336\u1251\u0001\u0000\u0000\u0000\u0338\u1253"+
		"\u0001\u0000\u0000\u0000\u033a\u125c\u0001\u0000\u0000\u0000\u033c\u125e"+
		"\u0001\u0000\u0000\u0000\u033e\u1267\u0001\u0000\u0000\u0000\u0340\u126e"+
		"\u0001\u0000\u0000\u0000\u0342\u1270\u0001\u0000\u0000\u0000\u0344\u1277"+
		"\u0001\u0000\u0000\u0000\u0346\u1279\u0001\u0000\u0000\u0000\u0348\u1283"+
		"\u0001\u0000\u0000\u0000\u034a\u1290\u0001\u0000\u0000\u0000\u034c\u1292"+
		"\u0001\u0000\u0000\u0000\u034e\u1296\u0001\u0000\u0000\u0000\u0350\u129a"+
		"\u0001\u0000\u0000\u0000\u0352\u12a0\u0001\u0000\u0000\u0000\u0354\u12a2"+
		"\u0001\u0000\u0000\u0000\u0356\u12ad\u0001\u0000\u0000\u0000\u0358\u12af"+
		"\u0001\u0000\u0000\u0000\u035a\u12c7\u0001\u0000\u0000\u0000\u035c\u12c9"+
		"\u0001\u0000\u0000\u0000\u035e\u12ce\u0001\u0000\u0000\u0000\u0360\u12d3"+
		"\u0001\u0000\u0000\u0000\u0362\u12d8\u0001\u0000\u0000\u0000\u0364\u12da"+
		"\u0001\u0000\u0000\u0000\u0366\u12e3\u0001\u0000\u0000\u0000\u0368\u12e5"+
		"\u0001\u0000\u0000\u0000\u036a\u12ee\u0001\u0000\u0000\u0000\u036c\u12f0"+
		"\u0001\u0000\u0000\u0000\u036e\u12f2\u0001\u0000\u0000\u0000\u0370\u12f6"+
		"\u0001\u0000\u0000\u0000\u0372\u1302\u0001\u0000\u0000\u0000\u0374\u1307"+
		"\u0001\u0000\u0000\u0000\u0376\u1312\u0001\u0000\u0000\u0000\u0378\u1318"+
		"\u0001\u0000\u0000\u0000\u037a\u131a\u0001\u0000\u0000\u0000\u037c\u131c"+
		"\u0001\u0000\u0000\u0000\u037e\u1321\u0001\u0000\u0000\u0000\u0380\u1325"+
		"\u0001\u0000\u0000\u0000\u0382\u1327\u0001\u0000\u0000\u0000\u0384\u132c"+
		"\u0001\u0000\u0000\u0000\u0386\u132e\u0001\u0000\u0000\u0000\u0388\u1330"+
		"\u0001\u0000\u0000\u0000\u038a\u1332\u0001\u0000\u0000\u0000\u038c\u1335"+
		"\u0001\u0000\u0000\u0000\u038e\u133d\u0001\u0000\u0000\u0000\u0390\u1344"+
		"\u0001\u0000\u0000\u0000\u0392\u1346\u0001\u0000\u0000\u0000\u0394\u134e"+
		"\u0001\u0000\u0000\u0000\u0396\u1350\u0001\u0000\u0000\u0000\u0398\u1355"+
		"\u0001\u0000\u0000\u0000\u039a\u135a\u0001\u0000\u0000\u0000\u039c\u1370"+
		"\u0001\u0000\u0000\u0000\u039e\u1379\u0001\u0000\u0000\u0000\u03a0\u137b"+
		"\u0001\u0000\u0000\u0000\u03a2\u1386\u0001\u0000\u0000\u0000\u03a4\u1388"+
		"\u0001\u0000\u0000\u0000\u03a6\u1390\u0001\u0000\u0000\u0000\u03a8\u13a1"+
		"\u0001\u0000\u0000\u0000\u03aa\u13a4\u0001\u0000\u0000\u0000\u03ac\u13a8"+
		"\u0001\u0000\u0000\u0000\u03ae\u13aa\u0001\u0000\u0000\u0000\u03b0\u13ac"+
		"\u0001\u0000\u0000\u0000\u03b2\u13ae\u0001\u0000\u0000\u0000\u03b4\u13c5"+
		"\u0001\u0000\u0000\u0000\u03b6\u13c9\u0001\u0000\u0000\u0000\u03b8\u13d7"+
		"\u0001\u0000\u0000\u0000\u03ba\u13df\u0001\u0000\u0000\u0000\u03bc\u13e7"+
		"\u0001\u0000\u0000\u0000\u03be\u13e9\u0001\u0000\u0000\u0000\u03c0\u13ec"+
		"\u0001\u0000\u0000\u0000\u03c2\u13f4\u0001\u0000\u0000\u0000\u03c4\u13fc"+
		"\u0001\u0000\u0000\u0000\u03c6\u1400\u0001\u0000\u0000\u0000\u03c8\u1402"+
		"\u0001\u0000\u0000\u0000\u03ca\u1408\u0001\u0000\u0000\u0000\u03cc\u140a"+
		"\u0001\u0000\u0000\u0000\u03ce\u140d\u0001\u0000\u0000\u0000\u03d0\u1417"+
		"\u0001\u0000\u0000\u0000\u03d2\u142e\u0001\u0000\u0000\u0000\u03d4\u1440"+
		"\u0001\u0000\u0000\u0000\u03d6\u1442\u0001\u0000\u0000\u0000\u03d8\u144a"+
		"\u0001\u0000\u0000\u0000\u03da\u1452\u0001\u0000\u0000\u0000\u03dc\u1460"+
		"\u0001\u0000\u0000\u0000\u03de\u1466\u0001\u0000\u0000\u0000\u03e0\u1476"+
		"\u0001\u0000\u0000\u0000\u03e2\u1486\u0001\u0000\u0000\u0000\u03e4\u03e7"+
		"\u0003\u0002\u0001\u0000\u03e5\u03e7\u0003\n\u0005\u0000\u03e6\u03e4\u0001"+
		"\u0000\u0000\u0000\u03e6\u03e5\u0001\u0000\u0000\u0000\u03e7\u03e8\u0001"+
		"\u0000\u0000\u0000\u03e8\u03e9\u0005\u0000\u0000\u0001\u03e9\u0001\u0001"+
		"\u0000\u0000\u0000\u03ea\u03f4\u0005r\u0000\u0000\u03eb\u03ed\u0003\u0004"+
		"\u0002\u0000\u03ec\u03eb\u0001\u0000\u0000\u0000\u03ed\u03f0\u0001\u0000"+
		"\u0000\u0000\u03ee\u03ec\u0001\u0000\u0000\u0000\u03ee\u03ef\u0001\u0000"+
		"\u0000\u0000\u03ef\u03f1\u0001\u0000\u0000\u0000\u03f0\u03ee\u0001\u0000"+
		"\u0000\u0000\u03f1\u03f5\u0003\n\u0005\u0000\u03f2\u03f3\u0005\u0112\u0000"+
		"\u0000\u03f3\u03f5\u0003\u017e\u00bf\u0000\u03f4\u03ee\u0001\u0000\u0000"+
		"\u0000\u03f4\u03f2\u0001\u0000\u0000\u0000\u03f5\u0003\u0001\u0000\u0000"+
		"\u0000\u03f6\u040d\u0005u\u0000\u0000\u03f7\u040d\u0005\u0085\u0000\u0000"+
		"\u03f8\u040d\u0005U\u0000\u0000\u03f9\u03fb\u0005%\u0000\u0000\u03fa\u03fc"+
		"\u0007\u0000\u0000\u0000\u03fb\u03fa\u0001\u0000\u0000\u0000\u03fb\u03fc"+
		"\u0001\u0000\u0000\u0000\u03fc\u040d\u0001\u0000\u0000\u0000\u03fd\u040d"+
		"\u0005\u00b8\u0000\u0000\u03fe\u040d\u0005\u0015\u0000\u0000\u03ff\u040d"+
		"\u0005\n\u0000\u0000\u0400\u040d\u0005\u0109\u0000\u0000\u0401\u040d\u0005"+
		"\u00b7\u0000\u0000\u0402\u040d\u0005\u0013\u0000\u0000\u0403\u0405\u0005"+
		"\u016e\u0000\u0000\u0404\u0406\u0003\u0006\u0003\u0000\u0405\u0404\u0001"+
		"\u0000\u0000\u0000\u0405\u0406\u0001\u0000\u0000\u0000\u0406\u0408\u0001"+
		"\u0000\u0000\u0000\u0407\u0409\u0003\b\u0004\u0000\u0408\u0407\u0001\u0000"+
		"\u0000\u0000\u0408\u0409\u0001\u0000\u0000\u0000\u0409\u040d\u0001\u0000"+
		"\u0000\u0000\u040a\u040d\u0005N\u0000\u0000\u040b\u040d\u0005M\u0000\u0000"+
		"\u040c\u03f6\u0001\u0000\u0000\u0000\u040c\u03f7\u0001\u0000\u0000\u0000"+
		"\u040c\u03f8\u0001\u0000\u0000\u0000\u040c\u03f9\u0001\u0000\u0000\u0000"+
		"\u040c\u03fd\u0001\u0000\u0000\u0000\u040c\u03fe\u0001\u0000\u0000\u0000"+
		"\u040c\u03ff\u0001\u0000\u0000\u0000\u040c\u0400\u0001\u0000\u0000\u0000"+
		"\u040c\u0401\u0001\u0000\u0000\u0000\u040c\u0402\u0001\u0000\u0000\u0000"+
		"\u040c\u0403\u0001\u0000\u0000\u0000\u040c\u040a\u0001\u0000\u0000\u0000"+
		"\u040c\u040b\u0001\u0000\u0000\u0000\u040d\u0005\u0001\u0000\u0000\u0000"+
		"\u040e\u040f\u0005\u00d7\u0000\u0000\u040f\u0007\u0001\u0000\u0000\u0000"+
		"\u0410\u0411\u0007\u0001\u0000\u0000\u0411\t\u0001\u0000\u0000\u0000\u0412"+
		"\u0421\u0003\u017e\u00bf\u0000\u0413\u0421\u0003\f\u0006\u0000\u0414\u0421"+
		"\u0003\u0010\b\u0000\u0415\u0421\u0003\u0012\t\u0000\u0416\u0421\u0003"+
		"\u0014\n\u0000\u0417\u0421\u0003\u0018\f\u0000\u0418\u0421\u0003 \u0010"+
		"\u0000\u0419\u0421\u0003\"\u0011\u0000\u041a\u0421\u0003\u019c\u00ce\u0000"+
		"\u041b\u0421\u0003\u01a4\u00d2\u0000\u041c\u0421\u0003\u01a6\u00d3\u0000"+
		"\u041d\u0421\u0003\u01bc\u00de\u0000\u041e\u0421\u0003\u0396\u01cb\u0000"+
		"\u041f\u0421\u0003\u0398\u01cc\u0000\u0420\u0412\u0001\u0000\u0000\u0000"+
		"\u0420\u0413\u0001\u0000\u0000\u0000\u0420\u0414\u0001\u0000\u0000\u0000"+
		"\u0420\u0415\u0001\u0000\u0000\u0000\u0420\u0416\u0001\u0000\u0000\u0000"+
		"\u0420\u0417\u0001\u0000\u0000\u0000\u0420\u0418\u0001\u0000\u0000\u0000"+
		"\u0420\u0419\u0001\u0000\u0000\u0000\u0420\u041a\u0001\u0000\u0000\u0000"+
		"\u0420\u041b\u0001\u0000\u0000\u0000\u0420\u041c\u0001\u0000\u0000\u0000"+
		"\u0420\u041d\u0001\u0000\u0000\u0000\u0420\u041e\u0001\u0000\u0000\u0000"+
		"\u0420\u041f\u0001\u0000\u0000\u0000\u0421\u000b\u0001\u0000\u0000\u0000"+
		"\u0422\u0423\u0005\u00b3\u0000\u0000\u0423\u0425\u0005B\u0000\u0000\u0424"+
		"\u0426\u0005\u00b4\u0000\u0000\u0425\u0424\u0001\u0000\u0000\u0000\u0425"+
		"\u0426\u0001\u0000\u0000\u0000\u0426\u0427\u0001\u0000\u0000\u0000\u0427"+
		"\u0428\u0005\u0098\u0000\u0000\u0428\u042a\u0005\u019c\u0000\u0000\u0429"+
		"\u042b\u0005\u00e1\u0000\u0000\u042a\u0429\u0001\u0000\u0000\u0000\u042a"+
		"\u042b\u0001\u0000\u0000\u0000\u042b\u042c\u0001\u0000\u0000\u0000\u042c"+
		"\u042d\u0005\u009f\u0000\u0000\u042d\u042e\u0005\u013e\u0000\u0000\u042e"+
		"\u0430\u0003\u036e\u01b7\u0000\u042f\u0431\u0003J%\u0000\u0430\u042f\u0001"+
		"\u0000\u0000\u0000\u0430\u0431\u0001\u0000\u0000\u0000\u0431\r\u0001\u0000"+
		"\u0000\u0000\u0432\u0434\u0005\u0081\u0000\u0000\u0433\u0435\u0005\u00c4"+
		"\u0000\u0000\u0434\u0433\u0001\u0000\u0000\u0000\u0434\u0435\u0001\u0000"+
		"\u0000\u0000\u0435\u0436\u0001\u0000\u0000\u0000\u0436\u0437\u0005\u010d"+
		"\u0000\u0000\u0437\u0438\u0005\u0182\u0000\u0000\u0438\u0439\u0005\u019c"+
		"\u0000\u0000\u0439\u043a\u0005\u0183\u0000\u0000\u043a\u000f\u0001\u0000"+
		"\u0000\u0000\u043b\u043c\u0005s\u0000\u0000\u043c\u043d\u0005\u013e\u0000"+
		"\u0000\u043d\u043e\u0003\u036e\u01b7\u0000\u043e\u043f\u0005\u014a\u0000"+
		"\u0000\u043f\u0441\u0005\u019c\u0000\u0000\u0440\u0442\u0003\u000e\u0007"+
		"\u0000\u0441\u0440\u0001\u0000\u0000\u0000\u0441\u0442\u0001\u0000\u0000"+
		"\u0000\u0442\u0011\u0001\u0000\u0000\u0000\u0443\u0449\u0005\u0093\u0000"+
		"\u0000\u0444\u0446\u0005v\u0000\u0000\u0445\u0444\u0001\u0000\u0000\u0000"+
		"\u0445\u0446\u0001\u0000\u0000\u0000\u0446\u0447\u0001\u0000\u0000\u0000"+
		"\u0447\u0448\u0005\u013e\u0000\u0000\u0448\u044a\u0003\u036e\u01b7\u0000"+
		"\u0449\u0445\u0001\u0000\u0000\u0000\u0449\u044a\u0001\u0000\u0000\u0000"+
		"\u044a\u044b\u0001\u0000\u0000\u0000\u044b\u044c\u0005\u0086\u0000\u0000"+
		"\u044c\u044e\u0005\u019c\u0000\u0000\u044d\u044f\u0003\u0108\u0084\u0000"+
		"\u044e\u044d\u0001\u0000\u0000\u0000\u044e\u044f\u0001\u0000\u0000\u0000"+
		"\u044f\u0013\u0001\u0000\u0000\u0000\u0450\u0451\u0005\u010b\u0000\u0000"+
		"\u0451\u0452\u0005c\u0000\u0000\u0452\u0455\u0003\u0016\u000b\u0000\u0453"+
		"\u0454\u0005\u010c\u0000\u0000\u0454\u0456\u0003\u0016\u000b\u0000\u0455"+
		"\u0453\u0001\u0000\u0000\u0000\u0455\u0456\u0001\u0000\u0000\u0000\u0456"+
		"\u0459\u0001\u0000\u0000\u0000\u0457\u0458\u0005\u0177\u0000\u0000\u0458"+
		"\u045a\u0003\u001a\r\u0000\u0459\u0457\u0001\u0000\u0000\u0000\u0459\u045a"+
		"\u0001\u0000\u0000\u0000\u045a\u0015\u0001\u0000\u0000\u0000\u045b\u045e"+
		"\u0003\u0380\u01c0\u0000\u045c\u045d\u0005\u017e\u0000\u0000\u045d\u045f"+
		"\u0003\u001e\u000f\u0000\u045e\u045c\u0001\u0000\u0000\u0000\u045e\u045f"+
		"\u0001\u0000\u0000\u0000\u045f\u0017\u0001\u0000\u0000\u0000\u0460\u0461"+
		"\u0005\u010b\u0000\u0000\u0461\u0462\u0005\u00b3\u0000\u0000\u0462\u0465"+
		"\u0003\u0016\u000b\u0000\u0463\u0464\u0005\u009f\u0000\u0000\u0464\u0466"+
		"\u0003\u0380\u01c0\u0000\u0465\u0463\u0001\u0000\u0000\u0000\u0465\u0466"+
		"\u0001\u0000\u0000\u0000\u0466\u0469\u0001\u0000\u0000\u0000\u0467\u0468"+
		"\u0005\u0177\u0000\u0000\u0468\u046a\u0003\u001a\r\u0000\u0469\u0467\u0001"+
		"\u0000\u0000\u0000\u0469\u046a\u0001\u0000\u0000\u0000\u046a\u0019\u0001"+
		"\u0000\u0000\u0000\u046b\u046c\u0005\u0182\u0000\u0000\u046c\u046d\u0003"+
		"\u001c\u000e\u0000\u046d\u046e\u0005\u0183\u0000\u0000\u046e\u001b\u0001"+
		"\u0000\u0000\u0000\u046f\u0474\u0003\u00f8|\u0000\u0470\u0471\u0005\u0180"+
		"\u0000\u0000\u0471\u0473\u0003\u00f8|\u0000\u0472\u0470\u0001\u0000\u0000"+
		"\u0000\u0473\u0476\u0001\u0000\u0000\u0000\u0474\u0472\u0001\u0000\u0000"+
		"\u0000\u0474\u0475\u0001\u0000\u0000\u0000\u0475\u001d\u0001\u0000\u0000"+
		"\u0000\u0476\u0474\u0001\u0000\u0000\u0000\u0477\u047a\u0005\u019c\u0000"+
		"\u0000\u0478\u0479\u0005\u017e\u0000\u0000\u0479\u047b\u0005\u019c\u0000"+
		"\u0000\u047a\u0478\u0001\u0000\u0000\u0000\u047a\u047b\u0001\u0000\u0000"+
		"\u0000\u047b\u001f\u0001\u0000\u0000\u0000\u047c\u047d\u0005\u010b\u0000"+
		"\u0000\u047d\u047e\u0005\u0135\u0000\u0000\u047e\u0481\u0003\u0380\u01c0"+
		"\u0000\u047f\u0480\u0005\u0177\u0000\u0000\u0480\u0482\u0003\u001a\r\u0000"+
		"\u0481\u047f\u0001\u0000\u0000\u0000\u0481\u0482\u0001\u0000\u0000\u0000"+
		"\u0482!\u0001\u0000\u0000\u0000\u0483\u04b1\u00034\u001a\u0000\u0484\u04b1"+
		"\u0003@ \u0000\u0485\u04b1\u0003B!\u0000\u0486\u04b1\u0003\u0246\u0123"+
		"\u0000\u0487\u04b1\u0003H$\u0000\u0488\u04b1\u0003F#\u0000\u0489\u04b1"+
		"\u0003\u01d2\u00e9\u0000\u048a\u04b1\u0003R)\u0000\u048b\u04b1\u0003Z"+
		"-\u0000\u048c\u04b1\u0003\u009aM\u0000\u048d\u04b1\u0003\u00acV\u0000"+
		"\u048e\u04b1\u0003\u00bc^\u0000\u048f\u04b1\u0003\u00c0`\u0000\u0490\u04b1"+
		"\u0003\u00c4b\u0000\u0491\u04b1\u0003\u00c2a\u0000\u0492\u04b1\u0003\u00ba"+
		"]\u0000\u0493\u04b1\u0003\u00be_\u0000\u0494\u04b1\u0003\u00a2Q\u0000"+
		"\u0495\u04b1\u0003\u00a8T\u0000\u0496\u04b1\u0003\u00a4R\u0000\u0497\u04b1"+
		"\u0003\u00a6S\u0000\u0498\u04b1\u0003\u00aaU\u0000\u0499\u04b1\u0003T"+
		"*\u0000\u049a\u04b1\u0003^/\u0000\u049b\u04b1\u0003d2\u0000\u049c\u04b1"+
		"\u0003`0\u0000\u049d\u04b1\u0003f3\u0000\u049e\u04b1\u0003h4\u0000\u049f"+
		"\u04b1\u0003j5\u0000\u04a0\u04b1\u0003l6\u0000\u04a1\u04b1\u0003n7\u0000"+
		"\u04a2\u04b1\u0003|>\u0000\u04a3\u04b1\u0003t:\u0000\u04a4\u04b1\u0003"+
		"~?\u0000\u04a5\u04b1\u0003v;\u0000\u04a6\u04b1\u0003p8\u0000\u04a7\u04b1"+
		"\u0003r9\u0000\u04a8\u04b1\u0003z=\u0000\u04a9\u04b1\u0003x<\u0000\u04aa"+
		"\u04b1\u0003\u01b8\u00dc\u0000\u04ab\u04b1\u0003\u01ba\u00dd\u0000\u04ac"+
		"\u04b1\u0003\u01c8\u00e4\u0000\u04ad\u04b1\u0003\u039c\u01ce\u0000\u04ae"+
		"\u04b1\u0003\u0248\u0124\u0000\u04af\u04b1\u0003\u0252\u0129\u0000\u04b0"+
		"\u0483\u0001\u0000\u0000\u0000\u04b0\u0484\u0001\u0000\u0000\u0000\u04b0"+
		"\u0485\u0001\u0000\u0000\u0000\u04b0\u0486\u0001\u0000\u0000\u0000\u04b0"+
		"\u0487\u0001\u0000\u0000\u0000\u04b0\u0488\u0001\u0000\u0000\u0000\u04b0"+
		"\u0489\u0001\u0000\u0000\u0000\u04b0\u048a\u0001\u0000\u0000\u0000\u04b0"+
		"\u048b\u0001\u0000\u0000\u0000\u04b0\u048c\u0001\u0000\u0000\u0000\u04b0"+
		"\u048d\u0001\u0000\u0000\u0000\u04b0\u048e\u0001\u0000\u0000\u0000\u04b0"+
		"\u048f\u0001\u0000\u0000\u0000\u04b0\u0490\u0001\u0000\u0000\u0000\u04b0"+
		"\u0491\u0001\u0000\u0000\u0000\u04b0\u0492\u0001\u0000\u0000\u0000\u04b0"+
		"\u0493\u0001\u0000\u0000\u0000\u04b0\u0494\u0001\u0000\u0000\u0000\u04b0"+
		"\u0495\u0001\u0000\u0000\u0000\u04b0\u0496\u0001\u0000\u0000\u0000\u04b0"+
		"\u0497\u0001\u0000\u0000\u0000\u04b0\u0498\u0001\u0000\u0000\u0000\u04b0"+
		"\u0499\u0001\u0000\u0000\u0000\u04b0\u049a\u0001\u0000\u0000\u0000\u04b0"+
		"\u049b\u0001\u0000\u0000\u0000\u04b0\u049c\u0001\u0000\u0000\u0000\u04b0"+
		"\u049d\u0001\u0000\u0000\u0000\u04b0\u049e\u0001\u0000\u0000\u0000\u04b0"+
		"\u049f\u0001\u0000\u0000\u0000\u04b0\u04a0\u0001\u0000\u0000\u0000\u04b0"+
		"\u04a1\u0001\u0000\u0000\u0000\u04b0\u04a2\u0001\u0000\u0000\u0000\u04b0"+
		"\u04a3\u0001\u0000\u0000\u0000\u04b0\u04a4\u0001\u0000\u0000\u0000\u04b0"+
		"\u04a5\u0001\u0000\u0000\u0000\u04b0\u04a6\u0001\u0000\u0000\u0000\u04b0"+
		"\u04a7\u0001\u0000\u0000\u0000\u04b0\u04a8\u0001\u0000\u0000\u0000\u04b0"+
		"\u04a9\u0001\u0000\u0000\u0000\u04b0\u04aa\u0001\u0000\u0000\u0000\u04b0"+
		"\u04ab\u0001\u0000\u0000\u0000\u04b0\u04ac\u0001\u0000\u0000\u0000\u04b0"+
		"\u04ad\u0001\u0000\u0000\u0000\u04b0\u04ae\u0001\u0000\u0000\u0000\u04b0"+
		"\u04af\u0001\u0000\u0000\u0000\u04b1#\u0001\u0000\u0000\u0000\u04b2\u04b3"+
		"\u0005\u0091\u0000\u0000\u04b3\u04b4\u0005p\u0000\u0000\u04b4%\u0001\u0000"+
		"\u0000\u0000\u04b5\u04b6\u0007\u0002\u0000\u0000\u04b6\'\u0001\u0000\u0000"+
		"\u0000\u04b7\u04b8\u0005\u0091\u0000\u0000\u04b8\u04b9\u0005\u00ce\u0000"+
		"\u0000\u04b9\u04ba\u0005p\u0000\u0000\u04ba)\u0001\u0000\u0000\u0000\u04bb"+
		"\u04bc\u0005\u0082\u0000\u0000\u04bc+\u0001\u0000\u0000\u0000\u04bd\u04be"+
		"\u0005f\u0000\u0000\u04be\u04bf\u0005\u0112\u0000\u0000\u04bf-\u0001\u0000"+
		"\u0000\u0000\u04c0\u04c1\u0005[\u0000\u0000\u04c1\u04c2\u0005\u0112\u0000"+
		"\u0000\u04c2/\u0001\u0000\u0000\u0000\u04c3\u04c4\u0005\u0136\u0000\u0000"+
		"\u04c4\u04c5\u0005\u0011\u0000\u0000\u04c5\u04c6\u0005Y\u0000\u0000\u04c6"+
		"1\u0001\u0000\u0000\u0000\u04c7\u04c8\u0005\u00da\u0000\u0000\u04c8\u04c9"+
		"\u0005\u010c\u0000\u0000\u04c93\u0001\u0000\u0000\u0000\u04ca\u04cb\u0005"+
		":\u0000\u0000\u04cb\u04cd\u0003X,\u0000\u04cc\u04ce\u0003(\u0014\u0000"+
		"\u04cd\u04cc\u0001\u0000\u0000\u0000\u04cd\u04ce\u0001\u0000\u0000\u0000"+
		"\u04ce\u04cf\u0001\u0000\u0000\u0000\u04cf\u04d1\u0003\u0380\u01c0\u0000"+
		"\u04d0\u04d2\u0003D\"\u0000\u04d1\u04d0\u0001\u0000\u0000\u0000\u04d1"+
		"\u04d2\u0001\u0000\u0000\u0000\u04d2\u04d4\u0001\u0000\u0000\u0000\u04d3"+
		"\u04d5\u00036\u001b\u0000\u04d4\u04d3\u0001\u0000\u0000\u0000\u04d4\u04d5"+
		"\u0001\u0000\u0000\u0000\u04d5\u04d7\u0001\u0000\u0000\u0000\u04d6\u04d8"+
		"\u00038\u001c\u0000\u04d7\u04d6\u0001\u0000\u0000\u0000\u04d7\u04d8\u0001"+
		"\u0000\u0000\u0000\u04d8\u04dc\u0001\u0000\u0000\u0000\u04d9\u04da\u0005"+
		"\u0177\u0000\u0000\u04da\u04db\u0005K\u0000\u0000\u04db\u04dd\u0003:\u001d"+
		"\u0000\u04dc\u04d9\u0001\u0000\u0000\u0000\u04dc\u04dd\u0001\u0000\u0000"+
		"\u0000\u04dd\u04ef\u0001\u0000\u0000\u0000\u04de\u04df\u0005:\u0000\u0000"+
		"\u04df\u04e0\u0005\u0107\u0000\u0000\u04e0\u04e2\u0003X,\u0000\u04e1\u04e3"+
		"\u0003(\u0014\u0000\u04e2\u04e1\u0001\u0000\u0000\u0000\u04e2\u04e3\u0001"+
		"\u0000\u0000\u0000\u04e3\u04e4\u0001\u0000\u0000\u0000\u04e4\u04e6\u0003"+
		"\u0380\u01c0\u0000\u04e5\u04e7\u0003D\"\u0000\u04e6\u04e5\u0001\u0000"+
		"\u0000\u0000\u04e6\u04e7\u0001\u0000\u0000\u0000\u04e7\u04e8\u0001\u0000"+
		"\u0000\u0000\u04e8\u04ec\u0003>\u001f\u0000\u04e9\u04ea\u0005\u0177\u0000"+
		"\u0000\u04ea\u04eb\u0005K\u0000\u0000\u04eb\u04ed\u0003:\u001d\u0000\u04ec"+
		"\u04e9\u0001\u0000\u0000\u0000\u04ec\u04ed\u0001\u0000\u0000\u0000\u04ed"+
		"\u04ef\u0001\u0000\u0000\u0000\u04ee\u04ca\u0001\u0000\u0000\u0000\u04ee"+
		"\u04de\u0001\u0000\u0000\u0000\u04ef5\u0001\u0000\u0000\u0000\u04f0\u04f1"+
		"\u0005\u00b5\u0000\u0000\u04f1\u04f2\u0005\u019c\u0000\u0000\u04f27\u0001"+
		"\u0000\u0000\u0000\u04f3\u04f4\u0005\u00bc\u0000\u0000\u04f4\u04f5\u0005"+
		"\u019c\u0000\u0000\u04f59\u0001\u0000\u0000\u0000\u04f6\u04f7\u0005\u0182"+
		"\u0000\u0000\u04f7\u04f8\u0003<\u001e\u0000\u04f8\u04f9\u0005\u0183\u0000"+
		"\u0000\u04f9;\u0001\u0000\u0000\u0000\u04fa\u04ff\u0003\u00f8|\u0000\u04fb"+
		"\u04fc\u0005\u0180\u0000\u0000\u04fc\u04fe\u0003\u00f8|\u0000\u04fd\u04fb"+
		"\u0001\u0000\u0000\u0000\u04fe\u0501\u0001\u0000\u0000\u0000\u04ff\u04fd"+
		"\u0001\u0000\u0000\u0000\u04ff\u0500\u0001\u0000\u0000\u0000\u0500=\u0001"+
		"\u0000\u0000\u0000\u0501\u04ff\u0001\u0000\u0000\u0000\u0502\u0503\u0005"+
		"\u0167\u0000\u0000\u0503\u0504\u0003\u0380\u01c0\u0000\u0504?\u0001\u0000"+
		"\u0000\u0000\u0505\u0506\u0005\u0165\u0000\u0000\u0506\u0507\u0003\u0380"+
		"\u01c0\u0000\u0507A\u0001\u0000\u0000\u0000\u0508\u0509\u0005b\u0000\u0000"+
		"\u0509\u050b\u0003X,\u0000\u050a\u050c\u0003$\u0012\u0000\u050b\u050a"+
		"\u0001\u0000\u0000\u0000\u050b\u050c\u0001\u0000\u0000\u0000\u050c\u050d"+
		"\u0001\u0000\u0000\u0000\u050d\u050f\u0003\u0380\u01c0\u0000\u050e\u0510"+
		"\u0003&\u0013\u0000\u050f\u050e\u0001\u0000\u0000\u0000\u050f\u0510\u0001"+
		"\u0000\u0000\u0000\u0510C\u0001\u0000\u0000\u0000\u0511\u0512\u0005/\u0000"+
		"\u0000\u0512\u0513\u0005\u019c\u0000\u0000\u0513E\u0001\u0000\u0000\u0000"+
		"\u0514\u0516\u0005\u0154\u0000\u0000\u0515\u0517\u0005\u013e\u0000\u0000"+
		"\u0516\u0515\u0001\u0000\u0000\u0000\u0516\u0517\u0001\u0000\u0000\u0000"+
		"\u0517\u0518\u0001\u0000\u0000\u0000\u0518\u051e\u0003\u0212\u0109\u0000"+
		"\u0519\u051a\u0005.\u0000\u0000\u051a\u051b\u0005\u0182\u0000\u0000\u051b"+
		"\u051c\u0003\u0110\u0088\u0000\u051c\u051d\u0005\u0183\u0000\u0000\u051d"+
		"\u051f\u0001\u0000\u0000\u0000\u051e\u0519\u0001\u0000\u0000\u0000\u051e"+
		"\u051f\u0001\u0000\u0000\u0000\u051f\u0521\u0001\u0000\u0000\u0000\u0520"+
		"\u0522\u0003*\u0015\u0000\u0521\u0520\u0001\u0000\u0000\u0000\u0521\u0522"+
		"\u0001\u0000\u0000\u0000\u0522G\u0001\u0000\u0000\u0000\u0523\u0524\u0005"+
		"b\u0000\u0000\u0524\u0526\u0005\u013e\u0000\u0000\u0525\u0527\u0003$\u0012"+
		"\u0000\u0526\u0525\u0001\u0000\u0000\u0000\u0526\u0527\u0001\u0000\u0000"+
		"\u0000\u0527\u0528\u0001\u0000\u0000\u0000\u0528\u052a\u0003\u0280\u0140"+
		"\u0000\u0529\u052b\u0005\u00f5\u0000\u0000\u052a\u0529\u0001\u0000\u0000"+
		"\u0000\u052a\u052b\u0001\u0000\u0000\u0000\u052b\u052d\u0001\u0000\u0000"+
		"\u0000\u052c\u052e\u0003\u000e\u0007\u0000\u052d\u052c\u0001\u0000\u0000"+
		"\u0000\u052d\u052e\u0001\u0000\u0000\u0000\u052eI\u0001\u0000\u0000\u0000"+
		"\u052f\u0530\u0005\u009a\u0000\u0000\u0530\u0531\u0005\u019c\u0000\u0000"+
		"\u0531\u0532\u0005\u0122\u0000\u0000\u0532\u0533\u0005\u019c\u0000\u0000"+
		"\u0533K\u0001\u0000\u0000\u0000\u0534\u0537\u0003\u0380\u01c0\u0000\u0535"+
		"\u0536\u0005\u017e\u0000\u0000\u0536\u0538\u0003\u0380\u01c0\u0000\u0537"+
		"\u0535\u0001\u0000\u0000\u0000\u0537\u0538\u0001\u0000\u0000\u0000\u0538"+
		"\u0546\u0001\u0000\u0000\u0000\u0539\u0543\u0003\u0380\u01c0\u0000\u053a"+
		"\u053f\u0005\u017e\u0000\u0000\u053b\u0540\u0005d\u0000\u0000\u053c\u0540"+
		"\u0005\u00a8\u0000\u0000\u053d\u0540\u0005\u016c\u0000\u0000\u053e\u0540"+
		"\u0003\u0380\u01c0\u0000\u053f\u053b\u0001\u0000\u0000\u0000\u053f\u053c"+
		"\u0001\u0000\u0000\u0000\u053f\u053d\u0001\u0000\u0000\u0000\u053f\u053e"+
		"\u0001\u0000\u0000\u0000\u0540\u0542\u0001\u0000\u0000\u0000\u0541\u053a"+
		"\u0001\u0000\u0000\u0000\u0542\u0545\u0001\u0000\u0000\u0000\u0543\u0541"+
		"\u0001\u0000\u0000\u0000\u0543\u0544\u0001\u0000\u0000\u0000\u0544\u0547"+
		"\u0001\u0000\u0000\u0000\u0545\u0543\u0001\u0000\u0000\u0000\u0546\u0539"+
		"\u0001\u0000\u0000\u0000\u0546\u0547\u0001\u0000\u0000\u0000\u0547M\u0001"+
		"\u0000\u0000\u0000\u0548\u054a\u0003L&\u0000\u0549\u054b\u0003\u0370\u01b8"+
		"\u0000\u054a\u0549\u0001\u0000\u0000\u0000\u054a\u054b\u0001\u0000\u0000"+
		"\u0000\u054bO\u0001\u0000\u0000\u0000\u054c\u054e\u0003\u0280\u0140\u0000"+
		"\u054d\u054f\u0003\u0370\u01b8\u0000\u054e\u054d\u0001\u0000\u0000\u0000"+
		"\u054e\u054f\u0001\u0000\u0000\u0000\u054f\u0551\u0001\u0000\u0000\u0000"+
		"\u0550\u0552\u0003\u0114\u008a\u0000\u0551\u0550\u0001\u0000\u0000\u0000"+
		"\u0551\u0552\u0001\u0000\u0000\u0000\u0552Q\u0001\u0000\u0000\u0000\u0553"+
		"\u056a\u0007\u0003\u0000\u0000\u0554\u0556\u0003X,\u0000\u0555\u0557\u0005"+
		"u\u0000\u0000\u0556\u0555\u0001\u0000\u0000\u0000\u0556\u0557\u0001\u0000"+
		"\u0000\u0000\u0557\u0558\u0001\u0000\u0000\u0000\u0558\u0559\u0003\u0380"+
		"\u01c0\u0000\u0559\u056b\u0001\u0000\u0000\u0000\u055a\u055c\u0005E\u0000"+
		"\u0000\u055b\u055d\u0005u\u0000\u0000\u055c\u055b\u0001\u0000\u0000\u0000"+
		"\u055c\u055d\u0001\u0000\u0000\u0000\u055d\u055e\u0001\u0000\u0000\u0000"+
		"\u055e\u056b\u0003\u0380\u01c0\u0000\u055f\u0561\u0005\u0088\u0000\u0000"+
		"\u0560\u0562\u0005u\u0000\u0000\u0561\u0560\u0001\u0000\u0000\u0000\u0561"+
		"\u0562\u0001\u0000\u0000\u0000\u0562\u0563\u0001\u0000\u0000\u0000\u0563"+
		"\u056b\u0003\u037e\u01bf\u0000\u0564\u0567\u0005\u0085\u0000\u0000\u0565"+
		"\u0567\u0005u\u0000\u0000\u0566\u0564\u0001\u0000\u0000\u0000\u0566\u0565"+
		"\u0001\u0000\u0000\u0000\u0567\u0568\u0001\u0000\u0000\u0000\u0568\u056b"+
		"\u0003P(\u0000\u0569\u056b\u0003P(\u0000\u056a\u0554\u0001\u0000\u0000"+
		"\u0000\u056a\u055a\u0001\u0000\u0000\u0000\u056a\u055f\u0001\u0000\u0000"+
		"\u0000\u056a\u0566\u0001\u0000\u0000\u0000\u056a\u0569\u0001\u0000\u0000"+
		"\u0000\u056bS\u0001\u0000\u0000\u0000\u056c\u056d\u0005\n\u0000\u0000"+
		"\u056d\u056e\u0005\u013e\u0000\u0000\u056e\u057b\u0003\u036e\u01b7\u0000"+
		"\u056f\u0570\u00054\u0000\u0000\u0570\u0577\u0005\u0134\u0000\u0000\u0571"+
		"\u0578\u0005\u00cd\u0000\u0000\u0572\u0573\u0005\u0081\u0000\u0000\u0573"+
		"\u0575\u0005.\u0000\u0000\u0574\u0576\u0003\u0110\u0088\u0000\u0575\u0574"+
		"\u0001\u0000\u0000\u0000\u0575\u0576\u0001\u0000\u0000\u0000\u0576\u0578"+
		"\u0001\u0000\u0000\u0000\u0577\u0571\u0001\u0000\u0000\u0000\u0577\u0572"+
		"\u0001\u0000\u0000\u0000\u0577\u0578\u0001\u0000\u0000\u0000\u0578\u057c"+
		"\u0001\u0000\u0000\u0000\u0579\u057a\u0005!\u0000\u0000\u057a\u057c\u0005"+
		"\u00c4\u0000\u0000\u057b\u056f\u0001\u0000\u0000\u0000\u057b\u0579\u0001"+
		"\u0000\u0000\u0000\u057cU\u0001\u0000\u0000\u0000\u057d\u057e\u0007\u0004"+
		"\u0000\u0000\u057eW\u0001\u0000\u0000\u0000\u057f\u0580\u0007\u0005\u0000"+
		"\u0000\u0580Y\u0001\u0000\u0000\u0000\u0581\u0582\u0005\u0129\u0000\u0000"+
		"\u0582\u0585\u0007\u0006\u0000\u0000\u0583\u0584\u0005\u00b0\u0000\u0000"+
		"\u0584\u0586\u0003\u00d0h\u0000\u0585\u0583\u0001\u0000\u0000\u0000\u0585"+
		"\u0586\u0001\u0000\u0000\u0000\u0586\u0637\u0001\u0000\u0000\u0000\u0587"+
		"\u0589\u0005\u0129\u0000\u0000\u0588\u058a\u0005u\u0000\u0000\u0589\u0588"+
		"\u0001\u0000\u0000\u0000\u0589\u058a\u0001\u0000\u0000\u0000\u058a\u058b"+
		"\u0001\u0000\u0000\u0000\u058b\u058f\u0005\u013f\u0000\u0000\u058c\u058d"+
		"\u0003V+\u0000\u058d\u058e\u0003\u0380\u01c0\u0000\u058e\u0590\u0001\u0000"+
		"\u0000\u0000\u058f\u058c\u0001\u0000\u0000\u0000\u058f\u0590\u0001\u0000"+
		"\u0000\u0000\u0590\u0592\u0001\u0000\u0000\u0000\u0591\u0593\u0003\\."+
		"\u0000\u0592\u0591\u0001\u0000\u0000\u0000\u0592\u0593\u0001\u0000\u0000"+
		"\u0000\u0593\u0637\u0001\u0000\u0000\u0000\u0594\u0595\u0005\u0129\u0000"+
		"\u0000\u0595\u0599\u0005\u0170\u0000\u0000\u0596\u0597\u0003V+\u0000\u0597"+
		"\u0598\u0003\u0380\u01c0\u0000\u0598\u059a\u0001\u0000\u0000\u0000\u0599"+
		"\u0596\u0001\u0000\u0000\u0000\u0599\u059a\u0001\u0000\u0000\u0000\u059a"+
		"\u059e\u0001\u0000\u0000\u0000\u059b\u059c\u0005\u00b0\u0000\u0000\u059c"+
		"\u059f\u0003\u00d0h\u0000\u059d\u059f\u0003\u00d0h\u0000\u059e\u059b\u0001"+
		"\u0000\u0000\u0000\u059e\u059d\u0001\u0000\u0000\u0000\u059e\u059f\u0001"+
		"\u0000\u0000\u0000\u059f\u0637\u0001\u0000\u0000\u0000\u05a0\u05a1\u0005"+
		"\u0129\u0000\u0000\u05a1\u05a2\u0005\u00c2\u0000\u0000\u05a2\u05a6\u0005"+
		"\u0170\u0000\u0000\u05a3\u05a4\u0003V+\u0000\u05a4\u05a5\u0003\u0380\u01c0"+
		"\u0000\u05a5\u05a7\u0001\u0000\u0000\u0000\u05a6\u05a3\u0001\u0000\u0000"+
		"\u0000\u05a6\u05a7\u0001\u0000\u0000\u0000\u05a7\u05ab\u0001\u0000\u0000"+
		"\u0000\u05a8\u05a9\u0005\u00b0\u0000\u0000\u05a9\u05ac\u0003\u00d0h\u0000"+
		"\u05aa\u05ac\u0003\u00d0h\u0000\u05ab\u05a8\u0001\u0000\u0000\u0000\u05ab"+
		"\u05aa\u0001\u0000\u0000\u0000\u05ab\u05ac\u0001\u0000\u0000\u0000\u05ac"+
		"\u0637\u0001\u0000\u0000\u0000\u05ad\u05af\u0005\u0129\u0000\u0000\u05ae"+
		"\u05b0\u0005\u0130\u0000\u0000\u05af\u05ae\u0001\u0000\u0000\u0000\u05af"+
		"\u05b0\u0001\u0000\u0000\u0000\u05b0\u05b1\u0001\u0000\u0000\u0000\u05b1"+
		"\u05b2\u0005.\u0000\u0000\u05b2\u05b3\u0003V+\u0000\u05b3\u05b7\u0003"+
		"\u0280\u0140\u0000\u05b4\u05b5\u0003V+\u0000\u05b5\u05b6\u0003\u0380\u01c0"+
		"\u0000\u05b6\u05b8\u0001\u0000\u0000\u0000\u05b7\u05b4\u0001\u0000\u0000"+
		"\u0000\u05b7\u05b8\u0001\u0000\u0000\u0000\u05b8\u05bc\u0001\u0000\u0000"+
		"\u0000\u05b9\u05ba\u0005\u00b0\u0000\u0000\u05ba\u05bd\u0003\u00d0h\u0000"+
		"\u05bb\u05bd\u0003\u00d0h\u0000\u05bc\u05b9\u0001\u0000\u0000\u0000\u05bc"+
		"\u05bb\u0001\u0000\u0000\u0000\u05bc\u05bd\u0001\u0000\u0000\u0000\u05bd"+
		"\u0637\u0001\u0000\u0000\u0000\u05be\u05bf\u0005\u0129\u0000\u0000\u05bf"+
		"\u05c2\u0005\u0089\u0000\u0000\u05c0\u05c1\u0005\u00b0\u0000\u0000\u05c1"+
		"\u05c3\u0003\u00ceg\u0000\u05c2\u05c0\u0001\u0000\u0000\u0000\u05c2\u05c3"+
		"\u0001\u0000\u0000\u0000\u05c3\u0637\u0001\u0000\u0000\u0000\u05c4\u05c5"+
		"\u0005\u0129\u0000\u0000\u05c5\u05c6\u0005\u00e5\u0000\u0000\u05c6\u05c8"+
		"\u0003\u0280\u0140\u0000\u05c7\u05c9\u0003\u0370\u01b8\u0000\u05c8\u05c7"+
		"\u0001\u0000\u0000\u0000\u05c8\u05c9\u0001\u0000\u0000\u0000\u05c9\u05cb"+
		"\u0001\u0000\u0000\u0000\u05ca\u05cc\u0003\u028c\u0146\u0000\u05cb\u05ca"+
		"\u0001\u0000\u0000\u0000\u05cb\u05cc\u0001\u0000\u0000\u0000\u05cc\u05ce"+
		"\u0001\u0000\u0000\u0000\u05cd\u05cf\u0003\u02e4\u0172\u0000\u05ce\u05cd"+
		"\u0001\u0000\u0000\u0000\u05ce\u05cf\u0001\u0000\u0000\u0000\u05cf\u05d1"+
		"\u0001\u0000\u0000\u0000\u05d0\u05d2\u0003\u019a\u00cd\u0000\u05d1\u05d0"+
		"\u0001\u0000\u0000\u0000\u05d1\u05d2\u0001\u0000\u0000\u0000\u05d2\u0637"+
		"\u0001\u0000\u0000\u0000\u05d3\u05d4\u0005\u0129\u0000\u0000\u05d4\u05da"+
		"\u0005:\u0000\u0000\u05d5\u05d6\u0003X,\u0000\u05d6\u05d7\u0003\u0380"+
		"\u01c0\u0000\u05d7\u05db\u0001\u0000\u0000\u0000\u05d8\u05d9\u0005\u013e"+
		"\u0000\u0000\u05d9\u05db\u0003\u0280\u0140\u0000\u05da\u05d5\u0001\u0000"+
		"\u0000\u0000\u05da\u05d8\u0001\u0000\u0000\u0000\u05db\u0637\u0001\u0000"+
		"\u0000\u0000\u05dc\u05dd\u0005\u0129\u0000\u0000\u05dd\u05de\u0005\u013e"+
		"\u0000\u0000\u05de\u05e2\u0005u\u0000\u0000\u05df\u05e0\u0003V+\u0000"+
		"\u05e0\u05e1\u0003\u0380\u01c0\u0000\u05e1\u05e3\u0001\u0000\u0000\u0000"+
		"\u05e2\u05df\u0001\u0000\u0000\u0000\u05e2\u05e3\u0001\u0000\u0000\u0000"+
		"\u05e3\u05e4\u0001\u0000\u0000\u0000\u05e4\u05e5\u0005\u00b0\u0000\u0000"+
		"\u05e5\u05e7\u0003\u00d0h\u0000\u05e6\u05e8\u0003\u0370\u01b8\u0000\u05e7"+
		"\u05e6\u0001\u0000\u0000\u0000\u05e7\u05e8\u0001\u0000\u0000\u0000\u05e8"+
		"\u0637\u0001\u0000\u0000\u0000\u05e9\u05ea\u0005\u0129\u0000\u0000\u05ea"+
		"\u05eb\u0005\u0141\u0000\u0000\u05eb\u05ef\u0003\u0280\u0140\u0000\u05ec"+
		"\u05ed\u0005\u0182\u0000\u0000\u05ed\u05ee\u0005\u019c\u0000\u0000\u05ee"+
		"\u05f0\u0005\u0183\u0000\u0000\u05ef\u05ec\u0001\u0000\u0000\u0000\u05ef"+
		"\u05f0\u0001\u0000\u0000\u0000\u05f0\u0637\u0001\u0000\u0000\u0000\u05f1"+
		"\u05f2\u0005\u0129\u0000\u0000\u05f2\u05fe\u0005\u00b7\u0000\u0000\u05f3"+
		"\u05f4\u0003X,\u0000\u05f4\u05f6\u0003\u0380\u01c0\u0000\u05f5\u05f7\u0005"+
		"u\u0000\u0000\u05f6\u05f5\u0001\u0000\u0000\u0000\u05f6\u05f7\u0001\u0000"+
		"\u0000\u0000\u05f7\u05ff\u0001\u0000\u0000\u0000\u05f8\u05fa\u0003N\'"+
		"\u0000\u05f9\u05f8\u0001\u0000\u0000\u0000\u05f9\u05fa\u0001\u0000\u0000"+
		"\u0000\u05fa\u05fc\u0001\u0000\u0000\u0000\u05fb\u05fd\u0005u\u0000\u0000"+
		"\u05fc\u05fb\u0001\u0000\u0000\u0000\u05fc\u05fd\u0001\u0000\u0000\u0000"+
		"\u05fd\u05ff\u0001\u0000\u0000\u0000\u05fe\u05f3\u0001\u0000\u0000\u0000"+
		"\u05fe\u05f9\u0001\u0000\u0000\u0000\u05ff\u0637\u0001\u0000\u0000\u0000"+
		"\u0600\u0601\u0005\u0129\u0000\u0000\u0601\u0626\u00052\u0000\u0000\u0602"+
		"\u0627\u0003\u01ca\u00e5\u0000\u0603\u0604\u0003X,\u0000\u0604\u0606\u0003"+
		"\u0380\u01c0\u0000\u0605\u0607\u0003\u01cc\u00e6\u0000\u0606\u0605\u0001"+
		"\u0000\u0000\u0000\u0606\u0607\u0001\u0000\u0000\u0000\u0607\u0609\u0001"+
		"\u0000\u0000\u0000\u0608\u060a\u0003\u01ce\u00e7\u0000\u0609\u0608\u0001"+
		"\u0000\u0000\u0000\u0609\u060a\u0001\u0000\u0000\u0000\u060a\u060c\u0001"+
		"\u0000\u0000\u0000\u060b\u060d\u0003\u01d0\u00e8\u0000\u060c\u060b\u0001"+
		"\u0000\u0000\u0000\u060c\u060d\u0001\u0000\u0000\u0000\u060d\u060f\u0001"+
		"\u0000\u0000\u0000\u060e\u0610\u0003\u02e4\u0172\u0000\u060f\u060e\u0001"+
		"\u0000\u0000\u0000\u060f\u0610\u0001\u0000\u0000\u0000\u0610\u0612\u0001"+
		"\u0000\u0000\u0000\u0611\u0613\u0003\u019a\u00cd\u0000\u0612\u0611\u0001"+
		"\u0000\u0000\u0000\u0612\u0613\u0001\u0000\u0000\u0000\u0613\u0627\u0001"+
		"\u0000\u0000\u0000\u0614\u0616\u0003N\'\u0000\u0615\u0614\u0001\u0000"+
		"\u0000\u0000\u0615\u0616\u0001\u0000\u0000\u0000\u0616\u0618\u0001\u0000"+
		"\u0000\u0000\u0617\u0619\u0003\u01cc\u00e6\u0000\u0618\u0617\u0001\u0000"+
		"\u0000\u0000\u0618\u0619\u0001\u0000\u0000\u0000\u0619\u061b\u0001\u0000"+
		"\u0000\u0000\u061a\u061c\u0003\u01ce\u00e7\u0000\u061b\u061a\u0001\u0000"+
		"\u0000\u0000\u061b\u061c\u0001\u0000\u0000\u0000\u061c\u061e\u0001\u0000"+
		"\u0000\u0000\u061d\u061f\u0003\u01d0\u00e8\u0000\u061e\u061d\u0001\u0000"+
		"\u0000\u0000\u061e\u061f\u0001\u0000\u0000\u0000\u061f\u0621\u0001\u0000"+
		"\u0000\u0000\u0620\u0622\u0003\u02e4\u0172\u0000\u0621\u0620\u0001\u0000"+
		"\u0000\u0000\u0621\u0622\u0001\u0000\u0000\u0000\u0622\u0624\u0001\u0000"+
		"\u0000\u0000\u0623\u0625\u0003\u019a\u00cd\u0000\u0624\u0623\u0001\u0000"+
		"\u0000\u0000\u0624\u0625\u0001\u0000\u0000\u0000\u0625\u0627\u0001\u0000"+
		"\u0000\u0000\u0626\u0602\u0001\u0000\u0000\u0000\u0626\u0603\u0001\u0000"+
		"\u0000\u0000\u0626\u0615\u0001\u0000\u0000\u0000\u0627\u0637\u0001\u0000"+
		"\u0000\u0000\u0628\u0629\u0005\u0129\u0000\u0000\u0629\u0637\u0005\u014f"+
		"\u0000\u0000\u062a\u062b\u0005\u0129\u0000\u0000\u062b\u062c\u00056\u0000"+
		"\u0000\u062c\u0637\u0005\u019c\u0000\u0000\u062d\u062e\u0005\u0129\u0000"+
		"\u0000\u062e\u0632\u0005\u010e\u0000\u0000\u062f\u0630\u0005\u00e9\u0000"+
		"\u0000\u0630\u0633\u0003\u0380\u01c0\u0000\u0631\u0633\u0005\u00ea\u0000"+
		"\u0000\u0632\u062f\u0001\u0000\u0000\u0000\u0632\u0631\u0001\u0000\u0000"+
		"\u0000\u0633\u0637\u0001\u0000\u0000\u0000\u0634\u0635\u0005\u0129\u0000"+
		"\u0000\u0635\u0637\u0005F\u0000\u0000\u0636\u0581\u0001\u0000\u0000\u0000"+
		"\u0636\u0587\u0001\u0000\u0000\u0000\u0636\u0594\u0001\u0000\u0000\u0000"+
		"\u0636\u05a0\u0001\u0000\u0000\u0000\u0636\u05ad\u0001\u0000\u0000\u0000"+
		"\u0636\u05be\u0001\u0000\u0000\u0000\u0636\u05c4\u0001\u0000\u0000\u0000"+
		"\u0636\u05d3\u0001\u0000\u0000\u0000\u0636\u05dc\u0001\u0000\u0000\u0000"+
		"\u0636\u05e9\u0001\u0000\u0000\u0000\u0636\u05f1\u0001\u0000\u0000\u0000"+
		"\u0636\u0600\u0001\u0000\u0000\u0000\u0636\u0628\u0001\u0000\u0000\u0000"+
		"\u0636\u062a\u0001\u0000\u0000\u0000\u0636\u062d\u0001\u0000\u0000\u0000"+
		"\u0636\u0634\u0001\u0000\u0000\u0000\u0637[\u0001\u0000\u0000\u0000\u0638"+
		"\u0639\u0005\u0174\u0000\u0000\u0639\u063a\u0003\u0380\u01c0\u0000\u063a"+
		"\u063b\u0005\u0188\u0000\u0000\u063b\u063c\u0005\u019c\u0000\u0000\u063c"+
		"\u0641\u0001\u0000\u0000\u0000\u063d\u063e\u0005\u00b0\u0000\u0000\u063e"+
		"\u0641\u0003\u00d0h\u0000\u063f\u0641\u0003\u00d0h\u0000\u0640\u0638\u0001"+
		"\u0000\u0000\u0000\u0640\u063d\u0001\u0000\u0000\u0000\u0640\u063f\u0001"+
		"\u0000\u0000\u0000\u0641]\u0001\u0000\u0000\u0000\u0642\u0643\u0005\u00b6"+
		"\u0000\u0000\u0643\u0644\u0005\u013e\u0000\u0000\u0644\u0646\u0003\u0280"+
		"\u0140\u0000\u0645\u0647\u0003\u0370\u01b8\u0000\u0646\u0645\u0001\u0000"+
		"\u0000\u0000\u0646\u0647\u0001\u0000\u0000\u0000\u0647\u0648\u0001\u0000"+
		"\u0000\u0000\u0648\u0649\u0003b1\u0000\u0649_\u0001\u0000\u0000\u0000"+
		"\u064a\u064b\u0005\u00b6\u0000\u0000\u064b\u064c\u0003X,\u0000\u064c\u064d"+
		"\u0003\u0380\u01c0\u0000\u064d\u064e\u0003b1\u0000\u064ea\u0001\u0000"+
		"\u0000\u0000\u064f\u0650\u0007\u0007\u0000\u0000\u0650c\u0001\u0000\u0000"+
		"\u0000\u0651\u0652\u0005\u015e\u0000\u0000\u0652\u0653\u0005\u013e\u0000"+
		"\u0000\u0653\u0655\u0003\u0280\u0140\u0000\u0654\u0656\u0003\u0370\u01b8"+
		"\u0000\u0655\u0654\u0001\u0000\u0000\u0000\u0655\u0656\u0001\u0000\u0000"+
		"\u0000\u0656e\u0001\u0000\u0000\u0000\u0657\u0658\u0005\u015e\u0000\u0000"+
		"\u0658\u0659\u0003X,\u0000\u0659\u065a\u0003\u0380\u01c0\u0000\u065ag"+
		"\u0001\u0000\u0000\u0000\u065b\u065c\u0005:\u0000\u0000\u065c\u065d\u0005"+
		"\u0115\u0000\u0000\u065d\u065e\u0003\u0380\u01c0\u0000\u065ei\u0001\u0000"+
		"\u0000\u0000\u065f\u0660\u0005b\u0000\u0000\u0660\u0661\u0005\u0115\u0000"+
		"\u0000\u0661\u0662\u0003\u0380\u01c0\u0000\u0662k\u0001\u0000\u0000\u0000"+
		"\u0663\u0664\u0005\u008a\u0000\u0000\u0664\u0666\u0003\u0088D\u0000\u0665"+
		"\u0667\u0003\u0082A\u0000\u0666\u0665\u0001\u0000\u0000\u0000\u0666\u0667"+
		"\u0001\u0000\u0000\u0000\u0667\u0668\u0001\u0000\u0000\u0000\u0668\u0669"+
		"\u0005\u014a\u0000\u0000\u0669\u066b\u0003\u008eG\u0000\u066a\u066c\u0003"+
		"\u0092I\u0000\u066b\u066a\u0001\u0000\u0000\u0000\u066b\u066c\u0001\u0000"+
		"\u0000\u0000\u066cm\u0001\u0000\u0000\u0000\u066d\u066f\u0005\u0111\u0000"+
		"\u0000\u066e\u0670\u0003\u0094J\u0000\u066f\u066e\u0001\u0000\u0000\u0000"+
		"\u066f\u0670\u0001\u0000\u0000\u0000\u0670\u0671\u0001\u0000\u0000\u0000"+
		"\u0671\u0673\u0003\u0088D\u0000\u0672\u0674\u0003\u0082A\u0000\u0673\u0672"+
		"\u0001\u0000\u0000\u0000\u0673\u0674\u0001\u0000\u0000\u0000\u0674\u0675"+
		"\u0001\u0000\u0000\u0000\u0675\u0676\u0005\u0086\u0000\u0000\u0676\u0677"+
		"\u0003\u008eG\u0000\u0677o\u0001\u0000\u0000\u0000\u0678\u067a\u0005\u008a"+
		"\u0000\u0000\u0679\u067b\u0005\u0115\u0000\u0000\u067a\u0679\u0001\u0000"+
		"\u0000\u0000\u067a\u067b\u0001\u0000\u0000\u0000\u067b\u067c\u0001\u0000"+
		"\u0000\u0000\u067c\u0681\u0003\u0380\u01c0\u0000\u067d\u067e\u0005\u0180"+
		"\u0000\u0000\u067e\u0680\u0003\u0380\u01c0\u0000\u067f\u067d\u0001\u0000"+
		"\u0000\u0000\u0680\u0683\u0001\u0000\u0000\u0000\u0681\u067f\u0001\u0000"+
		"\u0000\u0000\u0681\u0682\u0001\u0000\u0000\u0000\u0682\u0684\u0001\u0000"+
		"\u0000\u0000\u0683\u0681\u0001\u0000\u0000\u0000\u0684\u0685\u0005\u014a"+
		"\u0000\u0000\u0685\u0687\u0003\u008eG\u0000\u0686\u0688\u0003\u0098L\u0000"+
		"\u0687\u0686\u0001\u0000\u0000\u0000\u0687\u0688\u0001\u0000\u0000\u0000"+
		"\u0688q\u0001\u0000\u0000\u0000\u0689\u068b\u0005\u0111\u0000\u0000\u068a"+
		"\u068c\u0003\u0096K\u0000\u068b\u068a\u0001\u0000\u0000\u0000\u068b\u068c"+
		"\u0001\u0000\u0000\u0000\u068c\u068e\u0001\u0000\u0000\u0000\u068d\u068f"+
		"\u0005\u0115\u0000\u0000\u068e\u068d\u0001\u0000\u0000\u0000\u068e\u068f"+
		"\u0001\u0000\u0000\u0000\u068f\u0690\u0001\u0000\u0000\u0000\u0690\u0695"+
		"\u0003\u0380\u01c0\u0000\u0691\u0692\u0005\u0180\u0000\u0000\u0692\u0694"+
		"\u0003\u0380\u01c0\u0000\u0693\u0691\u0001\u0000\u0000\u0000\u0694\u0697"+
		"\u0001\u0000\u0000\u0000\u0695\u0693\u0001\u0000\u0000\u0000\u0695\u0696"+
		"\u0001\u0000\u0000\u0000\u0696\u0698\u0001\u0000\u0000\u0000\u0697\u0695"+
		"\u0001\u0000\u0000\u0000\u0698\u0699\u0005\u0086\u0000\u0000\u0699\u069a"+
		"\u0003\u008eG\u0000\u069as\u0001\u0000\u0000\u0000\u069b\u069c\u0005\u0129"+
		"\u0000\u0000\u069c\u069d\u0005\u0115\u0000\u0000\u069d\u069e\u0005\u008a"+
		"\u0000\u0000\u069e\u069f\u0003\u0090H\u0000\u069fu\u0001\u0000\u0000\u0000"+
		"\u06a0\u06a1\u0005\u0129\u0000\u0000\u06a1\u06a2\u0005\u0116\u0000\u0000"+
		"\u06a2w\u0001\u0000\u0000\u0000\u06a3\u06a4\u0005\u0129\u0000\u0000\u06a4"+
		"\u06a5\u0005>\u0000\u0000\u06a5\u06a6\u0005\u0116\u0000\u0000\u06a6y\u0001"+
		"\u0000\u0000\u0000\u06a7\u06a8\u0005\u0125\u0000\u0000\u06a8\u06ac\u0005"+
		"\u0115\u0000\u0000\u06a9\u06ad\u0005\u0007\u0000\u0000\u06aa\u06ad\u0005"+
		"\u00cb\u0000\u0000\u06ab\u06ad\u0003\u0380\u01c0\u0000\u06ac\u06a9\u0001"+
		"\u0000\u0000\u0000\u06ac\u06aa\u0001\u0000\u0000\u0000\u06ac\u06ab\u0001"+
		"\u0000\u0000\u0000\u06ad{\u0001\u0000\u0000\u0000\u06ae\u06af\u0005\u0129"+
		"\u0000\u0000\u06af\u06b1\u0005\u008a\u0000\u0000\u06b0\u06b2\u0003\u0090"+
		"H\u0000\u06b1\u06b0\u0001\u0000\u0000\u0000\u06b1\u06b2\u0001\u0000\u0000"+
		"\u0000\u06b2\u06b5\u0001\u0000\u0000\u0000\u06b3\u06b4\u0005\u00d6\u0000"+
		"\u0000\u06b4\u06b6\u0003\u0080@\u0000\u06b5\u06b3\u0001\u0000\u0000\u0000"+
		"\u06b5\u06b6\u0001\u0000\u0000\u0000\u06b6}\u0001\u0000\u0000\u0000\u06b7"+
		"\u06b8\u0005\u0129\u0000\u0000\u06b8\u06b9\u0005\u00f2\u0000\u0000\u06b9"+
		"\u06ba\u0003\u0380\u01c0\u0000\u06ba\u007f\u0001\u0000\u0000\u0000\u06bb"+
		"\u06be\u0005\u0007\u0000\u0000\u06bc\u06be\u0003\u0086C\u0000\u06bd\u06bb"+
		"\u0001\u0000\u0000\u0000\u06bd\u06bc\u0001\u0000\u0000\u0000\u06be\u0081"+
		"\u0001\u0000\u0000\u0000\u06bf\u06c0\u0005\u00d6\u0000\u0000\u06c0\u06c1"+
		"\u0003\u0084B\u0000\u06c1\u0083\u0001\u0000\u0000\u0000\u06c2\u06c3\u0003"+
		"X,\u0000\u06c3\u06c4\u0003\u0380\u01c0\u0000\u06c4\u06d1\u0001\u0000\u0000"+
		"\u0000\u06c5\u06c7\u0005\u013e\u0000\u0000\u06c6\u06c5\u0001\u0000\u0000"+
		"\u0000\u06c6\u06c7\u0001\u0000\u0000\u0000\u06c7\u06c8\u0001\u0000\u0000"+
		"\u0000\u06c8\u06ca\u0003\u0280\u0140\u0000\u06c9\u06cb\u0003\u0370\u01b8"+
		"\u0000\u06ca\u06c9\u0001\u0000\u0000\u0000\u06ca\u06cb\u0001\u0000\u0000"+
		"\u0000\u06cb\u06d1\u0001\u0000\u0000\u0000\u06cc\u06cd\u0005\u0163\u0000"+
		"\u0000\u06cd\u06d1\u0005\u019c\u0000\u0000\u06ce\u06cf\u0005\u0124\u0000"+
		"\u0000\u06cf\u06d1\u0003\u0380\u01c0\u0000\u06d0\u06c2\u0001\u0000\u0000"+
		"\u0000\u06d0\u06c6\u0001\u0000\u0000\u0000\u06d0\u06cc\u0001\u0000\u0000"+
		"\u0000\u06d0\u06ce\u0001\u0000\u0000\u0000\u06d1\u0085\u0001\u0000\u0000"+
		"\u0000\u06d2\u06d3\u0003X,\u0000\u06d3\u06d4\u0003\u0380\u01c0\u0000\u06d4"+
		"\u06e7\u0001\u0000\u0000\u0000\u06d5\u06d7\u0005\u013e\u0000\u0000\u06d6"+
		"\u06d5\u0001\u0000\u0000\u0000\u06d6\u06d7\u0001\u0000\u0000\u0000\u06d7"+
		"\u06d8\u0001\u0000\u0000\u0000\u06d8\u06dd\u0003\u0280\u0140\u0000\u06d9"+
		"\u06da\u0005\u0182\u0000\u0000\u06da\u06db\u0003\u0110\u0088\u0000\u06db"+
		"\u06dc\u0005\u0183\u0000\u0000\u06dc\u06de\u0001\u0000\u0000\u0000\u06dd"+
		"\u06d9\u0001\u0000\u0000\u0000\u06dd\u06de\u0001\u0000\u0000\u0000\u06de"+
		"\u06e0\u0001\u0000\u0000\u0000\u06df\u06e1\u0003\u0370\u01b8\u0000\u06e0"+
		"\u06df\u0001\u0000\u0000\u0000\u06e0\u06e1\u0001\u0000\u0000\u0000\u06e1"+
		"\u06e7\u0001\u0000\u0000\u0000\u06e2\u06e3\u0005\u0163\u0000\u0000\u06e3"+
		"\u06e7\u0005\u019c\u0000\u0000\u06e4\u06e5\u0005\u0124\u0000\u0000\u06e5"+
		"\u06e7\u0003\u0380\u01c0\u0000\u06e6\u06d2\u0001\u0000\u0000\u0000\u06e6"+
		"\u06d6\u0001\u0000\u0000\u0000\u06e6\u06e2\u0001\u0000\u0000\u0000\u06e6"+
		"\u06e4\u0001\u0000\u0000\u0000\u06e7\u0087\u0001\u0000\u0000\u0000\u06e8"+
		"\u06ed\u0003\u008aE\u0000\u06e9\u06ea\u0005\u0180\u0000\u0000\u06ea\u06ec"+
		"\u0003\u008aE\u0000\u06eb\u06e9\u0001\u0000\u0000\u0000\u06ec\u06ef\u0001"+
		"\u0000\u0000\u0000\u06ed\u06eb\u0001\u0000\u0000\u0000\u06ed\u06ee\u0001"+
		"\u0000\u0000\u0000\u06ee\u0089\u0001\u0000\u0000\u0000\u06ef\u06ed\u0001"+
		"\u0000\u0000\u0000\u06f0\u06f5\u0003\u008cF\u0000\u06f1\u06f2\u0005\u0182"+
		"\u0000\u0000\u06f2\u06f3\u0003\u0110\u0088\u0000\u06f3\u06f4\u0005\u0183"+
		"\u0000\u0000\u06f4\u06f6\u0001\u0000\u0000\u0000\u06f5\u06f1\u0001\u0000"+
		"\u0000\u0000\u06f5\u06f6\u0001\u0000\u0000\u0000\u06f6\u008b\u0001\u0000"+
		"\u0000\u0000\u06f7\u06f8\u0007\b\u0000\u0000\u06f8\u008d\u0001\u0000\u0000"+
		"\u0000\u06f9\u06fe\u0003\u0090H\u0000\u06fa\u06fb\u0005\u0180\u0000\u0000"+
		"\u06fb\u06fd\u0003\u0090H\u0000\u06fc\u06fa\u0001\u0000\u0000\u0000\u06fd"+
		"\u0700\u0001\u0000\u0000\u0000\u06fe\u06fc\u0001\u0000\u0000\u0000\u06fe"+
		"\u06ff\u0001\u0000\u0000\u0000\u06ff\u008f\u0001\u0000\u0000\u0000\u0700"+
		"\u06fe\u0001\u0000\u0000\u0000\u0701\u0702\u0005\u0166\u0000\u0000\u0702"+
		"\u0708\u0003\u0384\u01c2\u0000\u0703\u0704\u0005\u008b\u0000\u0000\u0704"+
		"\u0708\u0003\u0384\u01c2\u0000\u0705\u0706\u0005\u0115\u0000\u0000\u0706"+
		"\u0708\u0003\u0380\u01c0\u0000\u0707\u0701\u0001\u0000\u0000\u0000\u0707"+
		"\u0703\u0001\u0000\u0000\u0000\u0707\u0705\u0001\u0000\u0000\u0000\u0708"+
		"\u0091\u0001\u0000\u0000\u0000\u0709\u070a\u0005\u0177\u0000\u0000\u070a"+
		"\u070b\u0005\u008a\u0000\u0000\u070b\u070c\u0005\u00d9\u0000\u0000\u070c"+
		"\u0093\u0001\u0000\u0000\u0000\u070d\u070e\u0005\u008a\u0000\u0000\u070e"+
		"\u070f\u0005\u00d9\u0000\u0000\u070f\u0710\u0005\u0081\u0000\u0000\u0710"+
		"\u0095\u0001\u0000\u0000\u0000\u0711\u0712\u0005\u0005\u0000\u0000\u0712"+
		"\u0713\u0005\u00d9\u0000\u0000\u0713\u0714\u0005\u0081\u0000\u0000\u0714"+
		"\u0097\u0001\u0000\u0000\u0000\u0715\u0716\u0005\u0177\u0000\u0000\u0716"+
		"\u0717\u0005\u0005\u0000\u0000\u0717\u0718\u0005\u00d9\u0000\u0000\u0718"+
		"\u0099\u0001\u0000\u0000\u0000\u0719\u071b\u0005\u00ca\u0000\u0000\u071a"+
		"\u071c\u0005\u010a\u0000\u0000\u071b\u071a\u0001\u0000\u0000\u0000\u071b"+
		"\u071c\u0001\u0000\u0000\u0000\u071c\u071d\u0001\u0000\u0000\u0000\u071d"+
		"\u071e\u0005\u013e\u0000\u0000\u071e\u0724\u0003\u0280\u0140\u0000\u071f"+
		"\u0720\u0007\t\u0000\u0000\u0720\u0722\u0005\u00e5\u0000\u0000\u0721\u0723"+
		"\u0003\u0374\u01ba\u0000\u0722\u0721\u0001\u0000\u0000\u0000\u0722\u0723"+
		"\u0001\u0000\u0000\u0000\u0723\u0725\u0001\u0000\u0000\u0000\u0724\u071f"+
		"\u0001\u0000\u0000\u0000\u0724\u0725\u0001\u0000\u0000\u0000\u0725\u009b"+
		"\u0001\u0000\u0000\u0000\u0726\u072b\u0003\u009eO\u0000\u0727\u0728\u0005"+
		"\u0180\u0000\u0000\u0728\u072a\u0003\u009eO\u0000\u0729\u0727\u0001\u0000"+
		"\u0000\u0000\u072a\u072d\u0001\u0000\u0000\u0000\u072b\u0729\u0001\u0000"+
		"\u0000\u0000\u072b\u072c\u0001\u0000\u0000\u0000\u072c\u009d\u0001\u0000"+
		"\u0000\u0000\u072d\u072b\u0001\u0000\u0000\u0000\u072e\u072f\u0003\u00a0"+
		"P\u0000\u072f\u0730\u0005\u019c\u0000\u0000\u0730\u009f\u0001\u0000\u0000"+
		"\u0000\u0731\u0732\u0007\n\u0000\u0000\u0732\u00a1\u0001\u0000\u0000\u0000"+
		"\u0733\u0735\u0005:\u0000\u0000\u0734\u0736\u0005\u0142\u0000\u0000\u0735"+
		"\u0734\u0001\u0000\u0000\u0000\u0735\u0736\u0001\u0000\u0000\u0000\u0736"+
		"\u0737\u0001\u0000\u0000\u0000\u0737\u0738\u0005\u0088\u0000\u0000\u0738"+
		"\u0739\u0003\u0382\u01c1\u0000\u0739\u073a\u0005\u0011\u0000\u0000\u073a"+
		"\u073d\u0005\u019c\u0000\u0000\u073b\u073c\u0005\u0167\u0000\u0000\u073c"+
		"\u073e\u0003\u009cN\u0000\u073d\u073b\u0001\u0000\u0000\u0000\u073d\u073e"+
		"\u0001\u0000\u0000\u0000\u073e\u00a3\u0001\u0000\u0000\u0000\u073f\u0741"+
		"\u0005b\u0000\u0000\u0740\u0742\u0005\u0142\u0000\u0000\u0741\u0740\u0001"+
		"\u0000\u0000";
	private static final String _serializedATNSegment1 =
		"\u0000\u0741\u0742\u0001\u0000\u0000\u0000\u0742\u0743\u0001\u0000\u0000"+
		"\u0000\u0743\u0745\u0005\u0088\u0000\u0000\u0744\u0746\u0003$\u0012\u0000"+
		"\u0745\u0744\u0001\u0000\u0000\u0000\u0745\u0746\u0001\u0000\u0000\u0000"+
		"\u0746\u0747\u0001\u0000\u0000\u0000\u0747\u0748\u0003\u0382\u01c1\u0000"+
		"\u0748\u00a5\u0001\u0000\u0000\u0000\u0749\u074a\u0005\u0105\u0000\u0000"+
		"\u074a\u074b\u0007\u000b\u0000\u0000\u074b\u00a7\u0001\u0000\u0000\u0000"+
		"\u074c\u074d\u0005:\u0000\u0000\u074d\u074e\u0005\u0142\u0000\u0000\u074e"+
		"\u074f\u0005\u00ba\u0000\u0000\u074f\u0750\u0005\u01a2\u0000\u0000\u0750"+
		"\u0752\u0005\u0182\u0000\u0000\u0751\u0753\u0003\u010a\u0085\u0000\u0752"+
		"\u0751\u0001\u0000\u0000\u0000\u0752\u0753\u0001\u0000\u0000\u0000\u0753"+
		"\u0754\u0001\u0000\u0000\u0000\u0754\u0755\u0005\u0183\u0000\u0000\u0755"+
		"\u0756\u0003\u031c\u018e\u0000\u0756\u00a9\u0001\u0000\u0000\u0000\u0757"+
		"\u0758\u0005b\u0000\u0000\u0758\u0759\u0005\u0142\u0000\u0000\u0759\u075b"+
		"\u0005\u00ba\u0000\u0000\u075a\u075c\u0003$\u0012\u0000\u075b\u075a\u0001"+
		"\u0000\u0000\u0000\u075b\u075c\u0001\u0000\u0000\u0000\u075c\u075d\u0001"+
		"\u0000\u0000\u0000\u075d\u075e\u0005\u01a2\u0000\u0000\u075e\u00ab\u0001"+
		"\u0000\u0000\u0000\u075f\u0761\u0005:\u0000\u0000\u0760\u0762\u00032\u0019"+
		"\u0000\u0761\u0760\u0001\u0000\u0000\u0000\u0761\u0762\u0001\u0000\u0000"+
		"\u0000\u0762\u0763\u0001\u0000\u0000\u0000\u0763\u0765\u0005\u016f\u0000"+
		"\u0000\u0764\u0766\u0003(\u0014\u0000\u0765\u0764\u0001\u0000\u0000\u0000"+
		"\u0765\u0766\u0001\u0000\u0000\u0000\u0766\u0767\u0001\u0000\u0000\u0000"+
		"\u0767\u076c\u0003\u0280\u0140\u0000\u0768\u0769\u0005\u0182\u0000\u0000"+
		"\u0769\u076a\u0003\u0144\u00a2\u0000\u076a\u076b\u0005\u0183\u0000\u0000"+
		"\u076b\u076d\u0001\u0000\u0000\u0000\u076c\u0768\u0001\u0000\u0000\u0000"+
		"\u076c\u076d\u0001\u0000\u0000\u0000\u076d\u076f\u0001\u0000\u0000\u0000"+
		"\u076e\u0770\u0003\u00d2i\u0000\u076f\u076e\u0001\u0000\u0000\u0000\u076f"+
		"\u0770\u0001\u0000\u0000\u0000\u0770\u0772\u0001\u0000\u0000\u0000\u0771"+
		"\u0773\u0003\u00aeW\u0000\u0772\u0771\u0001\u0000\u0000\u0000\u0772\u0773"+
		"\u0001\u0000\u0000\u0000\u0773\u0775\u0001\u0000\u0000\u0000\u0774\u0776"+
		"\u0003\u00f2y\u0000\u0775\u0774\u0001\u0000\u0000\u0000\u0775\u0776\u0001"+
		"\u0000\u0000\u0000\u0776\u0777\u0001\u0000\u0000\u0000\u0777\u0778\u0005"+
		"\u0011\u0000\u0000\u0778\u0779\u0003\u0192\u00c9\u0000\u0779\u00ad\u0001"+
		"\u0000\u0000\u0000\u077a\u077b\u0005\u00e4\u0000\u0000\u077b\u0781\u0005"+
		"\u00d6\u0000\u0000\u077c\u077d\u0005\u0182\u0000\u0000\u077d\u0782\u0003"+
		"\u0110\u0088\u0000\u077e\u077f\u0005\u0131\u0000\u0000\u077f\u0780\u0005"+
		"\u0182\u0000\u0000\u0780\u0782\u0003\u00dam\u0000\u0781\u077c\u0001\u0000"+
		"\u0000\u0000\u0781\u077e\u0001\u0000\u0000\u0000\u0782\u0783\u0001\u0000"+
		"\u0000\u0000\u0783\u0784\u0005\u0183\u0000\u0000\u0784\u00af\u0001\u0000"+
		"\u0000\u0000\u0785\u0788\u0003\u00b2Y\u0000\u0786\u0788\u0003\u00b4Z\u0000"+
		"\u0787\u0785\u0001\u0000\u0000\u0000\u0787\u0786\u0001\u0000\u0000\u0000"+
		"\u0788\u00b1\u0001\u0000\u0000\u0000\u0789\u078a\u0005*\u0000\u0000\u078a"+
		"\u078b\u0005\u00d6\u0000\u0000\u078b\u078c\u0005\u0182\u0000\u0000\u078c"+
		"\u078d\u0003\u0110\u0088\u0000\u078d\u078e\u0005\u0183\u0000\u0000\u078e"+
		"\u00b3\u0001\u0000\u0000\u0000\u078f\u0790\u0003\u00b6[\u0000\u0790\u0791"+
		"\u0003\u00b8\\\u0000\u0791\u00b5\u0001\u0000\u0000\u0000\u0792\u0793\u0005"+
		"^\u0000\u0000\u0793\u0794\u0005\u00d6\u0000\u0000\u0794\u0795\u0005\u0182"+
		"\u0000\u0000\u0795\u0796\u0003\u0110\u0088\u0000\u0796\u0797\u0005\u0183"+
		"\u0000\u0000\u0797\u00b7\u0001\u0000\u0000\u0000\u0798\u0799\u0005\u0130"+
		"\u0000\u0000\u0799\u079a\u0005\u00d6\u0000\u0000\u079a\u079b\u0005\u0182"+
		"\u0000\u0000\u079b\u079c\u0003\u0110\u0088\u0000\u079c\u079d\u0005\u0183"+
		"\u0000\u0000\u079d\u00b9\u0001\u0000\u0000\u0000\u079e\u079f\u0005b\u0000"+
		"\u0000\u079f\u07a1\u0005\u016f\u0000\u0000\u07a0\u07a2\u0003$\u0012\u0000"+
		"\u07a1\u07a0\u0001\u0000\u0000\u0000\u07a1\u07a2\u0001\u0000\u0000\u0000"+
		"\u07a2\u07a3\u0001\u0000\u0000\u0000\u07a3\u07a4\u0003\u0282\u0141\u0000"+
		"\u07a4\u00bb\u0001\u0000\u0000\u0000\u07a5\u07a6\u0005:\u0000\u0000\u07a6"+
		"\u07a7\u0005\u00c2\u0000\u0000\u07a7\u07a9\u0005\u016f\u0000\u0000\u07a8"+
		"\u07aa\u0003(\u0014\u0000\u07a9\u07a8\u0001\u0000\u0000\u0000\u07a9\u07aa"+
		"\u0001\u0000\u0000\u0000\u07aa\u07ab\u0001\u0000\u0000\u0000\u07ab\u07ad"+
		"\u0003\u0280\u0140\u0000\u07ac\u07ae\u0003.\u0017\u0000\u07ad\u07ac\u0001"+
		"\u0000\u0000\u0000\u07ad\u07ae\u0001\u0000\u0000\u0000\u07ae\u07b0\u0001"+
		"\u0000\u0000\u0000\u07af\u07b1\u0003\u00d2i\u0000\u07b0\u07af\u0001\u0000"+
		"\u0000\u0000\u07b0\u07b1\u0001\u0000\u0000\u0000\u07b1\u07b3\u0001\u0000"+
		"\u0000\u0000\u07b2\u07b4\u0003\u00aeW\u0000\u07b3\u07b2\u0001\u0000\u0000"+
		"\u0000\u07b3\u07b4\u0001\u0000\u0000\u0000\u07b4\u07b6\u0001\u0000\u0000"+
		"\u0000\u07b5\u07b7\u0003\u00b0X\u0000\u07b6\u07b5\u0001\u0000\u0000\u0000"+
		"\u07b6\u07b7\u0001\u0000\u0000\u0000\u07b7\u07b9\u0001\u0000\u0000\u0000"+
		"\u07b8\u07ba\u0003\u00f0x\u0000\u07b9\u07b8\u0001\u0000\u0000\u0000\u07b9"+
		"\u07ba\u0001\u0000\u0000\u0000\u07ba\u07bc\u0001\u0000\u0000\u0000\u07bb"+
		"\u07bd\u0003\u0106\u0083\u0000\u07bc\u07bb\u0001\u0000\u0000\u0000\u07bc"+
		"\u07bd\u0001\u0000\u0000\u0000\u07bd\u07bf\u0001\u0000\u0000\u0000\u07be"+
		"\u07c0\u0003\u0108\u0084\u0000\u07bf\u07be\u0001\u0000\u0000\u0000\u07bf"+
		"\u07c0\u0001\u0000\u0000\u0000\u07c0\u07c2\u0001\u0000\u0000\u0000\u07c1"+
		"\u07c3\u0003\u00f2y\u0000\u07c2\u07c1\u0001\u0000\u0000\u0000\u07c2\u07c3"+
		"\u0001\u0000\u0000\u0000\u07c3\u07c4\u0001\u0000\u0000\u0000\u07c4\u07c5"+
		"\u0005\u0011\u0000\u0000\u07c5\u07c6\u0003\u0192\u00c9\u0000\u07c6\u00bd"+
		"\u0001\u0000\u0000\u0000\u07c7\u07c8\u0005b\u0000\u0000\u07c8\u07c9\u0005"+
		"\u00c2\u0000\u0000\u07c9\u07cb\u0005\u016f\u0000\u0000\u07ca\u07cc\u0003"+
		"$\u0012\u0000\u07cb\u07ca\u0001\u0000\u0000\u0000\u07cb\u07cc\u0001\u0000"+
		"\u0000\u0000\u07cc\u07cd\u0001\u0000\u0000\u0000\u07cd\u07ce\u0003\u0282"+
		"\u0141\u0000\u07ce\u00bf\u0001\u0000\u0000\u0000\u07cf\u07d0\u0005:\u0000"+
		"\u0000\u07d0\u07d1\u0005\u011b\u0000\u0000\u07d1\u07d2\u0005\u00f8\u0000"+
		"\u0000\u07d2\u07d3\u0003\u0380\u01c0\u0000\u07d3\u07d5\u0003\u00c8d\u0000"+
		"\u07d4\u07d6\u0003\u00cae\u0000\u07d5\u07d4\u0001\u0000\u0000\u0000\u07d5"+
		"\u07d6\u0001\u0000\u0000\u0000\u07d6\u07d8\u0001\u0000\u0000\u0000\u07d7"+
		"\u07d9\u0003\u011c\u008e\u0000\u07d8\u07d7\u0001\u0000\u0000\u0000\u07d8"+
		"\u07d9\u0001\u0000\u0000\u0000\u07d9\u07da\u0001\u0000\u0000\u0000\u07da"+
		"\u07db\u0003\u00ccf\u0000\u07db\u00c1\u0001\u0000\u0000\u0000\u07dc\u07dd"+
		"\u0005b\u0000\u0000\u07dd\u07de\u0005\u011b\u0000\u0000\u07de\u07df\u0005"+
		"\u00f8\u0000\u0000\u07df\u07e0\u0003\u0380\u01c0\u0000\u07e0\u00c3\u0001"+
		"\u0000\u0000\u0000\u07e1\u07e2\u0005\t\u0000\u0000\u07e2\u07e3\u0005\u011b"+
		"\u0000\u0000\u07e3\u07e4\u0005\u00f8\u0000\u0000\u07e4\u07e5\u0003\u0380"+
		"\u01c0\u0000\u07e5\u07e6\u0003\u00c6c\u0000\u07e6\u00c5\u0001\u0000\u0000"+
		"\u0000\u07e7\u07ed\u0003\u00c8d\u0000\u07e8\u07ed\u0003\u00cae\u0000\u07e9"+
		"\u07ed\u0003\u011c\u008e\u0000\u07ea\u07ed\u0003\u00ccf\u0000\u07eb\u07ed"+
		"\u0005n\u0000\u0000\u07ec\u07e7\u0001\u0000\u0000\u0000\u07ec\u07e8\u0001"+
		"\u0000\u0000\u0000\u07ec\u07e9\u0001\u0000\u0000\u0000\u07ec\u07ea\u0001"+
		"\u0000\u0000\u0000\u07ec\u07eb\u0001\u0000\u0000\u0000\u07ed\u00c7\u0001"+
		"\u0000\u0000\u0000\u07ee\u07ef\u0005;\u0000\u0000\u07ef\u07fe\u0005\u019c"+
		"\u0000\u0000\u07f0\u07f2\u0005j\u0000\u0000\u07f1\u07f3\u0005\u01a1\u0000"+
		"\u0000\u07f2\u07f1\u0001\u0000\u0000\u0000\u07f2\u07f3\u0001\u0000\u0000"+
		"\u0000\u07f3\u07f4\u0001\u0000\u0000\u0000\u07f4\u07fb\u0003\u031a\u018d"+
		"\u0000\u07f5\u07f9\u0005\u0014\u0000\u0000\u07f6\u07f7\u0005\u00d5\u0000"+
		"\u0000\u07f7\u07f9\u0005 \u0000\u0000\u07f8\u07f5\u0001\u0000\u0000\u0000"+
		"\u07f8\u07f6\u0001\u0000\u0000\u0000\u07f9\u07fa\u0001\u0000\u0000\u0000"+
		"\u07fa\u07fc\u0005\u019c\u0000\u0000\u07fb\u07f8\u0001\u0000\u0000\u0000"+
		"\u07fb\u07fc\u0001\u0000\u0000\u0000\u07fc\u07fe\u0001\u0000\u0000\u0000"+
		"\u07fd\u07ee\u0001\u0000\u0000\u0000\u07fd\u07f0\u0001\u0000\u0000\u0000"+
		"\u07fe\u00c9\u0001\u0000\u0000\u0000\u07ff\u0800\u0005o\u0000\u0000\u0800"+
		"\u0801\u0005\u0011\u0000\u0000\u0801\u0802\u0005\u019c\u0000\u0000\u0802"+
		"\u00cb\u0001\u0000\u0000\u0000\u0803\u0805\u0005R\u0000\u0000\u0804\u0803"+
		"\u0001\u0000\u0000\u0000\u0804\u0805\u0001\u0000\u0000\u0000\u0805\u0806"+
		"\u0001\u0000\u0000\u0000\u0806\u0807\u0005\u0011\u0000\u0000\u0807\u0808"+
		"\u0003\u0000\u0000\u0000\u0808\u00cd\u0001\u0000\u0000\u0000\u0809\u080c"+
		"\u0003\u0382\u01c1\u0000\u080a\u080c\u0005\u019c\u0000\u0000\u080b\u0809"+
		"\u0001\u0000\u0000\u0000\u080b\u080a\u0001\u0000\u0000\u0000\u080c\u00cf"+
		"\u0001\u0000\u0000\u0000\u080d\u0810\u0003\u0380\u01c0\u0000\u080e\u0810"+
		"\u0005\u019c\u0000\u0000\u080f\u080d\u0001\u0000\u0000\u0000\u080f\u080e"+
		"\u0001\u0000\u0000\u0000\u0810\u00d1\u0001\u0000\u0000\u0000\u0811\u0812"+
		"\u0005/\u0000\u0000\u0812\u0813\u0005\u019c\u0000\u0000\u0813\u00d3\u0001"+
		"\u0000\u0000\u0000\u0814\u0815\u0005\u00e4\u0000\u0000\u0815\u081e\u0005"+
		" \u0000\u0000\u0816\u0819\u0005\u0182\u0000\u0000\u0817\u081a\u0003\u00d6"+
		"k\u0000\u0818\u081a\u0003\u00d8l\u0000\u0819\u0817\u0001\u0000\u0000\u0000"+
		"\u0819\u0818\u0001\u0000\u0000\u0000\u081a\u081f\u0001\u0000\u0000\u0000"+
		"\u081b\u081c\u0005\u0131\u0000\u0000\u081c\u081d\u0005\u0182\u0000\u0000"+
		"\u081d\u081f\u0003\u00dam\u0000\u081e\u0816\u0001\u0000\u0000\u0000\u081e"+
		"\u081b\u0001\u0000\u0000\u0000\u081f\u0820\u0001\u0000\u0000\u0000\u0820"+
		"\u0821\u0005\u0183\u0000\u0000\u0821\u00d5\u0001\u0000\u0000\u0000\u0822"+
		"\u0827\u0003\u0152\u00a9\u0000\u0823\u0824\u0005\u0180\u0000\u0000\u0824"+
		"\u0826\u0003\u0152\u00a9\u0000\u0825\u0823\u0001\u0000\u0000\u0000\u0826"+
		"\u0829\u0001\u0000\u0000\u0000\u0827\u0825\u0001\u0000\u0000\u0000\u0827"+
		"\u0828\u0001\u0000\u0000\u0000\u0828\u00d7\u0001\u0000\u0000\u0000\u0829"+
		"\u0827\u0001\u0000\u0000\u0000\u082a\u082f\u0003\u0112\u0089\u0000\u082b"+
		"\u082c\u0005\u0180\u0000\u0000\u082c\u082e\u0003\u0112\u0089\u0000\u082d"+
		"\u082b\u0001\u0000\u0000\u0000\u082e\u0831\u0001\u0000\u0000\u0000\u082f"+
		"\u082d\u0001\u0000\u0000\u0000\u082f\u0830\u0001\u0000\u0000\u0000\u0830"+
		"\u00d9\u0001\u0000\u0000\u0000\u0831\u082f\u0001\u0000\u0000\u0000\u0832"+
		"\u0837\u0003\u00dcn\u0000\u0833\u0834\u0005\u0180\u0000\u0000\u0834\u0836"+
		"\u0003\u00dcn\u0000\u0835\u0833\u0001\u0000\u0000\u0000\u0836\u0839\u0001"+
		"\u0000\u0000\u0000\u0837\u0835\u0001\u0000\u0000\u0000\u0837\u0838\u0001"+
		"\u0000\u0000\u0000\u0838\u00db\u0001\u0000\u0000\u0000\u0839\u0837\u0001"+
		"\u0000\u0000\u0000\u083a\u083b\u0003\u00deo\u0000\u083b\u00dd\u0001\u0000"+
		"\u0000\u0000\u083c\u084a\u0003\u0112\u0089\u0000\u083d\u083e\u0007\f\u0000"+
		"\u0000\u083e\u083f\u0005\u0182\u0000\u0000\u083f\u0840\u0003\u0112\u0089"+
		"\u0000\u0840\u0841\u0005\u0183\u0000\u0000\u0841\u084a\u0001\u0000\u0000"+
		"\u0000\u0842\u0843\u0007\r\u0000\u0000\u0843\u0844\u0005\u0182\u0000\u0000"+
		"\u0844\u0845\u0005\u01a1\u0000\u0000\u0845\u0846\u0005\u0180\u0000\u0000"+
		"\u0846\u0847\u0003\u0112\u0089\u0000\u0847\u0848\u0005\u0183\u0000\u0000"+
		"\u0848\u084a\u0001\u0000\u0000\u0000\u0849\u083c\u0001\u0000\u0000\u0000"+
		"\u0849\u083d\u0001\u0000\u0000\u0000\u0849\u0842\u0001\u0000\u0000\u0000"+
		"\u084a\u00df\u0001\u0000\u0000\u0000\u084b\u084c\u0005*\u0000\u0000\u084c"+
		"\u084d\u0005 \u0000\u0000\u084d\u084e\u0005\u0182\u0000\u0000\u084e\u084f"+
		"\u0003\u0110\u0088\u0000\u084f\u0856\u0005\u0183\u0000\u0000\u0850\u0851"+
		"\u0005\u0130\u0000\u0000\u0851\u0852\u0005 \u0000\u0000\u0852\u0853\u0005"+
		"\u0182\u0000\u0000\u0853\u0854\u0003\u0116\u008b\u0000\u0854\u0855\u0005"+
		"\u0183\u0000\u0000\u0855\u0857\u0001\u0000\u0000\u0000\u0856\u0850\u0001"+
		"\u0000\u0000\u0000\u0856\u0857\u0001\u0000\u0000\u0000\u0857\u0858\u0001"+
		"\u0000\u0000\u0000\u0858\u0859\u0005\u009f\u0000\u0000\u0859\u085a\u0005"+
		"\u01a1\u0000\u0000\u085a\u085b\u0005\u001f\u0000\u0000\u085b\u00e1\u0001"+
		"\u0000\u0000\u0000\u085c\u085d\u0005*\u0000\u0000\u085d\u085e\u0005\u009f"+
		"\u0000\u0000\u085e\u085f\u0005\u01a1\u0000\u0000\u085f\u0860\u0005\u001f"+
		"\u0000\u0000\u0860\u00e3\u0001\u0000\u0000\u0000\u0861\u0862\u0005\u012b"+
		"\u0000\u0000\u0862\u0863\u0005 \u0000\u0000\u0863\u0864\u0005\u0182\u0000"+
		"\u0000\u0864\u0865\u0003\u0110\u0088\u0000\u0865\u0866\u0005\u0183\u0000"+
		"\u0000\u0866\u0867\u0005\u00d6\u0000\u0000\u0867\u0868\u0005\u0182\u0000"+
		"\u0000\u0868\u0869\u0003\u0132\u0099\u0000\u0869\u086b\u0005\u0183\u0000"+
		"\u0000\u086a\u086c\u00030\u0018\u0000\u086b\u086a\u0001\u0000\u0000\u0000"+
		"\u086b\u086c\u0001\u0000\u0000\u0000\u086c\u00e5\u0001\u0000\u0000\u0000"+
		"\u086d\u0870\u0003\u00ecv\u0000\u086e\u0870\u0003\u00eew\u0000\u086f\u086d"+
		"\u0001\u0000\u0000\u0000\u086f\u086e\u0001\u0000\u0000\u0000\u0870\u00e7"+
		"\u0001\u0000\u0000\u0000\u0871\u0872\u0005\u0100\u0000\u0000\u0872\u0873"+
		"\u0005\u019c\u0000\u0000\u0873\u00e9\u0001\u0000\u0000\u0000\u0874\u0875"+
		"\u0005\u0101\u0000\u0000\u0875\u0876\u0005\u019c\u0000\u0000\u0876\u00eb"+
		"\u0001\u0000\u0000\u0000\u0877\u0878\u0005\u0119\u0000\u0000\u0878\u0879"+
		"\u0005\u0084\u0000\u0000\u0879\u087a\u0005\u0122\u0000\u0000\u087a\u087e"+
		"\u0005\u019c\u0000\u0000\u087b\u087c\u0005\u0177\u0000\u0000\u087c\u087d"+
		"\u0005\u0123\u0000\u0000\u087d\u087f\u0003\u00f4z\u0000\u087e\u087b\u0001"+
		"\u0000\u0000\u0000\u087e\u087f\u0001\u0000\u0000\u0000\u087f\u00ed\u0001"+
		"\u0000\u0000\u0000\u0880\u0881\u0005\u0119\u0000\u0000\u0881\u0882\u0005"+
		"\u0084\u0000\u0000\u0882\u0884\u0005T\u0000\u0000\u0883\u0885\u0003\u00fc"+
		"~\u0000\u0884\u0883\u0001\u0000\u0000\u0000\u0884\u0885\u0001\u0000\u0000"+
		"\u0000\u0885\u0887\u0001\u0000\u0000\u0000\u0886\u0888\u0003\u00fe\u007f"+
		"\u0000\u0887\u0886\u0001\u0000\u0000\u0000\u0887\u0888\u0001\u0000\u0000"+
		"\u0000\u0888\u088a\u0001\u0000\u0000\u0000\u0889\u088b\u0003\u0100\u0080"+
		"\u0000\u088a\u0889\u0001\u0000\u0000\u0000\u088a\u088b\u0001\u0000\u0000"+
		"\u0000\u088b\u088d\u0001\u0000\u0000\u0000\u088c\u088e\u0003\u0102\u0081"+
		"\u0000\u088d\u088c\u0001\u0000\u0000\u0000\u088d\u088e\u0001\u0000\u0000"+
		"\u0000\u088e\u0890\u0001\u0000\u0000\u0000\u088f\u0891\u0003\u0104\u0082"+
		"\u0000\u0890\u088f\u0001\u0000\u0000\u0000\u0890\u0891\u0001\u0000\u0000"+
		"\u0000\u0891\u00ef\u0001\u0000\u0000\u0000\u0892\u0895\u0003\u00eew\u0000"+
		"\u0893\u0895\u0003\u00ecv\u0000\u0894\u0892\u0001\u0000\u0000\u0000\u0894"+
		"\u0893\u0001\u0000\u0000\u0000\u0895\u00f1\u0001\u0000\u0000\u0000\u0896"+
		"\u0897\u0005\u0141\u0000\u0000\u0897\u0898\u0003\u00f4z\u0000\u0898\u00f3"+
		"\u0001\u0000\u0000\u0000\u0899\u089a\u0005\u0182\u0000\u0000\u089a\u089b"+
		"\u0003\u00f6{\u0000\u089b\u089c\u0005\u0183\u0000\u0000\u089c\u00f5\u0001"+
		"\u0000\u0000\u0000\u089d\u08a2\u0003\u00f8|\u0000\u089e\u089f\u0005\u0180"+
		"\u0000\u0000\u089f\u08a1\u0003\u00f8|\u0000\u08a0\u089e\u0001\u0000\u0000"+
		"\u0000\u08a1\u08a4\u0001\u0000\u0000\u0000\u08a2\u08a0\u0001\u0000\u0000"+
		"\u0000\u08a2\u08a3\u0001\u0000\u0000\u0000\u08a3\u08ae\u0001\u0000\u0000"+
		"\u0000\u08a4\u08a2\u0001\u0000\u0000\u0000\u08a5\u08aa\u0003\u00fa}\u0000"+
		"\u08a6\u08a7\u0005\u0180\u0000\u0000\u08a7\u08a9\u0003\u00fa}\u0000\u08a8"+
		"\u08a6\u0001\u0000\u0000\u0000\u08a9\u08ac\u0001\u0000\u0000\u0000\u08aa"+
		"\u08a8\u0001\u0000\u0000\u0000\u08aa\u08ab\u0001\u0000\u0000\u0000\u08ab"+
		"\u08ae\u0001\u0000\u0000\u0000\u08ac\u08aa\u0001\u0000\u0000\u0000\u08ad"+
		"\u089d\u0001\u0000\u0000\u0000\u08ad\u08a5\u0001\u0000\u0000\u0000\u08ae"+
		"\u00f7\u0001\u0000\u0000\u0000\u08af\u08b0\u0005\u019c\u0000\u0000\u08b0"+
		"\u08b1\u0005\u0188\u0000\u0000\u08b1\u08b2\u0005\u019c\u0000\u0000\u08b2"+
		"\u00f9\u0001\u0000\u0000\u0000\u08b3\u08b4\u0005\u019c\u0000\u0000\u08b4"+
		"\u00fb\u0001\u0000\u0000\u0000\u08b5\u08b6\u0005z\u0000\u0000\u08b6\u08b7"+
		"\u0005\u0143\u0000\u0000\u08b7\u08b8\u0005 \u0000\u0000\u08b8\u08bc\u0005"+
		"\u019c\u0000\u0000\u08b9\u08ba\u0005i\u0000\u0000\u08ba\u08bb\u0005 \u0000"+
		"\u0000\u08bb\u08bd\u0005\u019c\u0000\u0000\u08bc\u08b9\u0001\u0000\u0000"+
		"\u0000\u08bc\u08bd\u0001\u0000\u0000\u0000\u08bd\u00fd\u0001\u0000\u0000"+
		"\u0000\u08be\u08bf\u0005,\u0000\u0000\u08bf\u08c0\u0005\u00a2\u0000\u0000"+
		"\u08c0\u08c1\u0005\u0143\u0000\u0000\u08c1\u08c2\u0005 \u0000\u0000\u08c2"+
		"\u08c3\u0005\u019c\u0000\u0000\u08c3\u00ff\u0001\u0000\u0000\u0000\u08c4"+
		"\u08c5\u0005\u00be\u0000\u0000\u08c5\u08c6\u0005\u00a7\u0000\u0000\u08c6"+
		"\u08c7\u0005\u0143\u0000\u0000\u08c7\u08c8\u0005 \u0000\u0000\u08c8\u08c9"+
		"\u0005\u019c\u0000\u0000\u08c9\u0101\u0001\u0000\u0000\u0000\u08ca\u08cb"+
		"\u0005\u00b2\u0000\u0000\u08cb\u08cc\u0005\u0143\u0000\u0000\u08cc\u08cd"+
		"\u0005 \u0000\u0000\u08cd\u08ce\u0005\u019c\u0000\u0000\u08ce\u0103\u0001"+
		"\u0000\u0000\u0000\u08cf\u08d0\u0005\u00d1\u0000\u0000\u08d0\u08d1\u0005"+
		"R\u0000\u0000\u08d1\u08d2\u0005\u0011\u0000\u0000\u08d2\u08d3\u0005\u019c"+
		"\u0000\u0000\u08d3\u0105\u0001\u0000\u0000\u0000\u08d4\u08d5\u0005\u0136"+
		"\u0000\u0000\u08d5\u08d6\u0005\u0011\u0000\u0000\u08d6\u08d7\u0005\u009a"+
		"\u0000\u0000\u08d7\u08d8\u0005\u019c\u0000\u0000\u08d8\u08d9\u0005\u00df"+
		"\u0000\u0000\u08d9\u08de\u0005\u019c\u0000\u0000\u08da\u08db\u0005\u0099"+
		"\u0000\u0000\u08db\u08dc\u0005\u019c\u0000\u0000\u08dc\u08dd\u0005\u00de"+
		"\u0000\u0000\u08dd\u08df\u0005\u019c\u0000\u0000\u08de\u08da\u0001\u0000"+
		"\u0000\u0000\u08de\u08df\u0001\u0000\u0000\u0000\u08df\u08fe\u0001\u0000"+
		"\u0000\u0000\u08e0\u08e1\u0005\u0136\u0000\u0000\u08e1\u08e2\u0005 \u0000"+
		"\u0000\u08e2\u08e6\u0005\u019c\u0000\u0000\u08e3\u08e4\u0005\u0177\u0000"+
		"\u0000\u08e4\u08e5\u0005\u0123\u0000\u0000\u08e5\u08e7\u0003\u00f4z\u0000"+
		"\u08e6\u08e3\u0001\u0000\u0000\u0000\u08e6\u08e7\u0001\u0000\u0000\u0000"+
		"\u08e7\u08eb\u0001\u0000\u0000\u0000\u08e8\u08e9\u0005\u0136\u0000\u0000"+
		"\u08e9\u08ea\u0005\u0011\u0000\u0000\u08ea\u08ec\u0003\u0380\u01c0\u0000"+
		"\u08eb\u08e8\u0001\u0000\u0000\u0000\u08eb\u08ec\u0001\u0000\u0000\u0000"+
		"\u08ec\u08fe\u0001\u0000\u0000\u0000\u08ed\u08ee\u0005\u0136\u0000\u0000"+
		"\u08ee\u08ef\u0005 \u0000\u0000\u08ef\u08f3\u0003\u0380\u01c0\u0000\u08f0"+
		"\u08f1\u0005\u0177\u0000\u0000\u08f1\u08f2\u0005\u0123\u0000\u0000\u08f2"+
		"\u08f4\u0003\u00f4z\u0000\u08f3\u08f0\u0001\u0000\u0000\u0000\u08f3\u08f4"+
		"\u0001\u0000\u0000\u0000\u08f4\u08f8\u0001\u0000\u0000\u0000\u08f5\u08f6"+
		"\u0005\u0136\u0000\u0000\u08f6\u08f7\u0005\u0011\u0000\u0000\u08f7\u08f9"+
		"\u0003\u0380\u01c0\u0000\u08f8\u08f5\u0001\u0000\u0000\u0000\u08f8\u08f9"+
		"\u0001\u0000\u0000\u0000\u08f9\u08fe\u0001\u0000\u0000\u0000\u08fa\u08fb"+
		"\u0005\u0136\u0000\u0000\u08fb\u08fc\u0005\u0011\u0000\u0000\u08fc\u08fe"+
		"\u0003\u0380\u01c0\u0000\u08fd\u08d4\u0001\u0000\u0000\u0000\u08fd\u08e0"+
		"\u0001\u0000\u0000\u0000\u08fd\u08ed\u0001\u0000\u0000\u0000\u08fd\u08fa"+
		"\u0001\u0000\u0000\u0000\u08fe\u0107\u0001\u0000\u0000\u0000\u08ff\u0900"+
		"\u0005\u00b5\u0000\u0000\u0900\u0901\u0005\u019c\u0000\u0000\u0901\u0109"+
		"\u0001\u0000\u0000\u0000\u0902\u0907\u0003\u014c\u00a6\u0000\u0903\u0904"+
		"\u0005\u0180\u0000\u0000\u0904\u0906\u0003\u014c\u00a6\u0000\u0905\u0903"+
		"\u0001\u0000\u0000\u0000\u0906\u0909\u0001\u0000\u0000\u0000\u0907\u0905"+
		"\u0001\u0000\u0000\u0000\u0907\u0908\u0001\u0000\u0000\u0000\u0908\u010b"+
		"\u0001\u0000\u0000\u0000\u0909\u0907\u0001\u0000\u0000\u0000\u090a\u090f"+
		"\u0003\u014e\u00a7\u0000\u090b\u090c\u0005\u0180\u0000\u0000\u090c\u090e"+
		"\u0003\u014e\u00a7\u0000\u090d\u090b\u0001\u0000\u0000\u0000\u090e\u0911"+
		"\u0001\u0000\u0000\u0000\u090f\u090d\u0001\u0000\u0000\u0000\u090f\u0910"+
		"\u0001\u0000\u0000\u0000\u0910\u010d\u0001\u0000\u0000\u0000\u0911\u090f"+
		"\u0001\u0000\u0000\u0000\u0912\u0917\u0003\u016a\u00b5\u0000\u0913\u0914"+
		"\u0005\u0180\u0000\u0000\u0914\u0916\u0003\u016a\u00b5\u0000\u0915\u0913"+
		"\u0001\u0000\u0000\u0000\u0916\u0919\u0001\u0000\u0000\u0000\u0917\u0915"+
		"\u0001\u0000\u0000\u0000\u0917\u0918\u0001\u0000\u0000\u0000\u0918\u010f"+
		"\u0001\u0000\u0000\u0000\u0919\u0917\u0001\u0000\u0000\u0000\u091a\u091f"+
		"\u0003\u0112\u0089\u0000\u091b\u091c\u0005\u0180\u0000\u0000\u091c\u091e"+
		"\u0003\u0112\u0089\u0000\u091d\u091b\u0001\u0000\u0000\u0000\u091e\u0921"+
		"\u0001\u0000\u0000\u0000\u091f\u091d\u0001\u0000\u0000\u0000\u091f\u0920"+
		"\u0001\u0000\u0000\u0000\u0920\u0111\u0001\u0000\u0000\u0000\u0921\u091f"+
		"\u0001\u0000\u0000\u0000\u0922\u0923\u0003\u0380\u01c0\u0000\u0923\u0113"+
		"\u0001\u0000\u0000\u0000\u0924\u092e\u0003\u0380\u01c0\u0000\u0925\u092a"+
		"\u0005\u017e\u0000\u0000\u0926\u092b\u0005d\u0000\u0000\u0927\u092b\u0005"+
		"\u00a8\u0000\u0000\u0928\u092b\u0005\u016c\u0000\u0000\u0929\u092b\u0003"+
		"\u0380\u01c0\u0000\u092a\u0926\u0001\u0000\u0000\u0000\u092a\u0927\u0001"+
		"\u0000\u0000\u0000\u092a\u0928\u0001\u0000\u0000\u0000\u092a\u0929\u0001"+
		"\u0000\u0000\u0000\u092b\u092d\u0001\u0000\u0000\u0000\u092c\u0925\u0001"+
		"\u0000\u0000\u0000\u092d\u0930\u0001\u0000\u0000\u0000\u092e\u092c\u0001"+
		"\u0000\u0000\u0000\u092e\u092f\u0001\u0000\u0000\u0000\u092f\u0115\u0001"+
		"\u0000\u0000\u0000\u0930\u092e\u0001\u0000\u0000\u0000\u0931\u0936\u0003"+
		"\u0142\u00a1\u0000\u0932\u0933\u0005\u0180\u0000\u0000\u0933\u0935\u0003"+
		"\u0142\u00a1\u0000\u0934\u0932\u0001\u0000\u0000\u0000\u0935\u0938\u0001"+
		"\u0000\u0000\u0000\u0936\u0934\u0001\u0000\u0000\u0000\u0936\u0937\u0001"+
		"\u0000\u0000\u0000\u0937\u0117\u0001\u0000\u0000\u0000\u0938\u0936\u0001"+
		"\u0000\u0000\u0000\u0939\u093a\u0005\u0182\u0000\u0000\u093a\u093b\u0003"+
		"\u0110\u0088\u0000\u093b\u093c\u0005\u0183\u0000\u0000\u093c\u0119\u0001"+
		"\u0000\u0000\u0000\u093d\u093f\u0003\u011c\u008e\u0000\u093e\u0940\u0003"+
		"\u011e\u008f\u0000\u093f\u093e\u0001\u0000\u0000\u0000\u093f\u0940\u0001"+
		"\u0000\u0000\u0000\u0940\u0943\u0001\u0000\u0000\u0000\u0941\u0943\u0003"+
		"\u0120\u0090\u0000\u0942\u093d\u0001\u0000\u0000\u0000\u0942\u0941\u0001"+
		"\u0000\u0000\u0000\u0943\u011b\u0001\u0000\u0000\u0000\u0944\u0945\u0007"+
		"\u000e\u0000\u0000\u0945\u011d\u0001\u0000\u0000\u0000\u0946\u0947\u0007"+
		"\u000f\u0000\u0000\u0947\u011f\u0001\u0000\u0000\u0000\u0948\u094c\u0005"+
		"h\u0000\u0000\u0949\u094a\u0005\u00ce\u0000\u0000\u094a\u094c\u0005h\u0000"+
		"\u0000\u094b\u0948\u0001\u0000\u0000\u0000\u094b\u0949\u0001\u0000\u0000"+
		"\u0000\u094c\u0121\u0001\u0000\u0000\u0000\u094d\u094e\u0007\u0010\u0000"+
		"\u0000\u094e\u0123\u0001\u0000\u0000\u0000\u094f\u0950\u00057\u0000\u0000"+
		"\u0950\u0952\u0003\u0380\u01c0\u0000\u0951\u094f\u0001\u0000\u0000\u0000"+
		"\u0951\u0952\u0001\u0000\u0000\u0000\u0952\u0953\u0001\u0000\u0000\u0000"+
		"\u0953\u0955\u0003\u0128\u0094\u0000\u0954\u0956\u0003\u0166\u00b3\u0000"+
		"\u0955\u0954\u0001\u0000\u0000\u0000\u0955\u0956\u0001\u0000\u0000\u0000"+
		"\u0956\u0125\u0001\u0000\u0000\u0000\u0957\u0958\u00057\u0000\u0000\u0958"+
		"\u0959\u0003\u0380\u01c0\u0000\u0959\u095b\u0003\u0128\u0094\u0000\u095a"+
		"\u095c\u0003\u0168\u00b4\u0000\u095b\u095a\u0001\u0000\u0000\u0000\u095b"+
		"\u095c\u0001\u0000\u0000\u0000\u095c\u0127\u0001\u0000\u0000\u0000\u095d"+
		"\u0960\u0003\u012a\u0095\u0000\u095e\u0960\u0003\u012c\u0096\u0000\u095f"+
		"\u095d\u0001\u0000\u0000\u0000\u095f\u095e\u0001\u0000\u0000\u0000\u0960"+
		"\u0129\u0001\u0000\u0000\u0000\u0961\u0962\u0003\u0164\u00b2\u0000\u0962"+
		"\u0963\u0003\u0118\u008c\u0000\u0963\u012b\u0001\u0000\u0000\u0000\u0964"+
		"\u0965\u0005(\u0000\u0000\u0965\u0966\u0005\u0182\u0000\u0000\u0966\u0967"+
		"\u0003\u031c\u018e\u0000\u0967\u0968\u0005\u0183\u0000\u0000\u0968\u012d"+
		"\u0001\u0000\u0000\u0000\u0969\u096a\u00057\u0000\u0000\u096a\u096c\u0003"+
		"\u0380\u01c0\u0000\u096b\u0969\u0001\u0000\u0000\u0000\u096b\u096c\u0001"+
		"\u0000\u0000\u0000\u096c\u096d\u0001\u0000\u0000\u0000\u096d\u096e\u0005"+
		"\u0083\u0000\u0000\u096e\u096f\u0005\u00a6\u0000\u0000\u096f\u0970\u0003"+
		"\u0118\u008c\u0000\u0970\u0971\u0005\u0103\u0000\u0000\u0971\u0972\u0003"+
		"\u0280\u0140\u0000\u0972\u0974\u0003\u0118\u008c\u0000\u0973\u0975\u0003"+
		"\u0166\u00b3\u0000\u0974\u0973\u0001\u0000\u0000\u0000\u0974\u0975\u0001"+
		"\u0000\u0000\u0000\u0975\u012f\u0001\u0000\u0000\u0000\u0976\u0977\u0005"+
		"7\u0000\u0000\u0977\u0978\u0003\u0380\u01c0\u0000\u0978\u0979\u0005\u0083"+
		"\u0000\u0000\u0979\u097a\u0005\u00a6\u0000\u0000\u097a\u097b\u0003\u0118"+
		"\u008c\u0000\u097b\u097c\u0005\u0103\u0000\u0000\u097c\u097d\u0003\u0280"+
		"\u0140\u0000\u097d\u097f\u0003\u0118\u008c\u0000\u097e\u0980\u0003\u0168"+
		"\u00b4\u0000\u097f\u097e\u0001\u0000\u0000\u0000\u097f\u0980\u0001\u0000"+
		"\u0000\u0000\u0980\u0131\u0001\u0000\u0000\u0000\u0981\u0984\u0003\u0138"+
		"\u009c\u0000\u0982\u0984\u0003\u0134\u009a\u0000\u0983\u0981\u0001\u0000"+
		"\u0000\u0000\u0983\u0982\u0001\u0000\u0000\u0000\u0984\u0133\u0001\u0000"+
		"\u0000\u0000\u0985\u098a\u0003\u0136\u009b\u0000\u0986\u0987\u0005\u0180"+
		"\u0000\u0000\u0987\u0989\u0003\u0136\u009b\u0000\u0988\u0986\u0001\u0000"+
		"\u0000\u0000\u0989\u098c\u0001\u0000\u0000\u0000\u098a\u0988\u0001\u0000"+
		"\u0000\u0000\u098a\u098b\u0001\u0000\u0000\u0000\u098b\u0135\u0001\u0000"+
		"\u0000\u0000\u098c\u098a\u0001\u0000\u0000\u0000\u098d\u098e\u0005\u0182"+
		"\u0000\u0000\u098e\u098f\u0003\u0138\u009c\u0000\u098f\u0990\u0005\u0183"+
		"\u0000\u0000\u0990\u0137\u0001\u0000\u0000\u0000\u0991\u0996\u0003\u013a"+
		"\u009d\u0000\u0992\u0993\u0005\u0180\u0000\u0000\u0993\u0995\u0003\u013a"+
		"\u009d\u0000\u0994\u0992\u0001\u0000\u0000\u0000\u0995\u0998\u0001\u0000"+
		"\u0000\u0000\u0996\u0994\u0001\u0000\u0000\u0000\u0996\u0997\u0001\u0000"+
		"\u0000\u0000\u0997\u0139\u0001\u0000\u0000\u0000\u0998\u0996\u0001\u0000"+
		"\u0000\u0000\u0999\u099a\u0003\u0304\u0182\u0000\u099a\u013b\u0001\u0000"+
		"\u0000\u0000\u099b\u099e\u0003\u013a\u009d\u0000\u099c\u099e\u0003\u0136"+
		"\u009b\u0000\u099d\u099b\u0001\u0000\u0000\u0000\u099d\u099c\u0001\u0000"+
		"\u0000\u0000\u099e\u013d\u0001\u0000\u0000\u0000\u099f\u09a0\u0007\u0011"+
		"\u0000\u0000\u09a0\u013f\u0001\u0000\u0000\u0000\u09a1\u09a2\u0005\u00d2"+
		"\u0000\u0000\u09a2\u09a3\u0007\u0012\u0000\u0000\u09a3\u0141\u0001\u0000"+
		"\u0000\u0000\u09a4\u09a6\u0003\u0380\u01c0\u0000\u09a5\u09a7\u0003\u013e"+
		"\u009f\u0000\u09a6\u09a5\u0001\u0000\u0000\u0000\u09a6\u09a7\u0001\u0000"+
		"\u0000\u0000\u09a7\u09a9\u0001\u0000\u0000\u0000\u09a8\u09aa\u0003\u0140"+
		"\u00a0\u0000\u09a9\u09a8\u0001\u0000\u0000\u0000\u09a9\u09aa\u0001\u0000"+
		"\u0000\u0000\u09aa\u0143\u0001\u0000\u0000\u0000\u09ab\u09b0\u0003\u0146"+
		"\u00a3\u0000\u09ac\u09ad\u0005\u0180\u0000\u0000\u09ad\u09af\u0003\u0146"+
		"\u00a3\u0000\u09ae\u09ac\u0001\u0000\u0000\u0000\u09af\u09b2\u0001\u0000"+
		"\u0000\u0000\u09b0\u09ae\u0001\u0000\u0000\u0000\u09b0\u09b1\u0001\u0000"+
		"\u0000\u0000\u09b1\u0145\u0001\u0000\u0000\u0000\u09b2\u09b0\u0001\u0000"+
		"\u0000\u0000\u09b3\u09b6\u0003\u0380\u01c0\u0000\u09b4\u09b5\u0005/\u0000"+
		"\u0000\u09b5\u09b7\u0005\u019c\u0000\u0000\u09b6\u09b4\u0001\u0000\u0000"+
		"\u0000\u09b6\u09b7\u0001\u0000\u0000\u0000\u09b7\u0147\u0001\u0000\u0000"+
		"\u0000\u09b8\u09b9\u0007\u0011\u0000\u0000\u09b9\u0149\u0001\u0000\u0000"+
		"\u0000\u09ba\u09bc\u0003\u031c\u018e\u0000\u09bb\u09bd\u0003\u0148\u00a4"+
		"\u0000\u09bc\u09bb\u0001\u0000\u0000\u0000\u09bc\u09bd\u0001\u0000\u0000"+
		"\u0000\u09bd\u09bf\u0001\u0000\u0000\u0000\u09be\u09c0\u0003\u0140\u00a0"+
		"\u0000\u09bf\u09be\u0001\u0000\u0000\u0000\u09bf\u09c0\u0001\u0000\u0000"+
		"\u0000\u09c0\u014b\u0001\u0000\u0000\u0000\u09c1\u09c2\u0003\u0380\u01c0"+
		"\u0000\u09c2\u09c5\u0003\u016c\u00b6\u0000\u09c3\u09c4\u0005/\u0000\u0000"+
		"\u09c4\u09c6\u0005\u019c\u0000\u0000\u09c5\u09c3\u0001\u0000\u0000\u0000"+
		"\u09c5\u09c6\u0001\u0000\u0000\u0000\u09c6\u014d\u0001\u0000\u0000\u0000"+
		"\u09c7\u09ca\u0003\u0150\u00a8\u0000\u09c8\u09ca\u0003\u0152\u00a9\u0000"+
		"\u09c9\u09c7\u0001\u0000\u0000\u0000\u09c9\u09c8\u0001\u0000\u0000\u0000"+
		"\u09ca\u014f\u0001\u0000\u0000\u0000\u09cb\u09ce\u0003\u012e\u0097\u0000"+
		"\u09cc\u09ce\u0003\u0124\u0092\u0000\u09cd\u09cb\u0001\u0000\u0000\u0000"+
		"\u09cd\u09cc\u0001\u0000\u0000\u0000\u09ce\u0151\u0001\u0000\u0000\u0000"+
		"\u09cf\u09d0\u0003\u0380\u01c0\u0000\u09d0\u09d2\u0003\u016c\u00b6\u0000"+
		"\u09d1\u09d3\u0003\u0154\u00aa\u0000\u09d2\u09d1\u0001\u0000\u0000\u0000"+
		"\u09d2\u09d3\u0001\u0000\u0000\u0000\u09d3\u09d6\u0001\u0000\u0000\u0000"+
		"\u09d4\u09d5\u0005/\u0000\u0000\u09d5\u09d7\u0005\u019c\u0000\u0000\u09d6"+
		"\u09d4\u0001\u0000\u0000\u0000\u09d6\u09d7\u0001\u0000\u0000\u0000\u09d7"+
		"\u0153\u0001\u0000\u0000\u0000\u09d8\u09db\u0003\u0156\u00ab\u0000\u09d9"+
		"\u09db\u0003\u0158\u00ac\u0000\u09da\u09d8\u0001\u0000\u0000\u0000\u09da"+
		"\u09d9\u0001\u0000\u0000\u0000\u09db\u0155\u0001\u0000\u0000\u0000\u09dc"+
		"\u09dd\u00057\u0000\u0000\u09dd\u09df\u0003\u0380\u01c0\u0000\u09de\u09dc"+
		"\u0001\u0000\u0000\u0000\u09de\u09df\u0001\u0000\u0000\u0000\u09df\u09e0"+
		"\u0001\u0000\u0000\u0000\u09e0\u09e1\u0005\u0103\u0000\u0000\u09e1\u09e2"+
		"\u0003\u0280\u0140\u0000\u09e2\u09e3\u0005\u0182\u0000\u0000\u09e3\u09e4"+
		"\u0003\u0112\u0089\u0000\u09e4\u09e6\u0005\u0183\u0000\u0000\u09e5\u09e7"+
		"\u0003\u0166\u00b3\u0000\u09e6\u09e5\u0001\u0000\u0000\u0000\u09e6\u09e7"+
		"\u0001\u0000\u0000\u0000\u09e7\u0157\u0001\u0000\u0000\u0000\u09e8\u09e9"+
		"\u00057\u0000\u0000\u09e9\u09eb\u0003\u0380\u01c0\u0000\u09ea\u09e8\u0001"+
		"\u0000\u0000\u0000\u09ea\u09eb\u0001\u0000\u0000\u0000\u09eb\u09ec\u0001"+
		"\u0000\u0000\u0000\u09ec\u09ee\u0003\u0160\u00b0\u0000\u09ed\u09ef\u0003"+
		"\u0166\u00b3\u0000\u09ee\u09ed\u0001\u0000\u0000\u0000\u09ee\u09ef\u0001"+
		"\u0000\u0000\u0000\u09ef\u0159\u0001\u0000\u0000\u0000\u09f0\u09f3\u0003"+
		"\u015c\u00ae\u0000\u09f1\u09f3\u0003\u015e\u00af\u0000\u09f2\u09f0\u0001"+
		"\u0000\u0000\u0000\u09f2\u09f1\u0001\u0000\u0000\u0000\u09f3\u015b\u0001"+
		"\u0000\u0000\u0000\u09f4\u09f5\u00057\u0000\u0000\u09f5\u09f7\u0003\u0380"+
		"\u01c0\u0000\u09f6\u09f4\u0001\u0000\u0000\u0000\u09f6\u09f7\u0001\u0000"+
		"\u0000\u0000\u09f7\u09f8\u0001\u0000\u0000\u0000\u09f8\u09f9\u0005\u0103"+
		"\u0000\u0000\u09f9\u09fa\u0003\u0280\u0140\u0000\u09fa\u09fb\u0005\u0182"+
		"\u0000\u0000\u09fb\u09fc\u0003\u0112\u0089\u0000\u09fc\u09fe\u0005\u0183"+
		"\u0000\u0000\u09fd\u09ff\u0003\u0168\u00b4\u0000\u09fe\u09fd\u0001\u0000"+
		"\u0000\u0000\u09fe\u09ff\u0001\u0000\u0000\u0000\u09ff\u015d\u0001\u0000"+
		"\u0000\u0000\u0a00\u0a01\u00057\u0000\u0000\u0a01\u0a03\u0003\u0380\u01c0"+
		"\u0000\u0a02\u0a00\u0001\u0000\u0000\u0000\u0a02\u0a03\u0001\u0000\u0000"+
		"\u0000\u0a03\u0a04\u0001\u0000\u0000\u0000\u0a04\u0a06\u0003\u0160\u00b0"+
		"\u0000\u0a05\u0a07\u0003\u0168\u00b4\u0000\u0a06\u0a05\u0001\u0000\u0000"+
		"\u0000\u0a06\u0a07\u0001\u0000\u0000\u0000\u0a07\u015f\u0001\u0000\u0000"+
		"\u0000\u0a08\u0a09\u0005\u00ce\u0000\u0000\u0a09\u0a0f\u0005\u00d1\u0000"+
		"\u0000\u0a0a\u0a0b\u0005P\u0000\u0000\u0a0b\u0a0f\u0003\u0162\u00b1\u0000"+
		"\u0a0c\u0a0f\u0003\u012c\u0096\u0000\u0a0d\u0a0f\u0003\u0164\u00b2\u0000"+
		"\u0a0e\u0a08\u0001\u0000\u0000\u0000\u0a0e\u0a0a\u0001\u0000\u0000\u0000"+
		"\u0a0e\u0a0c\u0001\u0000\u0000\u0000\u0a0e\u0a0d\u0001\u0000\u0000\u0000"+
		"\u0a0f\u0161\u0001\u0000\u0000\u0000\u0a10\u0a14\u0003\u0304\u0182\u0000"+
		"\u0a11\u0a14\u0003\u02f0\u0178\u0000\u0a12\u0a14\u0003\u02f6\u017b\u0000"+
		"\u0a13\u0a10\u0001\u0000\u0000\u0000\u0a13\u0a11\u0001\u0000\u0000\u0000"+
		"\u0a13\u0a12\u0001\u0000\u0000\u0000\u0a14\u0163\u0001\u0000\u0000\u0000"+
		"\u0a15\u0a16\u0005\u00f1\u0000\u0000\u0a16\u0a19\u0005\u00a6\u0000\u0000"+
		"\u0a17\u0a19\u0005\u015b\u0000\u0000\u0a18\u0a15\u0001\u0000\u0000\u0000"+
		"\u0a18\u0a17\u0001\u0000\u0000\u0000\u0a19\u0165\u0001\u0000\u0000\u0000"+
		"\u0a1a\u0a1c\u0003\u011a\u008d\u0000\u0a1b\u0a1d\u0003\u0122\u0091\u0000"+
		"\u0a1c\u0a1b\u0001\u0000\u0000\u0000\u0a1c\u0a1d\u0001\u0000\u0000\u0000"+
		"\u0a1d\u0167\u0001\u0000\u0000\u0000\u0a1e\u0a20\u0003\u011a\u008d\u0000"+
		"\u0a1f\u0a21\u0003\u0122\u0091\u0000\u0a20\u0a1f\u0001\u0000\u0000\u0000"+
		"\u0a20\u0a21\u0001\u0000\u0000\u0000\u0a21\u0169\u0001\u0000\u0000\u0000"+
		"\u0a22\u0a23\u0003\u0380\u01c0\u0000\u0a23\u0a24\u0005\u017f\u0000\u0000"+
		"\u0a24\u0a27\u0003\u016c\u00b6\u0000\u0a25\u0a26\u0005/\u0000\u0000\u0a26"+
		"\u0a28\u0005\u019c\u0000\u0000\u0a27\u0a25\u0001\u0000\u0000\u0000\u0a27"+
		"\u0a28\u0001\u0000\u0000\u0000\u0a28\u016b\u0001\u0000\u0000\u0000\u0a29"+
		"\u0a2a\u0003\u0170\u00b8\u0000\u0a2a\u016d\u0001\u0000\u0000\u0000\u0a2b"+
		"\u0a30\u0003\u016c\u00b6\u0000\u0a2c\u0a2d\u0005\u0180\u0000\u0000\u0a2d"+
		"\u0a2f\u0003\u016c\u00b6\u0000\u0a2e\u0a2c\u0001\u0000\u0000\u0000\u0a2f"+
		"\u0a32\u0001\u0000\u0000\u0000\u0a30\u0a2e\u0001\u0000\u0000\u0000\u0a30"+
		"\u0a31\u0001\u0000\u0000\u0000\u0a31\u016f\u0001\u0000\u0000\u0000\u0a32"+
		"\u0a30\u0001\u0000\u0000\u0000\u0a33\u0a39\u0003\u0172\u00b9\u0000\u0a34"+
		"\u0a39\u0003\u0174\u00ba\u0000\u0a35\u0a39\u0003\u0176\u00bb\u0000\u0a36"+
		"\u0a39\u0003\u0178\u00bc\u0000\u0a37\u0a39\u0003\u017a\u00bd\u0000\u0a38"+
		"\u0a33\u0001\u0000\u0000\u0000\u0a38\u0a34\u0001\u0000\u0000\u0000\u0a38"+
		"\u0a35\u0001\u0000\u0000\u0000\u0a38\u0a36\u0001\u0000\u0000\u0000\u0a38"+
		"\u0a37\u0001\u0000\u0000\u0000\u0a39\u0171\u0001\u0000\u0000\u0000\u0a3a"+
		"\u0a5f\u0005\u0149\u0000\u0000\u0a3b\u0a5f\u0005\u012c\u0000\u0000\u0a3c"+
		"\u0a5f\u0005\u009c\u0000\u0000\u0a3d\u0a5f\u0005\u001a\u0000\u0000\u0a3e"+
		"\u0a5f\u0005\u001c\u0000\u0000\u0a3f\u0a5f\u0005~\u0000\u0000\u0a40\u0a5f"+
		"\u0005\u00fe\u0000\u0000\u0a41\u0a43\u0005`\u0000\u0000\u0a42\u0a44\u0005"+
		"\u00ee\u0000\u0000\u0a43\u0a42\u0001\u0000\u0000\u0000\u0a43\u0a44\u0001"+
		"\u0000\u0000\u0000\u0a44\u0a5f\u0001\u0000\u0000\u0000\u0a45\u0a5f\u0005"+
		"G\u0000\u0000\u0a46\u0a5f\u0005H\u0000\u0000\u0a47\u0a5f\u0005\u0146\u0000"+
		"\u0000\u0a48\u0a5f\u0005\u0147\u0000\u0000\u0a49\u0a4a\u0005\u0146\u0000"+
		"\u0000\u0a4a\u0a4b\u0005\u0177\u0000\u0000\u0a4b\u0a4c\u0005\u00b4\u0000"+
		"\u0000\u0a4c\u0a4d\u0005\u0145\u0000\u0000\u0a4d\u0a5f\u0005\u017d\u0000"+
		"\u0000\u0a4e\u0a5f\u0005\u0138\u0000\u0000\u0a4f\u0a5f\u0005\u001b\u0000"+
		"\u0000\u0a50\u0a58\u0005O\u0000\u0000\u0a51\u0a52\u0005\u0182\u0000\u0000"+
		"\u0a52\u0a55\u0005\u01a1\u0000\u0000\u0a53\u0a54\u0005\u0180\u0000\u0000"+
		"\u0a54\u0a56\u0005\u01a1\u0000\u0000\u0a55\u0a53\u0001\u0000\u0000\u0000"+
		"\u0a55\u0a56\u0001\u0000\u0000\u0000\u0a56\u0a57\u0001\u0000\u0000\u0000"+
		"\u0a57\u0a59\u0005\u0183\u0000\u0000\u0a58\u0a51\u0001\u0000\u0000\u0000"+
		"\u0a58\u0a59\u0001\u0000\u0000\u0000\u0a59\u0a5f\u0001\u0000\u0000\u0000"+
		"\u0a5a\u0a5b\u0007\u0013\u0000\u0000\u0a5b\u0a5c\u0005\u0182\u0000\u0000"+
		"\u0a5c\u0a5d\u0005\u01a1\u0000\u0000\u0a5d\u0a5f\u0005\u0183\u0000\u0000"+
		"\u0a5e\u0a3a\u0001\u0000\u0000\u0000\u0a5e\u0a3b\u0001\u0000\u0000\u0000"+
		"\u0a5e\u0a3c\u0001\u0000\u0000\u0000\u0a5e\u0a3d\u0001\u0000\u0000\u0000"+
		"\u0a5e\u0a3e\u0001\u0000\u0000\u0000\u0a5e\u0a3f\u0001\u0000\u0000\u0000"+
		"\u0a5e\u0a40\u0001\u0000\u0000\u0000\u0a5e\u0a41\u0001\u0000\u0000\u0000"+
		"\u0a5e\u0a45\u0001\u0000\u0000\u0000\u0a5e\u0a46\u0001\u0000\u0000\u0000"+
		"\u0a5e\u0a47\u0001\u0000\u0000\u0000\u0a5e\u0a48\u0001\u0000\u0000\u0000"+
		"\u0a5e\u0a49\u0001\u0000\u0000\u0000\u0a5e\u0a4e\u0001\u0000\u0000\u0000"+
		"\u0a5e\u0a4f\u0001\u0000\u0000\u0000\u0a5e\u0a50\u0001\u0000\u0000\u0000"+
		"\u0a5e\u0a5a\u0001\u0000\u0000\u0000\u0a5f\u0173\u0001\u0000\u0000\u0000"+
		"\u0a60\u0a61\u0005\u0010\u0000\u0000\u0a61\u0a62\u0005\u018c\u0000\u0000"+
		"\u0a62\u0a63\u0003\u0170\u00b8\u0000\u0a63\u0a64\u0005\u018e\u0000\u0000"+
		"\u0a64\u0175\u0001\u0000\u0000\u0000\u0a65\u0a66\u0005\u0139\u0000\u0000"+
		"\u0a66\u0a67\u0005\u018c\u0000\u0000\u0a67\u0a68\u0003\u010e\u0087\u0000"+
		"\u0a68\u0a69\u0005\u018e\u0000\u0000\u0a69\u0177\u0001\u0000\u0000\u0000"+
		"\u0a6a\u0a6b\u0005\u00be\u0000\u0000\u0a6b\u0a6c\u0005\u018c\u0000\u0000"+
		"\u0a6c\u0a6d\u0003\u0172\u00b9\u0000\u0a6d\u0a6e\u0005\u0180\u0000\u0000"+
		"\u0a6e\u0a6f\u0003\u0170\u00b8\u0000\u0a6f\u0a70\u0005\u018e\u0000\u0000"+
		"\u0a70\u0179\u0001\u0000\u0000\u0000\u0a71\u0a72\u0005\u015a\u0000\u0000"+
		"\u0a72\u0a73\u0005\u018c\u0000\u0000\u0a73\u0a74\u0003\u016e\u00b7\u0000"+
		"\u0a74\u0a75\u0005\u018e\u0000\u0000\u0a75\u017b\u0001\u0000\u0000\u0000"+
		"\u0a76\u0a78\u0007\u0014\u0000\u0000\u0a77\u0a79\u0007\u0015\u0000\u0000"+
		"\u0a78\u0a77\u0001\u0000\u0000\u0000\u0a78\u0a79\u0001\u0000\u0000\u0000"+
		"\u0a79\u017d\u0001\u0000\u0000\u0000\u0a7a\u0a7c\u0003\u0182\u00c1\u0000"+
		"\u0a7b\u0a7a\u0001\u0000\u0000\u0000\u0a7b\u0a7c\u0001\u0000\u0000\u0000"+
		"\u0a7c\u0a7d\u0001\u0000\u0000\u0000\u0a7d\u0a7e\u0003\u0180\u00c0\u0000"+
		"\u0a7e\u017f\u0001\u0000\u0000\u0000\u0a7f\u0a82\u0003\u0186\u00c3\u0000"+
		"\u0a80\u0a82\u0003\u018a\u00c5\u0000\u0a81\u0a7f\u0001\u0000\u0000\u0000"+
		"\u0a81\u0a80\u0001\u0000\u0000\u0000\u0a82\u0181\u0001\u0000\u0000\u0000"+
		"\u0a83\u0a84\u0005\u0177\u0000\u0000\u0a84\u0a89\u0003\u0184\u00c2\u0000"+
		"\u0a85\u0a86\u0005\u0180\u0000\u0000\u0a86\u0a88\u0003\u0184\u00c2\u0000"+
		"\u0a87\u0a85\u0001\u0000\u0000\u0000\u0a88\u0a8b\u0001\u0000\u0000\u0000"+
		"\u0a89\u0a87\u0001\u0000\u0000\u0000\u0a89\u0a8a\u0001\u0000\u0000\u0000"+
		"\u0a8a\u0183\u0001\u0000\u0000\u0000\u0a8b\u0a89\u0001\u0000\u0000\u0000"+
		"\u0a8c\u0a91\u0003\u0380\u01c0\u0000\u0a8d\u0a8e\u0005\u0182\u0000\u0000"+
		"\u0a8e\u0a8f\u0003\u0110\u0088\u0000\u0a8f\u0a90\u0005\u0183\u0000\u0000"+
		"\u0a90\u0a92\u0001\u0000\u0000\u0000\u0a91\u0a8d\u0001\u0000\u0000\u0000"+
		"\u0a91\u0a92\u0001\u0000\u0000\u0000\u0a92\u0a93\u0001\u0000\u0000\u0000"+
		"\u0a93\u0a94\u0005\u0011\u0000\u0000\u0a94\u0a95\u0005\u0182\u0000\u0000"+
		"\u0a95\u0a96\u0003\u017e\u00bf\u0000\u0a96\u0a97\u0005\u0183\u0000\u0000"+
		"\u0a97\u0185\u0001\u0000\u0000\u0000\u0a98\u0a9e\u0003\u0188\u00c4\u0000"+
		"\u0a99\u0a9a\u0003\u017c\u00be\u0000\u0a9a\u0a9b\u0003\u0188\u00c4\u0000"+
		"\u0a9b\u0a9d\u0001\u0000\u0000\u0000\u0a9c\u0a99\u0001\u0000\u0000\u0000"+
		"\u0a9d\u0aa0\u0001\u0000\u0000\u0000\u0a9e\u0a9c\u0001\u0000\u0000\u0000"+
		"\u0a9e\u0a9f\u0001\u0000\u0000\u0000\u0a9f\u0187\u0001\u0000\u0000\u0000"+
		"\u0aa0\u0a9e\u0001\u0000\u0000\u0000\u0aa1\u0aa3\u0003\u025e\u012f\u0000"+
		"\u0aa2\u0aa4\u0003\u0194\u00ca\u0000\u0aa3\u0aa2\u0001\u0000\u0000\u0000"+
		"\u0aa4\u0aa5\u0001\u0000\u0000\u0000\u0aa5\u0aa3\u0001\u0000\u0000\u0000"+
		"\u0aa5\u0aa6\u0001\u0000\u0000\u0000\u0aa6\u0189\u0001\u0000\u0000\u0000"+
		"\u0aa7\u0aa8\u0003\u0196\u00cb\u0000\u0aa8\u0aa9\u0003\u018e\u00c7\u0000"+
		"\u0aa9\u0aac\u0001\u0000\u0000\u0000\u0aaa\u0aac\u0003\u018e\u00c7\u0000"+
		"\u0aab\u0aa7\u0001\u0000\u0000\u0000\u0aab\u0aaa\u0001\u0000\u0000\u0000"+
		"\u0aac\u018b\u0001\u0000\u0000\u0000\u0aad\u0aaf\u0003\u029c\u014e\u0000"+
		"\u0aae\u0ab0\u0003\u025e\u012f\u0000\u0aaf\u0aae\u0001\u0000\u0000\u0000"+
		"\u0aaf\u0ab0\u0001\u0000\u0000\u0000\u0ab0\u0ab2\u0001\u0000\u0000\u0000"+
		"\u0ab1\u0ab3\u0003\u028c\u0146\u0000\u0ab2\u0ab1\u0001\u0000\u0000\u0000"+
		"\u0ab2\u0ab3\u0001\u0000\u0000\u0000\u0ab3\u0ab5\u0001\u0000\u0000\u0000"+
		"\u0ab4\u0ab6\u0003\u02bc\u015e\u0000\u0ab5\u0ab4\u0001\u0000\u0000\u0000"+
		"\u0ab5\u0ab6\u0001\u0000\u0000\u0000\u0ab6\u0ab8\u0001\u0000\u0000\u0000"+
		"\u0ab7\u0ab9\u0003\u02cc\u0166\u0000\u0ab8\u0ab7\u0001\u0000\u0000\u0000"+
		"\u0ab8\u0ab9\u0001\u0000\u0000\u0000\u0ab9\u0abb\u0001\u0000\u0000\u0000"+
		"\u0aba\u0abc\u0003\u02ac\u0156\u0000\u0abb\u0aba\u0001\u0000\u0000\u0000"+
		"\u0abb\u0abc\u0001\u0000\u0000\u0000\u0abc\u0abe\u0001\u0000\u0000\u0000"+
		"\u0abd\u0abf\u0003\u02ce\u0167\u0000\u0abe\u0abd\u0001\u0000\u0000\u0000"+
		"\u0abe\u0abf\u0001\u0000\u0000\u0000\u0abf\u0ac6\u0001\u0000\u0000\u0000"+
		"\u0ac0\u0ac1\u0005\u0182\u0000\u0000\u0ac1\u0ac2\u0003\u018e\u00c7\u0000"+
		"\u0ac2\u0ac3\u0005\u0183\u0000\u0000\u0ac3\u0ac6\u0001\u0000\u0000\u0000"+
		"\u0ac4\u0ac6\u0003\u0290\u0148\u0000\u0ac5\u0aad\u0001\u0000\u0000\u0000"+
		"\u0ac5\u0ac0\u0001\u0000\u0000\u0000\u0ac5\u0ac4\u0001\u0000\u0000\u0000"+
		"\u0ac6\u018d\u0001\u0000\u0000\u0000\u0ac7\u0ac9\u0003\u018c\u00c6\u0000"+
		"\u0ac8\u0aca\u0003\u0190\u00c8\u0000\u0ac9\u0ac8\u0001\u0000\u0000\u0000"+
		"\u0ac9\u0aca\u0001\u0000\u0000\u0000\u0aca\u0acc\u0001\u0000\u0000\u0000"+
		"\u0acb\u0acd\u0003\u02e4\u0172\u0000\u0acc\u0acb\u0001\u0000\u0000\u0000"+
		"\u0acc\u0acd\u0001\u0000\u0000\u0000\u0acd\u0acf\u0001\u0000\u0000\u0000"+
		"\u0ace\u0ad0\u0003\u02e6\u0173\u0000\u0acf\u0ace\u0001\u0000\u0000\u0000"+
		"\u0acf\u0ad0\u0001\u0000\u0000\u0000\u0ad0\u0ad2\u0001\u0000\u0000\u0000"+
		"\u0ad1\u0ad3\u0003\u02ea\u0175\u0000\u0ad2\u0ad1\u0001\u0000\u0000\u0000"+
		"\u0ad2\u0ad3\u0001\u0000\u0000\u0000\u0ad3\u0ad5\u0001\u0000\u0000\u0000"+
		"\u0ad4\u0ad6\u0003\u02ec\u0176\u0000\u0ad5\u0ad4\u0001\u0000\u0000\u0000"+
		"\u0ad5\u0ad6\u0001\u0000\u0000\u0000\u0ad6\u0ad8\u0001\u0000\u0000\u0000"+
		"\u0ad7\u0ad9\u0003\u019a\u00cd\u0000\u0ad8\u0ad7\u0001\u0000\u0000\u0000"+
		"\u0ad8\u0ad9\u0001\u0000\u0000\u0000\u0ad9\u018f\u0001\u0000\u0000\u0000"+
		"\u0ada\u0adb\u0003\u017c\u00be\u0000\u0adb\u0adc\u0003\u018c\u00c6\u0000"+
		"\u0adc\u0ade\u0001\u0000\u0000\u0000\u0add\u0ada\u0001\u0000\u0000\u0000"+
		"\u0ade\u0adf\u0001\u0000\u0000\u0000\u0adf\u0add\u0001\u0000\u0000\u0000"+
		"\u0adf\u0ae0\u0001\u0000\u0000\u0000\u0ae0\u0191\u0001\u0000\u0000\u0000"+
		"\u0ae1\u0ae3\u0003\u0182\u00c1\u0000\u0ae2\u0ae1\u0001\u0000\u0000\u0000"+
		"\u0ae2\u0ae3\u0001\u0000\u0000\u0000\u0ae3\u0ae4\u0001\u0000\u0000\u0000"+
		"\u0ae4\u0ae5\u0003\u018e\u00c7\u0000\u0ae5\u0193\u0001\u0000\u0000\u0000"+
		"\u0ae6\u0ae7\u0003\u0196\u00cb\u0000\u0ae7\u0ae9\u0003\u029c\u014e\u0000"+
		"\u0ae8\u0aea\u0003\u0270\u0138\u0000\u0ae9\u0ae8\u0001\u0000\u0000\u0000"+
		"\u0ae9\u0aea\u0001\u0000\u0000\u0000\u0aea\u0aec\u0001\u0000\u0000\u0000"+
		"\u0aeb\u0aed\u0003\u028c\u0146\u0000\u0aec\u0aeb\u0001\u0000\u0000\u0000"+
		"\u0aec\u0aed\u0001\u0000\u0000\u0000\u0aed\u0aef\u0001\u0000\u0000\u0000"+
		"\u0aee\u0af0\u0003\u02bc\u015e\u0000\u0aef\u0aee\u0001\u0000\u0000\u0000"+
		"\u0aef\u0af0\u0001\u0000\u0000\u0000\u0af0\u0af2\u0001\u0000\u0000\u0000"+
		"\u0af1\u0af3\u0003\u02cc\u0166\u0000\u0af2\u0af1\u0001\u0000\u0000\u0000"+
		"\u0af2\u0af3\u0001\u0000\u0000\u0000\u0af3\u0af5\u0001\u0000\u0000\u0000"+
		"\u0af4\u0af6\u0003\u02ac\u0156\u0000\u0af5\u0af4\u0001\u0000\u0000\u0000"+
		"\u0af5\u0af6\u0001\u0000\u0000\u0000\u0af6\u0af8\u0001\u0000\u0000\u0000"+
		"\u0af7\u0af9\u0003\u02ce\u0167\u0000\u0af8\u0af7\u0001\u0000\u0000\u0000"+
		"\u0af8\u0af9\u0001\u0000\u0000\u0000\u0af9\u0afb\u0001\u0000\u0000\u0000"+
		"\u0afa\u0afc\u0003\u02e4\u0172\u0000\u0afb\u0afa\u0001\u0000\u0000\u0000"+
		"\u0afb\u0afc\u0001\u0000\u0000\u0000\u0afc\u0afe\u0001\u0000\u0000\u0000"+
		"\u0afd\u0aff\u0003\u02e6\u0173\u0000\u0afe\u0afd\u0001\u0000\u0000\u0000"+
		"\u0afe\u0aff\u0001\u0000\u0000\u0000\u0aff\u0b01\u0001\u0000\u0000\u0000"+
		"\u0b00\u0b02\u0003\u02ea\u0175\u0000\u0b01\u0b00\u0001\u0000\u0000\u0000"+
		"\u0b01\u0b02\u0001\u0000\u0000\u0000\u0b02\u0b04\u0001\u0000\u0000\u0000"+
		"\u0b03\u0b05\u0003\u02ec\u0176\u0000\u0b04\u0b03\u0001\u0000\u0000\u0000"+
		"\u0b04\u0b05\u0001\u0000\u0000\u0000\u0b05\u0b07\u0001\u0000\u0000\u0000"+
		"\u0b06\u0b08\u0003\u019a\u00cd\u0000\u0b07\u0b06\u0001\u0000\u0000\u0000"+
		"\u0b07\u0b08\u0001\u0000\u0000\u0000\u0b08\u0b2c\u0001\u0000\u0000\u0000"+
		"\u0b09\u0b0b\u0003\u029c\u014e\u0000\u0b0a\u0b0c\u0003\u0270\u0138\u0000"+
		"\u0b0b\u0b0a\u0001\u0000\u0000\u0000\u0b0b\u0b0c\u0001\u0000\u0000\u0000"+
		"\u0b0c\u0b0e\u0001\u0000\u0000\u0000\u0b0d\u0b0f\u0003\u028c\u0146\u0000"+
		"\u0b0e\u0b0d\u0001\u0000\u0000\u0000\u0b0e\u0b0f\u0001\u0000\u0000\u0000"+
		"\u0b0f\u0b11\u0001\u0000\u0000\u0000\u0b10\u0b12\u0003\u02bc\u015e\u0000"+
		"\u0b11\u0b10\u0001\u0000\u0000\u0000\u0b11\u0b12\u0001\u0000\u0000\u0000"+
		"\u0b12\u0b14\u0001\u0000\u0000\u0000\u0b13\u0b15\u0003\u02cc\u0166\u0000"+
		"\u0b14\u0b13\u0001\u0000\u0000\u0000\u0b14\u0b15\u0001\u0000\u0000\u0000"+
		"\u0b15\u0b17\u0001\u0000\u0000\u0000\u0b16\u0b18\u0003\u02ac\u0156\u0000"+
		"\u0b17\u0b16\u0001\u0000\u0000\u0000\u0b17\u0b18\u0001\u0000\u0000\u0000"+
		"\u0b18\u0b1a\u0001\u0000\u0000\u0000\u0b19\u0b1b\u0003\u02ce\u0167\u0000"+
		"\u0b1a\u0b19\u0001\u0000\u0000\u0000\u0b1a\u0b1b\u0001\u0000\u0000\u0000"+
		"\u0b1b\u0b1d\u0001\u0000\u0000\u0000\u0b1c\u0b1e\u0003\u02e4\u0172\u0000"+
		"\u0b1d\u0b1c\u0001\u0000\u0000\u0000\u0b1d\u0b1e\u0001\u0000\u0000\u0000"+
		"\u0b1e\u0b20\u0001\u0000\u0000\u0000\u0b1f\u0b21\u0003\u02e6\u0173\u0000"+
		"\u0b20\u0b1f\u0001\u0000\u0000\u0000\u0b20\u0b21\u0001\u0000\u0000\u0000"+
		"\u0b21\u0b23\u0001\u0000\u0000\u0000\u0b22\u0b24\u0003\u02ea\u0175\u0000"+
		"\u0b23\u0b22\u0001\u0000\u0000\u0000\u0b23\u0b24\u0001\u0000\u0000\u0000"+
		"\u0b24\u0b26\u0001\u0000\u0000\u0000\u0b25\u0b27\u0003\u02ec\u0176\u0000"+
		"\u0b26\u0b25\u0001\u0000\u0000\u0000\u0b26\u0b27\u0001\u0000\u0000\u0000"+
		"\u0b27\u0b29\u0001\u0000\u0000\u0000\u0b28\u0b2a\u0003\u019a\u00cd\u0000"+
		"\u0b29\u0b28\u0001\u0000\u0000\u0000\u0b29\u0b2a\u0001\u0000\u0000\u0000"+
		"\u0b2a\u0b2c\u0001\u0000\u0000\u0000\u0b2b\u0ae6\u0001\u0000\u0000\u0000"+
		"\u0b2b\u0b09\u0001\u0000\u0000\u0000\u0b2c\u0195\u0001\u0000\u0000\u0000"+
		"\u0b2d\u0b3e\u0005\u009b\u0000\u0000\u0b2e\u0b2f\u0005\u00e1\u0000\u0000"+
		"\u0b2f\u0b31\u0003\u0198\u00cc\u0000\u0b30\u0b32\u0003(\u0014\u0000\u0b31"+
		"\u0b30\u0001\u0000\u0000\u0000\u0b31\u0b32\u0001\u0000\u0000\u0000\u0b32"+
		"\u0b3f\u0001\u0000\u0000\u0000\u0b33\u0b35\u0005\u009f\u0000\u0000\u0b34"+
		"\u0b36\u0005\u013e\u0000\u0000\u0b35\u0b34\u0001\u0000\u0000\u0000\u0b35"+
		"\u0b36\u0001\u0000\u0000\u0000\u0b36\u0b37\u0001\u0000\u0000\u0000\u0b37"+
		"\u0b3c\u0003\u036e\u01b7\u0000\u0b38\u0b39\u0005\u0182\u0000\u0000\u0b39"+
		"\u0b3a\u0003\u0110\u0088\u0000\u0b3a\u0b3b\u0005\u0183\u0000\u0000\u0b3b"+
		"\u0b3d\u0001\u0000\u0000\u0000\u0b3c\u0b38\u0001\u0000\u0000\u0000\u0b3c"+
		"\u0b3d\u0001\u0000\u0000\u0000\u0b3d\u0b3f\u0001\u0000\u0000\u0000\u0b3e"+
		"\u0b2e\u0001\u0000\u0000\u0000\u0b3e\u0b33\u0001\u0000\u0000\u0000\u0b3f"+
		"\u0197\u0001\u0000\u0000\u0000\u0b40\u0b42\u0005\u00b4\u0000\u0000\u0b41"+
		"\u0b40\u0001\u0000\u0000\u0000\u0b41\u0b42\u0001\u0000\u0000\u0000\u0b42"+
		"\u0b43\u0001\u0000\u0000\u0000\u0b43\u0b44\u0005Z\u0000\u0000\u0b44\u0b46"+
		"\u0005\u019c\u0000\u0000\u0b45\u0b47\u0003\u00f0x\u0000\u0b46\u0b45\u0001"+
		"\u0000\u0000\u0000\u0b46\u0b47\u0001\u0000\u0000\u0000\u0b47\u0b49\u0001"+
		"\u0000\u0000\u0000\u0b48\u0b4a\u0003\u0106\u0083\u0000\u0b49\u0b48\u0001"+
		"\u0000\u0000\u0000\u0b49\u0b4a\u0001\u0000\u0000\u0000\u0b4a\u0b4e\u0001"+
		"\u0000\u0000\u0000\u0b4b\u0b4c\u0005\u013e\u0000\u0000\u0b4c\u0b4e\u0003"+
		"\u036e\u01b7\u0000\u0b4d\u0b41\u0001\u0000\u0000\u0000\u0b4d\u0b4b\u0001"+
		"\u0000\u0000\u0000\u0b4e\u0199\u0001\u0000\u0000\u0000\u0b4f\u0b58\u0005"+
		"\u00b1\u0000\u0000\u0b50\u0b51\u0005\u01a1\u0000\u0000\u0b51\u0b53\u0005"+
		"\u0180\u0000\u0000\u0b52\u0b50\u0001\u0000\u0000\u0000\u0b52\u0b53\u0001"+
		"\u0000\u0000\u0000\u0b53\u0b54\u0001\u0000\u0000\u0000\u0b54\u0b59\u0005"+
		"\u01a1\u0000\u0000\u0b55\u0b56\u0005\u01a1\u0000\u0000\u0b56\u0b57\u0005"+
		"\u00d5\u0000\u0000\u0b57\u0b59\u0005\u01a1\u0000\u0000\u0b58\u0b52\u0001"+
		"\u0000\u0000\u0000\u0b58\u0b55\u0001\u0000\u0000\u0000\u0b59\u019b\u0001"+
		"\u0000\u0000\u0000\u0b5a\u0b5b\u0005S\u0000\u0000\u0b5b\u0b5c\u0005\u0086"+
		"\u0000\u0000\u0b5c\u0b5e\u0003\u0280\u0140\u0000\u0b5d\u0b5f\u0003\u028c"+
		"\u0146\u0000\u0b5e\u0b5d\u0001\u0000\u0000\u0000\u0b5e\u0b5f\u0001\u0000"+
		"\u0000\u0000\u0b5f\u019d\u0001\u0000\u0000\u0000\u0b60\u0b61\u0003\u0256"+
		"\u012b\u0000\u0b61\u0b62\u0005\u0188\u0000\u0000\u0b62\u0b63\u0003\u01a0"+
		"\u00d0\u0000\u0b63\u019f\u0001\u0000\u0000\u0000\u0b64\u0b67\u0003\u0258"+
		"\u012c\u0000\u0b65\u0b67\u0003\u0330\u0198\u0000\u0b66\u0b64\u0001\u0000"+
		"\u0000\u0000\u0b66\u0b65\u0001\u0000\u0000\u0000\u0b67\u01a1\u0001\u0000"+
		"\u0000\u0000\u0b68\u0b69\u0005\u0125\u0000\u0000\u0b69\u0b6e\u0003\u019e"+
		"\u00cf\u0000\u0b6a\u0b6b\u0005\u0180\u0000\u0000\u0b6b\u0b6d\u0003\u019e"+
		"\u00cf\u0000\u0b6c\u0b6a\u0001\u0000\u0000\u0000\u0b6d\u0b70\u0001\u0000"+
		"\u0000\u0000\u0b6e\u0b6c\u0001\u0000\u0000\u0000\u0b6e\u0b6f\u0001\u0000"+
		"\u0000\u0000\u0b6f\u01a3\u0001\u0000\u0000\u0000\u0b70\u0b6e\u0001\u0000"+
		"\u0000\u0000\u0b71\u0b72\u0005\u0162\u0000\u0000\u0b72\u0b73\u0003\u0280"+
		"\u0140\u0000\u0b73\u0b75\u0003\u01a2\u00d1\u0000\u0b74\u0b76\u0003\u028c"+
		"\u0146\u0000\u0b75\u0b74\u0001\u0000\u0000\u0000\u0b75\u0b76\u0001\u0000"+
		"\u0000\u0000\u0b76\u01a5\u0001\u0000\u0000\u0000\u0b77\u0b7c\u0003\u01a8"+
		"\u00d4\u0000\u0b78\u0b7c\u0003\u01b2\u00d9\u0000\u0b79\u0b7c\u0003\u01b4"+
		"\u00da\u0000\u0b7a\u0b7c\u0003\u01b6\u00db\u0000\u0b7b\u0b77\u0001\u0000"+
		"\u0000\u0000\u0b7b\u0b78\u0001\u0000\u0000\u0000\u0b7b\u0b79\u0001\u0000"+
		"\u0000\u0000\u0b7b\u0b7a\u0001\u0000\u0000\u0000\u0b7c\u01a7\u0001\u0000"+
		"\u0000\u0000\u0b7d\u0b7e\u0005\u0133\u0000\u0000\u0b7e\u0b87\u0005\u014d"+
		"\u0000\u0000\u0b7f\u0b84\u0003\u01aa\u00d5\u0000\u0b80\u0b81\u0005\u0180"+
		"\u0000\u0000\u0b81\u0b83\u0003\u01aa\u00d5\u0000\u0b82\u0b80\u0001\u0000"+
		"\u0000\u0000\u0b83\u0b86\u0001\u0000\u0000\u0000\u0b84\u0b82\u0001\u0000"+
		"\u0000\u0000\u0b84\u0b85\u0001\u0000\u0000\u0000\u0b85\u0b88\u0001\u0000"+
		"\u0000\u0000\u0b86\u0b84\u0001\u0000\u0000\u0000\u0b87\u0b7f\u0001\u0000"+
		"\u0000\u0000\u0b87\u0b88\u0001\u0000\u0000\u0000\u0b88\u01a9\u0001\u0000"+
		"\u0000\u0000\u0b89\u0b8c\u0003\u01ae\u00d7\u0000\u0b8a\u0b8c\u0003\u01ac"+
		"\u00d6\u0000\u0b8b\u0b89\u0001\u0000\u0000\u0000\u0b8b\u0b8a\u0001\u0000"+
		"\u0000\u0000\u0b8c\u01ab\u0001\u0000\u0000\u0000\u0b8d\u0b8e\u0005\u00fb"+
		"\u0000\u0000\u0b8e\u0b8f\u0007\u0016\u0000\u0000\u0b8f\u01ad\u0001\u0000"+
		"\u0000\u0000\u0b90\u0b91\u0005\u00a1\u0000\u0000\u0b91\u0b92\u0005\u00af"+
		"\u0000\u0000\u0b92\u0b93\u0003\u01b0\u00d8\u0000\u0b93\u01af\u0001\u0000"+
		"\u0000\u0000\u0b94\u0b95\u0005\u012d\u0000\u0000\u0b95\u01b1\u0001\u0000"+
		"\u0000\u0000\u0b96\u0b98\u00050\u0000\u0000\u0b97\u0b99\u0005\u0179\u0000"+
		"\u0000\u0b98\u0b97\u0001\u0000\u0000\u0000\u0b98\u0b99\u0001\u0000\u0000"+
		"\u0000\u0b99\u01b3\u0001\u0000\u0000\u0000\u0b9a\u0b9c\u0005\u0117\u0000"+
		"\u0000\u0b9b\u0b9d\u0005\u0179\u0000\u0000\u0b9c\u0b9b\u0001\u0000\u0000"+
		"\u0000\u0b9c\u0b9d\u0001\u0000\u0000\u0000\u0b9d\u01b5\u0001\u0000\u0000"+
		"\u0000\u0b9e\u0b9f\u0005\u0125\u0000\u0000\u0b9f\u0ba0\u0005\u0016\u0000"+
		"\u0000\u0ba0\u0ba1\u0003\u036c\u01b6\u0000\u0ba1\u01b7\u0001\u0000\u0000"+
		"\u0000\u0ba2\u0ba3\u0005\u0001\u0000\u0000\u0ba3\u0ba5\u0005\u014f\u0000"+
		"\u0000\u0ba4\u0ba6\u0005\u01a1\u0000\u0000\u0ba5\u0ba4\u0001\u0000\u0000"+
		"\u0000\u0ba6\u0ba7\u0001\u0000\u0000\u0000\u0ba7\u0ba5\u0001\u0000\u0000"+
		"\u0000\u0ba7\u0ba8\u0001\u0000\u0000\u0000\u0ba8\u01b9\u0001\u0000\u0000"+
		"\u0000\u0ba9\u0baa\u0005\u0001\u0000\u0000\u0baa\u0bac\u00052\u0000\u0000"+
		"\u0bab\u0bad\u0005\u01a1\u0000\u0000\u0bac\u0bab\u0001\u0000\u0000\u0000"+
		"\u0bad\u0bae\u0001\u0000\u0000\u0000\u0bae\u0bac\u0001\u0000\u0000\u0000"+
		"\u0bae\u0baf\u0001\u0000\u0000\u0000\u0baf\u01bb\u0001\u0000\u0000\u0000"+
		"\u0bb0\u0bb2\u0005\u00c3\u0000\u0000\u0bb1\u0bb3\u0005\u01a6\u0000\u0000"+
		"\u0bb2\u0bb1\u0001\u0000\u0000\u0000\u0bb2\u0bb3\u0001\u0000\u0000\u0000"+
		"\u0bb3\u0bb4\u0001\u0000\u0000\u0000\u0bb4\u0bb5\u0005\u009f\u0000\u0000"+
		"\u0bb5\u0bba\u0003\u0280\u0140\u0000\u0bb6\u0bb8\u0005\u0011\u0000\u0000"+
		"\u0bb7\u0bb6\u0001\u0000\u0000\u0000\u0bb7\u0bb8\u0001\u0000\u0000\u0000"+
		"\u0bb8\u0bb9\u0001\u0000\u0000\u0000\u0bb9\u0bbb\u0003\u0380\u01c0\u0000"+
		"\u0bba\u0bb7\u0001\u0000\u0000\u0000\u0bba\u0bbb\u0001\u0000\u0000\u0000"+
		"\u0bbb\u0bbc\u0001\u0000\u0000\u0000\u0bbc\u0bbd\u0005\u0167\u0000\u0000"+
		"\u0bbd\u0bbe\u0003\u0266\u0133\u0000\u0bbe\u0bbf\u0005\u00d6\u0000\u0000"+
		"\u0bbf\u0bc0\u0003\u031c\u018e\u0000\u0bc0\u0bc1\u0003\u01be\u00df\u0000"+
		"\u0bc1\u01bd\u0001\u0000\u0000\u0000\u0bc2\u0bc5\u0003\u01c2\u00e1\u0000"+
		"\u0bc3\u0bc5\u0003\u01c4\u00e2\u0000\u0bc4\u0bc2\u0001\u0000\u0000\u0000"+
		"\u0bc4\u0bc3\u0001\u0000\u0000\u0000\u0bc5\u0bc8\u0001\u0000\u0000\u0000"+
		"\u0bc6\u0bc4\u0001\u0000\u0000\u0000\u0bc6\u0bc7\u0001\u0000\u0000\u0000"+
		"\u0bc7\u0bca\u0001\u0000\u0000\u0000\u0bc8\u0bc6\u0001\u0000\u0000\u0000"+
		"\u0bc9\u0bcb\u0003\u01c0\u00e0\u0000\u0bca\u0bc9\u0001\u0000\u0000\u0000"+
		"\u0bca\u0bcb\u0001\u0000\u0000\u0000\u0bcb\u01bf\u0001\u0000\u0000\u0000"+
		"\u0bcc\u0bcd\u0005\u0173\u0000\u0000\u0bcd\u0bce\u0005\u00ce\u0000\u0000"+
		"\u0bce\u0bd1\u0005\u00c1\u0000\u0000\u0bcf\u0bd0\u0005\u000b\u0000\u0000"+
		"\u0bd0\u0bd2\u0003\u031c\u018e\u0000\u0bd1\u0bcf\u0001\u0000\u0000\u0000"+
		"\u0bd1\u0bd2\u0001\u0000\u0000\u0000\u0bd2\u0bd3\u0001\u0000\u0000\u0000"+
		"\u0bd3\u0bd4\u0005\u0144\u0000\u0000\u0bd4\u0bd6\u0005\u009b\u0000\u0000"+
		"\u0bd5\u0bd7\u0003\u0118\u008c\u0000\u0bd6\u0bd5\u0001\u0000\u0000\u0000"+
		"\u0bd6\u0bd7\u0001\u0000\u0000\u0000\u0bd7\u0bd8\u0001\u0000\u0000\u0000"+
		"\u0bd8\u0bd9\u0005\u016b\u0000\u0000\u0bd9\u0bda\u0003\u0296\u014b\u0000"+
		"\u0bda\u01c1\u0001\u0000\u0000\u0000\u0bdb\u0bdc\u0005\u0173\u0000\u0000"+
		"\u0bdc\u0bdd\u0005\u00c1\u0000\u0000\u0bdd\u0bde\u0005\u000b\u0000\u0000"+
		"\u0bde\u0bdf\u0003\u031c\u018e\u0000\u0bdf\u0be0\u0005\u0144\u0000\u0000"+
		"\u0be0\u0be1\u0003\u01c6\u00e3\u0000\u0be1\u01c3\u0001\u0000\u0000\u0000"+
		"\u0be2\u0be3\u0005\u0173\u0000\u0000\u0be3\u0be4\u0005\u00c1\u0000\u0000"+
		"\u0be4\u0be5\u0005\u0144\u0000\u0000\u0be5\u0be6\u0003\u01c6\u00e3\u0000"+
		"\u0be6\u01c5\u0001\u0000\u0000\u0000\u0be7\u0be8\u0005\u0162\u0000\u0000"+
		"\u0be8\u0beb\u0003\u01a2\u00d1\u0000\u0be9\u0beb\u0005S\u0000\u0000\u0bea"+
		"\u0be7\u0001\u0000\u0000\u0000\u0bea\u0be9\u0001\u0000\u0000\u0000\u0beb"+
		"\u01c7\u0001\u0000\u0000\u0000\u0bec\u0bed\u0005\u00a9\u0000\u0000\u0bed"+
		"\u0bef\u0005\u00f8\u0000\u0000\u0bee\u0bf0\u0005\u019c\u0000\u0000\u0bef"+
		"\u0bee\u0001\u0000\u0000\u0000\u0bf0\u0bf1\u0001\u0000\u0000\u0000\u0bf1"+
		"\u0bef\u0001\u0000\u0000\u0000\u0bf1\u0bf2\u0001\u0000\u0000\u0000\u0bf2"+
		"\u01c9\u0001\u0000\u0000\u0000\u0bf3\u0bf4\u00053\u0000\u0000\u0bf4\u0bf5"+
		"\u0005\u0188\u0000\u0000\u0bf5\u0bf6\u0005\u01a1\u0000\u0000\u0bf6\u01cb"+
		"\u0001\u0000\u0000\u0000\u0bf7\u0bf8\u0005\u00ec\u0000\u0000\u0bf8\u0bf9"+
		"\u0005\u019c\u0000\u0000\u0bf9\u01cd\u0001\u0000\u0000\u0000\u0bfa\u0bfb"+
		"\u0005\u0155\u0000\u0000\u0bfb\u0bfc\u0005\u019c\u0000\u0000\u0bfc\u01cf"+
		"\u0001\u0000\u0000\u0000\u0bfd\u0bfe\u0005\u0135\u0000\u0000\u0bfe\u0bff"+
		"\u0005\u019c\u0000\u0000\u0bff\u01d1\u0001\u0000\u0000\u0000\u0c00\u0c16"+
		"\u0005\t\u0000\u0000\u0c01\u0c02\u0005\u013e\u0000\u0000\u0c02\u0c03\u0003"+
		"\u0280\u0140\u0000\u0c03\u0c04\u0003\u01d4\u00ea\u0000\u0c04\u0c17\u0001"+
		"\u0000\u0000\u0000\u0c05\u0c06\u0005\u016f\u0000\u0000\u0c06\u0c08\u0003"+
		"\u0280\u0140\u0000\u0c07\u0c09\u0005\u0011\u0000\u0000\u0c08\u0c07\u0001"+
		"\u0000\u0000\u0000\u0c08\u0c09\u0001\u0000\u0000\u0000\u0c09\u0c0a\u0001"+
		"\u0000\u0000\u0000\u0c0a\u0c0b\u0003\u01da\u00ed\u0000\u0c0b\u0c17\u0001"+
		"\u0000\u0000\u0000\u0c0c\u0c0d\u0005\u00c2\u0000\u0000\u0c0d\u0c0e\u0005"+
		"\u016f\u0000\u0000\u0c0e\u0c0f\u0003\u0280\u0140\u0000\u0c0f\u0c10\u0003"+
		"\u01dc\u00ee\u0000\u0c10\u0c17\u0001\u0000\u0000\u0000\u0c11\u0c12\u0003"+
		"X,\u0000\u0c12\u0c13\u0003\u01e2\u00f1\u0000\u0c13\u0c17\u0001\u0000\u0000"+
		"\u0000\u0c14\u0c15\u0005E\u0000\u0000\u0c15\u0c17\u0003\u023c\u011e\u0000"+
		"\u0c16\u0c01\u0001\u0000\u0000\u0000\u0c16\u0c05\u0001\u0000\u0000\u0000"+
		"\u0c16\u0c0c\u0001\u0000\u0000\u0000\u0c16\u0c11\u0001\u0000\u0000\u0000"+
		"\u0c16\u0c14\u0001\u0000\u0000\u0000\u0c17\u01d3\u0001\u0000\u0000\u0000"+
		"\u0c18\u0c2c\u0003\u01ec\u00f6\u0000\u0c19\u0c2c\u0003\u020a\u0105\u0000"+
		"\u0c1a\u0c2c\u0003\u01fe\u00ff\u0000\u0c1b\u0c2c\u0003\u0202\u0101\u0000"+
		"\u0c1c\u0c2c\u0003\u0204\u0102\u0000\u0c1d\u0c2c\u0003\u0206\u0103\u0000"+
		"\u0c1e\u0c2c\u0003\u020c\u0106\u0000\u0c1f\u0c2c\u0003\u0222\u0111\u0000"+
		"\u0c20\u0c2c\u0003\u0224\u0112\u0000\u0c21\u0c2c\u0003\u01d8\u00ec\u0000"+
		"\u0c22\u0c2c\u0003\u01f4\u00fa\u0000\u0c23\u0c2c\u0003\u01f0\u00f8\u0000"+
		"\u0c24\u0c2c\u0003\u01d6\u00eb\u0000\u0c25\u0c26\u0003\u0370\u01b8\u0000"+
		"\u0c26\u0c27\u0003\u01d6\u00eb\u0000\u0c27\u0c2c\u0001\u0000\u0000\u0000"+
		"\u0c28\u0c2c\u0003\u0234\u011a\u0000\u0c29\u0c2c\u0003\u0236\u011b\u0000"+
		"\u0c2a\u0c2c\u0003\u0238\u011c\u0000\u0c2b\u0c18\u0001\u0000\u0000\u0000"+
		"\u0c2b\u0c19\u0001\u0000\u0000\u0000\u0c2b\u0c1a\u0001\u0000\u0000\u0000"+
		"\u0c2b\u0c1b\u0001\u0000\u0000\u0000\u0c2b\u0c1c\u0001\u0000\u0000\u0000"+
		"\u0c2b\u0c1d\u0001\u0000\u0000\u0000\u0c2b\u0c1e\u0001\u0000\u0000\u0000"+
		"\u0c2b\u0c1f\u0001\u0000\u0000\u0000\u0c2b\u0c20\u0001\u0000\u0000\u0000"+
		"\u0c2b\u0c21\u0001\u0000\u0000\u0000\u0c2b\u0c22\u0001\u0000\u0000\u0000"+
		"\u0c2b\u0c23\u0001\u0000\u0000\u0000\u0c2b\u0c24\u0001\u0000\u0000\u0000"+
		"\u0c2b\u0c25\u0001\u0000\u0000\u0000\u0c2b\u0c28\u0001\u0000\u0000\u0000"+
		"\u0c2b\u0c29\u0001\u0000\u0000\u0000\u0c2b\u0c2a\u0001\u0000\u0000\u0000"+
		"\u0c2c\u01d5\u0001\u0000\u0000\u0000\u0c2d\u0c3c\u0003\u0214\u010a\u0000"+
		"\u0c2e\u0c3c\u0003\u0220\u0110\u0000\u0c2f\u0c3c\u0003\u022a\u0115\u0000"+
		"\u0c30\u0c3c\u0003\u0210\u0108\u0000\u0c31\u0c3c\u0003\u0226\u0113\u0000"+
		"\u0c32\u0c3c\u0003\u022c\u0116\u0000\u0c33\u0c3c\u0003\u0218\u010c\u0000"+
		"\u0c34\u0c3c\u0003\u0216\u010b\u0000\u0c35\u0c3c\u0003\u0232\u0119\u0000"+
		"\u0c36\u0c3c\u0003\u01f8\u00fc\u0000\u0c37\u0c3c\u0003\u01fa\u00fd\u0000"+
		"\u0c38\u0c3c\u0003\u01f6\u00fb\u0000\u0c39\u0c3c\u0003\u01ee\u00f7\u0000"+
		"\u0c3a\u0c3c\u0003\u01f2\u00f9\u0000\u0c3b\u0c2d\u0001\u0000\u0000\u0000"+
		"\u0c3b\u0c2e\u0001\u0000\u0000\u0000\u0c3b\u0c2f\u0001\u0000\u0000\u0000"+
		"\u0c3b\u0c30\u0001\u0000\u0000\u0000\u0c3b\u0c31\u0001\u0000\u0000\u0000"+
		"\u0c3b\u0c32\u0001\u0000\u0000\u0000\u0c3b\u0c33\u0001\u0000\u0000\u0000"+
		"\u0c3b\u0c34\u0001\u0000\u0000\u0000\u0c3b\u0c35\u0001\u0000\u0000\u0000"+
		"\u0c3b\u0c36\u0001\u0000\u0000\u0000\u0c3b\u0c37\u0001\u0000\u0000\u0000"+
		"\u0c3b\u0c38\u0001\u0000\u0000\u0000\u0c3b\u0c39\u0001\u0000\u0000\u0000"+
		"\u0c3b\u0c3a\u0001\u0000\u0000\u0000\u0c3c\u01d7\u0001\u0000\u0000\u0000"+
		"\u0c3d\u0c3e\u0005\u00e3\u0000\u0000\u0c3e\u0c3f\u0005-\u0000\u0000\u0c3f"+
		"\u0c40\u0005\u0182\u0000\u0000\u0c40\u0c41\u0003\u014c\u00a6\u0000\u0c41"+
		"\u0c42\u0005\u0183\u0000\u0000\u0c42\u01d9\u0001\u0000\u0000\u0000\u0c43"+
		"\u0c49\u0003\u020e\u0107\u0000\u0c44\u0c49\u0003\u01ec\u00f6\u0000\u0c45"+
		"\u0c49\u0003\u01fe\u00ff\u0000\u0c46\u0c49\u0003\u020a\u0105\u0000\u0c47"+
		"\u0c49\u0003\u0192\u00c9\u0000\u0c48\u0c43\u0001\u0000\u0000\u0000\u0c48"+
		"\u0c44\u0001\u0000\u0000\u0000\u0c48\u0c45\u0001\u0000\u0000\u0000\u0c48"+
		"\u0c46\u0001\u0000\u0000\u0000\u0c48\u0c47\u0001\u0000\u0000\u0000\u0c49"+
		"\u01db\u0001\u0000\u0000\u0000\u0c4a\u0c4d\u0003\u01de\u00ef\u0000\u0c4b"+
		"\u0c4d\u0003\u01e0\u00f0\u0000\u0c4c\u0c4a\u0001\u0000\u0000\u0000\u0c4c"+
		"\u0c4b\u0001\u0000\u0000\u0000\u0c4d\u01dd\u0001\u0000\u0000\u0000\u0c4e"+
		"\u0c51\u0003,\u0016\u0000\u0c4f\u0c51\u0003.\u0017\u0000\u0c50\u0c4e\u0001"+
		"\u0000\u0000\u0000\u0c50\u0c4f\u0001\u0000\u0000\u0000\u0c51\u01df\u0001"+
		"\u0000\u0000\u0000\u0c52\u0c53\u0005\u00ff\u0000\u0000\u0c53\u01e1\u0001"+
		"\u0000\u0000\u0000\u0c54\u0c58\u0003\u01e4\u00f2\u0000\u0c55\u0c58\u0003"+
		"\u01e6\u00f3\u0000\u0c56\u0c58\u0003\u01e8\u00f4\u0000\u0c57\u0c54\u0001"+
		"\u0000\u0000\u0000\u0c57\u0c55\u0001\u0000\u0000\u0000\u0c57\u0c56\u0001"+
		"\u0000\u0000\u0000\u0c58\u01e3\u0001\u0000\u0000\u0000\u0c59\u0c5a\u0003"+
		"\u0380\u01c0\u0000\u0c5a\u0c5b\u0005\u0125\u0000\u0000\u0c5b\u0c5c\u0005"+
		"K\u0000\u0000\u0c5c\u0c5d\u0003:\u001d\u0000\u0c5d\u01e5\u0001\u0000\u0000"+
		"\u0000\u0c5e\u0c5f\u0003\u0380\u01c0\u0000\u0c5f\u0c60\u0005\u0125\u0000"+
		"\u0000\u0c60\u0c61\u0005\u00e2\u0000\u0000\u0c61\u0c62\u0003\u0090H\u0000"+
		"\u0c62\u01e7\u0001\u0000\u0000\u0000\u0c63\u0c64\u0003\u0380\u01c0\u0000"+
		"\u0c64\u0c65\u0005\u0125\u0000\u0000\u0c65\u0c66\u0007\u0017\u0000\u0000"+
		"\u0c66\u0c67\u0005\u019c\u0000\u0000\u0c67\u01e9\u0001\u0000\u0000\u0000"+
		"\u0c68\u0c69\u0003\u0380\u01c0\u0000\u0c69\u0c6a\u0005\u0125\u0000\u0000"+
		"\u0c6a\u0c6b\u0005\u00bc\u0000\u0000\u0c6b\u0c6c\u0005\u019c\u0000\u0000"+
		"\u0c6c\u01eb\u0001\u0000\u0000\u0000\u0c6d\u0c6e\u0005\u0108\u0000\u0000"+
		"\u0c6e\u0c6f\u0005\u014a\u0000\u0000\u0c6f\u0c70\u0003\u0280\u0140\u0000"+
		"\u0c70\u01ed\u0001\u0000\u0000\u0000\u0c71\u0c74\u0005\u0004\u0000\u0000"+
		"\u0c72\u0c74\u0005\u010c\u0000\u0000\u0c73\u0c71\u0001\u0000\u0000\u0000"+
		"\u0c73\u0c72\u0001\u0000\u0000\u0000\u0c74\u0c75\u0001\u0000\u0000\u0000"+
		"\u0c75\u0c76\u0005.\u0000\u0000\u0c76\u0c77\u0005\u0182\u0000\u0000\u0c77"+
		"\u0c78\u0003\u010a\u0085\u0000\u0c78\u0c7a\u0005\u0183\u0000\u0000\u0c79"+
		"\u0c7b\u0003&\u0013\u0000\u0c7a\u0c79\u0001\u0000\u0000\u0000\u0c7a\u0c7b"+
		"\u0001\u0000\u0000\u0000\u0c7b\u01ef\u0001\u0000\u0000\u0000\u0c7c\u0c7f"+
		"\u0005\u0004\u0000\u0000\u0c7d\u0c80\u0003\u0130\u0098\u0000\u0c7e\u0c80"+
		"\u0003\u0126\u0093\u0000\u0c7f\u0c7d\u0001\u0000\u0000\u0000\u0c7f\u0c7e"+
		"\u0001\u0000\u0000\u0000\u0c80\u01f1\u0001\u0000\u0000\u0000\u0c81\u0c82"+
		"\u0005\u0162\u0000\u0000\u0c82\u0c84\u0005.\u0000\u0000\u0c83\u0c85\u0003"+
		"&\u0013\u0000\u0c84\u0c83\u0001\u0000\u0000\u0000\u0c84\u0c85\u0001\u0000"+
		"\u0000\u0000\u0c85\u01f3\u0001\u0000\u0000\u0000\u0c86\u0c87\u0005b\u0000"+
		"\u0000\u0c87\u0c88\u00057\u0000\u0000\u0c88\u0c89\u0003\u0380\u01c0\u0000"+
		"\u0c89\u01f5\u0001\u0000\u0000\u0000\u0c8a\u0c8c\u0005&\u0000\u0000\u0c8b"+
		"\u0c8d\u0005-\u0000\u0000\u0c8c\u0c8b\u0001\u0000\u0000\u0000\u0c8c\u0c8d"+
		"\u0001\u0000\u0000\u0000\u0c8d\u0c8e\u0001\u0000\u0000\u0000\u0c8e\u0c8f"+
		"\u0003\u0380\u01c0\u0000\u0c8f\u0c90\u0003\u0380\u01c0\u0000\u0c90\u0c92"+
		"\u0003\u016c\u00b6\u0000\u0c91\u0c93\u0003\u015a\u00ad\u0000\u0c92\u0c91"+
		"\u0001\u0000\u0000\u0000\u0c92\u0c93\u0001\u0000\u0000\u0000\u0c93\u0c96"+
		"\u0001\u0000\u0000\u0000\u0c94\u0c95\u0005/\u0000\u0000\u0c95\u0c97\u0005"+
		"\u019c\u0000\u0000\u0c96\u0c94\u0001\u0000\u0000\u0000\u0c96\u0c97\u0001"+
		"\u0000\u0000\u0000\u0c97\u0c99\u0001\u0000\u0000\u0000\u0c98\u0c9a\u0003"+
		"\u01fc\u00fe\u0000\u0c99\u0c98\u0001\u0000\u0000\u0000\u0c99\u0c9a\u0001"+
		"\u0000\u0000\u0000\u0c9a\u0c9c\u0001\u0000\u0000\u0000\u0c9b\u0c9d\u0003"+
		"&\u0013\u0000\u0c9c\u0c9b\u0001\u0000\u0000\u0000\u0c9c\u0c9d\u0001\u0000"+
		"\u0000\u0000\u0c9d\u01f7\u0001\u0000\u0000\u0000\u0c9e\u0c9f\u0005\u0162"+
		"\u0000\u0000\u0c9f\u0ca0\u0005\u0134\u0000\u0000\u0ca0\u0ca2\u0005\u0081"+
		"\u0000\u0000\u0ca1\u0ca3\u0005-\u0000\u0000\u0ca2\u0ca1\u0001\u0000\u0000"+
		"\u0000\u0ca2\u0ca3\u0001\u0000\u0000\u0000\u0ca3\u0ca4\u0001\u0000\u0000"+
		"\u0000\u0ca4\u0ca5\u0003\u0380\u01c0\u0000\u0ca5\u0ca6\u0005\u0125\u0000"+
		"\u0000\u0ca6\u0ca9\u0003\u00f4z\u0000\u0ca7\u0ca8\u0005/\u0000\u0000\u0ca8"+
		"\u0caa\u0005\u019c\u0000\u0000\u0ca9\u0ca7\u0001\u0000\u0000\u0000\u0ca9"+
		"\u0caa\u0001\u0000\u0000\u0000\u0caa\u01f9\u0001\u0000\u0000\u0000\u0cab"+
		"\u0cac\u0005\u0162\u0000\u0000\u0cac\u0cad\u0005\u0134\u0000\u0000\u0cad"+
		"\u0cae\u0005\u0125\u0000\u0000\u0cae\u0caf\u0003\u00f4z\u0000\u0caf\u01fb"+
		"\u0001\u0000\u0000\u0000\u0cb0\u0cb4\u0005}\u0000\u0000\u0cb1\u0cb2\u0005"+
		"\u0006\u0000\u0000\u0cb2\u0cb4\u0003\u0380\u01c0\u0000\u0cb3\u0cb0\u0001"+
		"\u0000\u0000\u0000\u0cb3\u0cb1\u0001\u0000\u0000\u0000\u0cb4\u01fd\u0001"+
		"\u0000\u0000\u0000\u0cb5\u0cb7\u0005\u0004\u0000\u0000\u0cb6\u0cb8\u0003"+
		"(\u0014\u0000\u0cb7\u0cb6\u0001\u0000\u0000\u0000\u0cb7\u0cb8\u0001\u0000"+
		"\u0000\u0000\u0cb8\u0cba\u0001\u0000\u0000\u0000\u0cb9\u0cbb\u0003\u0200"+
		"\u0100\u0000\u0cba\u0cb9\u0001\u0000\u0000\u0000\u0cbb\u0cbc\u0001\u0000"+
		"\u0000\u0000\u0cbc\u0cba\u0001\u0000\u0000\u0000\u0cbc\u0cbd\u0001\u0000"+
		"\u0000\u0000\u0cbd\u01ff\u0001\u0000\u0000\u0000\u0cbe\u0cc0\u0003\u0370"+
		"\u01b8\u0000\u0cbf\u0cc1\u0003\u0208\u0104\u0000\u0cc0\u0cbf\u0001\u0000"+
		"\u0000\u0000\u0cc0\u0cc1\u0001\u0000\u0000\u0000\u0cc1\u0201\u0001\u0000"+
		"\u0000\u0000\u0cc2\u0cc6\u0005\u014b\u0000\u0000\u0cc3\u0cc5\u0003\u0370"+
		"\u01b8\u0000\u0cc4\u0cc3\u0001\u0000\u0000\u0000\u0cc5\u0cc8\u0001\u0000"+
		"\u0000\u0000\u0cc6\u0cc4\u0001\u0000\u0000\u0000\u0cc6\u0cc7\u0001\u0000"+
		"\u0000\u0000\u0cc7\u0203\u0001\u0000\u0000\u0000\u0cc8\u0cc6\u0001\u0000"+
		"\u0000\u0000\u0cc9\u0ccd\u0005\u000f\u0000\u0000\u0cca\u0ccc\u0003\u0370"+
		"\u01b8\u0000\u0ccb\u0cca\u0001\u0000\u0000\u0000\u0ccc\u0ccf\u0001\u0000"+
		"\u0000\u0000\u0ccd\u0ccb\u0001\u0000\u0000\u0000\u0ccd\u0cce\u0001\u0000"+
		"\u0000\u0000\u0cce\u0205\u0001\u0000\u0000\u0000\u0ccf\u0ccd\u0001\u0000"+
		"\u0000\u0000\u0cd0\u0cd4\u0005\u0156\u0000\u0000\u0cd1\u0cd3\u0003\u0370"+
		"\u01b8\u0000\u0cd2\u0cd1\u0001\u0000\u0000\u0000\u0cd3\u0cd6\u0001\u0000"+
		"\u0000\u0000\u0cd4\u0cd2\u0001\u0000\u0000\u0000\u0cd4\u0cd5\u0001\u0000"+
		"\u0000\u0000\u0cd5\u0207\u0001\u0000\u0000\u0000\u0cd6\u0cd4\u0001\u0000"+
		"\u0000\u0000\u0cd7\u0cd8\u0005\u00b5\u0000\u0000\u0cd8\u0cd9\u0005\u019c"+
		"\u0000\u0000\u0cd9\u0209\u0001\u0000\u0000\u0000\u0cda\u0cdc\u0005b\u0000"+
		"\u0000\u0cdb\u0cdd\u0003$\u0012\u0000\u0cdc\u0cdb\u0001\u0000\u0000\u0000"+
		"\u0cdc\u0cdd\u0001\u0000\u0000\u0000\u0cdd\u0cde\u0001\u0000\u0000\u0000"+
		"\u0cde\u0cdf\u0005\u00e3\u0000\u0000\u0cdf\u0ce5\u0003\u0374\u01ba\u0000"+
		"\u0ce0\u0ce1\u0005\u0180\u0000\u0000\u0ce1\u0ce2\u0005\u00e3\u0000\u0000"+
		"\u0ce2\u0ce4\u0003\u0374\u01ba\u0000\u0ce3\u0ce0\u0001\u0000\u0000\u0000"+
		"\u0ce4\u0ce7\u0001\u0000\u0000\u0000\u0ce5\u0ce3\u0001\u0000\u0000\u0000"+
		"\u0ce5\u0ce6\u0001\u0000\u0000\u0000\u0ce6\u0ce9\u0001\u0000\u0000\u0000"+
		"\u0ce7\u0ce5\u0001\u0000\u0000\u0000\u0ce8\u0cea\u0005\u00f5\u0000\u0000"+
		"\u0ce9\u0ce8\u0001\u0000\u0000\u0000\u0ce9\u0cea\u0001\u0000\u0000\u0000"+
		"\u0cea\u0cec\u0001\u0000\u0000\u0000\u0ceb\u0ced\u0003\u000e\u0007\u0000"+
		"\u0cec\u0ceb\u0001\u0000\u0000\u0000\u0cec\u0ced\u0001\u0000\u0000\u0000"+
		"\u0ced\u020b\u0001\u0000\u0000\u0000\u0cee\u0cef\u0005\u0125\u0000\u0000"+
		"\u0cef\u0cf0\u0005\u0141\u0000\u0000\u0cf0\u0cf8\u0003\u00f4z\u0000\u0cf1"+
		"\u0cf2\u0005\u0160\u0000\u0000\u0cf2\u0cf4\u0005\u0141\u0000\u0000\u0cf3"+
		"\u0cf5\u0003$\u0012\u0000\u0cf4\u0cf3\u0001\u0000\u0000\u0000\u0cf4\u0cf5"+
		"\u0001\u0000\u0000\u0000\u0cf5\u0cf6\u0001\u0000\u0000\u0000\u0cf6\u0cf8"+
		"\u0003\u00f4z\u0000\u0cf7\u0cee\u0001\u0000\u0000\u0000\u0cf7\u0cf1\u0001"+
		"\u0000\u0000\u0000\u0cf8\u020d\u0001\u0000\u0000\u0000\u0cf9\u0cfa\u0005"+
		"\u0125\u0000\u0000\u0cfa\u0cfb\u0005\u0141\u0000\u0000\u0cfb\u0d03\u0003"+
		"\u00f4z\u0000\u0cfc\u0cfd\u0005\u0160\u0000\u0000\u0cfd\u0cff\u0005\u0141"+
		"\u0000\u0000\u0cfe\u0d00\u0003$\u0012\u0000\u0cff\u0cfe\u0001\u0000\u0000"+
		"\u0000\u0cff\u0d00\u0001\u0000\u0000\u0000\u0d00\u0d01\u0001\u0000\u0000"+
		"\u0000\u0d01\u0d03\u0003\u00f4z\u0000\u0d02\u0cf9\u0001\u0000\u0000\u0000"+
		"\u0d02\u0cfc\u0001\u0000\u0000\u0000\u0d03\u020f\u0001\u0000\u0000\u0000"+
		"\u0d04\u0d0e\u0005\u0125\u0000\u0000\u0d05\u0d06\u0005\u0122\u0000\u0000"+
		"\u0d06\u0d0a\u0005\u019c\u0000\u0000\u0d07\u0d08\u0005\u0177\u0000\u0000"+
		"\u0d08\u0d09\u0005\u0123\u0000\u0000\u0d09\u0d0b\u0003\u00f4z\u0000\u0d0a"+
		"\u0d07\u0001\u0000\u0000\u0000\u0d0a\u0d0b\u0001\u0000\u0000\u0000\u0d0b"+
		"\u0d0f\u0001\u0000\u0000\u0000\u0d0c\u0d0d\u0005\u0123\u0000\u0000\u0d0d"+
		"\u0d0f\u0003\u00f4z\u0000\u0d0e\u0d05\u0001\u0000\u0000\u0000\u0d0e\u0d0c"+
		"\u0001\u0000\u0000\u0000\u0d0f\u0d14\u0001\u0000\u0000\u0000\u0d10\u0d11"+
		"\u0005\u0160\u0000\u0000\u0d11\u0d12\u0005\u0123\u0000\u0000\u0d12\u0d14"+
		"\u0003\u00f4z\u0000\u0d13\u0d04\u0001\u0000\u0000\u0000\u0d13\u0d10\u0001"+
		"\u0000\u0000\u0000\u0d14\u0211\u0001\u0000\u0000\u0000\u0d15\u0d17\u0003"+
		"\u0280\u0140\u0000\u0d16\u0d18\u0003\u0370\u01b8\u0000\u0d17\u0d16\u0001"+
		"\u0000\u0000\u0000\u0d17\u0d18\u0001\u0000\u0000\u0000\u0d18\u0213\u0001"+
		"\u0000\u0000\u0000\u0d19\u0d1a\u0005\u0125\u0000\u0000\u0d1a\u0d1b\u0005"+
		"|\u0000\u0000\u0d1b\u0d1c\u0003\u023a\u011d\u0000\u0d1c\u0215\u0001\u0000"+
		"\u0000\u0000\u0d1d\u0d1e\u0005\u00ce\u0000\u0000\u0d1e\u0d21\u0007\u0018"+
		"\u0000\u0000\u0d1f\u0d21\u0003\u00e0p\u0000\u0d20\u0d1d\u0001\u0000\u0000"+
		"\u0000\u0d20\u0d1f\u0001\u0000\u0000\u0000\u0d21\u0217\u0001\u0000\u0000"+
		"\u0000\u0d22\u0d23\u0005\u0125\u0000\u0000\u0d23\u0d24\u0005\u012b\u0000"+
		"\u0000\u0d24\u0d25\u0005\u00b5\u0000\u0000\u0d25\u0d26\u0003\u021a\u010d"+
		"\u0000\u0d26\u0219\u0001\u0000\u0000\u0000\u0d27\u0d28\u0005\u0182\u0000"+
		"\u0000\u0d28\u0d29\u0003\u021c\u010e\u0000\u0d29\u0d2a\u0005\u0183\u0000"+
		"\u0000\u0d2a\u021b\u0001\u0000\u0000\u0000\u0d2b\u0d30\u0003\u021e\u010f"+
		"\u0000\u0d2c\u0d2d\u0005\u0180\u0000\u0000\u0d2d\u0d2f\u0003\u021e\u010f"+
		"\u0000\u0d2e\u0d2c\u0001\u0000\u0000\u0000\u0d2f\u0d32\u0001\u0000\u0000"+
		"\u0000\u0d30\u0d2e\u0001\u0000\u0000\u0000\u0d30\u0d31\u0001\u0000\u0000"+
		"\u0000\u0d31\u021d\u0001\u0000\u0000\u0000\u0d32\u0d30\u0001\u0000\u0000"+
		"\u0000\u0d33\u0d34\u0003\u013c\u009e\u0000\u0d34\u0d35\u0005\u0188\u0000"+
		"\u0000\u0d35\u0d36\u0005\u019c\u0000\u0000\u0d36\u021f\u0001\u0000\u0000"+
		"\u0000\u0d37\u0d38\u0005\u0125\u0000\u0000\u0d38\u0d39\u0005\u00b5\u0000"+
		"\u0000\u0d39\u0d3a\u0005\u019c\u0000\u0000\u0d3a\u0221\u0001\u0000\u0000"+
		"\u0000\u0d3b\u0d42\u0003\u00e4r\u0000\u0d3c\u0d3f\u0005\u00ce\u0000\u0000"+
		"\u0d3d\u0d40\u0005\u012b\u0000\u0000\u0d3e\u0d40\u00030\u0018\u0000\u0d3f"+
		"\u0d3d\u0001\u0000\u0000\u0000\u0d3f\u0d3e\u0001\u0000\u0000\u0000\u0d40"+
		"\u0d42\u0001\u0000\u0000\u0000\u0d41\u0d3b\u0001\u0000\u0000\u0000\u0d41"+
		"\u0d3c\u0001\u0000\u0000\u0000\u0d42\u0223\u0001\u0000\u0000\u0000\u0d43"+
		"\u0d44\u0005l\u0000\u0000\u0d44\u0d45\u0003\u0370\u01b8\u0000\u0d45\u0d46"+
		"\u0005\u0177\u0000\u0000\u0d46\u0d47\u0005\u013e\u0000\u0000\u0d47\u0d48"+
		"\u0003\u0280\u0140\u0000\u0d48\u0225\u0001\u0000\u0000\u0000\u0d49\u0d4a"+
		"\u0005\u0108\u0000\u0000\u0d4a\u0d4b\u0005\u014a\u0000\u0000\u0d4b\u0d4c"+
		"\u0003\u0370\u01b8\u0000\u0d4c\u0227\u0001\u0000\u0000\u0000\u0d4d\u0d4e"+
		"\u0005\u0162\u0000\u0000\u0d4e\u0d4f\u0005\u0134\u0000\u0000\u0d4f\u0d51"+
		"\u0005\u0081\u0000\u0000\u0d50\u0d52\u0005-\u0000\u0000\u0d51\u0d50\u0001"+
		"\u0000\u0000\u0000\u0d51\u0d52\u0001\u0000\u0000\u0000\u0d52\u0d53\u0001"+
		"\u0000\u0000\u0000\u0d53\u0d54\u0003\u0380\u01c0\u0000\u0d54\u0d55\u0005"+
		"\u0125\u0000\u0000\u0d55\u0d58\u0003\u00f4z\u0000\u0d56\u0d57\u0005/\u0000"+
		"\u0000\u0d57\u0d59\u0005\u019c\u0000\u0000\u0d58\u0d56\u0001\u0000\u0000"+
		"\u0000\u0d58\u0d59\u0001\u0000\u0000\u0000\u0d59\u0229\u0001\u0000\u0000"+
		"\u0000\u0d5a\u0d5b\u00055\u0000\u0000\u0d5b\u022b\u0001\u0000\u0000\u0000"+
		"\u0d5c\u0d5d\u0005\u009f\u0000\u0000\u0d5d\u0d5e\u0005\u01a1\u0000\u0000"+
		"\u0d5e\u0d5f\u0005\u001f\u0000\u0000\u0d5f\u022d\u0001\u0000\u0000\u0000"+
		"\u0d60\u0d61\u0005\u000b\u0000\u0000\u0d61\u0d62\u0005\u0171\u0000\u0000"+
		"\u0d62\u022f\u0001\u0000\u0000\u0000\u0d63\u0d64\u0005\u00ec\u0000\u0000"+
		"\u0d64\u0d65\u0005\u019c\u0000\u0000\u0d65\u0231\u0001\u0000\u0000\u0000"+
		"\u0d66\u0d67\u00051\u0000\u0000\u0d67\u0d69\u0005\u019c\u0000\u0000\u0d68"+
		"\u0d6a\u0003\u00e2q\u0000\u0d69\u0d68\u0001\u0000\u0000\u0000\u0d69\u0d6a"+
		"\u0001\u0000\u0000\u0000\u0d6a\u0d6c\u0001\u0000\u0000\u0000\u0d6b\u0d6d"+
		"\u0003\u022e\u0117\u0000\u0d6c\u0d6b\u0001\u0000\u0000\u0000\u0d6c\u0d6d"+
		"\u0001\u0000\u0000\u0000\u0d6d\u0d6f\u0001\u0000\u0000\u0000\u0d6e\u0d70"+
		"\u0003\u0230\u0118\u0000\u0d6f\u0d6e\u0001\u0000\u0000\u0000\u0d6f\u0d70"+
		"\u0001\u0000\u0000\u0000\u0d70\u0d75\u0001\u0000\u0000\u0000\u0d71\u0d72"+
		"\u0005\u0177\u0000\u0000\u0d72\u0d73\u0005\u00e1\u0000\u0000\u0d73\u0d74"+
		"\u0005\u0141\u0000\u0000\u0d74\u0d76\u0003\u00f4z\u0000\u0d75\u0d71\u0001"+
		"\u0000\u0000\u0000\u0d75\u0d76\u0001\u0000\u0000\u0000\u0d76\u0233\u0001"+
		"\u0000\u0000\u0000\u0d77\u0d78\u0005\u0125\u0000\u0000\u0d78\u0d79\u0005"+
		"\u00e2\u0000\u0000\u0d79\u0d7a\u0003\u0090H\u0000\u0d7a\u0235\u0001\u0000"+
		"\u0000\u0000\u0d7b\u0d7c\u0005\u0125\u0000\u0000\u0d7c\u0d7d\u0005\u00e3"+
		"\u0000\u0000\u0d7d\u0d7e\u0005\u0131\u0000\u0000\u0d7e\u0d7f\u0005\u0182"+
		"\u0000\u0000\u0d7f\u0d80\u0003\u00dam\u0000\u0d80\u0d81\u0005\u0183\u0000"+
		"\u0000\u0d81\u0237\u0001\u0000\u0000\u0000\u0d82\u0d8c\u0005n\u0000\u0000"+
		"\u0d83\u0d84\u0005\u0117\u0000\u0000\u0d84\u0d85\u0005\u0182\u0000\u0000"+
		"\u0d85\u0d8d\u0007\u0019\u0000\u0000\u0d86\u0d87\u0005q\u0000\u0000\u0d87"+
		"\u0d88\u0005\u0182\u0000\u0000\u0d88\u0d8d\u0005\u019c\u0000\u0000\u0d89"+
		"\u0d8a\u0005\u0127\u0000\u0000\u0d8a\u0d8b\u0005\u0182\u0000\u0000\u0d8b"+
		"\u0d8d\u0005\u01a1\u0000\u0000\u0d8c\u0d83\u0001\u0000\u0000\u0000\u0d8c"+
		"\u0d86\u0001\u0000\u0000\u0000\u0d8c\u0d89\u0001\u0000\u0000\u0000\u0d8d"+
		"\u0d8e\u0001\u0000\u0000\u0000\u0d8e\u0d8f\u0005\u0183\u0000\u0000\u0d8f"+
		"\u0239\u0001\u0000\u0000\u0000\u0d90\u0d91\u0005\u009a\u0000\u0000\u0d91"+
		"\u0d92\u0005\u019c\u0000\u0000\u0d92\u0d93\u0005\u00df\u0000\u0000\u0d93"+
		"\u0d94\u0005\u019c\u0000\u0000\u0d94\u0d95\u0005\u0122\u0000\u0000\u0d95"+
		"\u0d9a\u0005\u019c\u0000\u0000\u0d96\u0d97\u0005\u0099\u0000\u0000\u0d97"+
		"\u0d98\u0005\u019c\u0000\u0000\u0d98\u0d99\u0005\u00de\u0000\u0000\u0d99"+
		"\u0d9b\u0005\u019c\u0000\u0000\u0d9a\u0d96\u0001\u0000\u0000\u0000\u0d9a"+
		"\u0d9b\u0001\u0000\u0000\u0000\u0d9b\u0d9e\u0001\u0000\u0000\u0000\u0d9c"+
		"\u0d9e\u0003\u0380\u01c0\u0000\u0d9d\u0d90\u0001\u0000\u0000\u0000\u0d9d"+
		"\u0d9c\u0001\u0000\u0000\u0000\u0d9e\u023b\u0001\u0000\u0000\u0000\u0d9f"+
		"\u0da3\u0003\u023e\u011f\u0000\u0da0\u0da3\u0003\u0240\u0120\u0000\u0da1"+
		"\u0da3\u0003\u0242\u0121\u0000\u0da2\u0d9f\u0001\u0000\u0000\u0000\u0da2"+
		"\u0da0\u0001\u0000\u0000\u0000\u0da2\u0da1\u0001\u0000\u0000\u0000\u0da3"+
		"\u023d\u0001\u0000\u0000\u0000\u0da4\u0da5\u0003\u0380\u01c0\u0000\u0da5"+
		"\u0da6\u0005\u0125\u0000\u0000\u0da6\u0da7\u0005L\u0000\u0000\u0da7\u0da8"+
		"\u0003\u0250\u0128\u0000\u0da8\u023f\u0001\u0000\u0000\u0000\u0da9\u0daa"+
		"\u0003\u0380\u01c0\u0000\u0daa\u0dab\u0005\u0125\u0000\u0000\u0dab\u0dac"+
		"\u0005\u00e2\u0000\u0000\u0dac\u0dad\u0003\u0090H\u0000\u0dad\u0241\u0001"+
		"\u0000\u0000\u0000\u0dae\u0daf\u0003\u0380\u01c0\u0000\u0daf\u0db0\u0005"+
		"\u0125\u0000\u0000\u0db0\u0db1\u0005\u0164\u0000\u0000\u0db1\u0db2\u0005"+
		"\u019c\u0000\u0000\u0db2\u0243\u0001\u0000\u0000\u0000\u0db3\u0db4\u0005"+
		"\u00b0\u0000\u0000\u0db4\u0dbd\u0005{\u0000\u0000\u0db5\u0db6\u0005\u00b0"+
		"\u0000\u0000\u0db6\u0db7\u0005{\u0000\u0000\u0db7\u0db8\u0003\u0380\u01c0"+
		"\u0000\u0db8\u0db9\u0005\u019c\u0000\u0000\u0db9\u0dbd\u0001\u0000\u0000"+
		"\u0000\u0dba\u0dbb\u0005\u00b0\u0000\u0000\u0dbb\u0dbd\u0003\u0280\u0140"+
		"\u0000\u0dbc\u0db3\u0001\u0000\u0000\u0000\u0dbc\u0db5\u0001\u0000\u0000"+
		"\u0000\u0dbc\u0dba\u0001\u0000\u0000\u0000\u0dbd\u0245\u0001\u0000\u0000"+
		"\u0000\u0dbe\u0dc0\u0005:\u0000\u0000\u0dbf\u0dc1\u0005\u0142\u0000\u0000"+
		"\u0dc0\u0dbf\u0001\u0000\u0000\u0000\u0dc0\u0dc1\u0001\u0000\u0000\u0000"+
		"\u0dc1\u0dc3\u0001\u0000\u0000\u0000\u0dc2\u0dc4\u0005\u014e\u0000\u0000"+
		"\u0dc3\u0dc2\u0001\u0000\u0000\u0000\u0dc3\u0dc4\u0001\u0000\u0000\u0000"+
		"\u0dc4\u0dc6\u0001\u0000\u0000\u0000\u0dc5\u0dc7\u0005v\u0000\u0000\u0dc6"+
		"\u0dc5\u0001\u0000\u0000\u0000\u0dc6\u0dc7\u0001\u0000\u0000\u0000\u0dc7"+
		"\u0dc8\u0001\u0000\u0000\u0000\u0dc8\u0dca\u0005\u013e\u0000\u0000\u0dc9"+
		"\u0dcb\u0003(\u0014\u0000\u0dca\u0dc9\u0001\u0000\u0000\u0000\u0dca\u0dcb"+
		"\u0001\u0000\u0000\u0000\u0dcb\u0dcc\u0001\u0000\u0000\u0000\u0dcc\u0dff"+
		"\u0003\u0280\u0140\u0000\u0dcd\u0dcf\u0003\u0244\u0122\u0000\u0dce\u0dd0"+
		"\u0003\u00d4j\u0000\u0dcf\u0dce\u0001\u0000\u0000\u0000\u0dcf\u0dd0\u0001"+
		"\u0000\u0000\u0000\u0dd0\u0dd2\u0001\u0000\u0000\u0000\u0dd1\u0dd3\u0003"+
		"\u00f0x\u0000\u0dd2\u0dd1\u0001\u0000\u0000\u0000\u0dd2\u0dd3\u0001\u0000"+
		"\u0000\u0000\u0dd3\u0dd5\u0001\u0000\u0000\u0000\u0dd4\u0dd6\u0003\u0106"+
		"\u0083\u0000\u0dd5\u0dd4\u0001\u0000\u0000\u0000\u0dd5\u0dd6\u0001\u0000"+
		"\u0000\u0000\u0dd6\u0dd8\u0001\u0000\u0000\u0000\u0dd7\u0dd9\u0003\u0108"+
		"\u0084\u0000\u0dd8\u0dd7\u0001\u0000\u0000\u0000\u0dd8\u0dd9\u0001\u0000"+
		"\u0000\u0000\u0dd9\u0ddb\u0001\u0000\u0000\u0000\u0dda\u0ddc\u0003\u00f2"+
		"y\u0000\u0ddb\u0dda\u0001\u0000\u0000\u0000\u0ddb\u0ddc\u0001\u0000\u0000"+
		"\u0000\u0ddc\u0e00\u0001\u0000\u0000\u0000\u0ddd\u0dde\u0005\u0182\u0000"+
		"\u0000\u0dde\u0ddf\u0003\u010c\u0086\u0000\u0ddf\u0de0\u0005\u0183\u0000"+
		"\u0000\u0de0\u0de2\u0001\u0000\u0000\u0000\u0de1\u0ddd\u0001\u0000\u0000"+
		"\u0000\u0de1\u0de2\u0001\u0000\u0000\u0000\u0de2\u0de4\u0001\u0000\u0000"+
		"\u0000\u0de3\u0de5\u0003\u00d2i\u0000\u0de4\u0de3\u0001\u0000\u0000\u0000"+
		"\u0de4\u0de5\u0001\u0000\u0000\u0000\u0de5\u0de7\u0001\u0000\u0000\u0000"+
		"\u0de6\u0de8\u0003\u00d4j\u0000\u0de7\u0de6\u0001\u0000\u0000\u0000\u0de7"+
		"\u0de8\u0001\u0000\u0000\u0000\u0de8\u0dea\u0001\u0000\u0000\u0000\u0de9"+
		"\u0deb\u0003\u00e0p\u0000\u0dea\u0de9\u0001\u0000\u0000\u0000\u0dea\u0deb"+
		"\u0001\u0000\u0000\u0000\u0deb\u0ded\u0001\u0000\u0000\u0000\u0dec\u0dee"+
		"\u0003\u00e4r\u0000\u0ded\u0dec\u0001\u0000\u0000\u0000\u0ded\u0dee\u0001"+
		"\u0000\u0000\u0000\u0dee\u0df0\u0001\u0000\u0000\u0000\u0def\u0df1\u0003"+
		"\u00f0x\u0000\u0df0\u0def\u0001\u0000\u0000\u0000\u0df0\u0df1\u0001\u0000"+
		"\u0000\u0000\u0df1\u0df3\u0001\u0000\u0000\u0000\u0df2\u0df4\u0003\u0106"+
		"\u0083\u0000\u0df3\u0df2\u0001\u0000\u0000\u0000\u0df3\u0df4\u0001\u0000"+
		"\u0000\u0000\u0df4\u0df6\u0001\u0000\u0000\u0000\u0df5\u0df7\u0003\u0108"+
		"\u0084\u0000\u0df6\u0df5\u0001\u0000\u0000\u0000\u0df6\u0df7\u0001\u0000"+
		"\u0000\u0000\u0df7\u0df9\u0001\u0000\u0000\u0000\u0df8\u0dfa\u0003\u00f2"+
		"y\u0000\u0df9\u0df8\u0001\u0000\u0000\u0000\u0df9\u0dfa\u0001\u0000\u0000"+
		"\u0000\u0dfa\u0dfd\u0001\u0000\u0000\u0000\u0dfb\u0dfc\u0005\u0011\u0000"+
		"\u0000\u0dfc\u0dfe\u0003\u0192\u00c9\u0000\u0dfd\u0dfb\u0001\u0000\u0000"+
		"\u0000\u0dfd\u0dfe\u0001\u0000\u0000\u0000\u0dfe\u0e00\u0001\u0000\u0000"+
		"\u0000\u0dff\u0dcd\u0001\u0000\u0000\u0000\u0dff\u0de1\u0001\u0000\u0000"+
		"\u0000\u0e00\u0e3a\u0001\u0000\u0000\u0000\u0e01\u0e02\u0005:\u0000\u0000"+
		"\u0e02\u0e03\u0005\u00bb\u0000\u0000\u0e03\u0e05\u0005\u013e\u0000\u0000"+
		"\u0e04\u0e06\u0003(\u0014\u0000\u0e05\u0e04\u0001\u0000\u0000\u0000\u0e05"+
		"\u0e06\u0001\u0000\u0000\u0000\u0e06\u0e07\u0001\u0000\u0000\u0000\u0e07"+
		"\u0e37\u0003\u0280\u0140\u0000\u0e08\u0e0a\u0003\u0244\u0122\u0000\u0e09"+
		"\u0e0b\u0003\u00f0x\u0000\u0e0a\u0e09\u0001\u0000\u0000\u0000\u0e0a\u0e0b"+
		"\u0001\u0000\u0000\u0000\u0e0b\u0e0d\u0001\u0000\u0000\u0000\u0e0c\u0e0e"+
		"\u0003\u0106\u0083\u0000\u0e0d\u0e0c\u0001\u0000\u0000\u0000\u0e0d\u0e0e"+
		"\u0001\u0000\u0000\u0000\u0e0e\u0e10\u0001\u0000\u0000\u0000\u0e0f\u0e11"+
		"\u0003\u0108\u0084\u0000\u0e10\u0e0f\u0001\u0000\u0000\u0000\u0e10\u0e11"+
		"\u0001\u0000\u0000\u0000\u0e11\u0e13\u0001\u0000\u0000\u0000\u0e12\u0e14"+
		"\u0003\u00f2y\u0000\u0e13\u0e12\u0001\u0000\u0000\u0000\u0e13\u0e14\u0001"+
		"\u0000\u0000\u0000\u0e14\u0e38\u0001\u0000\u0000\u0000\u0e15\u0e16\u0005"+
		"\u0182\u0000\u0000\u0e16\u0e17\u0003\u010c\u0086\u0000\u0e17\u0e18\u0005"+
		"\u0183\u0000\u0000\u0e18\u0e1a\u0001\u0000\u0000\u0000\u0e19\u0e15\u0001"+
		"\u0000\u0000\u0000\u0e19\u0e1a\u0001\u0000\u0000\u0000\u0e1a\u0e1c\u0001"+
		"\u0000\u0000\u0000\u0e1b\u0e1d\u0003\u00d2i\u0000\u0e1c\u0e1b\u0001\u0000"+
		"\u0000\u0000\u0e1c\u0e1d\u0001\u0000\u0000\u0000\u0e1d\u0e1f\u0001\u0000"+
		"\u0000\u0000\u0e1e\u0e20\u0003\u00d4j\u0000\u0e1f\u0e1e\u0001\u0000\u0000"+
		"\u0000\u0e1f\u0e20\u0001\u0000\u0000\u0000\u0e20\u0e22\u0001\u0000\u0000"+
		"\u0000\u0e21\u0e23\u0003\u00e0p\u0000\u0e22\u0e21\u0001\u0000\u0000\u0000"+
		"\u0e22\u0e23\u0001\u0000\u0000\u0000\u0e23\u0e25\u0001\u0000\u0000\u0000"+
		"\u0e24\u0e26\u0003\u00e4r\u0000\u0e25\u0e24\u0001\u0000\u0000\u0000\u0e25"+
		"\u0e26\u0001\u0000\u0000\u0000\u0e26\u0e28\u0001\u0000\u0000\u0000\u0e27"+
		"\u0e29\u0003\u00f0x\u0000\u0e28\u0e27\u0001\u0000\u0000\u0000\u0e28\u0e29"+
		"\u0001\u0000\u0000\u0000\u0e29\u0e2b\u0001\u0000\u0000\u0000\u0e2a\u0e2c"+
		"\u0003\u0106\u0083\u0000\u0e2b\u0e2a\u0001\u0000\u0000\u0000\u0e2b\u0e2c"+
		"\u0001\u0000\u0000\u0000\u0e2c\u0e2e\u0001\u0000\u0000\u0000\u0e2d\u0e2f"+
		"\u0003\u0108\u0084\u0000\u0e2e\u0e2d\u0001\u0000\u0000\u0000\u0e2e\u0e2f"+
		"\u0001\u0000\u0000\u0000\u0e2f\u0e31\u0001\u0000\u0000\u0000\u0e30\u0e32"+
		"\u0003\u00f2y\u0000\u0e31\u0e30\u0001\u0000\u0000\u0000\u0e31\u0e32\u0001"+
		"\u0000\u0000\u0000\u0e32\u0e35\u0001\u0000\u0000\u0000\u0e33\u0e34\u0005"+
		"\u0011\u0000\u0000\u0e34\u0e36\u0003\u0192\u00c9\u0000\u0e35\u0e33\u0001"+
		"\u0000\u0000\u0000\u0e35\u0e36\u0001\u0000\u0000\u0000\u0e36\u0e38\u0001"+
		"\u0000\u0000\u0000\u0e37\u0e08\u0001\u0000\u0000\u0000\u0e37\u0e19\u0001"+
		"\u0000\u0000\u0000\u0e38\u0e3a\u0001\u0000\u0000\u0000\u0e39\u0dbe\u0001"+
		"\u0000\u0000\u0000\u0e39\u0e01\u0001\u0000\u0000\u0000\u0e3a\u0247\u0001"+
		"\u0000\u0000\u0000\u0e3b\u0e3c\u0005:\u0000\u0000\u0e3c\u0e3e\u0005E\u0000"+
		"\u0000\u0e3d\u0e3f\u0003(\u0014\u0000\u0e3e\u0e3d\u0001\u0000\u0000\u0000"+
		"\u0e3e\u0e3f\u0001\u0000\u0000\u0000\u0e3f\u0e40\u0001\u0000\u0000\u0000"+
		"\u0e40\u0e41\u0003\u0380\u01c0\u0000\u0e41\u0e42\u0003\u024e\u0127\u0000"+
		"\u0e42\u0e44\u0003\u024c\u0126\u0000\u0e43\u0e45\u0003\u024a\u0125\u0000"+
		"\u0e44\u0e43\u0001\u0000\u0000\u0000\u0e44\u0e45\u0001\u0000\u0000\u0000"+
		"\u0e45\u0e49\u0001\u0000\u0000\u0000\u0e46\u0e47\u0005\u0177\u0000\u0000"+
		"\u0e47\u0e48\u0005L\u0000\u0000\u0e48\u0e4a\u0003\u0250\u0128\u0000\u0e49"+
		"\u0e46\u0001\u0000\u0000\u0000\u0e49\u0e4a\u0001\u0000\u0000\u0000\u0e4a"+
		"\u0249\u0001\u0000\u0000\u0000\u0e4b\u0e4c\u0005/\u0000\u0000\u0e4c\u0e4d"+
		"\u0005\u019c\u0000\u0000\u0e4d\u024b\u0001\u0000\u0000\u0000\u0e4e\u0e4f"+
		"\u0005\u0164\u0000\u0000\u0e4f\u0e50\u0005\u019c\u0000\u0000\u0e50\u024d"+
		"\u0001\u0000\u0000\u0000\u0e51\u0e52\u0005\u0155\u0000\u0000\u0e52\u0e53"+
		"\u0005\u019c\u0000\u0000\u0e53\u024f\u0001\u0000\u0000\u0000\u0e54\u0e55"+
		"\u0005\u0182\u0000\u0000\u0e55\u0e56\u0003<\u001e\u0000\u0e56\u0e57\u0005"+
		"\u0183\u0000\u0000\u0e57\u0251\u0001\u0000\u0000\u0000\u0e58\u0e59\u0005"+
		"b\u0000\u0000\u0e59\u0e5b\u0005E\u0000\u0000\u0e5a\u0e5c\u0003$\u0012"+
		"\u0000\u0e5b\u0e5a\u0001\u0000\u0000\u0000\u0e5b\u0e5c\u0001\u0000\u0000"+
		"\u0000\u0e5c\u0e5d\u0001\u0000\u0000\u0000\u0e5d\u0e5e\u0003\u0380\u01c0"+
		"\u0000\u0e5e\u0253\u0001\u0000\u0000\u0000\u0e5f\u0e65\u0005\u0192\u0000"+
		"\u0000\u0e60\u0e61\u0003\u0280\u0140\u0000\u0e61\u0e62\u0005\u017e\u0000"+
		"\u0000\u0e62\u0e63\u0005\u0192\u0000\u0000\u0e63\u0e65\u0001\u0000\u0000"+
		"\u0000\u0e64\u0e5f\u0001\u0000\u0000\u0000\u0e64\u0e60\u0001\u0000\u0000"+
		"\u0000\u0e65\u0255\u0001\u0000\u0000\u0000\u0e66\u0e67\u0003\u0380\u01c0"+
		"\u0000\u0e67\u0257\u0001\u0000\u0000\u0000\u0e68\u0e69\u0005P\u0000\u0000"+
		"\u0e69\u0259\u0001\u0000\u0000\u0000\u0e6a\u0e6f\u0003\u031c\u018e\u0000"+
		"\u0e6b\u0e6c\u0005\u0180\u0000\u0000\u0e6c\u0e6e\u0003\u031c\u018e\u0000"+
		"\u0e6d\u0e6b\u0001\u0000\u0000\u0000\u0e6e\u0e71\u0001\u0000\u0000\u0000"+
		"\u0e6f\u0e6d\u0001\u0000\u0000\u0000\u0e6f\u0e70\u0001\u0000\u0000\u0000"+
		"\u0e70\u025b\u0001\u0000\u0000\u0000\u0e71\u0e6f\u0001\u0000\u0000\u0000"+
		"\u0e72\u0e77\u0003\u0380\u01c0\u0000\u0e73\u0e74\u0005\u0180\u0000\u0000"+
		"\u0e74\u0e76\u0003\u0380\u01c0\u0000\u0e75\u0e73\u0001\u0000\u0000\u0000"+
		"\u0e76\u0e79\u0001\u0000\u0000\u0000\u0e77\u0e75\u0001\u0000\u0000\u0000"+
		"\u0e77\u0e78\u0001\u0000\u0000\u0000\u0e78\u025d\u0001\u0000\u0000\u0000"+
		"\u0e79\u0e77\u0001\u0000\u0000\u0000\u0e7a\u0e7b\u0005\u0086\u0000\u0000"+
		"\u0e7b\u0e7c\u0003\u0260\u0130\u0000\u0e7c\u025f\u0001\u0000\u0000\u0000"+
		"\u0e7d\u0e7e\u0003\u026c\u0136\u0000\u0e7e\u0e81\u0003\u0268\u0134\u0000"+
		"\u0e7f\u0e80\u0005\u0180\u0000\u0000\u0e80\u0e82\u0003\u0268\u0134\u0000"+
		"\u0e81\u0e7f\u0001\u0000\u0000\u0000\u0e82\u0e83\u0001\u0000\u0000\u0000"+
		"\u0e83\u0e81\u0001\u0000\u0000\u0000\u0e83\u0e84\u0001\u0000\u0000\u0000"+
		"\u0e84\u0e87\u0001\u0000\u0000\u0000\u0e85\u0e87\u0003\u0264\u0132\u0000"+
		"\u0e86\u0e7d\u0001\u0000\u0000\u0000\u0e86\u0e85\u0001\u0000\u0000\u0000"+
		"\u0e87\u0261\u0001\u0000\u0000\u0000\u0e88\u0e8c\u0003\u027a\u013d\u0000"+
		"\u0e89\u0e8b\u0003\u0270\u0138\u0000\u0e8a\u0e89\u0001\u0000\u0000\u0000"+
		"\u0e8b\u0e8e\u0001\u0000\u0000\u0000\u0e8c\u0e8a\u0001\u0000\u0000\u0000"+
		"\u0e8c\u0e8d\u0001\u0000\u0000\u0000\u0e8d\u0ea9\u0001\u0000\u0000\u0000"+
		"\u0e8e\u0e8c\u0001\u0000\u0000\u0000\u0e8f\u0e93\u0003\u029a\u014d\u0000"+
		"\u0e90\u0e92\u0003\u0270\u0138\u0000\u0e91\u0e90\u0001\u0000\u0000\u0000"+
		"\u0e92\u0e95\u0001\u0000\u0000\u0000\u0e93\u0e91\u0001\u0000\u0000\u0000"+
		"\u0e93\u0e94\u0001\u0000\u0000\u0000\u0e94\u0ea9\u0001\u0000\u0000\u0000"+
		"\u0e95\u0e93\u0001\u0000\u0000\u0000\u0e96\u0e9a\u0003\u0284\u0142\u0000"+
		"\u0e97\u0e99\u0003\u0270\u0138\u0000\u0e98\u0e97\u0001\u0000\u0000\u0000"+
		"\u0e99\u0e9c\u0001\u0000\u0000\u0000\u0e9a\u0e98\u0001\u0000\u0000\u0000"+
		"\u0e9a\u0e9b\u0001\u0000\u0000\u0000\u0e9b\u0ea9\u0001\u0000\u0000\u0000"+
		"\u0e9c\u0e9a\u0001\u0000\u0000\u0000\u0e9d\u0ea1\u0003\u028a\u0145\u0000"+
		"\u0e9e\u0ea0\u0003\u0270\u0138\u0000\u0e9f\u0e9e\u0001\u0000\u0000\u0000"+
		"\u0ea0\u0ea3\u0001\u0000\u0000\u0000\u0ea1\u0e9f\u0001\u0000\u0000\u0000"+
		"\u0ea1\u0ea2\u0001\u0000\u0000\u0000\u0ea2\u0ea9\u0001\u0000\u0000\u0000"+
		"\u0ea3\u0ea1\u0001\u0000\u0000\u0000\u0ea4\u0ea5\u0005\u0182\u0000\u0000"+
		"\u0ea5\u0ea6\u0003\u0264\u0132\u0000\u0ea6\u0ea7\u0005\u0183\u0000\u0000"+
		"\u0ea7\u0ea9\u0001\u0000\u0000\u0000\u0ea8\u0e88\u0001\u0000\u0000\u0000"+
		"\u0ea8\u0e8f\u0001\u0000\u0000\u0000\u0ea8\u0e96\u0001\u0000\u0000\u0000"+
		"\u0ea8\u0e9d\u0001\u0000\u0000\u0000\u0ea8\u0ea4\u0001\u0000\u0000\u0000"+
		"\u0ea9\u0263\u0001\u0000\u0000\u0000\u0eaa\u0eb5\u0003\u0262\u0131\u0000"+
		"\u0eab\u0eac\u0003\u026e\u0137\u0000\u0eac\u0eb1\u0003\u0266\u0133\u0000"+
		"\u0ead\u0eae\u0005\u00d6\u0000\u0000\u0eae\u0eb2\u0003\u031c\u018e\u0000"+
		"\u0eaf\u0eb0\u0005\u0167\u0000\u0000\u0eb0\u0eb2\u0003\u0118\u008c\u0000"+
		"\u0eb1\u0ead\u0001\u0000\u0000\u0000\u0eb1\u0eaf\u0001\u0000\u0000\u0000"+
		"\u0eb1\u0eb2\u0001\u0000\u0000\u0000\u0eb2\u0eb4\u0001\u0000\u0000\u0000"+
		"\u0eb3\u0eab\u0001\u0000\u0000\u0000\u0eb4\u0eb7\u0001\u0000\u0000\u0000"+
		"\u0eb5\u0eb3\u0001\u0000\u0000\u0000\u0eb5\u0eb6\u0001\u0000\u0000\u0000"+
		"\u0eb6\u0265\u0001\u0000\u0000\u0000\u0eb7\u0eb5\u0001\u0000\u0000\u0000"+
		"\u0eb8\u0ebd\u0003\u027a\u013d\u0000\u0eb9\u0ebd\u0003\u029a\u014d\u0000"+
		"\u0eba\u0ebd\u0003\u0284\u0142\u0000\u0ebb\u0ebd\u0003\u028a\u0145\u0000"+
		"\u0ebc\u0eb8\u0001\u0000\u0000\u0000\u0ebc\u0eb9\u0001\u0000\u0000\u0000"+
		"\u0ebc\u0eba\u0001\u0000\u0000\u0000\u0ebc\u0ebb\u0001\u0000\u0000\u0000"+
		"\u0ebd\u0ec1\u0001\u0000\u0000\u0000\u0ebe\u0ec0\u0003\u0270\u0138\u0000"+
		"\u0ebf\u0ebe\u0001\u0000\u0000\u0000\u0ec0\u0ec3\u0001\u0000\u0000\u0000"+
		"\u0ec1\u0ebf\u0001\u0000\u0000\u0000\u0ec1\u0ec2\u0001\u0000\u0000\u0000"+
		"\u0ec2\u0267\u0001\u0000\u0000\u0000\u0ec3\u0ec1\u0001\u0000\u0000\u0000"+
		"\u0ec4\u0ec6\u0005\u00f0\u0000\u0000\u0ec5\u0ec4\u0001\u0000\u0000\u0000"+
		"\u0ec5\u0ec6\u0001\u0000\u0000\u0000\u0ec6\u0ec7\u0001\u0000\u0000\u0000"+
		"\u0ec7\u0ec8\u0003\u027e\u013f\u0000\u0ec8\u0ec9\u0003\u026a\u0135\u0000"+
		"\u0ec9\u0269\u0001\u0000\u0000\u0000\u0eca\u0ecb\u0005\u0182\u0000\u0000"+
		"\u0ecb\u0ecc\u0003\u025a\u012d\u0000\u0ecc\u0ecd\u0005\u0183\u0000\u0000"+
		"\u0ecd\u026b\u0001\u0000\u0000\u0000\u0ece\u0ecf\u0005\u015c\u0000\u0000"+
		"\u0ecf\u026d\u0001\u0000\u0000\u0000\u0ed0\u0edf\u0005\u0180\u0000\u0000"+
		"\u0ed1\u0edc\u0005\u0097\u0000\u0000\u0ed2\u0edc\u0005<\u0000\u0000\u0ed3"+
		"\u0ed5\u0007\u001a\u0000\u0000\u0ed4\u0ed6\u0005\u00dd\u0000\u0000\u0ed5"+
		"\u0ed4\u0001\u0000\u0000\u0000\u0ed5\u0ed6\u0001\u0000\u0000\u0000\u0ed6"+
		"\u0edc\u0001\u0000\u0000\u0000\u0ed7\u0ed9\u0005\u00ad\u0000\u0000\u0ed8"+
		"\u0eda\u0007\u001b\u0000\u0000\u0ed9\u0ed8\u0001\u0000\u0000\u0000\u0ed9"+
		"\u0eda\u0001\u0000\u0000\u0000\u0eda\u0edc\u0001\u0000\u0000\u0000\u0edb"+
		"\u0ed1\u0001\u0000\u0000\u0000\u0edb\u0ed2\u0001\u0000\u0000\u0000\u0edb"+
		"\u0ed3\u0001\u0000\u0000\u0000\u0edb\u0ed7\u0001\u0000\u0000\u0000\u0edb"+
		"\u0edc\u0001\u0000\u0000\u0000\u0edc\u0edd\u0001\u0000\u0000\u0000\u0edd"+
		"\u0edf\u0005\u00a4\u0000\u0000\u0ede\u0ed0\u0001\u0000\u0000\u0000\u0ede"+
		"\u0edb\u0001\u0000\u0000\u0000\u0edf\u026f\u0001\u0000\u0000\u0000\u0ee0"+
		"\u0ee1\u0005\u00ab\u0000\u0000\u0ee1\u0ee2\u0005\u016f\u0000\u0000\u0ee2"+
		"\u0ee3\u0005\u00dd\u0000\u0000\u0ee3\u0ee4\u0003\u02f0\u0178\u0000\u0ee4"+
		"\u0eee\u0003\u0272\u0139\u0000\u0ee5\u0ee6\u0005\u0011\u0000\u0000\u0ee6"+
		"\u0eeb\u0003\u0380\u01c0\u0000\u0ee7\u0ee8\u0005\u0180\u0000\u0000\u0ee8"+
		"\u0eea\u0003\u0380\u01c0\u0000\u0ee9\u0ee7\u0001\u0000\u0000\u0000\u0eea"+
		"\u0eed\u0001\u0000\u0000\u0000\u0eeb\u0ee9\u0001\u0000\u0000\u0000\u0eeb"+
		"\u0eec\u0001\u0000\u0000\u0000\u0eec\u0eef\u0001\u0000\u0000\u0000\u0eed"+
		"\u0eeb\u0001\u0000\u0000\u0000\u0eee\u0ee5\u0001\u0000\u0000\u0000\u0eee"+
		"\u0eef\u0001\u0000\u0000\u0000\u0eef\u0f1a\u0001\u0000\u0000\u0000\u0ef0"+
		"\u0ef2\u0005\u0180\u0000\u0000\u0ef1\u0ef0\u0001\u0000\u0000\u0000\u0ef1"+
		"\u0ef2\u0001\u0000\u0000\u0000\u0ef2\u0ef3\u0001\u0000\u0000\u0000\u0ef3"+
		"\u0f17\u0005\u00ab\u0000\u0000\u0ef4\u0ef5\u0005\u016f\u0000\u0000\u0ef5"+
		"\u0ef6\u0003\u02f0\u0178\u0000\u0ef6\u0f00\u0003\u0272\u0139\u0000\u0ef7"+
		"\u0ef8\u0005\u0011\u0000\u0000\u0ef8\u0efd\u0003\u0380\u01c0\u0000\u0ef9"+
		"\u0efa\u0005\u0180\u0000\u0000\u0efa\u0efc\u0003\u0380\u01c0\u0000\u0efb"+
		"\u0ef9\u0001\u0000\u0000\u0000\u0efc\u0eff\u0001\u0000\u0000\u0000\u0efd"+
		"\u0efb\u0001\u0000\u0000\u0000\u0efd\u0efe\u0001\u0000\u0000\u0000\u0efe"+
		"\u0f01\u0001\u0000\u0000\u0000\u0eff\u0efd\u0001\u0000\u0000\u0000\u0f00"+
		"\u0ef7\u0001\u0000\u0000\u0000\u0f00\u0f01\u0001\u0000\u0000\u0000\u0f01"+
		"\u0f18\u0001\u0000\u0000\u0000\u0f02\u0f03\u0005\u013e\u0000\u0000\u0f03"+
		"\u0f04\u0005\u0182\u0000\u0000\u0f04\u0f05\u0003\u0292\u0149\u0000\u0f05"+
		"\u0f07\u0005\u0183\u0000\u0000\u0f06\u0f08\u0005\u0011\u0000\u0000\u0f07"+
		"\u0f06\u0001\u0000\u0000\u0000\u0f07\u0f08\u0001\u0000\u0000\u0000\u0f08"+
		"\u0f09\u0001\u0000\u0000\u0000\u0f09\u0f15\u0003\u0272\u0139\u0000\u0f0a"+
		"\u0f0b\u0005\u0182\u0000\u0000\u0f0b\u0f10\u0003\u0380\u01c0\u0000\u0f0c"+
		"\u0f0d\u0005\u0180\u0000\u0000\u0f0d\u0f0f\u0003\u0380\u01c0\u0000\u0f0e"+
		"\u0f0c\u0001\u0000\u0000\u0000\u0f0f\u0f12\u0001\u0000\u0000\u0000\u0f10"+
		"\u0f0e\u0001\u0000\u0000\u0000\u0f10\u0f11\u0001\u0000\u0000\u0000\u0f11"+
		"\u0f13\u0001\u0000\u0000\u0000\u0f12\u0f10\u0001\u0000\u0000\u0000\u0f13"+
		"\u0f14\u0005\u0183\u0000\u0000\u0f14\u0f16\u0001\u0000\u0000\u0000\u0f15"+
		"\u0f0a\u0001\u0000\u0000\u0000\u0f15\u0f16\u0001\u0000\u0000\u0000\u0f16"+
		"\u0f18\u0001\u0000\u0000\u0000\u0f17\u0ef4\u0001\u0000\u0000\u0000\u0f17"+
		"\u0f02\u0001\u0000\u0000\u0000\u0f18\u0f1a\u0001\u0000\u0000\u0000\u0f19"+
		"\u0ee0\u0001\u0000\u0000\u0000\u0f19\u0ef1\u0001\u0000\u0000\u0000\u0f1a"+
		"\u0271\u0001\u0000\u0000\u0000\u0f1b\u0f1c\u0003\u0380\u01c0\u0000\u0f1c"+
		"\u0273\u0001\u0000\u0000\u0000\u0f1d\u0f1e\u0005\u0140\u0000\u0000\u0f1e"+
		"\u0f1f\u0005\u0182\u0000\u0000\u0f1f\u0f20\u0005\u001e\u0000\u0000\u0f20"+
		"\u0f21\u0005\u01a1\u0000\u0000\u0f21\u0f22\u0005\u00dc\u0000\u0000\u0f22"+
		"\u0f23\u0005\u00d3\u0000\u0000\u0f23\u0f2d\u0005\u01a1\u0000\u0000\u0f24"+
		"\u0f25\u0005\u00d6\u0000\u0000\u0f25\u0f2a\u0003\u031c\u018e\u0000\u0f26"+
		"\u0f27\u0005\u0180\u0000\u0000\u0f27\u0f29\u0003\u031c\u018e\u0000\u0f28"+
		"\u0f26\u0001\u0000\u0000\u0000\u0f29\u0f2c\u0001\u0000\u0000\u0000\u0f2a"+
		"\u0f28\u0001\u0000\u0000\u0000\u0f2a\u0f2b\u0001\u0000\u0000\u0000\u0f2b"+
		"\u0f2e\u0001\u0000\u0000\u0000\u0f2c\u0f2a\u0001\u0000\u0000\u0000\u0f2d"+
		"\u0f24\u0001\u0000\u0000\u0000\u0f2d\u0f2e\u0001\u0000\u0000\u0000\u0f2e"+
		"\u0f2f\u0001\u0000\u0000\u0000\u0f2f\u0f30\u0005\u0183\u0000\u0000\u0f30"+
		"\u0275\u0001\u0000\u0000\u0000\u0f31\u0f32\u0005\u0140\u0000\u0000\u0f32"+
		"\u0f36\u0005\u0182\u0000\u0000\u0f33\u0f34\u0005\u01a1\u0000\u0000\u0f34"+
		"\u0f37\u0007\u001c\u0000\u0000\u0f35\u0f37\u0005\u01a0\u0000\u0000\u0f36"+
		"\u0f33\u0001\u0000\u0000\u0000\u0f36\u0f35\u0001\u0000\u0000\u0000\u0f37"+
		"\u0f38\u0001\u0000\u0000\u0000\u0f38\u0f39\u0005\u0183\u0000\u0000\u0f39"+
		"\u0277\u0001\u0000\u0000\u0000\u0f3a\u0f3d\u0003\u0274\u013a\u0000\u0f3b"+
		"\u0f3d\u0003\u0276\u013b\u0000\u0f3c\u0f3a\u0001\u0000\u0000\u0000\u0f3c"+
		"\u0f3b\u0001\u0000\u0000\u0000\u0f3d\u0279\u0001\u0000\u0000\u0000\u0f3e"+
		"\u0f40\u0003\u0280\u0140\u0000\u0f3f\u0f41\u0003\u00f4z\u0000\u0f40\u0f3f"+
		"\u0001\u0000\u0000\u0000\u0f40\u0f41\u0001\u0000\u0000\u0000\u0f41\u0f43"+
		"\u0001\u0000\u0000\u0000\u0f42\u0f44\u0003\u0278\u013c\u0000\u0f43\u0f42"+
		"\u0001\u0000\u0000\u0000\u0f43\u0f44\u0001\u0000\u0000\u0000\u0f44\u0f46"+
		"\u0001\u0000\u0000\u0000\u0f45\u0f47\u0003\u027c\u013e\u0000\u0f46\u0f45"+
		"\u0001\u0000\u0000\u0000\u0f46\u0f47\u0001\u0000\u0000\u0000\u0f47\u0f4c"+
		"\u0001\u0000\u0000\u0000\u0f48\u0f4a\u0005\u0011\u0000\u0000\u0f49\u0f48"+
		"\u0001\u0000\u0000\u0000\u0f49\u0f4a\u0001\u0000\u0000\u0000\u0f4a\u0f4b"+
		"\u0001\u0000\u0000\u0000\u0f4b\u0f4d\u0003\u0380\u01c0\u0000\u0f4c\u0f49"+
		"\u0001\u0000\u0000\u0000\u0f4c\u0f4d\u0001\u0000\u0000\u0000\u0f4d\u027b"+
		"\u0001\u0000\u0000\u0000\u0f4e\u0f58\u0005\u0081\u0000\u0000\u0f4f\u0f50"+
		"\u0005\u013c\u0000\u0000\u0f50\u0f51\u0005\u0011\u0000\u0000\u0f51\u0f52"+
		"\u0005\u00d3\u0000\u0000\u0f52\u0f59\u0003\u031c\u018e\u0000\u0f53\u0f54"+
		"\u0005\u0081\u0000\u0000\u0f54\u0f55\u0005\u013d\u0000\u0000\u0f55\u0f56"+
		"\u0005\u0011\u0000\u0000\u0f56\u0f57\u0005\u00d3\u0000\u0000\u0f57\u0f59"+
		"\u0005\u01a1\u0000\u0000\u0f58\u0f4f\u0001\u0000\u0000\u0000\u0f58\u0f53"+
		"\u0001\u0000\u0000\u0000\u0f59\u027d\u0001\u0000\u0000\u0000\u0f5a\u0f5c"+
		"\u0003\u0280\u0140\u0000\u0f5b\u0f5d\u0003\u0278\u013c\u0000\u0f5c\u0f5b"+
		"\u0001\u0000\u0000\u0000\u0f5c\u0f5d\u0001\u0000\u0000\u0000\u0f5d\u0f62"+
		"\u0001\u0000\u0000\u0000\u0f5e\u0f60\u0005\u0011\u0000\u0000\u0f5f\u0f5e"+
		"\u0001\u0000\u0000\u0000\u0f5f\u0f60\u0001\u0000\u0000\u0000\u0f60\u0f61"+
		"\u0001\u0000\u0000\u0000\u0f61\u0f63\u0003\u0380\u01c0\u0000\u0f62\u0f5f"+
		"\u0001\u0000\u0000\u0000\u0f62\u0f63\u0001\u0000\u0000\u0000\u0f63\u027f"+
		"\u0001\u0000\u0000\u0000\u0f64\u0f65\u0003\u0380\u01c0\u0000\u0f65\u0f66"+
		"\u0005\u017e\u0000\u0000\u0f66\u0f69\u0003\u0380\u01c0\u0000\u0f67\u0f68"+
		"\u0005\u017e\u0000\u0000\u0f68\u0f6a\u0003\u0380\u01c0\u0000\u0f69\u0f67"+
		"\u0001\u0000\u0000\u0000\u0f69\u0f6a\u0001\u0000\u0000\u0000\u0f6a\u0f6d"+
		"\u0001\u0000\u0000\u0000\u0f6b\u0f6d\u0003\u0380\u01c0\u0000\u0f6c\u0f64"+
		"\u0001\u0000\u0000\u0000\u0f6c\u0f6b\u0001\u0000\u0000\u0000\u0f6d\u0281"+
		"\u0001\u0000\u0000\u0000\u0f6e\u0f6f\u0003\u0380\u01c0\u0000\u0f6f\u0f70"+
		"\u0005\u017e\u0000\u0000\u0f70\u0f72\u0001\u0000\u0000\u0000\u0f71\u0f6e"+
		"\u0001\u0000\u0000\u0000\u0f71\u0f72\u0001\u0000\u0000\u0000\u0f72\u0f73"+
		"\u0001\u0000\u0000\u0000\u0f73\u0f74\u0003\u0380\u01c0\u0000\u0f74\u0283"+
		"\u0001\u0000\u0000\u0000\u0f75\u0f76\u0005\u0182\u0000\u0000\u0f76\u0f77"+
		"\u0003\u017e\u00bf\u0000\u0f77\u0f79\u0005\u0183\u0000\u0000\u0f78\u0f7a"+
		"\u0005\u0011\u0000\u0000\u0f79\u0f78\u0001\u0000\u0000\u0000\u0f79\u0f7a"+
		"\u0001\u0000\u0000\u0000\u0f7a\u0f7b\u0001\u0000\u0000\u0000\u0f7b\u0f7c"+
		"\u0003\u0380\u01c0\u0000\u0f7c\u0285\u0001\u0000\u0000\u0000\u0f7d\u0f7f"+
		"\u0003\u02e8\u0174\u0000\u0f7e\u0f80\u0003\u02e4\u0172\u0000\u0f7f\u0f7e"+
		"\u0001\u0000\u0000\u0000\u0f7f\u0f80\u0001\u0000\u0000\u0000\u0f80\u0f89"+
		"\u0001\u0000\u0000\u0000\u0f81\u0f89\u0003\u02e4\u0172\u0000\u0f82\u0f84"+
		"\u0003\u02ea\u0175\u0000\u0f83\u0f85\u0003\u02ec\u0176\u0000\u0f84\u0f83"+
		"\u0001\u0000\u0000\u0000\u0f84\u0f85\u0001\u0000\u0000\u0000\u0f85\u0f89"+
		"\u0001\u0000\u0000\u0000\u0f86\u0f89\u0003\u02ec\u0176\u0000\u0f87\u0f89"+
		"\u0003\u02e6\u0173\u0000\u0f88\u0f7d\u0001\u0000\u0000\u0000\u0f88\u0f81"+
		"\u0001\u0000\u0000\u0000\u0f88\u0f82\u0001\u0000\u0000\u0000\u0f88\u0f86"+
		"\u0001\u0000\u0000\u0000\u0f88\u0f87\u0001\u0000\u0000\u0000\u0f89\u0287"+
		"\u0001\u0000\u0000\u0000\u0f8a\u0f8e\u0003\u0284\u0142\u0000\u0f8b\u0f8e"+
		"\u0003\u027a\u013d\u0000\u0f8c\u0f8e\u0003\u028a\u0145\u0000\u0f8d\u0f8a"+
		"\u0001\u0000\u0000\u0000\u0f8d\u0f8b\u0001\u0000\u0000\u0000\u0f8d\u0f8c"+
		"\u0001\u0000\u0000\u0000\u0f8e\u0289\u0001\u0000\u0000\u0000\u0f8f\u0f90"+
		"\u0003\u0380\u01c0\u0000\u0f90\u0f91\u0005\u0182\u0000\u0000\u0f91\u0f92"+
		"\u0005\u00d6\u0000\u0000\u0f92\u0f94\u0003\u0288\u0144\u0000\u0f93\u0f95"+
		"\u0003\u0286\u0143\u0000\u0f94\u0f93\u0001\u0000\u0000\u0000\u0f94\u0f95"+
		"\u0001\u0000\u0000\u0000\u0f95\u0fa5\u0001\u0000\u0000\u0000\u0f96\u0f97"+
		"\u0005\u01a2\u0000\u0000\u0f97\u0f98\u0005\u0182\u0000\u0000\u0f98\u0f99"+
		"\u0003\u031c\u018e\u0000\u0f99\u0fa2\u0005\u0183\u0000\u0000\u0f9a\u0f9b"+
		"\u0005\u0180\u0000\u0000\u0f9b\u0f9c\u0005\u01a2\u0000\u0000\u0f9c\u0f9d"+
		"\u0005\u0182\u0000\u0000\u0f9d\u0f9e\u0003\u031c\u018e\u0000\u0f9e\u0f9f"+
		"\u0005\u0183\u0000\u0000\u0f9f\u0fa1\u0001\u0000\u0000\u0000\u0fa0\u0f9a"+
		"\u0001\u0000\u0000\u0000\u0fa1\u0fa4\u0001\u0000\u0000\u0000\u0fa2\u0fa0"+
		"\u0001\u0000\u0000\u0000\u0fa2\u0fa3\u0001\u0000\u0000\u0000\u0fa3\u0fa6"+
		"\u0001\u0000\u0000\u0000\u0fa4\u0fa2\u0001\u0000\u0000\u0000\u0fa5\u0f96"+
		"\u0001\u0000\u0000\u0000\u0fa5\u0fa6\u0001\u0000\u0000\u0000\u0fa6\u0fa7"+
		"\u0001\u0000\u0000\u0000\u0fa7\u0fa9\u0005\u0183\u0000\u0000\u0fa8\u0faa"+
		"\u0003\u0380\u01c0\u0000\u0fa9\u0fa8\u0001\u0000\u0000\u0000\u0fa9\u0faa"+
		"\u0001\u0000\u0000\u0000\u0faa\u028b\u0001\u0000\u0000\u0000\u0fab\u0fac"+
		"\u0005\u0174\u0000\u0000\u0fac\u0fad\u0003\u028e\u0147\u0000\u0fad\u028d"+
		"\u0001\u0000\u0000\u0000\u0fae\u0faf\u0003\u031c\u018e\u0000\u0faf\u028f"+
		"\u0001\u0000\u0000\u0000\u0fb0\u0fb1\u0003\u0292\u0149\u0000\u0fb1\u0291"+
		"\u0001\u0000\u0000\u0000\u0fb2\u0fb3\u0005\u016b\u0000\u0000\u0fb3\u0fb4"+
		"\u0003\u0294\u014a\u0000\u0fb4\u0293\u0001\u0000\u0000\u0000\u0fb5\u0fba"+
		"\u0003\u0296\u014b\u0000\u0fb6\u0fb7\u0005\u0180\u0000\u0000\u0fb7\u0fb9"+
		"\u0003\u0296\u014b\u0000\u0fb8\u0fb6\u0001\u0000\u0000\u0000\u0fb9\u0fbc"+
		"\u0001\u0000\u0000\u0000\u0fba\u0fb8\u0001\u0000\u0000\u0000\u0fba\u0fbb"+
		"\u0001\u0000\u0000\u0000\u0fbb\u0fc6\u0001\u0000\u0000\u0000\u0fbc\u0fba"+
		"\u0001\u0000\u0000\u0000\u0fbd\u0fc2\u0003\u0298\u014c\u0000\u0fbe\u0fbf"+
		"\u0005\u0180\u0000\u0000\u0fbf\u0fc1\u0003\u0296\u014b\u0000\u0fc0\u0fbe"+
		"\u0001\u0000\u0000\u0000\u0fc1\u0fc4\u0001\u0000\u0000\u0000\u0fc2\u0fc0"+
		"\u0001\u0000\u0000\u0000\u0fc2\u0fc3\u0001\u0000\u0000\u0000\u0fc3\u0fc6"+
		"\u0001\u0000\u0000\u0000\u0fc4\u0fc2\u0001\u0000\u0000\u0000\u0fc5\u0fb5"+
		"\u0001\u0000\u0000\u0000\u0fc5\u0fbd\u0001\u0000\u0000\u0000\u0fc6\u0295"+
		"\u0001\u0000\u0000\u0000\u0fc7\u0fc8\u0003\u02d2\u0169\u0000\u0fc8\u0297"+
		"\u0001\u0000\u0000\u0000\u0fc9\u0fca\u0005\u0182\u0000\u0000\u0fca\u0fcb"+
		"\u0003\u02da\u016d\u0000\u0fcb\u0fcc\u0005\u0183\u0000\u0000\u0fcc\u0299"+
		"\u0001\u0000\u0000\u0000\u0fcd\u0fce\u0005\u013e\u0000\u0000\u0fce\u0fcf"+
		"\u0005\u0182\u0000\u0000\u0fcf\u0fd0\u0003\u0292\u0149\u0000\u0fd0\u0fd2"+
		"\u0005\u0183\u0000\u0000\u0fd1\u0fd3\u0005\u0011\u0000\u0000\u0fd2\u0fd1"+
		"\u0001\u0000\u0000\u0000\u0fd2\u0fd3\u0001\u0000\u0000\u0000\u0fd3\u0fd4"+
		"\u0001\u0000\u0000\u0000\u0fd4\u0fde\u0003\u0272\u0139\u0000\u0fd5\u0fd6"+
		"\u0005\u0182\u0000\u0000\u0fd6\u0fdb\u0003\u0380\u01c0\u0000\u0fd7\u0fd8"+
		"\u0005\u0180\u0000\u0000\u0fd8\u0fda\u0003\u0380\u01c0\u0000\u0fd9\u0fd7"+
		"\u0001\u0000\u0000\u0000\u0fda\u0fdd\u0001\u0000\u0000\u0000\u0fdb\u0fd9"+
		"\u0001\u0000\u0000\u0000\u0fdb\u0fdc\u0001\u0000\u0000\u0000\u0fdc\u0fdf"+
		"\u0001\u0000\u0000\u0000\u0fdd\u0fdb\u0001\u0000\u0000\u0000\u0fde\u0fd5"+
		"\u0001\u0000\u0000\u0000\u0fde\u0fdf\u0001\u0000\u0000\u0000\u0fdf\u0fe0"+
		"\u0001\u0000\u0000\u0000\u0fe0\u0fe1\u0005\u0183\u0000\u0000\u0fe1\u029b"+
		"\u0001\u0000\u0000\u0000\u0fe2\u0fe4\u0005\u0120\u0000\u0000\u0fe3\u0fe5"+
		"\u0005\u01a6\u0000\u0000\u0fe4\u0fe3\u0001\u0000\u0000\u0000\u0fe4\u0fe5"+
		"\u0001\u0000\u0000\u0000\u0fe5\u0fec\u0001\u0000\u0000\u0000\u0fe6\u0fe8"+
		"\u0003\u029e\u014f\u0000\u0fe7\u0fe6\u0001\u0000\u0000\u0000\u0fe7\u0fe8"+
		"\u0001\u0000\u0000\u0000\u0fe8\u0fe9\u0001\u0000\u0000\u0000\u0fe9\u0fed"+
		"\u0003\u02a0\u0150\u0000\u0fea\u0feb\u0005\u0150\u0000\u0000\u0feb\u0fed"+
		"\u0003\u02a2\u0151\u0000\u0fec\u0fe7\u0001\u0000\u0000\u0000\u0fec\u0fea"+
		"\u0001\u0000\u0000\u0000\u0fed\u0ff0\u0001\u0000\u0000\u0000\u0fee\u0ff0"+
		"\u0003\u02a6\u0153\u0000\u0fef\u0fe2\u0001\u0000\u0000\u0000\u0fef\u0fee"+
		"\u0001\u0000\u0000\u0000\u0ff0\u029d\u0001\u0000\u0000\u0000\u0ff1\u0ff2"+
		"\u0007\u0015\u0000\u0000\u0ff2\u029f\u0001\u0000\u0000\u0000\u0ff3\u0ff8"+
		"\u0003\u02a4\u0152\u0000\u0ff4\u0ff5\u0005\u0180\u0000\u0000\u0ff5\u0ff7"+
		"\u0003\u02a4\u0152\u0000\u0ff6\u0ff4\u0001\u0000\u0000\u0000\u0ff7\u0ffa"+
		"\u0001\u0000\u0000\u0000\u0ff8\u0ff6\u0001\u0000\u0000\u0000\u0ff8\u0ff9"+
		"\u0001\u0000\u0000\u0000\u0ff9\u02a1\u0001\u0000\u0000\u0000\u0ffa\u0ff8"+
		"\u0001\u0000\u0000\u0000\u0ffb\u0ffc\u0005\u0182\u0000\u0000\u0ffc\u0ffd"+
		"\u0003\u02aa\u0155\u0000\u0ffd\u0ffe\u0005\u0183\u0000\u0000\u0ffe\u0fff"+
		"\u0003\u00e6s\u0000\u0fff\u1000\u0003\u00eau\u0000\u1000\u1001\u0005\u0167"+
		"\u0000\u0000\u1001\u100e\u0005\u019c\u0000\u0000\u1002\u100c\u0005\u0011"+
		"\u0000\u0000\u1003\u1006\u0005\u0182\u0000\u0000\u1004\u1007\u0003\u025c"+
		"\u012e\u0000\u1005\u1007\u0003\u010a\u0085\u0000\u1006\u1004\u0001\u0000"+
		"\u0000\u0000\u1006\u1005\u0001\u0000\u0000\u0000\u1007\u1008\u0001\u0000"+
		"\u0000\u0000\u1008\u1009\u0005\u0183\u0000\u0000\u1009\u100d\u0001\u0000"+
		"\u0000\u0000\u100a\u100d\u0003\u025c\u012e\u0000\u100b\u100d\u0003\u010a"+
		"\u0085\u0000\u100c\u1003\u0001\u0000\u0000\u0000\u100c\u100a\u0001\u0000"+
		"\u0000\u0000\u100c\u100b\u0001\u0000\u0000\u0000\u100d\u100f\u0001\u0000"+
		"\u0000\u0000\u100e\u1002\u0001\u0000\u0000\u0000\u100e\u100f\u0001\u0000"+
		"\u0000\u0000\u100f\u1010\u0001\u0000\u0000\u0000\u1010\u1011\u0003\u00e6"+
		"s\u0000\u1011\u1012\u0003\u00e8t\u0000\u1012\u02a3\u0001\u0000\u0000\u0000"+
		"\u1013\u1028\u0003\u0254\u012a\u0000\u1014\u1025\u0003\u031c\u018e\u0000"+
		"\u1015\u1017\u0005\u0011\u0000\u0000\u1016\u1015\u0001\u0000\u0000\u0000"+
		"\u1016\u1017\u0001\u0000\u0000\u0000\u1017\u1018\u0001\u0000\u0000\u0000"+
		"\u1018\u1026\u0003\u0380\u01c0\u0000\u1019\u101a\u0005\u0011\u0000\u0000"+
		"\u101a\u101b\u0005\u0182\u0000\u0000\u101b\u1020\u0003\u0380\u01c0\u0000"+
		"\u101c\u101d\u0005\u0180\u0000\u0000\u101d\u101f\u0003\u0380\u01c0\u0000"+
		"\u101e\u101c\u0001\u0000\u0000\u0000\u101f\u1022\u0001\u0000\u0000\u0000"+
		"\u1020\u101e\u0001\u0000\u0000\u0000\u1020\u1021\u0001\u0000\u0000\u0000"+
		"\u1021\u1023\u0001\u0000\u0000\u0000\u1022\u1020\u0001\u0000\u0000\u0000"+
		"\u1023\u1024\u0005\u0183\u0000\u0000\u1024\u1026\u0001\u0000\u0000\u0000"+
		"\u1025\u1016\u0001\u0000\u0000\u0000\u1025\u1019\u0001\u0000\u0000\u0000"+
		"\u1025\u1026\u0001\u0000\u0000\u0000\u1026\u1028\u0001\u0000\u0000\u0000"+
		"\u1027\u1013\u0001\u0000\u0000\u0000\u1027\u1014\u0001\u0000\u0000\u0000"+
		"\u1028\u02a5\u0001\u0000\u0000\u0000\u1029\u102a\u0007\u001d\u0000\u0000"+
		"\u102a\u102b\u0003\u02aa\u0155\u0000\u102b\u102c\u0003\u00e6s\u0000\u102c"+
		"\u102d\u0003\u00eau\u0000\u102d\u102e\u0005\u0167\u0000\u0000\u102e\u103b"+
		"\u0005\u019c\u0000\u0000\u102f\u1039\u0005\u0011\u0000\u0000\u1030\u1033"+
		"\u0005\u0182\u0000\u0000\u1031\u1034\u0003\u025c\u012e\u0000\u1032\u1034"+
		"\u0003\u010a\u0085\u0000\u1033\u1031\u0001\u0000\u0000\u0000\u1033\u1032"+
		"\u0001\u0000\u0000\u0000\u1034\u1035\u0001\u0000\u0000\u0000\u1035\u1036"+
		"\u0005\u0183\u0000\u0000\u1036\u103a\u0001\u0000\u0000\u0000\u1037\u103a"+
		"\u0003\u025c\u012e\u0000\u1038\u103a\u0003\u010a\u0085\u0000\u1039\u1030"+
		"\u0001\u0000\u0000\u0000\u1039\u1037\u0001\u0000\u0000\u0000\u1039\u1038"+
		"\u0001\u0000\u0000\u0000\u103a\u103c\u0001\u0000\u0000\u0000\u103b\u102f"+
		"\u0001\u0000\u0000\u0000\u103b\u103c\u0001\u0000\u0000\u0000\u103c\u103d"+
		"\u0001\u0000\u0000\u0000\u103d\u103e\u0003\u00e6s\u0000\u103e\u103f\u0003"+
		"\u00e8t\u0000\u103f\u02a7\u0001\u0000\u0000\u0000\u1040\u1043\u0003\u0254"+
		"\u012a\u0000\u1041\u1043\u0003\u031c\u018e\u0000\u1042\u1040\u0001\u0000"+
		"\u0000\u0000\u1042\u1041\u0001\u0000\u0000\u0000\u1043\u02a9\u0001\u0000"+
		"\u0000\u0000\u1044\u1049\u0003\u02a8\u0154\u0000\u1045\u1046\u0005\u0180"+
		"\u0000\u0000\u1046\u1048\u0003\u02a8\u0154\u0000\u1047\u1045\u0001\u0000"+
		"\u0000\u0000\u1048\u104b\u0001\u0000\u0000\u0000\u1049\u1047\u0001\u0000"+
		"\u0000\u0000\u1049\u104a\u0001\u0000\u0000\u0000\u104a\u02ab\u0001\u0000"+
		"\u0000\u0000\u104b\u1049\u0001\u0000\u0000\u0000\u104c\u104d\u0005\u0176"+
		"\u0000\u0000\u104d\u1052\u0003\u02ae\u0157\u0000\u104e\u104f\u0005\u0180"+
		"\u0000\u0000\u104f\u1051\u0003\u02ae\u0157\u0000\u1050\u104e\u0001\u0000"+
		"\u0000\u0000\u1051\u1054\u0001\u0000\u0000\u0000\u1052\u1050\u0001\u0000"+
		"\u0000\u0000\u1052\u1053\u0001\u0000\u0000\u0000\u1053\u02ad\u0001\u0000"+
		"\u0000\u0000\u1054\u1052\u0001\u0000\u0000\u0000\u1055\u1056\u0003\u0380"+
		"\u01c0\u0000\u1056\u1057\u0005\u0011\u0000\u0000\u1057\u1058\u0003\u02b0"+
		"\u0158\u0000\u1058\u02af\u0001\u0000\u0000\u0000\u1059\u1066\u0003\u0380"+
		"\u01c0\u0000\u105a\u105c\u0005\u0182\u0000\u0000\u105b\u105d\u0003\u0380"+
		"\u01c0\u0000\u105c\u105b\u0001\u0000\u0000\u0000\u105c\u105d\u0001\u0000"+
		"\u0000\u0000\u105d\u105f\u0001\u0000\u0000\u0000\u105e\u1060\u0003\u0286"+
		"\u0143\u0000\u105f\u105e\u0001\u0000\u0000\u0000\u105f\u1060\u0001\u0000"+
		"\u0000\u0000\u1060\u1062\u0001\u0000\u0000\u0000\u1061\u1063\u0003\u02b2"+
		"\u0159\u0000\u1062\u1061\u0001\u0000\u0000\u0000\u1062\u1063\u0001\u0000"+
		"\u0000\u0000\u1063\u1064\u0001\u0000\u0000\u0000\u1064\u1066\u0005\u0183"+
		"\u0000\u0000\u1065\u1059\u0001\u0000\u0000\u0000\u1065\u105a\u0001\u0000"+
		"\u0000\u0000\u1066\u02b1\u0001\u0000\u0000\u0000\u1067\u106a\u0003\u02b4"+
		"\u015a\u0000\u1068\u106a\u0003\u02b6\u015b\u0000\u1069\u1067\u0001\u0000"+
		"\u0000\u0000\u1069\u1068\u0001\u0000\u0000\u0000\u106a\u02b3\u0001\u0000"+
		"\u0000\u0000\u106b\u1072\u0005\u011a\u0000\u0000\u106c\u1073\u0003\u02b8"+
		"\u015c\u0000\u106d\u106e\u0005\u0019\u0000\u0000\u106e\u106f\u0003\u02ba"+
		"\u015d\u0000\u106f\u1070\u0005\u000b\u0000\u0000\u1070\u1071\u0003\u02ba"+
		"\u015d\u0000\u1071\u1073\u0001\u0000\u0000\u0000\u1072\u106c\u0001\u0000"+
		"\u0000\u0000\u1072\u106d\u0001\u0000\u0000\u0000\u1073\u02b5\u0001\u0000"+
		"\u0000\u0000\u1074\u107b\u0005\u00fa\u0000\u0000\u1075\u107c\u0003\u02b8"+
		"\u015c\u0000\u1076\u1077\u0005\u0019\u0000\u0000\u1077\u1078\u0003\u02ba"+
		"\u015d\u0000\u1078\u1079\u0005\u000b\u0000\u0000\u1079\u107a\u0003\u02ba"+
		"\u015d\u0000\u107a\u107c\u0001\u0000\u0000\u0000\u107b\u1075\u0001\u0000"+
		"\u0000\u0000\u107b\u1076\u0001\u0000\u0000\u0000\u107c\u02b7\u0001\u0000"+
		"\u0000\u0000\u107d\u107e\u0005\u0157\u0000\u0000\u107e\u1084\u0005\u00ed"+
		"\u0000\u0000\u107f\u1080\u0005>\u0000\u0000\u1080\u1084\u0005\u0119\u0000"+
		"\u0000\u1081\u1082\u0005\u01a1\u0000\u0000\u1082\u1084\u0005\u00ed\u0000"+
		"\u0000\u1083\u107d\u0001\u0000\u0000\u0000\u1083\u107f\u0001\u0000\u0000"+
		"\u0000\u1083\u1081\u0001\u0000\u0000\u0000\u1084\u02b9\u0001\u0000\u0000"+
		"\u0000\u1085\u1086\u0007\u001e\u0000\u0000\u1086\u108a\u0007\u001f\u0000"+
		"\u0000\u1087\u1088\u0005>\u0000\u0000\u1088\u108a\u0005\u0119\u0000\u0000"+
		"\u1089\u1085\u0001\u0000\u0000\u0000\u1089\u1087\u0001\u0000\u0000\u0000"+
		"\u108a\u02bb\u0001\u0000\u0000\u0000\u108b\u108c\u0005\u008b\u0000\u0000"+
		"\u108c\u108d\u0005 \u0000\u0000\u108d\u108e\u0003\u02be\u015f\u0000\u108e"+
		"\u02bd\u0001\u0000\u0000\u0000\u108f\u1093\u0003\u02c2\u0161\u0000\u1090"+
		"\u1093\u0003\u02c4\u0162\u0000\u1091\u1093\u0003\u02c0\u0160\u0000\u1092"+
		"\u108f\u0001\u0000\u0000\u0000\u1092\u1090\u0001\u0000\u0000\u0000\u1092"+
		"\u1091\u0001\u0000\u0000\u0000\u1093\u02bf\u0001\u0000\u0000\u0000\u1094"+
		"\u1095\u0005\u0182\u0000\u0000\u1095\u1096\u0005\u0183\u0000\u0000\u1096"+
		"\u02c1\u0001\u0000\u0000\u0000\u1097\u109a\u0005\u0118\u0000\u0000\u1098"+
		"\u109a\u0005=\u0000\u0000\u1099\u1097\u0001\u0000\u0000\u0000\u1099\u1098"+
		"\u0001\u0000\u0000\u0000\u109a\u109b\u0001\u0000\u0000\u0000\u109b\u109c"+
		"\u0005\u0182\u0000\u0000\u109c\u10a1\u0003\u031c\u018e\u0000\u109d\u109e"+
		"\u0005\u0180\u0000\u0000\u109e\u10a0\u0003\u031c\u018e\u0000\u109f\u109d"+
		"\u0001\u0000\u0000\u0000\u10a0\u10a3\u0001\u0000\u0000\u0000\u10a1\u109f"+
		"\u0001\u0000\u0000\u0000\u10a1\u10a2\u0001\u0000\u0000\u0000\u10a2\u10a4"+
		"\u0001\u0000\u0000\u0000\u10a3\u10a1\u0001\u0000\u0000\u0000\u10a4\u10a5"+
		"\u0005\u0183\u0000\u0000\u10a5\u02c3\u0001\u0000\u0000\u0000\u10a6\u10ab"+
		"\u0003\u02d4\u016a\u0000\u10a7\u10a8\u0005\u0177\u0000\u0000\u10a8\u10ac"+
		"\u0005\u0118\u0000\u0000\u10a9\u10aa\u0005\u0177\u0000\u0000\u10aa\u10ac"+
		"\u0005=\u0000\u0000\u10ab\u10a7\u0001\u0000\u0000\u0000\u10ab\u10a9\u0001"+
		"\u0000\u0000\u0000\u10ab\u10ac\u0001\u0000\u0000\u0000\u10ac\u10ba\u0001"+
		"\u0000\u0000\u0000\u10ad\u10ae\u0005\u008c\u0000\u0000\u10ae\u10af\u0005"+
		"\u0126\u0000\u0000\u10af\u10b0\u0005\u0182\u0000\u0000\u10b0\u10b5\u0003"+
		"\u02c6\u0163\u0000\u10b1\u10b2\u0005\u0180\u0000\u0000\u10b2\u10b4\u0003"+
		"\u02c6\u0163\u0000\u10b3\u10b1\u0001\u0000\u0000\u0000\u10b4\u10b7\u0001"+
		"\u0000\u0000\u0000\u10b5\u10b3\u0001\u0000\u0000\u0000\u10b5\u10b6\u0001"+
		"\u0000\u0000\u0000\u10b6\u10b8\u0001\u0000\u0000\u0000\u10b7\u10b5\u0001"+
		"\u0000\u0000\u0000\u10b8\u10b9\u0005\u0183\u0000\u0000\u10b9\u10bb\u0001"+
		"\u0000\u0000\u0000\u10ba\u10ad\u0001\u0000\u0000\u0000\u10ba\u10bb\u0001"+
		"\u0000\u0000\u0000\u10bb\u02c5\u0001\u0000\u0000\u0000\u10bc\u10bf\u0003"+
		"\u02c8\u0164\u0000\u10bd\u10bf\u0003\u02ca\u0165\u0000\u10be\u10bc\u0001"+
		"\u0000\u0000\u0000\u10be\u10bd\u0001\u0000\u0000\u0000\u10bf\u02c7\u0001"+
		"\u0000\u0000\u0000\u10c0\u10c2\u0005\u0182\u0000\u0000\u10c1\u10c3\u0003"+
		"\u031c\u018e\u0000\u10c2\u10c1\u0001\u0000\u0000\u0000\u10c2\u10c3\u0001"+
		"\u0000\u0000\u0000\u10c3\u10c8\u0001\u0000\u0000\u0000\u10c4\u10c5\u0005"+
		"\u0180\u0000\u0000\u10c5\u10c7\u0003\u031c\u018e\u0000\u10c6\u10c4\u0001"+
		"\u0000\u0000\u0000\u10c7\u10ca\u0001\u0000\u0000\u0000\u10c8\u10c6\u0001"+
		"\u0000\u0000\u0000\u10c8\u10c9\u0001\u0000\u0000\u0000\u10c9\u10cb\u0001"+
		"\u0000\u0000\u0000\u10ca\u10c8\u0001\u0000\u0000\u0000\u10cb\u10cc\u0005"+
		"\u0183\u0000\u0000\u10cc\u02c9\u0001\u0000\u0000\u0000\u10cd\u10ce\u0003"+
		"\u031c\u018e\u0000\u10ce\u02cb\u0001\u0000\u0000\u0000\u10cf\u10d0\u0005"+
		"\u008d\u0000\u0000\u10d0\u10d1\u0003\u02d0\u0168\u0000\u10d1\u02cd\u0001"+
		"\u0000\u0000\u0000\u10d2\u10d3\u0005\u00f6\u0000\u0000\u10d3\u10d4\u0003"+
		"\u031c\u018e\u0000\u10d4\u02cf\u0001\u0000\u0000\u0000\u10d5\u10d6\u0003"+
		"\u031c\u018e\u0000\u10d6\u02d1\u0001\u0000\u0000\u0000\u10d7\u10d8\u0005"+
		"\u0182\u0000\u0000\u10d8\u10d9\u0003\u02d4\u016a\u0000\u10d9\u10da\u0005"+
		"\u0183\u0000\u0000\u10da\u02d3\u0001\u0000\u0000\u0000\u10db\u10dd\u0003"+
		"\u02d8\u016c\u0000\u10dc\u10de\u0003\u02d6\u016b\u0000\u10dd\u10dc\u0001"+
		"\u0000\u0000\u0000\u10dd\u10de\u0001\u0000\u0000\u0000\u10de\u02d5\u0001"+
		"\u0000\u0000\u0000\u10df\u10e0\u0005\u0180\u0000\u0000\u10e0\u10e2\u0003"+
		"\u02d8\u016c\u0000\u10e1\u10df\u0001\u0000\u0000\u0000\u10e2\u10e3\u0001"+
		"\u0000\u0000\u0000\u10e3\u10e1\u0001\u0000\u0000\u0000\u10e3\u10e4\u0001"+
		"\u0000\u0000\u0000\u10e4\u02d7\u0001\u0000\u0000\u0000\u10e5\u10e8\u0003"+
		"\u0258\u012c\u0000\u10e6\u10e8\u0003\u031c\u018e\u0000\u10e7\u10e5\u0001"+
		"\u0000\u0000\u0000\u10e7\u10e6\u0001\u0000\u0000\u0000\u10e8\u02d9\u0001"+
		"\u0000\u0000\u0000\u10e9\u10eb\u0003\u031c\u018e\u0000\u10ea\u10ec\u0005"+
		"\u0011\u0000\u0000\u10eb\u10ea\u0001\u0000\u0000\u0000\u10eb\u10ec\u0001"+
		"\u0000\u0000\u0000\u10ec\u10ee\u0001\u0000\u0000\u0000\u10ed\u10ef\u0003"+
		"\u0380\u01c0\u0000\u10ee\u10ed\u0001\u0000\u0000\u0000\u10ee\u10ef\u0001"+
		"\u0000\u0000\u0000\u10ef\u10f4\u0001\u0000\u0000\u0000\u10f0\u10f1\u0005"+
		"\u0180\u0000\u0000\u10f1\u10f3\u0003\u02dc\u016e\u0000\u10f2\u10f0\u0001"+
		"\u0000\u0000\u0000\u10f3\u10f6\u0001\u0000\u0000\u0000\u10f4\u10f2\u0001"+
		"\u0000\u0000\u0000\u10f4\u10f5\u0001\u0000\u0000\u0000\u10f5\u02db\u0001"+
		"\u0000\u0000\u0000\u10f6\u10f4\u0001\u0000\u0000\u0000\u10f7\u10f9\u0003"+
		"\u031c\u018e\u0000\u10f8\u10fa\u0005\u0011\u0000\u0000\u10f9\u10f8\u0001"+
		"\u0000\u0000\u0000\u10f9\u10fa\u0001\u0000\u0000\u0000\u10fa\u10fc\u0001"+
		"\u0000\u0000\u0000\u10fb\u10fd\u0003\u0380\u01c0\u0000\u10fc\u10fb\u0001"+
		"\u0000\u0000\u0000\u10fc\u10fd\u0001\u0000\u0000\u0000\u10fd\u02dd\u0001"+
		"\u0000\u0000\u0000\u10fe\u1101\u0003\u02d2\u0169\u0000\u10ff\u1101\u0003"+
		"\u02d4\u016a\u0000\u1100\u10fe\u0001\u0000\u0000\u0000\u1100\u10ff\u0001"+
		"\u0000\u0000\u0000\u1101\u02df\u0001\u0000\u0000\u0000\u1102\u1103\u0005"+
		"\u0182\u0000\u0000\u1103\u1108\u0003\u014a\u00a5\u0000\u1104\u1105\u0005"+
		"\u0180\u0000\u0000\u1105\u1107\u0003\u014a\u00a5\u0000\u1106\u1104\u0001"+
		"\u0000\u0000\u0000\u1107\u110a\u0001\u0000\u0000\u0000\u1108\u1106\u0001"+
		"\u0000\u0000\u0000\u1108\u1109\u0001\u0000\u0000\u0000\u1109\u110b\u0001"+
		"\u0000\u0000\u0000\u110a\u1108\u0001\u0000\u0000\u0000\u110b\u110c\u0005"+
		"\u0183\u0000\u0000\u110c\u02e1\u0001\u0000\u0000\u0000\u110d\u1112\u0003"+
		"\u014a\u00a5\u0000\u110e\u110f\u0005\u0180\u0000\u0000\u110f\u1111\u0003"+
		"\u014a\u00a5\u0000\u1110\u110e\u0001\u0000\u0000\u0000\u1111\u1114\u0001"+
		"\u0000\u0000\u0000\u1112\u1110\u0001\u0000\u0000\u0000\u1112\u1113\u0001"+
		"\u0000\u0000\u0000\u1113\u02e3\u0001\u0000\u0000\u0000\u1114\u1112\u0001"+
		"\u0000\u0000\u0000\u1115\u1116\u0005\u00db\u0000\u0000\u1116\u1117\u0005"+
		" \u0000\u0000\u1117\u111c\u0003\u014a\u00a5\u0000\u1118\u1119\u0005\u0180"+
		"\u0000\u0000\u1119\u111b\u0003\u014a\u00a5\u0000\u111a\u1118\u0001\u0000"+
		"\u0000\u0000\u111b\u111e\u0001\u0000\u0000\u0000\u111c\u111a\u0001\u0000"+
		"\u0000\u0000\u111c\u111d\u0001\u0000\u0000\u0000\u111d\u02e5\u0001\u0000"+
		"\u0000\u0000\u111e\u111c\u0001\u0000\u0000\u0000\u111f\u1120\u0005)\u0000"+
		"\u0000\u1120\u1121\u0005 \u0000\u0000\u1121\u1122\u0003\u02de\u016f\u0000"+
		"\u1122\u02e7\u0001\u0000\u0000\u0000\u1123\u1124\u0005\u00e3\u0000\u0000"+
		"\u1124\u1125\u0005 \u0000\u0000\u1125\u1126\u0003\u02de\u016f\u0000\u1126"+
		"\u02e9\u0001\u0000\u0000\u0000\u1127\u1128\u0005]\u0000\u0000\u1128\u1129"+
		"\u0005 \u0000\u0000\u1129\u112a\u0003\u02de\u016f\u0000\u112a\u02eb\u0001"+
		"\u0000\u0000\u0000\u112b\u112c\u0005\u012f\u0000\u0000\u112c\u112f\u0005"+
		" \u0000\u0000\u112d\u1130\u0003\u02e0\u0170\u0000\u112e\u1130\u0003\u02e2"+
		"\u0171\u0000\u112f\u112d\u0001\u0000\u0000\u0000\u112f\u112e\u0001\u0000"+
		"\u0000\u0000\u1130\u02ed\u0001\u0000\u0000\u0000\u1131\u1132\u0005\u0152"+
		"\u0000\u0000\u1132\u1136\u0005\u0182\u0000\u0000\u1133\u1137\u0005\u00ac"+
		"\u0000\u0000\u1134\u1137\u0005\u014c\u0000\u0000\u1135\u1137\u0005\u001d"+
		"\u0000\u0000\u1136\u1133\u0001\u0000\u0000\u0000\u1136\u1134\u0001\u0000"+
		"\u0000\u0000\u1136\u1135\u0001\u0000\u0000\u0000\u1136\u1137\u0001\u0000"+
		"\u0000\u0000\u1137\u1139\u0001\u0000\u0000\u0000\u1138\u113a\u0003\u02a8"+
		"\u0154\u0000\u1139\u1138\u0001\u0000\u0000\u0000\u1139\u113a\u0001\u0000"+
		"\u0000\u0000\u113a\u113b\u0001\u0000\u0000\u0000\u113b\u113c\u0005\u0086"+
		"\u0000\u0000\u113c\u113d\u0003\u02a8\u0154\u0000\u113d\u113e\u0005\u0183"+
		"\u0000\u0000\u113e\u02ef\u0001\u0000\u0000\u0000\u113f\u1168\u0003\u02ee"+
		"\u0177\u0000\u1140\u1141\u0003\u02f4\u017a\u0000\u1141\u1150\u0005\u0182"+
		"\u0000\u0000\u1142\u1151\u0005\u0192\u0000\u0000\u1143\u1145\u0003\u029e"+
		"\u014f\u0000\u1144\u1143\u0001\u0000\u0000\u0000\u1144\u1145\u0001\u0000"+
		"\u0000\u0000\u1145\u114e\u0001\u0000\u0000\u0000\u1146\u114b\u0003\u02a8"+
		"\u0154\u0000\u1147\u1148\u0005\u0180\u0000\u0000\u1148\u114a\u0003\u02a8"+
		"\u0154\u0000\u1149\u1147\u0001\u0000\u0000\u0000\u114a\u114d\u0001\u0000"+
		"\u0000\u0000\u114b\u1149\u0001\u0000\u0000\u0000\u114b\u114c\u0001\u0000"+
		"\u0000\u0000\u114c\u114f\u0001\u0000\u0000\u0000\u114d\u114b\u0001\u0000"+
		"\u0000\u0000\u114e\u1146\u0001\u0000\u0000\u0000\u114e\u114f\u0001\u0000"+
		"\u0000\u0000\u114f\u1151\u0001\u0000\u0000\u0000\u1150\u1142\u0001\u0000"+
		"\u0000\u0000\u1150\u1144\u0001\u0000\u0000\u0000\u1151\u1165\u0001\u0000"+
		"\u0000\u0000\u1152\u1153\u0005\u0183\u0000\u0000\u1153\u1154\u0005\u0178"+
		"\u0000\u0000\u1154\u1155\u0005\u008b\u0000\u0000\u1155\u1156\u0005\u0182"+
		"\u0000\u0000\u1156\u1157\u0003\u02e4\u0172\u0000\u1157\u1158\u0005\u0183"+
		"\u0000\u0000\u1158\u1166\u0001\u0000\u0000\u0000\u1159\u115b\u0005\u0183"+
		"\u0000\u0000\u115a\u115c\u0003\u02f2\u0179\u0000\u115b\u115a\u0001\u0000"+
		"\u0000\u0000\u115b\u115c\u0001\u0000\u0000\u0000\u115c\u115d\u0001\u0000"+
		"\u0000\u0000\u115d\u115e\u0005\u00e0\u0000\u0000\u115e\u1166\u0003\u02b0"+
		"\u0158\u0000\u115f\u1160\u0003\u02f2\u0179\u0000\u1160\u1161\u0005\u0183"+
		"\u0000\u0000\u1161\u1162\u0005\u00e0\u0000\u0000\u1162\u1163\u0003\u02b0"+
		"\u0158\u0000\u1163\u1166\u0001\u0000\u0000\u0000\u1164\u1166\u0005\u0183"+
		"\u0000\u0000\u1165\u1152\u0001\u0000\u0000\u0000\u1165\u1159\u0001\u0000"+
		"\u0000\u0000\u1165\u115f\u0001\u0000\u0000\u0000\u1165\u1164\u0001\u0000"+
		"\u0000\u0000\u1166\u1168\u0001\u0000\u0000\u0000\u1167\u113f\u0001\u0000"+
		"\u0000\u0000\u1167\u1140\u0001\u0000\u0000\u0000\u1168\u02f1\u0001\u0000"+
		"\u0000\u0000\u1169\u116a\u0005\u010f\u0000\u0000\u116a\u116e\u0005\u00d2"+
		"\u0000\u0000\u116b\u116c\u0005\u0092\u0000\u0000\u116c\u116e\u0005\u00d2"+
		"\u0000\u0000\u116d\u1169\u0001\u0000\u0000\u0000\u116d\u116b\u0001\u0000"+
		"\u0000\u0000\u116e\u02f3\u0001\u0000\u0000\u0000\u116f\u1172\u0003\u0382"+
		"\u01c1\u0000\u1170\u1172\u0003\u0388\u01c4\u0000\u1171\u116f\u0001\u0000"+
		"\u0000\u0000\u1171\u1170\u0001\u0000\u0000\u0000\u1172\u02f5\u0001\u0000"+
		"\u0000\u0000\u1173\u1174\u0005$\u0000\u0000\u1174\u1175\u0005\u0182\u0000"+
		"\u0000\u1175\u1176\u0003\u031c\u018e\u0000\u1176\u1177\u0005\u0011\u0000"+
		"\u0000\u1177\u117a\u0003\u0172\u00b9\u0000\u1178\u1179\u0005\u0084\u0000"+
		"\u0000\u1179\u117b\u0005\u019c\u0000\u0000\u117a\u1178\u0001\u0000\u0000"+
		"\u0000\u117a\u117b\u0001\u0000\u0000\u0000\u117b\u117c\u0001\u0000\u0000"+
		"\u0000\u117c\u117d\u0005\u0183\u0000\u0000\u117d\u02f7\u0001\u0000\u0000"+
		"\u0000\u117e\u117f\u0005#\u0000\u0000\u117f\u1185\u0003\u031c\u018e\u0000"+
		"\u1180\u1181\u0005\u0173\u0000\u0000\u1181\u1182\u0003\u031c\u018e\u0000"+
		"\u1182\u1183\u0005\u0144\u0000\u0000\u1183\u1184\u0003\u031c\u018e\u0000"+
		"\u1184\u1186\u0001\u0000\u0000\u0000\u1185\u1180\u0001\u0000\u0000\u0000"+
		"\u1186\u1187\u0001\u0000\u0000\u0000\u1187\u1185\u0001\u0000\u0000\u0000"+
		"\u1187\u1188\u0001\u0000\u0000\u0000\u1188\u118b\u0001\u0000\u0000\u0000"+
		"\u1189\u118a\u0005e\u0000\u0000\u118a\u118c\u0003\u031c\u018e\u0000\u118b"+
		"\u1189\u0001\u0000\u0000\u0000\u118b\u118c\u0001\u0000\u0000\u0000\u118c"+
		"\u118d\u0001\u0000\u0000\u0000\u118d\u118e\u0005g\u0000\u0000\u118e\u02f9"+
		"\u0001\u0000\u0000\u0000\u118f\u1195\u0005#\u0000\u0000\u1190\u1191\u0005"+
		"\u0173\u0000\u0000\u1191\u1192\u0003\u031c\u018e\u0000\u1192\u1193\u0005"+
		"\u0144\u0000\u0000\u1193\u1194\u0003\u031c\u018e\u0000\u1194\u1196\u0001"+
		"\u0000\u0000\u0000\u1195\u1190\u0001\u0000\u0000\u0000\u1196\u1197\u0001"+
		"\u0000\u0000\u0000\u1197\u1195\u0001\u0000\u0000\u0000\u1197\u1198\u0001"+
		"\u0000\u0000\u0000\u1198\u119b\u0001\u0000\u0000\u0000\u1199\u119a\u0005"+
		"e\u0000\u0000\u119a\u119c\u0003\u031c\u018e\u0000\u119b\u1199\u0001\u0000"+
		"\u0000\u0000\u119b\u119c\u0001\u0000\u0000\u0000\u119c\u119d\u0001\u0000"+
		"\u0000\u0000\u119d\u119e\u0005g\u0000\u0000\u119e\u02fb\u0001\u0000\u0000"+
		"\u0000\u119f\u11a0\u0005\u007f\u0000\u0000\u11a0\u11a1\u0005\u0182\u0000"+
		"\u0000\u11a1\u11a4\u0003\u031c\u018e\u0000\u11a2\u11a3\u0005\u014a\u0000"+
		"\u0000\u11a3\u11a5\u0003\u02fe\u017f\u0000\u11a4\u11a2\u0001\u0000\u0000"+
		"\u0000\u11a4\u11a5\u0001\u0000\u0000\u0000\u11a5\u11a6\u0001\u0000\u0000"+
		"\u0000\u11a6\u11a7\u0005\u0183\u0000\u0000\u11a7\u02fd\u0001\u0000\u0000"+
		"\u0000\u11a8\u11a9\u0007 \u0000\u0000\u11a9\u02ff\u0001\u0000\u0000\u0000"+
		"\u11aa\u11ab\u0005w\u0000\u0000\u11ab\u11ac\u0005\u0182\u0000\u0000\u11ac"+
		"\u11ad\u0003\u0302\u0181\u0000\u11ad\u11ae\u0005\u0086\u0000\u0000\u11ae"+
		"\u11af\u0003\u031c\u018e\u0000\u11af\u11b0\u0005\u0183\u0000\u0000\u11b0"+
		"\u0301\u0001\u0000\u0000\u0000\u11b1\u11b2\u0007!\u0000\u0000\u11b2\u0303"+
		"\u0001\u0000\u0000\u0000\u11b3\u11c1\u0003\u0316\u018b\u0000\u11b4\u11c1"+
		"\u0005\u01a1\u0000\u0000\u11b5\u11c1\u0003\u030e\u0187\u0000\u11b6\u11c1"+
		"\u0003\u0310\u0188\u0000\u11b7\u11c1\u0003\u0312\u0189\u0000\u11b8\u11c1"+
		"\u0005\u019c\u0000\u0000\u11b9\u11c1\u0003\u030a\u0185\u0000\u11ba\u11c1"+
		"\u0005\u019e\u0000\u0000\u11bb\u11c1\u0005\u019f\u0000\u0000\u11bc\u11c1"+
		"\u0003\u030c\u0186\u0000\u11bd\u11c1\u0003\u036a\u01b5\u0000\u11be\u11c1"+
		"\u0005\u00d1\u0000\u0000\u11bf\u11c1\u0003\u0306\u0183\u0000\u11c0\u11b3"+
		"\u0001\u0000\u0000\u0000\u11c0\u11b4\u0001\u0000\u0000\u0000\u11c0\u11b5"+
		"\u0001\u0000\u0000\u0000\u11c0\u11b6\u0001\u0000\u0000\u0000\u11c0\u11b7"+
		"\u0001\u0000\u0000\u0000\u11c0\u11b8\u0001\u0000\u0000\u0000\u11c0\u11b9"+
		"\u0001\u0000\u0000\u0000\u11c0\u11ba\u0001\u0000\u0000\u0000\u11c0\u11bb"+
		"\u0001\u0000\u0000\u0000\u11c0\u11bc\u0001\u0000\u0000\u0000\u11c0\u11bd"+
		"\u0001\u0000\u0000\u0000\u11c0\u11be\u0001\u0000\u0000\u0000\u11c0\u11bf"+
		"\u0001\u0000\u0000\u0000\u11c1\u0305\u0001\u0000\u0000\u0000\u11c2\u11c3"+
		"\u0003\u0308\u0184\u0000\u11c3\u0307\u0001\u0000\u0000\u0000\u11c4\u11c5"+
		"\u0005\u019a\u0000\u0000\u11c5\u0309\u0001\u0000\u0000\u0000\u11c6\u11c8"+
		"\u0005\u019c\u0000\u0000\u11c7\u11c9\u0005\u019c\u0000\u0000\u11c8\u11c7"+
		"\u0001\u0000\u0000\u0000\u11c9\u11ca\u0001\u0000\u0000\u0000\u11ca\u11c8"+
		"\u0001\u0000\u0000\u0000\u11ca\u11cb\u0001\u0000\u0000\u0000\u11cb\u030b"+
		"\u0001\u0000\u0000\u0000\u11cc\u11cd\u0005\u01a3\u0000\u0000\u11cd\u11ce"+
		"\u0005\u019d\u0000\u0000\u11ce\u030d\u0001\u0000\u0000\u0000\u11cf\u11d0"+
		"\u0005G\u0000\u0000\u11d0\u11d3\u0005\u019c\u0000\u0000\u11d1\u11d3\u0005"+
		"?\u0000\u0000\u11d2\u11cf\u0001\u0000\u0000\u0000\u11d2\u11d1\u0001\u0000"+
		"\u0000\u0000\u11d3\u030f\u0001\u0000\u0000\u0000\u11d4\u11d5\u0005\u0146"+
		"\u0000\u0000\u11d5\u11d8\u0005\u019c\u0000\u0000\u11d6\u11d8\u0005@\u0000"+
		"\u0000\u11d7\u11d4\u0001\u0000\u0000\u0000\u11d7\u11d6\u0001\u0000\u0000"+
		"\u0000\u11d8\u0311\u0001\u0000\u0000\u0000\u11d9\u11da\u0005\u0147\u0000"+
		"\u0000\u11da\u11db\u0005\u019c\u0000\u0000\u11db\u0313\u0001\u0000\u0000"+
		"\u0000\u11dc\u11dd\u0007\u0019\u0000\u0000\u11dd\u0315\u0001\u0000\u0000"+
		"\u0000\u11de\u11df\u0003\u0314\u018a\u0000\u11df\u11e0\u0003\u031a\u018d"+
		"\u0000\u11e0\u0317\u0001\u0000\u0000\u0000\u11e1\u11e2\u0005\u0182\u0000"+
		"\u0000\u11e2\u11e3\u0003\u0314\u018a\u0000\u11e3\u11e4\u0005\u0183\u0000"+
		"\u0000\u11e4\u11e5\u0003\u031a\u018d\u0000\u11e5\u11f1\u0001\u0000\u0000"+
		"\u0000\u11e6\u11ec\u0005\u009e\u0000\u0000\u11e7\u11ed\u0003\u0314\u018a"+
		"\u0000\u11e8\u11e9\u0005\u0182\u0000\u0000\u11e9\u11ea\u0003\u031c\u018e"+
		"\u0000\u11ea\u11eb\u0005\u0183\u0000\u0000\u11eb\u11ed\u0001\u0000\u0000"+
		"\u0000\u11ec\u11e7\u0001\u0000\u0000\u0000\u11ec\u11e8\u0001\u0000\u0000"+
		"\u0000\u11ed\u11ee\u0001\u0000\u0000\u0000\u11ee\u11ef\u0003\u031a\u018d"+
		"\u0000\u11ef\u11f1\u0001\u0000\u0000\u0000\u11f0\u11e1\u0001\u0000\u0000"+
		"\u0000\u11f0\u11e6\u0001\u0000\u0000\u0000\u11f1\u0319\u0001\u0000\u0000"+
		"\u0000\u11f2\u11f3\u0005\u017c\u0000\u0000\u11f3\u11f4\u0005\u014a\u0000"+
		"\u0000\u11f4\u11ff\u0005\u00c7\u0000\u0000\u11f5\u11f6\u0005I\u0000\u0000"+
		"\u11f6\u11f7\u0005\u014a\u0000\u0000\u11f7\u11ff\u0005\u011f\u0000\u0000"+
		"\u11f8\u11ff\u0005\u017c\u0000\u0000\u11f9\u11ff\u0005\u00c7\u0000\u0000"+
		"\u11fa\u11ff\u0005I\u0000\u0000\u11fb\u11ff\u0005\u008f\u0000\u0000\u11fc"+
		"\u11ff\u0005\u00c6\u0000\u0000\u11fd\u11ff\u0005\u011f\u0000\u0000\u11fe"+
		"\u11f2\u0001\u0000\u0000\u0000\u11fe\u11f5\u0001\u0000\u0000\u0000\u11fe"+
		"\u11f8\u0001\u0000\u0000\u0000\u11fe\u11f9\u0001\u0000\u0000\u0000\u11fe"+
		"\u11fa\u0001\u0000\u0000\u0000\u11fe\u11fb\u0001\u0000\u0000\u0000\u11fe"+
		"\u11fc\u0001\u0000\u0000\u0000\u11fe\u11fd\u0001\u0000\u0000\u0000\u11ff"+
		"\u031b\u0001\u0000\u0000\u0000\u1200\u1201\u0003\u0368\u01b4\u0000\u1201"+
		"\u031d\u0001\u0000\u0000\u0000\u1202\u120e\u0003\u0304\u0182\u0000\u1203"+
		"\u120e\u0003\u0318\u018c\u0000\u1204\u120e\u0003\u02f6\u017b\u0000\u1205"+
		"\u120e\u0003\u0300\u0180\u0000\u1206\u120e\u0003\u02fc\u017e\u0000\u1207"+
		"\u120e\u0003\u02f8\u017c\u0000\u1208\u120e\u0003\u02fa\u017d\u0000\u1209"+
		"\u120e\u0003\u0342\u01a1\u0000\u120a\u120e\u0003\u02f0\u0178\u0000\u120b"+
		"\u120e\u0003\u0256\u012b\u0000\u120c\u120e\u0003\u02d2\u0169\u0000\u120d"+
		"\u1202\u0001\u0000\u0000\u0000\u120d\u1203\u0001\u0000\u0000\u0000\u120d"+
		"\u1204\u0001\u0000\u0000\u0000\u120d\u1205\u0001\u0000\u0000\u0000\u120d"+
		"\u1206\u0001\u0000\u0000\u0000\u120d\u1207\u0001\u0000\u0000\u0000\u120d"+
		"\u1208\u0001\u0000\u0000\u0000\u120d\u1209\u0001\u0000\u0000\u0000\u120d"+
		"\u120a\u0001\u0000\u0000\u0000\u120d\u120b\u0001\u0000\u0000\u0000\u120d"+
		"\u120c\u0001\u0000\u0000\u0000\u120e\u031f\u0001\u0000\u0000\u0000\u120f"+
		"\u1218\u0003\u031e\u018f\u0000\u1210\u1211\u0005\u0184\u0000\u0000\u1211"+
		"\u1212\u0003\u031c\u018e\u0000\u1212\u1213\u0005\u0185\u0000\u0000\u1213"+
		"\u1217\u0001\u0000\u0000\u0000\u1214\u1215\u0005\u017e\u0000\u0000\u1215"+
		"\u1217\u0003\u0380\u01c0\u0000\u1216\u1210\u0001\u0000\u0000\u0000\u1216"+
		"\u1214\u0001\u0000\u0000\u0000\u1217\u121a\u0001\u0000\u0000\u0000\u1218"+
		"\u1216\u0001\u0000\u0000\u0000\u1218\u1219\u0001\u0000\u0000\u0000\u1219"+
		"\u0321\u0001\u0000\u0000\u0000\u121a\u1218\u0001\u0000\u0000\u0000\u121b"+
		"\u121c\u0007\"\u0000\u0000\u121c\u0323\u0001\u0000\u0000\u0000\u121d\u121f"+
		"\u0003\u0322\u0191\u0000\u121e\u121d\u0001\u0000\u0000\u0000\u121f\u1222"+
		"\u0001\u0000\u0000\u0000\u1220\u121e\u0001\u0000\u0000\u0000\u1220\u1221"+
		"\u0001\u0000\u0000\u0000\u1221\u1223\u0001\u0000\u0000\u0000\u1222\u1220"+
		"\u0001\u0000\u0000\u0000\u1223\u1224\u0003\u0320\u0190\u0000\u1224\u0325"+
		"\u0001\u0000\u0000\u0000\u1225\u1226\u0005\u0199\u0000\u0000\u1226\u0327"+
		"\u0001\u0000\u0000\u0000\u1227\u122d\u0003\u0324\u0192\u0000\u1228\u1229"+
		"\u0003\u0326\u0193\u0000\u1229\u122a\u0003\u0324\u0192\u0000\u122a\u122c"+
		"\u0001\u0000\u0000\u0000\u122b\u1228\u0001\u0000\u0000\u0000\u122c\u122f"+
		"\u0001\u0000\u0000\u0000\u122d\u122b\u0001\u0000\u0000\u0000\u122d\u122e"+
		"\u0001\u0000\u0000\u0000\u122e\u0329\u0001\u0000\u0000\u0000\u122f\u122d"+
		"\u0001\u0000\u0000\u0000\u1230\u1231\u0007#\u0000\u0000\u1231\u032b\u0001"+
		"\u0000\u0000\u0000\u1232\u1238\u0003\u0328\u0194\u0000\u1233\u1234\u0003"+
		"\u032a\u0195\u0000\u1234\u1235\u0003\u0328\u0194\u0000\u1235\u1237\u0001"+
		"\u0000\u0000\u0000\u1236\u1233\u0001\u0000\u0000\u0000\u1237\u123a\u0001"+
		"\u0000\u0000\u0000\u1238\u1236\u0001\u0000\u0000\u0000\u1238\u1239\u0001"+
		"\u0000\u0000\u0000\u1239\u032d\u0001\u0000\u0000\u0000\u123a\u1238\u0001"+
		"\u0000\u0000\u0000\u123b\u123c\u0007$\u0000\u0000\u123c\u032f\u0001\u0000"+
		"\u0000\u0000\u123d\u1243\u0003\u032c\u0196\u0000\u123e\u123f\u0003\u032e"+
		"\u0197\u0000\u123f\u1240\u0003\u032c\u0196\u0000\u1240\u1242\u0001\u0000"+
		"\u0000\u0000\u1241\u123e\u0001\u0000\u0000\u0000\u1242\u1245\u0001\u0000"+
		"\u0000\u0000\u1243\u1241\u0001\u0000\u0000\u0000\u1243\u1244\u0001\u0000"+
		"\u0000\u0000\u1244\u0331\u0001\u0000\u0000\u0000\u1245\u1243\u0001\u0000"+
		"\u0000\u0000\u1246\u1247\u0005\u0198\u0000\u0000\u1247\u0333\u0001\u0000"+
		"\u0000\u0000\u1248\u124e\u0003\u0330\u0198\u0000\u1249\u124a\u0003\u0332"+
		"\u0199\u0000\u124a\u124b\u0003\u0330\u0198\u0000\u124b\u124d\u0001\u0000"+
		"\u0000\u0000\u124c\u1249\u0001\u0000\u0000\u0000\u124d\u1250\u0001\u0000"+
		"\u0000\u0000\u124e\u124c\u0001\u0000\u0000\u0000\u124e\u124f\u0001\u0000"+
		"\u0000\u0000\u124f\u0335\u0001\u0000\u0000\u0000\u1250\u124e\u0001\u0000"+
		"\u0000\u0000\u1251\u1252\u0005\u0195\u0000\u0000\u1252\u0337\u0001\u0000"+
		"\u0000\u0000\u1253\u1259\u0003\u0334\u019a\u0000\u1254\u1255\u0003\u0336"+
		"\u019b\u0000\u1255\u1256\u0003\u0334\u019a\u0000\u1256\u1258\u0001\u0000"+
		"\u0000\u0000\u1257\u1254\u0001\u0000\u0000\u0000\u1258\u125b\u0001\u0000"+
		"\u0000\u0000\u1259\u1257\u0001\u0000\u0000\u0000\u1259\u125a\u0001\u0000"+
		"\u0000\u0000\u125a\u0339\u0001\u0000\u0000\u0000\u125b\u1259\u0001\u0000"+
		"\u0000\u0000\u125c\u125d\u0005\u0197\u0000\u0000\u125d\u033b\u0001\u0000"+
		"\u0000\u0000\u125e\u1264\u0003\u0338\u019c\u0000\u125f\u1260\u0003\u033a"+
		"\u019d\u0000\u1260\u1261\u0003\u0338\u019c\u0000\u1261\u1263\u0001\u0000"+
		"\u0000\u0000\u1262\u125f\u0001\u0000\u0000\u0000\u1263\u1266\u0001\u0000"+
		"\u0000\u0000\u1264\u1262\u0001\u0000\u0000\u0000\u1264\u1265\u0001\u0000"+
		"\u0000\u0000\u1265\u033d\u0001\u0000\u0000\u0000\u1266\u1264\u0001\u0000"+
		"\u0000\u0000\u1267\u1268\u0007%\u0000\u0000\u1268\u033f\u0001\u0000\u0000"+
		"\u0000\u1269\u126f\u0003\u033e\u019f\u0000\u126a\u126f\u0005\u018b\u0000"+
		"\u0000\u126b\u126f\u0005\u018c\u0000\u0000\u126c\u126f\u0005\u018d\u0000"+
		"\u0000\u126d\u126f\u0005\u018e\u0000\u0000\u126e\u1269\u0001\u0000\u0000"+
		"\u0000\u126e\u126a\u0001\u0000\u0000\u0000\u126e\u126b\u0001\u0000\u0000"+
		"\u0000\u126e\u126c\u0001\u0000\u0000\u0000\u126e\u126d\u0001\u0000\u0000"+
		"\u0000\u126f\u0341\u0001\u0000\u0000\u0000\u1270\u1271\u0005\u0182\u0000"+
		"\u0000\u1271\u1272\u0003\u018e\u00c7\u0000\u1272\u1273\u0005\u0183\u0000"+
		"\u0000\u1273\u0343\u0001\u0000\u0000\u0000\u1274\u1278\u0003\u0346\u01a3"+
		"\u0000\u1275\u1276\u0005p\u0000\u0000\u1276\u1278\u0003\u0342\u01a1\u0000"+
		"\u1277\u1274\u0001\u0000\u0000\u0000\u1277\u1275\u0001\u0000\u0000\u0000"+
		"\u1278\u0345\u0001\u0000\u0000\u0000\u1279\u127b\u0003\u033c\u019e\u0000"+
		"\u127a\u127c\u0003\u0348\u01a4\u0000\u127b\u127a\u0001\u0000\u0000\u0000"+
		"\u127b\u127c\u0001\u0000\u0000\u0000\u127c\u0347\u0001\u0000\u0000\u0000"+
		"\u127d\u127e\u0003\u0340\u01a0\u0000\u127e\u127f\u0003\u033c\u019e\u0000"+
		"\u127f\u1284\u0001\u0000\u0000\u0000\u1280\u1284\u0003\u034a\u01a5\u0000"+
		"\u1281\u1282\u0005\u00ce\u0000\u0000\u1282\u1284\u0003\u0352\u01a9\u0000"+
		"\u1283\u127d\u0001\u0000\u0000\u0000\u1283\u1280\u0001\u0000\u0000\u0000"+
		"\u1283\u1281\u0001\u0000\u0000\u0000\u1284\u0349\u0001\u0000\u0000\u0000"+
		"\u1285\u1286\u0005\u0094\u0000\u0000\u1286\u1291\u0003\u0350\u01a8\u0000"+
		"\u1287\u1288\u0005\u0019\u0000\u0000\u1288\u1289\u0003\u033c\u019e\u0000"+
		"\u1289\u128a\u0005\u000b\u0000\u0000\u128a\u128b\u0003\u033c\u019e\u0000"+
		"\u128b\u1291\u0001\u0000\u0000\u0000\u128c\u128d\u0005\u00b0\u0000\u0000"+
		"\u128d\u128e\u0007&\u0000\u0000\u128e\u1291\u0003\u02d2\u0169\u0000\u128f"+
		"\u1291\u0003\u034c\u01a6\u0000\u1290\u1285\u0001\u0000\u0000\u0000\u1290"+
		"\u1287\u0001\u0000\u0000\u0000\u1290\u128c\u0001\u0000\u0000\u0000\u1290"+
		"\u128f\u0001\u0000\u0000\u0000\u1291\u034b\u0001\u0000\u0000\u0000\u1292"+
		"\u1293\u0003\u037a\u01bd\u0000\u1293\u1294\u0003\u034e\u01a7\u0000\u1294"+
		"\u1295\u0003\u0342\u01a1\u0000\u1295\u034d\u0001\u0000\u0000\u0000\u1296"+
		"\u1297\u0007\'\u0000\u0000\u1297\u034f\u0001\u0000\u0000\u0000\u1298\u129b"+
		"\u0003\u0342\u01a1\u0000\u1299\u129b\u0003\u02d2\u0169\u0000\u129a\u1298"+
		"\u0001\u0000\u0000\u0000\u129a\u1299\u0001\u0000\u0000\u0000\u129b\u0351"+
		"\u0001\u0000\u0000\u0000\u129c\u129d\u0003\u033e\u019f\u0000\u129d\u129e"+
		"\u0003\u033c\u019e\u0000\u129e\u12a1\u0001\u0000\u0000\u0000\u129f\u12a1"+
		"\u0003\u034a\u01a5\u0000\u12a0\u129c\u0001\u0000\u0000\u0000\u12a0\u129f"+
		"\u0001\u0000\u0000\u0000\u12a1\u0353\u0001\u0000\u0000\u0000\u12a2\u12a3"+
		"\u0005\u00a0\u0000\u0000\u12a3\u12a4\u0005\\\u0000\u0000\u12a4\u12a5\u0005"+
		"\u0086\u0000\u0000\u12a5\u0355\u0001\u0000\u0000\u0000\u12a6\u12ae\u0005"+
		"\u0188\u0000\u0000\u12a7\u12ae\u0005\u0189\u0000\u0000\u12a8\u12ae\u0005"+
		"\u018a\u0000\u0000\u12a9\u12aa\u0005\u00a0\u0000\u0000\u12aa\u12ab\u0005"+
		"\u00ce\u0000\u0000\u12ab\u12ac\u0005\\\u0000\u0000\u12ac\u12ae\u0005\u0086"+
		"\u0000\u0000\u12ad\u12a6\u0001\u0000\u0000\u0000\u12ad\u12a7\u0001\u0000"+
		"\u0000\u0000\u12ad\u12a8\u0001\u0000\u0000\u0000\u12ad\u12a9\u0001\u0000"+
		"\u0000\u0000\u12ae\u0357\u0001\u0000\u0000\u0000\u12af\u12b8\u0003\u0344"+
		"\u01a2\u0000\u12b0\u12b1\u0003\u0356\u01ab\u0000\u12b1\u12b2\u0003\u0344"+
		"\u01a2\u0000\u12b2\u12b7\u0001\u0000\u0000\u0000\u12b3\u12b4\u0003\u0354"+
		"\u01aa\u0000\u12b4\u12b5\u0003\u0344\u01a2\u0000\u12b5\u12b7\u0001\u0000"+
		"\u0000\u0000\u12b6\u12b0\u0001\u0000\u0000\u0000\u12b6\u12b3\u0001\u0000"+
		"\u0000\u0000\u12b7\u12ba\u0001\u0000\u0000\u0000\u12b8\u12b6\u0001\u0000"+
		"\u0000\u0000\u12b8\u12b9\u0001\u0000\u0000\u0000\u12b9\u0359\u0001\u0000"+
		"\u0000\u0000\u12ba\u12b8\u0001\u0000\u0000\u0000\u12bb\u12c8\u0005\u00d1"+
		"\u0000\u0000\u12bc\u12c8\u0005\u0153\u0000\u0000\u12bd\u12c8\u0005x\u0000"+
		"\u0000\u12be\u12c8\u0005\u015d\u0000\u0000\u12bf\u12c0\u0005\u00ce\u0000"+
		"\u0000\u12c0\u12c8\u0005\u00d1\u0000\u0000\u12c1\u12c2\u0005\u00ce\u0000"+
		"\u0000\u12c2\u12c8\u0005\u0153\u0000\u0000\u12c3\u12c4\u0005\u00ce\u0000"+
		"\u0000\u12c4\u12c8\u0005x\u0000\u0000\u12c5\u12c6\u0005\u00ce\u0000\u0000"+
		"\u12c6\u12c8\u0005\u015d\u0000\u0000\u12c7\u12bb\u0001\u0000\u0000\u0000"+
		"\u12c7\u12bc\u0001\u0000\u0000\u0000\u12c7\u12bd\u0001\u0000\u0000\u0000"+
		"\u12c7\u12be\u0001\u0000\u0000\u0000\u12c7\u12bf\u0001\u0000\u0000\u0000"+
		"\u12c7\u12c1\u0001\u0000\u0000\u0000\u12c7\u12c3\u0001\u0000\u0000\u0000"+
		"\u12c7\u12c5\u0001\u0000\u0000\u0000\u12c8\u035b\u0001\u0000\u0000\u0000"+
		"\u12c9\u12cc\u0003\u0358\u01ac\u0000\u12ca\u12cb\u0005\u00a0\u0000\u0000"+
		"\u12cb\u12cd\u0003\u035a\u01ad\u0000\u12cc\u12ca\u0001\u0000\u0000\u0000"+
		"\u12cc\u12cd\u0001\u0000\u0000\u0000\u12cd\u035d\u0001\u0000\u0000\u0000"+
		"\u12ce\u12cf\u0005\u00ce\u0000\u0000\u12cf\u035f\u0001\u0000\u0000\u0000"+
		"\u12d0\u12d2\u0003\u035e\u01af\u0000\u12d1\u12d0\u0001\u0000\u0000\u0000"+
		"\u12d2\u12d5\u0001\u0000\u0000\u0000\u12d3\u12d1\u0001\u0000\u0000\u0000"+
		"\u12d3\u12d4\u0001\u0000\u0000\u0000\u12d4\u12d6\u0001\u0000\u0000\u0000"+
		"\u12d5\u12d3\u0001\u0000\u0000\u0000\u12d6\u12d7\u0003\u035c\u01ae\u0000"+
		"\u12d7\u0361\u0001\u0000\u0000\u0000\u12d8\u12d9\u0005\u000b\u0000\u0000"+
		"\u12d9\u0363\u0001\u0000\u0000\u0000\u12da\u12e0\u0003\u0360\u01b0\u0000"+
		"\u12db\u12dc\u0003\u0362\u01b1\u0000\u12dc\u12dd\u0003\u0360\u01b0\u0000"+
		"\u12dd\u12df\u0001\u0000\u0000\u0000\u12de\u12db\u0001\u0000\u0000\u0000"+
		"\u12df\u12e2\u0001\u0000\u0000\u0000\u12e0\u12de\u0001\u0000\u0000\u0000"+
		"\u12e0\u12e1\u0001\u0000\u0000\u0000\u12e1\u0365\u0001\u0000\u0000\u0000"+
		"\u12e2\u12e0\u0001\u0000\u0000\u0000\u12e3\u12e4\u0005\u00da\u0000\u0000"+
		"\u12e4\u0367\u0001\u0000\u0000\u0000\u12e5\u12eb\u0003\u0364\u01b2\u0000"+
		"\u12e6\u12e7\u0003\u0366\u01b3\u0000\u12e7\u12e8\u0003\u0364\u01b2\u0000"+
		"\u12e8\u12ea\u0001\u0000\u0000\u0000\u12e9\u12e6\u0001\u0000\u0000\u0000"+
		"\u12ea\u12ed\u0001\u0000\u0000\u0000\u12eb\u12e9\u0001\u0000\u0000\u0000"+
		"\u12eb\u12ec\u0001\u0000\u0000\u0000\u12ec\u0369\u0001\u0000\u0000\u0000"+
		"\u12ed\u12eb\u0001\u0000\u0000\u0000\u12ee\u12ef\u0007(\u0000\u0000\u12ef"+
		"\u036b\u0001\u0000\u0000\u0000\u12f0\u12f1\u0007(\u0000\u0000\u12f1\u036d"+
		"\u0001\u0000\u0000\u0000\u12f2\u12f4\u0003\u0280\u0140\u0000\u12f3\u12f5"+
		"\u0003\u0370\u01b8\u0000\u12f4\u12f3\u0001\u0000\u0000\u0000\u12f4\u12f5"+
		"\u0001\u0000\u0000\u0000\u12f5\u036f\u0001\u0000\u0000\u0000\u12f6\u12f7"+
		"\u0005\u00e3\u0000\u0000\u12f7\u12f8\u0005\u0182\u0000\u0000\u12f8\u12fd"+
		"\u0003\u0372\u01b9\u0000\u12f9\u12fa\u0005\u0180\u0000\u0000\u12fa\u12fc"+
		"\u0003\u0372\u01b9\u0000\u12fb\u12f9\u0001\u0000\u0000\u0000\u12fc\u12ff"+
		"\u0001\u0000\u0000\u0000\u12fd\u12fb\u0001\u0000\u0000\u0000\u12fd\u12fe"+
		"\u0001\u0000\u0000\u0000\u12fe\u1300\u0001\u0000\u0000\u0000\u12ff\u12fd"+
		"\u0001\u0000\u0000\u0000\u1300\u1301\u0005\u0183\u0000\u0000\u1301\u0371"+
		"\u0001\u0000\u0000\u0000\u1302\u1305\u0003\u0380\u01c0\u0000\u1303\u1304"+
		"\u0005\u0188\u0000\u0000\u1304\u1306\u0003\u0304\u0182\u0000\u1305\u1303"+
		"\u0001\u0000\u0000\u0000\u1305\u1306\u0001\u0000\u0000\u0000\u1306\u0373"+
		"\u0001\u0000\u0000\u0000\u1307\u1308\u0005\u0182\u0000\u0000\u1308\u130d"+
		"\u0003\u0376\u01bb\u0000\u1309\u130a\u0005\u0180\u0000\u0000\u130a\u130c"+
		"\u0003\u0376\u01bb\u0000\u130b\u1309\u0001\u0000\u0000\u0000\u130c\u130f"+
		"\u0001\u0000\u0000\u0000\u130d\u130b\u0001\u0000\u0000\u0000\u130d\u130e"+
		"\u0001\u0000\u0000\u0000\u130e\u1310\u0001\u0000\u0000\u0000\u130f\u130d"+
		"\u0001\u0000\u0000\u0000\u1310\u1311\u0005\u0183\u0000\u0000\u1311\u0375"+
		"\u0001\u0000\u0000\u0000\u1312\u1313\u0003\u0380\u01c0\u0000\u1313\u1314"+
		"\u0003\u0378\u01bc\u0000\u1314\u1315\u0003\u0304\u0182\u0000\u1315\u0377"+
		"\u0001\u0000\u0000\u0000\u1316\u1319\u0005\u00b0\u0000\u0000\u1317\u1319"+
		"\u0003\u037a\u01bd\u0000\u1318\u1316\u0001\u0000\u0000\u0000\u1318\u1317"+
		"\u0001\u0000\u0000\u0000\u1319\u0379\u0001\u0000\u0000\u0000\u131a\u131b"+
		"\u0007)\u0000\u0000\u131b\u037b\u0001\u0000\u0000\u0000\u131c\u131d\u0007"+
		"*\u0000\u0000\u131d\u037d\u0001\u0000\u0000\u0000\u131e\u1322\u0003\u037c"+
		"\u01be\u0000\u131f\u1322\u0005\u019c\u0000\u0000\u1320\u1322\u0003\u0382"+
		"\u01c1\u0000\u1321\u131e\u0001\u0000\u0000\u0000\u1321\u131f\u0001\u0000"+
		"\u0000\u0000\u1321\u1320\u0001\u0000\u0000\u0000\u1322\u037f\u0001\u0000"+
		"\u0000\u0000\u1323\u1326\u0005\u01a2\u0000\u0000\u1324\u1326\u0003\u0386"+
		"\u01c3\u0000\u1325\u1323\u0001\u0000\u0000\u0000\u1325\u1324\u0001\u0000"+
		"\u0000\u0000\u1326\u0381\u0001\u0000\u0000\u0000\u1327\u132a\u0003\u0380"+
		"\u01c0\u0000\u1328\u1329\u0005\u017e\u0000\u0000\u1329\u132b\u0003\u0380"+
		"\u01c0\u0000\u132a\u1328\u0001\u0000\u0000\u0000\u132a\u132b\u0001\u0000"+
		"\u0000\u0000\u132b\u0383\u0001\u0000\u0000\u0000\u132c\u132d\u0003\u0380"+
		"\u01c0\u0000\u132d\u0385\u0001\u0000\u0000\u0000\u132e\u132f\u0007+\u0000"+
		"\u0000\u132f\u0387\u0001\u0000\u0000\u0000\u1330\u1331\u0007,\u0000\u0000"+
		"\u1331\u0389\u0001\u0000\u0000\u0000\u1332\u1333\u0003\u038c";
	private static final String _serializedATNSegment2 =
		"\u01c6\u0000\u1333\u1334\u0005\u0000\u0000\u0001\u1334\u038b\u0001\u0000"+
		"\u0000\u0000\u1335\u133a\u0003\u038e\u01c7\u0000\u1336\u1337\u0005\u0180"+
		"\u0000\u0000\u1337\u1339\u0003\u038e\u01c7\u0000\u1338\u1336\u0001\u0000"+
		"\u0000\u0000\u1339\u133c\u0001\u0000\u0000\u0000\u133a\u1338\u0001\u0000"+
		"\u0000\u0000\u133a\u133b\u0001\u0000\u0000\u0000\u133b\u038d\u0001\u0000"+
		"\u0000\u0000\u133c\u133a\u0001\u0000\u0000\u0000\u133d\u1342\u0003\u0390"+
		"\u01c8\u0000\u133e\u133f\u0005\u0182\u0000\u0000\u133f\u1340\u0003\u0392"+
		"\u01c9\u0000\u1340\u1341\u0005\u0183\u0000\u0000\u1341\u1343\u0001\u0000"+
		"\u0000\u0000\u1342\u133e\u0001\u0000\u0000\u0000\u1342\u1343\u0001\u0000"+
		"\u0000\u0000\u1343\u038f\u0001\u0000\u0000\u0000\u1344\u1345\u0007-\u0000"+
		"\u0000\u1345\u0391\u0001\u0000\u0000\u0000\u1346\u134b\u0003\u0394\u01ca"+
		"\u0000\u1347\u1348\u0005\u0180\u0000\u0000\u1348\u134a\u0003\u0394\u01ca"+
		"\u0000\u1349\u1347\u0001\u0000\u0000\u0000\u134a\u134d\u0001\u0000\u0000"+
		"\u0000\u134b\u1349\u0001\u0000\u0000\u0000\u134b\u134c\u0001\u0000\u0000"+
		"\u0000\u134c\u0393\u0001\u0000\u0000\u0000\u134d\u134b\u0001\u0000\u0000"+
		"\u0000\u134e\u134f\u0007.\u0000\u0000\u134f\u0395\u0001\u0000\u0000\u0000"+
		"\u1350\u1351\u0005\u00ef\u0000\u0000\u1351\u1352\u0003\u0380\u01c0\u0000"+
		"\u1352\u1353\u0005\u0086\u0000\u0000\u1353\u1354\u0003\u017e\u00bf\u0000"+
		"\u1354\u0397\u0001\u0000\u0000\u0000\u1355\u1356\u0005n\u0000\u0000\u1356"+
		"\u1357\u0003\u0380\u01c0\u0000\u1357\u1358\u0005\u0167\u0000\u0000\u1358"+
		"\u1359\u0003\u039a\u01cd\u0000\u1359\u0399\u0001\u0000\u0000\u0000\u135a"+
		"\u135f\u0003\u0304\u0182\u0000\u135b\u135c\u0005\u0180\u0000\u0000\u135c"+
		"\u135e\u0003\u0304\u0182\u0000\u135d\u135b\u0001\u0000\u0000\u0000\u135e"+
		"\u1361\u0001\u0000\u0000\u0000\u135f\u135d\u0001\u0000\u0000\u0000\u135f"+
		"\u1360\u0001\u0000\u0000\u0000\u1360\u039b\u0001\u0000\u0000\u0000\u1361"+
		"\u135f\u0001\u0000\u0000\u0000\u1362\u1371\u0003\u03a6\u01d3\u0000\u1363"+
		"\u1371\u0003\u03b2\u01d9\u0000\u1364\u1371\u0003\u03b8\u01dc\u0000\u1365"+
		"\u1371\u0003\u03b4\u01da\u0000\u1366\u1371\u0003\u03b6\u01db\u0000\u1367"+
		"\u1371\u0003\u03ce\u01e7\u0000\u1368\u1371\u0003\u03d0\u01e8\u0000\u1369"+
		"\u1371\u0003\u03d2\u01e9\u0000\u136a\u1371\u0003\u03d8\u01ec\u0000\u136b"+
		"\u1371\u0003\u03da\u01ed\u0000\u136c\u1371\u0003\u03dc\u01ee\u0000\u136d"+
		"\u1371\u0003\u03de\u01ef\u0000\u136e\u1371\u0003\u03e0\u01f0\u0000\u136f"+
		"\u1371\u0003\u03e2\u01f1\u0000\u1370\u1362\u0001\u0000\u0000\u0000\u1370"+
		"\u1363\u0001\u0000\u0000\u0000\u1370\u1364\u0001\u0000\u0000\u0000\u1370"+
		"\u1365\u0001\u0000\u0000\u0000\u1370\u1366\u0001\u0000\u0000\u0000\u1370"+
		"\u1367\u0001\u0000\u0000\u0000\u1370\u1368\u0001\u0000\u0000\u0000\u1370"+
		"\u1369\u0001\u0000\u0000\u0000\u1370\u136a\u0001\u0000\u0000\u0000\u1370"+
		"\u136b\u0001\u0000\u0000\u0000\u1370\u136c\u0001\u0000\u0000\u0000\u1370"+
		"\u136d\u0001\u0000\u0000\u0000\u1370\u136e\u0001\u0000\u0000\u0000\u1370"+
		"\u136f\u0001\u0000\u0000\u0000\u1371\u039d\u0001\u0000\u0000\u0000\u1372"+
		"\u1373\u0005\u00f9\u0000\u0000\u1373\u1374\u0005\u0188\u0000\u0000\u1374"+
		"\u137a\u0005\u01a1\u0000\u0000\u1375\u1376\u0005P\u0000\u0000\u1376\u1377"+
		"\u0005\u00ec\u0000\u0000\u1377\u1378\u0005\u0188\u0000\u0000\u1378\u137a"+
		"\u0003\u03ba\u01dd\u0000\u1379\u1372\u0001\u0000\u0000\u0000\u1379\u1375"+
		"\u0001\u0000\u0000\u0000\u137a\u039f\u0001\u0000\u0000\u0000\u137b\u1380"+
		"\u0003\u039e\u01cf\u0000\u137c\u137d\u0005\u0180\u0000\u0000\u137d\u137f"+
		"\u0003\u039e\u01cf\u0000\u137e\u137c\u0001\u0000\u0000\u0000\u137f\u1382"+
		"\u0001\u0000\u0000\u0000\u1380\u137e\u0001\u0000\u0000\u0000\u1380\u1381"+
		"\u0001\u0000\u0000\u0000\u1381\u03a1\u0001\u0000\u0000\u0000\u1382\u1380"+
		"\u0001\u0000\u0000\u0000\u1383\u1387\u0005\u00f9\u0000\u0000\u1384\u1385"+
		"\u0005P\u0000\u0000\u1385\u1387\u0005\u00ec\u0000\u0000\u1386\u1383\u0001"+
		"\u0000\u0000\u0000\u1386\u1384\u0001\u0000\u0000\u0000\u1387\u03a3\u0001"+
		"\u0000\u0000\u0000\u1388\u138d\u0003\u03a2\u01d1\u0000\u1389\u138a\u0005"+
		"\u0180\u0000\u0000\u138a\u138c\u0003\u03a2\u01d1\u0000\u138b\u1389\u0001"+
		"\u0000\u0000\u0000\u138c\u138f\u0001\u0000\u0000\u0000\u138d\u138b\u0001"+
		"\u0000\u0000\u0000\u138d\u138e\u0001\u0000\u0000\u0000\u138e\u03a5\u0001"+
		"\u0000\u0000\u0000\u138f\u138d\u0001\u0000\u0000\u0000\u1390\u1391\u0005"+
		":\u0000\u0000\u1391\u1392\u0005\u010e\u0000\u0000\u1392\u1394\u0005\u00e9"+
		"\u0000\u0000\u1393\u1395\u0003(\u0014\u0000\u1394\u1393\u0001\u0000\u0000"+
		"\u0000\u1394\u1395\u0001\u0000\u0000\u0000\u1395\u139f\u0001\u0000\u0000"+
		"\u0000\u1396\u1397\u0003\u0380\u01c0\u0000\u1397\u1398\u0005\u00b0\u0000"+
		"\u0000\u1398\u1399\u0003\u0380\u01c0\u0000\u1399\u13a0\u0001\u0000\u0000"+
		"\u0000\u139a\u139d\u0003\u0380\u01c0\u0000\u139b\u139c\u0005\u0177\u0000"+
		"\u0000\u139c\u139e\u0003\u03a0\u01d0\u0000\u139d\u139b\u0001\u0000\u0000"+
		"\u0000\u139d\u139e\u0001\u0000\u0000\u0000\u139e\u13a0\u0001\u0000\u0000"+
		"\u0000\u139f\u1396\u0001\u0000\u0000\u0000\u139f\u139a\u0001\u0000\u0000"+
		"\u0000\u13a0\u03a7\u0001\u0000\u0000\u0000\u13a1\u13a2\u0005\u0177\u0000"+
		"\u0000\u13a2\u13a3\u0005\u010c\u0000\u0000\u13a3\u03a9\u0001\u0000\u0000"+
		"\u0000\u13a4\u13a6\u0005\u0002\u0000\u0000\u13a5\u13a7\u0003\u03a8\u01d4"+
		"\u0000\u13a6\u13a5\u0001\u0000\u0000\u0000\u13a6\u13a7\u0001\u0000\u0000"+
		"\u0000\u13a7\u03ab\u0001\u0000\u0000\u0000\u13a8\u13a9\u0005f\u0000\u0000"+
		"\u13a9\u03ad\u0001\u0000\u0000\u0000\u13aa\u13ab\u0005[\u0000\u0000\u13ab"+
		"\u03af\u0001\u0000\u0000\u0000\u13ac\u13ad\u0005\u015f\u0000\u0000\u13ad"+
		"\u03b1\u0001\u0000\u0000\u0000\u13ae\u13af\u0005\t\u0000\u0000\u13af\u13b0"+
		"\u0005\u010e\u0000\u0000\u13b0\u13b1\u0005\u00e9\u0000\u0000\u13b1\u13c3"+
		"\u0003\u0380\u01c0\u0000\u13b2\u13c4\u0005\u016a\u0000\u0000\u13b3\u13c4"+
		"\u0005[\u0000\u0000\u13b4\u13b5\u0005\u0125\u0000\u0000\u13b5\u13c4\u0003"+
		"\u03a0\u01d0\u0000\u13b6\u13b7\u0005\u0160\u0000\u0000\u13b7\u13c4\u0003"+
		"\u03a4\u01d2\u0000\u13b8\u13b9\u0005\u0108\u0000\u0000\u13b9\u13ba\u0005"+
		"\u014a\u0000\u0000\u13ba\u13c4\u0003\u0380\u01c0\u0000\u13bb\u13bd\u0003"+
		"\u03aa\u01d5\u0000\u13bc\u13be\u0003\u03ac\u01d6\u0000\u13bd\u13bc\u0001"+
		"\u0000\u0000\u0000\u13bd\u13be\u0001\u0000\u0000\u0000\u13be\u13c4\u0001"+
		"\u0000\u0000\u0000\u13bf\u13c1\u0003\u03ac\u01d6\u0000\u13c0\u13c2\u0003"+
		"\u03aa\u01d5\u0000\u13c1\u13c0\u0001\u0000\u0000\u0000\u13c1\u13c2\u0001"+
		"\u0000\u0000\u0000\u13c2\u13c4\u0001\u0000\u0000\u0000\u13c3\u13b2\u0001"+
		"\u0000\u0000\u0000\u13c3\u13b3\u0001\u0000\u0000\u0000\u13c3\u13b4\u0001"+
		"\u0000\u0000\u0000\u13c3\u13b6\u0001\u0000\u0000\u0000\u13c3\u13b8\u0001"+
		"\u0000\u0000\u0000\u13c3\u13bb\u0001\u0000\u0000\u0000\u13c3\u13bf\u0001"+
		"\u0000\u0000\u0000\u13c4\u03b3\u0001\u0000\u0000\u0000\u13c5\u13c6\u0007"+
		"\u000e\u0000\u0000\u13c6\u13c7\u0005\u017a\u0000\u0000\u13c7\u13c8\u0005"+
		"\u00bd\u0000\u0000\u13c8\u03b5\u0001\u0000\u0000\u0000\u13c9\u13d5\u0005"+
		"\u010c\u0000\u0000\u13ca\u13cb\u0005\u0003\u0000\u0000\u13cb\u13cc\u0005"+
		"\u010e\u0000\u0000\u13cc\u13cd\u0005\u00e9\u0000\u0000\u13cd\u13ce\u0005"+
		"\u0177\u0000\u0000\u13ce\u13d6\u0003\u0380\u01c0\u0000\u13cf\u13d0\u0005"+
		"\u010e\u0000\u0000\u13d0\u13d1\u0005\u00e9\u0000\u0000\u13d1\u13d2\u0003"+
		"\u0380\u01c0\u0000\u13d2\u13d3\u0005\u0177\u0000\u0000\u13d3\u13d4\u0003"+
		"\u0380\u01c0\u0000\u13d4\u13d6\u0001\u0000\u0000\u0000\u13d5\u13ca\u0001"+
		"\u0000\u0000\u0000\u13d5\u13cf\u0001\u0000\u0000\u0000\u13d6\u03b7\u0001"+
		"\u0000\u0000\u0000\u13d7\u13d8\u0005b\u0000\u0000\u13d8\u13d9\u0005\u010e"+
		"\u0000\u0000\u13d9\u13db\u0005\u00e9\u0000\u0000\u13da\u13dc\u0003$\u0012"+
		"\u0000\u13db\u13da\u0001\u0000\u0000\u0000\u13db\u13dc\u0001\u0000\u0000"+
		"\u0000\u13dc\u13dd\u0001\u0000\u0000\u0000\u13dd\u13de\u0003\u0380\u01c0"+
		"\u0000\u13de\u03b9\u0001\u0000\u0000\u0000\u13df\u13e4\u0003\u0380\u01c0"+
		"\u0000\u13e0\u13e1\u0005\u017e\u0000\u0000\u13e1\u13e3\u0003\u0380\u01c0"+
		"\u0000\u13e2\u13e0\u0001\u0000\u0000\u0000\u13e3\u13e6\u0001\u0000\u0000"+
		"\u0000\u13e4\u13e2\u0001\u0000\u0000\u0000\u13e4\u13e5\u0001\u0000\u0000"+
		"\u0000\u13e5\u03bb\u0001\u0000\u0000\u0000\u13e6\u13e4\u0001\u0000\u0000"+
		"\u0000\u13e7\u13e8\u0003\u03c4\u01e2\u0000\u13e8\u03bd\u0001\u0000\u0000"+
		"\u0000\u13e9\u13ea\u0003\u03bc\u01de\u0000\u13ea\u13eb\u0005\u0000\u0000"+
		"\u0001\u13eb\u03bf\u0001\u0000\u0000\u0000\u13ec\u13f1\u0003\u03c2\u01e1"+
		"\u0000\u13ed\u13ee\u0005\u00da\u0000\u0000\u13ee\u13f0\u0003\u03c2\u01e1"+
		"\u0000\u13ef\u13ed\u0001\u0000\u0000\u0000\u13f0\u13f3\u0001\u0000\u0000"+
		"\u0000\u13f1\u13ef\u0001\u0000\u0000\u0000\u13f1\u13f2\u0001\u0000\u0000"+
		"\u0000\u13f2\u03c1\u0001\u0000\u0000\u0000\u13f3\u13f1\u0001\u0000\u0000"+
		"\u0000\u13f4\u13f9\u0003\u03c4\u01e2\u0000\u13f5\u13f6\u0005\u000b\u0000"+
		"\u0000\u13f6\u13f8\u0003\u03c4\u01e2\u0000\u13f7\u13f5\u0001\u0000\u0000"+
		"\u0000\u13f8\u13fb\u0001\u0000\u0000\u0000\u13f9\u13f7\u0001\u0000\u0000"+
		"\u0000\u13f9\u13fa\u0001\u0000\u0000\u0000\u13fa\u03c3\u0001\u0000\u0000"+
		"\u0000\u13fb\u13f9\u0001\u0000\u0000\u0000\u13fc\u13fd\u0003\u0380\u01c0"+
		"\u0000\u13fd\u13fe\u0003\u03c8\u01e4\u0000\u13fe\u13ff\u0003\u03c6\u01e3"+
		"\u0000\u13ff\u03c5\u0001\u0000\u0000\u0000\u1400\u1401\u0007\u0019\u0000"+
		"\u0000\u1401\u03c7\u0001\u0000\u0000\u0000\u1402\u1403\u0005\u018e\u0000"+
		"\u0000\u1403\u03c9\u0001\u0000\u0000\u0000\u1404\u1409\u0005\u00a9\u0000"+
		"\u0000\u1405\u1406\u0005\u00c9\u0000\u0000\u1406\u1407\u0005\u014a\u0000"+
		"\u0000\u1407\u1409\u0003\u03ba\u01dd\u0000\u1408\u1404\u0001\u0000\u0000"+
		"\u0000\u1408\u1405\u0001\u0000\u0000\u0000\u1409\u03cb\u0001\u0000\u0000"+
		"\u0000\u140a\u140b\u0003\u03ca\u01e5\u0000\u140b\u140c\u0005\u0000\u0000"+
		"\u0001\u140c\u03cd\u0001\u0000\u0000\u0000\u140d\u140e\u0005:\u0000\u0000"+
		"\u140e\u140f\u0005\u0151\u0000\u0000\u140f\u1410\u0003\u0380\u01c0\u0000"+
		"\u1410\u1411\u0005\u017e\u0000\u0000\u1411\u1412\u0003\u0380\u01c0\u0000"+
		"\u1412\u1413\u0005\u0173\u0000\u0000\u1413\u1414\u0003\u03bc\u01de\u0000"+
		"\u1414\u1415\u0005_\u0000\u0000\u1415\u1416\u0003\u03ca\u01e5\u0000\u1416"+
		"\u03cf\u0001\u0000\u0000\u0000\u1417\u1418\u0005\t\u0000\u0000\u1418\u1419"+
		"\u0005\u0151\u0000\u0000\u1419\u141a\u0003\u0380\u01c0\u0000\u141a\u141b"+
		"\u0005\u017e\u0000\u0000\u141b\u142c\u0003\u0380\u01c0\u0000\u141c\u141d"+
		"\u0005\u0173\u0000\u0000\u141d\u141e\u0003\u03bc\u01de\u0000\u141e\u141f"+
		"\u0005_\u0000\u0000\u141f\u1420\u0003\u03ca\u01e5\u0000\u1420\u142d\u0001"+
		"\u0000\u0000\u0000\u1421\u1422\u0005\u0004\u0000\u0000\u1422\u1426\u0005"+
		"\u014a\u0000\u0000\u1423\u1424\u0005b\u0000\u0000\u1424\u1426\u0005\u0086"+
		"\u0000\u0000\u1425\u1421\u0001\u0000\u0000\u0000\u1425\u1423\u0001\u0000"+
		"\u0000\u0000\u1426\u142a\u0001\u0000\u0000\u0000\u1427\u1428\u0005\u00ec"+
		"\u0000\u0000\u1428\u142b\u0003\u03ba\u01dd\u0000\u1429\u142b\u0005\u015f"+
		"\u0000\u0000\u142a\u1427\u0001\u0000\u0000\u0000\u142a\u1429\u0001\u0000"+
		"\u0000\u0000\u142b\u142d\u0001\u0000\u0000\u0000\u142c\u141c\u0001\u0000"+
		"\u0000\u0000\u142c\u1425\u0001\u0000\u0000\u0000\u142d\u03d1\u0001\u0000"+
		"\u0000\u0000\u142e\u142f\u0005b\u0000\u0000\u142f\u1430\u0005\u0151\u0000"+
		"\u0000\u1430\u1431\u0003\u0380\u01c0\u0000\u1431\u1432\u0005\u017e\u0000"+
		"\u0000\u1432\u1433\u0003\u0380\u01c0\u0000\u1433\u03d3\u0001\u0000\u0000"+
		"\u0000\u1434\u1435\u0005\b\u0000\u0000\u1435\u1436\u0005\u0188\u0000\u0000"+
		"\u1436\u1441\u0005\u01a1\u0000\u0000\u1437\u1438\u0005\u00f9\u0000\u0000"+
		"\u1438\u1439\u0005\u0188\u0000\u0000\u1439\u1441\u0005\u01a1\u0000\u0000"+
		"\u143a\u143b\u0005\u011c\u0000\u0000\u143b\u143c\u0005\u0188\u0000\u0000"+
		"\u143c\u1441\u0005\u019c\u0000\u0000\u143d\u143e\u0005\u00e6\u0000\u0000"+
		"\u143e\u143f\u0005\u0188\u0000\u0000\u143f\u1441\u0003\u03ba\u01dd\u0000"+
		"\u1440\u1434\u0001\u0000\u0000\u0000\u1440\u1437\u0001\u0000\u0000\u0000"+
		"\u1440\u143a\u0001\u0000\u0000\u0000\u1440\u143d\u0001\u0000\u0000\u0000"+
		"\u1441\u03d5\u0001\u0000\u0000\u0000\u1442\u1447\u0003\u03d4\u01ea\u0000"+
		"\u1443\u1444\u0005\u0180\u0000\u0000\u1444\u1446\u0003\u03d4\u01ea\u0000"+
		"\u1445\u1443\u0001\u0000\u0000\u0000\u1446\u1449\u0001\u0000\u0000\u0000"+
		"\u1447\u1445\u0001\u0000\u0000\u0000\u1447\u1448\u0001\u0000\u0000\u0000"+
		"\u1448\u03d7\u0001\u0000\u0000\u0000\u1449\u1447\u0001\u0000\u0000\u0000"+
		"\u144a\u144b\u0005:\u0000\u0000\u144b\u144c\u0005\u00ec\u0000\u0000\u144c"+
		"\u144d\u0003\u0380\u01c0\u0000\u144d\u144e\u0005\u017e\u0000\u0000\u144e"+
		"\u144f\u0003\u03ba\u01dd\u0000\u144f\u1450\u0005\u0177\u0000\u0000\u1450"+
		"\u1451\u0003\u03d6\u01eb\u0000\u1451\u03d9\u0001\u0000\u0000\u0000\u1452"+
		"\u1453\u0005\t\u0000\u0000\u1453\u1454\u0005\u00ec\u0000\u0000\u1454\u1455"+
		"\u0003\u0380\u01c0\u0000\u1455\u1456\u0005\u017e\u0000\u0000\u1456\u145e"+
		"\u0003\u03ba\u01dd\u0000\u1457\u1458\u0005\u0125\u0000\u0000\u1458\u145f"+
		"\u0003\u03d6\u01eb\u0000\u1459\u145a\u0005\u0160\u0000\u0000\u145a\u145f"+
		"\u0005\u011c\u0000\u0000\u145b\u145c\u0007/\u0000\u0000\u145c\u145d\u0005"+
		"\u0151\u0000\u0000\u145d\u145f\u0003\u0380\u01c0\u0000\u145e\u1457\u0001"+
		"\u0000\u0000\u0000\u145e\u1459\u0001\u0000\u0000\u0000\u145e\u145b\u0001"+
		"\u0000\u0000\u0000\u145f\u03db\u0001\u0000\u0000\u0000\u1460\u1461\u0005"+
		"b\u0000\u0000\u1461\u1462\u0005\u00ec\u0000\u0000\u1462\u1463\u0003\u0380"+
		"\u01c0\u0000\u1463\u1464\u0005\u017e\u0000\u0000\u1464\u1465\u0003\u03ba"+
		"\u01dd\u0000\u1465\u03dd\u0001\u0000\u0000\u0000\u1466\u1467\u0005:\u0000"+
		"\u0000\u1467\u1468\u00070\u0000\u0000\u1468\u1469\u0005\u00c0\u0000\u0000"+
		"\u1469\u146a\u0005\u019c\u0000\u0000\u146a\u146b\u0005\u0094\u0000\u0000"+
		"\u146b\u146f\u0003\u0380\u01c0\u0000\u146c\u146d\u0005\u014a\u0000\u0000"+
		"\u146d\u1470\u0003\u03ba\u01dd\u0000\u146e\u1470\u0003\u03b0\u01d8\u0000"+
		"\u146f\u146c\u0001\u0000\u0000\u0000\u146f\u146e\u0001\u0000\u0000\u0000"+
		"\u1470\u1474\u0001\u0000\u0000\u0000\u1471\u1472\u0005\u0177\u0000\u0000"+
		"\u1472\u1473\u0005\u00db\u0000\u0000\u1473\u1475\u0005\u01a1\u0000\u0000"+
		"\u1474\u1471\u0001\u0000\u0000\u0000\u1474\u1475\u0001\u0000\u0000\u0000"+
		"\u1475\u03df\u0001\u0000\u0000\u0000\u1476\u1477\u0005\t\u0000\u0000\u1477"+
		"\u1478\u00070\u0000\u0000\u1478\u1479\u0005\u00c0\u0000\u0000\u1479\u147a"+
		"\u0005\u019c\u0000\u0000\u147a\u147b\u0005\u0094\u0000\u0000\u147b\u147f"+
		"\u0003\u0380\u01c0\u0000\u147c\u147d\u0005\u014a\u0000\u0000\u147d\u1480"+
		"\u0003\u03ba\u01dd\u0000\u147e\u1480\u0003\u03b0\u01d8\u0000\u147f\u147c"+
		"\u0001\u0000\u0000\u0000\u147f\u147e\u0001\u0000\u0000\u0000\u1480\u1484"+
		"\u0001\u0000\u0000\u0000\u1481\u1482\u0005\u0177\u0000\u0000\u1482\u1483"+
		"\u0005\u00db\u0000\u0000\u1483\u1485\u0005\u01a1\u0000\u0000\u1484\u1481"+
		"\u0001\u0000\u0000\u0000\u1484\u1485\u0001\u0000\u0000\u0000\u1485\u03e1"+
		"\u0001\u0000\u0000\u0000\u1486\u1487\u0005b\u0000\u0000\u1487\u1488\u0007"+
		"0\u0000\u0000\u1488\u1489\u0005\u00c0\u0000\u0000\u1489\u148a\u0005\u019c"+
		"\u0000\u0000\u148a\u148b\u0005\u0094\u0000\u0000\u148b\u148c\u0003\u0380"+
		"\u01c0\u0000\u148c\u03e3\u0001\u0000\u0000\u0000\u0265\u03e6\u03ee\u03f4"+
		"\u03fb\u0405\u0408\u040c\u0420\u0425\u042a\u0430\u0434\u0441\u0445\u0449"+
		"\u044e\u0455\u0459\u045e\u0465\u0469\u0474\u047a\u0481\u04b0\u04cd\u04d1"+
		"\u04d4\u04d7\u04dc\u04e2\u04e6\u04ec\u04ee\u04ff\u050b\u050f\u0516\u051e"+
		"\u0521\u0526\u052a\u052d\u0537\u053f\u0543\u0546\u054a\u054e\u0551\u0556"+
		"\u055c\u0561\u0566\u056a\u0575\u0577\u057b\u0585\u0589\u058f\u0592\u0599"+
		"\u059e\u05a6\u05ab\u05af\u05b7\u05bc\u05c2\u05c8\u05cb\u05ce\u05d1\u05da"+
		"\u05e2\u05e7\u05ef\u05f6\u05f9\u05fc\u05fe\u0606\u0609\u060c\u060f\u0612"+
		"\u0615\u0618\u061b\u061e\u0621\u0624\u0626\u0632\u0636\u0640\u0646\u0655"+
		"\u0666\u066b\u066f\u0673\u067a\u0681\u0687\u068b\u068e\u0695\u06ac\u06b1"+
		"\u06b5\u06bd\u06c6\u06ca\u06d0\u06d6\u06dd\u06e0\u06e6\u06ed\u06f5\u06fe"+
		"\u0707\u071b\u0722\u0724\u072b\u0735\u073d\u0741\u0745\u0752\u075b\u0761"+
		"\u0765\u076c\u076f\u0772\u0775\u0781\u0787\u07a1\u07a9\u07ad\u07b0\u07b3"+
		"\u07b6\u07b9\u07bc\u07bf\u07c2\u07cb\u07d5\u07d8\u07ec\u07f2\u07f8\u07fb"+
		"\u07fd\u0804\u080b\u080f\u0819\u081e\u0827\u082f\u0837\u0849\u0856\u086b"+
		"\u086f\u087e\u0884\u0887\u088a\u088d\u0890\u0894\u08a2\u08aa\u08ad\u08bc"+
		"\u08de\u08e6\u08eb\u08f3\u08f8\u08fd\u0907\u090f\u0917\u091f\u092a\u092e"+
		"\u0936\u093f\u0942\u094b\u0951\u0955\u095b\u095f\u096b\u0974\u097f\u0983"+
		"\u098a\u0996\u099d\u09a6\u09a9\u09b0\u09b6\u09bc\u09bf\u09c5\u09c9\u09cd"+
		"\u09d2\u09d6\u09da\u09de\u09e6\u09ea\u09ee\u09f2\u09f6\u09fe\u0a02\u0a06"+
		"\u0a0e\u0a13\u0a18\u0a1c\u0a20\u0a27\u0a30\u0a38\u0a43\u0a55\u0a58\u0a5e"+
		"\u0a78\u0a7b\u0a81\u0a89\u0a91\u0a9e\u0aa5\u0aab\u0aaf\u0ab2\u0ab5\u0ab8"+
		"\u0abb\u0abe\u0ac5\u0ac9\u0acc\u0acf\u0ad2\u0ad5\u0ad8\u0adf\u0ae2\u0ae9"+
		"\u0aec\u0aef\u0af2\u0af5\u0af8\u0afb\u0afe\u0b01\u0b04\u0b07\u0b0b\u0b0e"+
		"\u0b11\u0b14\u0b17\u0b1a\u0b1d\u0b20\u0b23\u0b26\u0b29\u0b2b\u0b31\u0b35"+
		"\u0b3c\u0b3e\u0b41\u0b46\u0b49\u0b4d\u0b52\u0b58\u0b5e\u0b66\u0b6e\u0b75"+
		"\u0b7b\u0b84\u0b87\u0b8b\u0b98\u0b9c\u0ba7\u0bae\u0bb2\u0bb7\u0bba\u0bc4"+
		"\u0bc6\u0bca\u0bd1\u0bd6\u0bea\u0bf1\u0c08\u0c16\u0c2b\u0c3b\u0c48\u0c4c"+
		"\u0c50\u0c57\u0c73\u0c7a\u0c7f\u0c84\u0c8c\u0c92\u0c96\u0c99\u0c9c\u0ca2"+
		"\u0ca9\u0cb3\u0cb7\u0cbc\u0cc0\u0cc6\u0ccd\u0cd4\u0cdc\u0ce5\u0ce9\u0cec"+
		"\u0cf4\u0cf7\u0cff\u0d02\u0d0a\u0d0e\u0d13\u0d17\u0d20\u0d30\u0d3f\u0d41"+
		"\u0d51\u0d58\u0d69\u0d6c\u0d6f\u0d75\u0d8c\u0d9a\u0d9d\u0da2\u0dbc\u0dc0"+
		"\u0dc3\u0dc6\u0dca\u0dcf\u0dd2\u0dd5\u0dd8\u0ddb\u0de1\u0de4\u0de7\u0dea"+
		"\u0ded\u0df0\u0df3\u0df6\u0df9\u0dfd\u0dff\u0e05\u0e0a\u0e0d\u0e10\u0e13"+
		"\u0e19\u0e1c\u0e1f\u0e22\u0e25\u0e28\u0e2b\u0e2e\u0e31\u0e35\u0e37\u0e39"+
		"\u0e3e\u0e44\u0e49\u0e5b\u0e64\u0e6f\u0e77\u0e83\u0e86\u0e8c\u0e93\u0e9a"+
		"\u0ea1\u0ea8\u0eb1\u0eb5\u0ebc\u0ec1\u0ec5\u0ed5\u0ed9\u0edb\u0ede\u0eeb"+
		"\u0eee\u0ef1\u0efd\u0f00\u0f07\u0f10\u0f15\u0f17\u0f19\u0f2a\u0f2d\u0f36"+
		"\u0f3c\u0f40\u0f43\u0f46\u0f49\u0f4c\u0f58\u0f5c\u0f5f\u0f62\u0f69\u0f6c"+
		"\u0f71\u0f79\u0f7f\u0f84\u0f88\u0f8d\u0f94\u0fa2\u0fa5\u0fa9\u0fba\u0fc2"+
		"\u0fc5\u0fd2\u0fdb\u0fde\u0fe4\u0fe7\u0fec\u0fef\u0ff8\u1006\u100c\u100e"+
		"\u1016\u1020\u1025\u1027\u1033\u1039\u103b\u1042\u1049\u1052\u105c\u105f"+
		"\u1062\u1065\u1069\u1072\u107b\u1083\u1089\u1092\u1099\u10a1\u10ab\u10b5"+
		"\u10ba\u10be\u10c2\u10c8\u10dd\u10e3\u10e7\u10eb\u10ee\u10f4\u10f9\u10fc"+
		"\u1100\u1108\u1112\u111c\u112f\u1136\u1139\u1144\u114b\u114e\u1150\u115b"+
		"\u1165\u1167\u116d\u1171\u117a\u1187\u118b\u1197\u119b\u11a4\u11c0\u11ca"+
		"\u11d2\u11d7\u11ec\u11f0\u11fe\u120d\u1216\u1218\u1220\u122d\u1238\u1243"+
		"\u124e\u1259\u1264\u126e\u1277\u127b\u1283\u1290\u129a\u12a0\u12ad\u12b6"+
		"\u12b8\u12c7\u12cc\u12d3\u12e0\u12eb\u12f4\u12fd\u1305\u130d\u1318\u1321"+
		"\u1325\u132a\u133a\u1342\u134b\u135f\u1370\u1379\u1380\u1386\u138d\u1394"+
		"\u139d\u139f\u13a6\u13bd\u13c1\u13c3\u13d5\u13db\u13e4\u13f1\u13f9\u1408"+
		"\u1425\u142a\u142c\u1440\u1447\u145e\u146f\u1474\u147f\u1484";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}