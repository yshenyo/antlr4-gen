// Generated from /Users/uuuuuuu/IdeaProjects/work/bbc/bbc-core/src/test/java/com/thinice/bbc/core/parser/antlr/postgresql/PostgreSQLParser.g4 by ANTLR 4.12.0
package com.thinice.bbc.core.parser.antlr.postgresql;


import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class PostgreSQLParser extends PostgreSQLParserBase {
	static { RuntimeMetaData.checkVersion("4.12.0", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		Dollar=1, OPEN_PAREN=2, CLOSE_PAREN=3, OPEN_BRACKET=4, CLOSE_BRACKET=5, 
		COMMA=6, SEMI=7, COLON=8, STAR=9, EQUAL=10, DOT=11, PLUS=12, MINUS=13, 
		SLASH=14, CARET=15, LT=16, GT=17, LESS_LESS=18, GREATER_GREATER=19, COLON_EQUALS=20, 
		LESS_EQUALS=21, EQUALS_GREATER=22, GREATER_EQUALS=23, DOT_DOT=24, NOT_EQUALS=25, 
		TYPECAST=26, PERCENT=27, PARAM=28, Operator=29, ALL=30, ANALYSE=31, ANALYZE=32, 
		AND=33, ANY=34, ARRAY=35, AS=36, ASC=37, ASYMMETRIC=38, BOTH=39, CASE=40, 
		CAST=41, CHECK=42, COLLATE=43, COLUMN=44, CONSTRAINT=45, CREATE=46, CURRENT_CATALOG=47, 
		CURRENT_DATE=48, CURRENT_ROLE=49, CURRENT_TIME=50, CURRENT_TIMESTAMP=51, 
		CURRENT_USER=52, DEFAULT=53, DEFERRABLE=54, DESC=55, DISTINCT=56, DO=57, 
		ELSE=58, EXCEPT=59, FALSE_P=60, FETCH=61, FOR=62, FOREIGN=63, FROM=64, 
		GRANT=65, GROUP_P=66, HAVING=67, IN_P=68, INITIALLY=69, INTERSECT=70, 
		INTO=71, LATERAL_P=72, LEADING=73, LIMIT=74, LOCALTIME=75, LOCALTIMESTAMP=76, 
		NOT=77, NULL_P=78, OFFSET=79, ON=80, ONLY=81, OR=82, ORDER=83, PLACING=84, 
		PRIMARY=85, REFERENCES=86, RETURNING=87, SELECT=88, SESSION_USER=89, SOME=90, 
		SYMMETRIC=91, TABLE=92, THEN=93, TO=94, TRAILING=95, TRUE_P=96, UNION=97, 
		UNIQUE=98, USER=99, USING=100, VARIADIC=101, WHEN=102, WHERE=103, WINDOW=104, 
		WITH=105, AUTHORIZATION=106, BINARY=107, COLLATION=108, CONCURRENTLY=109, 
		CROSS=110, CURRENT_SCHEMA=111, FREEZE=112, FULL=113, ILIKE=114, INNER_P=115, 
		IS=116, ISNULL=117, JOIN=118, LEFT=119, LIKE=120, NATURAL=121, NOTNULL=122, 
		OUTER_P=123, OVER=124, OVERLAPS=125, RIGHT=126, SIMILAR=127, VERBOSE=128, 
		ABORT_P=129, ABSOLUTE_P=130, ACCESS=131, ACTION=132, ADD_P=133, ADMIN=134, 
		AFTER=135, AGGREGATE=136, ALSO=137, ALTER=138, ALWAYS=139, ASSERTION=140, 
		ASSIGNMENT=141, AT=142, ATTRIBUTE=143, BACKWARD=144, BEFORE=145, BEGIN_P=146, 
		BY=147, CACHE=148, CALLED=149, CASCADE=150, CASCADED=151, CATALOG=152, 
		CHAIN=153, CHARACTERISTICS=154, CHECKPOINT=155, CLASS=156, CLOSE=157, 
		CLUSTER=158, COMMENT=159, COMMENTS=160, COMMIT=161, COMMITTED=162, CONFIGURATION=163, 
		CONNECTION=164, CONSTRAINTS=165, CONTENT_P=166, CONTINUE_P=167, CONVERSION_P=168, 
		COPY=169, COST=170, CSV=171, CURSOR=172, CYCLE=173, DATA_P=174, DATABASE=175, 
		DAY_P=176, DEALLOCATE=177, DECLARE=178, DEFAULTS=179, DEFERRED=180, DEFINER=181, 
		DELETE_P=182, DELIMITER=183, DELIMITERS=184, DICTIONARY=185, DISABLE_P=186, 
		DISCARD=187, DOCUMENT_P=188, DOMAIN_P=189, DOUBLE_P=190, DROP=191, EACH=192, 
		ENABLE_P=193, ENCODING=194, ENCRYPTED=195, ENUM_P=196, ESCAPE=197, EVENT=198, 
		EXCLUDE=199, EXCLUDING=200, EXCLUSIVE=201, EXECUTE=202, EXPLAIN=203, EXTENSION=204, 
		EXTERNAL=205, FAMILY=206, FIRST_P=207, FOLLOWING=208, FORCE=209, FORWARD=210, 
		FUNCTION=211, FUNCTIONS=212, GLOBAL=213, GRANTED=214, HANDLER=215, HEADER_P=216, 
		HOLD=217, HOUR_P=218, IDENTITY_P=219, IF_P=220, IMMEDIATE=221, IMMUTABLE=222, 
		IMPLICIT_P=223, INCLUDING=224, INCREMENT=225, INDEX=226, INDEXES=227, 
		INHERIT=228, INHERITS=229, INLINE_P=230, INSENSITIVE=231, INSERT=232, 
		INSTEAD=233, INVOKER=234, ISOLATION=235, KEY=236, LABEL=237, LANGUAGE=238, 
		LARGE_P=239, LAST_P=240, LEAKPROOF=241, LEVEL=242, LISTEN=243, LOAD=244, 
		LOCAL=245, LOCATION=246, LOCK_P=247, MAPPING=248, MATCH=249, MATCHED=250, 
		MATERIALIZED=251, MAXVALUE=252, MERGE=253, MINUTE_P=254, MINVALUE=255, 
		MODE=256, MONTH_P=257, MOVE=258, NAME_P=259, NAMES=260, NEXT=261, NO=262, 
		NOTHING=263, NOTIFY=264, NOWAIT=265, NULLS_P=266, OBJECT_P=267, OF=268, 
		OFF=269, OIDS=270, OPERATOR=271, OPTION=272, OPTIONS=273, OWNED=274, OWNER=275, 
		PARSER=276, PARTIAL=277, PARTITION=278, PASSING=279, PASSWORD=280, PLANS=281, 
		PRECEDING=282, PREPARE=283, PREPARED=284, PRESERVE=285, PRIOR=286, PRIVILEGES=287, 
		PROCEDURAL=288, PROCEDURE=289, PROGRAM=290, QUOTE=291, RANGE=292, READ=293, 
		REASSIGN=294, RECHECK=295, RECURSIVE=296, REF=297, REFRESH=298, REINDEX=299, 
		RELATIVE_P=300, RELEASE=301, RENAME=302, REPEATABLE=303, REPLACE=304, 
		REPLICA=305, RESET=306, RESTART=307, RESTRICT=308, RETURNS=309, REVOKE=310, 
		ROLE=311, ROLLBACK=312, ROWS=313, RULE=314, SAVEPOINT=315, SCHEMA=316, 
		SCROLL=317, SEARCH=318, SECOND_P=319, SECURITY=320, SEQUENCE=321, SEQUENCES=322, 
		SERIALIZABLE=323, SERVER=324, SESSION=325, SET=326, SHARE=327, SHOW=328, 
		SIMPLE=329, SNAPSHOT=330, STABLE=331, STANDALONE_P=332, START=333, STATEMENT=334, 
		STATISTICS=335, STDIN=336, STDOUT=337, STORAGE=338, STRICT_P=339, STRIP_P=340, 
		SYSID=341, SYSTEM_P=342, TABLES=343, TABLESPACE=344, TEMP=345, TEMPLATE=346, 
		TEMPORARY=347, TEXT_P=348, TRANSACTION=349, TRIGGER=350, TRUNCATE=351, 
		TRUSTED=352, TYPE_P=353, TYPES_P=354, UNBOUNDED=355, UNCOMMITTED=356, 
		UNENCRYPTED=357, UNKNOWN=358, UNLISTEN=359, UNLOGGED=360, UNTIL=361, UPDATE=362, 
		VACUUM=363, VALID=364, VALIDATE=365, VALIDATOR=366, VARYING=367, VERSION_P=368, 
		VIEW=369, VOLATILE=370, WHITESPACE_P=371, WITHOUT=372, WORK=373, WRAPPER=374, 
		WRITE=375, XML_P=376, YEAR_P=377, YES_P=378, ZONE=379, BETWEEN=380, BIGINT=381, 
		BIT=382, BOOLEAN_P=383, CHAR_P=384, CHARACTER=385, COALESCE=386, DEC=387, 
		DECIMAL_P=388, EXISTS=389, EXTRACT=390, FLOAT_P=391, GREATEST=392, INOUT=393, 
		INT_P=394, INTEGER=395, INTERVAL=396, LEAST=397, NATIONAL=398, NCHAR=399, 
		NONE=400, NULLIF=401, NUMERIC=402, OVERLAY=403, POSITION=404, PRECISION=405, 
		REAL=406, ROW=407, SETOF=408, SMALLINT=409, SUBSTRING=410, TIME=411, TIMESTAMP=412, 
		TREAT=413, TRIM=414, VALUES=415, VARCHAR=416, XMLATTRIBUTES=417, XMLCOMMENT=418, 
		XMLAGG=419, XML_IS_WELL_FORMED=420, XML_IS_WELL_FORMED_DOCUMENT=421, XML_IS_WELL_FORMED_CONTENT=422, 
		XPATH=423, XPATH_EXISTS=424, XMLCONCAT=425, XMLELEMENT=426, XMLEXISTS=427, 
		XMLFOREST=428, XMLPARSE=429, XMLPI=430, XMLROOT=431, XMLSERIALIZE=432, 
		CALL=433, CURRENT_P=434, ATTACH=435, DETACH=436, EXPRESSION=437, GENERATED=438, 
		LOGGED=439, STORED=440, INCLUDE=441, ROUTINE=442, TRANSFORM=443, IMPORT_P=444, 
		POLICY=445, METHOD=446, REFERENCING=447, NEW=448, OLD=449, VALUE_P=450, 
		SUBSCRIPTION=451, PUBLICATION=452, OUT_P=453, END_P=454, ROUTINES=455, 
		SCHEMAS=456, PROCEDURES=457, INPUT_P=458, SUPPORT=459, PARALLEL=460, SQL_P=461, 
		DEPENDS=462, OVERRIDING=463, CONFLICT=464, SKIP_P=465, LOCKED=466, TIES=467, 
		ROLLUP=468, CUBE=469, GROUPING=470, SETS=471, TABLESAMPLE=472, ORDINALITY=473, 
		XMLTABLE=474, COLUMNS=475, XMLNAMESPACES=476, ROWTYPE=477, NORMALIZED=478, 
		WITHIN=479, FILTER=480, GROUPS=481, OTHERS=482, NFC=483, NFD=484, NFKC=485, 
		NFKD=486, UESCAPE=487, VIEWS=488, NORMALIZE=489, DUMP=490, PRINT_STRICT_PARAMS=491, 
		VARIABLE_CONFLICT=492, ERROR=493, USE_VARIABLE=494, USE_COLUMN=495, ALIAS=496, 
		CONSTANT=497, PERFORM=498, GET=499, DIAGNOSTICS=500, STACKED=501, ELSIF=502, 
		WHILE=503, REVERSE=504, FOREACH=505, SLICE=506, EXIT=507, RETURN=508, 
		QUERY=509, RAISE=510, SQLSTATE=511, DEBUG=512, LOG=513, INFO=514, NOTICE=515, 
		WARNING=516, EXCEPTION=517, ASSERT=518, LOOP=519, OPEN=520, ABS=521, CBRT=522, 
		CEIL=523, CEILING=524, DEGREES=525, DIV=526, EXP=527, FACTORIAL=528, FLOOR=529, 
		GCD=530, LCM=531, LN=532, LOG10=533, MIN_SCALE=534, MOD=535, PI=536, POWER=537, 
		RADIANS=538, ROUND=539, SCALE=540, SIGN=541, SQRT=542, TRIM_SCALE=543, 
		TRUNC=544, WIDTH_BUCKET=545, RANDOM=546, SETSEED=547, ACOS=548, ACOSD=549, 
		ASIN=550, ASIND=551, ATAN=552, ATAND=553, ATAN2=554, ATAN2D=555, COS=556, 
		COSD=557, COT=558, COTD=559, SIN=560, SIND=561, TAN=562, TAND=563, SINH=564, 
		COSH=565, TANH=566, ASINH=567, ACOSH=568, ATANH=569, BIT_LENGTH=570, CHAR_LENGTH=571, 
		CHARACTER_LENGTH=572, LOWER=573, OCTET_LENGTH=574, UPPER=575, ASCII=576, 
		BTRIM=577, CHR=578, CONCAT=579, CONCAT_WS=580, FORMAT=581, INITCAP=582, 
		LENGTH=583, LPAD=584, LTRIM=585, MD5=586, PARSE_IDENT=587, PG_CLIENT_ENCODING=588, 
		QUOTE_IDENT=589, QUOTE_LITERAL=590, QUOTE_NULLABLE=591, REGEXP_COUNT=592, 
		REGEXP_INSTR=593, REGEXP_LIKE=594, REGEXP_MATCH=595, REGEXP_MATCHES=596, 
		REGEXP_REPLACE=597, REGEXP_SPLIT_TO_ARRAY=598, REGEXP_SPLIT_TO_TABLE=599, 
		REGEXP_SUBSTR=600, REPEAT=601, RPAD=602, RTRIM=603, SPLIT_PART=604, STARTS_WITH=605, 
		STRING_TO_ARRAY=606, STRING_TO_TABLE=607, STRPOS=608, SUBSTR=609, TO_ASCII=610, 
		TO_HEX=611, TRANSLATE=612, UNISTR=613, AGE=614, CLOCK_TIMESTAMP=615, DATE_BIN=616, 
		DATE_PART=617, DATE_TRUNC=618, ISFINITE=619, JUSTIFY_DAYS=620, JUSTIFY_HOURS=621, 
		JUSTIFY_INTERVAL=622, MAKE_DATE=623, MAKE_INTERVAL=624, MAKE_TIME=625, 
		MAKE_TIMESTAMP=626, MAKE_TIMESTAMPTZ=627, NOW=628, STATEMENT_TIMESTAMP=629, 
		TIMEOFDAY=630, TRANSACTION_TIMESTAMP=631, TO_TIMESTAMP=632, TO_CHAR=633, 
		TO_DATE=634, TO_NUMBER=635, Identifier=636, QuotedIdentifier=637, UnterminatedQuotedIdentifier=638, 
		InvalidQuotedIdentifier=639, InvalidUnterminatedQuotedIdentifier=640, 
		UnicodeQuotedIdentifier=641, UnterminatedUnicodeQuotedIdentifier=642, 
		InvalidUnicodeQuotedIdentifier=643, InvalidUnterminatedUnicodeQuotedIdentifier=644, 
		StringConstant=645, UnterminatedStringConstant=646, UnicodeEscapeStringConstant=647, 
		UnterminatedUnicodeEscapeStringConstant=648, BeginDollarStringConstant=649, 
		BinaryStringConstant=650, UnterminatedBinaryStringConstant=651, InvalidBinaryStringConstant=652, 
		InvalidUnterminatedBinaryStringConstant=653, HexadecimalStringConstant=654, 
		UnterminatedHexadecimalStringConstant=655, InvalidHexadecimalStringConstant=656, 
		InvalidUnterminatedHexadecimalStringConstant=657, Integral=658, NumericFail=659, 
		Numeric=660, PLSQLVARIABLENAME=661, PLSQLIDENTIFIER=662, Whitespace=663, 
		Newline=664, LineComment=665, BlockComment=666, UnterminatedBlockComment=667, 
		MetaCommand=668, EndMetaCommand=669, ErrorCharacter=670, EscapeStringConstant=671, 
		UnterminatedEscapeStringConstant=672, InvalidEscapeStringConstant=673, 
		InvalidUnterminatedEscapeStringConstant=674, AfterEscapeStringConstantMode_NotContinued=675, 
		AfterEscapeStringConstantWithNewlineMode_NotContinued=676, DollarText=677, 
		EndDollarStringConstant=678, AfterEscapeStringConstantWithNewlineMode_Continued=679;
	public static final int
		RULE_root = 0, RULE_plsqlroot = 1, RULE_stmtblock = 2, RULE_stmtmulti = 3, 
		RULE_stmt = 4, RULE_plsqlconsolecommand = 5, RULE_callstmt = 6, RULE_createrolestmt = 7, 
		RULE_opt_with = 8, RULE_optrolelist = 9, RULE_alteroptrolelist = 10, RULE_alteroptroleelem = 11, 
		RULE_createoptroleelem = 12, RULE_createuserstmt = 13, RULE_alterrolestmt = 14, 
		RULE_opt_in_database = 15, RULE_alterrolesetstmt = 16, RULE_droprolestmt = 17, 
		RULE_creategroupstmt = 18, RULE_altergroupstmt = 19, RULE_add_drop = 20, 
		RULE_createschemastmt = 21, RULE_optschemaname = 22, RULE_optschemaeltlist = 23, 
		RULE_schema_stmt = 24, RULE_variablesetstmt = 25, RULE_set_rest = 26, 
		RULE_generic_set = 27, RULE_set_rest_more = 28, RULE_var_name = 29, RULE_var_list = 30, 
		RULE_var_value = 31, RULE_iso_level = 32, RULE_opt_boolean_or_string = 33, 
		RULE_zone_value = 34, RULE_opt_encoding = 35, RULE_nonreservedword_or_sconst = 36, 
		RULE_variableresetstmt = 37, RULE_reset_rest = 38, RULE_generic_reset = 39, 
		RULE_setresetclause = 40, RULE_functionsetresetclause = 41, RULE_variableshowstmt = 42, 
		RULE_constraintssetstmt = 43, RULE_constraints_set_list = 44, RULE_constraints_set_mode = 45, 
		RULE_checkpointstmt = 46, RULE_discardstmt = 47, RULE_altertablestmt = 48, 
		RULE_alter_table_cmds = 49, RULE_partition_cmd = 50, RULE_index_partition_cmd = 51, 
		RULE_alter_table_cmd = 52, RULE_alter_column_default = 53, RULE_opt_drop_behavior = 54, 
		RULE_opt_collate_clause = 55, RULE_alter_using = 56, RULE_replica_identity = 57, 
		RULE_reloptions = 58, RULE_opt_reloptions = 59, RULE_reloption_list = 60, 
		RULE_reloption_elem = 61, RULE_alter_identity_column_option_list = 62, 
		RULE_alter_identity_column_option = 63, RULE_partitionboundspec = 64, 
		RULE_hash_partbound_elem = 65, RULE_hash_partbound = 66, RULE_altercompositetypestmt = 67, 
		RULE_alter_type_cmds = 68, RULE_alter_type_cmd = 69, RULE_closeportalstmt = 70, 
		RULE_copystmt = 71, RULE_copy_from = 72, RULE_opt_program = 73, RULE_copy_file_name = 74, 
		RULE_copy_options = 75, RULE_copy_opt_list = 76, RULE_copy_opt_item = 77, 
		RULE_opt_binary = 78, RULE_copy_delimiter = 79, RULE_opt_using = 80, RULE_copy_generic_opt_list = 81, 
		RULE_copy_generic_opt_elem = 82, RULE_copy_generic_opt_arg = 83, RULE_copy_generic_opt_arg_list = 84, 
		RULE_copy_generic_opt_arg_list_item = 85, RULE_createstmt = 86, RULE_opttemp = 87, 
		RULE_opttableelementlist = 88, RULE_opttypedtableelementlist = 89, RULE_tableelementlist = 90, 
		RULE_typedtableelementlist = 91, RULE_tableelement = 92, RULE_typedtableelement = 93, 
		RULE_columnDef = 94, RULE_columnOptions = 95, RULE_colquallist = 96, RULE_colconstraint = 97, 
		RULE_colconstraintelem = 98, RULE_generated_when = 99, RULE_constraintattr = 100, 
		RULE_tablelikeclause = 101, RULE_tablelikeoptionlist = 102, RULE_tablelikeoption = 103, 
		RULE_tableconstraint = 104, RULE_constraintelem = 105, RULE_opt_no_inherit = 106, 
		RULE_opt_column_list = 107, RULE_columnlist = 108, RULE_columnElem = 109, 
		RULE_opt_c_include = 110, RULE_key_match = 111, RULE_exclusionconstraintlist = 112, 
		RULE_exclusionconstraintelem = 113, RULE_exclusionwhereclause = 114, RULE_key_actions = 115, 
		RULE_key_update = 116, RULE_key_delete = 117, RULE_key_action = 118, RULE_optinherit = 119, 
		RULE_optpartitionspec = 120, RULE_partitionspec = 121, RULE_part_params = 122, 
		RULE_part_elem = 123, RULE_table_access_method_clause = 124, RULE_optwith = 125, 
		RULE_oncommitoption = 126, RULE_opttablespace = 127, RULE_optconstablespace = 128, 
		RULE_existingindex = 129, RULE_createstatsstmt = 130, RULE_alterstatsstmt = 131, 
		RULE_createasstmt = 132, RULE_create_as_target = 133, RULE_opt_with_data = 134, 
		RULE_creatematviewstmt = 135, RULE_create_mv_target = 136, RULE_optnolog = 137, 
		RULE_refreshmatviewstmt = 138, RULE_createseqstmt = 139, RULE_alterseqstmt = 140, 
		RULE_optseqoptlist = 141, RULE_optparenthesizedseqoptlist = 142, RULE_seqoptlist = 143, 
		RULE_seqoptelem = 144, RULE_opt_by = 145, RULE_numericonly = 146, RULE_numericonly_list = 147, 
		RULE_createplangstmt = 148, RULE_opt_trusted = 149, RULE_handler_name = 150, 
		RULE_opt_inline_handler = 151, RULE_validator_clause = 152, RULE_opt_validator = 153, 
		RULE_opt_procedural = 154, RULE_createtablespacestmt = 155, RULE_opttablespaceowner = 156, 
		RULE_droptablespacestmt = 157, RULE_createextensionstmt = 158, RULE_create_extension_opt_list = 159, 
		RULE_create_extension_opt_item = 160, RULE_alterextensionstmt = 161, RULE_alter_extension_opt_list = 162, 
		RULE_alter_extension_opt_item = 163, RULE_alterextensioncontentsstmt = 164, 
		RULE_createfdwstmt = 165, RULE_fdw_option = 166, RULE_fdw_options = 167, 
		RULE_opt_fdw_options = 168, RULE_alterfdwstmt = 169, RULE_create_generic_options = 170, 
		RULE_generic_option_list = 171, RULE_alter_generic_options = 172, RULE_alter_generic_option_list = 173, 
		RULE_alter_generic_option_elem = 174, RULE_generic_option_elem = 175, 
		RULE_generic_option_name = 176, RULE_generic_option_arg = 177, RULE_createforeignserverstmt = 178, 
		RULE_opt_type = 179, RULE_foreign_server_version = 180, RULE_opt_foreign_server_version = 181, 
		RULE_alterforeignserverstmt = 182, RULE_createforeigntablestmt = 183, 
		RULE_importforeignschemastmt = 184, RULE_import_qualification_type = 185, 
		RULE_import_qualification = 186, RULE_createusermappingstmt = 187, RULE_auth_ident = 188, 
		RULE_dropusermappingstmt = 189, RULE_alterusermappingstmt = 190, RULE_createpolicystmt = 191, 
		RULE_alterpolicystmt = 192, RULE_rowsecurityoptionalexpr = 193, RULE_rowsecurityoptionalwithcheck = 194, 
		RULE_rowsecuritydefaulttorole = 195, RULE_rowsecurityoptionaltorole = 196, 
		RULE_rowsecuritydefaultpermissive = 197, RULE_rowsecuritydefaultforcmd = 198, 
		RULE_row_security_cmd = 199, RULE_createamstmt = 200, RULE_am_type = 201, 
		RULE_createtrigstmt = 202, RULE_triggeractiontime = 203, RULE_triggerevents = 204, 
		RULE_triggeroneevent = 205, RULE_triggerreferencing = 206, RULE_triggertransitions = 207, 
		RULE_triggertransition = 208, RULE_transitionoldornew = 209, RULE_transitionrowortable = 210, 
		RULE_transitionrelname = 211, RULE_triggerforspec = 212, RULE_triggerforopteach = 213, 
		RULE_triggerfortype = 214, RULE_triggerwhen = 215, RULE_function_or_procedure = 216, 
		RULE_triggerfuncargs = 217, RULE_triggerfuncarg = 218, RULE_optconstrfromtable = 219, 
		RULE_constraintattributespec = 220, RULE_constraintattributeElem = 221, 
		RULE_createeventtrigstmt = 222, RULE_event_trigger_when_list = 223, RULE_event_trigger_when_item = 224, 
		RULE_event_trigger_value_list = 225, RULE_altereventtrigstmt = 226, RULE_enable_trigger = 227, 
		RULE_createassertionstmt = 228, RULE_definestmt = 229, RULE_definition = 230, 
		RULE_def_list = 231, RULE_def_elem = 232, RULE_def_arg = 233, RULE_old_aggr_definition = 234, 
		RULE_old_aggr_list = 235, RULE_old_aggr_elem = 236, RULE_opt_enum_val_list = 237, 
		RULE_enum_val_list = 238, RULE_alterenumstmt = 239, RULE_opt_if_not_exists = 240, 
		RULE_createopclassstmt = 241, RULE_opclass_item_list = 242, RULE_opclass_item = 243, 
		RULE_opt_default = 244, RULE_opt_opfamily = 245, RULE_opclass_purpose = 246, 
		RULE_opt_recheck = 247, RULE_createopfamilystmt = 248, RULE_alteropfamilystmt = 249, 
		RULE_opclass_drop_list = 250, RULE_opclass_drop = 251, RULE_dropopclassstmt = 252, 
		RULE_dropopfamilystmt = 253, RULE_dropownedstmt = 254, RULE_reassignownedstmt = 255, 
		RULE_dropstmt = 256, RULE_object_type_any_name = 257, RULE_object_type_name = 258, 
		RULE_drop_type_name = 259, RULE_object_type_name_on_any_name = 260, RULE_any_name_list = 261, 
		RULE_any_name = 262, RULE_attrs = 263, RULE_type_name_list = 264, RULE_truncatestmt = 265, 
		RULE_opt_restart_seqs = 266, RULE_commentstmt = 267, RULE_comment_text = 268, 
		RULE_seclabelstmt = 269, RULE_opt_provider = 270, RULE_security_label = 271, 
		RULE_fetchstmt = 272, RULE_fetch_args = 273, RULE_from_in = 274, RULE_opt_from_in = 275, 
		RULE_grantstmt = 276, RULE_revokestmt = 277, RULE_privileges = 278, RULE_privilege_list = 279, 
		RULE_privilege = 280, RULE_privilege_target = 281, RULE_grantee_list = 282, 
		RULE_grantee = 283, RULE_opt_grant_grant_option = 284, RULE_grantrolestmt = 285, 
		RULE_revokerolestmt = 286, RULE_opt_grant_admin_option = 287, RULE_opt_granted_by = 288, 
		RULE_alterdefaultprivilegesstmt = 289, RULE_defacloptionlist = 290, RULE_defacloption = 291, 
		RULE_defaclaction = 292, RULE_defacl_privilege_target = 293, RULE_indexstmt = 294, 
		RULE_opt_unique = 295, RULE_opt_concurrently = 296, RULE_opt_index_name = 297, 
		RULE_access_method_clause = 298, RULE_index_params = 299, RULE_index_elem_options = 300, 
		RULE_index_elem = 301, RULE_opt_include = 302, RULE_index_including_params = 303, 
		RULE_opt_collate = 304, RULE_opt_class = 305, RULE_opt_asc_desc = 306, 
		RULE_opt_nulls_order = 307, RULE_createfunctionstmt = 308, RULE_opt_or_replace = 309, 
		RULE_func_args = 310, RULE_func_args_list = 311, RULE_function_with_argtypes_list = 312, 
		RULE_function_with_argtypes = 313, RULE_func_args_with_defaults = 314, 
		RULE_func_args_with_defaults_list = 315, RULE_func_arg = 316, RULE_arg_class = 317, 
		RULE_param_name = 318, RULE_func_return = 319, RULE_func_type = 320, RULE_func_arg_with_default = 321, 
		RULE_aggr_arg = 322, RULE_aggr_args = 323, RULE_aggr_args_list = 324, 
		RULE_aggregate_with_argtypes = 325, RULE_aggregate_with_argtypes_list = 326, 
		RULE_createfunc_opt_list = 327, RULE_common_func_opt_item = 328, RULE_createfunc_opt_item = 329, 
		RULE_func_as = 330, RULE_transform_type_list = 331, RULE_opt_definition = 332, 
		RULE_table_func_column = 333, RULE_table_func_column_list = 334, RULE_alterfunctionstmt = 335, 
		RULE_alterfunc_opt_list = 336, RULE_opt_restrict = 337, RULE_removefuncstmt = 338, 
		RULE_removeaggrstmt = 339, RULE_removeoperstmt = 340, RULE_oper_argtypes = 341, 
		RULE_any_operator = 342, RULE_operator_with_argtypes_list = 343, RULE_operator_with_argtypes = 344, 
		RULE_dostmt = 345, RULE_dostmt_opt_list = 346, RULE_dostmt_opt_item = 347, 
		RULE_createcaststmt = 348, RULE_cast_context = 349, RULE_dropcaststmt = 350, 
		RULE_opt_if_exists = 351, RULE_createtransformstmt = 352, RULE_transform_element_list = 353, 
		RULE_droptransformstmt = 354, RULE_reindexstmt = 355, RULE_reindex_target_type = 356, 
		RULE_reindex_target_multitable = 357, RULE_reindex_option_list = 358, 
		RULE_reindex_option_elem = 359, RULE_altertblspcstmt = 360, RULE_renamestmt = 361, 
		RULE_opt_column = 362, RULE_opt_set_data = 363, RULE_alterobjectdependsstmt = 364, 
		RULE_opt_no = 365, RULE_alterobjectschemastmt = 366, RULE_alteroperatorstmt = 367, 
		RULE_operator_def_list = 368, RULE_operator_def_elem = 369, RULE_operator_def_arg = 370, 
		RULE_altertypestmt = 371, RULE_alterownerstmt = 372, RULE_createpublicationstmt = 373, 
		RULE_opt_publication_for_tables = 374, RULE_publication_for_tables = 375, 
		RULE_alterpublicationstmt = 376, RULE_createsubscriptionstmt = 377, RULE_publication_name_list = 378, 
		RULE_publication_name_item = 379, RULE_altersubscriptionstmt = 380, RULE_dropsubscriptionstmt = 381, 
		RULE_rulestmt = 382, RULE_ruleactionlist = 383, RULE_ruleactionmulti = 384, 
		RULE_ruleactionstmt = 385, RULE_ruleactionstmtOrEmpty = 386, RULE_event = 387, 
		RULE_opt_instead = 388, RULE_notifystmt = 389, RULE_notify_payload = 390, 
		RULE_listenstmt = 391, RULE_unlistenstmt = 392, RULE_transactionstmt = 393, 
		RULE_opt_transaction = 394, RULE_transaction_mode_item = 395, RULE_transaction_mode_list = 396, 
		RULE_transaction_mode_list_or_empty = 397, RULE_opt_transaction_chain = 398, 
		RULE_viewstmt = 399, RULE_opt_check_option = 400, RULE_loadstmt = 401, 
		RULE_createdbstmt = 402, RULE_createdb_opt_list = 403, RULE_createdb_opt_items = 404, 
		RULE_createdb_opt_item = 405, RULE_createdb_opt_name = 406, RULE_opt_equal = 407, 
		RULE_alterdatabasestmt = 408, RULE_alterdatabasesetstmt = 409, RULE_dropdbstmt = 410, 
		RULE_drop_option_list = 411, RULE_drop_option = 412, RULE_altercollationstmt = 413, 
		RULE_altersystemstmt = 414, RULE_createdomainstmt = 415, RULE_alterdomainstmt = 416, 
		RULE_opt_as = 417, RULE_altertsdictionarystmt = 418, RULE_altertsconfigurationstmt = 419, 
		RULE_any_with = 420, RULE_createconversionstmt = 421, RULE_clusterstmt = 422, 
		RULE_cluster_index_specification = 423, RULE_vacuumstmt = 424, RULE_analyzestmt = 425, 
		RULE_vac_analyze_option_list = 426, RULE_analyze_keyword = 427, RULE_vac_analyze_option_elem = 428, 
		RULE_vac_analyze_option_name = 429, RULE_vac_analyze_option_arg = 430, 
		RULE_opt_analyze = 431, RULE_opt_verbose = 432, RULE_opt_full = 433, RULE_opt_freeze = 434, 
		RULE_opt_name_list = 435, RULE_vacuum_relation = 436, RULE_vacuum_relation_list = 437, 
		RULE_opt_vacuum_relation_list = 438, RULE_explainstmt = 439, RULE_explainablestmt = 440, 
		RULE_explain_option_list = 441, RULE_explain_option_elem = 442, RULE_explain_option_name = 443, 
		RULE_explain_option_arg = 444, RULE_preparestmt = 445, RULE_prep_type_clause = 446, 
		RULE_preparablestmt = 447, RULE_executestmt = 448, RULE_execute_param_clause = 449, 
		RULE_deallocatestmt = 450, RULE_insertstmt = 451, RULE_insert_target = 452, 
		RULE_insert_rest = 453, RULE_override_kind = 454, RULE_insert_column_list = 455, 
		RULE_insert_column_item = 456, RULE_opt_on_conflict = 457, RULE_opt_conf_expr = 458, 
		RULE_returning_clause = 459, RULE_mergestmt = 460, RULE_merge_insert_clause = 461, 
		RULE_merge_update_clause = 462, RULE_merge_delete_clause = 463, RULE_deletestmt = 464, 
		RULE_using_clause = 465, RULE_lockstmt = 466, RULE_opt_lock = 467, RULE_lock_type = 468, 
		RULE_opt_nowait = 469, RULE_opt_nowait_or_skip = 470, RULE_updatestmt = 471, 
		RULE_set_clause_list = 472, RULE_set_clause = 473, RULE_set_target = 474, 
		RULE_set_target_list = 475, RULE_declarecursorstmt = 476, RULE_cursor_name = 477, 
		RULE_cursor_options = 478, RULE_opt_hold = 479, RULE_selectstmt = 480, 
		RULE_select_with_parens = 481, RULE_select_no_parens = 482, RULE_select_clause = 483, 
		RULE_simple_select = 484, RULE_set_operator = 485, RULE_set_operator_with_all_or_distinct = 486, 
		RULE_with_clause = 487, RULE_cte_list = 488, RULE_common_table_expr = 489, 
		RULE_opt_materialized = 490, RULE_opt_with_clause = 491, RULE_into_clause = 492, 
		RULE_opt_strict = 493, RULE_opttempTableName = 494, RULE_opt_table = 495, 
		RULE_all_or_distinct = 496, RULE_distinct_clause = 497, RULE_opt_all_clause = 498, 
		RULE_opt_sort_clause = 499, RULE_sort_clause = 500, RULE_sortby_list = 501, 
		RULE_sortby = 502, RULE_select_limit = 503, RULE_opt_select_limit = 504, 
		RULE_limit_clause = 505, RULE_offset_clause = 506, RULE_select_limit_value = 507, 
		RULE_select_offset_value = 508, RULE_select_fetch_first_value = 509, RULE_i_or_f_const = 510, 
		RULE_row_or_rows = 511, RULE_first_or_next = 512, RULE_group_clause = 513, 
		RULE_group_by_list = 514, RULE_group_by_item = 515, RULE_empty_grouping_set = 516, 
		RULE_rollup_clause = 517, RULE_cube_clause = 518, RULE_grouping_sets_clause = 519, 
		RULE_having_clause = 520, RULE_for_locking_clause = 521, RULE_opt_for_locking_clause = 522, 
		RULE_for_locking_items = 523, RULE_for_locking_item = 524, RULE_for_locking_strength = 525, 
		RULE_locked_rels_list = 526, RULE_values_clause = 527, RULE_from_clause = 528, 
		RULE_from_list = 529, RULE_non_ansi_join = 530, RULE_table_ref = 531, 
		RULE_alias_clause = 532, RULE_opt_alias_clause = 533, RULE_table_alias_clause = 534, 
		RULE_func_alias_clause = 535, RULE_join_type = 536, RULE_join_qual = 537, 
		RULE_relation_expr = 538, RULE_relation_expr_list = 539, RULE_relation_expr_opt_alias = 540, 
		RULE_tablesample_clause = 541, RULE_opt_repeatable_clause = 542, RULE_func_table = 543, 
		RULE_rowsfrom_item = 544, RULE_rowsfrom_list = 545, RULE_opt_col_def_list = 546, 
		RULE_opt_ordinality = 547, RULE_where_clause = 548, RULE_where_or_current_clause = 549, 
		RULE_opttablefuncelementlist = 550, RULE_tablefuncelementlist = 551, RULE_tablefuncelement = 552, 
		RULE_xmltable = 553, RULE_xmltable_column_list = 554, RULE_xmltable_column_el = 555, 
		RULE_xmltable_column_option_list = 556, RULE_xmltable_column_option_el = 557, 
		RULE_xml_namespace_list = 558, RULE_xml_namespace_el = 559, RULE_typename = 560, 
		RULE_opt_array_bounds = 561, RULE_simpletypename = 562, RULE_consttypename = 563, 
		RULE_generictype = 564, RULE_opt_type_modifiers = 565, RULE_numeric = 566, 
		RULE_opt_float = 567, RULE_bit = 568, RULE_constbit = 569, RULE_bitwithlength = 570, 
		RULE_bitwithoutlength = 571, RULE_character = 572, RULE_constcharacter = 573, 
		RULE_character_c = 574, RULE_opt_varying = 575, RULE_constdatetime = 576, 
		RULE_constinterval = 577, RULE_opt_timezone = 578, RULE_opt_interval = 579, 
		RULE_interval_second = 580, RULE_opt_escape = 581, RULE_a_expr = 582, 
		RULE_a_expr_qual = 583, RULE_a_expr_lessless = 584, RULE_a_expr_or = 585, 
		RULE_a_expr_and = 586, RULE_a_expr_between = 587, RULE_a_expr_in = 588, 
		RULE_a_expr_unary_not = 589, RULE_a_expr_isnull = 590, RULE_a_expr_is_not = 591, 
		RULE_a_expr_compare = 592, RULE_a_expr_like = 593, RULE_a_expr_qual_op = 594, 
		RULE_a_expr_unary_qualop = 595, RULE_a_expr_add = 596, RULE_a_expr_mul = 597, 
		RULE_a_expr_caret = 598, RULE_a_expr_unary_sign = 599, RULE_a_expr_at_time_zone = 600, 
		RULE_a_expr_collate = 601, RULE_a_expr_typecast = 602, RULE_b_expr = 603, 
		RULE_c_expr = 604, RULE_plsqlvariablename = 605, RULE_func_application = 606, 
		RULE_func_expr = 607, RULE_func_expr_windowless = 608, RULE_func_expr_common_subexpr = 609, 
		RULE_xml_root_version = 610, RULE_opt_xml_root_standalone = 611, RULE_xml_attributes = 612, 
		RULE_xml_attribute_list = 613, RULE_xml_attribute_el = 614, RULE_document_or_content = 615, 
		RULE_xml_whitespace_option = 616, RULE_xmlexists_argument = 617, RULE_xml_passing_mech = 618, 
		RULE_within_group_clause = 619, RULE_filter_clause = 620, RULE_window_clause = 621, 
		RULE_window_definition_list = 622, RULE_window_definition = 623, RULE_over_clause = 624, 
		RULE_window_specification = 625, RULE_opt_existing_window_name = 626, 
		RULE_opt_partition_clause = 627, RULE_opt_frame_clause = 628, RULE_frame_extent = 629, 
		RULE_frame_bound = 630, RULE_opt_window_exclusion_clause = 631, RULE_row = 632, 
		RULE_explicit_row = 633, RULE_implicit_row = 634, RULE_sub_type = 635, 
		RULE_all_op = 636, RULE_mathop = 637, RULE_qual_op = 638, RULE_qual_all_op = 639, 
		RULE_subquery_Op = 640, RULE_expr_list = 641, RULE_func_arg_list = 642, 
		RULE_func_arg_expr = 643, RULE_type_list = 644, RULE_array_expr = 645, 
		RULE_array_expr_list = 646, RULE_extract_list = 647, RULE_extract_arg = 648, 
		RULE_unicode_normal_form = 649, RULE_overlay_list = 650, RULE_position_list = 651, 
		RULE_substr_list = 652, RULE_trim_list = 653, RULE_in_expr = 654, RULE_case_expr = 655, 
		RULE_when_clause_list = 656, RULE_when_clause = 657, RULE_case_default = 658, 
		RULE_case_arg = 659, RULE_columnref = 660, RULE_indirection_el = 661, 
		RULE_opt_slice_bound = 662, RULE_indirection = 663, RULE_opt_indirection = 664, 
		RULE_opt_target_list = 665, RULE_target_list = 666, RULE_target_el = 667, 
		RULE_qualified_name_list = 668, RULE_qualified_name = 669, RULE_name_list = 670, 
		RULE_name = 671, RULE_attr_name = 672, RULE_file_name = 673, RULE_func_name = 674, 
		RULE_aexprconst = 675, RULE_xconst = 676, RULE_bconst = 677, RULE_fconst = 678, 
		RULE_iconst = 679, RULE_sconst = 680, RULE_anysconst = 681, RULE_opt_uescape = 682, 
		RULE_signediconst = 683, RULE_roleid = 684, RULE_rolespec = 685, RULE_role_list = 686, 
		RULE_colid = 687, RULE_table_alias = 688, RULE_type_function_name = 689, 
		RULE_nonreservedword = 690, RULE_collabel = 691, RULE_identifier = 692, 
		RULE_plsqlidentifier = 693, RULE_unreserved_keyword = 694, RULE_col_name_keyword = 695, 
		RULE_type_func_name_keyword = 696, RULE_reserved_keyword = 697, RULE_builtin_function_name = 698, 
		RULE_pl_function = 699, RULE_comp_options = 700, RULE_comp_option = 701, 
		RULE_sharp = 702, RULE_option_value = 703, RULE_opt_semi = 704, RULE_pl_block = 705, 
		RULE_decl_sect = 706, RULE_decl_start = 707, RULE_decl_stmts = 708, RULE_label_decl = 709, 
		RULE_decl_stmt = 710, RULE_decl_statement = 711, RULE_opt_scrollable = 712, 
		RULE_decl_cursor_query = 713, RULE_decl_cursor_args = 714, RULE_decl_cursor_arglist = 715, 
		RULE_decl_cursor_arg = 716, RULE_decl_is_for = 717, RULE_decl_aliasitem = 718, 
		RULE_decl_varname = 719, RULE_decl_const = 720, RULE_decl_datatype = 721, 
		RULE_decl_collate = 722, RULE_decl_notnull = 723, RULE_decl_defval = 724, 
		RULE_decl_defkey = 725, RULE_assign_operator = 726, RULE_proc_sect = 727, 
		RULE_proc_stmt = 728, RULE_stmt_perform = 729, RULE_stmt_call = 730, RULE_opt_expr_list = 731, 
		RULE_stmt_assign = 732, RULE_stmt_getdiag = 733, RULE_getdiag_area_opt = 734, 
		RULE_getdiag_list = 735, RULE_getdiag_list_item = 736, RULE_getdiag_item = 737, 
		RULE_getdiag_target = 738, RULE_assign_var = 739, RULE_stmt_if = 740, 
		RULE_stmt_elsifs = 741, RULE_stmt_else = 742, RULE_stmt_case = 743, RULE_opt_expr_until_when = 744, 
		RULE_case_when_list = 745, RULE_case_when = 746, RULE_opt_case_else = 747, 
		RULE_stmt_loop = 748, RULE_stmt_while = 749, RULE_stmt_for = 750, RULE_for_control = 751, 
		RULE_opt_for_using_expression = 752, RULE_opt_cursor_parameters = 753, 
		RULE_opt_reverse = 754, RULE_opt_by_expression = 755, RULE_for_variable = 756, 
		RULE_stmt_foreach_a = 757, RULE_foreach_slice = 758, RULE_stmt_exit = 759, 
		RULE_exit_type = 760, RULE_stmt_return = 761, RULE_opt_return_result = 762, 
		RULE_stmt_raise = 763, RULE_opt_stmt_raise_level = 764, RULE_opt_raise_list = 765, 
		RULE_opt_raise_using = 766, RULE_opt_raise_using_elem = 767, RULE_opt_raise_using_elem_list = 768, 
		RULE_stmt_assert = 769, RULE_opt_stmt_assert_message = 770, RULE_loop_body = 771, 
		RULE_stmt_execsql = 772, RULE_stmt_dynexecute = 773, RULE_opt_execute_using = 774, 
		RULE_opt_execute_using_list = 775, RULE_opt_execute_into = 776, RULE_stmt_open = 777, 
		RULE_opt_open_bound_list_item = 778, RULE_opt_open_bound_list = 779, RULE_opt_open_using = 780, 
		RULE_opt_scroll_option = 781, RULE_opt_scroll_option_no = 782, RULE_stmt_fetch = 783, 
		RULE_into_target = 784, RULE_opt_cursor_from = 785, RULE_opt_fetch_direction = 786, 
		RULE_stmt_move = 787, RULE_stmt_close = 788, RULE_stmt_null = 789, RULE_stmt_commit = 790, 
		RULE_stmt_rollback = 791, RULE_plsql_opt_transaction_chain = 792, RULE_stmt_set = 793, 
		RULE_cursor_variable = 794, RULE_exception_sect = 795, RULE_proc_exceptions = 796, 
		RULE_proc_exception = 797, RULE_proc_conditions = 798, RULE_proc_condition = 799, 
		RULE_opt_block_label = 800, RULE_opt_loop_label = 801, RULE_opt_label = 802, 
		RULE_opt_exitcond = 803, RULE_any_identifier = 804, RULE_plsql_unreserved_keyword = 805, 
		RULE_sql_expression = 806, RULE_expr_until_then = 807, RULE_expr_until_semi = 808, 
		RULE_expr_until_rightbracket = 809, RULE_expr_until_loop = 810, RULE_make_execsql_stmt = 811, 
		RULE_opt_returning_clause_into = 812;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "plsqlroot", "stmtblock", "stmtmulti", "stmt", "plsqlconsolecommand", 
			"callstmt", "createrolestmt", "opt_with", "optrolelist", "alteroptrolelist", 
			"alteroptroleelem", "createoptroleelem", "createuserstmt", "alterrolestmt", 
			"opt_in_database", "alterrolesetstmt", "droprolestmt", "creategroupstmt", 
			"altergroupstmt", "add_drop", "createschemastmt", "optschemaname", "optschemaeltlist", 
			"schema_stmt", "variablesetstmt", "set_rest", "generic_set", "set_rest_more", 
			"var_name", "var_list", "var_value", "iso_level", "opt_boolean_or_string", 
			"zone_value", "opt_encoding", "nonreservedword_or_sconst", "variableresetstmt", 
			"reset_rest", "generic_reset", "setresetclause", "functionsetresetclause", 
			"variableshowstmt", "constraintssetstmt", "constraints_set_list", "constraints_set_mode", 
			"checkpointstmt", "discardstmt", "altertablestmt", "alter_table_cmds", 
			"partition_cmd", "index_partition_cmd", "alter_table_cmd", "alter_column_default", 
			"opt_drop_behavior", "opt_collate_clause", "alter_using", "replica_identity", 
			"reloptions", "opt_reloptions", "reloption_list", "reloption_elem", "alter_identity_column_option_list", 
			"alter_identity_column_option", "partitionboundspec", "hash_partbound_elem", 
			"hash_partbound", "altercompositetypestmt", "alter_type_cmds", "alter_type_cmd", 
			"closeportalstmt", "copystmt", "copy_from", "opt_program", "copy_file_name", 
			"copy_options", "copy_opt_list", "copy_opt_item", "opt_binary", "copy_delimiter", 
			"opt_using", "copy_generic_opt_list", "copy_generic_opt_elem", "copy_generic_opt_arg", 
			"copy_generic_opt_arg_list", "copy_generic_opt_arg_list_item", "createstmt", 
			"opttemp", "opttableelementlist", "opttypedtableelementlist", "tableelementlist", 
			"typedtableelementlist", "tableelement", "typedtableelement", "columnDef", 
			"columnOptions", "colquallist", "colconstraint", "colconstraintelem", 
			"generated_when", "constraintattr", "tablelikeclause", "tablelikeoptionlist", 
			"tablelikeoption", "tableconstraint", "constraintelem", "opt_no_inherit", 
			"opt_column_list", "columnlist", "columnElem", "opt_c_include", "key_match", 
			"exclusionconstraintlist", "exclusionconstraintelem", "exclusionwhereclause", 
			"key_actions", "key_update", "key_delete", "key_action", "optinherit", 
			"optpartitionspec", "partitionspec", "part_params", "part_elem", "table_access_method_clause", 
			"optwith", "oncommitoption", "opttablespace", "optconstablespace", "existingindex", 
			"createstatsstmt", "alterstatsstmt", "createasstmt", "create_as_target", 
			"opt_with_data", "creatematviewstmt", "create_mv_target", "optnolog", 
			"refreshmatviewstmt", "createseqstmt", "alterseqstmt", "optseqoptlist", 
			"optparenthesizedseqoptlist", "seqoptlist", "seqoptelem", "opt_by", "numericonly", 
			"numericonly_list", "createplangstmt", "opt_trusted", "handler_name", 
			"opt_inline_handler", "validator_clause", "opt_validator", "opt_procedural", 
			"createtablespacestmt", "opttablespaceowner", "droptablespacestmt", "createextensionstmt", 
			"create_extension_opt_list", "create_extension_opt_item", "alterextensionstmt", 
			"alter_extension_opt_list", "alter_extension_opt_item", "alterextensioncontentsstmt", 
			"createfdwstmt", "fdw_option", "fdw_options", "opt_fdw_options", "alterfdwstmt", 
			"create_generic_options", "generic_option_list", "alter_generic_options", 
			"alter_generic_option_list", "alter_generic_option_elem", "generic_option_elem", 
			"generic_option_name", "generic_option_arg", "createforeignserverstmt", 
			"opt_type", "foreign_server_version", "opt_foreign_server_version", "alterforeignserverstmt", 
			"createforeigntablestmt", "importforeignschemastmt", "import_qualification_type", 
			"import_qualification", "createusermappingstmt", "auth_ident", "dropusermappingstmt", 
			"alterusermappingstmt", "createpolicystmt", "alterpolicystmt", "rowsecurityoptionalexpr", 
			"rowsecurityoptionalwithcheck", "rowsecuritydefaulttorole", "rowsecurityoptionaltorole", 
			"rowsecuritydefaultpermissive", "rowsecuritydefaultforcmd", "row_security_cmd", 
			"createamstmt", "am_type", "createtrigstmt", "triggeractiontime", "triggerevents", 
			"triggeroneevent", "triggerreferencing", "triggertransitions", "triggertransition", 
			"transitionoldornew", "transitionrowortable", "transitionrelname", "triggerforspec", 
			"triggerforopteach", "triggerfortype", "triggerwhen", "function_or_procedure", 
			"triggerfuncargs", "triggerfuncarg", "optconstrfromtable", "constraintattributespec", 
			"constraintattributeElem", "createeventtrigstmt", "event_trigger_when_list", 
			"event_trigger_when_item", "event_trigger_value_list", "altereventtrigstmt", 
			"enable_trigger", "createassertionstmt", "definestmt", "definition", 
			"def_list", "def_elem", "def_arg", "old_aggr_definition", "old_aggr_list", 
			"old_aggr_elem", "opt_enum_val_list", "enum_val_list", "alterenumstmt", 
			"opt_if_not_exists", "createopclassstmt", "opclass_item_list", "opclass_item", 
			"opt_default", "opt_opfamily", "opclass_purpose", "opt_recheck", "createopfamilystmt", 
			"alteropfamilystmt", "opclass_drop_list", "opclass_drop", "dropopclassstmt", 
			"dropopfamilystmt", "dropownedstmt", "reassignownedstmt", "dropstmt", 
			"object_type_any_name", "object_type_name", "drop_type_name", "object_type_name_on_any_name", 
			"any_name_list", "any_name", "attrs", "type_name_list", "truncatestmt", 
			"opt_restart_seqs", "commentstmt", "comment_text", "seclabelstmt", "opt_provider", 
			"security_label", "fetchstmt", "fetch_args", "from_in", "opt_from_in", 
			"grantstmt", "revokestmt", "privileges", "privilege_list", "privilege", 
			"privilege_target", "grantee_list", "grantee", "opt_grant_grant_option", 
			"grantrolestmt", "revokerolestmt", "opt_grant_admin_option", "opt_granted_by", 
			"alterdefaultprivilegesstmt", "defacloptionlist", "defacloption", "defaclaction", 
			"defacl_privilege_target", "indexstmt", "opt_unique", "opt_concurrently", 
			"opt_index_name", "access_method_clause", "index_params", "index_elem_options", 
			"index_elem", "opt_include", "index_including_params", "opt_collate", 
			"opt_class", "opt_asc_desc", "opt_nulls_order", "createfunctionstmt", 
			"opt_or_replace", "func_args", "func_args_list", "function_with_argtypes_list", 
			"function_with_argtypes", "func_args_with_defaults", "func_args_with_defaults_list", 
			"func_arg", "arg_class", "param_name", "func_return", "func_type", "func_arg_with_default", 
			"aggr_arg", "aggr_args", "aggr_args_list", "aggregate_with_argtypes", 
			"aggregate_with_argtypes_list", "createfunc_opt_list", "common_func_opt_item", 
			"createfunc_opt_item", "func_as", "transform_type_list", "opt_definition", 
			"table_func_column", "table_func_column_list", "alterfunctionstmt", "alterfunc_opt_list", 
			"opt_restrict", "removefuncstmt", "removeaggrstmt", "removeoperstmt", 
			"oper_argtypes", "any_operator", "operator_with_argtypes_list", "operator_with_argtypes", 
			"dostmt", "dostmt_opt_list", "dostmt_opt_item", "createcaststmt", "cast_context", 
			"dropcaststmt", "opt_if_exists", "createtransformstmt", "transform_element_list", 
			"droptransformstmt", "reindexstmt", "reindex_target_type", "reindex_target_multitable", 
			"reindex_option_list", "reindex_option_elem", "altertblspcstmt", "renamestmt", 
			"opt_column", "opt_set_data", "alterobjectdependsstmt", "opt_no", "alterobjectschemastmt", 
			"alteroperatorstmt", "operator_def_list", "operator_def_elem", "operator_def_arg", 
			"altertypestmt", "alterownerstmt", "createpublicationstmt", "opt_publication_for_tables", 
			"publication_for_tables", "alterpublicationstmt", "createsubscriptionstmt", 
			"publication_name_list", "publication_name_item", "altersubscriptionstmt", 
			"dropsubscriptionstmt", "rulestmt", "ruleactionlist", "ruleactionmulti", 
			"ruleactionstmt", "ruleactionstmtOrEmpty", "event", "opt_instead", "notifystmt", 
			"notify_payload", "listenstmt", "unlistenstmt", "transactionstmt", "opt_transaction", 
			"transaction_mode_item", "transaction_mode_list", "transaction_mode_list_or_empty", 
			"opt_transaction_chain", "viewstmt", "opt_check_option", "loadstmt", 
			"createdbstmt", "createdb_opt_list", "createdb_opt_items", "createdb_opt_item", 
			"createdb_opt_name", "opt_equal", "alterdatabasestmt", "alterdatabasesetstmt", 
			"dropdbstmt", "drop_option_list", "drop_option", "altercollationstmt", 
			"altersystemstmt", "createdomainstmt", "alterdomainstmt", "opt_as", "altertsdictionarystmt", 
			"altertsconfigurationstmt", "any_with", "createconversionstmt", "clusterstmt", 
			"cluster_index_specification", "vacuumstmt", "analyzestmt", "vac_analyze_option_list", 
			"analyze_keyword", "vac_analyze_option_elem", "vac_analyze_option_name", 
			"vac_analyze_option_arg", "opt_analyze", "opt_verbose", "opt_full", "opt_freeze", 
			"opt_name_list", "vacuum_relation", "vacuum_relation_list", "opt_vacuum_relation_list", 
			"explainstmt", "explainablestmt", "explain_option_list", "explain_option_elem", 
			"explain_option_name", "explain_option_arg", "preparestmt", "prep_type_clause", 
			"preparablestmt", "executestmt", "execute_param_clause", "deallocatestmt", 
			"insertstmt", "insert_target", "insert_rest", "override_kind", "insert_column_list", 
			"insert_column_item", "opt_on_conflict", "opt_conf_expr", "returning_clause", 
			"mergestmt", "merge_insert_clause", "merge_update_clause", "merge_delete_clause", 
			"deletestmt", "using_clause", "lockstmt", "opt_lock", "lock_type", "opt_nowait", 
			"opt_nowait_or_skip", "updatestmt", "set_clause_list", "set_clause", 
			"set_target", "set_target_list", "declarecursorstmt", "cursor_name", 
			"cursor_options", "opt_hold", "selectstmt", "select_with_parens", "select_no_parens", 
			"select_clause", "simple_select", "set_operator", "set_operator_with_all_or_distinct", 
			"with_clause", "cte_list", "common_table_expr", "opt_materialized", "opt_with_clause", 
			"into_clause", "opt_strict", "opttempTableName", "opt_table", "all_or_distinct", 
			"distinct_clause", "opt_all_clause", "opt_sort_clause", "sort_clause", 
			"sortby_list", "sortby", "select_limit", "opt_select_limit", "limit_clause", 
			"offset_clause", "select_limit_value", "select_offset_value", "select_fetch_first_value", 
			"i_or_f_const", "row_or_rows", "first_or_next", "group_clause", "group_by_list", 
			"group_by_item", "empty_grouping_set", "rollup_clause", "cube_clause", 
			"grouping_sets_clause", "having_clause", "for_locking_clause", "opt_for_locking_clause", 
			"for_locking_items", "for_locking_item", "for_locking_strength", "locked_rels_list", 
			"values_clause", "from_clause", "from_list", "non_ansi_join", "table_ref", 
			"alias_clause", "opt_alias_clause", "table_alias_clause", "func_alias_clause", 
			"join_type", "join_qual", "relation_expr", "relation_expr_list", "relation_expr_opt_alias", 
			"tablesample_clause", "opt_repeatable_clause", "func_table", "rowsfrom_item", 
			"rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause", 
			"where_or_current_clause", "opttablefuncelementlist", "tablefuncelementlist", 
			"tablefuncelement", "xmltable", "xmltable_column_list", "xmltable_column_el", 
			"xmltable_column_option_list", "xmltable_column_option_el", "xml_namespace_list", 
			"xml_namespace_el", "typename", "opt_array_bounds", "simpletypename", 
			"consttypename", "generictype", "opt_type_modifiers", "numeric", "opt_float", 
			"bit", "constbit", "bitwithlength", "bitwithoutlength", "character", 
			"constcharacter", "character_c", "opt_varying", "constdatetime", "constinterval", 
			"opt_timezone", "opt_interval", "interval_second", "opt_escape", "a_expr", 
			"a_expr_qual", "a_expr_lessless", "a_expr_or", "a_expr_and", "a_expr_between", 
			"a_expr_in", "a_expr_unary_not", "a_expr_isnull", "a_expr_is_not", "a_expr_compare", 
			"a_expr_like", "a_expr_qual_op", "a_expr_unary_qualop", "a_expr_add", 
			"a_expr_mul", "a_expr_caret", "a_expr_unary_sign", "a_expr_at_time_zone", 
			"a_expr_collate", "a_expr_typecast", "b_expr", "c_expr", "plsqlvariablename", 
			"func_application", "func_expr", "func_expr_windowless", "func_expr_common_subexpr", 
			"xml_root_version", "opt_xml_root_standalone", "xml_attributes", "xml_attribute_list", 
			"xml_attribute_el", "document_or_content", "xml_whitespace_option", "xmlexists_argument", 
			"xml_passing_mech", "within_group_clause", "filter_clause", "window_clause", 
			"window_definition_list", "window_definition", "over_clause", "window_specification", 
			"opt_existing_window_name", "opt_partition_clause", "opt_frame_clause", 
			"frame_extent", "frame_bound", "opt_window_exclusion_clause", "row", 
			"explicit_row", "implicit_row", "sub_type", "all_op", "mathop", "qual_op", 
			"qual_all_op", "subquery_Op", "expr_list", "func_arg_list", "func_arg_expr", 
			"type_list", "array_expr", "array_expr_list", "extract_list", "extract_arg", 
			"unicode_normal_form", "overlay_list", "position_list", "substr_list", 
			"trim_list", "in_expr", "case_expr", "when_clause_list", "when_clause", 
			"case_default", "case_arg", "columnref", "indirection_el", "opt_slice_bound", 
			"indirection", "opt_indirection", "opt_target_list", "target_list", "target_el", 
			"qualified_name_list", "qualified_name", "name_list", "name", "attr_name", 
			"file_name", "func_name", "aexprconst", "xconst", "bconst", "fconst", 
			"iconst", "sconst", "anysconst", "opt_uescape", "signediconst", "roleid", 
			"rolespec", "role_list", "colid", "table_alias", "type_function_name", 
			"nonreservedword", "collabel", "identifier", "plsqlidentifier", "unreserved_keyword", 
			"col_name_keyword", "type_func_name_keyword", "reserved_keyword", "builtin_function_name", 
			"pl_function", "comp_options", "comp_option", "sharp", "option_value", 
			"opt_semi", "pl_block", "decl_sect", "decl_start", "decl_stmts", "label_decl", 
			"decl_stmt", "decl_statement", "opt_scrollable", "decl_cursor_query", 
			"decl_cursor_args", "decl_cursor_arglist", "decl_cursor_arg", "decl_is_for", 
			"decl_aliasitem", "decl_varname", "decl_const", "decl_datatype", "decl_collate", 
			"decl_notnull", "decl_defval", "decl_defkey", "assign_operator", "proc_sect", 
			"proc_stmt", "stmt_perform", "stmt_call", "opt_expr_list", "stmt_assign", 
			"stmt_getdiag", "getdiag_area_opt", "getdiag_list", "getdiag_list_item", 
			"getdiag_item", "getdiag_target", "assign_var", "stmt_if", "stmt_elsifs", 
			"stmt_else", "stmt_case", "opt_expr_until_when", "case_when_list", "case_when", 
			"opt_case_else", "stmt_loop", "stmt_while", "stmt_for", "for_control", 
			"opt_for_using_expression", "opt_cursor_parameters", "opt_reverse", "opt_by_expression", 
			"for_variable", "stmt_foreach_a", "foreach_slice", "stmt_exit", "exit_type", 
			"stmt_return", "opt_return_result", "stmt_raise", "opt_stmt_raise_level", 
			"opt_raise_list", "opt_raise_using", "opt_raise_using_elem", "opt_raise_using_elem_list", 
			"stmt_assert", "opt_stmt_assert_message", "loop_body", "stmt_execsql", 
			"stmt_dynexecute", "opt_execute_using", "opt_execute_using_list", "opt_execute_into", 
			"stmt_open", "opt_open_bound_list_item", "opt_open_bound_list", "opt_open_using", 
			"opt_scroll_option", "opt_scroll_option_no", "stmt_fetch", "into_target", 
			"opt_cursor_from", "opt_fetch_direction", "stmt_move", "stmt_close", 
			"stmt_null", "stmt_commit", "stmt_rollback", "plsql_opt_transaction_chain", 
			"stmt_set", "cursor_variable", "exception_sect", "proc_exceptions", "proc_exception", 
			"proc_conditions", "proc_condition", "opt_block_label", "opt_loop_label", 
			"opt_label", "opt_exitcond", "any_identifier", "plsql_unreserved_keyword", 
			"sql_expression", "expr_until_then", "expr_until_semi", "expr_until_rightbracket", 
			"expr_until_loop", "make_execsql_stmt", "opt_returning_clause_into"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'$'", "'('", "')'", "'['", "']'", "','", "';'", "':'", "'*'", 
			"'='", "'.'", "'+'", "'-'", "'/'", "'^'", "'<'", "'>'", "'<<'", "'>>'", 
			"':='", "'<='", "'=>'", "'>='", "'..'", "'<>'", "'::'", "'%'", null, 
			null, "'ALL'", "'ANALYSE'", "'ANALYZE'", "'AND'", "'ANY'", "'ARRAY'", 
			"'AS'", "'ASC'", "'ASYMMETRIC'", "'BOTH'", "'CASE'", "'CAST'", "'CHECK'", 
			"'COLLATE'", "'COLUMN'", "'CONSTRAINT'", "'CREATE'", "'CURRENT_CATALOG'", 
			"'CURRENT_DATE'", "'CURRENT_ROLE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
			"'CURRENT_USER'", "'DEFAULT'", "'DEFERRABLE'", "'DESC'", "'DISTINCT'", 
			"'DO'", "'ELSE'", "'EXCEPT'", "'FALSE'", "'FETCH'", "'FOR'", "'FOREIGN'", 
			"'FROM'", "'GRANT'", "'GROUP'", "'HAVING'", "'IN'", "'INITIALLY'", "'INTERSECT'", 
			"'INTO'", "'LATERAL'", "'LEADING'", "'LIMIT'", "'LOCALTIME'", "'LOCALTIMESTAMP'", 
			"'NOT'", "'NULL'", "'OFFSET'", "'ON'", "'ONLY'", "'OR'", "'ORDER'", "'PLACING'", 
			"'PRIMARY'", "'REFERENCES'", "'RETURNING'", "'SELECT'", "'SESSION_USER'", 
			"'SOME'", "'SYMMETRIC'", "'TABLE'", "'THEN'", "'TO'", "'TRAILING'", "'TRUE'", 
			"'UNION'", "'UNIQUE'", "'USER'", "'USING'", "'VARIADIC'", "'WHEN'", "'WHERE'", 
			"'WINDOW'", "'WITH'", "'AUTHORIZATION'", "'BINARY'", "'COLLATION'", "'CONCURRENTLY'", 
			"'CROSS'", "'CURRENT_SCHEMA'", "'FREEZE'", "'FULL'", "'ILIKE'", "'INNER'", 
			"'IS'", "'ISNULL'", "'JOIN'", "'LEFT'", "'LIKE'", "'NATURAL'", "'NOTNULL'", 
			"'OUTER'", "'OVER'", "'OVERLAPS'", "'RIGHT'", "'SIMILAR'", "'VERBOSE'", 
			"'ABORT'", "'ABSOLUTE'", "'ACCESS'", "'ACTION'", "'ADD'", "'ADMIN'", 
			"'AFTER'", "'AGGREGATE'", "'ALSO'", "'ALTER'", "'ALWAYS'", "'ASSERTION'", 
			"'ASSIGNMENT'", "'AT'", "'ATTRIBUTE'", "'BACKWARD'", "'BEFORE'", "'BEGIN'", 
			"'BY'", "'CACHE'", "'CALLED'", "'CASCADE'", "'CASCADED'", "'CATALOG'", 
			"'CHAIN'", "'CHARACTERISTICS'", "'CHECKPOINT'", "'CLASS'", "'CLOSE'", 
			"'CLUSTER'", "'COMMENT'", "'COMMENTS'", "'COMMIT'", "'COMMITTED'", "'CONFIGURATION'", 
			"'CONNECTION'", "'CONSTRAINTS'", "'CONTENT'", "'CONTINUE'", "'CONVERSION'", 
			"'COPY'", "'COST'", "'CSV'", "'CURSOR'", "'CYCLE'", "'DATA'", "'DATABASE'", 
			"'DAY'", "'DEALLOCATE'", "'DECLARE'", "'DEFAULTS'", "'DEFERRED'", "'DEFINER'", 
			"'DELETE'", "'DELIMITER'", "'DELIMITERS'", "'DICTIONARY'", "'DISABLE'", 
			"'DISCARD'", "'DOCUMENT'", "'DOMAIN'", "'DOUBLE'", "'DROP'", "'EACH'", 
			"'ENABLE'", "'ENCODING'", "'ENCRYPTED'", "'ENUM'", "'ESCAPE'", "'EVENT'", 
			"'EXCLUDE'", "'EXCLUDING'", "'EXCLUSIVE'", "'EXECUTE'", "'EXPLAIN'", 
			"'EXTENSION'", "'EXTERNAL'", "'FAMILY'", "'FIRST'", "'FOLLOWING'", "'FORCE'", 
			"'FORWARD'", "'FUNCTION'", "'FUNCTIONS'", "'GLOBAL'", "'GRANTED'", "'HANDLER'", 
			"'HEADER'", "'HOLD'", "'HOUR'", "'IDENTITY'", "'IF'", "'IMMEDIATE'", 
			"'IMMUTABLE'", "'IMPLICIT'", "'INCLUDING'", "'INCREMENT'", "'INDEX'", 
			"'INDEXES'", "'INHERIT'", "'INHERITS'", "'INLINE'", "'INSENSITIVE'", 
			"'INSERT'", "'INSTEAD'", "'INVOKER'", "'ISOLATION'", "'KEY'", "'LABEL'", 
			"'LANGUAGE'", "'LARGE'", "'LAST'", "'LEAKPROOF'", "'LEVEL'", "'LISTEN'", 
			"'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'", "'MAPPING'", "'MATCH'", 
			"'MATCHED'", "'MATERIALIZED'", "'MAXVALUE'", "'MERGE'", "'MINUTE'", "'MINVALUE'", 
			"'MODE'", "'MONTH'", "'MOVE'", "'NAME'", "'NAMES'", "'NEXT'", "'NO'", 
			"'NOTHING'", "'NOTIFY'", "'NOWAIT'", "'NULLS'", "'OBJECT'", "'OF'", "'OFF'", 
			"'OIDS'", "'OPERATOR'", "'OPTION'", "'OPTIONS'", "'OWNED'", "'OWNER'", 
			"'PARSER'", "'PARTIAL'", "'PARTITION'", "'PASSING'", "'PASSWORD'", "'PLANS'", 
			"'PRECEDING'", "'PREPARE'", "'PREPARED'", "'PRESERVE'", "'PRIOR'", "'PRIVILEGES'", 
			"'PROCEDURAL'", "'PROCEDURE'", "'PROGRAM'", "'QUOTE'", "'RANGE'", "'READ'", 
			"'REASSIGN'", "'RECHECK'", "'RECURSIVE'", "'REF'", "'REFRESH'", "'REINDEX'", 
			"'RELATIVE'", "'RELEASE'", "'RENAME'", "'REPEATABLE'", "'REPLACE'", "'REPLICA'", 
			"'RESET'", "'RESTART'", "'RESTRICT'", "'RETURNS'", "'REVOKE'", "'ROLE'", 
			"'ROLLBACK'", "'ROWS'", "'RULE'", "'SAVEPOINT'", "'SCHEMA'", "'SCROLL'", 
			"'SEARCH'", "'SECOND'", "'SECURITY'", "'SEQUENCE'", "'SEQUENCES'", "'SERIALIZABLE'", 
			"'SERVER'", "'SESSION'", "'SET'", "'SHARE'", "'SHOW'", "'SIMPLE'", "'SNAPSHOT'", 
			"'STABLE'", "'STANDALONE'", "'START'", "'STATEMENT'", "'STATISTICS'", 
			"'STDIN'", "'STDOUT'", "'STORAGE'", "'STRICT'", "'STRIP'", "'SYSID'", 
			"'SYSTEM'", "'TABLES'", "'TABLESPACE'", "'TEMP'", "'TEMPLATE'", "'TEMPORARY'", 
			"'TEXT'", "'TRANSACTION'", "'TRIGGER'", "'TRUNCATE'", "'TRUSTED'", "'TYPE'", 
			"'TYPES'", "'UNBOUNDED'", "'UNCOMMITTED'", "'UNENCRYPTED'", "'UNKNOWN'", 
			"'UNLISTEN'", "'UNLOGGED'", "'UNTIL'", "'UPDATE'", "'VACUUM'", "'VALID'", 
			"'VALIDATE'", "'VALIDATOR'", "'VARYING'", "'VERSION'", "'VIEW'", "'VOLATILE'", 
			"'WHITESPACE'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'WRITE'", "'XML'", 
			"'YEAR'", "'YES'", "'ZONE'", "'BETWEEN'", "'BIGINT'", "'BIT'", "'BOOLEAN'", 
			"'CHAR'", "'CHARACTER'", "'COALESCE'", "'DEC'", "'DECIMAL'", "'EXISTS'", 
			"'EXTRACT'", "'FLOAT'", "'GREATEST'", "'INOUT'", "'INT'", "'INTEGER'", 
			"'INTERVAL'", "'LEAST'", "'NATIONAL'", "'NCHAR'", "'NONE'", "'NULLIF'", 
			"'NUMERIC'", "'OVERLAY'", "'POSITION'", "'PRECISION'", "'REAL'", "'ROW'", 
			"'SETOF'", "'SMALLINT'", "'SUBSTRING'", "'TIME'", "'TIMESTAMP'", "'TREAT'", 
			"'TRIM'", "'VALUES'", "'VARCHAR'", "'XMLATTRIBUTES'", "'XMLCOMMENT'", 
			"'XMLAGG'", "'XML_IS_WELL_FORMED'", "'XML_IS_WELL_FORMED_DOCUMENT'", 
			"'XML_IS_WELL_FORMED_CONTENT'", "'XPATH'", "'XPATH_EXISTS'", "'XMLCONCAT'", 
			"'XMLELEMENT'", "'XMLEXISTS'", "'XMLFOREST'", "'XMLPARSE'", "'XMLPI'", 
			"'XMLROOT'", "'XMLSERIALIZE'", "'CALL'", "'CURRENT'", "'ATTACH'", "'DETACH'", 
			"'EXPRESSION'", "'GENERATED'", "'LOGGED'", "'STORED'", "'INCLUDE'", "'ROUTINE'", 
			"'TRANSFORM'", "'IMPORT'", "'POLICY'", "'METHOD'", "'REFERENCING'", "'NEW'", 
			"'OLD'", "'VALUE'", "'SUBSCRIPTION'", "'PUBLICATION'", "'OUT'", "'END'", 
			"'ROUTINES'", "'SCHEMAS'", "'PROCEDURES'", "'INPUT'", "'SUPPORT'", "'PARALLEL'", 
			"'SQL'", "'DEPENDS'", "'OVERRIDING'", "'CONFLICT'", "'SKIP'", "'LOCKED'", 
			"'TIES'", "'ROLLUP'", "'CUBE'", "'GROUPING'", "'SETS'", "'TABLESAMPLE'", 
			"'ORDINALITY'", "'XMLTABLE'", "'COLUMNS'", "'XMLNAMESPACES'", "'ROWTYPE'", 
			"'NORMALIZED'", "'WITHIN'", "'FILTER'", "'GROUPS'", "'OTHERS'", "'NFC'", 
			"'NFD'", "'NFKC'", "'NFKD'", "'UESCAPE'", "'VIEWS'", "'NORMALIZE'", "'DUMP'", 
			"'PRINT_STRICT_PARAMS'", "'VARIABLE_CONFLICT'", "'ERROR'", "'USE_VARIABLE'", 
			"'USE_COLUMN'", "'ALIAS'", "'CONSTANT'", "'PERFORM'", "'GET'", "'DIAGNOSTICS'", 
			"'STACKED'", "'ELSIF'", "'WHILE'", "'REVERSE'", "'FOREACH'", "'SLICE'", 
			"'EXIT'", "'RETURN'", "'QUERY'", "'RAISE'", "'SQLSTATE'", "'DEBUG'", 
			"'LOG'", "'INFO'", "'NOTICE'", "'WARNING'", "'EXCEPTION'", "'ASSERT'", 
			"'LOOP'", "'OPEN'", "'ABS'", "'CBRT'", "'CEIL'", "'CEILING'", "'DEGREES'", 
			"'DIV'", "'EXP'", "'FACTORIAL'", "'FLOOR'", "'GCD'", "'LCM'", "'LN'", 
			"'LOG10'", "'MIN_SCALE'", "'MOD'", "'PI'", "'POWER'", "'RADIANS'", "'ROUND'", 
			"'SCALE'", "'SIGN'", "'SQRT'", "'TRIM_SCALE'", "'TRUNC'", "'WIDTH_BUCKET'", 
			"'RANDOM'", "'SETSEED'", "'ACOS'", "'ACOSD'", "'ASIN'", "'ASIND'", "'ATAN'", 
			"'ATAND'", "'ATAN2'", "'ATAN2D'", "'COS'", "'COSD'", "'COT'", "'COTD'", 
			"'SIN'", "'SIND'", "'TAN'", "'TAND'", "'SINH'", "'COSH'", "'TANH'", "'ASINH'", 
			"'ACOSH'", "'ATANH'", "'BIT_LENGTH'", "'CHAR_LENGTH'", "'CHARACTER_LENGTH'", 
			"'LOWER'", "'OCTET_LENGTH'", "'UPPER'", "'ASCII'", "'BTRIM'", "'CHR'", 
			"'CONCAT'", "'CONCAT_WS'", "'FORMAT'", "'INITCAP'", "'LENGTH'", "'LPAD'", 
			"'LTRIM'", "'MD5'", "'PARSE_IDENT'", "'PG_CLIENT_ENCODING'", "'QUOTE_IDENT'", 
			"'QUOTE_LITERAL'", "'QUOTE_NULLABLE'", "'REGEXP_COUNT'", "'REGEXP_INSTR'", 
			"'REGEXP_LIKE'", "'REGEXP_MATCH'", "'REGEXP_MATCHES'", "'REGEXP_REPLACE'", 
			"'REGEXP_SPLIT_TO_ARRAY'", "'REGEXP_SPLIT_TO_TABLE'", "'REGEXP_SUBSTR'", 
			"'REPEAT'", "'RPAD'", "'RTRIM'", "'SPLIT_PART'", "'STARTS_WITH'", "'STRING_TO_ARRAY'", 
			"'STRING_TO_TABLE'", "'STRPOS'", "'SUBSTR'", "'TO_ASCII'", "'TO_HEX'", 
			"'TRANSLATE'", "'UNISTR'", "'AGE'", "'CLOCK_TIMESTAMP'", "'DATE_BIN'", 
			"'DATE_PART'", "'DATE_TRUNC'", "'ISFINITE'", "'JUSTIFY_DAYS'", "'JUSTIFY_HOURS'", 
			"'JUSTIFY_INTERVAL'", "'MAKE_DATE'", "'MAKE_INTERVAL'", "'MAKE_TIME'", 
			"'MAKE_TIMESTAMP'", "'MAKE_TIMESTAMPTZ'", "'NOW'", "'STATEMENT_TIMESTAMP'", 
			"'TIMEOFDAY'", "'TRANSACTION_TIMESTAMP'", "'TO_TIMESTAMP'", "'TO_CHAR'", 
			"'TO_DATE'", "'TO_NUMBER'", null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, "'\\\\'", null, null, null, null, null, null, null, null, 
			null, "'''"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "Dollar", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
			"COMMA", "SEMI", "COLON", "STAR", "EQUAL", "DOT", "PLUS", "MINUS", "SLASH", 
			"CARET", "LT", "GT", "LESS_LESS", "GREATER_GREATER", "COLON_EQUALS", 
			"LESS_EQUALS", "EQUALS_GREATER", "GREATER_EQUALS", "DOT_DOT", "NOT_EQUALS", 
			"TYPECAST", "PERCENT", "PARAM", "Operator", "ALL", "ANALYSE", "ANALYZE", 
			"AND", "ANY", "ARRAY", "AS", "ASC", "ASYMMETRIC", "BOTH", "CASE", "CAST", 
			"CHECK", "COLLATE", "COLUMN", "CONSTRAINT", "CREATE", "CURRENT_CATALOG", 
			"CURRENT_DATE", "CURRENT_ROLE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
			"CURRENT_USER", "DEFAULT", "DEFERRABLE", "DESC", "DISTINCT", "DO", "ELSE", 
			"EXCEPT", "FALSE_P", "FETCH", "FOR", "FOREIGN", "FROM", "GRANT", "GROUP_P", 
			"HAVING", "IN_P", "INITIALLY", "INTERSECT", "INTO", "LATERAL_P", "LEADING", 
			"LIMIT", "LOCALTIME", "LOCALTIMESTAMP", "NOT", "NULL_P", "OFFSET", "ON", 
			"ONLY", "OR", "ORDER", "PLACING", "PRIMARY", "REFERENCES", "RETURNING", 
			"SELECT", "SESSION_USER", "SOME", "SYMMETRIC", "TABLE", "THEN", "TO", 
			"TRAILING", "TRUE_P", "UNION", "UNIQUE", "USER", "USING", "VARIADIC", 
			"WHEN", "WHERE", "WINDOW", "WITH", "AUTHORIZATION", "BINARY", "COLLATION", 
			"CONCURRENTLY", "CROSS", "CURRENT_SCHEMA", "FREEZE", "FULL", "ILIKE", 
			"INNER_P", "IS", "ISNULL", "JOIN", "LEFT", "LIKE", "NATURAL", "NOTNULL", 
			"OUTER_P", "OVER", "OVERLAPS", "RIGHT", "SIMILAR", "VERBOSE", "ABORT_P", 
			"ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", 
			"ALSO", "ALTER", "ALWAYS", "ASSERTION", "ASSIGNMENT", "AT", "ATTRIBUTE", 
			"BACKWARD", "BEFORE", "BEGIN_P", "BY", "CACHE", "CALLED", "CASCADE", 
			"CASCADED", "CATALOG", "CHAIN", "CHARACTERISTICS", "CHECKPOINT", "CLASS", 
			"CLOSE", "CLUSTER", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", "CONFIGURATION", 
			"CONNECTION", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P", 
			"COPY", "COST", "CSV", "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", 
			"DEALLOCATE", "DECLARE", "DEFAULTS", "DEFERRED", "DEFINER", "DELETE_P", 
			"DELIMITER", "DELIMITERS", "DICTIONARY", "DISABLE_P", "DISCARD", "DOCUMENT_P", 
			"DOMAIN_P", "DOUBLE_P", "DROP", "EACH", "ENABLE_P", "ENCODING", "ENCRYPTED", 
			"ENUM_P", "ESCAPE", "EVENT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE", 
			"EXPLAIN", "EXTENSION", "EXTERNAL", "FAMILY", "FIRST_P", "FOLLOWING", 
			"FORCE", "FORWARD", "FUNCTION", "FUNCTIONS", "GLOBAL", "GRANTED", "HANDLER", 
			"HEADER_P", "HOLD", "HOUR_P", "IDENTITY_P", "IF_P", "IMMEDIATE", "IMMUTABLE", 
			"IMPLICIT_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT", 
			"INHERITS", "INLINE_P", "INSENSITIVE", "INSERT", "INSTEAD", "INVOKER", 
			"ISOLATION", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LEAKPROOF", 
			"LEVEL", "LISTEN", "LOAD", "LOCAL", "LOCATION", "LOCK_P", "MAPPING", 
			"MATCH", "MATCHED", "MATERIALIZED", "MAXVALUE", "MERGE", "MINUTE_P", 
			"MINVALUE", "MODE", "MONTH_P", "MOVE", "NAME_P", "NAMES", "NEXT", "NO", 
			"NOTHING", "NOTIFY", "NOWAIT", "NULLS_P", "OBJECT_P", "OF", "OFF", "OIDS", 
			"OPERATOR", "OPTION", "OPTIONS", "OWNED", "OWNER", "PARSER", "PARTIAL", 
			"PARTITION", "PASSING", "PASSWORD", "PLANS", "PRECEDING", "PREPARE", 
			"PREPARED", "PRESERVE", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", 
			"PROGRAM", "QUOTE", "RANGE", "READ", "REASSIGN", "RECHECK", "RECURSIVE", 
			"REF", "REFRESH", "REINDEX", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", 
			"REPLACE", "REPLICA", "RESET", "RESTART", "RESTRICT", "RETURNS", "REVOKE", 
			"ROLE", "ROLLBACK", "ROWS", "RULE", "SAVEPOINT", "SCHEMA", "SCROLL", 
			"SEARCH", "SECOND_P", "SECURITY", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", 
			"SERVER", "SESSION", "SET", "SHARE", "SHOW", "SIMPLE", "SNAPSHOT", "STABLE", 
			"STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", 
			"STORAGE", "STRICT_P", "STRIP_P", "SYSID", "SYSTEM_P", "TABLES", "TABLESPACE", 
			"TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "TRANSACTION", "TRIGGER", 
			"TRUNCATE", "TRUSTED", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", 
			"UNENCRYPTED", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", 
			"VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VARYING", "VERSION_P", "VIEW", 
			"VOLATILE", "WHITESPACE_P", "WITHOUT", "WORK", "WRAPPER", "WRITE", "XML_P", 
			"YEAR_P", "YES_P", "ZONE", "BETWEEN", "BIGINT", "BIT", "BOOLEAN_P", "CHAR_P", 
			"CHARACTER", "COALESCE", "DEC", "DECIMAL_P", "EXISTS", "EXTRACT", "FLOAT_P", 
			"GREATEST", "INOUT", "INT_P", "INTEGER", "INTERVAL", "LEAST", "NATIONAL", 
			"NCHAR", "NONE", "NULLIF", "NUMERIC", "OVERLAY", "POSITION", "PRECISION", 
			"REAL", "ROW", "SETOF", "SMALLINT", "SUBSTRING", "TIME", "TIMESTAMP", 
			"TREAT", "TRIM", "VALUES", "VARCHAR", "XMLATTRIBUTES", "XMLCOMMENT", 
			"XMLAGG", "XML_IS_WELL_FORMED", "XML_IS_WELL_FORMED_DOCUMENT", "XML_IS_WELL_FORMED_CONTENT", 
			"XPATH", "XPATH_EXISTS", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", 
			"XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE", "CALL", "CURRENT_P", 
			"ATTACH", "DETACH", "EXPRESSION", "GENERATED", "LOGGED", "STORED", "INCLUDE", 
			"ROUTINE", "TRANSFORM", "IMPORT_P", "POLICY", "METHOD", "REFERENCING", 
			"NEW", "OLD", "VALUE_P", "SUBSCRIPTION", "PUBLICATION", "OUT_P", "END_P", 
			"ROUTINES", "SCHEMAS", "PROCEDURES", "INPUT_P", "SUPPORT", "PARALLEL", 
			"SQL_P", "DEPENDS", "OVERRIDING", "CONFLICT", "SKIP_P", "LOCKED", "TIES", 
			"ROLLUP", "CUBE", "GROUPING", "SETS", "TABLESAMPLE", "ORDINALITY", "XMLTABLE", 
			"COLUMNS", "XMLNAMESPACES", "ROWTYPE", "NORMALIZED", "WITHIN", "FILTER", 
			"GROUPS", "OTHERS", "NFC", "NFD", "NFKC", "NFKD", "UESCAPE", "VIEWS", 
			"NORMALIZE", "DUMP", "PRINT_STRICT_PARAMS", "VARIABLE_CONFLICT", "ERROR", 
			"USE_VARIABLE", "USE_COLUMN", "ALIAS", "CONSTANT", "PERFORM", "GET", 
			"DIAGNOSTICS", "STACKED", "ELSIF", "WHILE", "REVERSE", "FOREACH", "SLICE", 
			"EXIT", "RETURN", "QUERY", "RAISE", "SQLSTATE", "DEBUG", "LOG", "INFO", 
			"NOTICE", "WARNING", "EXCEPTION", "ASSERT", "LOOP", "OPEN", "ABS", "CBRT", 
			"CEIL", "CEILING", "DEGREES", "DIV", "EXP", "FACTORIAL", "FLOOR", "GCD", 
			"LCM", "LN", "LOG10", "MIN_SCALE", "MOD", "PI", "POWER", "RADIANS", "ROUND", 
			"SCALE", "SIGN", "SQRT", "TRIM_SCALE", "TRUNC", "WIDTH_BUCKET", "RANDOM", 
			"SETSEED", "ACOS", "ACOSD", "ASIN", "ASIND", "ATAN", "ATAND", "ATAN2", 
			"ATAN2D", "COS", "COSD", "COT", "COTD", "SIN", "SIND", "TAN", "TAND", 
			"SINH", "COSH", "TANH", "ASINH", "ACOSH", "ATANH", "BIT_LENGTH", "CHAR_LENGTH", 
			"CHARACTER_LENGTH", "LOWER", "OCTET_LENGTH", "UPPER", "ASCII", "BTRIM", 
			"CHR", "CONCAT", "CONCAT_WS", "FORMAT", "INITCAP", "LENGTH", "LPAD", 
			"LTRIM", "MD5", "PARSE_IDENT", "PG_CLIENT_ENCODING", "QUOTE_IDENT", "QUOTE_LITERAL", 
			"QUOTE_NULLABLE", "REGEXP_COUNT", "REGEXP_INSTR", "REGEXP_LIKE", "REGEXP_MATCH", 
			"REGEXP_MATCHES", "REGEXP_REPLACE", "REGEXP_SPLIT_TO_ARRAY", "REGEXP_SPLIT_TO_TABLE", 
			"REGEXP_SUBSTR", "REPEAT", "RPAD", "RTRIM", "SPLIT_PART", "STARTS_WITH", 
			"STRING_TO_ARRAY", "STRING_TO_TABLE", "STRPOS", "SUBSTR", "TO_ASCII", 
			"TO_HEX", "TRANSLATE", "UNISTR", "AGE", "CLOCK_TIMESTAMP", "DATE_BIN", 
			"DATE_PART", "DATE_TRUNC", "ISFINITE", "JUSTIFY_DAYS", "JUSTIFY_HOURS", 
			"JUSTIFY_INTERVAL", "MAKE_DATE", "MAKE_INTERVAL", "MAKE_TIME", "MAKE_TIMESTAMP", 
			"MAKE_TIMESTAMPTZ", "NOW", "STATEMENT_TIMESTAMP", "TIMEOFDAY", "TRANSACTION_TIMESTAMP", 
			"TO_TIMESTAMP", "TO_CHAR", "TO_DATE", "TO_NUMBER", "Identifier", "QuotedIdentifier", 
			"UnterminatedQuotedIdentifier", "InvalidQuotedIdentifier", "InvalidUnterminatedQuotedIdentifier", 
			"UnicodeQuotedIdentifier", "UnterminatedUnicodeQuotedIdentifier", "InvalidUnicodeQuotedIdentifier", 
			"InvalidUnterminatedUnicodeQuotedIdentifier", "StringConstant", "UnterminatedStringConstant", 
			"UnicodeEscapeStringConstant", "UnterminatedUnicodeEscapeStringConstant", 
			"BeginDollarStringConstant", "BinaryStringConstant", "UnterminatedBinaryStringConstant", 
			"InvalidBinaryStringConstant", "InvalidUnterminatedBinaryStringConstant", 
			"HexadecimalStringConstant", "UnterminatedHexadecimalStringConstant", 
			"InvalidHexadecimalStringConstant", "InvalidUnterminatedHexadecimalStringConstant", 
			"Integral", "NumericFail", "Numeric", "PLSQLVARIABLENAME", "PLSQLIDENTIFIER", 
			"Whitespace", "Newline", "LineComment", "BlockComment", "UnterminatedBlockComment", 
			"MetaCommand", "EndMetaCommand", "ErrorCharacter", "EscapeStringConstant", 
			"UnterminatedEscapeStringConstant", "InvalidEscapeStringConstant", "InvalidUnterminatedEscapeStringConstant", 
			"AfterEscapeStringConstantMode_NotContinued", "AfterEscapeStringConstantWithNewlineMode_NotContinued", 
			"DollarText", "EndDollarStringConstant", "AfterEscapeStringConstantWithNewlineMode_Continued"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "PostgreSQLParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }



	public PostgreSQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RootContext extends ParserRuleContext {
		public StmtblockContext stmtblock() {
			return getRuleContext(StmtblockContext.class,0);
		}
		public TerminalNode EOF() { return getToken(PostgreSQLParser.EOF, 0); }
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1626);
			stmtblock();
			setState(1627);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PlsqlrootContext extends ParserRuleContext {
		public Pl_functionContext pl_function() {
			return getRuleContext(Pl_functionContext.class,0);
		}
		public PlsqlrootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsqlroot; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsqlroot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsqlroot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsqlroot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlsqlrootContext plsqlroot() throws RecognitionException {
		PlsqlrootContext _localctx = new PlsqlrootContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_plsqlroot);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1629);
			pl_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StmtblockContext extends ParserRuleContext {
		public StmtmultiContext stmtmulti() {
			return getRuleContext(StmtmultiContext.class,0);
		}
		public StmtblockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmtblock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmtblock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmtblock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmtblock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtblockContext stmtblock() throws RecognitionException {
		StmtblockContext _localctx = new StmtblockContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_stmtblock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1631);
			stmtmulti();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StmtmultiContext extends ParserRuleContext {
		public List<StmtContext> stmt() {
			return getRuleContexts(StmtContext.class);
		}
		public StmtContext stmt(int i) {
			return getRuleContext(StmtContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(PostgreSQLParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(PostgreSQLParser.SEMI, i);
		}
		public StmtmultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmtmulti; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmtmulti(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmtmulti(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmtmulti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtmultiContext stmtmulti() throws RecognitionException {
		StmtmultiContext _localctx = new StmtmultiContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_stmtmulti);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1639);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2450028572476178436L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1099654234113L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 4909769124516856321L) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & 4686037194794598403L) != 0) || ((((_la - 283)) & ~0x3f) == 0 && ((1L << (_la - 283)) & 1170022785714177L) != 0) || ((((_la - 351)) & ~0x3f) == 0 && ((1L << (_la - 351)) & 6401L) != 0) || ((((_la - 415)) & ~0x3f) == 0 && ((1L << (_la - 415)) & 550292946945L) != 0) || _la==MetaCommand) {
				{
				{
				setState(1633);
				stmt();
				setState(1635);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEMI) {
					{
					setState(1634);
					match(SEMI);
					}
				}

				}
				}
				setState(1641);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StmtContext extends ParserRuleContext {
		public AltereventtrigstmtContext altereventtrigstmt() {
			return getRuleContext(AltereventtrigstmtContext.class,0);
		}
		public AltercollationstmtContext altercollationstmt() {
			return getRuleContext(AltercollationstmtContext.class,0);
		}
		public AlterdatabasestmtContext alterdatabasestmt() {
			return getRuleContext(AlterdatabasestmtContext.class,0);
		}
		public AlterdatabasesetstmtContext alterdatabasesetstmt() {
			return getRuleContext(AlterdatabasesetstmtContext.class,0);
		}
		public AlterdefaultprivilegesstmtContext alterdefaultprivilegesstmt() {
			return getRuleContext(AlterdefaultprivilegesstmtContext.class,0);
		}
		public AlterdomainstmtContext alterdomainstmt() {
			return getRuleContext(AlterdomainstmtContext.class,0);
		}
		public AlterenumstmtContext alterenumstmt() {
			return getRuleContext(AlterenumstmtContext.class,0);
		}
		public AlterextensionstmtContext alterextensionstmt() {
			return getRuleContext(AlterextensionstmtContext.class,0);
		}
		public AlterextensioncontentsstmtContext alterextensioncontentsstmt() {
			return getRuleContext(AlterextensioncontentsstmtContext.class,0);
		}
		public AlterfdwstmtContext alterfdwstmt() {
			return getRuleContext(AlterfdwstmtContext.class,0);
		}
		public AlterforeignserverstmtContext alterforeignserverstmt() {
			return getRuleContext(AlterforeignserverstmtContext.class,0);
		}
		public AlterfunctionstmtContext alterfunctionstmt() {
			return getRuleContext(AlterfunctionstmtContext.class,0);
		}
		public AltergroupstmtContext altergroupstmt() {
			return getRuleContext(AltergroupstmtContext.class,0);
		}
		public AlterobjectdependsstmtContext alterobjectdependsstmt() {
			return getRuleContext(AlterobjectdependsstmtContext.class,0);
		}
		public AlterobjectschemastmtContext alterobjectschemastmt() {
			return getRuleContext(AlterobjectschemastmtContext.class,0);
		}
		public AlterownerstmtContext alterownerstmt() {
			return getRuleContext(AlterownerstmtContext.class,0);
		}
		public AlteroperatorstmtContext alteroperatorstmt() {
			return getRuleContext(AlteroperatorstmtContext.class,0);
		}
		public AltertypestmtContext altertypestmt() {
			return getRuleContext(AltertypestmtContext.class,0);
		}
		public AlterpolicystmtContext alterpolicystmt() {
			return getRuleContext(AlterpolicystmtContext.class,0);
		}
		public AlterseqstmtContext alterseqstmt() {
			return getRuleContext(AlterseqstmtContext.class,0);
		}
		public AltersystemstmtContext altersystemstmt() {
			return getRuleContext(AltersystemstmtContext.class,0);
		}
		public AltertablestmtContext altertablestmt() {
			return getRuleContext(AltertablestmtContext.class,0);
		}
		public AltertblspcstmtContext altertblspcstmt() {
			return getRuleContext(AltertblspcstmtContext.class,0);
		}
		public AltercompositetypestmtContext altercompositetypestmt() {
			return getRuleContext(AltercompositetypestmtContext.class,0);
		}
		public AlterpublicationstmtContext alterpublicationstmt() {
			return getRuleContext(AlterpublicationstmtContext.class,0);
		}
		public AlterrolesetstmtContext alterrolesetstmt() {
			return getRuleContext(AlterrolesetstmtContext.class,0);
		}
		public AlterrolestmtContext alterrolestmt() {
			return getRuleContext(AlterrolestmtContext.class,0);
		}
		public AltersubscriptionstmtContext altersubscriptionstmt() {
			return getRuleContext(AltersubscriptionstmtContext.class,0);
		}
		public AlterstatsstmtContext alterstatsstmt() {
			return getRuleContext(AlterstatsstmtContext.class,0);
		}
		public AltertsconfigurationstmtContext altertsconfigurationstmt() {
			return getRuleContext(AltertsconfigurationstmtContext.class,0);
		}
		public AltertsdictionarystmtContext altertsdictionarystmt() {
			return getRuleContext(AltertsdictionarystmtContext.class,0);
		}
		public AlterusermappingstmtContext alterusermappingstmt() {
			return getRuleContext(AlterusermappingstmtContext.class,0);
		}
		public AnalyzestmtContext analyzestmt() {
			return getRuleContext(AnalyzestmtContext.class,0);
		}
		public CallstmtContext callstmt() {
			return getRuleContext(CallstmtContext.class,0);
		}
		public CheckpointstmtContext checkpointstmt() {
			return getRuleContext(CheckpointstmtContext.class,0);
		}
		public CloseportalstmtContext closeportalstmt() {
			return getRuleContext(CloseportalstmtContext.class,0);
		}
		public ClusterstmtContext clusterstmt() {
			return getRuleContext(ClusterstmtContext.class,0);
		}
		public CommentstmtContext commentstmt() {
			return getRuleContext(CommentstmtContext.class,0);
		}
		public ConstraintssetstmtContext constraintssetstmt() {
			return getRuleContext(ConstraintssetstmtContext.class,0);
		}
		public CopystmtContext copystmt() {
			return getRuleContext(CopystmtContext.class,0);
		}
		public CreateamstmtContext createamstmt() {
			return getRuleContext(CreateamstmtContext.class,0);
		}
		public CreateasstmtContext createasstmt() {
			return getRuleContext(CreateasstmtContext.class,0);
		}
		public CreateassertionstmtContext createassertionstmt() {
			return getRuleContext(CreateassertionstmtContext.class,0);
		}
		public CreatecaststmtContext createcaststmt() {
			return getRuleContext(CreatecaststmtContext.class,0);
		}
		public CreateconversionstmtContext createconversionstmt() {
			return getRuleContext(CreateconversionstmtContext.class,0);
		}
		public CreatedomainstmtContext createdomainstmt() {
			return getRuleContext(CreatedomainstmtContext.class,0);
		}
		public CreateextensionstmtContext createextensionstmt() {
			return getRuleContext(CreateextensionstmtContext.class,0);
		}
		public CreatefdwstmtContext createfdwstmt() {
			return getRuleContext(CreatefdwstmtContext.class,0);
		}
		public CreateforeignserverstmtContext createforeignserverstmt() {
			return getRuleContext(CreateforeignserverstmtContext.class,0);
		}
		public CreateforeigntablestmtContext createforeigntablestmt() {
			return getRuleContext(CreateforeigntablestmtContext.class,0);
		}
		public CreatefunctionstmtContext createfunctionstmt() {
			return getRuleContext(CreatefunctionstmtContext.class,0);
		}
		public CreategroupstmtContext creategroupstmt() {
			return getRuleContext(CreategroupstmtContext.class,0);
		}
		public CreatematviewstmtContext creatematviewstmt() {
			return getRuleContext(CreatematviewstmtContext.class,0);
		}
		public CreateopclassstmtContext createopclassstmt() {
			return getRuleContext(CreateopclassstmtContext.class,0);
		}
		public CreateopfamilystmtContext createopfamilystmt() {
			return getRuleContext(CreateopfamilystmtContext.class,0);
		}
		public CreatepublicationstmtContext createpublicationstmt() {
			return getRuleContext(CreatepublicationstmtContext.class,0);
		}
		public AlteropfamilystmtContext alteropfamilystmt() {
			return getRuleContext(AlteropfamilystmtContext.class,0);
		}
		public CreatepolicystmtContext createpolicystmt() {
			return getRuleContext(CreatepolicystmtContext.class,0);
		}
		public CreateplangstmtContext createplangstmt() {
			return getRuleContext(CreateplangstmtContext.class,0);
		}
		public CreateschemastmtContext createschemastmt() {
			return getRuleContext(CreateschemastmtContext.class,0);
		}
		public CreateseqstmtContext createseqstmt() {
			return getRuleContext(CreateseqstmtContext.class,0);
		}
		public CreatestmtContext createstmt() {
			return getRuleContext(CreatestmtContext.class,0);
		}
		public CreatesubscriptionstmtContext createsubscriptionstmt() {
			return getRuleContext(CreatesubscriptionstmtContext.class,0);
		}
		public CreatestatsstmtContext createstatsstmt() {
			return getRuleContext(CreatestatsstmtContext.class,0);
		}
		public CreatetablespacestmtContext createtablespacestmt() {
			return getRuleContext(CreatetablespacestmtContext.class,0);
		}
		public CreatetransformstmtContext createtransformstmt() {
			return getRuleContext(CreatetransformstmtContext.class,0);
		}
		public CreatetrigstmtContext createtrigstmt() {
			return getRuleContext(CreatetrigstmtContext.class,0);
		}
		public CreateeventtrigstmtContext createeventtrigstmt() {
			return getRuleContext(CreateeventtrigstmtContext.class,0);
		}
		public CreaterolestmtContext createrolestmt() {
			return getRuleContext(CreaterolestmtContext.class,0);
		}
		public CreateuserstmtContext createuserstmt() {
			return getRuleContext(CreateuserstmtContext.class,0);
		}
		public CreateusermappingstmtContext createusermappingstmt() {
			return getRuleContext(CreateusermappingstmtContext.class,0);
		}
		public CreatedbstmtContext createdbstmt() {
			return getRuleContext(CreatedbstmtContext.class,0);
		}
		public DeallocatestmtContext deallocatestmt() {
			return getRuleContext(DeallocatestmtContext.class,0);
		}
		public DeclarecursorstmtContext declarecursorstmt() {
			return getRuleContext(DeclarecursorstmtContext.class,0);
		}
		public DefinestmtContext definestmt() {
			return getRuleContext(DefinestmtContext.class,0);
		}
		public DeletestmtContext deletestmt() {
			return getRuleContext(DeletestmtContext.class,0);
		}
		public DiscardstmtContext discardstmt() {
			return getRuleContext(DiscardstmtContext.class,0);
		}
		public DostmtContext dostmt() {
			return getRuleContext(DostmtContext.class,0);
		}
		public DropcaststmtContext dropcaststmt() {
			return getRuleContext(DropcaststmtContext.class,0);
		}
		public DropopclassstmtContext dropopclassstmt() {
			return getRuleContext(DropopclassstmtContext.class,0);
		}
		public DropopfamilystmtContext dropopfamilystmt() {
			return getRuleContext(DropopfamilystmtContext.class,0);
		}
		public DropownedstmtContext dropownedstmt() {
			return getRuleContext(DropownedstmtContext.class,0);
		}
		public DropstmtContext dropstmt() {
			return getRuleContext(DropstmtContext.class,0);
		}
		public DropsubscriptionstmtContext dropsubscriptionstmt() {
			return getRuleContext(DropsubscriptionstmtContext.class,0);
		}
		public DroptablespacestmtContext droptablespacestmt() {
			return getRuleContext(DroptablespacestmtContext.class,0);
		}
		public DroptransformstmtContext droptransformstmt() {
			return getRuleContext(DroptransformstmtContext.class,0);
		}
		public DroprolestmtContext droprolestmt() {
			return getRuleContext(DroprolestmtContext.class,0);
		}
		public DropusermappingstmtContext dropusermappingstmt() {
			return getRuleContext(DropusermappingstmtContext.class,0);
		}
		public DropdbstmtContext dropdbstmt() {
			return getRuleContext(DropdbstmtContext.class,0);
		}
		public ExecutestmtContext executestmt() {
			return getRuleContext(ExecutestmtContext.class,0);
		}
		public ExplainstmtContext explainstmt() {
			return getRuleContext(ExplainstmtContext.class,0);
		}
		public FetchstmtContext fetchstmt() {
			return getRuleContext(FetchstmtContext.class,0);
		}
		public GrantstmtContext grantstmt() {
			return getRuleContext(GrantstmtContext.class,0);
		}
		public GrantrolestmtContext grantrolestmt() {
			return getRuleContext(GrantrolestmtContext.class,0);
		}
		public ImportforeignschemastmtContext importforeignschemastmt() {
			return getRuleContext(ImportforeignschemastmtContext.class,0);
		}
		public IndexstmtContext indexstmt() {
			return getRuleContext(IndexstmtContext.class,0);
		}
		public InsertstmtContext insertstmt() {
			return getRuleContext(InsertstmtContext.class,0);
		}
		public MergestmtContext mergestmt() {
			return getRuleContext(MergestmtContext.class,0);
		}
		public ListenstmtContext listenstmt() {
			return getRuleContext(ListenstmtContext.class,0);
		}
		public RefreshmatviewstmtContext refreshmatviewstmt() {
			return getRuleContext(RefreshmatviewstmtContext.class,0);
		}
		public LoadstmtContext loadstmt() {
			return getRuleContext(LoadstmtContext.class,0);
		}
		public LockstmtContext lockstmt() {
			return getRuleContext(LockstmtContext.class,0);
		}
		public NotifystmtContext notifystmt() {
			return getRuleContext(NotifystmtContext.class,0);
		}
		public PreparestmtContext preparestmt() {
			return getRuleContext(PreparestmtContext.class,0);
		}
		public ReassignownedstmtContext reassignownedstmt() {
			return getRuleContext(ReassignownedstmtContext.class,0);
		}
		public ReindexstmtContext reindexstmt() {
			return getRuleContext(ReindexstmtContext.class,0);
		}
		public RemoveaggrstmtContext removeaggrstmt() {
			return getRuleContext(RemoveaggrstmtContext.class,0);
		}
		public RemovefuncstmtContext removefuncstmt() {
			return getRuleContext(RemovefuncstmtContext.class,0);
		}
		public RemoveoperstmtContext removeoperstmt() {
			return getRuleContext(RemoveoperstmtContext.class,0);
		}
		public RenamestmtContext renamestmt() {
			return getRuleContext(RenamestmtContext.class,0);
		}
		public RevokestmtContext revokestmt() {
			return getRuleContext(RevokestmtContext.class,0);
		}
		public RevokerolestmtContext revokerolestmt() {
			return getRuleContext(RevokerolestmtContext.class,0);
		}
		public RulestmtContext rulestmt() {
			return getRuleContext(RulestmtContext.class,0);
		}
		public SeclabelstmtContext seclabelstmt() {
			return getRuleContext(SeclabelstmtContext.class,0);
		}
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public TransactionstmtContext transactionstmt() {
			return getRuleContext(TransactionstmtContext.class,0);
		}
		public TruncatestmtContext truncatestmt() {
			return getRuleContext(TruncatestmtContext.class,0);
		}
		public UnlistenstmtContext unlistenstmt() {
			return getRuleContext(UnlistenstmtContext.class,0);
		}
		public UpdatestmtContext updatestmt() {
			return getRuleContext(UpdatestmtContext.class,0);
		}
		public VacuumstmtContext vacuumstmt() {
			return getRuleContext(VacuumstmtContext.class,0);
		}
		public VariableresetstmtContext variableresetstmt() {
			return getRuleContext(VariableresetstmtContext.class,0);
		}
		public VariablesetstmtContext variablesetstmt() {
			return getRuleContext(VariablesetstmtContext.class,0);
		}
		public VariableshowstmtContext variableshowstmt() {
			return getRuleContext(VariableshowstmtContext.class,0);
		}
		public ViewstmtContext viewstmt() {
			return getRuleContext(ViewstmtContext.class,0);
		}
		public PlsqlconsolecommandContext plsqlconsolecommand() {
			return getRuleContext(PlsqlconsolecommandContext.class,0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtContext stmt() throws RecognitionException {
		StmtContext _localctx = new StmtContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_stmt);
		try {
			setState(1767);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1642);
				altereventtrigstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1643);
				altercollationstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1644);
				alterdatabasestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1645);
				alterdatabasesetstmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1646);
				alterdefaultprivilegesstmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1647);
				alterdomainstmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1648);
				alterenumstmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1649);
				alterextensionstmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1650);
				alterextensioncontentsstmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1651);
				alterfdwstmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1652);
				alterforeignserverstmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1653);
				alterfunctionstmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1654);
				altergroupstmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1655);
				alterobjectdependsstmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1656);
				alterobjectschemastmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1657);
				alterownerstmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1658);
				alteroperatorstmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1659);
				altertypestmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1660);
				alterpolicystmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1661);
				alterseqstmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1662);
				altersystemstmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1663);
				altertablestmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1664);
				altertblspcstmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1665);
				altercompositetypestmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1666);
				alterpublicationstmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1667);
				alterrolesetstmt();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1668);
				alterrolestmt();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1669);
				altersubscriptionstmt();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1670);
				alterstatsstmt();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1671);
				altertsconfigurationstmt();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1672);
				altertsdictionarystmt();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1673);
				alterusermappingstmt();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1674);
				analyzestmt();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1675);
				callstmt();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1676);
				checkpointstmt();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1677);
				closeportalstmt();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1678);
				clusterstmt();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1679);
				commentstmt();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1680);
				constraintssetstmt();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1681);
				copystmt();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1682);
				createamstmt();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1683);
				createasstmt();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1684);
				createassertionstmt();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1685);
				createcaststmt();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(1686);
				createconversionstmt();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(1687);
				createdomainstmt();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(1688);
				createextensionstmt();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(1689);
				createfdwstmt();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(1690);
				createforeignserverstmt();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(1691);
				createforeigntablestmt();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(1692);
				createfunctionstmt();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(1693);
				creategroupstmt();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(1694);
				creatematviewstmt();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(1695);
				createopclassstmt();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(1696);
				createopfamilystmt();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(1697);
				createpublicationstmt();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(1698);
				alteropfamilystmt();
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(1699);
				createpolicystmt();
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(1700);
				createplangstmt();
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(1701);
				createschemastmt();
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(1702);
				createseqstmt();
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(1703);
				createstmt();
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(1704);
				createsubscriptionstmt();
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(1705);
				createstatsstmt();
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(1706);
				createtablespacestmt();
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(1707);
				createtransformstmt();
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(1708);
				createtrigstmt();
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(1709);
				createeventtrigstmt();
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(1710);
				createrolestmt();
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(1711);
				createuserstmt();
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(1712);
				createusermappingstmt();
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(1713);
				createdbstmt();
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(1714);
				deallocatestmt();
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(1715);
				declarecursorstmt();
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(1716);
				definestmt();
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(1717);
				deletestmt();
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(1718);
				discardstmt();
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(1719);
				dostmt();
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(1720);
				dropcaststmt();
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(1721);
				dropopclassstmt();
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(1722);
				dropopfamilystmt();
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(1723);
				dropownedstmt();
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(1724);
				dropstmt();
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(1725);
				dropsubscriptionstmt();
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(1726);
				droptablespacestmt();
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(1727);
				droptransformstmt();
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(1728);
				droprolestmt();
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(1729);
				dropusermappingstmt();
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(1730);
				dropdbstmt();
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(1731);
				executestmt();
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(1732);
				explainstmt();
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(1733);
				fetchstmt();
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(1734);
				grantstmt();
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(1735);
				grantrolestmt();
				}
				break;
			case 95:
				enterOuterAlt(_localctx, 95);
				{
				setState(1736);
				importforeignschemastmt();
				}
				break;
			case 96:
				enterOuterAlt(_localctx, 96);
				{
				setState(1737);
				indexstmt();
				}
				break;
			case 97:
				enterOuterAlt(_localctx, 97);
				{
				setState(1738);
				insertstmt();
				}
				break;
			case 98:
				enterOuterAlt(_localctx, 98);
				{
				setState(1739);
				mergestmt();
				}
				break;
			case 99:
				enterOuterAlt(_localctx, 99);
				{
				setState(1740);
				listenstmt();
				}
				break;
			case 100:
				enterOuterAlt(_localctx, 100);
				{
				setState(1741);
				refreshmatviewstmt();
				}
				break;
			case 101:
				enterOuterAlt(_localctx, 101);
				{
				setState(1742);
				loadstmt();
				}
				break;
			case 102:
				enterOuterAlt(_localctx, 102);
				{
				setState(1743);
				lockstmt();
				}
				break;
			case 103:
				enterOuterAlt(_localctx, 103);
				{
				setState(1744);
				notifystmt();
				}
				break;
			case 104:
				enterOuterAlt(_localctx, 104);
				{
				setState(1745);
				preparestmt();
				}
				break;
			case 105:
				enterOuterAlt(_localctx, 105);
				{
				setState(1746);
				reassignownedstmt();
				}
				break;
			case 106:
				enterOuterAlt(_localctx, 106);
				{
				setState(1747);
				reindexstmt();
				}
				break;
			case 107:
				enterOuterAlt(_localctx, 107);
				{
				setState(1748);
				removeaggrstmt();
				}
				break;
			case 108:
				enterOuterAlt(_localctx, 108);
				{
				setState(1749);
				removefuncstmt();
				}
				break;
			case 109:
				enterOuterAlt(_localctx, 109);
				{
				setState(1750);
				removeoperstmt();
				}
				break;
			case 110:
				enterOuterAlt(_localctx, 110);
				{
				setState(1751);
				renamestmt();
				}
				break;
			case 111:
				enterOuterAlt(_localctx, 111);
				{
				setState(1752);
				revokestmt();
				}
				break;
			case 112:
				enterOuterAlt(_localctx, 112);
				{
				setState(1753);
				revokerolestmt();
				}
				break;
			case 113:
				enterOuterAlt(_localctx, 113);
				{
				setState(1754);
				rulestmt();
				}
				break;
			case 114:
				enterOuterAlt(_localctx, 114);
				{
				setState(1755);
				seclabelstmt();
				}
				break;
			case 115:
				enterOuterAlt(_localctx, 115);
				{
				setState(1756);
				selectstmt();
				}
				break;
			case 116:
				enterOuterAlt(_localctx, 116);
				{
				setState(1757);
				transactionstmt();
				}
				break;
			case 117:
				enterOuterAlt(_localctx, 117);
				{
				setState(1758);
				truncatestmt();
				}
				break;
			case 118:
				enterOuterAlt(_localctx, 118);
				{
				setState(1759);
				unlistenstmt();
				}
				break;
			case 119:
				enterOuterAlt(_localctx, 119);
				{
				setState(1760);
				updatestmt();
				}
				break;
			case 120:
				enterOuterAlt(_localctx, 120);
				{
				setState(1761);
				vacuumstmt();
				}
				break;
			case 121:
				enterOuterAlt(_localctx, 121);
				{
				setState(1762);
				variableresetstmt();
				}
				break;
			case 122:
				enterOuterAlt(_localctx, 122);
				{
				setState(1763);
				variablesetstmt();
				}
				break;
			case 123:
				enterOuterAlt(_localctx, 123);
				{
				setState(1764);
				variableshowstmt();
				}
				break;
			case 124:
				enterOuterAlt(_localctx, 124);
				{
				setState(1765);
				viewstmt();
				}
				break;
			case 125:
				enterOuterAlt(_localctx, 125);
				{
				setState(1766);
				plsqlconsolecommand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PlsqlconsolecommandContext extends ParserRuleContext {
		public TerminalNode MetaCommand() { return getToken(PostgreSQLParser.MetaCommand, 0); }
		public TerminalNode EndMetaCommand() { return getToken(PostgreSQLParser.EndMetaCommand, 0); }
		public PlsqlconsolecommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsqlconsolecommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsqlconsolecommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsqlconsolecommand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsqlconsolecommand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlsqlconsolecommandContext plsqlconsolecommand() throws RecognitionException {
		PlsqlconsolecommandContext _localctx = new PlsqlconsolecommandContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_plsqlconsolecommand);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1769);
			match(MetaCommand);
			setState(1771);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EndMetaCommand) {
				{
				setState(1770);
				match(EndMetaCommand);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CallstmtContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(PostgreSQLParser.CALL, 0); }
		public Func_applicationContext func_application() {
			return getRuleContext(Func_applicationContext.class,0);
		}
		public CallstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCallstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCallstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCallstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallstmtContext callstmt() throws RecognitionException {
		CallstmtContext _localctx = new CallstmtContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_callstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1773);
			match(CALL);
			setState(1774);
			func_application();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreaterolestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public RoleidContext roleid() {
			return getRuleContext(RoleidContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public OptrolelistContext optrolelist() {
			return getRuleContext(OptrolelistContext.class,0);
		}
		public CreaterolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createrolestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreaterolestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreaterolestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreaterolestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreaterolestmtContext createrolestmt() throws RecognitionException {
		CreaterolestmtContext _localctx = new CreaterolestmtContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_createrolestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1776);
			match(CREATE);
			setState(1777);
			match(ROLE);
			setState(1778);
			roleid();
			setState(1779);
			opt_with();
			setState(1780);
			optrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_withContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Opt_withContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_with(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_with(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_with(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_withContext opt_with() throws RecognitionException {
		Opt_withContext _localctx = new Opt_withContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_opt_with);
		try {
			setState(1784);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1782);
				match(WITH);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptrolelistContext extends ParserRuleContext {
		public List<CreateoptroleelemContext> createoptroleelem() {
			return getRuleContexts(CreateoptroleelemContext.class);
		}
		public CreateoptroleelemContext createoptroleelem(int i) {
			return getRuleContext(CreateoptroleelemContext.class,i);
		}
		public OptrolelistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optrolelist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptrolelist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptrolelist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptrolelist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptrolelistContext optrolelist() throws RecognitionException {
		OptrolelistContext _localctx = new OptrolelistContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_optrolelist);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1789);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1786);
					createoptroleelem();
					}
					} 
				}
				setState(1791);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlteroptrolelistContext extends ParserRuleContext {
		public List<AlteroptroleelemContext> alteroptroleelem() {
			return getRuleContexts(AlteroptroleelemContext.class);
		}
		public AlteroptroleelemContext alteroptroleelem(int i) {
			return getRuleContext(AlteroptroleelemContext.class,i);
		}
		public AlteroptrolelistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteroptrolelist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlteroptrolelist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlteroptrolelist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlteroptrolelist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteroptrolelistContext alteroptrolelist() throws RecognitionException {
		AlteroptrolelistContext _localctx = new AlteroptrolelistContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_alteroptrolelist);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1795);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1792);
					alteroptroleelem();
					}
					} 
				}
				setState(1797);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlteroptroleelemContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(PostgreSQLParser.PASSWORD, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PostgreSQLParser.ENCRYPTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PostgreSQLParser.UNENCRYPTED, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public TerminalNode VALID() { return getToken(PostgreSQLParser.VALID, 0); }
		public TerminalNode UNTIL() { return getToken(PostgreSQLParser.UNTIL, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AlteroptroleelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteroptroleelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlteroptroleelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlteroptroleelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlteroptroleelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteroptroleelemContext alteroptroleelem() throws RecognitionException {
		AlteroptroleelemContext _localctx = new AlteroptroleelemContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_alteroptroleelem);
		int _la;
		try {
			setState(1816);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PASSWORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1798);
				match(PASSWORD);
				setState(1801);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case EscapeStringConstant:
					{
					setState(1799);
					sconst();
					}
					break;
				case NULL_P:
					{
					setState(1800);
					match(NULL_P);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ENCRYPTED:
			case UNENCRYPTED:
				enterOuterAlt(_localctx, 2);
				{
				setState(1803);
				_la = _input.LA(1);
				if ( !(_la==ENCRYPTED || _la==UNENCRYPTED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1804);
				match(PASSWORD);
				setState(1805);
				sconst();
				}
				break;
			case INHERIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1806);
				match(INHERIT);
				}
				break;
			case CONNECTION:
				enterOuterAlt(_localctx, 4);
				{
				setState(1807);
				match(CONNECTION);
				setState(1808);
				match(LIMIT);
				setState(1809);
				signediconst();
				}
				break;
			case VALID:
				enterOuterAlt(_localctx, 5);
				{
				setState(1810);
				match(VALID);
				setState(1811);
				match(UNTIL);
				setState(1812);
				sconst();
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 6);
				{
				setState(1813);
				match(USER);
				setState(1814);
				role_list();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 7);
				{
				setState(1815);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateoptroleelemContext extends ParserRuleContext {
		public AlteroptroleelemContext alteroptroleelem() {
			return getRuleContext(AlteroptroleelemContext.class,0);
		}
		public TerminalNode SYSID() { return getToken(PostgreSQLParser.SYSID, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public CreateoptroleelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createoptroleelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateoptroleelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateoptroleelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateoptroleelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateoptroleelemContext createoptroleelem() throws RecognitionException {
		CreateoptroleelemContext _localctx = new CreateoptroleelemContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_createoptroleelem);
		int _la;
		try {
			setState(1828);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case USER:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONNECTION:
			case CONTINUE_P:
			case CURSOR:
			case ENCRYPTED:
			case FIRST_P:
			case FORWARD:
			case INHERIT:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PASSWORD:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case UNENCRYPTED:
			case VALID:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1818);
				alteroptroleelem();
				}
				break;
			case SYSID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1819);
				match(SYSID);
				setState(1820);
				iconst();
				}
				break;
			case ADMIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(1821);
				match(ADMIN);
				setState(1822);
				role_list();
				}
				break;
			case ROLE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1823);
				match(ROLE);
				setState(1824);
				role_list();
				}
				break;
			case IN_P:
				enterOuterAlt(_localctx, 5);
				{
				setState(1825);
				match(IN_P);
				setState(1826);
				_la = _input.LA(1);
				if ( !(_la==GROUP_P || _la==ROLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1827);
				role_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateuserstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public RoleidContext roleid() {
			return getRuleContext(RoleidContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public OptrolelistContext optrolelist() {
			return getRuleContext(OptrolelistContext.class,0);
		}
		public CreateuserstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createuserstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateuserstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateuserstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateuserstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateuserstmtContext createuserstmt() throws RecognitionException {
		CreateuserstmtContext _localctx = new CreateuserstmtContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_createuserstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1830);
			match(CREATE);
			setState(1831);
			match(USER);
			setState(1832);
			roleid();
			setState(1833);
			opt_with();
			setState(1834);
			optrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterrolestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public AlteroptrolelistContext alteroptrolelist() {
			return getRuleContext(AlteroptrolelistContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public AlterrolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterrolestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterrolestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterrolestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterrolestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterrolestmtContext alterrolestmt() throws RecognitionException {
		AlterrolestmtContext _localctx = new AlterrolestmtContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_alterrolestmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1836);
			match(ALTER);
			setState(1837);
			_la = _input.LA(1);
			if ( !(_la==USER || _la==ROLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1838);
			rolespec();
			setState(1839);
			opt_with();
			setState(1840);
			alteroptrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_in_databaseContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_in_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_in_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_in_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_in_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_in_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_in_databaseContext opt_in_database() throws RecognitionException {
		Opt_in_databaseContext _localctx = new Opt_in_databaseContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_opt_in_database);
		try {
			setState(1846);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESET:
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case IN_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(1843);
				match(IN_P);
				setState(1844);
				match(DATABASE);
				setState(1845);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterrolesetstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public Opt_in_databaseContext opt_in_database() {
			return getRuleContext(Opt_in_databaseContext.class,0);
		}
		public SetresetclauseContext setresetclause() {
			return getRuleContext(SetresetclauseContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public AlterrolesetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterrolesetstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterrolesetstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterrolesetstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterrolesetstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterrolesetstmtContext alterrolesetstmt() throws RecognitionException {
		AlterrolesetstmtContext _localctx = new AlterrolesetstmtContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_alterrolesetstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1848);
			match(ALTER);
			setState(1849);
			_la = _input.LA(1);
			if ( !(_la==USER || _la==ROLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1851);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(1850);
				match(ALL);
				}
			}

			setState(1853);
			rolespec();
			setState(1854);
			opt_in_database();
			setState(1855);
			setresetclause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DroprolestmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DroprolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_droprolestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDroprolestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDroprolestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDroprolestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DroprolestmtContext droprolestmt() throws RecognitionException {
		DroprolestmtContext _localctx = new DroprolestmtContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_droprolestmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1857);
			match(DROP);
			setState(1858);
			_la = _input.LA(1);
			if ( !(_la==GROUP_P || _la==USER || _la==ROLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1861);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				setState(1859);
				match(IF_P);
				setState(1860);
				match(EXISTS);
				}
				break;
			}
			setState(1863);
			role_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreategroupstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public RoleidContext roleid() {
			return getRuleContext(RoleidContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public OptrolelistContext optrolelist() {
			return getRuleContext(OptrolelistContext.class,0);
		}
		public CreategroupstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_creategroupstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreategroupstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreategroupstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreategroupstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreategroupstmtContext creategroupstmt() throws RecognitionException {
		CreategroupstmtContext _localctx = new CreategroupstmtContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_creategroupstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1865);
			match(CREATE);
			setState(1866);
			match(GROUP_P);
			setState(1867);
			roleid();
			setState(1868);
			opt_with();
			setState(1869);
			optrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltergroupstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public Add_dropContext add_drop() {
			return getRuleContext(Add_dropContext.class,0);
		}
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public AltergroupstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altergroupstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltergroupstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltergroupstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltergroupstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltergroupstmtContext altergroupstmt() throws RecognitionException {
		AltergroupstmtContext _localctx = new AltergroupstmtContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_altergroupstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1871);
			match(ALTER);
			setState(1872);
			match(GROUP_P);
			setState(1873);
			rolespec();
			setState(1874);
			add_drop();
			setState(1875);
			match(USER);
			setState(1876);
			role_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Add_dropContext extends ParserRuleContext {
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Add_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_drop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAdd_drop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAdd_drop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAdd_drop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_dropContext add_drop() throws RecognitionException {
		Add_dropContext _localctx = new Add_dropContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_add_drop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1878);
			_la = _input.LA(1);
			if ( !(_la==ADD_P || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateschemastmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public OptschemaeltlistContext optschemaeltlist() {
			return getRuleContext(OptschemaeltlistContext.class,0);
		}
		public OptschemanameContext optschemaname() {
			return getRuleContext(OptschemanameContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateschemastmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createschemastmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateschemastmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateschemastmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateschemastmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateschemastmtContext createschemastmt() throws RecognitionException {
		CreateschemastmtContext _localctx = new CreateschemastmtContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_createschemastmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1880);
			match(CREATE);
			setState(1881);
			match(SCHEMA);
			setState(1885);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				setState(1882);
				match(IF_P);
				setState(1883);
				match(NOT);
				setState(1884);
				match(EXISTS);
				}
				break;
			}
			setState(1892);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				setState(1887);
				optschemaname();
				setState(1888);
				match(AUTHORIZATION);
				setState(1889);
				rolespec();
				}
				break;
			case 2:
				{
				setState(1891);
				colid();
				}
				break;
			}
			setState(1894);
			optschemaeltlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptschemanameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public OptschemanameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optschemaname; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptschemaname(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptschemaname(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptschemaname(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptschemanameContext optschemaname() throws RecognitionException {
		OptschemanameContext _localctx = new OptschemanameContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_optschemaname);
		try {
			setState(1898);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1896);
				colid();
				}
				break;
			case AUTHORIZATION:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptschemaeltlistContext extends ParserRuleContext {
		public List<Schema_stmtContext> schema_stmt() {
			return getRuleContexts(Schema_stmtContext.class);
		}
		public Schema_stmtContext schema_stmt(int i) {
			return getRuleContext(Schema_stmtContext.class,i);
		}
		public OptschemaeltlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optschemaeltlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptschemaeltlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptschemaeltlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptschemaeltlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptschemaeltlistContext optschemaeltlist() throws RecognitionException {
		OptschemaeltlistContext _localctx = new OptschemaeltlistContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_optschemaeltlist);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1903);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1900);
					schema_stmt();
					}
					} 
				}
				setState(1905);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,16,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Schema_stmtContext extends ParserRuleContext {
		public CreatestmtContext createstmt() {
			return getRuleContext(CreatestmtContext.class,0);
		}
		public IndexstmtContext indexstmt() {
			return getRuleContext(IndexstmtContext.class,0);
		}
		public CreateseqstmtContext createseqstmt() {
			return getRuleContext(CreateseqstmtContext.class,0);
		}
		public CreatetrigstmtContext createtrigstmt() {
			return getRuleContext(CreatetrigstmtContext.class,0);
		}
		public GrantstmtContext grantstmt() {
			return getRuleContext(GrantstmtContext.class,0);
		}
		public ViewstmtContext viewstmt() {
			return getRuleContext(ViewstmtContext.class,0);
		}
		public Schema_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSchema_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSchema_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSchema_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_stmtContext schema_stmt() throws RecognitionException {
		Schema_stmtContext _localctx = new Schema_stmtContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_schema_stmt);
		try {
			setState(1912);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1906);
				createstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1907);
				indexstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1908);
				createseqstmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1909);
				createtrigstmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1910);
				grantstmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1911);
				viewstmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VariablesetstmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_restContext set_rest() {
			return getRuleContext(Set_restContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public VariablesetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variablesetstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVariablesetstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVariablesetstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVariablesetstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariablesetstmtContext variablesetstmt() throws RecognitionException {
		VariablesetstmtContext _localctx = new VariablesetstmtContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_variablesetstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1914);
			match(SET);
			setState(1916);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				setState(1915);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==SESSION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1918);
			set_rest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_restContext extends ParserRuleContext {
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Set_rest_moreContext set_rest_more() {
			return getRuleContext(Set_rest_moreContext.class,0);
		}
		public Set_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_rest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_rest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_rest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_rest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_restContext set_rest() throws RecognitionException {
		Set_restContext _localctx = new Set_restContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_set_rest);
		try {
			setState(1928);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1920);
				match(TRANSACTION);
				setState(1921);
				transaction_mode_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1922);
				match(SESSION);
				setState(1923);
				match(CHARACTERISTICS);
				setState(1924);
				match(AS);
				setState(1925);
				match(TRANSACTION);
				setState(1926);
				transaction_mode_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1927);
				set_rest_more();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Generic_setContext extends ParserRuleContext {
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public Var_listContext var_list() {
			return getRuleContext(Var_listContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Generic_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_set(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_set(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_setContext generic_set() throws RecognitionException {
		Generic_setContext _localctx = new Generic_setContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_generic_set);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1930);
			var_name();
			setState(1931);
			_la = _input.LA(1);
			if ( !(_la==EQUAL || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1932);
			var_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_rest_moreContext extends ParserRuleContext {
		public Generic_setContext generic_set() {
			return getRuleContext(Generic_setContext.class,0);
		}
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public Zone_valueContext zone_value() {
			return getRuleContext(Zone_valueContext.class,0);
		}
		public TerminalNode CATALOG() { return getToken(PostgreSQLParser.CATALOG, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode NAMES() { return getToken(PostgreSQLParser.NAMES, 0); }
		public Opt_encodingContext opt_encoding() {
			return getRuleContext(Opt_encodingContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public TerminalNode XML_P() { return getToken(PostgreSQLParser.XML_P, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public Document_or_contentContext document_or_content() {
			return getRuleContext(Document_or_contentContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PostgreSQLParser.SNAPSHOT, 0); }
		public Set_rest_moreContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_rest_more; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_rest_more(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_rest_more(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_rest_more(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_rest_moreContext set_rest_more() throws RecognitionException {
		Set_rest_moreContext _localctx = new Set_rest_moreContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_set_rest_more);
		try {
			setState(1959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1934);
				generic_set();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1935);
				var_name();
				setState(1936);
				match(FROM);
				setState(1937);
				match(CURRENT_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1939);
				match(TIME);
				setState(1940);
				match(ZONE);
				setState(1941);
				zone_value();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1942);
				match(CATALOG);
				setState(1943);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1944);
				match(SCHEMA);
				setState(1945);
				sconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1946);
				match(NAMES);
				setState(1947);
				opt_encoding();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1948);
				match(ROLE);
				setState(1949);
				nonreservedword_or_sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1950);
				match(SESSION);
				setState(1951);
				match(AUTHORIZATION);
				setState(1952);
				nonreservedword_or_sconst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1953);
				match(XML_P);
				setState(1954);
				match(OPTION);
				setState(1955);
				document_or_content();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1956);
				match(TRANSACTION);
				setState(1957);
				match(SNAPSHOT);
				setState(1958);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Var_nameContext extends ParserRuleContext {
		public List<ColidContext> colid() {
			return getRuleContexts(ColidContext.class);
		}
		public ColidContext colid(int i) {
			return getRuleContext(ColidContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(PostgreSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(PostgreSQLParser.DOT, i);
		}
		public Var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVar_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVar_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVar_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_nameContext var_name() throws RecognitionException {
		Var_nameContext _localctx = new Var_nameContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_var_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1961);
			colid();
			setState(1966);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DOT) {
				{
				{
				setState(1962);
				match(DOT);
				setState(1963);
				colid();
				}
				}
				setState(1968);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Var_listContext extends ParserRuleContext {
		public List<Var_valueContext> var_value() {
			return getRuleContexts(Var_valueContext.class);
		}
		public Var_valueContext var_value(int i) {
			return getRuleContext(Var_valueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Var_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVar_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVar_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVar_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_listContext var_list() throws RecognitionException {
		Var_listContext _localctx = new Var_listContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_var_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1969);
			var_value();
			setState(1974);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1970);
				match(COMMA);
				setState(1971);
				var_value();
				}
				}
				setState(1976);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Var_valueContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public Var_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVar_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVar_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVar_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_valueContext var_value() throws RecognitionException {
		Var_valueContext _localctx = new Var_valueContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_var_value);
		try {
			setState(1979);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(1977);
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(1978);
				numericonly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Iso_levelContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PostgreSQLParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(PostgreSQLParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLParser.REPEATABLE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PostgreSQLParser.SERIALIZABLE, 0); }
		public Iso_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iso_level; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIso_level(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIso_level(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIso_level(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Iso_levelContext iso_level() throws RecognitionException {
		Iso_levelContext _localctx = new Iso_levelContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_iso_level);
		int _la;
		try {
			setState(1986);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(1981);
				match(READ);
				setState(1982);
				_la = _input.LA(1);
				if ( !(_la==COMMITTED || _la==UNCOMMITTED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case REPEATABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1983);
				match(REPEATABLE);
				setState(1984);
				match(READ);
				}
				break;
			case SERIALIZABLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1985);
				match(SERIALIZABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_boolean_or_stringContext extends ParserRuleContext {
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public Opt_boolean_or_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_boolean_or_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_boolean_or_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_boolean_or_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_boolean_or_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_boolean_or_stringContext opt_boolean_or_string() throws RecognitionException {
		Opt_boolean_or_stringContext _localctx = new Opt_boolean_or_stringContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_opt_boolean_or_string);
		try {
			setState(1992);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(1988);
				match(TRUE_P);
				}
				break;
			case FALSE_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(1989);
				match(FALSE_P);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(1990);
				match(ON);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 4);
				{
				setState(1991);
				nonreservedword_or_sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Zone_valueContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstintervalContext constinterval() {
			return getRuleContext(ConstintervalContext.class,0);
		}
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public Zone_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zone_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterZone_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitZone_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitZone_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Zone_valueContext zone_value() throws RecognitionException {
		Zone_valueContext _localctx = new Zone_valueContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_zone_value);
		try {
			setState(2009);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1994);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1995);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1996);
				constinterval();
				setState(1997);
				sconst();
				setState(1998);
				opt_interval();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2000);
				constinterval();
				setState(2001);
				match(OPEN_PAREN);
				setState(2002);
				iconst();
				setState(2003);
				match(CLOSE_PAREN);
				setState(2004);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2006);
				numericonly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2007);
				match(DEFAULT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2008);
				match(LOCAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_encodingContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Opt_encodingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_encoding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_encoding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_encoding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_encoding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_encodingContext opt_encoding() throws RecognitionException {
		Opt_encodingContext _localctx = new Opt_encodingContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_opt_encoding);
		try {
			setState(2014);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(2011);
				sconst();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2012);
				match(DEFAULT);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AS:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case NOT:
			case SELECT:
			case TABLE:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CALLED:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case COST:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case EXTERNAL:
			case IMMUTABLE:
			case INSERT:
			case LANGUAGE:
			case LEAKPROOF:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLLBACK:
			case ROWS:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case STABLE:
			case START:
			case STRICT_P:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VOLATILE:
			case VALUES:
			case CALL:
			case TRANSFORM:
			case IMPORT_P:
			case END_P:
			case SUPPORT:
			case PARALLEL:
			case MetaCommand:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Nonreservedword_or_sconstContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Nonreservedword_or_sconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonreservedword_or_sconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNonreservedword_or_sconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNonreservedword_or_sconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNonreservedword_or_sconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nonreservedword_or_sconstContext nonreservedword_or_sconst() throws RecognitionException {
		Nonreservedword_or_sconstContext _localctx = new Nonreservedword_or_sconstContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_nonreservedword_or_sconst);
		try {
			setState(2018);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2016);
				nonreservedword();
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				setState(2017);
				sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VariableresetstmtContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public Reset_restContext reset_rest() {
			return getRuleContext(Reset_restContext.class,0);
		}
		public VariableresetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableresetstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVariableresetstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVariableresetstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVariableresetstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableresetstmtContext variableresetstmt() throws RecognitionException {
		VariableresetstmtContext _localctx = new VariableresetstmtContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_variableresetstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2020);
			match(RESET);
			setState(2021);
			reset_rest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reset_restContext extends ParserRuleContext {
		public Generic_resetContext generic_reset() {
			return getRuleContext(Generic_resetContext.class,0);
		}
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public Reset_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reset_rest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReset_rest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReset_rest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReset_rest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reset_restContext reset_rest() throws RecognitionException {
		Reset_restContext _localctx = new Reset_restContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_reset_rest);
		try {
			setState(2031);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2023);
				generic_reset();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2024);
				match(TIME);
				setState(2025);
				match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2026);
				match(TRANSACTION);
				setState(2027);
				match(ISOLATION);
				setState(2028);
				match(LEVEL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2029);
				match(SESSION);
				setState(2030);
				match(AUTHORIZATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Generic_resetContext extends ParserRuleContext {
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Generic_resetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_reset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_reset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_reset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_reset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_resetContext generic_reset() throws RecognitionException {
		Generic_resetContext _localctx = new Generic_resetContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_generic_reset);
		try {
			setState(2035);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2033);
				var_name();
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2034);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetresetclauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_restContext set_rest() {
			return getRuleContext(Set_restContext.class,0);
		}
		public VariableresetstmtContext variableresetstmt() {
			return getRuleContext(VariableresetstmtContext.class,0);
		}
		public SetresetclauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setresetclause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSetresetclause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSetresetclause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSetresetclause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetresetclauseContext setresetclause() throws RecognitionException {
		SetresetclauseContext _localctx = new SetresetclauseContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_setresetclause);
		try {
			setState(2040);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2037);
				match(SET);
				setState(2038);
				set_rest();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2039);
				variableresetstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionsetresetclauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_rest_moreContext set_rest_more() {
			return getRuleContext(Set_rest_moreContext.class,0);
		}
		public VariableresetstmtContext variableresetstmt() {
			return getRuleContext(VariableresetstmtContext.class,0);
		}
		public FunctionsetresetclauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionsetresetclause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunctionsetresetclause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunctionsetresetclause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunctionsetresetclause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionsetresetclauseContext functionsetresetclause() throws RecognitionException {
		FunctionsetresetclauseContext _localctx = new FunctionsetresetclauseContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_functionsetresetclause);
		try {
			setState(2045);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2042);
				match(SET);
				setState(2043);
				set_rest_more();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2044);
				variableresetstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VariableshowstmtContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(PostgreSQLParser.SHOW, 0); }
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public VariableshowstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableshowstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVariableshowstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVariableshowstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVariableshowstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableshowstmtContext variableshowstmt() throws RecognitionException {
		VariableshowstmtContext _localctx = new VariableshowstmtContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_variableshowstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2047);
			match(SHOW);
			setState(2057);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				setState(2048);
				var_name();
				}
				break;
			case 2:
				{
				setState(2049);
				match(TIME);
				setState(2050);
				match(ZONE);
				}
				break;
			case 3:
				{
				setState(2051);
				match(TRANSACTION);
				setState(2052);
				match(ISOLATION);
				setState(2053);
				match(LEVEL);
				}
				break;
			case 4:
				{
				setState(2054);
				match(SESSION);
				setState(2055);
				match(AUTHORIZATION);
				}
				break;
			case 5:
				{
				setState(2056);
				match(ALL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintssetstmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLParser.CONSTRAINTS, 0); }
		public Constraints_set_listContext constraints_set_list() {
			return getRuleContext(Constraints_set_listContext.class,0);
		}
		public Constraints_set_modeContext constraints_set_mode() {
			return getRuleContext(Constraints_set_modeContext.class,0);
		}
		public ConstraintssetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintssetstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraintssetstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraintssetstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraintssetstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintssetstmtContext constraintssetstmt() throws RecognitionException {
		ConstraintssetstmtContext _localctx = new ConstraintssetstmtContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_constraintssetstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2059);
			match(SET);
			setState(2060);
			match(CONSTRAINTS);
			setState(2061);
			constraints_set_list();
			setState(2062);
			constraints_set_mode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Constraints_set_listContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public Constraints_set_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraints_set_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraints_set_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraints_set_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraints_set_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraints_set_listContext constraints_set_list() throws RecognitionException {
		Constraints_set_listContext _localctx = new Constraints_set_listContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_constraints_set_list);
		try {
			setState(2066);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2064);
				match(ALL);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2065);
				qualified_name_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Constraints_set_modeContext extends ParserRuleContext {
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public Constraints_set_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraints_set_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraints_set_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraints_set_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraints_set_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraints_set_modeContext constraints_set_mode() throws RecognitionException {
		Constraints_set_modeContext _localctx = new Constraints_set_modeContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_constraints_set_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2068);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CheckpointstmtContext extends ParserRuleContext {
		public TerminalNode CHECKPOINT() { return getToken(PostgreSQLParser.CHECKPOINT, 0); }
		public CheckpointstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkpointstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCheckpointstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCheckpointstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCheckpointstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckpointstmtContext checkpointstmt() throws RecognitionException {
		CheckpointstmtContext _localctx = new CheckpointstmtContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_checkpointstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2070);
			match(CHECKPOINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DiscardstmtContext extends ParserRuleContext {
		public TerminalNode DISCARD() { return getToken(PostgreSQLParser.DISCARD, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode PLANS() { return getToken(PostgreSQLParser.PLANS, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public DiscardstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_discardstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDiscardstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDiscardstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDiscardstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiscardstmtContext discardstmt() throws RecognitionException {
		DiscardstmtContext _localctx = new DiscardstmtContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_discardstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2072);
			match(DISCARD);
			setState(2073);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==PLANS || _la==SEQUENCES || _la==TEMP || _la==TEMPORARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltertablestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Alter_table_cmdsContext alter_table_cmds() {
			return getRuleContext(Alter_table_cmdsContext.class,0);
		}
		public Partition_cmdContext partition_cmd() {
			return getRuleContext(Partition_cmdContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public List<TerminalNode> TABLESPACE() { return getTokens(PostgreSQLParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PostgreSQLParser.TABLESPACE, i);
		}
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Opt_nowaitContext opt_nowait() {
			return getRuleContext(Opt_nowaitContext.class,0);
		}
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Index_partition_cmdContext index_partition_cmd() {
			return getRuleContext(Index_partition_cmdContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public AltertablestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertablestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltertablestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltertablestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltertablestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltertablestmtContext altertablestmt() throws RecognitionException {
		AltertablestmtContext _localctx = new AltertablestmtContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_altertablestmt);
		int _la;
		try {
			setState(2184);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2075);
				match(ALTER);
				setState(2076);
				match(TABLE);
				setState(2079);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
				case 1:
					{
					setState(2077);
					match(IF_P);
					setState(2078);
					match(EXISTS);
					}
					break;
				}
				setState(2081);
				relation_expr();
				setState(2084);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NOT:
				case ADD_P:
				case ALTER:
				case CLUSTER:
				case DISABLE_P:
				case DROP:
				case ENABLE_P:
				case FORCE:
				case INHERIT:
				case NO:
				case OF:
				case OPTIONS:
				case OWNER:
				case REPLICA:
				case RESET:
				case SET:
				case VALIDATE:
					{
					setState(2082);
					alter_table_cmds();
					}
					break;
				case ATTACH:
				case DETACH:
					{
					setState(2083);
					partition_cmd();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2086);
				match(ALTER);
				setState(2087);
				match(TABLE);
				setState(2088);
				match(ALL);
				setState(2089);
				match(IN_P);
				setState(2090);
				match(TABLESPACE);
				setState(2091);
				name();
				setState(2095);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OWNED) {
					{
					setState(2092);
					match(OWNED);
					setState(2093);
					match(BY);
					setState(2094);
					role_list();
					}
				}

				setState(2097);
				match(SET);
				setState(2098);
				match(TABLESPACE);
				setState(2099);
				name();
				setState(2100);
				opt_nowait();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2102);
				match(ALTER);
				setState(2103);
				match(INDEX);
				setState(2106);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					setState(2104);
					match(IF_P);
					setState(2105);
					match(EXISTS);
					}
					break;
				}
				setState(2108);
				qualified_name();
				setState(2111);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NOT:
				case ADD_P:
				case ALTER:
				case CLUSTER:
				case DISABLE_P:
				case DROP:
				case ENABLE_P:
				case FORCE:
				case INHERIT:
				case NO:
				case OF:
				case OPTIONS:
				case OWNER:
				case REPLICA:
				case RESET:
				case SET:
				case VALIDATE:
					{
					setState(2109);
					alter_table_cmds();
					}
					break;
				case ATTACH:
					{
					setState(2110);
					index_partition_cmd();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2113);
				match(ALTER);
				setState(2114);
				match(INDEX);
				setState(2115);
				match(ALL);
				setState(2116);
				match(IN_P);
				setState(2117);
				match(TABLESPACE);
				setState(2118);
				name();
				setState(2122);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OWNED) {
					{
					setState(2119);
					match(OWNED);
					setState(2120);
					match(BY);
					setState(2121);
					role_list();
					}
				}

				setState(2124);
				match(SET);
				setState(2125);
				match(TABLESPACE);
				setState(2126);
				name();
				setState(2127);
				opt_nowait();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2129);
				match(ALTER);
				setState(2130);
				match(SEQUENCE);
				setState(2133);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					setState(2131);
					match(IF_P);
					setState(2132);
					match(EXISTS);
					}
					break;
				}
				setState(2135);
				qualified_name();
				setState(2136);
				alter_table_cmds();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2138);
				match(ALTER);
				setState(2139);
				match(VIEW);
				setState(2142);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
				case 1:
					{
					setState(2140);
					match(IF_P);
					setState(2141);
					match(EXISTS);
					}
					break;
				}
				setState(2144);
				qualified_name();
				setState(2145);
				alter_table_cmds();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2147);
				match(ALTER);
				setState(2148);
				match(MATERIALIZED);
				setState(2149);
				match(VIEW);
				setState(2152);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					setState(2150);
					match(IF_P);
					setState(2151);
					match(EXISTS);
					}
					break;
				}
				setState(2154);
				qualified_name();
				setState(2155);
				alter_table_cmds();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2157);
				match(ALTER);
				setState(2158);
				match(MATERIALIZED);
				setState(2159);
				match(VIEW);
				setState(2160);
				match(ALL);
				setState(2161);
				match(IN_P);
				setState(2162);
				match(TABLESPACE);
				setState(2163);
				name();
				setState(2167);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OWNED) {
					{
					setState(2164);
					match(OWNED);
					setState(2165);
					match(BY);
					setState(2166);
					role_list();
					}
				}

				setState(2169);
				match(SET);
				setState(2170);
				match(TABLESPACE);
				setState(2171);
				name();
				setState(2172);
				opt_nowait();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2174);
				match(ALTER);
				setState(2175);
				match(FOREIGN);
				setState(2176);
				match(TABLE);
				setState(2179);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					setState(2177);
					match(IF_P);
					setState(2178);
					match(EXISTS);
					}
					break;
				}
				setState(2181);
				relation_expr();
				setState(2182);
				alter_table_cmds();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_table_cmdsContext extends ParserRuleContext {
		public List<Alter_table_cmdContext> alter_table_cmd() {
			return getRuleContexts(Alter_table_cmdContext.class);
		}
		public Alter_table_cmdContext alter_table_cmd(int i) {
			return getRuleContext(Alter_table_cmdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_table_cmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_cmds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_table_cmds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_table_cmds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_table_cmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_cmdsContext alter_table_cmds() throws RecognitionException {
		Alter_table_cmdsContext _localctx = new Alter_table_cmdsContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_alter_table_cmds);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2186);
			alter_table_cmd();
			setState(2191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2187);
				match(COMMA);
				setState(2188);
				alter_table_cmd();
				}
				}
				setState(2193);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Partition_cmdContext extends ParserRuleContext {
		public TerminalNode ATTACH() { return getToken(PostgreSQLParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public PartitionboundspecContext partitionboundspec() {
			return getRuleContext(PartitionboundspecContext.class,0);
		}
		public TerminalNode DETACH() { return getToken(PostgreSQLParser.DETACH, 0); }
		public Partition_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPartition_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPartition_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPartition_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_cmdContext partition_cmd() throws RecognitionException {
		Partition_cmdContext _localctx = new Partition_cmdContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_partition_cmd);
		try {
			setState(2202);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ATTACH:
				enterOuterAlt(_localctx, 1);
				{
				setState(2194);
				match(ATTACH);
				setState(2195);
				match(PARTITION);
				setState(2196);
				qualified_name();
				setState(2197);
				partitionboundspec();
				}
				break;
			case DETACH:
				enterOuterAlt(_localctx, 2);
				{
				setState(2199);
				match(DETACH);
				setState(2200);
				match(PARTITION);
				setState(2201);
				qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_partition_cmdContext extends ParserRuleContext {
		public TerminalNode ATTACH() { return getToken(PostgreSQLParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Index_partition_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_partition_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_partition_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_partition_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_partition_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_partition_cmdContext index_partition_cmd() throws RecognitionException {
		Index_partition_cmdContext _localctx = new Index_partition_cmdContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_index_partition_cmd);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2204);
			match(ATTACH);
			setState(2205);
			match(PARTITION);
			setState(2206);
			qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_table_cmdContext extends ParserRuleContext {
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public Opt_columnContext opt_column() {
			return getRuleContext(Opt_columnContext.class,0);
		}
		public List<ColidContext> colid() {
			return getRuleContexts(ColidContext.class);
		}
		public ColidContext colid(int i) {
			return getRuleContext(ColidContext.class,i);
		}
		public Alter_column_defaultContext alter_column_default() {
			return getRuleContext(Alter_column_defaultContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode EXPRESSION() { return getToken(PostgreSQLParser.EXPRESSION, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public Generated_whenContext generated_when() {
			return getRuleContext(Generated_whenContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
			return getRuleContext(OptparenthesizedseqoptlistContext.class,0);
		}
		public Alter_identity_column_option_listContext alter_identity_column_option_list() {
			return getRuleContext(Alter_identity_column_option_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public Opt_set_dataContext opt_set_data() {
			return getRuleContext(Opt_set_dataContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public Alter_usingContext alter_using() {
			return getRuleContext(Alter_usingContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public TableconstraintContext tableconstraint() {
			return getRuleContext(TableconstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ConstraintattributespecContext constraintattributespec() {
			return getRuleContext(ConstraintattributespecContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(PostgreSQLParser.VALIDATE, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLParser.OIDS, 0); }
		public TerminalNode CLUSTER() { return getToken(PostgreSQLParser.CLUSTER, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode LOGGED() { return getToken(PostgreSQLParser.LOGGED, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public TerminalNode ENABLE_P() { return getToken(PostgreSQLParser.ENABLE_P, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLParser.REPLICA, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode DISABLE_P() { return getToken(PostgreSQLParser.DISABLE_P, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public Replica_identityContext replica_identity() {
			return getRuleContext(Replica_identityContext.class,0);
		}
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public Alter_table_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_table_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_table_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_table_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_cmdContext alter_table_cmd() throws RecognitionException {
		Alter_table_cmdContext _localctx = new Alter_table_cmdContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_alter_table_cmd);
		try {
			setState(2460);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2208);
				match(ADD_P);
				setState(2209);
				columnDef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2210);
				match(ADD_P);
				setState(2211);
				match(IF_P);
				setState(2212);
				match(NOT);
				setState(2213);
				match(EXISTS);
				setState(2214);
				columnDef();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2215);
				match(ADD_P);
				setState(2216);
				match(COLUMN);
				setState(2217);
				columnDef();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2218);
				match(ADD_P);
				setState(2219);
				match(COLUMN);
				setState(2220);
				match(IF_P);
				setState(2221);
				match(NOT);
				setState(2222);
				match(EXISTS);
				setState(2223);
				columnDef();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2224);
				match(ALTER);
				setState(2225);
				opt_column();
				setState(2226);
				colid();
				setState(2227);
				alter_column_default();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2229);
				match(ALTER);
				setState(2230);
				opt_column();
				setState(2231);
				colid();
				setState(2232);
				match(DROP);
				setState(2233);
				match(NOT);
				setState(2234);
				match(NULL_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2236);
				match(ALTER);
				setState(2237);
				opt_column();
				setState(2238);
				colid();
				setState(2239);
				match(SET);
				setState(2240);
				match(NOT);
				setState(2241);
				match(NULL_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2243);
				match(ALTER);
				setState(2244);
				opt_column();
				setState(2245);
				colid();
				setState(2246);
				match(DROP);
				setState(2247);
				match(EXPRESSION);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2249);
				match(ALTER);
				setState(2250);
				opt_column();
				setState(2251);
				colid();
				setState(2252);
				match(DROP);
				setState(2253);
				match(EXPRESSION);
				setState(2254);
				match(IF_P);
				setState(2255);
				match(EXISTS);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2257);
				match(ALTER);
				setState(2258);
				opt_column();
				setState(2259);
				colid();
				setState(2260);
				match(SET);
				setState(2261);
				match(STATISTICS);
				setState(2262);
				signediconst();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2264);
				match(ALTER);
				setState(2265);
				opt_column();
				setState(2266);
				iconst();
				setState(2267);
				match(SET);
				setState(2268);
				match(STATISTICS);
				setState(2269);
				signediconst();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2271);
				match(ALTER);
				setState(2272);
				opt_column();
				setState(2273);
				colid();
				setState(2274);
				match(SET);
				setState(2275);
				reloptions();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2277);
				match(ALTER);
				setState(2278);
				opt_column();
				setState(2279);
				colid();
				setState(2280);
				match(RESET);
				setState(2281);
				reloptions();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2283);
				match(ALTER);
				setState(2284);
				opt_column();
				setState(2285);
				colid();
				setState(2286);
				match(SET);
				setState(2287);
				match(STORAGE);
				setState(2288);
				colid();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2290);
				match(ALTER);
				setState(2291);
				opt_column();
				setState(2292);
				colid();
				setState(2293);
				match(ADD_P);
				setState(2294);
				match(GENERATED);
				setState(2295);
				generated_when();
				setState(2296);
				match(AS);
				setState(2297);
				match(IDENTITY_P);
				setState(2298);
				optparenthesizedseqoptlist();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2300);
				match(ALTER);
				setState(2301);
				opt_column();
				setState(2302);
				colid();
				setState(2303);
				alter_identity_column_option_list();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2305);
				match(ALTER);
				setState(2306);
				opt_column();
				setState(2307);
				colid();
				setState(2308);
				match(DROP);
				setState(2309);
				match(IDENTITY_P);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2311);
				match(ALTER);
				setState(2312);
				opt_column();
				setState(2313);
				colid();
				setState(2314);
				match(DROP);
				setState(2315);
				match(IDENTITY_P);
				setState(2316);
				match(IF_P);
				setState(2317);
				match(EXISTS);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2319);
				match(DROP);
				setState(2320);
				opt_column();
				setState(2321);
				match(IF_P);
				setState(2322);
				match(EXISTS);
				setState(2323);
				colid();
				setState(2324);
				opt_drop_behavior();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2326);
				match(DROP);
				setState(2327);
				opt_column();
				setState(2328);
				colid();
				setState(2329);
				opt_drop_behavior();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2331);
				match(ALTER);
				setState(2332);
				opt_column();
				setState(2333);
				colid();
				setState(2334);
				opt_set_data();
				setState(2335);
				match(TYPE_P);
				setState(2336);
				typename();
				setState(2337);
				opt_collate_clause();
				setState(2338);
				alter_using();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2340);
				match(ALTER);
				setState(2341);
				opt_column();
				setState(2342);
				colid();
				setState(2343);
				alter_generic_options();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2345);
				match(ADD_P);
				setState(2346);
				tableconstraint();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(2347);
				match(ALTER);
				setState(2348);
				match(CONSTRAINT);
				setState(2349);
				name();
				setState(2350);
				constraintattributespec();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(2352);
				match(VALIDATE);
				setState(2353);
				match(CONSTRAINT);
				setState(2354);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(2355);
				match(DROP);
				setState(2356);
				match(CONSTRAINT);
				setState(2357);
				match(IF_P);
				setState(2358);
				match(EXISTS);
				setState(2359);
				name();
				setState(2360);
				opt_drop_behavior();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(2362);
				match(DROP);
				setState(2363);
				match(CONSTRAINT);
				setState(2364);
				name();
				setState(2365);
				opt_drop_behavior();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(2367);
				match(SET);
				setState(2368);
				match(WITHOUT);
				setState(2369);
				match(OIDS);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(2370);
				match(CLUSTER);
				setState(2371);
				match(ON);
				setState(2372);
				name();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(2373);
				match(SET);
				setState(2374);
				match(WITHOUT);
				setState(2375);
				match(CLUSTER);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(2376);
				match(SET);
				setState(2377);
				match(LOGGED);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(2378);
				match(SET);
				setState(2379);
				match(UNLOGGED);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(2380);
				match(ENABLE_P);
				setState(2381);
				match(TRIGGER);
				setState(2382);
				name();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(2383);
				match(ENABLE_P);
				setState(2384);
				match(ALWAYS);
				setState(2385);
				match(TRIGGER);
				setState(2386);
				name();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(2387);
				match(ENABLE_P);
				setState(2388);
				match(REPLICA);
				setState(2389);
				match(TRIGGER);
				setState(2390);
				name();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(2391);
				match(ENABLE_P);
				setState(2392);
				match(TRIGGER);
				setState(2393);
				match(ALL);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(2394);
				match(ENABLE_P);
				setState(2395);
				match(TRIGGER);
				setState(2396);
				match(USER);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(2397);
				match(DISABLE_P);
				setState(2398);
				match(TRIGGER);
				setState(2399);
				name();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(2400);
				match(DISABLE_P);
				setState(2401);
				match(TRIGGER);
				setState(2402);
				match(ALL);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(2403);
				match(DISABLE_P);
				setState(2404);
				match(TRIGGER);
				setState(2405);
				match(USER);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(2406);
				match(ENABLE_P);
				setState(2407);
				match(RULE);
				setState(2408);
				name();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(2409);
				match(ENABLE_P);
				setState(2410);
				match(ALWAYS);
				setState(2411);
				match(RULE);
				setState(2412);
				name();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(2413);
				match(ENABLE_P);
				setState(2414);
				match(REPLICA);
				setState(2415);
				match(RULE);
				setState(2416);
				name();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(2417);
				match(DISABLE_P);
				setState(2418);
				match(RULE);
				setState(2419);
				name();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(2420);
				match(INHERIT);
				setState(2421);
				qualified_name();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(2422);
				match(NO);
				setState(2423);
				match(INHERIT);
				setState(2424);
				qualified_name();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(2425);
				match(OF);
				setState(2426);
				any_name();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(2427);
				match(NOT);
				setState(2428);
				match(OF);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(2429);
				match(OWNER);
				setState(2430);
				match(TO);
				setState(2431);
				rolespec();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(2432);
				match(SET);
				setState(2433);
				match(TABLESPACE);
				setState(2434);
				name();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(2435);
				match(SET);
				setState(2436);
				reloptions();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(2437);
				match(RESET);
				setState(2438);
				reloptions();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(2439);
				match(REPLICA);
				setState(2440);
				match(IDENTITY_P);
				setState(2441);
				replica_identity();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(2442);
				match(ENABLE_P);
				setState(2443);
				match(ROW);
				setState(2444);
				match(LEVEL);
				setState(2445);
				match(SECURITY);
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(2446);
				match(DISABLE_P);
				setState(2447);
				match(ROW);
				setState(2448);
				match(LEVEL);
				setState(2449);
				match(SECURITY);
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(2450);
				match(FORCE);
				setState(2451);
				match(ROW);
				setState(2452);
				match(LEVEL);
				setState(2453);
				match(SECURITY);
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(2454);
				match(NO);
				setState(2455);
				match(FORCE);
				setState(2456);
				match(ROW);
				setState(2457);
				match(LEVEL);
				setState(2458);
				match(SECURITY);
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(2459);
				alter_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_column_defaultContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Alter_column_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_column_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_column_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_column_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_column_defaultContext alter_column_default() throws RecognitionException {
		Alter_column_defaultContext _localctx = new Alter_column_defaultContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_alter_column_default);
		try {
			setState(2467);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2462);
				match(SET);
				setState(2463);
				match(DEFAULT);
				setState(2464);
				a_expr();
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2465);
				match(DROP);
				setState(2466);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_drop_behaviorContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Opt_drop_behaviorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_drop_behavior; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_drop_behavior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_drop_behavior(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_drop_behavior(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_drop_behaviorContext opt_drop_behavior() throws RecognitionException {
		Opt_drop_behaviorContext _localctx = new Opt_drop_behaviorContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_opt_drop_behavior);
		try {
			setState(2472);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASCADE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2469);
				match(CASCADE);
				}
				break;
			case RESTRICT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2470);
				match(RESTRICT);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_collate_clauseContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_collate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_collate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_collate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_collate_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_collate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_collate_clauseContext opt_collate_clause() throws RecognitionException {
		Opt_collate_clauseContext _localctx = new Opt_collate_clauseContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_opt_collate_clause);
		try {
			setState(2477);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLLATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2474);
				match(COLLATE);
				setState(2475);
				any_name();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CASCADE:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Alter_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_usingContext alter_using() throws RecognitionException {
		Alter_usingContext _localctx = new Alter_usingContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_alter_using);
		try {
			setState(2482);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2479);
				match(USING);
				setState(2480);
				a_expr();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Replica_identityContext extends ParserRuleContext {
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Replica_identityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replica_identity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReplica_identity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReplica_identity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReplica_identity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Replica_identityContext replica_identity() throws RecognitionException {
		Replica_identityContext _localctx = new Replica_identityContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_replica_identity);
		try {
			setState(2490);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOTHING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2484);
				match(NOTHING);
				}
				break;
			case FULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2485);
				match(FULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2486);
				match(DEFAULT);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 4);
				{
				setState(2487);
				match(USING);
				setState(2488);
				match(INDEX);
				setState(2489);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReloptionsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Reloption_listContext reloption_list() {
			return getRuleContext(Reloption_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ReloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReloptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReloptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReloptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionsContext reloptions() throws RecognitionException {
		ReloptionsContext _localctx = new ReloptionsContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_reloptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2492);
			match(OPEN_PAREN);
			setState(2493);
			reloption_list();
			setState(2494);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_reloptionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public Opt_reloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_reloptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_reloptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_reloptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_reloptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_reloptionsContext opt_reloptions() throws RecognitionException {
		Opt_reloptionsContext _localctx = new Opt_reloptionsContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_opt_reloptions);
		try {
			setState(2499);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2496);
				match(WITH);
				setState(2497);
				reloptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reloption_listContext extends ParserRuleContext {
		public List<Reloption_elemContext> reloption_elem() {
			return getRuleContexts(Reloption_elemContext.class);
		}
		public Reloption_elemContext reloption_elem(int i) {
			return getRuleContext(Reloption_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Reloption_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloption_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReloption_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReloption_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReloption_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reloption_listContext reloption_list() throws RecognitionException {
		Reloption_listContext _localctx = new Reloption_listContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_reloption_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2501);
			reloption_elem();
			setState(2506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2502);
				match(COMMA);
				setState(2503);
				reloption_elem();
				}
				}
				setState(2508);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reloption_elemContext extends ParserRuleContext {
		public List<CollabelContext> collabel() {
			return getRuleContexts(CollabelContext.class);
		}
		public CollabelContext collabel(int i) {
			return getRuleContext(CollabelContext.class,i);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public TerminalNode DOT() { return getToken(PostgreSQLParser.DOT, 0); }
		public Reloption_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloption_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReloption_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReloption_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReloption_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reloption_elemContext reloption_elem() throws RecognitionException {
		Reloption_elemContext _localctx = new Reloption_elemContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_reloption_elem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2509);
			collabel();
			setState(2518);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
				{
				setState(2510);
				match(EQUAL);
				setState(2511);
				def_arg();
				}
				break;
			case DOT:
				{
				setState(2512);
				match(DOT);
				setState(2513);
				collabel();
				setState(2516);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL) {
					{
					setState(2514);
					match(EQUAL);
					setState(2515);
					def_arg();
					}
				}

				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_identity_column_option_listContext extends ParserRuleContext {
		public List<Alter_identity_column_optionContext> alter_identity_column_option() {
			return getRuleContexts(Alter_identity_column_optionContext.class);
		}
		public Alter_identity_column_optionContext alter_identity_column_option(int i) {
			return getRuleContext(Alter_identity_column_optionContext.class,i);
		}
		public Alter_identity_column_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_identity_column_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_identity_column_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_identity_column_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_identity_column_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_identity_column_option_listContext alter_identity_column_option_list() throws RecognitionException {
		Alter_identity_column_option_listContext _localctx = new Alter_identity_column_option_listContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_alter_identity_column_option_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2521); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2520);
					alter_identity_column_option();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2523); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,59,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_identity_column_optionContext extends ParserRuleContext {
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public SeqoptelemContext seqoptelem() {
			return getRuleContext(SeqoptelemContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public Generated_whenContext generated_when() {
			return getRuleContext(Generated_whenContext.class,0);
		}
		public Alter_identity_column_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_identity_column_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_identity_column_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_identity_column_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_identity_column_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_identity_column_optionContext alter_identity_column_option() throws RecognitionException {
		Alter_identity_column_optionContext _localctx = new Alter_identity_column_optionContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_alter_identity_column_option);
		try {
			setState(2537);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTART:
				enterOuterAlt(_localctx, 1);
				{
				setState(2525);
				match(RESTART);
				setState(2529);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
				case 1:
					{
					setState(2526);
					opt_with();
					setState(2527);
					numericonly();
					}
					break;
				}
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2531);
				match(SET);
				setState(2535);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AS:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NO:
				case OWNED:
				case RESTART:
				case SEQUENCE:
				case START:
					{
					setState(2532);
					seqoptelem();
					}
					break;
				case GENERATED:
					{
					setState(2533);
					match(GENERATED);
					setState(2534);
					generated_when();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionboundspecContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public Hash_partboundContext hash_partbound() {
			return getRuleContext(Hash_partboundContext.class,0);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public List<Expr_listContext> expr_list() {
			return getRuleContexts(Expr_listContext.class);
		}
		public Expr_listContext expr_list(int i) {
			return getRuleContext(Expr_listContext.class,i);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public PartitionboundspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionboundspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPartitionboundspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPartitionboundspec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPartitionboundspec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionboundspecContext partitionboundspec() throws RecognitionException {
		PartitionboundspecContext _localctx = new PartitionboundspecContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_partitionboundspec);
		try {
			setState(2565);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2539);
				match(FOR);
				setState(2540);
				match(VALUES);
				setState(2541);
				match(WITH);
				setState(2542);
				match(OPEN_PAREN);
				setState(2543);
				hash_partbound();
				setState(2544);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2546);
				match(FOR);
				setState(2547);
				match(VALUES);
				setState(2548);
				match(IN_P);
				setState(2549);
				match(OPEN_PAREN);
				setState(2550);
				expr_list();
				setState(2551);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2553);
				match(FOR);
				setState(2554);
				match(VALUES);
				setState(2555);
				match(FROM);
				setState(2556);
				match(OPEN_PAREN);
				setState(2557);
				expr_list();
				setState(2558);
				match(CLOSE_PAREN);
				setState(2559);
				match(TO);
				setState(2560);
				match(OPEN_PAREN);
				setState(2561);
				expr_list();
				setState(2562);
				match(CLOSE_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2564);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Hash_partbound_elemContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Hash_partbound_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partbound_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterHash_partbound_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitHash_partbound_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitHash_partbound_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hash_partbound_elemContext hash_partbound_elem() throws RecognitionException {
		Hash_partbound_elemContext _localctx = new Hash_partbound_elemContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_hash_partbound_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2567);
			nonreservedword();
			setState(2568);
			iconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Hash_partboundContext extends ParserRuleContext {
		public List<Hash_partbound_elemContext> hash_partbound_elem() {
			return getRuleContexts(Hash_partbound_elemContext.class);
		}
		public Hash_partbound_elemContext hash_partbound_elem(int i) {
			return getRuleContext(Hash_partbound_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Hash_partboundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partbound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterHash_partbound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitHash_partbound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitHash_partbound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hash_partboundContext hash_partbound() throws RecognitionException {
		Hash_partboundContext _localctx = new Hash_partboundContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_hash_partbound);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2570);
			hash_partbound_elem();
			setState(2575);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2571);
				match(COMMA);
				setState(2572);
				hash_partbound_elem();
				}
				}
				setState(2577);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltercompositetypestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Alter_type_cmdsContext alter_type_cmds() {
			return getRuleContext(Alter_type_cmdsContext.class,0);
		}
		public AltercompositetypestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altercompositetypestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltercompositetypestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltercompositetypestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltercompositetypestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltercompositetypestmtContext altercompositetypestmt() throws RecognitionException {
		AltercompositetypestmtContext _localctx = new AltercompositetypestmtContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_altercompositetypestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2578);
			match(ALTER);
			setState(2579);
			match(TYPE_P);
			setState(2580);
			any_name();
			setState(2581);
			alter_type_cmds();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_type_cmdsContext extends ParserRuleContext {
		public List<Alter_type_cmdContext> alter_type_cmd() {
			return getRuleContexts(Alter_type_cmdContext.class);
		}
		public Alter_type_cmdContext alter_type_cmd(int i) {
			return getRuleContext(Alter_type_cmdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_type_cmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_cmds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_type_cmds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_type_cmds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_type_cmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_type_cmdsContext alter_type_cmds() throws RecognitionException {
		Alter_type_cmdsContext _localctx = new Alter_type_cmdsContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_alter_type_cmds);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2583);
			alter_type_cmd();
			setState(2588);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2584);
				match(COMMA);
				setState(2585);
				alter_type_cmd();
				}
				}
				setState(2590);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_type_cmdContext extends ParserRuleContext {
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLParser.ATTRIBUTE, 0); }
		public TablefuncelementContext tablefuncelement() {
			return getRuleContext(TablefuncelementContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public Opt_set_dataContext opt_set_data() {
			return getRuleContext(Opt_set_dataContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public Alter_type_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_type_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_type_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_type_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_type_cmdContext alter_type_cmd() throws RecognitionException {
		Alter_type_cmdContext _localctx = new Alter_type_cmdContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_alter_type_cmd);
		try {
			setState(2614);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(2591);
				match(ADD_P);
				setState(2592);
				match(ATTRIBUTE);
				setState(2593);
				tablefuncelement();
				setState(2594);
				opt_drop_behavior();
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2596);
				match(DROP);
				setState(2597);
				match(ATTRIBUTE);
				setState(2600);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
				case 1:
					{
					setState(2598);
					match(IF_P);
					setState(2599);
					match(EXISTS);
					}
					break;
				}
				setState(2602);
				colid();
				setState(2603);
				opt_drop_behavior();
				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 3);
				{
				setState(2605);
				match(ALTER);
				setState(2606);
				match(ATTRIBUTE);
				setState(2607);
				colid();
				setState(2608);
				opt_set_data();
				setState(2609);
				match(TYPE_P);
				setState(2610);
				typename();
				setState(2611);
				opt_collate_clause();
				setState(2612);
				opt_drop_behavior();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CloseportalstmtContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(PostgreSQLParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public CloseportalstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_closeportalstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCloseportalstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCloseportalstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCloseportalstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloseportalstmtContext closeportalstmt() throws RecognitionException {
		CloseportalstmtContext _localctx = new CloseportalstmtContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_closeportalstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2616);
			match(CLOSE);
			setState(2619);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				setState(2617);
				cursor_name();
				}
				break;
			case ALL:
				{
				setState(2618);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CopystmtContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(PostgreSQLParser.COPY, 0); }
		public Opt_binaryContext opt_binary() {
			return getRuleContext(Opt_binaryContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Copy_fromContext copy_from() {
			return getRuleContext(Copy_fromContext.class,0);
		}
		public Opt_programContext opt_program() {
			return getRuleContext(Opt_programContext.class,0);
		}
		public Copy_file_nameContext copy_file_name() {
			return getRuleContext(Copy_file_nameContext.class,0);
		}
		public Copy_delimiterContext copy_delimiter() {
			return getRuleContext(Copy_delimiterContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public Copy_optionsContext copy_options() {
			return getRuleContext(Copy_optionsContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public PreparablestmtContext preparablestmt() {
			return getRuleContext(PreparablestmtContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public CopystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopystmtContext copystmt() throws RecognitionException {
		CopystmtContext _localctx = new CopystmtContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_copystmt);
		try {
			setState(2643);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2621);
				match(COPY);
				setState(2622);
				opt_binary();
				setState(2623);
				qualified_name();
				setState(2624);
				opt_column_list();
				setState(2625);
				copy_from();
				setState(2626);
				opt_program();
				setState(2627);
				copy_file_name();
				setState(2628);
				copy_delimiter();
				setState(2629);
				opt_with();
				setState(2630);
				copy_options();
				setState(2631);
				where_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2633);
				match(COPY);
				setState(2634);
				match(OPEN_PAREN);
				setState(2635);
				preparablestmt();
				setState(2636);
				match(CLOSE_PAREN);
				setState(2637);
				match(TO);
				setState(2638);
				opt_program();
				setState(2639);
				copy_file_name();
				setState(2640);
				opt_with();
				setState(2641);
				copy_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_fromContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Copy_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_from; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_from(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_from(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_from(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_fromContext copy_from() throws RecognitionException {
		Copy_fromContext _localctx = new Copy_fromContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_copy_from);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2645);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_programContext extends ParserRuleContext {
		public TerminalNode PROGRAM() { return getToken(PostgreSQLParser.PROGRAM, 0); }
		public Opt_programContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_program; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_program(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_program(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_program(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_programContext opt_program() throws RecognitionException {
		Opt_programContext _localctx = new Opt_programContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_opt_program);
		try {
			setState(2649);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROGRAM:
				enterOuterAlt(_localctx, 1);
				{
				setState(2647);
				match(PROGRAM);
				}
				break;
			case STDIN:
			case STDOUT:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_file_nameContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode STDIN() { return getToken(PostgreSQLParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PostgreSQLParser.STDOUT, 0); }
		public Copy_file_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_file_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_file_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_file_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_file_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_file_nameContext copy_file_name() throws RecognitionException {
		Copy_file_nameContext _localctx = new Copy_file_nameContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_copy_file_name);
		try {
			setState(2654);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(2651);
				sconst();
				}
				break;
			case STDIN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2652);
				match(STDIN);
				}
				break;
			case STDOUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2653);
				match(STDOUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_optionsContext extends ParserRuleContext {
		public Copy_opt_listContext copy_opt_list() {
			return getRuleContext(Copy_opt_listContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Copy_generic_opt_listContext copy_generic_opt_list() {
			return getRuleContext(Copy_generic_opt_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Copy_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_optionsContext copy_options() throws RecognitionException {
		Copy_optionsContext _localctx = new Copy_optionsContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_copy_options);
		try {
			setState(2661);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2656);
				copy_opt_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2657);
				match(OPEN_PAREN);
				setState(2658);
				copy_generic_opt_list();
				setState(2659);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_opt_listContext extends ParserRuleContext {
		public List<Copy_opt_itemContext> copy_opt_item() {
			return getRuleContexts(Copy_opt_itemContext.class);
		}
		public Copy_opt_itemContext copy_opt_item(int i) {
			return getRuleContext(Copy_opt_itemContext.class,i);
		}
		public Copy_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_opt_listContext copy_opt_list() throws RecognitionException {
		Copy_opt_listContext _localctx = new Copy_opt_listContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_copy_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2666);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 17716740097L) != 0) || ((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & 35459325497345L) != 0) || _la==QUOTE) {
				{
				{
				setState(2663);
				copy_opt_item();
				}
				}
				setState(2668);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_opt_itemContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(PostgreSQLParser.BINARY, 0); }
		public TerminalNode FREEZE() { return getToken(PostgreSQLParser.FREEZE, 0); }
		public TerminalNode DELIMITER() { return getToken(PostgreSQLParser.DELIMITER, 0); }
		public Opt_asContext opt_as() {
			return getRuleContext(Opt_asContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode CSV() { return getToken(PostgreSQLParser.CSV, 0); }
		public TerminalNode HEADER_P() { return getToken(PostgreSQLParser.HEADER_P, 0); }
		public TerminalNode QUOTE() { return getToken(PostgreSQLParser.QUOTE, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLParser.ENCODING, 0); }
		public Copy_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_opt_itemContext copy_opt_item() throws RecognitionException {
		Copy_opt_itemContext _localctx = new Copy_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_copy_opt_item);
		try {
			setState(2704);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2669);
				match(BINARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2670);
				match(FREEZE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2671);
				match(DELIMITER);
				setState(2672);
				opt_as();
				setState(2673);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2675);
				match(NULL_P);
				setState(2676);
				opt_as();
				setState(2677);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2679);
				match(CSV);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2680);
				match(HEADER_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2681);
				match(QUOTE);
				setState(2682);
				opt_as();
				setState(2683);
				sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2685);
				match(ESCAPE);
				setState(2686);
				opt_as();
				setState(2687);
				sconst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2689);
				match(FORCE);
				setState(2690);
				match(QUOTE);
				setState(2691);
				columnlist();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2692);
				match(FORCE);
				setState(2693);
				match(QUOTE);
				setState(2694);
				match(STAR);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2695);
				match(FORCE);
				setState(2696);
				match(NOT);
				setState(2697);
				match(NULL_P);
				setState(2698);
				columnlist();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2699);
				match(FORCE);
				setState(2700);
				match(NULL_P);
				setState(2701);
				columnlist();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2702);
				match(ENCODING);
				setState(2703);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_binaryContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(PostgreSQLParser.BINARY, 0); }
		public Opt_binaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_binary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_binary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_binary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_binary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_binaryContext opt_binary() throws RecognitionException {
		Opt_binaryContext _localctx = new Opt_binaryContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_opt_binary);
		try {
			setState(2708);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2706);
				match(BINARY);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_delimiterContext extends ParserRuleContext {
		public Opt_usingContext opt_using() {
			return getRuleContext(Opt_usingContext.class,0);
		}
		public TerminalNode DELIMITERS() { return getToken(PostgreSQLParser.DELIMITERS, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Copy_delimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_delimiter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_delimiter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_delimiter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_delimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_delimiterContext copy_delimiter() throws RecognitionException {
		Copy_delimiterContext _localctx = new Copy_delimiterContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_copy_delimiter);
		try {
			setState(2715);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
			case DELIMITERS:
				enterOuterAlt(_localctx, 1);
				{
				setState(2710);
				opt_using();
				setState(2711);
				match(DELIMITERS);
				setState(2712);
				sconst();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case NULL_P:
			case SELECT:
			case TABLE:
			case WHERE:
			case WITH:
			case BINARY:
			case FREEZE:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case CSV:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DELIMITER:
			case DISCARD:
			case DROP:
			case ENCODING:
			case ESCAPE:
			case EXECUTE:
			case EXPLAIN:
			case FORCE:
			case HEADER_P:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case QUOTE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Opt_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_usingContext opt_using() throws RecognitionException {
		Opt_usingContext _localctx = new Opt_usingContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_opt_using);
		try {
			setState(2719);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2717);
				match(USING);
				}
				break;
			case DELIMITERS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_generic_opt_listContext extends ParserRuleContext {
		public List<Copy_generic_opt_elemContext> copy_generic_opt_elem() {
			return getRuleContexts(Copy_generic_opt_elemContext.class);
		}
		public Copy_generic_opt_elemContext copy_generic_opt_elem(int i) {
			return getRuleContext(Copy_generic_opt_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Copy_generic_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_generic_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_generic_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_generic_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_listContext copy_generic_opt_list() throws RecognitionException {
		Copy_generic_opt_listContext _localctx = new Copy_generic_opt_listContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_copy_generic_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2721);
			copy_generic_opt_elem();
			setState(2726);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2722);
				match(COMMA);
				setState(2723);
				copy_generic_opt_elem();
				}
				}
				setState(2728);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_generic_opt_elemContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Copy_generic_opt_argContext copy_generic_opt_arg() {
			return getRuleContext(Copy_generic_opt_argContext.class,0);
		}
		public Copy_generic_opt_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_generic_opt_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_generic_opt_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_generic_opt_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_elemContext copy_generic_opt_elem() throws RecognitionException {
		Copy_generic_opt_elemContext _localctx = new Copy_generic_opt_elemContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_copy_generic_opt_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2729);
			collabel();
			setState(2730);
			copy_generic_opt_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_generic_opt_argContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
			return getRuleContext(Copy_generic_opt_arg_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Copy_generic_opt_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_generic_opt_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_generic_opt_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_generic_opt_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_argContext copy_generic_opt_arg() throws RecognitionException {
		Copy_generic_opt_argContext _localctx = new Copy_generic_opt_argContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_copy_generic_opt_arg);
		try {
			setState(2740);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(2732);
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(2733);
				numericonly();
				}
				break;
			case STAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(2734);
				match(STAR);
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 4);
				{
				setState(2735);
				match(OPEN_PAREN);
				setState(2736);
				copy_generic_opt_arg_list();
				setState(2737);
				match(CLOSE_PAREN);
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_generic_opt_arg_listContext extends ParserRuleContext {
		public List<Copy_generic_opt_arg_list_itemContext> copy_generic_opt_arg_list_item() {
			return getRuleContexts(Copy_generic_opt_arg_list_itemContext.class);
		}
		public Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item(int i) {
			return getRuleContext(Copy_generic_opt_arg_list_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Copy_generic_opt_arg_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_generic_opt_arg_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_generic_opt_arg_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_generic_opt_arg_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() throws RecognitionException {
		Copy_generic_opt_arg_listContext _localctx = new Copy_generic_opt_arg_listContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_copy_generic_opt_arg_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2742);
			copy_generic_opt_arg_list_item();
			setState(2747);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2743);
				match(COMMA);
				setState(2744);
				copy_generic_opt_arg_list_item();
				}
				}
				setState(2749);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_generic_opt_arg_list_itemContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public Copy_generic_opt_arg_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg_list_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_generic_opt_arg_list_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_generic_opt_arg_list_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_generic_opt_arg_list_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item() throws RecognitionException {
		Copy_generic_opt_arg_list_itemContext _localctx = new Copy_generic_opt_arg_list_itemContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_copy_generic_opt_arg_list_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2750);
			opt_boolean_or_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public OpttableelementlistContext opttableelementlist() {
			return getRuleContext(OpttableelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptinheritContext optinherit() {
			return getRuleContext(OptinheritContext.class,0);
		}
		public OptpartitionspecContext optpartitionspec() {
			return getRuleContext(OptpartitionspecContext.class,0);
		}
		public Table_access_method_clauseContext table_access_method_clause() {
			return getRuleContext(Table_access_method_clauseContext.class,0);
		}
		public OptwithContext optwith() {
			return getRuleContext(OptwithContext.class,0);
		}
		public OncommitoptionContext oncommitoption() {
			return getRuleContext(OncommitoptionContext.class,0);
		}
		public OpttablespaceContext opttablespace() {
			return getRuleContext(OpttablespaceContext.class,0);
		}
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public OpttypedtableelementlistContext opttypedtableelementlist() {
			return getRuleContext(OpttypedtableelementlistContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public PartitionboundspecContext partitionboundspec() {
			return getRuleContext(PartitionboundspecContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreatestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatestmtContext createstmt() throws RecognitionException {
		CreatestmtContext _localctx = new CreatestmtContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_createstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2752);
			match(CREATE);
			setState(2753);
			opttemp();
			setState(2754);
			match(TABLE);
			setState(2758);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
			case 1:
				{
				setState(2755);
				match(IF_P);
				setState(2756);
				match(NOT);
				setState(2757);
				match(EXISTS);
				}
				break;
			}
			setState(2760);
			qualified_name();
			setState(2791);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				{
				setState(2761);
				match(OPEN_PAREN);
				setState(2762);
				opttableelementlist();
				setState(2763);
				match(CLOSE_PAREN);
				setState(2764);
				optinherit();
				setState(2765);
				optpartitionspec();
				setState(2766);
				table_access_method_clause();
				setState(2767);
				optwith();
				setState(2768);
				oncommitoption();
				setState(2769);
				opttablespace();
				}
				break;
			case OF:
				{
				setState(2771);
				match(OF);
				setState(2772);
				any_name();
				setState(2773);
				opttypedtableelementlist();
				setState(2774);
				optpartitionspec();
				setState(2775);
				table_access_method_clause();
				setState(2776);
				optwith();
				setState(2777);
				oncommitoption();
				setState(2778);
				opttablespace();
				}
				break;
			case PARTITION:
				{
				setState(2780);
				match(PARTITION);
				setState(2781);
				match(OF);
				setState(2782);
				qualified_name();
				setState(2783);
				opttypedtableelementlist();
				setState(2784);
				partitionboundspec();
				setState(2785);
				optpartitionspec();
				setState(2786);
				table_access_method_clause();
				setState(2787);
				optwith();
				setState(2788);
				oncommitoption();
				setState(2789);
				opttablespace();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpttempContext extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public OpttempContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttemp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttemp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttemp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttemp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttempContext opttemp() throws RecognitionException {
		OpttempContext _localctx = new OpttempContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_opttemp);
		int _la;
		try {
			setState(2801);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TEMPORARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2793);
				match(TEMPORARY);
				}
				break;
			case TEMP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2794);
				match(TEMP);
				}
				break;
			case LOCAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2795);
				match(LOCAL);
				setState(2796);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case GLOBAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2797);
				match(GLOBAL);
				setState(2798);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case UNLOGGED:
				enterOuterAlt(_localctx, 5);
				{
				setState(2799);
				match(UNLOGGED);
				}
				break;
			case TABLE:
			case RECURSIVE:
			case SEQUENCE:
			case VIEW:
				enterOuterAlt(_localctx, 6);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpttableelementlistContext extends ParserRuleContext {
		public TableelementlistContext tableelementlist() {
			return getRuleContext(TableelementlistContext.class,0);
		}
		public OpttableelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttableelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttableelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttableelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttableelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttableelementlistContext opttableelementlist() throws RecognitionException {
		OpttableelementlistContext _localctx = new OpttableelementlistContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_opttableelementlist);
		try {
			setState(2805);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case FOREIGN:
			case PRIMARY:
			case TABLE:
			case UNIQUE:
			case IS:
			case LEFT:
			case LIKE:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2803);
				tableelementlist();
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpttypedtableelementlistContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TypedtableelementlistContext typedtableelementlist() {
			return getRuleContext(TypedtableelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OpttypedtableelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttypedtableelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttypedtableelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttypedtableelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttypedtableelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttypedtableelementlistContext opttypedtableelementlist() throws RecognitionException {
		OpttypedtableelementlistContext _localctx = new OpttypedtableelementlistContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_opttypedtableelementlist);
		try {
			setState(2812);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2807);
				match(OPEN_PAREN);
				setState(2808);
				typedtableelementlist();
				setState(2809);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableelementlistContext extends ParserRuleContext {
		public List<TableelementContext> tableelement() {
			return getRuleContexts(TableelementContext.class);
		}
		public TableelementContext tableelement(int i) {
			return getRuleContext(TableelementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TableelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTableelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTableelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTableelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableelementlistContext tableelementlist() throws RecognitionException {
		TableelementlistContext _localctx = new TableelementlistContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_tableelementlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2814);
			tableelement();
			setState(2819);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2815);
				match(COMMA);
				setState(2816);
				tableelement();
				}
				}
				setState(2821);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypedtableelementlistContext extends ParserRuleContext {
		public List<TypedtableelementContext> typedtableelement() {
			return getRuleContexts(TypedtableelementContext.class);
		}
		public TypedtableelementContext typedtableelement(int i) {
			return getRuleContext(TypedtableelementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TypedtableelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedtableelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTypedtableelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTypedtableelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTypedtableelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedtableelementlistContext typedtableelementlist() throws RecognitionException {
		TypedtableelementlistContext _localctx = new TypedtableelementlistContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_typedtableelementlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2822);
			typedtableelement();
			setState(2827);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2823);
				match(COMMA);
				setState(2824);
				typedtableelement();
				}
				}
				setState(2829);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableelementContext extends ParserRuleContext {
		public TableconstraintContext tableconstraint() {
			return getRuleContext(TableconstraintContext.class,0);
		}
		public TablelikeclauseContext tablelikeclause() {
			return getRuleContext(TablelikeclauseContext.class,0);
		}
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TableelementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableelement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTableelement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTableelement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTableelement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableelementContext tableelement() throws RecognitionException {
		TableelementContext _localctx = new TableelementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_tableelement);
		try {
			setState(2833);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2830);
				tableconstraint();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2831);
				tablelikeclause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2832);
				columnDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypedtableelementContext extends ParserRuleContext {
		public ColumnOptionsContext columnOptions() {
			return getRuleContext(ColumnOptionsContext.class,0);
		}
		public TableconstraintContext tableconstraint() {
			return getRuleContext(TableconstraintContext.class,0);
		}
		public TypedtableelementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedtableelement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTypedtableelement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTypedtableelement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTypedtableelement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedtableelementContext typedtableelement() throws RecognitionException {
		TypedtableelementContext _localctx = new TypedtableelementContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_typedtableelement);
		try {
			setState(2837);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2835);
				columnOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2836);
				tableconstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnDefContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public ColquallistContext colquallist() {
			return getRuleContext(ColquallistContext.class,0);
		}
		public ColumnDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumnDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumnDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumnDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefContext columnDef() throws RecognitionException {
		ColumnDefContext _localctx = new ColumnDefContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_columnDef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2839);
			colid();
			setState(2840);
			typename();
			setState(2841);
			create_generic_options();
			setState(2842);
			colquallist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnOptionsContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public ColquallistContext colquallist() {
			return getRuleContext(ColquallistContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public ColumnOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumnOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumnOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumnOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnOptionsContext columnOptions() throws RecognitionException {
		ColumnOptionsContext _localctx = new ColumnOptionsContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_columnOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2844);
			colid();
			setState(2847);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2845);
				match(WITH);
				setState(2846);
				match(OPTIONS);
				}
			}

			setState(2849);
			colquallist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColquallistContext extends ParserRuleContext {
		public List<ColconstraintContext> colconstraint() {
			return getRuleContexts(ColconstraintContext.class);
		}
		public ColconstraintContext colconstraint(int i) {
			return getRuleContext(ColconstraintContext.class,i);
		}
		public ColquallistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colquallist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColquallist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColquallist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColquallist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColquallistContext colquallist() throws RecognitionException {
		ColquallistContext _localctx = new ColquallistContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_colquallist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2854);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & 72084085530433547L) != 0) || _la==GENERATED) {
				{
				{
				setState(2851);
				colconstraint();
				}
				}
				setState(2856);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColconstraintContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ColconstraintelemContext colconstraintelem() {
			return getRuleContext(ColconstraintelemContext.class,0);
		}
		public ConstraintattrContext constraintattr() {
			return getRuleContext(ConstraintattrContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public ColconstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colconstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColconstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColconstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColconstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColconstraintContext colconstraint() throws RecognitionException {
		ColconstraintContext _localctx = new ColconstraintContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_colconstraint);
		try {
			setState(2865);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,92,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2857);
				match(CONSTRAINT);
				setState(2858);
				name();
				setState(2859);
				colconstraintelem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2861);
				colconstraintelem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2862);
				constraintattr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2863);
				match(COLLATE);
				setState(2864);
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColconstraintelemContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public OptconstablespaceContext optconstablespace() {
			return getRuleContext(OptconstablespaceContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(PostgreSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_no_inheritContext opt_no_inherit() {
			return getRuleContext(Opt_no_inheritContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public B_exprContext b_expr() {
			return getRuleContext(B_exprContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public Generated_whenContext generated_when() {
			return getRuleContext(Generated_whenContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
			return getRuleContext(OptparenthesizedseqoptlistContext.class,0);
		}
		public TerminalNode STORED() { return getToken(PostgreSQLParser.STORED, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Key_matchContext key_match() {
			return getRuleContext(Key_matchContext.class,0);
		}
		public Key_actionsContext key_actions() {
			return getRuleContext(Key_actionsContext.class,0);
		}
		public ColconstraintelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colconstraintelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColconstraintelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColconstraintelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColconstraintelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColconstraintelemContext colconstraintelem() throws RecognitionException {
		ColconstraintelemContext _localctx = new ColconstraintelemContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_colconstraintelem);
		try {
			setState(2905);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2867);
				match(NOT);
				setState(2868);
				match(NULL_P);
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(2869);
				match(NULL_P);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2870);
				match(UNIQUE);
				setState(2871);
				opt_definition();
				setState(2872);
				optconstablespace();
				}
				break;
			case PRIMARY:
				enterOuterAlt(_localctx, 4);
				{
				setState(2874);
				match(PRIMARY);
				setState(2875);
				match(KEY);
				setState(2876);
				opt_definition();
				setState(2877);
				optconstablespace();
				}
				break;
			case CHECK:
				enterOuterAlt(_localctx, 5);
				{
				setState(2879);
				match(CHECK);
				setState(2880);
				match(OPEN_PAREN);
				setState(2881);
				a_expr();
				setState(2882);
				match(CLOSE_PAREN);
				setState(2883);
				opt_no_inherit();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(2885);
				match(DEFAULT);
				setState(2886);
				b_expr(0);
				}
				break;
			case GENERATED:
				enterOuterAlt(_localctx, 7);
				{
				setState(2887);
				match(GENERATED);
				setState(2888);
				generated_when();
				setState(2889);
				match(AS);
				setState(2897);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case IDENTITY_P:
					{
					setState(2890);
					match(IDENTITY_P);
					setState(2891);
					optparenthesizedseqoptlist();
					}
					break;
				case OPEN_PAREN:
					{
					setState(2892);
					match(OPEN_PAREN);
					setState(2893);
					a_expr();
					setState(2894);
					match(CLOSE_PAREN);
					setState(2895);
					match(STORED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 8);
				{
				setState(2899);
				match(REFERENCES);
				setState(2900);
				qualified_name();
				setState(2901);
				opt_column_list();
				setState(2902);
				key_match();
				setState(2903);
				key_actions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Generated_whenContext extends ParserRuleContext {
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Generated_whenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generated_when; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGenerated_when(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGenerated_when(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGenerated_when(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generated_whenContext generated_when() throws RecognitionException {
		Generated_whenContext _localctx = new Generated_whenContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_generated_when);
		try {
			setState(2910);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALWAYS:
				enterOuterAlt(_localctx, 1);
				{
				setState(2907);
				match(ALWAYS);
				}
				break;
			case BY:
				enterOuterAlt(_localctx, 2);
				{
				setState(2908);
				match(BY);
				setState(2909);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintattrContext extends ParserRuleContext {
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLParser.INITIALLY, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public ConstraintattrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintattr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraintattr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraintattr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraintattr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintattrContext constraintattr() throws RecognitionException {
		ConstraintattrContext _localctx = new ConstraintattrContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_constraintattr);
		int _la;
		try {
			setState(2917);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFERRABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2912);
				match(DEFERRABLE);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2913);
				match(NOT);
				setState(2914);
				match(DEFERRABLE);
				}
				break;
			case INITIALLY:
				enterOuterAlt(_localctx, 3);
				{
				setState(2915);
				match(INITIALLY);
				setState(2916);
				_la = _input.LA(1);
				if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablelikeclauseContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TablelikeoptionlistContext tablelikeoptionlist() {
			return getRuleContext(TablelikeoptionlistContext.class,0);
		}
		public TablelikeclauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablelikeclause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablelikeclause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablelikeclause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablelikeclause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablelikeclauseContext tablelikeclause() throws RecognitionException {
		TablelikeclauseContext _localctx = new TablelikeclauseContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_tablelikeclause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2919);
			match(LIKE);
			setState(2920);
			qualified_name();
			setState(2921);
			tablelikeoptionlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablelikeoptionlistContext extends ParserRuleContext {
		public List<TablelikeoptionContext> tablelikeoption() {
			return getRuleContexts(TablelikeoptionContext.class);
		}
		public TablelikeoptionContext tablelikeoption(int i) {
			return getRuleContext(TablelikeoptionContext.class,i);
		}
		public List<TerminalNode> INCLUDING() { return getTokens(PostgreSQLParser.INCLUDING); }
		public TerminalNode INCLUDING(int i) {
			return getToken(PostgreSQLParser.INCLUDING, i);
		}
		public List<TerminalNode> EXCLUDING() { return getTokens(PostgreSQLParser.EXCLUDING); }
		public TerminalNode EXCLUDING(int i) {
			return getToken(PostgreSQLParser.EXCLUDING, i);
		}
		public TablelikeoptionlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablelikeoptionlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablelikeoptionlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablelikeoptionlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablelikeoptionlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablelikeoptionlistContext tablelikeoptionlist() throws RecognitionException {
		TablelikeoptionlistContext _localctx = new TablelikeoptionlistContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_tablelikeoptionlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2927);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==EXCLUDING || _la==INCLUDING) {
				{
				{
				setState(2923);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2924);
				tablelikeoption();
				}
				}
				setState(2929);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablelikeoptionContext extends ParserRuleContext {
		public TerminalNode COMMENTS() { return getToken(PostgreSQLParser.COMMENTS, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLParser.CONSTRAINTS, 0); }
		public TerminalNode DEFAULTS() { return getToken(PostgreSQLParser.DEFAULTS, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public TerminalNode INDEXES() { return getToken(PostgreSQLParser.INDEXES, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TablelikeoptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablelikeoption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablelikeoption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablelikeoption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablelikeoption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablelikeoptionContext tablelikeoption() throws RecognitionException {
		TablelikeoptionContext _localctx = new TablelikeoptionContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_tablelikeoption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2930);
			_la = _input.LA(1);
			if ( !(_la==ALL || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & 576460752303947809L) != 0) || _la==INDEXES || _la==STATISTICS || _la==STORAGE || _la==GENERATED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableconstraintContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ConstraintelemContext constraintelem() {
			return getRuleContext(ConstraintelemContext.class,0);
		}
		public TableconstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableconstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTableconstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTableconstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTableconstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableconstraintContext tableconstraint() throws RecognitionException {
		TableconstraintContext _localctx = new TableconstraintContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_tableconstraint);
		try {
			setState(2937);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONSTRAINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2932);
				match(CONSTRAINT);
				setState(2933);
				name();
				setState(2934);
				constraintelem();
				}
				break;
			case CHECK:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
			case EXCLUDE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2936);
				constraintelem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintelemContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstraintattributespecContext constraintattributespec() {
			return getRuleContext(ConstraintattributespecContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public Opt_c_includeContext opt_c_include() {
			return getRuleContext(Opt_c_includeContext.class,0);
		}
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public OptconstablespaceContext optconstablespace() {
			return getRuleContext(OptconstablespaceContext.class,0);
		}
		public ExistingindexContext existingindex() {
			return getRuleContext(ExistingindexContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(PostgreSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLParser.EXCLUDE, 0); }
		public Access_method_clauseContext access_method_clause() {
			return getRuleContext(Access_method_clauseContext.class,0);
		}
		public ExclusionconstraintlistContext exclusionconstraintlist() {
			return getRuleContext(ExclusionconstraintlistContext.class,0);
		}
		public ExclusionwhereclauseContext exclusionwhereclause() {
			return getRuleContext(ExclusionwhereclauseContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Key_matchContext key_match() {
			return getRuleContext(Key_matchContext.class,0);
		}
		public Key_actionsContext key_actions() {
			return getRuleContext(Key_actionsContext.class,0);
		}
		public ConstraintelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraintelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraintelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraintelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintelemContext constraintelem() throws RecognitionException {
		ConstraintelemContext _localctx = new ConstraintelemContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_constraintelem);
		try {
			setState(2997);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHECK:
				enterOuterAlt(_localctx, 1);
				{
				setState(2939);
				match(CHECK);
				setState(2940);
				match(OPEN_PAREN);
				setState(2941);
				a_expr();
				setState(2942);
				match(CLOSE_PAREN);
				setState(2943);
				constraintattributespec();
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2945);
				match(UNIQUE);
				setState(2957);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAREN:
					{
					setState(2946);
					match(OPEN_PAREN);
					setState(2947);
					columnlist();
					setState(2948);
					match(CLOSE_PAREN);
					setState(2949);
					opt_c_include();
					setState(2950);
					opt_definition();
					setState(2951);
					optconstablespace();
					setState(2952);
					constraintattributespec();
					}
					break;
				case USING:
					{
					setState(2954);
					existingindex();
					setState(2955);
					constraintattributespec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PRIMARY:
				enterOuterAlt(_localctx, 3);
				{
				setState(2959);
				match(PRIMARY);
				setState(2960);
				match(KEY);
				setState(2972);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAREN:
					{
					setState(2961);
					match(OPEN_PAREN);
					setState(2962);
					columnlist();
					setState(2963);
					match(CLOSE_PAREN);
					setState(2964);
					opt_c_include();
					setState(2965);
					opt_definition();
					setState(2966);
					optconstablespace();
					setState(2967);
					constraintattributespec();
					}
					break;
				case USING:
					{
					setState(2969);
					existingindex();
					setState(2970);
					constraintattributespec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case EXCLUDE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2974);
				match(EXCLUDE);
				setState(2975);
				access_method_clause();
				setState(2976);
				match(OPEN_PAREN);
				setState(2977);
				exclusionconstraintlist();
				setState(2978);
				match(CLOSE_PAREN);
				setState(2979);
				opt_c_include();
				setState(2980);
				opt_definition();
				setState(2981);
				optconstablespace();
				setState(2982);
				exclusionwhereclause();
				setState(2983);
				constraintattributespec();
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 5);
				{
				setState(2985);
				match(FOREIGN);
				setState(2986);
				match(KEY);
				setState(2987);
				match(OPEN_PAREN);
				setState(2988);
				columnlist();
				setState(2989);
				match(CLOSE_PAREN);
				setState(2990);
				match(REFERENCES);
				setState(2991);
				qualified_name();
				setState(2992);
				opt_column_list();
				setState(2993);
				key_match();
				setState(2994);
				key_actions();
				setState(2995);
				constraintattributespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_no_inheritContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public Opt_no_inheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_no_inherit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_no_inherit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_no_inherit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_no_inherit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_no_inheritContext opt_no_inherit() throws RecognitionException {
		Opt_no_inheritContext _localctx = new Opt_no_inheritContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_opt_no_inherit);
		try {
			setState(3002);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(2999);
				match(NO);
				setState(3000);
				match(INHERIT);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CHECK:
			case COLLATE:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case NULL_P:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case TABLE:
			case UNIQUE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case GENERATED:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_column_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_column_listContext opt_column_list() throws RecognitionException {
		Opt_column_listContext _localctx = new Opt_column_listContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_opt_column_list);
		try {
			setState(3009);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3004);
				match(OPEN_PAREN);
				setState(3005);
				columnlist();
				setState(3006);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnlistContext extends ParserRuleContext {
		public List<ColumnElemContext> columnElem() {
			return getRuleContexts(ColumnElemContext.class);
		}
		public ColumnElemContext columnElem(int i) {
			return getRuleContext(ColumnElemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public ColumnlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumnlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumnlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumnlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnlistContext columnlist() throws RecognitionException {
		ColumnlistContext _localctx = new ColumnlistContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_columnlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3011);
			columnElem();
			setState(3016);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3012);
				match(COMMA);
				setState(3013);
				columnElem();
				}
				}
				setState(3018);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnElemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public ColumnElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumnElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumnElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumnElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnElemContext columnElem() throws RecognitionException {
		ColumnElemContext _localctx = new ColumnElemContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_columnElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3019);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_c_includeContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(PostgreSQLParser.INCLUDE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_c_includeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_c_include; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_c_include(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_c_include(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_c_include(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_c_includeContext opt_c_include() throws RecognitionException {
		Opt_c_includeContext _localctx = new Opt_c_includeContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_opt_c_include);
		try {
			setState(3027);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INCLUDE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3021);
				match(INCLUDE);
				setState(3022);
				match(OPEN_PAREN);
				setState(3023);
				columnlist();
				setState(3024);
				match(CLOSE_PAREN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case SELECT:
			case TABLE:
			case USING:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Key_matchContext extends ParserRuleContext {
		public TerminalNode MATCH() { return getToken(PostgreSQLParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSQLParser.SIMPLE, 0); }
		public Key_matchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_match; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterKey_match(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitKey_match(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitKey_match(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_matchContext key_match() throws RecognitionException {
		Key_matchContext _localctx = new Key_matchContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_key_match);
		int _la;
		try {
			setState(3032);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MATCH:
				enterOuterAlt(_localctx, 1);
				{
				setState(3029);
				match(MATCH);
				setState(3030);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CHECK:
			case COLLATE:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case NULL_P:
			case ON:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case TABLE:
			case UNIQUE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case GENERATED:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExclusionconstraintlistContext extends ParserRuleContext {
		public List<ExclusionconstraintelemContext> exclusionconstraintelem() {
			return getRuleContexts(ExclusionconstraintelemContext.class);
		}
		public ExclusionconstraintelemContext exclusionconstraintelem(int i) {
			return getRuleContext(ExclusionconstraintelemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public ExclusionconstraintlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionconstraintlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExclusionconstraintlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExclusionconstraintlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExclusionconstraintlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionconstraintlistContext exclusionconstraintlist() throws RecognitionException {
		ExclusionconstraintlistContext _localctx = new ExclusionconstraintlistContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_exclusionconstraintlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3034);
			exclusionconstraintelem();
			setState(3039);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3035);
				match(COMMA);
				setState(3036);
				exclusionconstraintelem();
				}
				}
				setState(3041);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExclusionconstraintelemContext extends ParserRuleContext {
		public Index_elemContext index_elem() {
			return getRuleContext(Index_elemContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExclusionconstraintelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionconstraintelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExclusionconstraintelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExclusionconstraintelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExclusionconstraintelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionconstraintelemContext exclusionconstraintelem() throws RecognitionException {
		ExclusionconstraintelemContext _localctx = new ExclusionconstraintelemContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_exclusionconstraintelem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3042);
			index_elem();
			setState(3043);
			match(WITH);
			setState(3050);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				setState(3044);
				any_operator();
				}
				break;
			case 2:
				{
				setState(3045);
				match(OPERATOR);
				setState(3046);
				match(OPEN_PAREN);
				setState(3047);
				any_operator();
				setState(3048);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExclusionwhereclauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExclusionwhereclauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionwhereclause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExclusionwhereclause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExclusionwhereclause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExclusionwhereclause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionwhereclauseContext exclusionwhereclause() throws RecognitionException {
		ExclusionwhereclauseContext _localctx = new ExclusionwhereclauseContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_exclusionwhereclause);
		try {
			setState(3058);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHERE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3052);
				match(WHERE);
				setState(3053);
				match(OPEN_PAREN);
				setState(3054);
				a_expr();
				setState(3055);
				match(CLOSE_PAREN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Key_actionsContext extends ParserRuleContext {
		public Key_updateContext key_update() {
			return getRuleContext(Key_updateContext.class,0);
		}
		public Key_deleteContext key_delete() {
			return getRuleContext(Key_deleteContext.class,0);
		}
		public Key_actionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_actions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterKey_actions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitKey_actions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitKey_actions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_actionsContext key_actions() throws RecognitionException {
		Key_actionsContext _localctx = new Key_actionsContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_key_actions);
		try {
			setState(3069);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3060);
				key_update();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3061);
				key_delete();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3062);
				key_update();
				setState(3063);
				key_delete();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3065);
				key_delete();
				setState(3066);
				key_update();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Key_updateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Key_actionContext key_action() {
			return getRuleContext(Key_actionContext.class,0);
		}
		public Key_updateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterKey_update(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitKey_update(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitKey_update(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_updateContext key_update() throws RecognitionException {
		Key_updateContext _localctx = new Key_updateContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_key_update);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3071);
			match(ON);
			setState(3072);
			match(UPDATE);
			setState(3073);
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Key_deleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public Key_actionContext key_action() {
			return getRuleContext(Key_actionContext.class,0);
		}
		public Key_deleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterKey_delete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitKey_delete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitKey_delete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_deleteContext key_delete() throws RecognitionException {
		Key_deleteContext _localctx = new Key_deleteContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_key_delete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3075);
			match(ON);
			setState(3076);
			match(DELETE_P);
			setState(3077);
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Key_actionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(PostgreSQLParser.ACTION, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Key_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterKey_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitKey_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitKey_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_actionContext key_action() throws RecognitionException {
		Key_actionContext _localctx = new Key_actionContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_key_action);
		int _la;
		try {
			setState(3085);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(3079);
				match(NO);
				setState(3080);
				match(ACTION);
				}
				break;
			case RESTRICT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3081);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3082);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(3083);
				match(SET);
				setState(3084);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==NULL_P) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptinheritContext extends ParserRuleContext {
		public TerminalNode INHERITS() { return getToken(PostgreSQLParser.INHERITS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptinheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optinherit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptinherit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptinherit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptinherit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptinheritContext optinherit() throws RecognitionException {
		OptinheritContext _localctx = new OptinheritContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_optinherit);
		try {
			setState(3093);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INHERITS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3087);
				match(INHERITS);
				setState(3088);
				match(OPEN_PAREN);
				setState(3089);
				qualified_name_list();
				setState(3090);
				match(CLOSE_PAREN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case ON:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PARTITION:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SERVER:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case WITHOUT:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptpartitionspecContext extends ParserRuleContext {
		public PartitionspecContext partitionspec() {
			return getRuleContext(PartitionspecContext.class,0);
		}
		public OptpartitionspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optpartitionspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptpartitionspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptpartitionspec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptpartitionspec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptpartitionspecContext optpartitionspec() throws RecognitionException {
		OptpartitionspecContext _localctx = new OptpartitionspecContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_optpartitionspec);
		try {
			setState(3097);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARTITION:
				enterOuterAlt(_localctx, 1);
				{
				setState(3095);
				partitionspec();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case ON:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case WITHOUT:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionspecContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Part_paramsContext part_params() {
			return getRuleContext(Part_paramsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public PartitionspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPartitionspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPartitionspec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPartitionspec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionspecContext partitionspec() throws RecognitionException {
		PartitionspecContext _localctx = new PartitionspecContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_partitionspec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3099);
			match(PARTITION);
			setState(3100);
			match(BY);
			setState(3101);
			colid();
			setState(3102);
			match(OPEN_PAREN);
			setState(3103);
			part_params();
			setState(3104);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Part_paramsContext extends ParserRuleContext {
		public List<Part_elemContext> part_elem() {
			return getRuleContexts(Part_elemContext.class);
		}
		public Part_elemContext part_elem(int i) {
			return getRuleContext(Part_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Part_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_part_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPart_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPart_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPart_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Part_paramsContext part_params() throws RecognitionException {
		Part_paramsContext _localctx = new Part_paramsContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_part_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3106);
			part_elem();
			setState(3111);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3107);
				match(COMMA);
				setState(3108);
				part_elem();
				}
				}
				setState(3113);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Part_elemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Opt_collateContext opt_collate() {
			return getRuleContext(Opt_collateContext.class,0);
		}
		public Opt_classContext opt_class() {
			return getRuleContext(Opt_classContext.class,0);
		}
		public Func_expr_windowlessContext func_expr_windowless() {
			return getRuleContext(Func_expr_windowlessContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Part_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_part_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPart_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPart_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPart_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Part_elemContext part_elem() throws RecognitionException {
		Part_elemContext _localctx = new Part_elemContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_part_elem);
		try {
			setState(3128);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3114);
				colid();
				setState(3115);
				opt_collate();
				setState(3116);
				opt_class();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3118);
				func_expr_windowless();
				setState(3119);
				opt_collate();
				setState(3120);
				opt_class();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3122);
				match(OPEN_PAREN);
				setState(3123);
				a_expr();
				setState(3124);
				match(CLOSE_PAREN);
				setState(3125);
				opt_collate();
				setState(3126);
				opt_class();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_access_method_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Table_access_method_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_access_method_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_access_method_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_access_method_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_access_method_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_access_method_clauseContext table_access_method_clause() throws RecognitionException {
		Table_access_method_clauseContext _localctx = new Table_access_method_clauseContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_table_access_method_clause);
		try {
			setState(3133);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3130);
				match(USING);
				setState(3131);
				name();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AS:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case ON:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case WITHOUT:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptwithContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLParser.OIDS, 0); }
		public OptwithContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optwith; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptwith(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptwith(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptwith(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptwithContext optwith() throws RecognitionException {
		OptwithContext _localctx = new OptwithContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_optwith);
		try {
			setState(3140);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3135);
				match(WITH);
				setState(3136);
				reloptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3137);
				match(WITHOUT);
				setState(3138);
				match(OIDS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OncommitoptionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode PRESERVE() { return getToken(PostgreSQLParser.PRESERVE, 0); }
		public OncommitoptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oncommitoption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOncommitoption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOncommitoption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOncommitoption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OncommitoptionContext oncommitoption() throws RecognitionException {
		OncommitoptionContext _localctx = new OncommitoptionContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_oncommitoption);
		try {
			setState(3152);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3142);
				match(ON);
				setState(3143);
				match(COMMIT);
				setState(3149);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DROP:
					{
					setState(3144);
					match(DROP);
					}
					break;
				case DELETE_P:
					{
					setState(3145);
					match(DELETE_P);
					setState(3146);
					match(ROWS);
					}
					break;
				case PRESERVE:
					{
					setState(3147);
					match(PRESERVE);
					setState(3148);
					match(ROWS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AS:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpttablespaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OpttablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttablespaceContext opttablespace() throws RecognitionException {
		OpttablespaceContext _localctx = new OpttablespaceContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_opttablespace);
		try {
			setState(3157);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLESPACE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3154);
				match(TABLESPACE);
				setState(3155);
				name();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AS:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptconstablespaceContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptconstablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optconstablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptconstablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptconstablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptconstablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptconstablespaceContext optconstablespace() throws RecognitionException {
		OptconstablespaceContext _localctx = new OptconstablespaceContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_optconstablespace);
		try {
			setState(3164);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3159);
				match(USING);
				setState(3160);
				match(INDEX);
				setState(3161);
				match(TABLESPACE);
				setState(3162);
				name();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CHECK:
			case COLLATE:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case NULL_P:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case TABLE:
			case UNIQUE:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case GENERATED:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExistingindexContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExistingindexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existingindex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExistingindex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExistingindex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExistingindex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExistingindexContext existingindex() throws RecognitionException {
		ExistingindexContext _localctx = new ExistingindexContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_existingindex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3166);
			match(USING);
			setState(3167);
			match(INDEX);
			setState(3168);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatestatsstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreatestatsstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createstatsstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatestatsstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatestatsstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatestatsstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatestatsstmtContext createstatsstmt() throws RecognitionException {
		CreatestatsstmtContext _localctx = new CreatestatsstmtContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_createstatsstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3170);
			match(CREATE);
			setState(3171);
			match(STATISTICS);
			setState(3175);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
			case 1:
				{
				setState(3172);
				match(IF_P);
				setState(3173);
				match(NOT);
				setState(3174);
				match(EXISTS);
				}
				break;
			}
			setState(3177);
			any_name();
			setState(3178);
			opt_name_list();
			setState(3179);
			match(ON);
			setState(3180);
			expr_list();
			setState(3181);
			match(FROM);
			setState(3182);
			from_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterstatsstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public List<TerminalNode> STATISTICS() { return getTokens(PostgreSQLParser.STATISTICS); }
		public TerminalNode STATISTICS(int i) {
			return getToken(PostgreSQLParser.STATISTICS, i);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public AlterstatsstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterstatsstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterstatsstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterstatsstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterstatsstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterstatsstmtContext alterstatsstmt() throws RecognitionException {
		AlterstatsstmtContext _localctx = new AlterstatsstmtContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_alterstatsstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3184);
			match(ALTER);
			setState(3185);
			match(STATISTICS);
			setState(3188);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				setState(3186);
				match(IF_P);
				setState(3187);
				match(EXISTS);
				}
				break;
			}
			setState(3190);
			any_name();
			setState(3191);
			match(SET);
			setState(3192);
			match(STATISTICS);
			setState(3193);
			signediconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateasstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Create_as_targetContext create_as_target() {
			return getRuleContext(Create_as_targetContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateasstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createasstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateasstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateasstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateasstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateasstmtContext createasstmt() throws RecognitionException {
		CreateasstmtContext _localctx = new CreateasstmtContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_createasstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3195);
			match(CREATE);
			setState(3196);
			opttemp();
			setState(3197);
			match(TABLE);
			setState(3201);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
			case 1:
				{
				setState(3198);
				match(IF_P);
				setState(3199);
				match(NOT);
				setState(3200);
				match(EXISTS);
				}
				break;
			}
			setState(3203);
			create_as_target();
			setState(3204);
			match(AS);
			setState(3205);
			selectstmt();
			setState(3206);
			opt_with_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_as_targetContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Table_access_method_clauseContext table_access_method_clause() {
			return getRuleContext(Table_access_method_clauseContext.class,0);
		}
		public OptwithContext optwith() {
			return getRuleContext(OptwithContext.class,0);
		}
		public OncommitoptionContext oncommitoption() {
			return getRuleContext(OncommitoptionContext.class,0);
		}
		public OpttablespaceContext opttablespace() {
			return getRuleContext(OpttablespaceContext.class,0);
		}
		public Create_as_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_as_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_as_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_as_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_as_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_as_targetContext create_as_target() throws RecognitionException {
		Create_as_targetContext _localctx = new Create_as_targetContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_create_as_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3208);
			qualified_name();
			setState(3209);
			opt_column_list();
			setState(3210);
			table_access_method_clause();
			setState(3211);
			optwith();
			setState(3212);
			oncommitoption();
			setState(3213);
			opttablespace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_with_dataContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Opt_with_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with_data; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_with_data(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_with_data(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_with_data(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_with_dataContext opt_with_data() throws RecognitionException {
		Opt_with_dataContext _localctx = new Opt_with_dataContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_opt_with_data);
		try {
			setState(3222);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3215);
				match(WITH);
				setState(3219);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATA_P:
					{
					setState(3216);
					match(DATA_P);
					}
					break;
				case NO:
					{
					setState(3217);
					match(NO);
					setState(3218);
					match(DATA_P);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatematviewstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OptnologContext optnolog() {
			return getRuleContext(OptnologContext.class,0);
		}
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public Create_mv_targetContext create_mv_target() {
			return getRuleContext(Create_mv_targetContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreatematviewstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_creatematviewstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatematviewstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatematviewstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatematviewstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatematviewstmtContext creatematviewstmt() throws RecognitionException {
		CreatematviewstmtContext _localctx = new CreatematviewstmtContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_creatematviewstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3224);
			match(CREATE);
			setState(3225);
			optnolog();
			setState(3226);
			match(MATERIALIZED);
			setState(3227);
			match(VIEW);
			setState(3231);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
			case 1:
				{
				setState(3228);
				match(IF_P);
				setState(3229);
				match(NOT);
				setState(3230);
				match(EXISTS);
				}
				break;
			}
			setState(3233);
			create_mv_target();
			setState(3234);
			match(AS);
			setState(3235);
			selectstmt();
			setState(3236);
			opt_with_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_mv_targetContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Table_access_method_clauseContext table_access_method_clause() {
			return getRuleContext(Table_access_method_clauseContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public OpttablespaceContext opttablespace() {
			return getRuleContext(OpttablespaceContext.class,0);
		}
		public Create_mv_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_mv_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_mv_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_mv_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_mv_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_mv_targetContext create_mv_target() throws RecognitionException {
		Create_mv_targetContext _localctx = new Create_mv_targetContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_create_mv_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3238);
			qualified_name();
			setState(3239);
			opt_column_list();
			setState(3240);
			table_access_method_clause();
			setState(3241);
			opt_reloptions();
			setState(3242);
			opttablespace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptnologContext extends ParserRuleContext {
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public OptnologContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optnolog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptnolog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptnolog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptnolog(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptnologContext optnolog() throws RecognitionException {
		OptnologContext _localctx = new OptnologContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_optnolog);
		try {
			setState(3246);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNLOGGED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3244);
				match(UNLOGGED);
				}
				break;
			case MATERIALIZED:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RefreshmatviewstmtContext extends ParserRuleContext {
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public Opt_concurrentlyContext opt_concurrently() {
			return getRuleContext(Opt_concurrentlyContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public RefreshmatviewstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshmatviewstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRefreshmatviewstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRefreshmatviewstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRefreshmatviewstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshmatviewstmtContext refreshmatviewstmt() throws RecognitionException {
		RefreshmatviewstmtContext _localctx = new RefreshmatviewstmtContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_refreshmatviewstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3248);
			match(REFRESH);
			setState(3249);
			match(MATERIALIZED);
			setState(3250);
			match(VIEW);
			setState(3251);
			opt_concurrently();
			setState(3252);
			qualified_name();
			setState(3253);
			opt_with_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateseqstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OptseqoptlistContext optseqoptlist() {
			return getRuleContext(OptseqoptlistContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateseqstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createseqstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateseqstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateseqstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateseqstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateseqstmtContext createseqstmt() throws RecognitionException {
		CreateseqstmtContext _localctx = new CreateseqstmtContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_createseqstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3255);
			match(CREATE);
			setState(3256);
			opttemp();
			setState(3257);
			match(SEQUENCE);
			setState(3261);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
			case 1:
				{
				setState(3258);
				match(IF_P);
				setState(3259);
				match(NOT);
				setState(3260);
				match(EXISTS);
				}
				break;
			}
			setState(3263);
			qualified_name();
			setState(3264);
			optseqoptlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterseqstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public SeqoptlistContext seqoptlist() {
			return getRuleContext(SeqoptlistContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public AlterseqstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterseqstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterseqstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterseqstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterseqstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterseqstmtContext alterseqstmt() throws RecognitionException {
		AlterseqstmtContext _localctx = new AlterseqstmtContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_alterseqstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3266);
			match(ALTER);
			setState(3267);
			match(SEQUENCE);
			setState(3270);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				{
				setState(3268);
				match(IF_P);
				setState(3269);
				match(EXISTS);
				}
				break;
			}
			setState(3272);
			qualified_name();
			setState(3273);
			seqoptlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptseqoptlistContext extends ParserRuleContext {
		public SeqoptlistContext seqoptlist() {
			return getRuleContext(SeqoptlistContext.class,0);
		}
		public OptseqoptlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optseqoptlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptseqoptlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptseqoptlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptseqoptlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptseqoptlistContext optseqoptlist() throws RecognitionException {
		OptseqoptlistContext _localctx = new OptseqoptlistContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_optseqoptlist);
		try {
			setState(3277);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3275);
				seqoptlist();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptparenthesizedseqoptlistContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public SeqoptlistContext seqoptlist() {
			return getRuleContext(SeqoptlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptparenthesizedseqoptlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optparenthesizedseqoptlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptparenthesizedseqoptlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptparenthesizedseqoptlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptparenthesizedseqoptlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() throws RecognitionException {
		OptparenthesizedseqoptlistContext _localctx = new OptparenthesizedseqoptlistContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_optparenthesizedseqoptlist);
		try {
			setState(3284);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3279);
				match(OPEN_PAREN);
				setState(3280);
				seqoptlist();
				setState(3281);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SeqoptlistContext extends ParserRuleContext {
		public List<SeqoptelemContext> seqoptelem() {
			return getRuleContexts(SeqoptelemContext.class);
		}
		public SeqoptelemContext seqoptelem(int i) {
			return getRuleContext(SeqoptelemContext.class,i);
		}
		public SeqoptlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqoptlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSeqoptlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSeqoptlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSeqoptlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqoptlistContext seqoptlist() throws RecognitionException {
		SeqoptlistContext _localctx = new SeqoptlistContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_seqoptlist);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3287); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3286);
					seqoptelem();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3289); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,133,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SeqoptelemContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public SimpletypenameContext simpletypename() {
			return getRuleContext(SimpletypenameContext.class,0);
		}
		public TerminalNode CACHE() { return getToken(PostgreSQLParser.CACHE, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode CYCLE() { return getToken(PostgreSQLParser.CYCLE, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSQLParser.INCREMENT, 0); }
		public Opt_byContext opt_by() {
			return getRuleContext(Opt_byContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(PostgreSQLParser.MAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSQLParser.MINVALUE, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode NAME_P() { return getToken(PostgreSQLParser.NAME_P, 0); }
		public TerminalNode START() { return getToken(PostgreSQLParser.START, 0); }
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public SeqoptelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqoptelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSeqoptelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSeqoptelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSeqoptelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqoptelemContext seqoptelem() throws RecognitionException {
		SeqoptelemContext _localctx = new SeqoptelemContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_seqoptelem);
		int _la;
		try {
			setState(3321);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3291);
				match(AS);
				setState(3292);
				simpletypename();
				}
				break;
			case CACHE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3293);
				match(CACHE);
				setState(3294);
				numericonly();
				}
				break;
			case CYCLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3295);
				match(CYCLE);
				}
				break;
			case INCREMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3296);
				match(INCREMENT);
				setState(3297);
				opt_by();
				setState(3298);
				numericonly();
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(3300);
				match(MAXVALUE);
				setState(3301);
				numericonly();
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 6);
				{
				setState(3302);
				match(MINVALUE);
				setState(3303);
				numericonly();
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 7);
				{
				setState(3304);
				match(NO);
				setState(3305);
				_la = _input.LA(1);
				if ( !(_la==CYCLE || _la==MAXVALUE || _la==MINVALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case OWNED:
				enterOuterAlt(_localctx, 8);
				{
				setState(3306);
				match(OWNED);
				setState(3307);
				match(BY);
				setState(3308);
				any_name();
				}
				break;
			case SEQUENCE:
				enterOuterAlt(_localctx, 9);
				{
				setState(3309);
				match(SEQUENCE);
				setState(3310);
				match(NAME_P);
				setState(3311);
				any_name();
				}
				break;
			case START:
				enterOuterAlt(_localctx, 10);
				{
				setState(3312);
				match(START);
				setState(3313);
				opt_with();
				setState(3314);
				numericonly();
				}
				break;
			case RESTART:
				enterOuterAlt(_localctx, 11);
				{
				setState(3316);
				match(RESTART);
				setState(3317);
				opt_with();
				setState(3319);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS || _la==Integral || _la==Numeric) {
					{
					setState(3318);
					numericonly();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_byContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Opt_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_by; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_by(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_by(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_by(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_byContext opt_by() throws RecognitionException {
		Opt_byContext _localctx = new Opt_byContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_opt_by);
		try {
			setState(3325);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BY:
				enterOuterAlt(_localctx, 1);
				{
				setState(3323);
				match(BY);
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumericonlyContext extends ParserRuleContext {
		public FconstContext fconst() {
			return getRuleContext(FconstContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public NumericonlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericonly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNumericonly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNumericonly(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNumericonly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericonlyContext numericonly() throws RecognitionException {
		NumericonlyContext _localctx = new NumericonlyContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_numericonly);
		try {
			setState(3333);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3327);
				fconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3328);
				match(PLUS);
				setState(3329);
				fconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3330);
				match(MINUS);
				setState(3331);
				fconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3332);
				signediconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Numericonly_listContext extends ParserRuleContext {
		public List<NumericonlyContext> numericonly() {
			return getRuleContexts(NumericonlyContext.class);
		}
		public NumericonlyContext numericonly(int i) {
			return getRuleContext(NumericonlyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Numericonly_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericonly_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNumericonly_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNumericonly_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNumericonly_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numericonly_listContext numericonly_list() throws RecognitionException {
		Numericonly_listContext _localctx = new Numericonly_listContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_numericonly_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3335);
			numericonly();
			setState(3340);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3336);
				match(COMMA);
				setState(3337);
				numericonly();
				}
				}
				setState(3342);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateplangstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public Opt_trustedContext opt_trusted() {
			return getRuleContext(Opt_trustedContext.class,0);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public Opt_inline_handlerContext opt_inline_handler() {
			return getRuleContext(Opt_inline_handlerContext.class,0);
		}
		public Opt_validatorContext opt_validator() {
			return getRuleContext(Opt_validatorContext.class,0);
		}
		public CreateplangstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createplangstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateplangstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateplangstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateplangstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateplangstmtContext createplangstmt() throws RecognitionException {
		CreateplangstmtContext _localctx = new CreateplangstmtContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_createplangstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3343);
			match(CREATE);
			setState(3344);
			opt_or_replace();
			setState(3345);
			opt_trusted();
			setState(3346);
			opt_procedural();
			setState(3347);
			match(LANGUAGE);
			setState(3348);
			name();
			setState(3354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HANDLER) {
				{
				setState(3349);
				match(HANDLER);
				setState(3350);
				handler_name();
				setState(3351);
				opt_inline_handler();
				setState(3352);
				opt_validator();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_trustedContext extends ParserRuleContext {
		public TerminalNode TRUSTED() { return getToken(PostgreSQLParser.TRUSTED, 0); }
		public Opt_trustedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_trusted; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_trusted(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_trusted(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_trusted(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_trustedContext opt_trusted() throws RecognitionException {
		Opt_trustedContext _localctx = new Opt_trustedContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_opt_trusted);
		try {
			setState(3358);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUSTED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3356);
				match(TRUSTED);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Handler_nameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Handler_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handler_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterHandler_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitHandler_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitHandler_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Handler_nameContext handler_name() throws RecognitionException {
		Handler_nameContext _localctx = new Handler_nameContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_handler_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3360);
			name();
			setState(3362);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(3361);
				attrs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_inline_handlerContext extends ParserRuleContext {
		public TerminalNode INLINE_P() { return getToken(PostgreSQLParser.INLINE_P, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public Opt_inline_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_inline_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_inline_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_inline_handler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_inline_handler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_inline_handlerContext opt_inline_handler() throws RecognitionException {
		Opt_inline_handlerContext _localctx = new Opt_inline_handlerContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_opt_inline_handler);
		try {
			setState(3367);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INLINE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(3364);
				match(INLINE_P);
				setState(3365);
				handler_name();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALIDATOR:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Validator_clauseContext extends ParserRuleContext {
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Validator_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_validator_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterValidator_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitValidator_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitValidator_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Validator_clauseContext validator_clause() throws RecognitionException {
		Validator_clauseContext _localctx = new Validator_clauseContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_validator_clause);
		try {
			setState(3373);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALIDATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3369);
				match(VALIDATOR);
				setState(3370);
				handler_name();
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(3371);
				match(NO);
				setState(3372);
				match(VALIDATOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_validatorContext extends ParserRuleContext {
		public Validator_clauseContext validator_clause() {
			return getRuleContext(Validator_clauseContext.class,0);
		}
		public Opt_validatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_validator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_validator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_validator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_validator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_validatorContext opt_validator() throws RecognitionException {
		Opt_validatorContext _localctx = new Opt_validatorContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_opt_validator);
		try {
			setState(3377);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
			case VALIDATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3375);
				validator_clause();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_proceduralContext extends ParserRuleContext {
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLParser.PROCEDURAL, 0); }
		public Opt_proceduralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_procedural; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_procedural(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_procedural(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_procedural(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_proceduralContext opt_procedural() throws RecognitionException {
		Opt_proceduralContext _localctx = new Opt_proceduralContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_opt_procedural);
		try {
			setState(3381);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3379);
				match(PROCEDURAL);
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatetablespacestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OpttablespaceownerContext opttablespaceowner() {
			return getRuleContext(OpttablespaceownerContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(PostgreSQLParser.LOCATION, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public CreatetablespacestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createtablespacestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatetablespacestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatetablespacestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatetablespacestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatetablespacestmtContext createtablespacestmt() throws RecognitionException {
		CreatetablespacestmtContext _localctx = new CreatetablespacestmtContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_createtablespacestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3383);
			match(CREATE);
			setState(3384);
			match(TABLESPACE);
			setState(3385);
			name();
			setState(3386);
			opttablespaceowner();
			setState(3387);
			match(LOCATION);
			setState(3388);
			sconst();
			setState(3389);
			opt_reloptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpttablespaceownerContext extends ParserRuleContext {
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public OpttablespaceownerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttablespaceowner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttablespaceowner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttablespaceowner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttablespaceowner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttablespaceownerContext opttablespaceowner() throws RecognitionException {
		OpttablespaceownerContext _localctx = new OpttablespaceownerContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_opttablespaceowner);
		try {
			setState(3394);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OWNER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3391);
				match(OWNER);
				setState(3392);
				rolespec();
				}
				break;
			case LOCATION:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DroptablespacestmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DroptablespacestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_droptablespacestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDroptablespacestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDroptablespacestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDroptablespacestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DroptablespacestmtContext droptablespacestmt() throws RecognitionException {
		DroptablespacestmtContext _localctx = new DroptablespacestmtContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_droptablespacestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3396);
			match(DROP);
			setState(3397);
			match(TABLESPACE);
			setState(3400);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
			case 1:
				{
				setState(3398);
				match(IF_P);
				setState(3399);
				match(EXISTS);
				}
				break;
			}
			setState(3402);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateextensionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public Create_extension_opt_listContext create_extension_opt_list() {
			return getRuleContext(Create_extension_opt_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateextensionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createextensionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateextensionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateextensionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateextensionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateextensionstmtContext createextensionstmt() throws RecognitionException {
		CreateextensionstmtContext _localctx = new CreateextensionstmtContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_createextensionstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3404);
			match(CREATE);
			setState(3405);
			match(EXTENSION);
			setState(3409);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
			case 1:
				{
				setState(3406);
				match(IF_P);
				setState(3407);
				match(NOT);
				setState(3408);
				match(EXISTS);
				}
				break;
			}
			setState(3411);
			name();
			setState(3412);
			opt_with();
			setState(3413);
			create_extension_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_extension_opt_listContext extends ParserRuleContext {
		public List<Create_extension_opt_itemContext> create_extension_opt_item() {
			return getRuleContexts(Create_extension_opt_itemContext.class);
		}
		public Create_extension_opt_itemContext create_extension_opt_item(int i) {
			return getRuleContext(Create_extension_opt_itemContext.class,i);
		}
		public Create_extension_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_extension_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_extension_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_extension_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_extension_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_extension_opt_listContext create_extension_opt_list() throws RecognitionException {
		Create_extension_opt_listContext _localctx = new Create_extension_opt_listContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_create_extension_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3418);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FROM || _la==CASCADE || _la==SCHEMA || _la==VERSION_P) {
				{
				{
				setState(3415);
				create_extension_opt_item();
				}
				}
				setState(3420);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_extension_opt_itemContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public Create_extension_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_extension_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_extension_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_extension_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_extension_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_extension_opt_itemContext create_extension_opt_item() throws RecognitionException {
		Create_extension_opt_itemContext _localctx = new Create_extension_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_create_extension_opt_item);
		try {
			setState(3428);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCHEMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(3421);
				match(SCHEMA);
				setState(3422);
				name();
				}
				break;
			case VERSION_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(3423);
				match(VERSION_P);
				setState(3424);
				nonreservedword_or_sconst();
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 3);
				{
				setState(3425);
				match(FROM);
				setState(3426);
				nonreservedword_or_sconst();
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3427);
				match(CASCADE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterextensionstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Alter_extension_opt_listContext alter_extension_opt_list() {
			return getRuleContext(Alter_extension_opt_listContext.class,0);
		}
		public AlterextensionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterextensionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterextensionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterextensionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterextensionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterextensionstmtContext alterextensionstmt() throws RecognitionException {
		AlterextensionstmtContext _localctx = new AlterextensionstmtContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_alterextensionstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3430);
			match(ALTER);
			setState(3431);
			match(EXTENSION);
			setState(3432);
			name();
			setState(3433);
			match(UPDATE);
			setState(3434);
			alter_extension_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_extension_opt_listContext extends ParserRuleContext {
		public List<Alter_extension_opt_itemContext> alter_extension_opt_item() {
			return getRuleContexts(Alter_extension_opt_itemContext.class);
		}
		public Alter_extension_opt_itemContext alter_extension_opt_item(int i) {
			return getRuleContext(Alter_extension_opt_itemContext.class,i);
		}
		public Alter_extension_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_extension_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_extension_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_extension_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_extension_opt_listContext alter_extension_opt_list() throws RecognitionException {
		Alter_extension_opt_listContext _localctx = new Alter_extension_opt_listContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_alter_extension_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3439);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==TO) {
				{
				{
				setState(3436);
				alter_extension_opt_item();
				}
				}
				setState(3441);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_extension_opt_itemContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public Alter_extension_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_extension_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_extension_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_extension_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_extension_opt_itemContext alter_extension_opt_item() throws RecognitionException {
		Alter_extension_opt_itemContext _localctx = new Alter_extension_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_alter_extension_opt_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3442);
			match(TO);
			setState(3443);
			nonreservedword_or_sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterextensioncontentsstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public Add_dropContext add_drop() {
			return getRuleContext(Add_dropContext.class,0);
		}
		public Object_type_nameContext object_type_name() {
			return getRuleContext(Object_type_nameContext.class,0);
		}
		public Object_type_any_nameContext object_type_any_name() {
			return getRuleContext(Object_type_any_nameContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public AlterextensioncontentsstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterextensioncontentsstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterextensioncontentsstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterextensioncontentsstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterextensioncontentsstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterextensioncontentsstmtContext alterextensioncontentsstmt() throws RecognitionException {
		AlterextensioncontentsstmtContext _localctx = new AlterextensioncontentsstmtContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_alterextensioncontentsstmt);
		try {
			setState(3549);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3445);
				match(ALTER);
				setState(3446);
				match(EXTENSION);
				setState(3447);
				name();
				setState(3448);
				add_drop();
				setState(3449);
				object_type_name();
				setState(3450);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3452);
				match(ALTER);
				setState(3453);
				match(EXTENSION);
				setState(3454);
				name();
				setState(3455);
				add_drop();
				setState(3456);
				object_type_any_name();
				setState(3457);
				any_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3459);
				match(ALTER);
				setState(3460);
				match(EXTENSION);
				setState(3461);
				name();
				setState(3462);
				add_drop();
				setState(3463);
				match(AGGREGATE);
				setState(3464);
				aggregate_with_argtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3466);
				match(ALTER);
				setState(3467);
				match(EXTENSION);
				setState(3468);
				name();
				setState(3469);
				add_drop();
				setState(3470);
				match(CAST);
				setState(3471);
				match(OPEN_PAREN);
				setState(3472);
				typename();
				setState(3473);
				match(AS);
				setState(3474);
				typename();
				setState(3475);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3477);
				match(ALTER);
				setState(3478);
				match(EXTENSION);
				setState(3479);
				name();
				setState(3480);
				add_drop();
				setState(3481);
				match(DOMAIN_P);
				setState(3482);
				typename();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3484);
				match(ALTER);
				setState(3485);
				match(EXTENSION);
				setState(3486);
				name();
				setState(3487);
				add_drop();
				setState(3488);
				match(FUNCTION);
				setState(3489);
				function_with_argtypes();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3491);
				match(ALTER);
				setState(3492);
				match(EXTENSION);
				setState(3493);
				name();
				setState(3494);
				add_drop();
				setState(3495);
				match(OPERATOR);
				setState(3496);
				operator_with_argtypes();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3498);
				match(ALTER);
				setState(3499);
				match(EXTENSION);
				setState(3500);
				name();
				setState(3501);
				add_drop();
				setState(3502);
				match(OPERATOR);
				setState(3503);
				match(CLASS);
				setState(3504);
				any_name();
				setState(3505);
				match(USING);
				setState(3506);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3508);
				match(ALTER);
				setState(3509);
				match(EXTENSION);
				setState(3510);
				name();
				setState(3511);
				add_drop();
				setState(3512);
				match(OPERATOR);
				setState(3513);
				match(FAMILY);
				setState(3514);
				any_name();
				setState(3515);
				match(USING);
				setState(3516);
				name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3518);
				match(ALTER);
				setState(3519);
				match(EXTENSION);
				setState(3520);
				name();
				setState(3521);
				add_drop();
				setState(3522);
				match(PROCEDURE);
				setState(3523);
				function_with_argtypes();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3525);
				match(ALTER);
				setState(3526);
				match(EXTENSION);
				setState(3527);
				name();
				setState(3528);
				add_drop();
				setState(3529);
				match(ROUTINE);
				setState(3530);
				function_with_argtypes();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3532);
				match(ALTER);
				setState(3533);
				match(EXTENSION);
				setState(3534);
				name();
				setState(3535);
				add_drop();
				setState(3536);
				match(TRANSFORM);
				setState(3537);
				match(FOR);
				setState(3538);
				typename();
				setState(3539);
				match(LANGUAGE);
				setState(3540);
				name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3542);
				match(ALTER);
				setState(3543);
				match(EXTENSION);
				setState(3544);
				name();
				setState(3545);
				add_drop();
				setState(3546);
				match(TYPE_P);
				setState(3547);
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatefdwstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_fdw_optionsContext opt_fdw_options() {
			return getRuleContext(Opt_fdw_optionsContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public CreatefdwstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfdwstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatefdwstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatefdwstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatefdwstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatefdwstmtContext createfdwstmt() throws RecognitionException {
		CreatefdwstmtContext _localctx = new CreatefdwstmtContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_createfdwstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3551);
			match(CREATE);
			setState(3552);
			match(FOREIGN);
			setState(3553);
			match(DATA_P);
			setState(3554);
			match(WRAPPER);
			setState(3555);
			name();
			setState(3556);
			opt_fdw_options();
			setState(3557);
			create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Fdw_optionContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public Fdw_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdw_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFdw_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFdw_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFdw_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fdw_optionContext fdw_option() throws RecognitionException {
		Fdw_optionContext _localctx = new Fdw_optionContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_fdw_option);
		try {
			setState(3567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3559);
				match(HANDLER);
				setState(3560);
				handler_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3561);
				match(NO);
				setState(3562);
				match(HANDLER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3563);
				match(VALIDATOR);
				setState(3564);
				handler_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3565);
				match(NO);
				setState(3566);
				match(VALIDATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Fdw_optionsContext extends ParserRuleContext {
		public List<Fdw_optionContext> fdw_option() {
			return getRuleContexts(Fdw_optionContext.class);
		}
		public Fdw_optionContext fdw_option(int i) {
			return getRuleContext(Fdw_optionContext.class,i);
		}
		public Fdw_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdw_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFdw_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFdw_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFdw_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fdw_optionsContext fdw_options() throws RecognitionException {
		Fdw_optionsContext _localctx = new Fdw_optionsContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_fdw_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3570); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3569);
				fdw_option();
				}
				}
				setState(3572); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==HANDLER || _la==NO || _la==VALIDATOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_fdw_optionsContext extends ParserRuleContext {
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public Opt_fdw_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_fdw_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_fdw_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_fdw_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_fdw_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fdw_optionsContext opt_fdw_options() throws RecognitionException {
		Opt_fdw_optionsContext _localctx = new Opt_fdw_optionsContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_opt_fdw_options);
		try {
			setState(3576);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HANDLER:
			case NO:
			case VALIDATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3574);
				fdw_options();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case OPTIONS:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterfdwstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_fdw_optionsContext opt_fdw_options() {
			return getRuleContext(Opt_fdw_optionsContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public AlterfdwstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfdwstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterfdwstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterfdwstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterfdwstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterfdwstmtContext alterfdwstmt() throws RecognitionException {
		AlterfdwstmtContext _localctx = new AlterfdwstmtContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_alterfdwstmt);
		try {
			setState(3593);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3578);
				match(ALTER);
				setState(3579);
				match(FOREIGN);
				setState(3580);
				match(DATA_P);
				setState(3581);
				match(WRAPPER);
				setState(3582);
				name();
				setState(3583);
				opt_fdw_options();
				setState(3584);
				alter_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3586);
				match(ALTER);
				setState(3587);
				match(FOREIGN);
				setState(3588);
				match(DATA_P);
				setState(3589);
				match(WRAPPER);
				setState(3590);
				name();
				setState(3591);
				fdw_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_generic_optionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Generic_option_listContext generic_option_list() {
			return getRuleContext(Generic_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Create_generic_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_generic_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_generic_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_generic_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_generic_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_generic_optionsContext create_generic_options() throws RecognitionException {
		Create_generic_optionsContext _localctx = new Create_generic_optionsContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_create_generic_options);
		try {
			setState(3601);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPTIONS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3595);
				match(OPTIONS);
				setState(3596);
				match(OPEN_PAREN);
				setState(3597);
				generic_option_list();
				setState(3598);
				match(CLOSE_PAREN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CHECK:
			case COLLATE:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case NULL_P:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case TABLE:
			case UNIQUE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case GENERATED:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Generic_option_listContext extends ParserRuleContext {
		public List<Generic_option_elemContext> generic_option_elem() {
			return getRuleContexts(Generic_option_elemContext.class);
		}
		public Generic_option_elemContext generic_option_elem(int i) {
			return getRuleContext(Generic_option_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Generic_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_listContext generic_option_list() throws RecognitionException {
		Generic_option_listContext _localctx = new Generic_option_listContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_generic_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3603);
			generic_option_elem();
			setState(3608);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3604);
				match(COMMA);
				setState(3605);
				generic_option_elem();
				}
				}
				setState(3610);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_generic_optionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Alter_generic_option_listContext alter_generic_option_list() {
			return getRuleContext(Alter_generic_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Alter_generic_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_generic_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_generic_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_generic_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_optionsContext alter_generic_options() throws RecognitionException {
		Alter_generic_optionsContext _localctx = new Alter_generic_optionsContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_alter_generic_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3611);
			match(OPTIONS);
			setState(3612);
			match(OPEN_PAREN);
			setState(3613);
			alter_generic_option_list();
			setState(3614);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_generic_option_listContext extends ParserRuleContext {
		public List<Alter_generic_option_elemContext> alter_generic_option_elem() {
			return getRuleContexts(Alter_generic_option_elemContext.class);
		}
		public Alter_generic_option_elemContext alter_generic_option_elem(int i) {
			return getRuleContext(Alter_generic_option_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_generic_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_generic_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_generic_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_generic_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_option_listContext alter_generic_option_list() throws RecognitionException {
		Alter_generic_option_listContext _localctx = new Alter_generic_option_listContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_alter_generic_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3616);
			alter_generic_option_elem();
			setState(3621);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3617);
				match(COMMA);
				setState(3618);
				alter_generic_option_elem();
				}
				}
				setState(3623);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_generic_option_elemContext extends ParserRuleContext {
		public Generic_option_elemContext generic_option_elem() {
			return getRuleContext(Generic_option_elemContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Generic_option_nameContext generic_option_name() {
			return getRuleContext(Generic_option_nameContext.class,0);
		}
		public Alter_generic_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_generic_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_generic_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_generic_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_option_elemContext alter_generic_option_elem() throws RecognitionException {
		Alter_generic_option_elemContext _localctx = new Alter_generic_option_elemContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_alter_generic_option_elem);
		try {
			setState(3631);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3624);
				generic_option_elem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3625);
				match(SET);
				setState(3626);
				generic_option_elem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3627);
				match(ADD_P);
				setState(3628);
				generic_option_elem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3629);
				match(DROP);
				setState(3630);
				generic_option_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Generic_option_elemContext extends ParserRuleContext {
		public Generic_option_nameContext generic_option_name() {
			return getRuleContext(Generic_option_nameContext.class,0);
		}
		public Generic_option_argContext generic_option_arg() {
			return getRuleContext(Generic_option_argContext.class,0);
		}
		public Generic_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_elemContext generic_option_elem() throws RecognitionException {
		Generic_option_elemContext _localctx = new Generic_option_elemContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_generic_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3633);
			generic_option_name();
			setState(3634);
			generic_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Generic_option_nameContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Generic_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_option_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_option_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_option_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_nameContext generic_option_name() throws RecognitionException {
		Generic_option_nameContext _localctx = new Generic_option_nameContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_generic_option_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3636);
			collabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Generic_option_argContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Generic_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_option_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_option_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_option_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_argContext generic_option_arg() throws RecognitionException {
		Generic_option_argContext _localctx = new Generic_option_argContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_generic_option_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3638);
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateforeignserverstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public Opt_typeContext opt_type() {
			return getRuleContext(Opt_typeContext.class,0);
		}
		public Opt_foreign_server_versionContext opt_foreign_server_version() {
			return getRuleContext(Opt_foreign_server_versionContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateforeignserverstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createforeignserverstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateforeignserverstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateforeignserverstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateforeignserverstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateforeignserverstmtContext createforeignserverstmt() throws RecognitionException {
		CreateforeignserverstmtContext _localctx = new CreateforeignserverstmtContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_createforeignserverstmt);
		try {
			setState(3665);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3640);
				match(CREATE);
				setState(3641);
				match(SERVER);
				setState(3642);
				name();
				setState(3643);
				opt_type();
				setState(3644);
				opt_foreign_server_version();
				setState(3645);
				match(FOREIGN);
				setState(3646);
				match(DATA_P);
				setState(3647);
				match(WRAPPER);
				setState(3648);
				name();
				setState(3649);
				create_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3651);
				match(CREATE);
				setState(3652);
				match(SERVER);
				setState(3653);
				match(IF_P);
				setState(3654);
				match(NOT);
				setState(3655);
				match(EXISTS);
				setState(3656);
				name();
				setState(3657);
				opt_type();
				setState(3658);
				opt_foreign_server_version();
				setState(3659);
				match(FOREIGN);
				setState(3660);
				match(DATA_P);
				setState(3661);
				match(WRAPPER);
				setState(3662);
				name();
				setState(3663);
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_typeContext extends ParserRuleContext {
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Opt_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_typeContext opt_type() throws RecognitionException {
		Opt_typeContext _localctx = new Opt_typeContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_opt_type);
		try {
			setState(3670);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TYPE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(3667);
				match(TYPE_P);
				setState(3668);
				sconst();
				}
				break;
			case FOREIGN:
			case VERSION_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Foreign_server_versionContext extends ParserRuleContext {
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Foreign_server_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreign_server_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterForeign_server_version(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitForeign_server_version(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitForeign_server_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Foreign_server_versionContext foreign_server_version() throws RecognitionException {
		Foreign_server_versionContext _localctx = new Foreign_server_versionContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_foreign_server_version);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3672);
			match(VERSION_P);
			setState(3675);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				{
				setState(3673);
				sconst();
				}
				break;
			case NULL_P:
				{
				setState(3674);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_foreign_server_versionContext extends ParserRuleContext {
		public Foreign_server_versionContext foreign_server_version() {
			return getRuleContext(Foreign_server_versionContext.class,0);
		}
		public Opt_foreign_server_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_foreign_server_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_foreign_server_version(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_foreign_server_version(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_foreign_server_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_foreign_server_versionContext opt_foreign_server_version() throws RecognitionException {
		Opt_foreign_server_versionContext _localctx = new Opt_foreign_server_versionContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_opt_foreign_server_version);
		try {
			setState(3679);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERSION_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(3677);
				foreign_server_version();
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterforeignserverstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public Foreign_server_versionContext foreign_server_version() {
			return getRuleContext(Foreign_server_versionContext.class,0);
		}
		public AlterforeignserverstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterforeignserverstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterforeignserverstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterforeignserverstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterforeignserverstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterforeignserverstmtContext alterforeignserverstmt() throws RecognitionException {
		AlterforeignserverstmtContext _localctx = new AlterforeignserverstmtContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_alterforeignserverstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3681);
			match(ALTER);
			setState(3682);
			match(SERVER);
			setState(3683);
			name();
			setState(3689);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPTIONS:
				{
				setState(3684);
				alter_generic_options();
				}
				break;
			case VERSION_P:
				{
				setState(3685);
				foreign_server_version();
				setState(3687);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(3686);
					alter_generic_options();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateforeigntablestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public OpttableelementlistContext opttableelementlist() {
			return getRuleContext(OpttableelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptinheritContext optinherit() {
			return getRuleContext(OptinheritContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public OpttypedtableelementlistContext opttypedtableelementlist() {
			return getRuleContext(OpttypedtableelementlistContext.class,0);
		}
		public PartitionboundspecContext partitionboundspec() {
			return getRuleContext(PartitionboundspecContext.class,0);
		}
		public CreateforeigntablestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createforeigntablestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateforeigntablestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateforeigntablestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateforeigntablestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateforeigntablestmtContext createforeigntablestmt() throws RecognitionException {
		CreateforeigntablestmtContext _localctx = new CreateforeigntablestmtContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_createforeigntablestmt);
		try {
			setState(3747);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3691);
				match(CREATE);
				setState(3692);
				match(FOREIGN);
				setState(3693);
				match(TABLE);
				setState(3694);
				qualified_name();
				setState(3695);
				match(OPEN_PAREN);
				setState(3696);
				opttableelementlist();
				setState(3697);
				match(CLOSE_PAREN);
				setState(3698);
				optinherit();
				setState(3699);
				match(SERVER);
				setState(3700);
				name();
				setState(3701);
				create_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3703);
				match(CREATE);
				setState(3704);
				match(FOREIGN);
				setState(3705);
				match(TABLE);
				setState(3706);
				match(IF_P);
				setState(3707);
				match(NOT);
				setState(3708);
				match(EXISTS);
				setState(3709);
				qualified_name();
				setState(3710);
				match(OPEN_PAREN);
				setState(3711);
				opttableelementlist();
				setState(3712);
				match(CLOSE_PAREN);
				setState(3713);
				optinherit();
				setState(3714);
				match(SERVER);
				setState(3715);
				name();
				setState(3716);
				create_generic_options();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3718);
				match(CREATE);
				setState(3719);
				match(FOREIGN);
				setState(3720);
				match(TABLE);
				setState(3721);
				qualified_name();
				setState(3722);
				match(PARTITION);
				setState(3723);
				match(OF);
				setState(3724);
				qualified_name();
				setState(3725);
				opttypedtableelementlist();
				setState(3726);
				partitionboundspec();
				setState(3727);
				match(SERVER);
				setState(3728);
				name();
				setState(3729);
				create_generic_options();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3731);
				match(CREATE);
				setState(3732);
				match(FOREIGN);
				setState(3733);
				match(TABLE);
				setState(3734);
				match(IF_P);
				setState(3735);
				match(NOT);
				setState(3736);
				match(EXISTS);
				setState(3737);
				qualified_name();
				setState(3738);
				match(PARTITION);
				setState(3739);
				match(OF);
				setState(3740);
				qualified_name();
				setState(3741);
				opttypedtableelementlist();
				setState(3742);
				partitionboundspec();
				setState(3743);
				match(SERVER);
				setState(3744);
				name();
				setState(3745);
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ImportforeignschemastmtContext extends ParserRuleContext {
		public TerminalNode IMPORT_P() { return getToken(PostgreSQLParser.IMPORT_P, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public Import_qualificationContext import_qualification() {
			return getRuleContext(Import_qualificationContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public ImportforeignschemastmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importforeignschemastmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterImportforeignschemastmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitImportforeignschemastmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitImportforeignschemastmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImportforeignschemastmtContext importforeignschemastmt() throws RecognitionException {
		ImportforeignschemastmtContext _localctx = new ImportforeignschemastmtContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_importforeignschemastmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3749);
			match(IMPORT_P);
			setState(3750);
			match(FOREIGN);
			setState(3751);
			match(SCHEMA);
			setState(3752);
			name();
			setState(3753);
			import_qualification();
			setState(3754);
			match(FROM);
			setState(3755);
			match(SERVER);
			setState(3756);
			name();
			setState(3757);
			match(INTO);
			setState(3758);
			name();
			setState(3759);
			create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Import_qualification_typeContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode EXCEPT() { return getToken(PostgreSQLParser.EXCEPT, 0); }
		public Import_qualification_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_import_qualification_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterImport_qualification_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitImport_qualification_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitImport_qualification_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Import_qualification_typeContext import_qualification_type() throws RecognitionException {
		Import_qualification_typeContext _localctx = new Import_qualification_typeContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_import_qualification_type);
		try {
			setState(3764);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3761);
				match(LIMIT);
				setState(3762);
				match(TO);
				}
				break;
			case EXCEPT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3763);
				match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Import_qualificationContext extends ParserRuleContext {
		public Import_qualification_typeContext import_qualification_type() {
			return getRuleContext(Import_qualification_typeContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Import_qualificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_import_qualification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterImport_qualification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitImport_qualification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitImport_qualification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Import_qualificationContext import_qualification() throws RecognitionException {
		Import_qualificationContext _localctx = new Import_qualificationContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_import_qualification);
		try {
			setState(3772);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXCEPT:
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3766);
				import_qualification_type();
				setState(3767);
				match(OPEN_PAREN);
				setState(3768);
				relation_expr_list();
				setState(3769);
				match(CLOSE_PAREN);
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateusermappingstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateusermappingstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createusermappingstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateusermappingstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateusermappingstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateusermappingstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateusermappingstmtContext createusermappingstmt() throws RecognitionException {
		CreateusermappingstmtContext _localctx = new CreateusermappingstmtContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_createusermappingstmt);
		try {
			setState(3795);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3774);
				match(CREATE);
				setState(3775);
				match(USER);
				setState(3776);
				match(MAPPING);
				setState(3777);
				match(FOR);
				setState(3778);
				auth_ident();
				setState(3779);
				match(SERVER);
				setState(3780);
				name();
				setState(3781);
				create_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3783);
				match(CREATE);
				setState(3784);
				match(USER);
				setState(3785);
				match(MAPPING);
				setState(3786);
				match(IF_P);
				setState(3787);
				match(NOT);
				setState(3788);
				match(EXISTS);
				setState(3789);
				match(FOR);
				setState(3790);
				auth_ident();
				setState(3791);
				match(SERVER);
				setState(3792);
				name();
				setState(3793);
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Auth_identContext extends ParserRuleContext {
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public Auth_identContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auth_ident; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAuth_ident(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAuth_ident(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAuth_ident(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Auth_identContext auth_ident() throws RecognitionException {
		Auth_identContext _localctx = new Auth_identContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_auth_ident);
		try {
			setState(3799);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FETCH:
			case SESSION_USER:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3797);
				rolespec();
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3798);
				match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropusermappingstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DropusermappingstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropusermappingstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropusermappingstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropusermappingstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropusermappingstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropusermappingstmtContext dropusermappingstmt() throws RecognitionException {
		DropusermappingstmtContext _localctx = new DropusermappingstmtContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_dropusermappingstmt);
		try {
			setState(3819);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3801);
				match(DROP);
				setState(3802);
				match(USER);
				setState(3803);
				match(MAPPING);
				setState(3804);
				match(FOR);
				setState(3805);
				auth_ident();
				setState(3806);
				match(SERVER);
				setState(3807);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3809);
				match(DROP);
				setState(3810);
				match(USER);
				setState(3811);
				match(MAPPING);
				setState(3812);
				match(IF_P);
				setState(3813);
				match(EXISTS);
				setState(3814);
				match(FOR);
				setState(3815);
				auth_ident();
				setState(3816);
				match(SERVER);
				setState(3817);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterusermappingstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public AlterusermappingstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterusermappingstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterusermappingstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterusermappingstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterusermappingstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterusermappingstmtContext alterusermappingstmt() throws RecognitionException {
		AlterusermappingstmtContext _localctx = new AlterusermappingstmtContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_alterusermappingstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3821);
			match(ALTER);
			setState(3822);
			match(USER);
			setState(3823);
			match(MAPPING);
			setState(3824);
			match(FOR);
			setState(3825);
			auth_ident();
			setState(3826);
			match(SERVER);
			setState(3827);
			name();
			setState(3828);
			alter_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatepolicystmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public RowsecuritydefaultpermissiveContext rowsecuritydefaultpermissive() {
			return getRuleContext(RowsecuritydefaultpermissiveContext.class,0);
		}
		public RowsecuritydefaultforcmdContext rowsecuritydefaultforcmd() {
			return getRuleContext(RowsecuritydefaultforcmdContext.class,0);
		}
		public RowsecuritydefaulttoroleContext rowsecuritydefaulttorole() {
			return getRuleContext(RowsecuritydefaulttoroleContext.class,0);
		}
		public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
			return getRuleContext(RowsecurityoptionalexprContext.class,0);
		}
		public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
			return getRuleContext(RowsecurityoptionalwithcheckContext.class,0);
		}
		public CreatepolicystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createpolicystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatepolicystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatepolicystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatepolicystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatepolicystmtContext createpolicystmt() throws RecognitionException {
		CreatepolicystmtContext _localctx = new CreatepolicystmtContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_createpolicystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3830);
			match(CREATE);
			setState(3831);
			match(POLICY);
			setState(3832);
			name();
			setState(3833);
			match(ON);
			setState(3834);
			qualified_name();
			setState(3835);
			rowsecuritydefaultpermissive();
			setState(3836);
			rowsecuritydefaultforcmd();
			setState(3837);
			rowsecuritydefaulttorole();
			setState(3838);
			rowsecurityoptionalexpr();
			setState(3839);
			rowsecurityoptionalwithcheck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterpolicystmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public RowsecurityoptionaltoroleContext rowsecurityoptionaltorole() {
			return getRuleContext(RowsecurityoptionaltoroleContext.class,0);
		}
		public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
			return getRuleContext(RowsecurityoptionalexprContext.class,0);
		}
		public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
			return getRuleContext(RowsecurityoptionalwithcheckContext.class,0);
		}
		public AlterpolicystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterpolicystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterpolicystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterpolicystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterpolicystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterpolicystmtContext alterpolicystmt() throws RecognitionException {
		AlterpolicystmtContext _localctx = new AlterpolicystmtContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_alterpolicystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3841);
			match(ALTER);
			setState(3842);
			match(POLICY);
			setState(3843);
			name();
			setState(3844);
			match(ON);
			setState(3845);
			qualified_name();
			setState(3846);
			rowsecurityoptionaltorole();
			setState(3847);
			rowsecurityoptionalexpr();
			setState(3848);
			rowsecurityoptionalwithcheck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowsecurityoptionalexprContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RowsecurityoptionalexprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecurityoptionalexpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecurityoptionalexpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecurityoptionalexpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecurityoptionalexpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecurityoptionalexprContext rowsecurityoptionalexpr() throws RecognitionException {
		RowsecurityoptionalexprContext _localctx = new RowsecurityoptionalexprContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_rowsecurityoptionalexpr);
		try {
			setState(3856);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3850);
				match(USING);
				setState(3851);
				match(OPEN_PAREN);
				setState(3852);
				a_expr();
				setState(3853);
				match(CLOSE_PAREN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowsecurityoptionalwithcheckContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RowsecurityoptionalwithcheckContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecurityoptionalwithcheck; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecurityoptionalwithcheck(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecurityoptionalwithcheck(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecurityoptionalwithcheck(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() throws RecognitionException {
		RowsecurityoptionalwithcheckContext _localctx = new RowsecurityoptionalwithcheckContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_rowsecurityoptionalwithcheck);
		try {
			setState(3865);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3858);
				match(WITH);
				setState(3859);
				match(CHECK);
				setState(3860);
				match(OPEN_PAREN);
				setState(3861);
				a_expr();
				setState(3862);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowsecuritydefaulttoroleContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public RowsecuritydefaulttoroleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecuritydefaulttorole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecuritydefaulttorole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecuritydefaulttorole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecuritydefaulttorole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecuritydefaulttoroleContext rowsecuritydefaulttorole() throws RecognitionException {
		RowsecuritydefaulttoroleContext _localctx = new RowsecuritydefaulttoroleContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_rowsecuritydefaulttorole);
		try {
			setState(3870);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				enterOuterAlt(_localctx, 1);
				{
				setState(3867);
				match(TO);
				setState(3868);
				role_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowsecurityoptionaltoroleContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public RowsecurityoptionaltoroleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecurityoptionaltorole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecurityoptionaltorole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecurityoptionaltorole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecurityoptionaltorole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecurityoptionaltoroleContext rowsecurityoptionaltorole() throws RecognitionException {
		RowsecurityoptionaltoroleContext _localctx = new RowsecurityoptionaltoroleContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_rowsecurityoptionaltorole);
		try {
			setState(3875);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				enterOuterAlt(_localctx, 1);
				{
				setState(3872);
				match(TO);
				setState(3873);
				role_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowsecuritydefaultpermissiveContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RowsecuritydefaultpermissiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecuritydefaultpermissive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecuritydefaultpermissive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecuritydefaultpermissive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecuritydefaultpermissive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecuritydefaultpermissiveContext rowsecuritydefaultpermissive() throws RecognitionException {
		RowsecuritydefaultpermissiveContext _localctx = new RowsecuritydefaultpermissiveContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_rowsecuritydefaultpermissive);
		try {
			setState(3880);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3877);
				match(AS);
				setState(3878);
				identifier();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case TO:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowsecuritydefaultforcmdContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Row_security_cmdContext row_security_cmd() {
			return getRuleContext(Row_security_cmdContext.class,0);
		}
		public RowsecuritydefaultforcmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecuritydefaultforcmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecuritydefaultforcmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecuritydefaultforcmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecuritydefaultforcmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecuritydefaultforcmdContext rowsecuritydefaultforcmd() throws RecognitionException {
		RowsecuritydefaultforcmdContext _localctx = new RowsecuritydefaultforcmdContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_rowsecuritydefaultforcmd);
		try {
			setState(3885);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3882);
				match(FOR);
				setState(3883);
				row_security_cmd();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case TO:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Row_security_cmdContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public Row_security_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_security_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRow_security_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRow_security_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRow_security_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_security_cmdContext row_security_cmd() throws RecognitionException {
		Row_security_cmdContext _localctx = new Row_security_cmdContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_row_security_cmd);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3887);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==SELECT || _la==DELETE_P || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateamstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Am_typeContext am_type() {
			return getRuleContext(Am_typeContext.class,0);
		}
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public CreateamstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createamstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateamstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateamstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateamstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateamstmtContext createamstmt() throws RecognitionException {
		CreateamstmtContext _localctx = new CreateamstmtContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_createamstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3889);
			match(CREATE);
			setState(3890);
			match(ACCESS);
			setState(3891);
			match(METHOD);
			setState(3892);
			name();
			setState(3893);
			match(TYPE_P);
			setState(3894);
			am_type();
			setState(3895);
			match(HANDLER);
			setState(3896);
			handler_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Am_typeContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Am_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_am_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAm_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAm_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAm_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Am_typeContext am_type() throws RecognitionException {
		Am_typeContext _localctx = new Am_typeContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_am_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3898);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatetrigstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TriggeractiontimeContext triggeractiontime() {
			return getRuleContext(TriggeractiontimeContext.class,0);
		}
		public TriggereventsContext triggerevents() {
			return getRuleContext(TriggereventsContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TriggerreferencingContext triggerreferencing() {
			return getRuleContext(TriggerreferencingContext.class,0);
		}
		public TriggerforspecContext triggerforspec() {
			return getRuleContext(TriggerforspecContext.class,0);
		}
		public TriggerwhenContext triggerwhen() {
			return getRuleContext(TriggerwhenContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public Function_or_procedureContext function_or_procedure() {
			return getRuleContext(Function_or_procedureContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TriggerfuncargsContext triggerfuncargs() {
			return getRuleContext(TriggerfuncargsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public OptconstrfromtableContext optconstrfromtable() {
			return getRuleContext(OptconstrfromtableContext.class,0);
		}
		public ConstraintattributespecContext constraintattributespec() {
			return getRuleContext(ConstraintattributespecContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(PostgreSQLParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public CreatetrigstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createtrigstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatetrigstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatetrigstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatetrigstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatetrigstmtContext createtrigstmt() throws RecognitionException {
		CreatetrigstmtContext _localctx = new CreatetrigstmtContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_createtrigstmt);
		try {
			setState(3938);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3900);
				match(CREATE);
				setState(3901);
				match(TRIGGER);
				setState(3902);
				name();
				setState(3903);
				triggeractiontime();
				setState(3904);
				triggerevents();
				setState(3905);
				match(ON);
				setState(3906);
				qualified_name();
				setState(3907);
				triggerreferencing();
				setState(3908);
				triggerforspec();
				setState(3909);
				triggerwhen();
				setState(3910);
				match(EXECUTE);
				setState(3911);
				function_or_procedure();
				setState(3912);
				func_name();
				setState(3913);
				match(OPEN_PAREN);
				setState(3914);
				triggerfuncargs();
				setState(3915);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3917);
				match(CREATE);
				setState(3918);
				match(CONSTRAINT);
				setState(3919);
				match(TRIGGER);
				setState(3920);
				name();
				setState(3921);
				match(AFTER);
				setState(3922);
				triggerevents();
				setState(3923);
				match(ON);
				setState(3924);
				qualified_name();
				setState(3925);
				optconstrfromtable();
				setState(3926);
				constraintattributespec();
				setState(3927);
				match(FOR);
				setState(3928);
				match(EACH);
				setState(3929);
				match(ROW);
				setState(3930);
				triggerwhen();
				setState(3931);
				match(EXECUTE);
				setState(3932);
				function_or_procedure();
				setState(3933);
				func_name();
				setState(3934);
				match(OPEN_PAREN);
				setState(3935);
				triggerfuncargs();
				setState(3936);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggeractiontimeContext extends ParserRuleContext {
		public TerminalNode BEFORE() { return getToken(PostgreSQLParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(PostgreSQLParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TriggeractiontimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggeractiontime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggeractiontime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggeractiontime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggeractiontime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggeractiontimeContext triggeractiontime() throws RecognitionException {
		TriggeractiontimeContext _localctx = new TriggeractiontimeContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_triggeractiontime);
		try {
			setState(3944);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEFORE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3940);
				match(BEFORE);
				}
				break;
			case AFTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3941);
				match(AFTER);
				}
				break;
			case INSTEAD:
				enterOuterAlt(_localctx, 3);
				{
				setState(3942);
				match(INSTEAD);
				setState(3943);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggereventsContext extends ParserRuleContext {
		public List<TriggeroneeventContext> triggeroneevent() {
			return getRuleContexts(TriggeroneeventContext.class);
		}
		public TriggeroneeventContext triggeroneevent(int i) {
			return getRuleContext(TriggeroneeventContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(PostgreSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PostgreSQLParser.OR, i);
		}
		public TriggereventsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerevents; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerevents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerevents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerevents(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggereventsContext triggerevents() throws RecognitionException {
		TriggereventsContext _localctx = new TriggereventsContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_triggerevents);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3946);
			triggeroneevent();
			setState(3951);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(3947);
				match(OR);
				setState(3948);
				triggeroneevent();
				}
				}
				setState(3953);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggeroneeventContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLParser.TRUNCATE, 0); }
		public TriggeroneeventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggeroneevent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggeroneevent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggeroneevent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggeroneevent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggeroneeventContext triggeroneevent() throws RecognitionException {
		TriggeroneeventContext _localctx = new TriggeroneeventContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_triggeroneevent);
		try {
			setState(3961);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3954);
				match(INSERT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3955);
				match(DELETE_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3956);
				match(UPDATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3957);
				match(UPDATE);
				setState(3958);
				match(OF);
				setState(3959);
				columnlist();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3960);
				match(TRUNCATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerreferencingContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(PostgreSQLParser.REFERENCING, 0); }
		public TriggertransitionsContext triggertransitions() {
			return getRuleContext(TriggertransitionsContext.class,0);
		}
		public TriggerreferencingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerreferencing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerreferencing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerreferencing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerreferencing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerreferencingContext triggerreferencing() throws RecognitionException {
		TriggerreferencingContext _localctx = new TriggerreferencingContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_triggerreferencing);
		try {
			setState(3966);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REFERENCING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3963);
				match(REFERENCING);
				setState(3964);
				triggertransitions();
				}
				break;
			case FOR:
			case WHEN:
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggertransitionsContext extends ParserRuleContext {
		public List<TriggertransitionContext> triggertransition() {
			return getRuleContexts(TriggertransitionContext.class);
		}
		public TriggertransitionContext triggertransition(int i) {
			return getRuleContext(TriggertransitionContext.class,i);
		}
		public TriggertransitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggertransitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggertransitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggertransitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggertransitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggertransitionsContext triggertransitions() throws RecognitionException {
		TriggertransitionsContext _localctx = new TriggertransitionsContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_triggertransitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3969); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3968);
				triggertransition();
				}
				}
				setState(3971); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==NEW || _la==OLD );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggertransitionContext extends ParserRuleContext {
		public TransitionoldornewContext transitionoldornew() {
			return getRuleContext(TransitionoldornewContext.class,0);
		}
		public TransitionrowortableContext transitionrowortable() {
			return getRuleContext(TransitionrowortableContext.class,0);
		}
		public Opt_asContext opt_as() {
			return getRuleContext(Opt_asContext.class,0);
		}
		public TransitionrelnameContext transitionrelname() {
			return getRuleContext(TransitionrelnameContext.class,0);
		}
		public TriggertransitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggertransition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggertransition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggertransition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggertransition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggertransitionContext triggertransition() throws RecognitionException {
		TriggertransitionContext _localctx = new TriggertransitionContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_triggertransition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3973);
			transitionoldornew();
			setState(3974);
			transitionrowortable();
			setState(3975);
			opt_as();
			setState(3976);
			transitionrelname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransitionoldornewContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(PostgreSQLParser.NEW, 0); }
		public TerminalNode OLD() { return getToken(PostgreSQLParser.OLD, 0); }
		public TransitionoldornewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionoldornew; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransitionoldornew(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransitionoldornew(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransitionoldornew(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionoldornewContext transitionoldornew() throws RecognitionException {
		TransitionoldornewContext _localctx = new TransitionoldornewContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_transitionoldornew);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3978);
			_la = _input.LA(1);
			if ( !(_la==NEW || _la==OLD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransitionrowortableContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TransitionrowortableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionrowortable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransitionrowortable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransitionrowortable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransitionrowortable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionrowortableContext transitionrowortable() throws RecognitionException {
		TransitionrowortableContext _localctx = new TransitionrowortableContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_transitionrowortable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3980);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==ROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransitionrelnameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TransitionrelnameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionrelname; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransitionrelname(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransitionrelname(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransitionrelname(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionrelnameContext transitionrelname() throws RecognitionException {
		TransitionrelnameContext _localctx = new TransitionrelnameContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_transitionrelname);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3982);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerforspecContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TriggerforopteachContext triggerforopteach() {
			return getRuleContext(TriggerforopteachContext.class,0);
		}
		public TriggerfortypeContext triggerfortype() {
			return getRuleContext(TriggerfortypeContext.class,0);
		}
		public TriggerforspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerforspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerforspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerforspec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerforspec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerforspecContext triggerforspec() throws RecognitionException {
		TriggerforspecContext _localctx = new TriggerforspecContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_triggerforspec);
		try {
			setState(3989);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3984);
				match(FOR);
				setState(3985);
				triggerforopteach();
				setState(3986);
				triggerfortype();
				}
				break;
			case WHEN:
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerforopteachContext extends ParserRuleContext {
		public TerminalNode EACH() { return getToken(PostgreSQLParser.EACH, 0); }
		public TriggerforopteachContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerforopteach; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerforopteach(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerforopteach(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerforopteach(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerforopteachContext triggerforopteach() throws RecognitionException {
		TriggerforopteachContext _localctx = new TriggerforopteachContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_triggerforopteach);
		try {
			setState(3993);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EACH:
				enterOuterAlt(_localctx, 1);
				{
				setState(3991);
				match(EACH);
				}
				break;
			case STATEMENT:
			case ROW:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerfortypeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode STATEMENT() { return getToken(PostgreSQLParser.STATEMENT, 0); }
		public TriggerfortypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerfortype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerfortype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerfortype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerfortype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerfortypeContext triggerfortype() throws RecognitionException {
		TriggerfortypeContext _localctx = new TriggerfortypeContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_triggerfortype);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3995);
			_la = _input.LA(1);
			if ( !(_la==STATEMENT || _la==ROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerwhenContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TriggerwhenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerwhen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerwhen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerwhen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerwhen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerwhenContext triggerwhen() throws RecognitionException {
		TriggerwhenContext _localctx = new TriggerwhenContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_triggerwhen);
		try {
			setState(4003);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3997);
				match(WHEN);
				setState(3998);
				match(OPEN_PAREN);
				setState(3999);
				a_expr();
				setState(4000);
				match(CLOSE_PAREN);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_or_procedureContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public Function_or_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_or_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunction_or_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunction_or_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunction_or_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_or_procedureContext function_or_procedure() throws RecognitionException {
		Function_or_procedureContext _localctx = new Function_or_procedureContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_function_or_procedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4005);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerfuncargsContext extends ParserRuleContext {
		public List<TriggerfuncargContext> triggerfuncarg() {
			return getRuleContexts(TriggerfuncargContext.class);
		}
		public TriggerfuncargContext triggerfuncarg(int i) {
			return getRuleContext(TriggerfuncargContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TriggerfuncargsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerfuncargs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerfuncargs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerfuncargs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerfuncargs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerfuncargsContext triggerfuncargs() throws RecognitionException {
		TriggerfuncargsContext _localctx = new TriggerfuncargsContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_triggerfuncargs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4009);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FOREIGN:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case IN_P:
			case INITIALLY:
			case INTERSECT:
			case LATERAL_P:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				{
				setState(4007);
				triggerfuncarg();
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4015);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4011);
				match(COMMA);
				setState(4012);
				triggerfuncarg();
				}
				}
				setState(4017);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerfuncargContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public FconstContext fconst() {
			return getRuleContext(FconstContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public TriggerfuncargContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerfuncarg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerfuncarg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerfuncarg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerfuncarg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerfuncargContext triggerfuncarg() throws RecognitionException {
		TriggerfuncargContext _localctx = new TriggerfuncargContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_triggerfuncarg);
		try {
			setState(4022);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Integral:
				enterOuterAlt(_localctx, 1);
				{
				setState(4018);
				iconst();
				}
				break;
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(4019);
				fconst();
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 3);
				{
				setState(4020);
				sconst();
				}
				break;
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FOREIGN:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case IN_P:
			case INITIALLY:
			case INTERSECT:
			case LATERAL_P:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 4);
				{
				setState(4021);
				collabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptconstrfromtableContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OptconstrfromtableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optconstrfromtable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptconstrfromtable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptconstrfromtable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptconstrfromtable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptconstrfromtableContext optconstrfromtable() throws RecognitionException {
		OptconstrfromtableContext _localctx = new OptconstrfromtableContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_optconstrfromtable);
		try {
			setState(4027);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
				enterOuterAlt(_localctx, 1);
				{
				setState(4024);
				match(FROM);
				setState(4025);
				qualified_name();
				}
				break;
			case DEFERRABLE:
			case FOR:
			case INITIALLY:
			case NOT:
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintattributespecContext extends ParserRuleContext {
		public List<ConstraintattributeElemContext> constraintattributeElem() {
			return getRuleContexts(ConstraintattributeElemContext.class);
		}
		public ConstraintattributeElemContext constraintattributeElem(int i) {
			return getRuleContext(ConstraintattributeElemContext.class,i);
		}
		public ConstraintattributespecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintattributespec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraintattributespec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraintattributespec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraintattributespec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintattributespecContext constraintattributespec() throws RecognitionException {
		ConstraintattributespecContext _localctx = new ConstraintattributespecContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_constraintattributespec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4032);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 8421377L) != 0) || _la==NO) {
				{
				{
				setState(4029);
				constraintattributeElem();
				}
				}
				setState(4034);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintattributeElemContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLParser.INITIALLY, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode VALID() { return getToken(PostgreSQLParser.VALID, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public ConstraintattributeElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintattributeElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraintattributeElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraintattributeElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraintattributeElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintattributeElemContext constraintattributeElem() throws RecognitionException {
		ConstraintattributeElemContext _localctx = new ConstraintattributeElemContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_constraintattributeElem);
		try {
			setState(4046);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4035);
				match(NOT);
				setState(4036);
				match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4037);
				match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4038);
				match(INITIALLY);
				setState(4039);
				match(IMMEDIATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4040);
				match(INITIALLY);
				setState(4041);
				match(DEFERRED);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4042);
				match(NOT);
				setState(4043);
				match(VALID);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4044);
				match(NO);
				setState(4045);
				match(INHERIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateeventtrigstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public Function_or_procedureContext function_or_procedure() {
			return getRuleContext(Function_or_procedureContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public Event_trigger_when_listContext event_trigger_when_list() {
			return getRuleContext(Event_trigger_when_listContext.class,0);
		}
		public CreateeventtrigstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createeventtrigstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateeventtrigstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateeventtrigstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateeventtrigstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateeventtrigstmtContext createeventtrigstmt() throws RecognitionException {
		CreateeventtrigstmtContext _localctx = new CreateeventtrigstmtContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_createeventtrigstmt);
		try {
			setState(4074);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4048);
				match(CREATE);
				setState(4049);
				match(EVENT);
				setState(4050);
				match(TRIGGER);
				setState(4051);
				name();
				setState(4052);
				match(ON);
				setState(4053);
				collabel();
				setState(4054);
				match(EXECUTE);
				setState(4055);
				function_or_procedure();
				setState(4056);
				func_name();
				setState(4057);
				match(OPEN_PAREN);
				setState(4058);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4060);
				match(CREATE);
				setState(4061);
				match(EVENT);
				setState(4062);
				match(TRIGGER);
				setState(4063);
				name();
				setState(4064);
				match(ON);
				setState(4065);
				collabel();
				setState(4066);
				match(WHEN);
				setState(4067);
				event_trigger_when_list();
				setState(4068);
				match(EXECUTE);
				setState(4069);
				function_or_procedure();
				setState(4070);
				func_name();
				setState(4071);
				match(OPEN_PAREN);
				setState(4072);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Event_trigger_when_listContext extends ParserRuleContext {
		public List<Event_trigger_when_itemContext> event_trigger_when_item() {
			return getRuleContexts(Event_trigger_when_itemContext.class);
		}
		public Event_trigger_when_itemContext event_trigger_when_item(int i) {
			return getRuleContext(Event_trigger_when_itemContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(PostgreSQLParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(PostgreSQLParser.AND, i);
		}
		public Event_trigger_when_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_trigger_when_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEvent_trigger_when_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEvent_trigger_when_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEvent_trigger_when_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_trigger_when_listContext event_trigger_when_list() throws RecognitionException {
		Event_trigger_when_listContext _localctx = new Event_trigger_when_listContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_event_trigger_when_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4076);
			event_trigger_when_item();
			setState(4081);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND) {
				{
				{
				setState(4077);
				match(AND);
				setState(4078);
				event_trigger_when_item();
				}
				}
				setState(4083);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Event_trigger_when_itemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Event_trigger_value_listContext event_trigger_value_list() {
			return getRuleContext(Event_trigger_value_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Event_trigger_when_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_trigger_when_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEvent_trigger_when_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEvent_trigger_when_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEvent_trigger_when_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_trigger_when_itemContext event_trigger_when_item() throws RecognitionException {
		Event_trigger_when_itemContext _localctx = new Event_trigger_when_itemContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_event_trigger_when_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4084);
			colid();
			setState(4085);
			match(IN_P);
			setState(4086);
			match(OPEN_PAREN);
			setState(4087);
			event_trigger_value_list();
			setState(4088);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Event_trigger_value_listContext extends ParserRuleContext {
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Event_trigger_value_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_trigger_value_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEvent_trigger_value_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEvent_trigger_value_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEvent_trigger_value_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_trigger_value_listContext event_trigger_value_list() throws RecognitionException {
		Event_trigger_value_listContext _localctx = new Event_trigger_value_listContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_event_trigger_value_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4090);
			sconst();
			setState(4095);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4091);
				match(COMMA);
				setState(4092);
				sconst();
				}
				}
				setState(4097);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltereventtrigstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Enable_triggerContext enable_trigger() {
			return getRuleContext(Enable_triggerContext.class,0);
		}
		public AltereventtrigstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altereventtrigstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltereventtrigstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltereventtrigstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltereventtrigstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltereventtrigstmtContext altereventtrigstmt() throws RecognitionException {
		AltereventtrigstmtContext _localctx = new AltereventtrigstmtContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_altereventtrigstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4098);
			match(ALTER);
			setState(4099);
			match(EVENT);
			setState(4100);
			match(TRIGGER);
			setState(4101);
			name();
			setState(4102);
			enable_trigger();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Enable_triggerContext extends ParserRuleContext {
		public TerminalNode ENABLE_P() { return getToken(PostgreSQLParser.ENABLE_P, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLParser.REPLICA, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode DISABLE_P() { return getToken(PostgreSQLParser.DISABLE_P, 0); }
		public Enable_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enable_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEnable_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEnable_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEnable_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enable_triggerContext enable_trigger() throws RecognitionException {
		Enable_triggerContext _localctx = new Enable_triggerContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_enable_trigger);
		try {
			setState(4110);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4104);
				match(ENABLE_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4105);
				match(ENABLE_P);
				setState(4106);
				match(REPLICA);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4107);
				match(ENABLE_P);
				setState(4108);
				match(ALWAYS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4109);
				match(DISABLE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateassertionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode ASSERTION() { return getToken(PostgreSQLParser.ASSERTION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstraintattributespecContext constraintattributespec() {
			return getRuleContext(ConstraintattributespecContext.class,0);
		}
		public CreateassertionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createassertionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateassertionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateassertionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateassertionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateassertionstmtContext createassertionstmt() throws RecognitionException {
		CreateassertionstmtContext _localctx = new CreateassertionstmtContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_createassertionstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4112);
			match(CREATE);
			setState(4113);
			match(ASSERTION);
			setState(4114);
			any_name();
			setState(4115);
			match(CHECK);
			setState(4116);
			match(OPEN_PAREN);
			setState(4117);
			a_expr();
			setState(4118);
			match(CLOSE_PAREN);
			setState(4119);
			constraintattributespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefinestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public Old_aggr_definitionContext old_aggr_definition() {
			return getRuleContext(Old_aggr_definitionContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public OpttablefuncelementlistContext opttablefuncelementlist() {
			return getRuleContext(OpttablefuncelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode ENUM_P() { return getToken(PostgreSQLParser.ENUM_P, 0); }
		public Opt_enum_val_listContext opt_enum_val_list() {
			return getRuleContext(Opt_enum_val_listContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(PostgreSQLParser.RANGE, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public DefinestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefinestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefinestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefinestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinestmtContext definestmt() throws RecognitionException {
		DefinestmtContext _localctx = new DefinestmtContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_definestmt);
		try {
			setState(4227);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4121);
				match(CREATE);
				setState(4122);
				opt_or_replace();
				setState(4123);
				match(AGGREGATE);
				setState(4124);
				func_name();
				setState(4125);
				aggr_args();
				setState(4126);
				definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4128);
				match(CREATE);
				setState(4129);
				opt_or_replace();
				setState(4130);
				match(AGGREGATE);
				setState(4131);
				func_name();
				setState(4132);
				old_aggr_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4134);
				match(CREATE);
				setState(4135);
				match(OPERATOR);
				setState(4136);
				any_operator();
				setState(4137);
				definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4139);
				match(CREATE);
				setState(4140);
				match(TYPE_P);
				setState(4141);
				any_name();
				setState(4142);
				definition();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4144);
				match(CREATE);
				setState(4145);
				match(TYPE_P);
				setState(4146);
				any_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4147);
				match(CREATE);
				setState(4148);
				match(TYPE_P);
				setState(4149);
				any_name();
				setState(4150);
				match(AS);
				setState(4151);
				match(OPEN_PAREN);
				setState(4152);
				opttablefuncelementlist();
				setState(4153);
				match(CLOSE_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4155);
				match(CREATE);
				setState(4156);
				match(TYPE_P);
				setState(4157);
				any_name();
				setState(4158);
				match(AS);
				setState(4159);
				match(ENUM_P);
				setState(4160);
				match(OPEN_PAREN);
				setState(4161);
				opt_enum_val_list();
				setState(4162);
				match(CLOSE_PAREN);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4164);
				match(CREATE);
				setState(4165);
				match(TYPE_P);
				setState(4166);
				any_name();
				setState(4167);
				match(AS);
				setState(4168);
				match(RANGE);
				setState(4169);
				definition();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4171);
				match(CREATE);
				setState(4172);
				match(TEXT_P);
				setState(4173);
				match(SEARCH);
				setState(4174);
				match(PARSER);
				setState(4175);
				any_name();
				setState(4176);
				definition();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4178);
				match(CREATE);
				setState(4179);
				match(TEXT_P);
				setState(4180);
				match(SEARCH);
				setState(4181);
				match(DICTIONARY);
				setState(4182);
				any_name();
				setState(4183);
				definition();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4185);
				match(CREATE);
				setState(4186);
				match(TEXT_P);
				setState(4187);
				match(SEARCH);
				setState(4188);
				match(TEMPLATE);
				setState(4189);
				any_name();
				setState(4190);
				definition();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4192);
				match(CREATE);
				setState(4193);
				match(TEXT_P);
				setState(4194);
				match(SEARCH);
				setState(4195);
				match(CONFIGURATION);
				setState(4196);
				any_name();
				setState(4197);
				definition();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4199);
				match(CREATE);
				setState(4200);
				match(COLLATION);
				setState(4201);
				any_name();
				setState(4202);
				definition();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4204);
				match(CREATE);
				setState(4205);
				match(COLLATION);
				setState(4206);
				match(IF_P);
				setState(4207);
				match(NOT);
				setState(4208);
				match(EXISTS);
				setState(4209);
				any_name();
				setState(4210);
				definition();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4212);
				match(CREATE);
				setState(4213);
				match(COLLATION);
				setState(4214);
				any_name();
				setState(4215);
				match(FROM);
				setState(4216);
				any_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4218);
				match(CREATE);
				setState(4219);
				match(COLLATION);
				setState(4220);
				match(IF_P);
				setState(4221);
				match(NOT);
				setState(4222);
				match(EXISTS);
				setState(4223);
				any_name();
				setState(4224);
				match(FROM);
				setState(4225);
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefinitionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Def_listContext def_list() {
			return getRuleContext(Def_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public DefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinitionContext definition() throws RecognitionException {
		DefinitionContext _localctx = new DefinitionContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4229);
			match(OPEN_PAREN);
			setState(4230);
			def_list();
			setState(4231);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Def_listContext extends ParserRuleContext {
		public List<Def_elemContext> def_elem() {
			return getRuleContexts(Def_elemContext.class);
		}
		public Def_elemContext def_elem(int i) {
			return getRuleContext(Def_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Def_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDef_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDef_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDef_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_listContext def_list() throws RecognitionException {
		Def_listContext _localctx = new Def_listContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_def_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4233);
			def_elem();
			setState(4238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4234);
				match(COMMA);
				setState(4235);
				def_elem();
				}
				}
				setState(4240);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Def_elemContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public Def_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDef_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDef_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDef_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_elemContext def_elem() throws RecognitionException {
		Def_elemContext _localctx = new Def_elemContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_def_elem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4241);
			collabel();
			setState(4244);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(4242);
				match(EQUAL);
				setState(4243);
				def_arg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Def_argContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public Qual_all_opContext qual_all_op() {
			return getRuleContext(Qual_all_opContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public Def_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDef_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDef_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDef_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_argContext def_arg() throws RecognitionException {
		Def_argContext _localctx = new Def_argContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_def_arg);
		try {
			setState(4252);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4246);
				func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4247);
				reserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4248);
				qual_all_op();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4249);
				numericonly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4250);
				sconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4251);
				match(NONE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Old_aggr_definitionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Old_aggr_listContext old_aggr_list() {
			return getRuleContext(Old_aggr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Old_aggr_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOld_aggr_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOld_aggr_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOld_aggr_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_definitionContext old_aggr_definition() throws RecognitionException {
		Old_aggr_definitionContext _localctx = new Old_aggr_definitionContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_old_aggr_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4254);
			match(OPEN_PAREN);
			setState(4255);
			old_aggr_list();
			setState(4256);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Old_aggr_listContext extends ParserRuleContext {
		public List<Old_aggr_elemContext> old_aggr_elem() {
			return getRuleContexts(Old_aggr_elemContext.class);
		}
		public Old_aggr_elemContext old_aggr_elem(int i) {
			return getRuleContext(Old_aggr_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Old_aggr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOld_aggr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOld_aggr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOld_aggr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_listContext old_aggr_list() throws RecognitionException {
		Old_aggr_listContext _localctx = new Old_aggr_listContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_old_aggr_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4258);
			old_aggr_elem();
			setState(4263);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4259);
				match(COMMA);
				setState(4260);
				old_aggr_elem();
				}
				}
				setState(4265);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Old_aggr_elemContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public Old_aggr_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOld_aggr_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOld_aggr_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOld_aggr_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_elemContext old_aggr_elem() throws RecognitionException {
		Old_aggr_elemContext _localctx = new Old_aggr_elemContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_old_aggr_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4266);
			identifier();
			setState(4267);
			match(EQUAL);
			setState(4268);
			def_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_enum_val_listContext extends ParserRuleContext {
		public Enum_val_listContext enum_val_list() {
			return getRuleContext(Enum_val_listContext.class,0);
		}
		public Opt_enum_val_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_enum_val_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_enum_val_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_enum_val_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_enum_val_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_enum_val_listContext opt_enum_val_list() throws RecognitionException {
		Opt_enum_val_listContext _localctx = new Opt_enum_val_listContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_opt_enum_val_list);
		try {
			setState(4272);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(4270);
				enum_val_list();
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Enum_val_listContext extends ParserRuleContext {
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Enum_val_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enum_val_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEnum_val_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEnum_val_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEnum_val_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enum_val_listContext enum_val_list() throws RecognitionException {
		Enum_val_listContext _localctx = new Enum_val_listContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_enum_val_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4274);
			sconst();
			setState(4279);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4275);
				match(COMMA);
				setState(4276);
				sconst();
				}
				}
				setState(4281);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterenumstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public Opt_if_not_existsContext opt_if_not_exists() {
			return getRuleContext(Opt_if_not_existsContext.class,0);
		}
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public TerminalNode BEFORE() { return getToken(PostgreSQLParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public AlterenumstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterenumstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterenumstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterenumstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterenumstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterenumstmtContext alterenumstmt() throws RecognitionException {
		AlterenumstmtContext _localctx = new AlterenumstmtContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_alterenumstmt);
		try {
			setState(4319);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4282);
				match(ALTER);
				setState(4283);
				match(TYPE_P);
				setState(4284);
				any_name();
				setState(4285);
				match(ADD_P);
				setState(4286);
				match(VALUE_P);
				setState(4287);
				opt_if_not_exists();
				setState(4288);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4290);
				match(ALTER);
				setState(4291);
				match(TYPE_P);
				setState(4292);
				any_name();
				setState(4293);
				match(ADD_P);
				setState(4294);
				match(VALUE_P);
				setState(4295);
				opt_if_not_exists();
				setState(4296);
				sconst();
				setState(4297);
				match(BEFORE);
				setState(4298);
				sconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4300);
				match(ALTER);
				setState(4301);
				match(TYPE_P);
				setState(4302);
				any_name();
				setState(4303);
				match(ADD_P);
				setState(4304);
				match(VALUE_P);
				setState(4305);
				opt_if_not_exists();
				setState(4306);
				sconst();
				setState(4307);
				match(AFTER);
				setState(4308);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4310);
				match(ALTER);
				setState(4311);
				match(TYPE_P);
				setState(4312);
				any_name();
				setState(4313);
				match(RENAME);
				setState(4314);
				match(VALUE_P);
				setState(4315);
				sconst();
				setState(4316);
				match(TO);
				setState(4317);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_if_not_existsContext extends ParserRuleContext {
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Opt_if_not_existsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_if_not_exists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_if_not_exists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_if_not_exists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_if_not_exists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_if_not_existsContext opt_if_not_exists() throws RecognitionException {
		Opt_if_not_existsContext _localctx = new Opt_if_not_existsContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_opt_if_not_exists);
		try {
			setState(4325);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IF_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(4321);
				match(IF_P);
				setState(4322);
				match(NOT);
				setState(4323);
				match(EXISTS);
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateopclassstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_defaultContext opt_default() {
			return getRuleContext(Opt_defaultContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_opfamilyContext opt_opfamily() {
			return getRuleContext(Opt_opfamilyContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public CreateopclassstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createopclassstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateopclassstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateopclassstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateopclassstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateopclassstmtContext createopclassstmt() throws RecognitionException {
		CreateopclassstmtContext _localctx = new CreateopclassstmtContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_createopclassstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4327);
			match(CREATE);
			setState(4328);
			match(OPERATOR);
			setState(4329);
			match(CLASS);
			setState(4330);
			any_name();
			setState(4331);
			opt_default();
			setState(4332);
			match(FOR);
			setState(4333);
			match(TYPE_P);
			setState(4334);
			typename();
			setState(4335);
			match(USING);
			setState(4336);
			name();
			setState(4337);
			opt_opfamily();
			setState(4338);
			match(AS);
			setState(4339);
			opclass_item_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opclass_item_listContext extends ParserRuleContext {
		public List<Opclass_itemContext> opclass_item() {
			return getRuleContexts(Opclass_itemContext.class);
		}
		public Opclass_itemContext opclass_item(int i) {
			return getRuleContext(Opclass_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Opclass_item_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_item_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpclass_item_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpclass_item_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpclass_item_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_item_listContext opclass_item_list() throws RecognitionException {
		Opclass_item_listContext _localctx = new Opclass_item_listContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_opclass_item_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4341);
			opclass_item();
			setState(4346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4342);
				match(COMMA);
				setState(4343);
				opclass_item();
				}
				}
				setState(4348);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opclass_itemContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public Opclass_purposeContext opclass_purpose() {
			return getRuleContext(Opclass_purposeContext.class,0);
		}
		public Opt_recheckContext opt_recheck() {
			return getRuleContext(Opt_recheckContext.class,0);
		}
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opclass_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpclass_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpclass_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpclass_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_itemContext opclass_item() throws RecognitionException {
		Opclass_itemContext _localctx = new Opclass_itemContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_opclass_item);
		try {
			setState(4374);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4349);
				match(OPERATOR);
				setState(4350);
				iconst();
				setState(4351);
				any_operator();
				setState(4352);
				opclass_purpose();
				setState(4353);
				opt_recheck();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4355);
				match(OPERATOR);
				setState(4356);
				iconst();
				setState(4357);
				operator_with_argtypes();
				setState(4358);
				opclass_purpose();
				setState(4359);
				opt_recheck();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4361);
				match(FUNCTION);
				setState(4362);
				iconst();
				setState(4363);
				function_with_argtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4365);
				match(FUNCTION);
				setState(4366);
				iconst();
				setState(4367);
				match(OPEN_PAREN);
				setState(4368);
				type_list();
				setState(4369);
				match(CLOSE_PAREN);
				setState(4370);
				function_with_argtypes();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4372);
				match(STORAGE);
				setState(4373);
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_defaultContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Opt_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_defaultContext opt_default() throws RecognitionException {
		Opt_defaultContext _localctx = new Opt_defaultContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_opt_default);
		try {
			setState(4378);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4376);
				match(DEFAULT);
				}
				break;
			case FOR:
			case CONVERSION_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_opfamilyContext extends ParserRuleContext {
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_opfamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_opfamily; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_opfamily(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_opfamily(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_opfamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_opfamilyContext opt_opfamily() throws RecognitionException {
		Opt_opfamilyContext _localctx = new Opt_opfamilyContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_opt_opfamily);
		try {
			setState(4383);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FAMILY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4380);
				match(FAMILY);
				setState(4381);
				any_name();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opclass_purposeContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opclass_purposeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_purpose; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpclass_purpose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpclass_purpose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpclass_purpose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_purposeContext opclass_purpose() throws RecognitionException {
		Opclass_purposeContext _localctx = new Opclass_purposeContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_opclass_purpose);
		try {
			setState(4392);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4385);
				match(FOR);
				setState(4386);
				match(SEARCH);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4387);
				match(FOR);
				setState(4388);
				match(ORDER);
				setState(4389);
				match(BY);
				setState(4390);
				any_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_recheckContext extends ParserRuleContext {
		public TerminalNode RECHECK() { return getToken(PostgreSQLParser.RECHECK, 0); }
		public Opt_recheckContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_recheck; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_recheck(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_recheck(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_recheck(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_recheckContext opt_recheck() throws RecognitionException {
		Opt_recheckContext _localctx = new Opt_recheckContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_opt_recheck);
		try {
			setState(4396);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECHECK:
				enterOuterAlt(_localctx, 1);
				{
				setState(4394);
				match(RECHECK);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateopfamilystmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateopfamilystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createopfamilystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateopfamilystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateopfamilystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateopfamilystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateopfamilystmtContext createopfamilystmt() throws RecognitionException {
		CreateopfamilystmtContext _localctx = new CreateopfamilystmtContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_createopfamilystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4398);
			match(CREATE);
			setState(4399);
			match(OPERATOR);
			setState(4400);
			match(FAMILY);
			setState(4401);
			any_name();
			setState(4402);
			match(USING);
			setState(4403);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlteropfamilystmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Opclass_drop_listContext opclass_drop_list() {
			return getRuleContext(Opclass_drop_listContext.class,0);
		}
		public AlteropfamilystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteropfamilystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlteropfamilystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlteropfamilystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlteropfamilystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteropfamilystmtContext alteropfamilystmt() throws RecognitionException {
		AlteropfamilystmtContext _localctx = new AlteropfamilystmtContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_alteropfamilystmt);
		try {
			setState(4423);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4405);
				match(ALTER);
				setState(4406);
				match(OPERATOR);
				setState(4407);
				match(FAMILY);
				setState(4408);
				any_name();
				setState(4409);
				match(USING);
				setState(4410);
				name();
				setState(4411);
				match(ADD_P);
				setState(4412);
				opclass_item_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4414);
				match(ALTER);
				setState(4415);
				match(OPERATOR);
				setState(4416);
				match(FAMILY);
				setState(4417);
				any_name();
				setState(4418);
				match(USING);
				setState(4419);
				name();
				setState(4420);
				match(DROP);
				setState(4421);
				opclass_drop_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opclass_drop_listContext extends ParserRuleContext {
		public List<Opclass_dropContext> opclass_drop() {
			return getRuleContexts(Opclass_dropContext.class);
		}
		public Opclass_dropContext opclass_drop(int i) {
			return getRuleContext(Opclass_dropContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Opclass_drop_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_drop_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpclass_drop_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpclass_drop_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpclass_drop_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_drop_listContext opclass_drop_list() throws RecognitionException {
		Opclass_drop_listContext _localctx = new Opclass_drop_listContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_opclass_drop_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4425);
			opclass_drop();
			setState(4430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4426);
				match(COMMA);
				setState(4427);
				opclass_drop();
				}
				}
				setState(4432);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opclass_dropContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Opclass_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_drop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpclass_drop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpclass_drop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpclass_drop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_dropContext opclass_drop() throws RecognitionException {
		Opclass_dropContext _localctx = new Opclass_dropContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_opclass_drop);
		try {
			setState(4445);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPERATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4433);
				match(OPERATOR);
				setState(4434);
				iconst();
				setState(4435);
				match(OPEN_PAREN);
				setState(4436);
				type_list();
				setState(4437);
				match(CLOSE_PAREN);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(4439);
				match(FUNCTION);
				setState(4440);
				iconst();
				setState(4441);
				match(OPEN_PAREN);
				setState(4442);
				type_list();
				setState(4443);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropopclassstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DropopclassstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropopclassstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropopclassstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropopclassstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropopclassstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropopclassstmtContext dropopclassstmt() throws RecognitionException {
		DropopclassstmtContext _localctx = new DropopclassstmtContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_dropopclassstmt);
		try {
			setState(4465);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4447);
				match(DROP);
				setState(4448);
				match(OPERATOR);
				setState(4449);
				match(CLASS);
				setState(4450);
				any_name();
				setState(4451);
				match(USING);
				setState(4452);
				name();
				setState(4453);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4455);
				match(DROP);
				setState(4456);
				match(OPERATOR);
				setState(4457);
				match(CLASS);
				setState(4458);
				match(IF_P);
				setState(4459);
				match(EXISTS);
				setState(4460);
				any_name();
				setState(4461);
				match(USING);
				setState(4462);
				name();
				setState(4463);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropopfamilystmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DropopfamilystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropopfamilystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropopfamilystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropopfamilystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropopfamilystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropopfamilystmtContext dropopfamilystmt() throws RecognitionException {
		DropopfamilystmtContext _localctx = new DropopfamilystmtContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_dropopfamilystmt);
		try {
			setState(4485);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4467);
				match(DROP);
				setState(4468);
				match(OPERATOR);
				setState(4469);
				match(FAMILY);
				setState(4470);
				any_name();
				setState(4471);
				match(USING);
				setState(4472);
				name();
				setState(4473);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4475);
				match(DROP);
				setState(4476);
				match(OPERATOR);
				setState(4477);
				match(FAMILY);
				setState(4478);
				match(IF_P);
				setState(4479);
				match(EXISTS);
				setState(4480);
				any_name();
				setState(4481);
				match(USING);
				setState(4482);
				name();
				setState(4483);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropownedstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DropownedstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropownedstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropownedstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropownedstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropownedstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropownedstmtContext dropownedstmt() throws RecognitionException {
		DropownedstmtContext _localctx = new DropownedstmtContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_dropownedstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4487);
			match(DROP);
			setState(4488);
			match(OWNED);
			setState(4489);
			match(BY);
			setState(4490);
			role_list();
			setState(4491);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReassignownedstmtContext extends ParserRuleContext {
		public TerminalNode REASSIGN() { return getToken(PostgreSQLParser.REASSIGN, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public ReassignownedstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reassignownedstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReassignownedstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReassignownedstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReassignownedstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReassignownedstmtContext reassignownedstmt() throws RecognitionException {
		ReassignownedstmtContext _localctx = new ReassignownedstmtContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_reassignownedstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4493);
			match(REASSIGN);
			setState(4494);
			match(OWNED);
			setState(4495);
			match(BY);
			setState(4496);
			role_list();
			setState(4497);
			match(TO);
			setState(4498);
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Object_type_any_nameContext object_type_any_name() {
			return getRuleContext(Object_type_any_nameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public Drop_type_nameContext drop_type_name() {
			return getRuleContext(Drop_type_nameContext.class,0);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
			return getRuleContext(Object_type_name_on_any_nameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Type_name_listContext type_name_list() {
			return getRuleContext(Type_name_listContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public DropstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropstmtContext dropstmt() throws RecognitionException {
		DropstmtContext _localctx = new DropstmtContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_dropstmt);
		try {
			setState(4578);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4500);
				match(DROP);
				setState(4501);
				object_type_any_name();
				setState(4502);
				match(IF_P);
				setState(4503);
				match(EXISTS);
				setState(4504);
				any_name_list();
				setState(4505);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4507);
				match(DROP);
				setState(4508);
				object_type_any_name();
				setState(4509);
				any_name_list();
				setState(4510);
				opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4512);
				match(DROP);
				setState(4513);
				drop_type_name();
				setState(4514);
				match(IF_P);
				setState(4515);
				match(EXISTS);
				setState(4516);
				name_list();
				setState(4517);
				opt_drop_behavior();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4519);
				match(DROP);
				setState(4520);
				drop_type_name();
				setState(4521);
				name_list();
				setState(4522);
				opt_drop_behavior();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4524);
				match(DROP);
				setState(4525);
				object_type_name_on_any_name();
				setState(4526);
				name();
				setState(4527);
				match(ON);
				setState(4528);
				any_name();
				setState(4529);
				opt_drop_behavior();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4531);
				match(DROP);
				setState(4532);
				object_type_name_on_any_name();
				setState(4533);
				match(IF_P);
				setState(4534);
				match(EXISTS);
				setState(4535);
				name();
				setState(4536);
				match(ON);
				setState(4537);
				any_name();
				setState(4538);
				opt_drop_behavior();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4540);
				match(DROP);
				setState(4541);
				match(TYPE_P);
				setState(4542);
				type_name_list();
				setState(4543);
				opt_drop_behavior();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4545);
				match(DROP);
				setState(4546);
				match(TYPE_P);
				setState(4547);
				match(IF_P);
				setState(4548);
				match(EXISTS);
				setState(4549);
				type_name_list();
				setState(4550);
				opt_drop_behavior();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4552);
				match(DROP);
				setState(4553);
				match(DOMAIN_P);
				setState(4554);
				type_name_list();
				setState(4555);
				opt_drop_behavior();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4557);
				match(DROP);
				setState(4558);
				match(DOMAIN_P);
				setState(4559);
				match(IF_P);
				setState(4560);
				match(EXISTS);
				setState(4561);
				type_name_list();
				setState(4562);
				opt_drop_behavior();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4564);
				match(DROP);
				setState(4565);
				match(INDEX);
				setState(4566);
				match(CONCURRENTLY);
				setState(4567);
				any_name_list();
				setState(4568);
				opt_drop_behavior();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4570);
				match(DROP);
				setState(4571);
				match(INDEX);
				setState(4572);
				match(CONCURRENTLY);
				setState(4573);
				match(IF_P);
				setState(4574);
				match(EXISTS);
				setState(4575);
				any_name_list();
				setState(4576);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_type_any_nameContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public Object_type_any_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_any_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterObject_type_any_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitObject_type_any_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitObject_type_any_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_any_nameContext object_type_any_name() throws RecognitionException {
		Object_type_any_nameContext _localctx = new Object_type_any_nameContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_object_type_any_name);
		try {
			setState(4603);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4580);
				match(TABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4581);
				match(SEQUENCE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4582);
				match(VIEW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4583);
				match(MATERIALIZED);
				setState(4584);
				match(VIEW);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4585);
				match(INDEX);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4586);
				match(FOREIGN);
				setState(4587);
				match(TABLE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4588);
				match(COLLATION);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4589);
				match(CONVERSION_P);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4590);
				match(STATISTICS);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4591);
				match(TEXT_P);
				setState(4592);
				match(SEARCH);
				setState(4593);
				match(PARSER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4594);
				match(TEXT_P);
				setState(4595);
				match(SEARCH);
				setState(4596);
				match(DICTIONARY);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4597);
				match(TEXT_P);
				setState(4598);
				match(SEARCH);
				setState(4599);
				match(TEMPLATE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4600);
				match(TEXT_P);
				setState(4601);
				match(SEARCH);
				setState(4602);
				match(CONFIGURATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_type_nameContext extends ParserRuleContext {
		public Drop_type_nameContext drop_type_name() {
			return getRuleContext(Drop_type_nameContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public Object_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterObject_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitObject_type_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitObject_type_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_nameContext object_type_name() throws RecognitionException {
		Object_type_nameContext _localctx = new Object_type_nameContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_object_type_name);
		try {
			setState(4610);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOREIGN:
			case ACCESS:
			case EVENT:
			case EXTENSION:
			case LANGUAGE:
			case PROCEDURAL:
			case SCHEMA:
			case SERVER:
			case PUBLICATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(4605);
				drop_type_name();
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4606);
				match(DATABASE);
				}
				break;
			case ROLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4607);
				match(ROLE);
				}
				break;
			case SUBSCRIPTION:
				enterOuterAlt(_localctx, 4);
				{
				setState(4608);
				match(SUBSCRIPTION);
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 5);
				{
				setState(4609);
				match(TABLESPACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_type_nameContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public Drop_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_type_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_type_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_type_nameContext drop_type_name() throws RecognitionException {
		Drop_type_nameContext _localctx = new Drop_type_nameContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_drop_type_name);
		try {
			setState(4626);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4612);
				match(ACCESS);
				setState(4613);
				match(METHOD);
				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4614);
				match(EVENT);
				setState(4615);
				match(TRIGGER);
				}
				break;
			case EXTENSION:
				enterOuterAlt(_localctx, 3);
				{
				setState(4616);
				match(EXTENSION);
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 4);
				{
				setState(4617);
				match(FOREIGN);
				setState(4618);
				match(DATA_P);
				setState(4619);
				match(WRAPPER);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4620);
				opt_procedural();
				setState(4621);
				match(LANGUAGE);
				}
				break;
			case PUBLICATION:
				enterOuterAlt(_localctx, 6);
				{
				setState(4623);
				match(PUBLICATION);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 7);
				{
				setState(4624);
				match(SCHEMA);
				}
				break;
			case SERVER:
				enterOuterAlt(_localctx, 8);
				{
				setState(4625);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_type_name_on_any_nameContext extends ParserRuleContext {
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public Object_type_name_on_any_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_name_on_any_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterObject_type_name_on_any_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitObject_type_name_on_any_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitObject_type_name_on_any_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_name_on_any_nameContext object_type_name_on_any_name() throws RecognitionException {
		Object_type_name_on_any_nameContext _localctx = new Object_type_name_on_any_nameContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_object_type_name_on_any_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4628);
			_la = _input.LA(1);
			if ( !(_la==RULE || _la==TRIGGER || _la==POLICY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Any_name_listContext extends ParserRuleContext {
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Any_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAny_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAny_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAny_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_name_listContext any_name_list() throws RecognitionException {
		Any_name_listContext _localctx = new Any_name_listContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_any_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4630);
			any_name();
			setState(4635);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4631);
				match(COMMA);
				setState(4632);
				any_name();
				}
				}
				setState(4637);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Any_nameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Any_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAny_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAny_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAny_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_nameContext any_name() throws RecognitionException {
		Any_nameContext _localctx = new Any_nameContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_any_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4638);
			colid();
			setState(4640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(4639);
				attrs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AttrsContext extends ParserRuleContext {
		public List<TerminalNode> DOT() { return getTokens(PostgreSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(PostgreSQLParser.DOT, i);
		}
		public List<Attr_nameContext> attr_name() {
			return getRuleContexts(Attr_nameContext.class);
		}
		public Attr_nameContext attr_name(int i) {
			return getRuleContext(Attr_nameContext.class,i);
		}
		public AttrsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attrs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAttrs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAttrs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAttrs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttrsContext attrs() throws RecognitionException {
		AttrsContext _localctx = new AttrsContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_attrs);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4644); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4642);
					match(DOT);
					setState(4643);
					attr_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4646); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,224,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_name_listContext extends ParserRuleContext {
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Type_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterType_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitType_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitType_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_name_listContext type_name_list() throws RecognitionException {
		Type_name_listContext _localctx = new Type_name_listContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_type_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4648);
			typename();
			setState(4653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4649);
				match(COMMA);
				setState(4650);
				typename();
				}
				}
				setState(4655);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TruncatestmtContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLParser.TRUNCATE, 0); }
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Opt_restart_seqsContext opt_restart_seqs() {
			return getRuleContext(Opt_restart_seqsContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TruncatestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncatestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTruncatestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTruncatestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTruncatestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncatestmtContext truncatestmt() throws RecognitionException {
		TruncatestmtContext _localctx = new TruncatestmtContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_truncatestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4656);
			match(TRUNCATE);
			setState(4657);
			opt_table();
			setState(4658);
			relation_expr_list();
			setState(4659);
			opt_restart_seqs();
			setState(4660);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_restart_seqsContext extends ParserRuleContext {
		public TerminalNode CONTINUE_P() { return getToken(PostgreSQLParser.CONTINUE_P, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public Opt_restart_seqsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_restart_seqs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_restart_seqs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_restart_seqs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_restart_seqs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_restart_seqsContext opt_restart_seqs() throws RecognitionException {
		Opt_restart_seqsContext _localctx = new Opt_restart_seqsContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_opt_restart_seqs);
		try {
			setState(4667);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONTINUE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(4662);
				match(CONTINUE_P);
				setState(4663);
				match(IDENTITY_P);
				}
				break;
			case RESTART:
				enterOuterAlt(_localctx, 2);
				{
				setState(4664);
				match(RESTART);
				setState(4665);
				match(IDENTITY_P);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CASCADE:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommentstmtContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(PostgreSQLParser.COMMENT, 0); }
		public List<TerminalNode> ON() { return getTokens(PostgreSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSQLParser.ON, i);
		}
		public Object_type_any_nameContext object_type_any_name() {
			return getRuleContext(Object_type_any_nameContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public Comment_textContext comment_text() {
			return getRuleContext(Comment_textContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public Object_type_nameContext object_type_name() {
			return getRuleContext(Object_type_nameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
			return getRuleContext(Object_type_name_on_any_nameContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CommentstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCommentstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCommentstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCommentstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentstmtContext commentstmt() throws RecognitionException {
		CommentstmtContext _localctx = new CommentstmtContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_commentstmt);
		try {
			setState(4816);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4669);
				match(COMMENT);
				setState(4670);
				match(ON);
				setState(4671);
				object_type_any_name();
				setState(4672);
				any_name();
				setState(4673);
				match(IS);
				setState(4674);
				comment_text();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4676);
				match(COMMENT);
				setState(4677);
				match(ON);
				setState(4678);
				match(COLUMN);
				setState(4679);
				any_name();
				setState(4680);
				match(IS);
				setState(4681);
				comment_text();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4683);
				match(COMMENT);
				setState(4684);
				match(ON);
				setState(4685);
				object_type_name();
				setState(4686);
				name();
				setState(4687);
				match(IS);
				setState(4688);
				comment_text();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4690);
				match(COMMENT);
				setState(4691);
				match(ON);
				setState(4692);
				match(TYPE_P);
				setState(4693);
				typename();
				setState(4694);
				match(IS);
				setState(4695);
				comment_text();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4697);
				match(COMMENT);
				setState(4698);
				match(ON);
				setState(4699);
				match(DOMAIN_P);
				setState(4700);
				typename();
				setState(4701);
				match(IS);
				setState(4702);
				comment_text();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4704);
				match(COMMENT);
				setState(4705);
				match(ON);
				setState(4706);
				match(AGGREGATE);
				setState(4707);
				aggregate_with_argtypes();
				setState(4708);
				match(IS);
				setState(4709);
				comment_text();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4711);
				match(COMMENT);
				setState(4712);
				match(ON);
				setState(4713);
				match(FUNCTION);
				setState(4714);
				function_with_argtypes();
				setState(4715);
				match(IS);
				setState(4716);
				comment_text();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4718);
				match(COMMENT);
				setState(4719);
				match(ON);
				setState(4720);
				match(OPERATOR);
				setState(4721);
				operator_with_argtypes();
				setState(4722);
				match(IS);
				setState(4723);
				comment_text();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4725);
				match(COMMENT);
				setState(4726);
				match(ON);
				setState(4727);
				match(CONSTRAINT);
				setState(4728);
				name();
				setState(4729);
				match(ON);
				setState(4730);
				any_name();
				setState(4731);
				match(IS);
				setState(4732);
				comment_text();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4734);
				match(COMMENT);
				setState(4735);
				match(ON);
				setState(4736);
				match(CONSTRAINT);
				setState(4737);
				name();
				setState(4738);
				match(ON);
				setState(4739);
				match(DOMAIN_P);
				setState(4740);
				any_name();
				setState(4741);
				match(IS);
				setState(4742);
				comment_text();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4744);
				match(COMMENT);
				setState(4745);
				match(ON);
				setState(4746);
				object_type_name_on_any_name();
				setState(4747);
				name();
				setState(4748);
				match(ON);
				setState(4749);
				any_name();
				setState(4750);
				match(IS);
				setState(4751);
				comment_text();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4753);
				match(COMMENT);
				setState(4754);
				match(ON);
				setState(4755);
				match(PROCEDURE);
				setState(4756);
				function_with_argtypes();
				setState(4757);
				match(IS);
				setState(4758);
				comment_text();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4760);
				match(COMMENT);
				setState(4761);
				match(ON);
				setState(4762);
				match(ROUTINE);
				setState(4763);
				function_with_argtypes();
				setState(4764);
				match(IS);
				setState(4765);
				comment_text();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4767);
				match(COMMENT);
				setState(4768);
				match(ON);
				setState(4769);
				match(TRANSFORM);
				setState(4770);
				match(FOR);
				setState(4771);
				typename();
				setState(4772);
				match(LANGUAGE);
				setState(4773);
				name();
				setState(4774);
				match(IS);
				setState(4775);
				comment_text();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4777);
				match(COMMENT);
				setState(4778);
				match(ON);
				setState(4779);
				match(OPERATOR);
				setState(4780);
				match(CLASS);
				setState(4781);
				any_name();
				setState(4782);
				match(USING);
				setState(4783);
				name();
				setState(4784);
				match(IS);
				setState(4785);
				comment_text();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4787);
				match(COMMENT);
				setState(4788);
				match(ON);
				setState(4789);
				match(OPERATOR);
				setState(4790);
				match(FAMILY);
				setState(4791);
				any_name();
				setState(4792);
				match(USING);
				setState(4793);
				name();
				setState(4794);
				match(IS);
				setState(4795);
				comment_text();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4797);
				match(COMMENT);
				setState(4798);
				match(ON);
				setState(4799);
				match(LARGE_P);
				setState(4800);
				match(OBJECT_P);
				setState(4801);
				numericonly();
				setState(4802);
				match(IS);
				setState(4803);
				comment_text();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4805);
				match(COMMENT);
				setState(4806);
				match(ON);
				setState(4807);
				match(CAST);
				setState(4808);
				match(OPEN_PAREN);
				setState(4809);
				typename();
				setState(4810);
				match(AS);
				setState(4811);
				typename();
				setState(4812);
				match(CLOSE_PAREN);
				setState(4813);
				match(IS);
				setState(4814);
				comment_text();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comment_textContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Comment_textContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_text; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterComment_text(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitComment_text(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitComment_text(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_textContext comment_text() throws RecognitionException {
		Comment_textContext _localctx = new Comment_textContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_comment_text);
		try {
			setState(4820);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(4818);
				sconst();
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(4819);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SeclabelstmtContext extends ParserRuleContext {
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(PostgreSQLParser.LABEL, 0); }
		public Opt_providerContext opt_provider() {
			return getRuleContext(Opt_providerContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Object_type_any_nameContext object_type_any_name() {
			return getRuleContext(Object_type_any_nameContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public Security_labelContext security_label() {
			return getRuleContext(Security_labelContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public Object_type_nameContext object_type_name() {
			return getRuleContext(Object_type_nameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public SeclabelstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seclabelstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSeclabelstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSeclabelstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSeclabelstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeclabelstmtContext seclabelstmt() throws RecognitionException {
		SeclabelstmtContext _localctx = new SeclabelstmtContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_seclabelstmt);
		try {
			setState(4913);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4822);
				match(SECURITY);
				setState(4823);
				match(LABEL);
				setState(4824);
				opt_provider();
				setState(4825);
				match(ON);
				setState(4826);
				object_type_any_name();
				setState(4827);
				any_name();
				setState(4828);
				match(IS);
				setState(4829);
				security_label();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4831);
				match(SECURITY);
				setState(4832);
				match(LABEL);
				setState(4833);
				opt_provider();
				setState(4834);
				match(ON);
				setState(4835);
				match(COLUMN);
				setState(4836);
				any_name();
				setState(4837);
				match(IS);
				setState(4838);
				security_label();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4840);
				match(SECURITY);
				setState(4841);
				match(LABEL);
				setState(4842);
				opt_provider();
				setState(4843);
				match(ON);
				setState(4844);
				object_type_name();
				setState(4845);
				name();
				setState(4846);
				match(IS);
				setState(4847);
				security_label();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4849);
				match(SECURITY);
				setState(4850);
				match(LABEL);
				setState(4851);
				opt_provider();
				setState(4852);
				match(ON);
				setState(4853);
				match(TYPE_P);
				setState(4854);
				typename();
				setState(4855);
				match(IS);
				setState(4856);
				security_label();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4858);
				match(SECURITY);
				setState(4859);
				match(LABEL);
				setState(4860);
				opt_provider();
				setState(4861);
				match(ON);
				setState(4862);
				match(DOMAIN_P);
				setState(4863);
				typename();
				setState(4864);
				match(IS);
				setState(4865);
				security_label();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4867);
				match(SECURITY);
				setState(4868);
				match(LABEL);
				setState(4869);
				opt_provider();
				setState(4870);
				match(ON);
				setState(4871);
				match(AGGREGATE);
				setState(4872);
				aggregate_with_argtypes();
				setState(4873);
				match(IS);
				setState(4874);
				security_label();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4876);
				match(SECURITY);
				setState(4877);
				match(LABEL);
				setState(4878);
				opt_provider();
				setState(4879);
				match(ON);
				setState(4880);
				match(FUNCTION);
				setState(4881);
				function_with_argtypes();
				setState(4882);
				match(IS);
				setState(4883);
				security_label();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4885);
				match(SECURITY);
				setState(4886);
				match(LABEL);
				setState(4887);
				opt_provider();
				setState(4888);
				match(ON);
				setState(4889);
				match(LARGE_P);
				setState(4890);
				match(OBJECT_P);
				setState(4891);
				numericonly();
				setState(4892);
				match(IS);
				setState(4893);
				security_label();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4895);
				match(SECURITY);
				setState(4896);
				match(LABEL);
				setState(4897);
				opt_provider();
				setState(4898);
				match(ON);
				setState(4899);
				match(PROCEDURE);
				setState(4900);
				function_with_argtypes();
				setState(4901);
				match(IS);
				setState(4902);
				security_label();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4904);
				match(SECURITY);
				setState(4905);
				match(LABEL);
				setState(4906);
				opt_provider();
				setState(4907);
				match(ON);
				setState(4908);
				match(ROUTINE);
				setState(4909);
				function_with_argtypes();
				setState(4910);
				match(IS);
				setState(4911);
				security_label();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_providerContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public Opt_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_provider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_provider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_provider(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_provider(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_providerContext opt_provider() throws RecognitionException {
		Opt_providerContext _localctx = new Opt_providerContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_opt_provider);
		try {
			setState(4918);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4915);
				match(FOR);
				setState(4916);
				nonreservedword_or_sconst();
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Security_labelContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Security_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSecurity_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSecurity_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSecurity_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_labelContext security_label() throws RecognitionException {
		Security_labelContext _localctx = new Security_labelContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_security_label);
		try {
			setState(4922);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(4920);
				sconst();
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(4921);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FetchstmtContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public Fetch_argsContext fetch_args() {
			return getRuleContext(Fetch_argsContext.class,0);
		}
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public FetchstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetchstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFetchstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFetchstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFetchstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchstmtContext fetchstmt() throws RecognitionException {
		FetchstmtContext _localctx = new FetchstmtContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_fetchstmt);
		try {
			setState(4928);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FETCH:
				enterOuterAlt(_localctx, 1);
				{
				setState(4924);
				match(FETCH);
				setState(4925);
				fetch_args();
				}
				break;
			case MOVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4926);
				match(MOVE);
				setState(4927);
				fetch_args();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Fetch_argsContext extends ParserRuleContext {
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public From_inContext from_in() {
			return getRuleContext(From_inContext.class,0);
		}
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public Opt_from_inContext opt_from_in() {
			return getRuleContext(Opt_from_inContext.class,0);
		}
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public TerminalNode ABSOLUTE_P() { return getToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public TerminalNode RELATIVE_P() { return getToken(PostgreSQLParser.RELATIVE_P, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public Fetch_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFetch_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFetch_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFetch_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_argsContext fetch_args() throws RecognitionException {
		Fetch_argsContext _localctx = new Fetch_argsContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_fetch_args);
		try {
			setState(4996);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4930);
				cursor_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4931);
				from_in();
				setState(4932);
				cursor_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4934);
				match(NEXT);
				setState(4935);
				opt_from_in();
				setState(4936);
				cursor_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4938);
				match(PRIOR);
				setState(4939);
				opt_from_in();
				setState(4940);
				cursor_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4942);
				match(FIRST_P);
				setState(4943);
				opt_from_in();
				setState(4944);
				cursor_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4946);
				match(LAST_P);
				setState(4947);
				opt_from_in();
				setState(4948);
				cursor_name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4950);
				match(ABSOLUTE_P);
				setState(4951);
				signediconst();
				setState(4952);
				opt_from_in();
				setState(4953);
				cursor_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4955);
				match(RELATIVE_P);
				setState(4956);
				signediconst();
				setState(4957);
				opt_from_in();
				setState(4958);
				cursor_name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4960);
				signediconst();
				setState(4961);
				opt_from_in();
				setState(4962);
				cursor_name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4964);
				match(ALL);
				setState(4965);
				opt_from_in();
				setState(4966);
				cursor_name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4968);
				match(FORWARD);
				setState(4969);
				opt_from_in();
				setState(4970);
				cursor_name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4972);
				match(FORWARD);
				setState(4973);
				signediconst();
				setState(4974);
				opt_from_in();
				setState(4975);
				cursor_name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4977);
				match(FORWARD);
				setState(4978);
				match(ALL);
				setState(4979);
				opt_from_in();
				setState(4980);
				cursor_name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4982);
				match(BACKWARD);
				setState(4983);
				opt_from_in();
				setState(4984);
				cursor_name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4986);
				match(BACKWARD);
				setState(4987);
				signediconst();
				setState(4988);
				opt_from_in();
				setState(4989);
				cursor_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4991);
				match(BACKWARD);
				setState(4992);
				match(ALL);
				setState(4993);
				opt_from_in();
				setState(4994);
				cursor_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class From_inContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public From_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrom_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrom_in(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrom_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_inContext from_in() throws RecognitionException {
		From_inContext _localctx = new From_inContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_from_in);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4998);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==IN_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_from_inContext extends ParserRuleContext {
		public From_inContext from_in() {
			return getRuleContext(From_inContext.class,0);
		}
		public Opt_from_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_from_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_from_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_from_in(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_from_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_from_inContext opt_from_in() throws RecognitionException {
		Opt_from_inContext _localctx = new Opt_from_inContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_opt_from_in);
		try {
			setState(5002);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(5000);
				from_in();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GrantstmtContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Privilege_targetContext privilege_target() {
			return getRuleContext(Privilege_targetContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return getRuleContext(Opt_grant_grant_optionContext.class,0);
		}
		public GrantstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrantstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrantstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrantstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantstmtContext grantstmt() throws RecognitionException {
		GrantstmtContext _localctx = new GrantstmtContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_grantstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5004);
			match(GRANT);
			setState(5005);
			privileges();
			setState(5006);
			match(ON);
			setState(5007);
			privilege_target();
			setState(5008);
			match(TO);
			setState(5009);
			grantee_list();
			setState(5010);
			opt_grant_grant_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RevokestmtContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Privilege_targetContext privilege_target() {
			return getRuleContext(Privilege_targetContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public RevokestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRevokestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRevokestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRevokestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokestmtContext revokestmt() throws RecognitionException {
		RevokestmtContext _localctx = new RevokestmtContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_revokestmt);
		try {
			setState(5031);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5012);
				match(REVOKE);
				setState(5013);
				privileges();
				setState(5014);
				match(ON);
				setState(5015);
				privilege_target();
				setState(5016);
				match(FROM);
				setState(5017);
				grantee_list();
				setState(5018);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5020);
				match(REVOKE);
				setState(5021);
				match(GRANT);
				setState(5022);
				match(OPTION);
				setState(5023);
				match(FOR);
				setState(5024);
				privileges();
				setState(5025);
				match(ON);
				setState(5026);
				privilege_target();
				setState(5027);
				match(FROM);
				setState(5028);
				grantee_list();
				setState(5029);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivilegesContext extends ParserRuleContext {
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLParser.PRIVILEGES, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public PrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrivileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesContext privileges() throws RecognitionException {
		PrivilegesContext _localctx = new PrivilegesContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_privileges);
		try {
			setState(5048);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5033);
				privilege_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5034);
				match(ALL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5035);
				match(ALL);
				setState(5036);
				match(PRIVILEGES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5037);
				match(ALL);
				setState(5038);
				match(OPEN_PAREN);
				setState(5039);
				columnlist();
				setState(5040);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5042);
				match(ALL);
				setState(5043);
				match(PRIVILEGES);
				setState(5044);
				match(OPEN_PAREN);
				setState(5045);
				columnlist();
				setState(5046);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Privilege_listContext extends ParserRuleContext {
		public List<PrivilegeContext> privilege() {
			return getRuleContexts(PrivilegeContext.class);
		}
		public PrivilegeContext privilege(int i) {
			return getRuleContext(PrivilegeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Privilege_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrivilege_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrivilege_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrivilege_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privilege_listContext privilege_list() throws RecognitionException {
		Privilege_listContext _localctx = new Privilege_listContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_privilege_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5050);
			privilege();
			setState(5055);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5051);
				match(COMMA);
				setState(5052);
				privilege();
				}
				}
				setState(5057);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrivilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_privilege);
		try {
			setState(5067);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5058);
				match(SELECT);
				setState(5059);
				opt_column_list();
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 2);
				{
				setState(5060);
				match(REFERENCES);
				setState(5061);
				opt_column_list();
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5062);
				match(CREATE);
				setState(5063);
				opt_column_list();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 4);
				{
				setState(5064);
				colid();
				setState(5065);
				opt_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Privilege_targetContext extends ParserRuleContext {
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypes_listContext function_with_argtypes_list() {
			return getRuleContext(Function_with_argtypes_listContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public Numericonly_listContext numericonly_list() {
			return getRuleContext(Numericonly_listContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLParser.TABLES, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLParser.FUNCTIONS, 0); }
		public TerminalNode PROCEDURES() { return getToken(PostgreSQLParser.PROCEDURES, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLParser.ROUTINES, 0); }
		public Privilege_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrivilege_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrivilege_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrivilege_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privilege_targetContext privilege_target() throws RecognitionException {
		Privilege_targetContext _localctx = new Privilege_targetContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_privilege_target);
		try {
			setState(5127);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5069);
				qualified_name_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5070);
				match(TABLE);
				setState(5071);
				qualified_name_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5072);
				match(SEQUENCE);
				setState(5073);
				qualified_name_list();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5074);
				match(FOREIGN);
				setState(5075);
				match(DATA_P);
				setState(5076);
				match(WRAPPER);
				setState(5077);
				name_list();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5078);
				match(FOREIGN);
				setState(5079);
				match(SERVER);
				setState(5080);
				name_list();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5081);
				match(FUNCTION);
				setState(5082);
				function_with_argtypes_list();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5083);
				match(PROCEDURE);
				setState(5084);
				function_with_argtypes_list();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5085);
				match(ROUTINE);
				setState(5086);
				function_with_argtypes_list();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5087);
				match(DATABASE);
				setState(5088);
				name_list();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5089);
				match(DOMAIN_P);
				setState(5090);
				any_name_list();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5091);
				match(LANGUAGE);
				setState(5092);
				name_list();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5093);
				match(LARGE_P);
				setState(5094);
				match(OBJECT_P);
				setState(5095);
				numericonly_list();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5096);
				match(SCHEMA);
				setState(5097);
				name_list();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5098);
				match(TABLESPACE);
				setState(5099);
				name_list();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5100);
				match(TYPE_P);
				setState(5101);
				any_name_list();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5102);
				match(ALL);
				setState(5103);
				match(TABLES);
				setState(5104);
				match(IN_P);
				setState(5105);
				match(SCHEMA);
				setState(5106);
				name_list();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5107);
				match(ALL);
				setState(5108);
				match(SEQUENCES);
				setState(5109);
				match(IN_P);
				setState(5110);
				match(SCHEMA);
				setState(5111);
				name_list();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5112);
				match(ALL);
				setState(5113);
				match(FUNCTIONS);
				setState(5114);
				match(IN_P);
				setState(5115);
				match(SCHEMA);
				setState(5116);
				name_list();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5117);
				match(ALL);
				setState(5118);
				match(PROCEDURES);
				setState(5119);
				match(IN_P);
				setState(5120);
				match(SCHEMA);
				setState(5121);
				name_list();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(5122);
				match(ALL);
				setState(5123);
				match(ROUTINES);
				setState(5124);
				match(IN_P);
				setState(5125);
				match(SCHEMA);
				setState(5126);
				name_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grantee_listContext extends ParserRuleContext {
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Grantee_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrantee_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrantee_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrantee_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grantee_listContext grantee_list() throws RecognitionException {
		Grantee_listContext _localctx = new Grantee_listContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_grantee_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5129);
			grantee();
			setState(5134);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5130);
				match(COMMA);
				setState(5131);
				grantee();
				}
				}
				setState(5136);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GranteeContext extends ParserRuleContext {
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public GranteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrantee(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrantee(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrantee(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeContext grantee() throws RecognitionException {
		GranteeContext _localctx = new GranteeContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_grantee);
		try {
			setState(5140);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FETCH:
			case SESSION_USER:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5137);
				rolespec();
				}
				break;
			case GROUP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(5138);
				match(GROUP_P);
				setState(5139);
				rolespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_grant_grant_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public Opt_grant_grant_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_grant_grant_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_grant_grant_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_grant_grant_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_grant_grant_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_grant_grant_optionContext opt_grant_grant_option() throws RecognitionException {
		Opt_grant_grant_optionContext _localctx = new Opt_grant_grant_optionContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_opt_grant_grant_option);
		try {
			setState(5146);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5142);
				match(WITH);
				setState(5143);
				match(GRANT);
				setState(5144);
				match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GrantrolestmtContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public Opt_grant_admin_optionContext opt_grant_admin_option() {
			return getRuleContext(Opt_grant_admin_optionContext.class,0);
		}
		public Opt_granted_byContext opt_granted_by() {
			return getRuleContext(Opt_granted_byContext.class,0);
		}
		public GrantrolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantrolestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrantrolestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrantrolestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrantrolestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantrolestmtContext grantrolestmt() throws RecognitionException {
		GrantrolestmtContext _localctx = new GrantrolestmtContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_grantrolestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5148);
			match(GRANT);
			setState(5149);
			privilege_list();
			setState(5150);
			match(TO);
			setState(5151);
			role_list();
			setState(5152);
			opt_grant_admin_option();
			setState(5153);
			opt_granted_by();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RevokerolestmtContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public Opt_granted_byContext opt_granted_by() {
			return getRuleContext(Opt_granted_byContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public RevokerolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokerolestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRevokerolestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRevokerolestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRevokerolestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokerolestmtContext revokerolestmt() throws RecognitionException {
		RevokerolestmtContext _localctx = new RevokerolestmtContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_revokerolestmt);
		try {
			setState(5172);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5155);
				match(REVOKE);
				setState(5156);
				privilege_list();
				setState(5157);
				match(FROM);
				setState(5158);
				role_list();
				setState(5159);
				opt_granted_by();
				setState(5160);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5162);
				match(REVOKE);
				setState(5163);
				match(ADMIN);
				setState(5164);
				match(OPTION);
				setState(5165);
				match(FOR);
				setState(5166);
				privilege_list();
				setState(5167);
				match(FROM);
				setState(5168);
				role_list();
				setState(5169);
				opt_granted_by();
				setState(5170);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_grant_admin_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public Opt_grant_admin_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_grant_admin_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_grant_admin_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_grant_admin_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_grant_admin_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_grant_admin_optionContext opt_grant_admin_option() throws RecognitionException {
		Opt_grant_admin_optionContext _localctx = new Opt_grant_admin_optionContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_opt_grant_admin_option);
		try {
			setState(5178);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5174);
				match(WITH);
				setState(5175);
				match(ADMIN);
				setState(5176);
				match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_granted_byContext extends ParserRuleContext {
		public TerminalNode GRANTED() { return getToken(PostgreSQLParser.GRANTED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public Opt_granted_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_granted_by; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_granted_by(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_granted_by(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_granted_by(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_granted_byContext opt_granted_by() throws RecognitionException {
		Opt_granted_byContext _localctx = new Opt_granted_byContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_opt_granted_by);
		try {
			setState(5184);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GRANTED:
				enterOuterAlt(_localctx, 1);
				{
				setState(5180);
				match(GRANTED);
				setState(5181);
				match(BY);
				setState(5182);
				rolespec();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CASCADE:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterdefaultprivilegesstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLParser.PRIVILEGES, 0); }
		public DefacloptionlistContext defacloptionlist() {
			return getRuleContext(DefacloptionlistContext.class,0);
		}
		public DefaclactionContext defaclaction() {
			return getRuleContext(DefaclactionContext.class,0);
		}
		public AlterdefaultprivilegesstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdefaultprivilegesstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterdefaultprivilegesstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterdefaultprivilegesstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterdefaultprivilegesstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterdefaultprivilegesstmtContext alterdefaultprivilegesstmt() throws RecognitionException {
		AlterdefaultprivilegesstmtContext _localctx = new AlterdefaultprivilegesstmtContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_alterdefaultprivilegesstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5186);
			match(ALTER);
			setState(5187);
			match(DEFAULT);
			setState(5188);
			match(PRIVILEGES);
			setState(5189);
			defacloptionlist();
			setState(5190);
			defaclaction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefacloptionlistContext extends ParserRuleContext {
		public List<DefacloptionContext> defacloption() {
			return getRuleContexts(DefacloptionContext.class);
		}
		public DefacloptionContext defacloption(int i) {
			return getRuleContext(DefacloptionContext.class,i);
		}
		public DefacloptionlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defacloptionlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefacloptionlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefacloptionlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefacloptionlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefacloptionlistContext defacloptionlist() throws RecognitionException {
		DefacloptionlistContext _localctx = new DefacloptionlistContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_defacloptionlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5195);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==IN_P) {
				{
				{
				setState(5192);
				defacloption();
				}
				}
				setState(5197);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefacloptionContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public DefacloptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defacloption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefacloption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefacloption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefacloption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefacloptionContext defacloption() throws RecognitionException {
		DefacloptionContext _localctx = new DefacloptionContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_defacloption);
		try {
			setState(5207);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5198);
				match(IN_P);
				setState(5199);
				match(SCHEMA);
				setState(5200);
				name_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5201);
				match(FOR);
				setState(5202);
				match(ROLE);
				setState(5203);
				role_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5204);
				match(FOR);
				setState(5205);
				match(USER);
				setState(5206);
				role_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefaclactionContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Defacl_privilege_targetContext defacl_privilege_target() {
			return getRuleContext(Defacl_privilege_targetContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return getRuleContext(Opt_grant_grant_optionContext.class,0);
		}
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public DefaclactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaclaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefaclaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefaclaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefaclaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaclactionContext defaclaction() throws RecognitionException {
		DefaclactionContext _localctx = new DefaclactionContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_defaclaction);
		try {
			setState(5236);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5209);
				match(GRANT);
				setState(5210);
				privileges();
				setState(5211);
				match(ON);
				setState(5212);
				defacl_privilege_target();
				setState(5213);
				match(TO);
				setState(5214);
				grantee_list();
				setState(5215);
				opt_grant_grant_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5217);
				match(REVOKE);
				setState(5218);
				privileges();
				setState(5219);
				match(ON);
				setState(5220);
				defacl_privilege_target();
				setState(5221);
				match(FROM);
				setState(5222);
				grantee_list();
				setState(5223);
				opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5225);
				match(REVOKE);
				setState(5226);
				match(GRANT);
				setState(5227);
				match(OPTION);
				setState(5228);
				match(FOR);
				setState(5229);
				privileges();
				setState(5230);
				match(ON);
				setState(5231);
				defacl_privilege_target();
				setState(5232);
				match(FROM);
				setState(5233);
				grantee_list();
				setState(5234);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Defacl_privilege_targetContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(PostgreSQLParser.TABLES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLParser.FUNCTIONS, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLParser.ROUTINES, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public TerminalNode TYPES_P() { return getToken(PostgreSQLParser.TYPES_P, 0); }
		public TerminalNode SCHEMAS() { return getToken(PostgreSQLParser.SCHEMAS, 0); }
		public Defacl_privilege_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defacl_privilege_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefacl_privilege_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefacl_privilege_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefacl_privilege_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Defacl_privilege_targetContext defacl_privilege_target() throws RecognitionException {
		Defacl_privilege_targetContext _localctx = new Defacl_privilege_targetContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_defacl_privilege_target);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5238);
			_la = _input.LA(1);
			if ( !(_la==FUNCTIONS || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & 4297064449L) != 0) || _la==ROUTINES || _la==SCHEMAS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_uniqueContext opt_unique() {
			return getRuleContext(Opt_uniqueContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public Opt_concurrentlyContext opt_concurrently() {
			return getRuleContext(Opt_concurrentlyContext.class,0);
		}
		public Opt_index_nameContext opt_index_name() {
			return getRuleContext(Opt_index_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Access_method_clauseContext access_method_clause() {
			return getRuleContext(Access_method_clauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Index_paramsContext index_params() {
			return getRuleContext(Index_paramsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_includeContext opt_include() {
			return getRuleContext(Opt_includeContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public OpttablespaceContext opttablespace() {
			return getRuleContext(OpttablespaceContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public IndexstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndexstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndexstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndexstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexstmtContext indexstmt() throws RecognitionException {
		IndexstmtContext _localctx = new IndexstmtContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_indexstmt);
		try {
			setState(5275);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5240);
				match(CREATE);
				setState(5241);
				opt_unique();
				setState(5242);
				match(INDEX);
				setState(5243);
				opt_concurrently();
				setState(5244);
				opt_index_name();
				setState(5245);
				match(ON);
				setState(5246);
				relation_expr();
				setState(5247);
				access_method_clause();
				setState(5248);
				match(OPEN_PAREN);
				setState(5249);
				index_params();
				setState(5250);
				match(CLOSE_PAREN);
				setState(5251);
				opt_include();
				setState(5252);
				opt_reloptions();
				setState(5253);
				opttablespace();
				setState(5254);
				where_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5256);
				match(CREATE);
				setState(5257);
				opt_unique();
				setState(5258);
				match(INDEX);
				setState(5259);
				opt_concurrently();
				setState(5260);
				match(IF_P);
				setState(5261);
				match(NOT);
				setState(5262);
				match(EXISTS);
				setState(5263);
				name();
				setState(5264);
				match(ON);
				setState(5265);
				relation_expr();
				setState(5266);
				access_method_clause();
				setState(5267);
				match(OPEN_PAREN);
				setState(5268);
				index_params();
				setState(5269);
				match(CLOSE_PAREN);
				setState(5270);
				opt_include();
				setState(5271);
				opt_reloptions();
				setState(5272);
				opttablespace();
				setState(5273);
				where_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_uniqueContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public Opt_uniqueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_unique; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_unique(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_unique(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_unique(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_uniqueContext opt_unique() throws RecognitionException {
		Opt_uniqueContext _localctx = new Opt_uniqueContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_opt_unique);
		try {
			setState(5279);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIQUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5277);
				match(UNIQUE);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_concurrentlyContext extends ParserRuleContext {
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public Opt_concurrentlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_concurrently; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_concurrently(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_concurrently(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_concurrently(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_concurrentlyContext opt_concurrently() throws RecognitionException {
		Opt_concurrentlyContext _localctx = new Opt_concurrentlyContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_opt_concurrently);
		try {
			setState(5283);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONCURRENTLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(5281);
				match(CONCURRENTLY);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case ON:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_index_nameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_index_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_index_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_index_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_index_nameContext opt_index_name() throws RecognitionException {
		Opt_index_nameContext _localctx = new Opt_index_nameContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_opt_index_name);
		try {
			setState(5287);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5285);
				name();
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Access_method_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Access_method_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_access_method_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAccess_method_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAccess_method_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAccess_method_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Access_method_clauseContext access_method_clause() throws RecognitionException {
		Access_method_clauseContext _localctx = new Access_method_clauseContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_access_method_clause);
		try {
			setState(5292);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(5289);
				match(USING);
				setState(5290);
				name();
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_paramsContext extends ParserRuleContext {
		public List<Index_elemContext> index_elem() {
			return getRuleContexts(Index_elemContext.class);
		}
		public Index_elemContext index_elem(int i) {
			return getRuleContext(Index_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Index_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_paramsContext index_params() throws RecognitionException {
		Index_paramsContext _localctx = new Index_paramsContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_index_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5294);
			index_elem();
			setState(5299);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5295);
				match(COMMA);
				setState(5296);
				index_elem();
				}
				}
				setState(5301);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_elem_optionsContext extends ParserRuleContext {
		public Opt_collateContext opt_collate() {
			return getRuleContext(Opt_collateContext.class,0);
		}
		public Opt_classContext opt_class() {
			return getRuleContext(Opt_classContext.class,0);
		}
		public Opt_asc_descContext opt_asc_desc() {
			return getRuleContext(Opt_asc_descContext.class,0);
		}
		public Opt_nulls_orderContext opt_nulls_order() {
			return getRuleContext(Opt_nulls_orderContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public Index_elem_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_elem_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_elem_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_elem_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_elem_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_elem_optionsContext index_elem_options() throws RecognitionException {
		Index_elem_optionsContext _localctx = new Index_elem_optionsContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_index_elem_options);
		try {
			setState(5313);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5302);
				opt_collate();
				setState(5303);
				opt_class();
				setState(5304);
				opt_asc_desc();
				setState(5305);
				opt_nulls_order();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5307);
				opt_collate();
				setState(5308);
				any_name();
				setState(5309);
				reloptions();
				setState(5310);
				opt_asc_desc();
				setState(5311);
				opt_nulls_order();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_elemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Index_elem_optionsContext index_elem_options() {
			return getRuleContext(Index_elem_optionsContext.class,0);
		}
		public Func_expr_windowlessContext func_expr_windowless() {
			return getRuleContext(Func_expr_windowlessContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Index_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_elemContext index_elem() throws RecognitionException {
		Index_elemContext _localctx = new Index_elemContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_index_elem);
		try {
			setState(5326);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5315);
				colid();
				setState(5316);
				index_elem_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5318);
				func_expr_windowless();
				setState(5319);
				index_elem_options();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5321);
				match(OPEN_PAREN);
				setState(5322);
				a_expr();
				setState(5323);
				match(CLOSE_PAREN);
				setState(5324);
				index_elem_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_includeContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(PostgreSQLParser.INCLUDE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Index_including_paramsContext index_including_params() {
			return getRuleContext(Index_including_paramsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_includeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_include; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_include(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_include(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_include(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_includeContext opt_include() throws RecognitionException {
		Opt_includeContext _localctx = new Opt_includeContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_opt_include);
		try {
			setState(5334);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INCLUDE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5328);
				match(INCLUDE);
				setState(5329);
				match(OPEN_PAREN);
				setState(5330);
				index_including_params();
				setState(5331);
				match(CLOSE_PAREN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_including_paramsContext extends ParserRuleContext {
		public List<Index_elemContext> index_elem() {
			return getRuleContexts(Index_elemContext.class);
		}
		public Index_elemContext index_elem(int i) {
			return getRuleContext(Index_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Index_including_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_including_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_including_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_including_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_including_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_including_paramsContext index_including_params() throws RecognitionException {
		Index_including_paramsContext _localctx = new Index_including_paramsContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_index_including_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5336);
			index_elem();
			setState(5341);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5337);
				match(COMMA);
				setState(5338);
				index_elem();
				}
				}
				setState(5343);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_collateContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_collateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_collate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_collate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_collate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_collate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_collateContext opt_collate() throws RecognitionException {
		Opt_collateContext _localctx = new Opt_collateContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_opt_collate);
		try {
			setState(5347);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5344);
				match(COLLATE);
				setState(5345);
				any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_classContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_classContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_class; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_class(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_class(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_class(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_classContext opt_class() throws RecognitionException {
		Opt_classContext _localctx = new Opt_classContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_opt_class);
		try {
			setState(5351);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5349);
				any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_asc_descContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(PostgreSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PostgreSQLParser.DESC, 0); }
		public Opt_asc_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_asc_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_asc_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_asc_desc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_asc_desc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_asc_descContext opt_asc_desc() throws RecognitionException {
		Opt_asc_descContext _localctx = new Opt_asc_descContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_opt_asc_desc);
		try {
			setState(5356);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASC:
				enterOuterAlt(_localctx, 1);
				{
				setState(5353);
				match(ASC);
				}
				break;
			case DESC:
				enterOuterAlt(_localctx, 2);
				{
				setState(5354);
				match(DESC);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case NULLS_P:
			case PREPARE:
			case RANGE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case ROWS:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case GROUPS:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_nulls_orderContext extends ParserRuleContext {
		public TerminalNode NULLS_P() { return getToken(PostgreSQLParser.NULLS_P, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public Opt_nulls_orderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_nulls_order; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_nulls_order(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_nulls_order(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_nulls_order(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_nulls_orderContext opt_nulls_order() throws RecognitionException {
		Opt_nulls_orderContext _localctx = new Opt_nulls_orderContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_opt_nulls_order);
		try {
			setState(5363);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5358);
				match(NULLS_P);
				setState(5359);
				match(FIRST_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5360);
				match(NULLS_P);
				setState(5361);
				match(LAST_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatefunctionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_args_with_defaultsContext func_args_with_defaults() {
			return getRuleContext(Func_args_with_defaultsContext.class,0);
		}
		public Createfunc_opt_listContext createfunc_opt_list() {
			return getRuleContext(Createfunc_opt_listContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode RETURNS() { return getToken(PostgreSQLParser.RETURNS, 0); }
		public Func_returnContext func_return() {
			return getRuleContext(Func_returnContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Table_func_column_listContext table_func_column_list() {
			return getRuleContext(Table_func_column_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CreatefunctionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunctionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatefunctionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatefunctionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatefunctionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatefunctionstmtContext createfunctionstmt() throws RecognitionException {
		CreatefunctionstmtContext _localctx = new CreatefunctionstmtContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_createfunctionstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5365);
			match(CREATE);
			setState(5366);
			opt_or_replace();
			setState(5367);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5368);
			func_name();
			setState(5369);
			func_args_with_defaults();
			setState(5379);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
			case 1:
				{
				setState(5370);
				match(RETURNS);
				setState(5377);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
				case 1:
					{
					setState(5371);
					func_return();
					}
					break;
				case 2:
					{
					setState(5372);
					match(TABLE);
					setState(5373);
					match(OPEN_PAREN);
					setState(5374);
					table_func_column_list();
					setState(5375);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
			setState(5381);
			createfunc_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_or_replaceContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public Opt_or_replaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_or_replace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_or_replace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_or_replace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_or_replace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_or_replaceContext opt_or_replace() throws RecognitionException {
		Opt_or_replaceContext _localctx = new Opt_or_replaceContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_opt_or_replace);
		try {
			setState(5386);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5383);
				match(OR);
				setState(5384);
				match(REPLACE);
				}
				break;
			case AGGREGATE:
			case FUNCTION:
			case LANGUAGE:
			case PROCEDURAL:
			case PROCEDURE:
			case RULE:
			case TRUSTED:
			case TRANSFORM:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_argsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_args_listContext func_args_list() {
			return getRuleContext(Func_args_listContext.class,0);
		}
		public Func_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_argsContext func_args() throws RecognitionException {
		Func_argsContext _localctx = new Func_argsContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_func_args);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5388);
			match(OPEN_PAREN);
			setState(5390);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & 576460786949430277L) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & -31L) != 0) || ((((_la - 165)) & ~0x3f) == 0 && ((1L << (_la - 165)) & -1L) != 0) || ((((_la - 229)) & ~0x3f) == 0 && ((1L << (_la - 229)) & -18874369L) != 0) || ((((_la - 293)) & ~0x3f) == 0 && ((1L << (_la - 293)) & -1L) != 0) || ((((_la - 357)) & ~0x3f) == 0 && ((1L << (_la - 357)) & -1L) != 0) || ((((_la - 421)) & ~0x3f) == 0 && ((1L << (_la - 421)) & -8589934593L) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & -17181179905L) != 0) || ((((_la - 549)) & ~0x3f) == 0 && ((1L << (_la - 549)) & -1L) != 0) || ((((_la - 613)) & ~0x3f) == 0 && ((1L << (_la - 613)) & 844425232121855L) != 0)) {
				{
				setState(5389);
				func_args_list();
				}
			}

			setState(5392);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_args_listContext extends ParserRuleContext {
		public List<Func_argContext> func_arg() {
			return getRuleContexts(Func_argContext.class);
		}
		public Func_argContext func_arg(int i) {
			return getRuleContext(Func_argContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Func_args_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_args_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_args_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_args_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_listContext func_args_list() throws RecognitionException {
		Func_args_listContext _localctx = new Func_args_listContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_func_args_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5394);
			func_arg();
			setState(5399);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5395);
				match(COMMA);
				setState(5396);
				func_arg();
				}
				}
				setState(5401);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_with_argtypes_listContext extends ParserRuleContext {
		public List<Function_with_argtypesContext> function_with_argtypes() {
			return getRuleContexts(Function_with_argtypesContext.class);
		}
		public Function_with_argtypesContext function_with_argtypes(int i) {
			return getRuleContext(Function_with_argtypesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Function_with_argtypes_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_with_argtypes_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunction_with_argtypes_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunction_with_argtypes_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunction_with_argtypes_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_with_argtypes_listContext function_with_argtypes_list() throws RecognitionException {
		Function_with_argtypes_listContext _localctx = new Function_with_argtypes_listContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_function_with_argtypes_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5402);
			function_with_argtypes();
			setState(5407);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5403);
				match(COMMA);
				setState(5404);
				function_with_argtypes();
				}
				}
				setState(5409);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_with_argtypesContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Function_with_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_with_argtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunction_with_argtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunction_with_argtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunction_with_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_with_argtypesContext function_with_argtypes() throws RecognitionException {
		Function_with_argtypesContext _localctx = new Function_with_argtypesContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_function_with_argtypes);
		int _la;
		try {
			setState(5418);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5410);
				func_name();
				setState(5411);
				func_args();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5413);
				type_func_name_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5414);
				colid();
				setState(5416);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_BRACKET || _la==DOT) {
					{
					setState(5415);
					indirection();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_args_with_defaultsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_args_with_defaults_listContext func_args_with_defaults_list() {
			return getRuleContext(Func_args_with_defaults_listContext.class,0);
		}
		public Func_args_with_defaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_with_defaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_args_with_defaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_args_with_defaults(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_args_with_defaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_with_defaultsContext func_args_with_defaults() throws RecognitionException {
		Func_args_with_defaultsContext _localctx = new Func_args_with_defaultsContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_func_args_with_defaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5420);
			match(OPEN_PAREN);
			setState(5422);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & 576460786949430277L) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & -31L) != 0) || ((((_la - 165)) & ~0x3f) == 0 && ((1L << (_la - 165)) & -1L) != 0) || ((((_la - 229)) & ~0x3f) == 0 && ((1L << (_la - 229)) & -18874369L) != 0) || ((((_la - 293)) & ~0x3f) == 0 && ((1L << (_la - 293)) & -1L) != 0) || ((((_la - 357)) & ~0x3f) == 0 && ((1L << (_la - 357)) & -1L) != 0) || ((((_la - 421)) & ~0x3f) == 0 && ((1L << (_la - 421)) & -8589934593L) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & -17181179905L) != 0) || ((((_la - 549)) & ~0x3f) == 0 && ((1L << (_la - 549)) & -1L) != 0) || ((((_la - 613)) & ~0x3f) == 0 && ((1L << (_la - 613)) & 844425232121855L) != 0)) {
				{
				setState(5421);
				func_args_with_defaults_list();
				}
			}

			setState(5424);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_args_with_defaults_listContext extends ParserRuleContext {
		public List<Func_arg_with_defaultContext> func_arg_with_default() {
			return getRuleContexts(Func_arg_with_defaultContext.class);
		}
		public Func_arg_with_defaultContext func_arg_with_default(int i) {
			return getRuleContext(Func_arg_with_defaultContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Func_args_with_defaults_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_with_defaults_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_args_with_defaults_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_args_with_defaults_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_args_with_defaults_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_with_defaults_listContext func_args_with_defaults_list() throws RecognitionException {
		Func_args_with_defaults_listContext _localctx = new Func_args_with_defaults_listContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_func_args_with_defaults_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5426);
			func_arg_with_default();
			setState(5431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5427);
				match(COMMA);
				setState(5428);
				func_arg_with_default();
				}
				}
				setState(5433);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_argContext extends ParserRuleContext {
		public Arg_classContext arg_class() {
			return getRuleContext(Arg_classContext.class,0);
		}
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public Func_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_argContext func_arg() throws RecognitionException {
		Func_argContext _localctx = new Func_argContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_func_arg);
		try {
			setState(5447);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5434);
				arg_class();
				setState(5436);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
				case 1:
					{
					setState(5435);
					param_name();
					}
					break;
				}
				setState(5438);
				func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5440);
				param_name();
				setState(5442);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
				case 1:
					{
					setState(5441);
					arg_class();
					}
					break;
				}
				setState(5444);
				func_type();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5446);
				func_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Arg_classContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode OUT_P() { return getToken(PostgreSQLParser.OUT_P, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSQLParser.VARIADIC, 0); }
		public Arg_classContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg_class; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterArg_class(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitArg_class(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitArg_class(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Arg_classContext arg_class() throws RecognitionException {
		Arg_classContext _localctx = new Arg_classContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_arg_class);
		try {
			setState(5456);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(5449);
				match(IN_P);
				setState(5451);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
				case 1:
					{
					setState(5450);
					match(OUT_P);
					}
					break;
				}
				}
				break;
			case OUT_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(5453);
				match(OUT_P);
				}
				break;
			case INOUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5454);
				match(INOUT);
				}
				break;
			case VARIADIC:
				enterOuterAlt(_localctx, 4);
				{
				setState(5455);
				match(VARIADIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Param_nameContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public Builtin_function_nameContext builtin_function_name() {
			return getRuleContext(Builtin_function_nameContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(PostgreSQLParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLParser.RIGHT, 0); }
		public Param_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterParam_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitParam_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitParam_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Param_nameContext param_name() throws RecognitionException {
		Param_nameContext _localctx = new Param_nameContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_param_name);
		try {
			setState(5462);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case COLUMNS:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5458);
				type_function_name();
				}
				break;
			case REPLACE:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case REVERSE:
			case LOG:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5459);
				builtin_function_name();
				}
				break;
			case LEFT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5460);
				match(LEFT);
				}
				break;
			case RIGHT:
				enterOuterAlt(_localctx, 4);
				{
				setState(5461);
				match(RIGHT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_returnContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Func_returnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_return; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_return(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_return(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_return(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_returnContext func_return() throws RecognitionException {
		Func_returnContext _localctx = new Func_returnContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_func_return);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5464);
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_typeContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Builtin_function_nameContext builtin_function_name() {
			return getRuleContext(Builtin_function_nameContext.class,0);
		}
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(PostgreSQLParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLParser.RIGHT, 0); }
		public TerminalNode SETOF() { return getToken(PostgreSQLParser.SETOF, 0); }
		public Func_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_typeContext func_type() throws RecognitionException {
		Func_typeContext _localctx = new Func_typeContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_func_type);
		int _la;
		try {
			setState(5480);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5466);
				typename();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5468);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SETOF) {
					{
					setState(5467);
					match(SETOF);
					}
				}

				setState(5474);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case REPLACE:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case REVERSE:
				case LOG:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
					{
					setState(5470);
					builtin_function_name();
					}
					break;
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER_P:
				case IS:
				case ISNULL:
				case JOIN:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER_P:
				case OVER:
				case OVERLAPS:
				case SIMILAR:
				case VERBOSE:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case SETS:
				case TABLESAMPLE:
				case ORDINALITY:
				case COLUMNS:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					setState(5471);
					type_function_name();
					}
					break;
				case LEFT:
					{
					setState(5472);
					match(LEFT);
					}
					break;
				case RIGHT:
					{
					setState(5473);
					match(RIGHT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5476);
				attrs();
				setState(5477);
				match(PERCENT);
				setState(5478);
				match(TYPE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_arg_with_defaultContext extends ParserRuleContext {
		public Func_argContext func_arg() {
			return getRuleContext(Func_argContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Func_arg_with_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_with_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_arg_with_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_arg_with_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_arg_with_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_with_defaultContext func_arg_with_default() throws RecognitionException {
		Func_arg_with_defaultContext _localctx = new Func_arg_with_defaultContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_func_arg_with_default);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5482);
			func_arg();
			setState(5485);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL || _la==DEFAULT) {
				{
				setState(5483);
				_la = _input.LA(1);
				if ( !(_la==EQUAL || _la==DEFAULT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5484);
				a_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aggr_argContext extends ParserRuleContext {
		public Func_argContext func_arg() {
			return getRuleContext(Func_argContext.class,0);
		}
		public Aggr_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggr_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggr_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggr_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggr_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggr_argContext aggr_arg() throws RecognitionException {
		Aggr_argContext _localctx = new Aggr_argContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_aggr_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5487);
			func_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aggr_argsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public List<Aggr_args_listContext> aggr_args_list() {
			return getRuleContexts(Aggr_args_listContext.class);
		}
		public Aggr_args_listContext aggr_args_list(int i) {
			return getRuleContext(Aggr_args_listContext.class,i);
		}
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Aggr_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggr_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggr_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggr_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggr_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggr_argsContext aggr_args() throws RecognitionException {
		Aggr_argsContext _localctx = new Aggr_argsContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_aggr_args);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5489);
			match(OPEN_PAREN);
			setState(5500);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
			case 1:
				{
				setState(5490);
				match(STAR);
				}
				break;
			case 2:
				{
				setState(5491);
				aggr_args_list();
				}
				break;
			case 3:
				{
				setState(5492);
				match(ORDER);
				setState(5493);
				match(BY);
				setState(5494);
				aggr_args_list();
				}
				break;
			case 4:
				{
				setState(5495);
				aggr_args_list();
				setState(5496);
				match(ORDER);
				setState(5497);
				match(BY);
				setState(5498);
				aggr_args_list();
				}
				break;
			}
			setState(5502);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aggr_args_listContext extends ParserRuleContext {
		public List<Aggr_argContext> aggr_arg() {
			return getRuleContexts(Aggr_argContext.class);
		}
		public Aggr_argContext aggr_arg(int i) {
			return getRuleContext(Aggr_argContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Aggr_args_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggr_args_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggr_args_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggr_args_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggr_args_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggr_args_listContext aggr_args_list() throws RecognitionException {
		Aggr_args_listContext _localctx = new Aggr_args_listContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_aggr_args_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5504);
			aggr_arg();
			setState(5509);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5505);
				match(COMMA);
				setState(5506);
				aggr_arg();
				}
				}
				setState(5511);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aggregate_with_argtypesContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public Aggregate_with_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_with_argtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggregate_with_argtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggregate_with_argtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggregate_with_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_with_argtypesContext aggregate_with_argtypes() throws RecognitionException {
		Aggregate_with_argtypesContext _localctx = new Aggregate_with_argtypesContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_aggregate_with_argtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5512);
			func_name();
			setState(5513);
			aggr_args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aggregate_with_argtypes_listContext extends ParserRuleContext {
		public List<Aggregate_with_argtypesContext> aggregate_with_argtypes() {
			return getRuleContexts(Aggregate_with_argtypesContext.class);
		}
		public Aggregate_with_argtypesContext aggregate_with_argtypes(int i) {
			return getRuleContext(Aggregate_with_argtypesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Aggregate_with_argtypes_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_with_argtypes_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggregate_with_argtypes_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggregate_with_argtypes_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggregate_with_argtypes_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_with_argtypes_listContext aggregate_with_argtypes_list() throws RecognitionException {
		Aggregate_with_argtypes_listContext _localctx = new Aggregate_with_argtypes_listContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_aggregate_with_argtypes_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5515);
			aggregate_with_argtypes();
			setState(5520);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5516);
				match(COMMA);
				setState(5517);
				aggregate_with_argtypes();
				}
				}
				setState(5522);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Createfunc_opt_listContext extends ParserRuleContext {
		public List<Createfunc_opt_itemContext> createfunc_opt_item() {
			return getRuleContexts(Createfunc_opt_itemContext.class);
		}
		public Createfunc_opt_itemContext createfunc_opt_item(int i) {
			return getRuleContext(Createfunc_opt_itemContext.class,i);
		}
		public Createfunc_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunc_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatefunc_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatefunc_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatefunc_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createfunc_opt_listContext createfunc_opt_list() throws RecognitionException {
		Createfunc_opt_listContext _localctx = new Createfunc_opt_listContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_createfunc_opt_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5524); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(5523);
					createfunc_opt_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5526); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,286,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );

			                ParseRoutineBody(_localctx);
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Common_func_opt_itemContext extends ParserRuleContext {
		public TerminalNode CALLED() { return getToken(PostgreSQLParser.CALLED, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public List<TerminalNode> NULL_P() { return getTokens(PostgreSQLParser.NULL_P); }
		public TerminalNode NULL_P(int i) {
			return getToken(PostgreSQLParser.NULL_P, i);
		}
		public TerminalNode INPUT_P() { return getToken(PostgreSQLParser.INPUT_P, 0); }
		public TerminalNode RETURNS() { return getToken(PostgreSQLParser.RETURNS, 0); }
		public TerminalNode STRICT_P() { return getToken(PostgreSQLParser.STRICT_P, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PostgreSQLParser.IMMUTABLE, 0); }
		public TerminalNode STABLE() { return getToken(PostgreSQLParser.STABLE, 0); }
		public TerminalNode VOLATILE() { return getToken(PostgreSQLParser.VOLATILE, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSQLParser.EXTERNAL, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(PostgreSQLParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(PostgreSQLParser.INVOKER, 0); }
		public TerminalNode LEAKPROOF() { return getToken(PostgreSQLParser.LEAKPROOF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode COST() { return getToken(PostgreSQLParser.COST, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode SUPPORT() { return getToken(PostgreSQLParser.SUPPORT, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public FunctionsetresetclauseContext functionsetresetclause() {
			return getRuleContext(FunctionsetresetclauseContext.class,0);
		}
		public TerminalNode PARALLEL() { return getToken(PostgreSQLParser.PARALLEL, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Common_func_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_func_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCommon_func_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCommon_func_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCommon_func_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_func_opt_itemContext common_func_opt_item() throws RecognitionException {
		Common_func_opt_itemContext _localctx = new Common_func_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_common_func_opt_item);
		try {
			setState(5565);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5530);
				match(CALLED);
				setState(5531);
				match(ON);
				setState(5532);
				match(NULL_P);
				setState(5533);
				match(INPUT_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5534);
				match(RETURNS);
				setState(5535);
				match(NULL_P);
				setState(5536);
				match(ON);
				setState(5537);
				match(NULL_P);
				setState(5538);
				match(INPUT_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5539);
				match(STRICT_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5540);
				match(IMMUTABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5541);
				match(STABLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5542);
				match(VOLATILE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5543);
				match(EXTERNAL);
				setState(5544);
				match(SECURITY);
				setState(5545);
				match(DEFINER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5546);
				match(EXTERNAL);
				setState(5547);
				match(SECURITY);
				setState(5548);
				match(INVOKER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5549);
				match(SECURITY);
				setState(5550);
				match(DEFINER);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5551);
				match(SECURITY);
				setState(5552);
				match(INVOKER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5553);
				match(LEAKPROOF);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5554);
				match(NOT);
				setState(5555);
				match(LEAKPROOF);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5556);
				match(COST);
				setState(5557);
				numericonly();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5558);
				match(ROWS);
				setState(5559);
				numericonly();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5560);
				match(SUPPORT);
				setState(5561);
				any_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5562);
				functionsetresetclause();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5563);
				match(PARALLEL);
				setState(5564);
				colid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Createfunc_opt_itemContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Func_asContext func_as() {
			return getRuleContext(Func_asContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public Transform_type_listContext transform_type_list() {
			return getRuleContext(Transform_type_listContext.class,0);
		}
		public TerminalNode WINDOW() { return getToken(PostgreSQLParser.WINDOW, 0); }
		public Common_func_opt_itemContext common_func_opt_item() {
			return getRuleContext(Common_func_opt_itemContext.class,0);
		}
		public Createfunc_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunc_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatefunc_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatefunc_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatefunc_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createfunc_opt_itemContext createfunc_opt_item() throws RecognitionException {
		Createfunc_opt_itemContext _localctx = new Createfunc_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_createfunc_opt_item);
		try {
			setState(5575);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5567);
				match(AS);
				setState(5568);
				func_as();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5569);
				match(LANGUAGE);
				setState(5570);
				nonreservedword_or_sconst();
				}
				break;
			case TRANSFORM:
				enterOuterAlt(_localctx, 3);
				{
				setState(5571);
				match(TRANSFORM);
				setState(5572);
				transform_type_list();
				}
				break;
			case WINDOW:
				enterOuterAlt(_localctx, 4);
				{
				setState(5573);
				match(WINDOW);
				}
				break;
			case NOT:
			case CALLED:
			case COST:
			case EXTERNAL:
			case IMMUTABLE:
			case LEAKPROOF:
			case RESET:
			case RETURNS:
			case ROWS:
			case SECURITY:
			case SET:
			case STABLE:
			case STRICT_P:
			case VOLATILE:
			case SUPPORT:
			case PARALLEL:
				enterOuterAlt(_localctx, 5);
				{
				setState(5574);
				common_func_opt_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_asContext extends ParserRuleContext {
		public ParserRuleContext Definition;
		public SconstContext def;
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Func_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_as(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_asContext func_as() throws RecognitionException {
		Func_asContext _localctx = new Func_asContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_func_as);
		try {
			setState(5582);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5577);
				((Func_asContext)_localctx).def = sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5578);
				sconst();
				setState(5579);
				match(COMMA);
				setState(5580);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Transform_type_listContext extends ParserRuleContext {
		public List<TerminalNode> FOR() { return getTokens(PostgreSQLParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(PostgreSQLParser.FOR, i);
		}
		public List<TerminalNode> TYPE_P() { return getTokens(PostgreSQLParser.TYPE_P); }
		public TerminalNode TYPE_P(int i) {
			return getToken(PostgreSQLParser.TYPE_P, i);
		}
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Transform_type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transform_type_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransform_type_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransform_type_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransform_type_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transform_type_listContext transform_type_list() throws RecognitionException {
		Transform_type_listContext _localctx = new Transform_type_listContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_transform_type_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5584);
			match(FOR);
			setState(5585);
			match(TYPE_P);
			setState(5586);
			typename();
			setState(5593);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5587);
				match(COMMA);
				setState(5588);
				match(FOR);
				setState(5589);
				match(TYPE_P);
				setState(5590);
				typename();
				}
				}
				setState(5595);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_definitionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public Opt_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_definitionContext opt_definition() throws RecognitionException {
		Opt_definitionContext _localctx = new Opt_definitionContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_opt_definition);
		try {
			setState(5599);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5596);
				match(WITH);
				setState(5597);
				definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_func_columnContext extends ParserRuleContext {
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Table_func_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_func_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_func_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_func_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_func_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_func_columnContext table_func_column() throws RecognitionException {
		Table_func_columnContext _localctx = new Table_func_columnContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_table_func_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5601);
			param_name();
			setState(5602);
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_func_column_listContext extends ParserRuleContext {
		public List<Table_func_columnContext> table_func_column() {
			return getRuleContexts(Table_func_columnContext.class);
		}
		public Table_func_columnContext table_func_column(int i) {
			return getRuleContext(Table_func_columnContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Table_func_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_func_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_func_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_func_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_func_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_func_column_listContext table_func_column_list() throws RecognitionException {
		Table_func_column_listContext _localctx = new Table_func_column_listContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_table_func_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5604);
			table_func_column();
			setState(5609);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5605);
				match(COMMA);
				setState(5606);
				table_func_column();
				}
				}
				setState(5611);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterfunctionstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Alterfunc_opt_listContext alterfunc_opt_list() {
			return getRuleContext(Alterfunc_opt_listContext.class,0);
		}
		public Opt_restrictContext opt_restrict() {
			return getRuleContext(Opt_restrictContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public AlterfunctionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfunctionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterfunctionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterfunctionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterfunctionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterfunctionstmtContext alterfunctionstmt() throws RecognitionException {
		AlterfunctionstmtContext _localctx = new AlterfunctionstmtContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_alterfunctionstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5612);
			match(ALTER);
			setState(5613);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE || _la==ROUTINE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5614);
			function_with_argtypes();
			setState(5615);
			alterfunc_opt_list();
			setState(5616);
			opt_restrict();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alterfunc_opt_listContext extends ParserRuleContext {
		public List<Common_func_opt_itemContext> common_func_opt_item() {
			return getRuleContexts(Common_func_opt_itemContext.class);
		}
		public Common_func_opt_itemContext common_func_opt_item(int i) {
			return getRuleContext(Common_func_opt_itemContext.class,i);
		}
		public Alterfunc_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfunc_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterfunc_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterfunc_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterfunc_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alterfunc_opt_listContext alterfunc_opt_list() throws RecognitionException {
		Alterfunc_opt_listContext _localctx = new Alterfunc_opt_listContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_alterfunc_opt_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5619); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(5618);
					common_func_opt_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5621); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,293,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_restrictContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Opt_restrictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_restrict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_restrict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_restrict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_restrict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_restrictContext opt_restrict() throws RecognitionException {
		Opt_restrictContext _localctx = new Opt_restrictContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_opt_restrict);
		try {
			setState(5625);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5623);
				match(RESTRICT);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RemovefuncstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypes_listContext function_with_argtypes_list() {
			return getRuleContext(Function_with_argtypes_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public RemovefuncstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removefuncstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRemovefuncstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRemovefuncstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRemovefuncstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemovefuncstmtContext removefuncstmt() throws RecognitionException {
		RemovefuncstmtContext _localctx = new RemovefuncstmtContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_removefuncstmt);
		try {
			setState(5663);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5627);
				match(DROP);
				setState(5628);
				match(FUNCTION);
				setState(5629);
				function_with_argtypes_list();
				setState(5630);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5632);
				match(DROP);
				setState(5633);
				match(FUNCTION);
				setState(5634);
				match(IF_P);
				setState(5635);
				match(EXISTS);
				setState(5636);
				function_with_argtypes_list();
				setState(5637);
				opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5639);
				match(DROP);
				setState(5640);
				match(PROCEDURE);
				setState(5641);
				function_with_argtypes_list();
				setState(5642);
				opt_drop_behavior();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5644);
				match(DROP);
				setState(5645);
				match(PROCEDURE);
				setState(5646);
				match(IF_P);
				setState(5647);
				match(EXISTS);
				setState(5648);
				function_with_argtypes_list();
				setState(5649);
				opt_drop_behavior();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5651);
				match(DROP);
				setState(5652);
				match(ROUTINE);
				setState(5653);
				function_with_argtypes_list();
				setState(5654);
				opt_drop_behavior();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5656);
				match(DROP);
				setState(5657);
				match(ROUTINE);
				setState(5658);
				match(IF_P);
				setState(5659);
				match(EXISTS);
				setState(5660);
				function_with_argtypes_list();
				setState(5661);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RemoveaggrstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypes_listContext aggregate_with_argtypes_list() {
			return getRuleContext(Aggregate_with_argtypes_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public RemoveaggrstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeaggrstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRemoveaggrstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRemoveaggrstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRemoveaggrstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemoveaggrstmtContext removeaggrstmt() throws RecognitionException {
		RemoveaggrstmtContext _localctx = new RemoveaggrstmtContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_removeaggrstmt);
		try {
			setState(5677);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5665);
				match(DROP);
				setState(5666);
				match(AGGREGATE);
				setState(5667);
				aggregate_with_argtypes_list();
				setState(5668);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5670);
				match(DROP);
				setState(5671);
				match(AGGREGATE);
				setState(5672);
				match(IF_P);
				setState(5673);
				match(EXISTS);
				setState(5674);
				aggregate_with_argtypes_list();
				setState(5675);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RemoveoperstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypes_listContext operator_with_argtypes_list() {
			return getRuleContext(Operator_with_argtypes_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public RemoveoperstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeoperstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRemoveoperstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRemoveoperstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRemoveoperstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemoveoperstmtContext removeoperstmt() throws RecognitionException {
		RemoveoperstmtContext _localctx = new RemoveoperstmtContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_removeoperstmt);
		try {
			setState(5691);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5679);
				match(DROP);
				setState(5680);
				match(OPERATOR);
				setState(5681);
				operator_with_argtypes_list();
				setState(5682);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5684);
				match(DROP);
				setState(5685);
				match(OPERATOR);
				setState(5686);
				match(IF_P);
				setState(5687);
				match(EXISTS);
				setState(5688);
				operator_with_argtypes_list();
				setState(5689);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Oper_argtypesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public Oper_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oper_argtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOper_argtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOper_argtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOper_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Oper_argtypesContext oper_argtypes() throws RecognitionException {
		Oper_argtypesContext _localctx = new Oper_argtypesContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_oper_argtypes);
		try {
			setState(5715);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5693);
				match(OPEN_PAREN);
				setState(5694);
				typename();
				setState(5695);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5697);
				match(OPEN_PAREN);
				setState(5698);
				typename();
				setState(5699);
				match(COMMA);
				setState(5700);
				typename();
				setState(5701);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5703);
				match(OPEN_PAREN);
				setState(5704);
				match(NONE);
				setState(5705);
				match(COMMA);
				setState(5706);
				typename();
				setState(5707);
				match(CLOSE_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5709);
				match(OPEN_PAREN);
				setState(5710);
				typename();
				setState(5711);
				match(COMMA);
				setState(5712);
				match(NONE);
				setState(5713);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Any_operatorContext extends ParserRuleContext {
		public All_opContext all_op() {
			return getRuleContext(All_opContext.class,0);
		}
		public List<ColidContext> colid() {
			return getRuleContexts(ColidContext.class);
		}
		public ColidContext colid(int i) {
			return getRuleContext(ColidContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(PostgreSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(PostgreSQLParser.DOT, i);
		}
		public Any_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAny_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAny_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAny_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_operatorContext any_operator() throws RecognitionException {
		Any_operatorContext _localctx = new Any_operatorContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_any_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2459027012145119232L) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & -113665638399L) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & -1L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -9663676417L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -1L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -1152925902653358081L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -8796764110849L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -1L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & 432345718846390271L) != 0)) {
				{
				{
				setState(5717);
				colid();
				setState(5718);
				match(DOT);
				}
				}
				setState(5724);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5725);
			all_op();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Operator_with_argtypes_listContext extends ParserRuleContext {
		public List<Operator_with_argtypesContext> operator_with_argtypes() {
			return getRuleContexts(Operator_with_argtypesContext.class);
		}
		public Operator_with_argtypesContext operator_with_argtypes(int i) {
			return getRuleContext(Operator_with_argtypesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Operator_with_argtypes_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_with_argtypes_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOperator_with_argtypes_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOperator_with_argtypes_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOperator_with_argtypes_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_with_argtypes_listContext operator_with_argtypes_list() throws RecognitionException {
		Operator_with_argtypes_listContext _localctx = new Operator_with_argtypes_listContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_operator_with_argtypes_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5727);
			operator_with_argtypes();
			setState(5732);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5728);
				match(COMMA);
				setState(5729);
				operator_with_argtypes();
				}
				}
				setState(5734);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Operator_with_argtypesContext extends ParserRuleContext {
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public Operator_with_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_with_argtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOperator_with_argtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOperator_with_argtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOperator_with_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_with_argtypesContext operator_with_argtypes() throws RecognitionException {
		Operator_with_argtypesContext _localctx = new Operator_with_argtypesContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_operator_with_argtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5735);
			any_operator();
			setState(5736);
			oper_argtypes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DostmtContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public Dostmt_opt_listContext dostmt_opt_list() {
			return getRuleContext(Dostmt_opt_listContext.class,0);
		}
		public DostmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDostmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDostmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDostmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DostmtContext dostmt() throws RecognitionException {
		DostmtContext _localctx = new DostmtContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_dostmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5738);
			match(DO);
			setState(5739);
			dostmt_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dostmt_opt_listContext extends ParserRuleContext {
		public List<Dostmt_opt_itemContext> dostmt_opt_item() {
			return getRuleContexts(Dostmt_opt_itemContext.class);
		}
		public Dostmt_opt_itemContext dostmt_opt_item(int i) {
			return getRuleContext(Dostmt_opt_itemContext.class,i);
		}
		public Dostmt_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDostmt_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDostmt_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDostmt_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dostmt_opt_listContext dostmt_opt_list() throws RecognitionException {
		Dostmt_opt_listContext _localctx = new Dostmt_opt_listContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_dostmt_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5742); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5741);
				dostmt_opt_item();
				}
				}
				setState(5744); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==LANGUAGE || ((((_la - 645)) & ~0x3f) == 0 && ((1L << (_la - 645)) & 67108885L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dostmt_opt_itemContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public Dostmt_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDostmt_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDostmt_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDostmt_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dostmt_opt_itemContext dostmt_opt_item() throws RecognitionException {
		Dostmt_opt_itemContext _localctx = new Dostmt_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_dostmt_opt_item);
		try {
			setState(5749);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(5746);
				sconst();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5747);
				match(LANGUAGE);
				setState(5748);
				nonreservedword_or_sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatecaststmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Cast_contextContext cast_context() {
			return getRuleContext(Cast_contextContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public CreatecaststmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createcaststmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatecaststmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatecaststmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatecaststmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatecaststmtContext createcaststmt() throws RecognitionException {
		CreatecaststmtContext _localctx = new CreatecaststmtContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_createcaststmt);
		try {
			setState(5785);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5751);
				match(CREATE);
				setState(5752);
				match(CAST);
				setState(5753);
				match(OPEN_PAREN);
				setState(5754);
				typename();
				setState(5755);
				match(AS);
				setState(5756);
				typename();
				setState(5757);
				match(CLOSE_PAREN);
				setState(5758);
				match(WITH);
				setState(5759);
				match(FUNCTION);
				setState(5760);
				function_with_argtypes();
				setState(5761);
				cast_context();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5763);
				match(CREATE);
				setState(5764);
				match(CAST);
				setState(5765);
				match(OPEN_PAREN);
				setState(5766);
				typename();
				setState(5767);
				match(AS);
				setState(5768);
				typename();
				setState(5769);
				match(CLOSE_PAREN);
				setState(5770);
				match(WITHOUT);
				setState(5771);
				match(FUNCTION);
				setState(5772);
				cast_context();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5774);
				match(CREATE);
				setState(5775);
				match(CAST);
				setState(5776);
				match(OPEN_PAREN);
				setState(5777);
				typename();
				setState(5778);
				match(AS);
				setState(5779);
				typename();
				setState(5780);
				match(CLOSE_PAREN);
				setState(5781);
				match(WITH);
				setState(5782);
				match(INOUT);
				setState(5783);
				cast_context();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cast_contextContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode IMPLICIT_P() { return getToken(PostgreSQLParser.IMPLICIT_P, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PostgreSQLParser.ASSIGNMENT, 0); }
		public Cast_contextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_context; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCast_context(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCast_context(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCast_context(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cast_contextContext cast_context() throws RecognitionException {
		Cast_contextContext _localctx = new Cast_contextContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_cast_context);
		try {
			setState(5792);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5787);
				match(AS);
				setState(5788);
				match(IMPLICIT_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5789);
				match(AS);
				setState(5790);
				match(ASSIGNMENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropcaststmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public Opt_if_existsContext opt_if_exists() {
			return getRuleContext(Opt_if_existsContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DropcaststmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropcaststmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropcaststmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropcaststmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropcaststmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropcaststmtContext dropcaststmt() throws RecognitionException {
		DropcaststmtContext _localctx = new DropcaststmtContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_dropcaststmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5794);
			match(DROP);
			setState(5795);
			match(CAST);
			setState(5796);
			opt_if_exists();
			setState(5797);
			match(OPEN_PAREN);
			setState(5798);
			typename();
			setState(5799);
			match(AS);
			setState(5800);
			typename();
			setState(5801);
			match(CLOSE_PAREN);
			setState(5802);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_if_existsContext extends ParserRuleContext {
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Opt_if_existsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_if_exists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_if_exists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_if_exists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_if_exists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_if_existsContext opt_if_exists() throws RecognitionException {
		Opt_if_existsContext _localctx = new Opt_if_existsContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_opt_if_exists);
		try {
			setState(5807);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IF_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(5804);
				match(IF_P);
				setState(5805);
				match(EXISTS);
				}
				break;
			case OPEN_PAREN:
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatetransformstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Transform_element_listContext transform_element_list() {
			return getRuleContext(Transform_element_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CreatetransformstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createtransformstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatetransformstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatetransformstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatetransformstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatetransformstmtContext createtransformstmt() throws RecognitionException {
		CreatetransformstmtContext _localctx = new CreatetransformstmtContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_createtransformstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5809);
			match(CREATE);
			setState(5810);
			opt_or_replace();
			setState(5811);
			match(TRANSFORM);
			setState(5812);
			match(FOR);
			setState(5813);
			typename();
			setState(5814);
			match(LANGUAGE);
			setState(5815);
			name();
			setState(5816);
			match(OPEN_PAREN);
			setState(5817);
			transform_element_list();
			setState(5818);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Transform_element_listContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public List<TerminalNode> SQL_P() { return getTokens(PostgreSQLParser.SQL_P); }
		public TerminalNode SQL_P(int i) {
			return getToken(PostgreSQLParser.SQL_P, i);
		}
		public List<TerminalNode> WITH() { return getTokens(PostgreSQLParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PostgreSQLParser.WITH, i);
		}
		public List<TerminalNode> FUNCTION() { return getTokens(PostgreSQLParser.FUNCTION); }
		public TerminalNode FUNCTION(int i) {
			return getToken(PostgreSQLParser.FUNCTION, i);
		}
		public List<Function_with_argtypesContext> function_with_argtypes() {
			return getRuleContexts(Function_with_argtypesContext.class);
		}
		public Function_with_argtypesContext function_with_argtypes(int i) {
			return getRuleContext(Function_with_argtypesContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Transform_element_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transform_element_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransform_element_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransform_element_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransform_element_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transform_element_listContext transform_element_list() throws RecognitionException {
		Transform_element_listContext _localctx = new Transform_element_listContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_transform_element_list);
		try {
			setState(5854);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5820);
				match(FROM);
				setState(5821);
				match(SQL_P);
				setState(5822);
				match(WITH);
				setState(5823);
				match(FUNCTION);
				setState(5824);
				function_with_argtypes();
				setState(5825);
				match(COMMA);
				setState(5826);
				match(TO);
				setState(5827);
				match(SQL_P);
				setState(5828);
				match(WITH);
				setState(5829);
				match(FUNCTION);
				setState(5830);
				function_with_argtypes();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5832);
				match(TO);
				setState(5833);
				match(SQL_P);
				setState(5834);
				match(WITH);
				setState(5835);
				match(FUNCTION);
				setState(5836);
				function_with_argtypes();
				setState(5837);
				match(COMMA);
				setState(5838);
				match(FROM);
				setState(5839);
				match(SQL_P);
				setState(5840);
				match(WITH);
				setState(5841);
				match(FUNCTION);
				setState(5842);
				function_with_argtypes();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5844);
				match(FROM);
				setState(5845);
				match(SQL_P);
				setState(5846);
				match(WITH);
				setState(5847);
				match(FUNCTION);
				setState(5848);
				function_with_argtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5849);
				match(TO);
				setState(5850);
				match(SQL_P);
				setState(5851);
				match(WITH);
				setState(5852);
				match(FUNCTION);
				setState(5853);
				function_with_argtypes();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DroptransformstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public Opt_if_existsContext opt_if_exists() {
			return getRuleContext(Opt_if_existsContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DroptransformstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_droptransformstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDroptransformstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDroptransformstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDroptransformstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DroptransformstmtContext droptransformstmt() throws RecognitionException {
		DroptransformstmtContext _localctx = new DroptransformstmtContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_droptransformstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5856);
			match(DROP);
			setState(5857);
			match(TRANSFORM);
			setState(5858);
			opt_if_exists();
			setState(5859);
			match(FOR);
			setState(5860);
			typename();
			setState(5861);
			match(LANGUAGE);
			setState(5862);
			name();
			setState(5863);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReindexstmtContext extends ParserRuleContext {
		public TerminalNode REINDEX() { return getToken(PostgreSQLParser.REINDEX, 0); }
		public Reindex_target_typeContext reindex_target_type() {
			return getRuleContext(Reindex_target_typeContext.class,0);
		}
		public Opt_concurrentlyContext opt_concurrently() {
			return getRuleContext(Opt_concurrentlyContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Reindex_target_multitableContext reindex_target_multitable() {
			return getRuleContext(Reindex_target_multitableContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Reindex_option_listContext reindex_option_list() {
			return getRuleContext(Reindex_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ReindexstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindexstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindexstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindexstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexstmtContext reindexstmt() throws RecognitionException {
		ReindexstmtContext _localctx = new ReindexstmtContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_reindexstmt);
		try {
			setState(5891);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5865);
				match(REINDEX);
				setState(5866);
				reindex_target_type();
				setState(5867);
				opt_concurrently();
				setState(5868);
				qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5870);
				match(REINDEX);
				setState(5871);
				reindex_target_multitable();
				setState(5872);
				opt_concurrently();
				setState(5873);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5875);
				match(REINDEX);
				setState(5876);
				match(OPEN_PAREN);
				setState(5877);
				reindex_option_list();
				setState(5878);
				match(CLOSE_PAREN);
				setState(5879);
				reindex_target_type();
				setState(5880);
				opt_concurrently();
				setState(5881);
				qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5883);
				match(REINDEX);
				setState(5884);
				match(OPEN_PAREN);
				setState(5885);
				reindex_option_list();
				setState(5886);
				match(CLOSE_PAREN);
				setState(5887);
				reindex_target_multitable();
				setState(5888);
				opt_concurrently();
				setState(5889);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reindex_target_typeContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Reindex_target_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_target_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindex_target_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindex_target_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindex_target_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_target_typeContext reindex_target_type() throws RecognitionException {
		Reindex_target_typeContext _localctx = new Reindex_target_typeContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_reindex_target_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5893);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reindex_target_multitableContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SYSTEM_P() { return getToken(PostgreSQLParser.SYSTEM_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public Reindex_target_multitableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_target_multitable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindex_target_multitable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindex_target_multitable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindex_target_multitable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_target_multitableContext reindex_target_multitable() throws RecognitionException {
		Reindex_target_multitableContext _localctx = new Reindex_target_multitableContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_reindex_target_multitable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5895);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA || _la==SYSTEM_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reindex_option_listContext extends ParserRuleContext {
		public List<Reindex_option_elemContext> reindex_option_elem() {
			return getRuleContexts(Reindex_option_elemContext.class);
		}
		public Reindex_option_elemContext reindex_option_elem(int i) {
			return getRuleContext(Reindex_option_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Reindex_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindex_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindex_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindex_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_option_listContext reindex_option_list() throws RecognitionException {
		Reindex_option_listContext _localctx = new Reindex_option_listContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_reindex_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5897);
			reindex_option_elem();
			setState(5902);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5898);
				match(COMMA);
				setState(5899);
				reindex_option_elem();
				}
				}
				setState(5904);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reindex_option_elemContext extends ParserRuleContext {
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public Reindex_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindex_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindex_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindex_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_option_elemContext reindex_option_elem() throws RecognitionException {
		Reindex_option_elemContext _localctx = new Reindex_option_elemContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_reindex_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5905);
			match(VERBOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltertblspcstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public AltertblspcstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertblspcstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltertblspcstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltertblspcstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltertblspcstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltertblspcstmtContext altertblspcstmt() throws RecognitionException {
		AltertblspcstmtContext _localctx = new AltertblspcstmtContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_altertblspcstmt);
		try {
			setState(5919);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5907);
				match(ALTER);
				setState(5908);
				match(TABLESPACE);
				setState(5909);
				name();
				setState(5910);
				match(SET);
				setState(5911);
				reloptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5913);
				match(ALTER);
				setState(5914);
				match(TABLESPACE);
				setState(5915);
				name();
				setState(5916);
				match(RESET);
				setState(5917);
				reloptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RenamestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public List<RoleidContext> roleid() {
			return getRuleContexts(RoleidContext.class);
		}
		public RoleidContext roleid(int i) {
			return getRuleContext(RoleidContext.class,i);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public Opt_columnContext opt_column() {
			return getRuleContext(Opt_columnContext.class,0);
		}
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLParser.ATTRIBUTE, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public RenamestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renamestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRenamestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRenamestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRenamestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenamestmtContext renamestmt() throws RecognitionException {
		RenamestmtContext _localctx = new RenamestmtContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_renamestmt);
		try {
			setState(6389);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5921);
				match(ALTER);
				setState(5922);
				match(AGGREGATE);
				setState(5923);
				aggregate_with_argtypes();
				setState(5924);
				match(RENAME);
				setState(5925);
				match(TO);
				setState(5926);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5928);
				match(ALTER);
				setState(5929);
				match(COLLATION);
				setState(5930);
				any_name();
				setState(5931);
				match(RENAME);
				setState(5932);
				match(TO);
				setState(5933);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5935);
				match(ALTER);
				setState(5936);
				match(CONVERSION_P);
				setState(5937);
				any_name();
				setState(5938);
				match(RENAME);
				setState(5939);
				match(TO);
				setState(5940);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5942);
				match(ALTER);
				setState(5943);
				match(DATABASE);
				setState(5944);
				name();
				setState(5945);
				match(RENAME);
				setState(5946);
				match(TO);
				setState(5947);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5949);
				match(ALTER);
				setState(5950);
				match(DOMAIN_P);
				setState(5951);
				any_name();
				setState(5952);
				match(RENAME);
				setState(5953);
				match(TO);
				setState(5954);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5956);
				match(ALTER);
				setState(5957);
				match(DOMAIN_P);
				setState(5958);
				any_name();
				setState(5959);
				match(RENAME);
				setState(5960);
				match(CONSTRAINT);
				setState(5961);
				name();
				setState(5962);
				match(TO);
				setState(5963);
				name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5965);
				match(ALTER);
				setState(5966);
				match(FOREIGN);
				setState(5967);
				match(DATA_P);
				setState(5968);
				match(WRAPPER);
				setState(5969);
				name();
				setState(5970);
				match(RENAME);
				setState(5971);
				match(TO);
				setState(5972);
				name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5974);
				match(ALTER);
				setState(5975);
				match(FUNCTION);
				setState(5976);
				function_with_argtypes();
				setState(5977);
				match(RENAME);
				setState(5978);
				match(TO);
				setState(5979);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5981);
				match(ALTER);
				setState(5982);
				match(GROUP_P);
				setState(5983);
				roleid();
				setState(5984);
				match(RENAME);
				setState(5985);
				match(TO);
				setState(5986);
				roleid();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5988);
				match(ALTER);
				setState(5989);
				opt_procedural();
				setState(5990);
				match(LANGUAGE);
				setState(5991);
				name();
				setState(5992);
				match(RENAME);
				setState(5993);
				match(TO);
				setState(5994);
				name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5996);
				match(ALTER);
				setState(5997);
				match(OPERATOR);
				setState(5998);
				match(CLASS);
				setState(5999);
				any_name();
				setState(6000);
				match(USING);
				setState(6001);
				name();
				setState(6002);
				match(RENAME);
				setState(6003);
				match(TO);
				setState(6004);
				name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6006);
				match(ALTER);
				setState(6007);
				match(OPERATOR);
				setState(6008);
				match(FAMILY);
				setState(6009);
				any_name();
				setState(6010);
				match(USING);
				setState(6011);
				name();
				setState(6012);
				match(RENAME);
				setState(6013);
				match(TO);
				setState(6014);
				name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6016);
				match(ALTER);
				setState(6017);
				match(POLICY);
				setState(6018);
				name();
				setState(6019);
				match(ON);
				setState(6020);
				qualified_name();
				setState(6021);
				match(RENAME);
				setState(6022);
				match(TO);
				setState(6023);
				name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6025);
				match(ALTER);
				setState(6026);
				match(POLICY);
				setState(6027);
				match(IF_P);
				setState(6028);
				match(EXISTS);
				setState(6029);
				name();
				setState(6030);
				match(ON);
				setState(6031);
				qualified_name();
				setState(6032);
				match(RENAME);
				setState(6033);
				match(TO);
				setState(6034);
				name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6036);
				match(ALTER);
				setState(6037);
				match(PROCEDURE);
				setState(6038);
				function_with_argtypes();
				setState(6039);
				match(RENAME);
				setState(6040);
				match(TO);
				setState(6041);
				name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6043);
				match(ALTER);
				setState(6044);
				match(PUBLICATION);
				setState(6045);
				name();
				setState(6046);
				match(RENAME);
				setState(6047);
				match(TO);
				setState(6048);
				name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6050);
				match(ALTER);
				setState(6051);
				match(ROUTINE);
				setState(6052);
				function_with_argtypes();
				setState(6053);
				match(RENAME);
				setState(6054);
				match(TO);
				setState(6055);
				name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6057);
				match(ALTER);
				setState(6058);
				match(SCHEMA);
				setState(6059);
				name();
				setState(6060);
				match(RENAME);
				setState(6061);
				match(TO);
				setState(6062);
				name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6064);
				match(ALTER);
				setState(6065);
				match(SERVER);
				setState(6066);
				name();
				setState(6067);
				match(RENAME);
				setState(6068);
				match(TO);
				setState(6069);
				name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6071);
				match(ALTER);
				setState(6072);
				match(SUBSCRIPTION);
				setState(6073);
				name();
				setState(6074);
				match(RENAME);
				setState(6075);
				match(TO);
				setState(6076);
				name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6078);
				match(ALTER);
				setState(6079);
				match(TABLE);
				setState(6080);
				relation_expr();
				setState(6081);
				match(RENAME);
				setState(6082);
				match(TO);
				setState(6083);
				name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6085);
				match(ALTER);
				setState(6086);
				match(TABLE);
				setState(6087);
				match(IF_P);
				setState(6088);
				match(EXISTS);
				setState(6089);
				relation_expr();
				setState(6090);
				match(RENAME);
				setState(6091);
				match(TO);
				setState(6092);
				name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6094);
				match(ALTER);
				setState(6095);
				match(SEQUENCE);
				setState(6096);
				qualified_name();
				setState(6097);
				match(RENAME);
				setState(6098);
				match(TO);
				setState(6099);
				name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6101);
				match(ALTER);
				setState(6102);
				match(SEQUENCE);
				setState(6103);
				match(IF_P);
				setState(6104);
				match(EXISTS);
				setState(6105);
				qualified_name();
				setState(6106);
				match(RENAME);
				setState(6107);
				match(TO);
				setState(6108);
				name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6110);
				match(ALTER);
				setState(6111);
				match(VIEW);
				setState(6112);
				qualified_name();
				setState(6113);
				match(RENAME);
				setState(6114);
				match(TO);
				setState(6115);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6117);
				match(ALTER);
				setState(6118);
				match(VIEW);
				setState(6119);
				match(IF_P);
				setState(6120);
				match(EXISTS);
				setState(6121);
				qualified_name();
				setState(6122);
				match(RENAME);
				setState(6123);
				match(TO);
				setState(6124);
				name();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6126);
				match(ALTER);
				setState(6127);
				match(MATERIALIZED);
				setState(6128);
				match(VIEW);
				setState(6129);
				qualified_name();
				setState(6130);
				match(RENAME);
				setState(6131);
				match(TO);
				setState(6132);
				name();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(6134);
				match(ALTER);
				setState(6135);
				match(MATERIALIZED);
				setState(6136);
				match(VIEW);
				setState(6137);
				match(IF_P);
				setState(6138);
				match(EXISTS);
				setState(6139);
				qualified_name();
				setState(6140);
				match(RENAME);
				setState(6141);
				match(TO);
				setState(6142);
				name();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(6144);
				match(ALTER);
				setState(6145);
				match(INDEX);
				setState(6146);
				qualified_name();
				setState(6147);
				match(RENAME);
				setState(6148);
				match(TO);
				setState(6149);
				name();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(6151);
				match(ALTER);
				setState(6152);
				match(INDEX);
				setState(6153);
				match(IF_P);
				setState(6154);
				match(EXISTS);
				setState(6155);
				qualified_name();
				setState(6156);
				match(RENAME);
				setState(6157);
				match(TO);
				setState(6158);
				name();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(6160);
				match(ALTER);
				setState(6161);
				match(FOREIGN);
				setState(6162);
				match(TABLE);
				setState(6163);
				relation_expr();
				setState(6164);
				match(RENAME);
				setState(6165);
				match(TO);
				setState(6166);
				name();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(6168);
				match(ALTER);
				setState(6169);
				match(FOREIGN);
				setState(6170);
				match(TABLE);
				setState(6171);
				match(IF_P);
				setState(6172);
				match(EXISTS);
				setState(6173);
				relation_expr();
				setState(6174);
				match(RENAME);
				setState(6175);
				match(TO);
				setState(6176);
				name();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(6178);
				match(ALTER);
				setState(6179);
				match(TABLE);
				setState(6180);
				relation_expr();
				setState(6181);
				match(RENAME);
				setState(6182);
				opt_column();
				setState(6183);
				name();
				setState(6184);
				match(TO);
				setState(6185);
				name();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(6187);
				match(ALTER);
				setState(6188);
				match(TABLE);
				setState(6189);
				match(IF_P);
				setState(6190);
				match(EXISTS);
				setState(6191);
				relation_expr();
				setState(6192);
				match(RENAME);
				setState(6193);
				opt_column();
				setState(6194);
				name();
				setState(6195);
				match(TO);
				setState(6196);
				name();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(6198);
				match(ALTER);
				setState(6199);
				match(VIEW);
				setState(6200);
				qualified_name();
				setState(6201);
				match(RENAME);
				setState(6202);
				opt_column();
				setState(6203);
				name();
				setState(6204);
				match(TO);
				setState(6205);
				name();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(6207);
				match(ALTER);
				setState(6208);
				match(VIEW);
				setState(6209);
				match(IF_P);
				setState(6210);
				match(EXISTS);
				setState(6211);
				qualified_name();
				setState(6212);
				match(RENAME);
				setState(6213);
				opt_column();
				setState(6214);
				name();
				setState(6215);
				match(TO);
				setState(6216);
				name();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(6218);
				match(ALTER);
				setState(6219);
				match(MATERIALIZED);
				setState(6220);
				match(VIEW);
				setState(6221);
				qualified_name();
				setState(6222);
				match(RENAME);
				setState(6223);
				opt_column();
				setState(6224);
				name();
				setState(6225);
				match(TO);
				setState(6226);
				name();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(6228);
				match(ALTER);
				setState(6229);
				match(MATERIALIZED);
				setState(6230);
				match(VIEW);
				setState(6231);
				match(IF_P);
				setState(6232);
				match(EXISTS);
				setState(6233);
				qualified_name();
				setState(6234);
				match(RENAME);
				setState(6235);
				opt_column();
				setState(6236);
				name();
				setState(6237);
				match(TO);
				setState(6238);
				name();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(6240);
				match(ALTER);
				setState(6241);
				match(TABLE);
				setState(6242);
				relation_expr();
				setState(6243);
				match(RENAME);
				setState(6244);
				match(CONSTRAINT);
				setState(6245);
				name();
				setState(6246);
				match(TO);
				setState(6247);
				name();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(6249);
				match(ALTER);
				setState(6250);
				match(TABLE);
				setState(6251);
				match(IF_P);
				setState(6252);
				match(EXISTS);
				setState(6253);
				relation_expr();
				setState(6254);
				match(RENAME);
				setState(6255);
				match(CONSTRAINT);
				setState(6256);
				name();
				setState(6257);
				match(TO);
				setState(6258);
				name();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(6260);
				match(ALTER);
				setState(6261);
				match(FOREIGN);
				setState(6262);
				match(TABLE);
				setState(6263);
				relation_expr();
				setState(6264);
				match(RENAME);
				setState(6265);
				opt_column();
				setState(6266);
				name();
				setState(6267);
				match(TO);
				setState(6268);
				name();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(6270);
				match(ALTER);
				setState(6271);
				match(FOREIGN);
				setState(6272);
				match(TABLE);
				setState(6273);
				match(IF_P);
				setState(6274);
				match(EXISTS);
				setState(6275);
				relation_expr();
				setState(6276);
				match(RENAME);
				setState(6277);
				opt_column();
				setState(6278);
				name();
				setState(6279);
				match(TO);
				setState(6280);
				name();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(6282);
				match(ALTER);
				setState(6283);
				match(RULE);
				setState(6284);
				name();
				setState(6285);
				match(ON);
				setState(6286);
				qualified_name();
				setState(6287);
				match(RENAME);
				setState(6288);
				match(TO);
				setState(6289);
				name();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(6291);
				match(ALTER);
				setState(6292);
				match(TRIGGER);
				setState(6293);
				name();
				setState(6294);
				match(ON);
				setState(6295);
				qualified_name();
				setState(6296);
				match(RENAME);
				setState(6297);
				match(TO);
				setState(6298);
				name();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(6300);
				match(ALTER);
				setState(6301);
				match(EVENT);
				setState(6302);
				match(TRIGGER);
				setState(6303);
				name();
				setState(6304);
				match(RENAME);
				setState(6305);
				match(TO);
				setState(6306);
				name();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(6308);
				match(ALTER);
				setState(6309);
				match(ROLE);
				setState(6310);
				roleid();
				setState(6311);
				match(RENAME);
				setState(6312);
				match(TO);
				setState(6313);
				roleid();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(6315);
				match(ALTER);
				setState(6316);
				match(USER);
				setState(6317);
				roleid();
				setState(6318);
				match(RENAME);
				setState(6319);
				match(TO);
				setState(6320);
				roleid();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(6322);
				match(ALTER);
				setState(6323);
				match(TABLESPACE);
				setState(6324);
				name();
				setState(6325);
				match(RENAME);
				setState(6326);
				match(TO);
				setState(6327);
				name();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(6329);
				match(ALTER);
				setState(6330);
				match(STATISTICS);
				setState(6331);
				any_name();
				setState(6332);
				match(RENAME);
				setState(6333);
				match(TO);
				setState(6334);
				name();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(6336);
				match(ALTER);
				setState(6337);
				match(TEXT_P);
				setState(6338);
				match(SEARCH);
				setState(6339);
				match(PARSER);
				setState(6340);
				any_name();
				setState(6341);
				match(RENAME);
				setState(6342);
				match(TO);
				setState(6343);
				name();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(6345);
				match(ALTER);
				setState(6346);
				match(TEXT_P);
				setState(6347);
				match(SEARCH);
				setState(6348);
				match(DICTIONARY);
				setState(6349);
				any_name();
				setState(6350);
				match(RENAME);
				setState(6351);
				match(TO);
				setState(6352);
				name();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(6354);
				match(ALTER);
				setState(6355);
				match(TEXT_P);
				setState(6356);
				match(SEARCH);
				setState(6357);
				match(TEMPLATE);
				setState(6358);
				any_name();
				setState(6359);
				match(RENAME);
				setState(6360);
				match(TO);
				setState(6361);
				name();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(6363);
				match(ALTER);
				setState(6364);
				match(TEXT_P);
				setState(6365);
				match(SEARCH);
				setState(6366);
				match(CONFIGURATION);
				setState(6367);
				any_name();
				setState(6368);
				match(RENAME);
				setState(6369);
				match(TO);
				setState(6370);
				name();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(6372);
				match(ALTER);
				setState(6373);
				match(TYPE_P);
				setState(6374);
				any_name();
				setState(6375);
				match(RENAME);
				setState(6376);
				match(TO);
				setState(6377);
				name();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(6379);
				match(ALTER);
				setState(6380);
				match(TYPE_P);
				setState(6381);
				any_name();
				setState(6382);
				match(RENAME);
				setState(6383);
				match(ATTRIBUTE);
				setState(6384);
				name();
				setState(6385);
				match(TO);
				setState(6386);
				name();
				setState(6387);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_columnContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public Opt_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_columnContext opt_column() throws RecognitionException {
		Opt_columnContext _localctx = new Opt_columnContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_opt_column);
		try {
			setState(6393);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6391);
				match(COLUMN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_set_dataContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public Opt_set_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_set_data; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_set_data(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_set_data(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_set_data(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_set_dataContext opt_set_data() throws RecognitionException {
		Opt_set_dataContext _localctx = new Opt_set_dataContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_opt_set_data);
		try {
			setState(6398);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(6395);
				match(SET);
				setState(6396);
				match(DATA_P);
				}
				break;
			case TYPE_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterobjectdependsstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Opt_noContext opt_no() {
			return getRuleContext(Opt_noContext.class,0);
		}
		public TerminalNode DEPENDS() { return getToken(PostgreSQLParser.DEPENDS, 0); }
		public List<TerminalNode> ON() { return getTokens(PostgreSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSQLParser.ON, i);
		}
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public AlterobjectdependsstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterobjectdependsstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterobjectdependsstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterobjectdependsstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterobjectdependsstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterobjectdependsstmtContext alterobjectdependsstmt() throws RecognitionException {
		AlterobjectdependsstmtContext _localctx = new AlterobjectdependsstmtContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_alterobjectdependsstmt);
		try {
			setState(6457);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6400);
				match(ALTER);
				setState(6401);
				match(FUNCTION);
				setState(6402);
				function_with_argtypes();
				setState(6403);
				opt_no();
				setState(6404);
				match(DEPENDS);
				setState(6405);
				match(ON);
				setState(6406);
				match(EXTENSION);
				setState(6407);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6409);
				match(ALTER);
				setState(6410);
				match(PROCEDURE);
				setState(6411);
				function_with_argtypes();
				setState(6412);
				opt_no();
				setState(6413);
				match(DEPENDS);
				setState(6414);
				match(ON);
				setState(6415);
				match(EXTENSION);
				setState(6416);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6418);
				match(ALTER);
				setState(6419);
				match(ROUTINE);
				setState(6420);
				function_with_argtypes();
				setState(6421);
				opt_no();
				setState(6422);
				match(DEPENDS);
				setState(6423);
				match(ON);
				setState(6424);
				match(EXTENSION);
				setState(6425);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6427);
				match(ALTER);
				setState(6428);
				match(TRIGGER);
				setState(6429);
				name();
				setState(6430);
				match(ON);
				setState(6431);
				qualified_name();
				setState(6432);
				opt_no();
				setState(6433);
				match(DEPENDS);
				setState(6434);
				match(ON);
				setState(6435);
				match(EXTENSION);
				setState(6436);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6438);
				match(ALTER);
				setState(6439);
				match(MATERIALIZED);
				setState(6440);
				match(VIEW);
				setState(6441);
				qualified_name();
				setState(6442);
				opt_no();
				setState(6443);
				match(DEPENDS);
				setState(6444);
				match(ON);
				setState(6445);
				match(EXTENSION);
				setState(6446);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6448);
				match(ALTER);
				setState(6449);
				match(INDEX);
				setState(6450);
				qualified_name();
				setState(6451);
				opt_no();
				setState(6452);
				match(DEPENDS);
				setState(6453);
				match(ON);
				setState(6454);
				match(EXTENSION);
				setState(6455);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_noContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Opt_noContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_no; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_no(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_no(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_no(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_noContext opt_no() throws RecognitionException {
		Opt_noContext _localctx = new Opt_noContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_opt_no);
		try {
			setState(6461);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(6459);
				match(NO);
				}
				break;
			case DEPENDS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterobjectschemastmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public AlterobjectschemastmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterobjectschemastmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterobjectschemastmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterobjectschemastmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterobjectschemastmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterobjectschemastmtContext alterobjectschemastmt() throws RecognitionException {
		AlterobjectschemastmtContext _localctx = new AlterobjectschemastmtContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_alterobjectschemastmt);
		try {
			setState(6680);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6463);
				match(ALTER);
				setState(6464);
				match(AGGREGATE);
				setState(6465);
				aggregate_with_argtypes();
				setState(6466);
				match(SET);
				setState(6467);
				match(SCHEMA);
				setState(6468);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6470);
				match(ALTER);
				setState(6471);
				match(COLLATION);
				setState(6472);
				any_name();
				setState(6473);
				match(SET);
				setState(6474);
				match(SCHEMA);
				setState(6475);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6477);
				match(ALTER);
				setState(6478);
				match(CONVERSION_P);
				setState(6479);
				any_name();
				setState(6480);
				match(SET);
				setState(6481);
				match(SCHEMA);
				setState(6482);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6484);
				match(ALTER);
				setState(6485);
				match(DOMAIN_P);
				setState(6486);
				any_name();
				setState(6487);
				match(SET);
				setState(6488);
				match(SCHEMA);
				setState(6489);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6491);
				match(ALTER);
				setState(6492);
				match(EXTENSION);
				setState(6493);
				name();
				setState(6494);
				match(SET);
				setState(6495);
				match(SCHEMA);
				setState(6496);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6498);
				match(ALTER);
				setState(6499);
				match(FUNCTION);
				setState(6500);
				function_with_argtypes();
				setState(6501);
				match(SET);
				setState(6502);
				match(SCHEMA);
				setState(6503);
				name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6505);
				match(ALTER);
				setState(6506);
				match(OPERATOR);
				setState(6507);
				operator_with_argtypes();
				setState(6508);
				match(SET);
				setState(6509);
				match(SCHEMA);
				setState(6510);
				name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6512);
				match(ALTER);
				setState(6513);
				match(OPERATOR);
				setState(6514);
				match(CLASS);
				setState(6515);
				any_name();
				setState(6516);
				match(USING);
				setState(6517);
				name();
				setState(6518);
				match(SET);
				setState(6519);
				match(SCHEMA);
				setState(6520);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6522);
				match(ALTER);
				setState(6523);
				match(OPERATOR);
				setState(6524);
				match(FAMILY);
				setState(6525);
				any_name();
				setState(6526);
				match(USING);
				setState(6527);
				name();
				setState(6528);
				match(SET);
				setState(6529);
				match(SCHEMA);
				setState(6530);
				name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6532);
				match(ALTER);
				setState(6533);
				match(PROCEDURE);
				setState(6534);
				function_with_argtypes();
				setState(6535);
				match(SET);
				setState(6536);
				match(SCHEMA);
				setState(6537);
				name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6539);
				match(ALTER);
				setState(6540);
				match(ROUTINE);
				setState(6541);
				function_with_argtypes();
				setState(6542);
				match(SET);
				setState(6543);
				match(SCHEMA);
				setState(6544);
				name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6546);
				match(ALTER);
				setState(6547);
				match(TABLE);
				setState(6548);
				relation_expr();
				setState(6549);
				match(SET);
				setState(6550);
				match(SCHEMA);
				setState(6551);
				name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6553);
				match(ALTER);
				setState(6554);
				match(TABLE);
				setState(6555);
				match(IF_P);
				setState(6556);
				match(EXISTS);
				setState(6557);
				relation_expr();
				setState(6558);
				match(SET);
				setState(6559);
				match(SCHEMA);
				setState(6560);
				name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6562);
				match(ALTER);
				setState(6563);
				match(STATISTICS);
				setState(6564);
				any_name();
				setState(6565);
				match(SET);
				setState(6566);
				match(SCHEMA);
				setState(6567);
				name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6569);
				match(ALTER);
				setState(6570);
				match(TEXT_P);
				setState(6571);
				match(SEARCH);
				setState(6572);
				match(PARSER);
				setState(6573);
				any_name();
				setState(6574);
				match(SET);
				setState(6575);
				match(SCHEMA);
				setState(6576);
				name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6578);
				match(ALTER);
				setState(6579);
				match(TEXT_P);
				setState(6580);
				match(SEARCH);
				setState(6581);
				match(DICTIONARY);
				setState(6582);
				any_name();
				setState(6583);
				match(SET);
				setState(6584);
				match(SCHEMA);
				setState(6585);
				name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6587);
				match(ALTER);
				setState(6588);
				match(TEXT_P);
				setState(6589);
				match(SEARCH);
				setState(6590);
				match(TEMPLATE);
				setState(6591);
				any_name();
				setState(6592);
				match(SET);
				setState(6593);
				match(SCHEMA);
				setState(6594);
				name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6596);
				match(ALTER);
				setState(6597);
				match(TEXT_P);
				setState(6598);
				match(SEARCH);
				setState(6599);
				match(CONFIGURATION);
				setState(6600);
				any_name();
				setState(6601);
				match(SET);
				setState(6602);
				match(SCHEMA);
				setState(6603);
				name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6605);
				match(ALTER);
				setState(6606);
				match(SEQUENCE);
				setState(6607);
				qualified_name();
				setState(6608);
				match(SET);
				setState(6609);
				match(SCHEMA);
				setState(6610);
				name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6612);
				match(ALTER);
				setState(6613);
				match(SEQUENCE);
				setState(6614);
				match(IF_P);
				setState(6615);
				match(EXISTS);
				setState(6616);
				qualified_name();
				setState(6617);
				match(SET);
				setState(6618);
				match(SCHEMA);
				setState(6619);
				name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6621);
				match(ALTER);
				setState(6622);
				match(VIEW);
				setState(6623);
				qualified_name();
				setState(6624);
				match(SET);
				setState(6625);
				match(SCHEMA);
				setState(6626);
				name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6628);
				match(ALTER);
				setState(6629);
				match(VIEW);
				setState(6630);
				match(IF_P);
				setState(6631);
				match(EXISTS);
				setState(6632);
				qualified_name();
				setState(6633);
				match(SET);
				setState(6634);
				match(SCHEMA);
				setState(6635);
				name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6637);
				match(ALTER);
				setState(6638);
				match(MATERIALIZED);
				setState(6639);
				match(VIEW);
				setState(6640);
				qualified_name();
				setState(6641);
				match(SET);
				setState(6642);
				match(SCHEMA);
				setState(6643);
				name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6645);
				match(ALTER);
				setState(6646);
				match(MATERIALIZED);
				setState(6647);
				match(VIEW);
				setState(6648);
				match(IF_P);
				setState(6649);
				match(EXISTS);
				setState(6650);
				qualified_name();
				setState(6651);
				match(SET);
				setState(6652);
				match(SCHEMA);
				setState(6653);
				name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6655);
				match(ALTER);
				setState(6656);
				match(FOREIGN);
				setState(6657);
				match(TABLE);
				setState(6658);
				relation_expr();
				setState(6659);
				match(SET);
				setState(6660);
				match(SCHEMA);
				setState(6661);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6663);
				match(ALTER);
				setState(6664);
				match(FOREIGN);
				setState(6665);
				match(TABLE);
				setState(6666);
				match(IF_P);
				setState(6667);
				match(EXISTS);
				setState(6668);
				relation_expr();
				setState(6669);
				match(SET);
				setState(6670);
				match(SCHEMA);
				setState(6671);
				name();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6673);
				match(ALTER);
				setState(6674);
				match(TYPE_P);
				setState(6675);
				any_name();
				setState(6676);
				match(SET);
				setState(6677);
				match(SCHEMA);
				setState(6678);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlteroperatorstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Operator_def_listContext operator_def_list() {
			return getRuleContext(Operator_def_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AlteroperatorstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteroperatorstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlteroperatorstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlteroperatorstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlteroperatorstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteroperatorstmtContext alteroperatorstmt() throws RecognitionException {
		AlteroperatorstmtContext _localctx = new AlteroperatorstmtContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_alteroperatorstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6682);
			match(ALTER);
			setState(6683);
			match(OPERATOR);
			setState(6684);
			operator_with_argtypes();
			setState(6685);
			match(SET);
			setState(6686);
			match(OPEN_PAREN);
			setState(6687);
			operator_def_list();
			setState(6688);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Operator_def_listContext extends ParserRuleContext {
		public List<Operator_def_elemContext> operator_def_elem() {
			return getRuleContexts(Operator_def_elemContext.class);
		}
		public Operator_def_elemContext operator_def_elem(int i) {
			return getRuleContext(Operator_def_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Operator_def_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_def_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOperator_def_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOperator_def_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOperator_def_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_def_listContext operator_def_list() throws RecognitionException {
		Operator_def_listContext _localctx = new Operator_def_listContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_operator_def_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6690);
			operator_def_elem();
			setState(6695);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6691);
				match(COMMA);
				setState(6692);
				operator_def_elem();
				}
				}
				setState(6697);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Operator_def_elemContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public Operator_def_argContext operator_def_arg() {
			return getRuleContext(Operator_def_argContext.class,0);
		}
		public Operator_def_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_def_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOperator_def_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOperator_def_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOperator_def_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_def_elemContext operator_def_elem() throws RecognitionException {
		Operator_def_elemContext _localctx = new Operator_def_elemContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_operator_def_elem);
		try {
			setState(6706);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6698);
				collabel();
				setState(6699);
				match(EQUAL);
				setState(6700);
				match(NONE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6702);
				collabel();
				setState(6703);
				match(EQUAL);
				setState(6704);
				operator_def_arg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Operator_def_argContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public Qual_all_opContext qual_all_op() {
			return getRuleContext(Qual_all_opContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Operator_def_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_def_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOperator_def_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOperator_def_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOperator_def_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_def_argContext operator_def_arg() throws RecognitionException {
		Operator_def_argContext _localctx = new Operator_def_argContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_operator_def_arg);
		try {
			setState(6713);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6708);
				func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6709);
				reserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6710);
				qual_all_op();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6711);
				numericonly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6712);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltertypestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Operator_def_listContext operator_def_list() {
			return getRuleContext(Operator_def_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AltertypestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertypestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltertypestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltertypestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltertypestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltertypestmtContext altertypestmt() throws RecognitionException {
		AltertypestmtContext _localctx = new AltertypestmtContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_altertypestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6715);
			match(ALTER);
			setState(6716);
			match(TYPE_P);
			setState(6717);
			any_name();
			setState(6718);
			match(SET);
			setState(6719);
			match(OPEN_PAREN);
			setState(6720);
			operator_def_list();
			setState(6721);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterownerstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public AlterownerstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterownerstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterownerstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterownerstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterownerstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterownerstmtContext alterownerstmt() throws RecognitionException {
		AlterownerstmtContext _localctx = new AlterownerstmtContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_alterownerstmt);
		try {
			setState(6906);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6723);
				match(ALTER);
				setState(6724);
				match(AGGREGATE);
				setState(6725);
				aggregate_with_argtypes();
				setState(6726);
				match(OWNER);
				setState(6727);
				match(TO);
				setState(6728);
				rolespec();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6730);
				match(ALTER);
				setState(6731);
				match(COLLATION);
				setState(6732);
				any_name();
				setState(6733);
				match(OWNER);
				setState(6734);
				match(TO);
				setState(6735);
				rolespec();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6737);
				match(ALTER);
				setState(6738);
				match(CONVERSION_P);
				setState(6739);
				any_name();
				setState(6740);
				match(OWNER);
				setState(6741);
				match(TO);
				setState(6742);
				rolespec();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6744);
				match(ALTER);
				setState(6745);
				match(DATABASE);
				setState(6746);
				name();
				setState(6747);
				match(OWNER);
				setState(6748);
				match(TO);
				setState(6749);
				rolespec();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6751);
				match(ALTER);
				setState(6752);
				match(DOMAIN_P);
				setState(6753);
				any_name();
				setState(6754);
				match(OWNER);
				setState(6755);
				match(TO);
				setState(6756);
				rolespec();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6758);
				match(ALTER);
				setState(6759);
				match(FUNCTION);
				setState(6760);
				function_with_argtypes();
				setState(6761);
				match(OWNER);
				setState(6762);
				match(TO);
				setState(6763);
				rolespec();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6765);
				match(ALTER);
				setState(6766);
				opt_procedural();
				setState(6767);
				match(LANGUAGE);
				setState(6768);
				name();
				setState(6769);
				match(OWNER);
				setState(6770);
				match(TO);
				setState(6771);
				rolespec();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6773);
				match(ALTER);
				setState(6774);
				match(LARGE_P);
				setState(6775);
				match(OBJECT_P);
				setState(6776);
				numericonly();
				setState(6777);
				match(OWNER);
				setState(6778);
				match(TO);
				setState(6779);
				rolespec();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6781);
				match(ALTER);
				setState(6782);
				match(OPERATOR);
				setState(6783);
				operator_with_argtypes();
				setState(6784);
				match(OWNER);
				setState(6785);
				match(TO);
				setState(6786);
				rolespec();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6788);
				match(ALTER);
				setState(6789);
				match(OPERATOR);
				setState(6790);
				match(CLASS);
				setState(6791);
				any_name();
				setState(6792);
				match(USING);
				setState(6793);
				name();
				setState(6794);
				match(OWNER);
				setState(6795);
				match(TO);
				setState(6796);
				rolespec();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6798);
				match(ALTER);
				setState(6799);
				match(OPERATOR);
				setState(6800);
				match(FAMILY);
				setState(6801);
				any_name();
				setState(6802);
				match(USING);
				setState(6803);
				name();
				setState(6804);
				match(OWNER);
				setState(6805);
				match(TO);
				setState(6806);
				rolespec();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6808);
				match(ALTER);
				setState(6809);
				match(PROCEDURE);
				setState(6810);
				function_with_argtypes();
				setState(6811);
				match(OWNER);
				setState(6812);
				match(TO);
				setState(6813);
				rolespec();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6815);
				match(ALTER);
				setState(6816);
				match(ROUTINE);
				setState(6817);
				function_with_argtypes();
				setState(6818);
				match(OWNER);
				setState(6819);
				match(TO);
				setState(6820);
				rolespec();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6822);
				match(ALTER);
				setState(6823);
				match(SCHEMA);
				setState(6824);
				name();
				setState(6825);
				match(OWNER);
				setState(6826);
				match(TO);
				setState(6827);
				rolespec();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6829);
				match(ALTER);
				setState(6830);
				match(TYPE_P);
				setState(6831);
				any_name();
				setState(6832);
				match(OWNER);
				setState(6833);
				match(TO);
				setState(6834);
				rolespec();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6836);
				match(ALTER);
				setState(6837);
				match(TABLESPACE);
				setState(6838);
				name();
				setState(6839);
				match(OWNER);
				setState(6840);
				match(TO);
				setState(6841);
				rolespec();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6843);
				match(ALTER);
				setState(6844);
				match(STATISTICS);
				setState(6845);
				any_name();
				setState(6846);
				match(OWNER);
				setState(6847);
				match(TO);
				setState(6848);
				rolespec();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6850);
				match(ALTER);
				setState(6851);
				match(TEXT_P);
				setState(6852);
				match(SEARCH);
				setState(6853);
				match(DICTIONARY);
				setState(6854);
				any_name();
				setState(6855);
				match(OWNER);
				setState(6856);
				match(TO);
				setState(6857);
				rolespec();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6859);
				match(ALTER);
				setState(6860);
				match(TEXT_P);
				setState(6861);
				match(SEARCH);
				setState(6862);
				match(CONFIGURATION);
				setState(6863);
				any_name();
				setState(6864);
				match(OWNER);
				setState(6865);
				match(TO);
				setState(6866);
				rolespec();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6868);
				match(ALTER);
				setState(6869);
				match(FOREIGN);
				setState(6870);
				match(DATA_P);
				setState(6871);
				match(WRAPPER);
				setState(6872);
				name();
				setState(6873);
				match(OWNER);
				setState(6874);
				match(TO);
				setState(6875);
				rolespec();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6877);
				match(ALTER);
				setState(6878);
				match(SERVER);
				setState(6879);
				name();
				setState(6880);
				match(OWNER);
				setState(6881);
				match(TO);
				setState(6882);
				rolespec();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6884);
				match(ALTER);
				setState(6885);
				match(EVENT);
				setState(6886);
				match(TRIGGER);
				setState(6887);
				name();
				setState(6888);
				match(OWNER);
				setState(6889);
				match(TO);
				setState(6890);
				rolespec();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6892);
				match(ALTER);
				setState(6893);
				match(PUBLICATION);
				setState(6894);
				name();
				setState(6895);
				match(OWNER);
				setState(6896);
				match(TO);
				setState(6897);
				rolespec();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6899);
				match(ALTER);
				setState(6900);
				match(SUBSCRIPTION);
				setState(6901);
				name();
				setState(6902);
				match(OWNER);
				setState(6903);
				match(TO);
				setState(6904);
				rolespec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatepublicationstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_publication_for_tablesContext opt_publication_for_tables() {
			return getRuleContext(Opt_publication_for_tablesContext.class,0);
		}
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public CreatepublicationstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createpublicationstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatepublicationstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatepublicationstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatepublicationstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatepublicationstmtContext createpublicationstmt() throws RecognitionException {
		CreatepublicationstmtContext _localctx = new CreatepublicationstmtContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_createpublicationstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6908);
			match(CREATE);
			setState(6909);
			match(PUBLICATION);
			setState(6910);
			name();
			setState(6911);
			opt_publication_for_tables();
			setState(6912);
			opt_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_publication_for_tablesContext extends ParserRuleContext {
		public Publication_for_tablesContext publication_for_tables() {
			return getRuleContext(Publication_for_tablesContext.class,0);
		}
		public Opt_publication_for_tablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_publication_for_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_publication_for_tables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_publication_for_tables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_publication_for_tables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_publication_for_tablesContext opt_publication_for_tables() throws RecognitionException {
		Opt_publication_for_tablesContext _localctx = new Opt_publication_for_tablesContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_opt_publication_for_tables);
		try {
			setState(6916);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(6914);
				publication_for_tables();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Publication_for_tablesContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLParser.TABLES, 0); }
		public Publication_for_tablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publication_for_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPublication_for_tables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPublication_for_tables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPublication_for_tables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Publication_for_tablesContext publication_for_tables() throws RecognitionException {
		Publication_for_tablesContext _localctx = new Publication_for_tablesContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_publication_for_tables);
		try {
			setState(6924);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6918);
				match(FOR);
				setState(6919);
				match(TABLE);
				setState(6920);
				relation_expr_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6921);
				match(FOR);
				setState(6922);
				match(ALL);
				setState(6923);
				match(TABLES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterpublicationstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public AlterpublicationstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterpublicationstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterpublicationstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterpublicationstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterpublicationstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterpublicationstmtContext alterpublicationstmt() throws RecognitionException {
		AlterpublicationstmtContext _localctx = new AlterpublicationstmtContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_alterpublicationstmt);
		try {
			setState(6953);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6926);
				match(ALTER);
				setState(6927);
				match(PUBLICATION);
				setState(6928);
				name();
				setState(6929);
				match(SET);
				setState(6930);
				definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6932);
				match(ALTER);
				setState(6933);
				match(PUBLICATION);
				setState(6934);
				name();
				setState(6935);
				match(ADD_P);
				setState(6936);
				match(TABLE);
				setState(6937);
				relation_expr_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6939);
				match(ALTER);
				setState(6940);
				match(PUBLICATION);
				setState(6941);
				name();
				setState(6942);
				match(SET);
				setState(6943);
				match(TABLE);
				setState(6944);
				relation_expr_list();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6946);
				match(ALTER);
				setState(6947);
				match(PUBLICATION);
				setState(6948);
				name();
				setState(6949);
				match(DROP);
				setState(6950);
				match(TABLE);
				setState(6951);
				relation_expr_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatesubscriptionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public Publication_name_listContext publication_name_list() {
			return getRuleContext(Publication_name_listContext.class,0);
		}
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public CreatesubscriptionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createsubscriptionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatesubscriptionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatesubscriptionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatesubscriptionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatesubscriptionstmtContext createsubscriptionstmt() throws RecognitionException {
		CreatesubscriptionstmtContext _localctx = new CreatesubscriptionstmtContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_createsubscriptionstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6955);
			match(CREATE);
			setState(6956);
			match(SUBSCRIPTION);
			setState(6957);
			name();
			setState(6958);
			match(CONNECTION);
			setState(6959);
			sconst();
			setState(6960);
			match(PUBLICATION);
			setState(6961);
			publication_name_list();
			setState(6962);
			opt_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Publication_name_listContext extends ParserRuleContext {
		public List<Publication_name_itemContext> publication_name_item() {
			return getRuleContexts(Publication_name_itemContext.class);
		}
		public Publication_name_itemContext publication_name_item(int i) {
			return getRuleContext(Publication_name_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Publication_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publication_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPublication_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPublication_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPublication_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Publication_name_listContext publication_name_list() throws RecognitionException {
		Publication_name_listContext _localctx = new Publication_name_listContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_publication_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6964);
			publication_name_item();
			setState(6969);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6965);
				match(COMMA);
				setState(6966);
				publication_name_item();
				}
				}
				setState(6971);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Publication_name_itemContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Publication_name_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publication_name_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPublication_name_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPublication_name_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPublication_name_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Publication_name_itemContext publication_name_item() throws RecognitionException {
		Publication_name_itemContext _localctx = new Publication_name_itemContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_publication_name_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6972);
			collabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltersubscriptionstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public Publication_name_listContext publication_name_list() {
			return getRuleContext(Publication_name_listContext.class,0);
		}
		public TerminalNode ENABLE_P() { return getToken(PostgreSQLParser.ENABLE_P, 0); }
		public TerminalNode DISABLE_P() { return getToken(PostgreSQLParser.DISABLE_P, 0); }
		public AltersubscriptionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altersubscriptionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltersubscriptionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltersubscriptionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltersubscriptionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltersubscriptionstmtContext altersubscriptionstmt() throws RecognitionException {
		AltersubscriptionstmtContext _localctx = new AltersubscriptionstmtContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_altersubscriptionstmt);
		try {
			setState(7011);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6974);
				match(ALTER);
				setState(6975);
				match(SUBSCRIPTION);
				setState(6976);
				name();
				setState(6977);
				match(SET);
				setState(6978);
				definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6980);
				match(ALTER);
				setState(6981);
				match(SUBSCRIPTION);
				setState(6982);
				name();
				setState(6983);
				match(CONNECTION);
				setState(6984);
				sconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6986);
				match(ALTER);
				setState(6987);
				match(SUBSCRIPTION);
				setState(6988);
				name();
				setState(6989);
				match(REFRESH);
				setState(6990);
				match(PUBLICATION);
				setState(6991);
				opt_definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6993);
				match(ALTER);
				setState(6994);
				match(SUBSCRIPTION);
				setState(6995);
				name();
				setState(6996);
				match(SET);
				setState(6997);
				match(PUBLICATION);
				setState(6998);
				publication_name_list();
				setState(6999);
				opt_definition();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7001);
				match(ALTER);
				setState(7002);
				match(SUBSCRIPTION);
				setState(7003);
				name();
				setState(7004);
				match(ENABLE_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7006);
				match(ALTER);
				setState(7007);
				match(SUBSCRIPTION);
				setState(7008);
				name();
				setState(7009);
				match(DISABLE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropsubscriptionstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DropsubscriptionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropsubscriptionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropsubscriptionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropsubscriptionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropsubscriptionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropsubscriptionstmtContext dropsubscriptionstmt() throws RecognitionException {
		DropsubscriptionstmtContext _localctx = new DropsubscriptionstmtContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_dropsubscriptionstmt);
		try {
			setState(7025);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7013);
				match(DROP);
				setState(7014);
				match(SUBSCRIPTION);
				setState(7015);
				name();
				setState(7016);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7018);
				match(DROP);
				setState(7019);
				match(SUBSCRIPTION);
				setState(7020);
				match(IF_P);
				setState(7021);
				match(EXISTS);
				setState(7022);
				name();
				setState(7023);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RulestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public EventContext event() {
			return getRuleContext(EventContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public Opt_insteadContext opt_instead() {
			return getRuleContext(Opt_insteadContext.class,0);
		}
		public RuleactionlistContext ruleactionlist() {
			return getRuleContext(RuleactionlistContext.class,0);
		}
		public RulestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rulestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRulestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRulestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRulestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RulestmtContext rulestmt() throws RecognitionException {
		RulestmtContext _localctx = new RulestmtContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_rulestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7027);
			match(CREATE);
			setState(7028);
			opt_or_replace();
			setState(7029);
			match(RULE);
			setState(7030);
			name();
			setState(7031);
			match(AS);
			setState(7032);
			match(ON);
			setState(7033);
			event();
			setState(7034);
			match(TO);
			setState(7035);
			qualified_name();
			setState(7036);
			where_clause();
			setState(7037);
			match(DO);
			setState(7038);
			opt_instead();
			setState(7039);
			ruleactionlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RuleactionlistContext extends ParserRuleContext {
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public RuleactionstmtContext ruleactionstmt() {
			return getRuleContext(RuleactionstmtContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public RuleactionmultiContext ruleactionmulti() {
			return getRuleContext(RuleactionmultiContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RuleactionlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleactionlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRuleactionlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRuleactionlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRuleactionlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleactionlistContext ruleactionlist() throws RecognitionException {
		RuleactionlistContext _localctx = new RuleactionlistContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_ruleactionlist);
		try {
			setState(7047);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7041);
				match(NOTHING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7042);
				ruleactionstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7043);
				match(OPEN_PAREN);
				setState(7044);
				ruleactionmulti();
				setState(7045);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RuleactionmultiContext extends ParserRuleContext {
		public List<RuleactionstmtOrEmptyContext> ruleactionstmtOrEmpty() {
			return getRuleContexts(RuleactionstmtOrEmptyContext.class);
		}
		public RuleactionstmtOrEmptyContext ruleactionstmtOrEmpty(int i) {
			return getRuleContext(RuleactionstmtOrEmptyContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(PostgreSQLParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(PostgreSQLParser.SEMI, i);
		}
		public RuleactionmultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleactionmulti; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRuleactionmulti(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRuleactionmulti(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRuleactionmulti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleactionmultiContext ruleactionmulti() throws RecognitionException {
		RuleactionmultiContext _localctx = new RuleactionmultiContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_ruleactionmulti);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7049);
			ruleactionstmtOrEmpty();
			setState(7054);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SEMI) {
				{
				{
				setState(7050);
				match(SEMI);
				setState(7051);
				ruleactionstmtOrEmpty();
				}
				}
				setState(7056);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RuleactionstmtContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public InsertstmtContext insertstmt() {
			return getRuleContext(InsertstmtContext.class,0);
		}
		public UpdatestmtContext updatestmt() {
			return getRuleContext(UpdatestmtContext.class,0);
		}
		public DeletestmtContext deletestmt() {
			return getRuleContext(DeletestmtContext.class,0);
		}
		public NotifystmtContext notifystmt() {
			return getRuleContext(NotifystmtContext.class,0);
		}
		public RuleactionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleactionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRuleactionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRuleactionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRuleactionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleactionstmtContext ruleactionstmt() throws RecognitionException {
		RuleactionstmtContext _localctx = new RuleactionstmtContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_ruleactionstmt);
		try {
			setState(7062);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7057);
				selectstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7058);
				insertstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7059);
				updatestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7060);
				deletestmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7061);
				notifystmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RuleactionstmtOrEmptyContext extends ParserRuleContext {
		public RuleactionstmtContext ruleactionstmt() {
			return getRuleContext(RuleactionstmtContext.class,0);
		}
		public RuleactionstmtOrEmptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleactionstmtOrEmpty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRuleactionstmtOrEmpty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRuleactionstmtOrEmpty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRuleactionstmtOrEmpty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleactionstmtOrEmptyContext ruleactionstmtOrEmpty() throws RecognitionException {
		RuleactionstmtOrEmptyContext _localctx = new RuleactionstmtOrEmptyContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_ruleactionstmtOrEmpty);
		try {
			setState(7066);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case WITH:
			case DELETE_P:
			case INSERT:
			case NOTIFY:
			case UPDATE:
			case VALUES:
				enterOuterAlt(_localctx, 1);
				{
				setState(7064);
				ruleactionstmt();
				}
				break;
			case CLOSE_PAREN:
			case SEMI:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EventContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public EventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventContext event() throws RecognitionException {
		EventContext _localctx = new EventContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_event);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7068);
			_la = _input.LA(1);
			if ( !(_la==SELECT || _la==DELETE_P || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_insteadContext extends ParserRuleContext {
		public TerminalNode INSTEAD() { return getToken(PostgreSQLParser.INSTEAD, 0); }
		public TerminalNode ALSO() { return getToken(PostgreSQLParser.ALSO, 0); }
		public Opt_insteadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_instead; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_instead(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_instead(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_instead(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_insteadContext opt_instead() throws RecognitionException {
		Opt_insteadContext _localctx = new Opt_insteadContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_opt_instead);
		try {
			setState(7073);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSTEAD:
				enterOuterAlt(_localctx, 1);
				{
				setState(7070);
				match(INSTEAD);
				}
				break;
			case ALSO:
				enterOuterAlt(_localctx, 2);
				{
				setState(7071);
				match(ALSO);
				}
				break;
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case WITH:
			case DELETE_P:
			case INSERT:
			case NOTHING:
			case NOTIFY:
			case UPDATE:
			case VALUES:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NotifystmtContext extends ParserRuleContext {
		public TerminalNode NOTIFY() { return getToken(PostgreSQLParser.NOTIFY, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Notify_payloadContext notify_payload() {
			return getRuleContext(Notify_payloadContext.class,0);
		}
		public NotifystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notifystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNotifystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNotifystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNotifystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotifystmtContext notifystmt() throws RecognitionException {
		NotifystmtContext _localctx = new NotifystmtContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_notifystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7075);
			match(NOTIFY);
			setState(7076);
			colid();
			setState(7077);
			notify_payload();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Notify_payloadContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Notify_payloadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notify_payload; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNotify_payload(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNotify_payload(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNotify_payload(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Notify_payloadContext notify_payload() throws RecognitionException {
		Notify_payloadContext _localctx = new Notify_payloadContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_notify_payload);
		try {
			setState(7082);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(7079);
				match(COMMA);
				setState(7080);
				sconst();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ListenstmtContext extends ParserRuleContext {
		public TerminalNode LISTEN() { return getToken(PostgreSQLParser.LISTEN, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public ListenstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listenstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterListenstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitListenstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitListenstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListenstmtContext listenstmt() throws RecognitionException {
		ListenstmtContext _localctx = new ListenstmtContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_listenstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7084);
			match(LISTEN);
			setState(7085);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnlistenstmtContext extends ParserRuleContext {
		public TerminalNode UNLISTEN() { return getToken(PostgreSQLParser.UNLISTEN, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public UnlistenstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlistenstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUnlistenstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUnlistenstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUnlistenstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlistenstmtContext unlistenstmt() throws RecognitionException {
		UnlistenstmtContext _localctx = new UnlistenstmtContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_unlistenstmt);
		try {
			setState(7091);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7087);
				match(UNLISTEN);
				setState(7088);
				colid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7089);
				match(UNLISTEN);
				setState(7090);
				match(STAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionstmtContext extends ParserRuleContext {
		public TerminalNode ABORT_P() { return getToken(PostgreSQLParser.ABORT_P, 0); }
		public Opt_transactionContext opt_transaction() {
			return getRuleContext(Opt_transactionContext.class,0);
		}
		public Opt_transaction_chainContext opt_transaction_chain() {
			return getRuleContext(Opt_transaction_chainContext.class,0);
		}
		public TerminalNode BEGIN_P() { return getToken(PostgreSQLParser.BEGIN_P, 0); }
		public Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() {
			return getRuleContext(Transaction_mode_list_or_emptyContext.class,0);
		}
		public TerminalNode START() { return getToken(PostgreSQLParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLParser.SAVEPOINT, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode RELEASE() { return getToken(PostgreSQLParser.RELEASE, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode PREPARED() { return getToken(PostgreSQLParser.PREPARED, 0); }
		public TransactionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransactionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransactionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransactionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionstmtContext transactionstmt() throws RecognitionException {
		TransactionstmtContext _localctx = new TransactionstmtContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_transactionstmt);
		try {
			setState(7143);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7093);
				match(ABORT_P);
				setState(7094);
				opt_transaction();
				setState(7095);
				opt_transaction_chain();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7097);
				match(BEGIN_P);
				setState(7098);
				opt_transaction();
				setState(7099);
				transaction_mode_list_or_empty();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7101);
				match(START);
				setState(7102);
				match(TRANSACTION);
				setState(7103);
				transaction_mode_list_or_empty();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7104);
				match(COMMIT);
				setState(7105);
				opt_transaction();
				setState(7106);
				opt_transaction_chain();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7108);
				match(END_P);
				setState(7109);
				opt_transaction();
				setState(7110);
				opt_transaction_chain();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7112);
				match(ROLLBACK);
				setState(7113);
				opt_transaction();
				setState(7114);
				opt_transaction_chain();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7116);
				match(SAVEPOINT);
				setState(7117);
				colid();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7118);
				match(RELEASE);
				setState(7119);
				match(SAVEPOINT);
				setState(7120);
				colid();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7121);
				match(RELEASE);
				setState(7122);
				colid();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7123);
				match(ROLLBACK);
				setState(7124);
				opt_transaction();
				setState(7125);
				match(TO);
				setState(7126);
				match(SAVEPOINT);
				setState(7127);
				colid();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7129);
				match(ROLLBACK);
				setState(7130);
				opt_transaction();
				setState(7131);
				match(TO);
				setState(7132);
				colid();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7134);
				match(PREPARE);
				setState(7135);
				match(TRANSACTION);
				setState(7136);
				sconst();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7137);
				match(COMMIT);
				setState(7138);
				match(PREPARED);
				setState(7139);
				sconst();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7140);
				match(ROLLBACK);
				setState(7141);
				match(PREPARED);
				setState(7142);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_transactionContext extends ParserRuleContext {
		public TerminalNode WORK() { return getToken(PostgreSQLParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public Opt_transactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_transaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_transaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_transaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_transaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_transactionContext opt_transaction() throws RecognitionException {
		Opt_transactionContext _localctx = new Opt_transactionContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_opt_transaction);
		try {
			setState(7148);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WORK:
				enterOuterAlt(_localctx, 1);
				{
				setState(7145);
				match(WORK);
				}
				break;
			case TRANSACTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(7146);
				match(TRANSACTION);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case CREATE:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case NOT:
			case SELECT:
			case TABLE:
			case TO:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case ISOLATION:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case READ:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Transaction_mode_itemContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public Iso_levelContext iso_level() {
			return getRuleContext(Iso_levelContext.class,0);
		}
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(PostgreSQLParser.WRITE, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public Transaction_mode_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransaction_mode_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransaction_mode_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransaction_mode_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_itemContext transaction_mode_item() throws RecognitionException {
		Transaction_mode_itemContext _localctx = new Transaction_mode_itemContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_transaction_mode_item);
		try {
			setState(7160);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7150);
				match(ISOLATION);
				setState(7151);
				match(LEVEL);
				setState(7152);
				iso_level();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7153);
				match(READ);
				setState(7154);
				match(ONLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7155);
				match(READ);
				setState(7156);
				match(WRITE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7157);
				match(DEFERRABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7158);
				match(NOT);
				setState(7159);
				match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Transaction_mode_listContext extends ParserRuleContext {
		public List<Transaction_mode_itemContext> transaction_mode_item() {
			return getRuleContexts(Transaction_mode_itemContext.class);
		}
		public Transaction_mode_itemContext transaction_mode_item(int i) {
			return getRuleContext(Transaction_mode_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Transaction_mode_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransaction_mode_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransaction_mode_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransaction_mode_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_listContext transaction_mode_list() throws RecognitionException {
		Transaction_mode_listContext _localctx = new Transaction_mode_listContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_transaction_mode_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7162);
			transaction_mode_item();
			setState(7169);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA || _la==DEFERRABLE || _la==NOT || _la==ISOLATION || _la==READ) {
				{
				{
				setState(7164);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7163);
					match(COMMA);
					}
				}

				setState(7166);
				transaction_mode_item();
				}
				}
				setState(7171);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Transaction_mode_list_or_emptyContext extends ParserRuleContext {
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public Transaction_mode_list_or_emptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_list_or_empty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransaction_mode_list_or_empty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransaction_mode_list_or_empty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransaction_mode_list_or_empty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() throws RecognitionException {
		Transaction_mode_list_or_emptyContext _localctx = new Transaction_mode_list_or_emptyContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_transaction_mode_list_or_empty);
		try {
			setState(7174);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFERRABLE:
			case NOT:
			case ISOLATION:
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(7172);
				transaction_mode_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_transaction_chainContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLParser.CHAIN, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Opt_transaction_chainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_transaction_chain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_transaction_chain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_transaction_chain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_transaction_chain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_transaction_chainContext opt_transaction_chain() throws RecognitionException {
		Opt_transaction_chainContext _localctx = new Opt_transaction_chainContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_opt_transaction_chain);
		int _la;
		try {
			setState(7182);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(7176);
				match(AND);
				setState(7178);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(7177);
					match(NO);
					}
				}

				setState(7180);
				match(CHAIN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public Opt_check_optionContext opt_check_option() {
			return getRuleContext(Opt_check_optionContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLParser.RECURSIVE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public ViewstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterViewstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitViewstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitViewstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewstmtContext viewstmt() throws RecognitionException {
		ViewstmtContext _localctx = new ViewstmtContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_viewstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7184);
			match(CREATE);
			setState(7187);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(7185);
				match(OR);
				setState(7186);
				match(REPLACE);
				}
			}

			setState(7189);
			opttemp();
			setState(7203);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VIEW:
				{
				setState(7190);
				match(VIEW);
				setState(7191);
				qualified_name();
				setState(7192);
				opt_column_list();
				setState(7193);
				opt_reloptions();
				}
				break;
			case RECURSIVE:
				{
				setState(7195);
				match(RECURSIVE);
				setState(7196);
				match(VIEW);
				setState(7197);
				qualified_name();
				setState(7198);
				match(OPEN_PAREN);
				setState(7199);
				columnlist();
				setState(7200);
				match(CLOSE_PAREN);
				setState(7201);
				opt_reloptions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7205);
			match(AS);
			setState(7206);
			selectstmt();
			setState(7207);
			opt_check_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_check_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode CASCADED() { return getToken(PostgreSQLParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public Opt_check_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_check_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_check_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_check_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_check_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_check_optionContext opt_check_option() throws RecognitionException {
		Opt_check_optionContext _localctx = new Opt_check_optionContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_opt_check_option);
		int _la;
		try {
			setState(7216);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7209);
				match(WITH);
				setState(7211);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(7210);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7213);
				match(CHECK);
				setState(7214);
				match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LoadstmtContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(PostgreSQLParser.LOAD, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public LoadstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLoadstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLoadstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLoadstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadstmtContext loadstmt() throws RecognitionException {
		LoadstmtContext _localctx = new LoadstmtContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_loadstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7218);
			match(LOAD);
			setState(7219);
			file_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatedbstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public Createdb_opt_listContext createdb_opt_list() {
			return getRuleContext(Createdb_opt_listContext.class,0);
		}
		public CreatedbstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdbstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedbstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedbstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedbstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedbstmtContext createdbstmt() throws RecognitionException {
		CreatedbstmtContext _localctx = new CreatedbstmtContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_createdbstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7221);
			match(CREATE);
			setState(7222);
			match(DATABASE);
			setState(7223);
			name();
			setState(7224);
			opt_with();
			setState(7225);
			createdb_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Createdb_opt_listContext extends ParserRuleContext {
		public Createdb_opt_itemsContext createdb_opt_items() {
			return getRuleContext(Createdb_opt_itemsContext.class,0);
		}
		public Createdb_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedb_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedb_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedb_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_listContext createdb_opt_list() throws RecognitionException {
		Createdb_opt_listContext _localctx = new Createdb_opt_listContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_createdb_opt_list);
		try {
			setState(7229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,345,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7227);
				createdb_opt_items();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Createdb_opt_itemsContext extends ParserRuleContext {
		public List<Createdb_opt_itemContext> createdb_opt_item() {
			return getRuleContexts(Createdb_opt_itemContext.class);
		}
		public Createdb_opt_itemContext createdb_opt_item(int i) {
			return getRuleContext(Createdb_opt_itemContext.class,i);
		}
		public Createdb_opt_itemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_items; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedb_opt_items(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedb_opt_items(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedb_opt_items(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_itemsContext createdb_opt_items() throws RecognitionException {
		Createdb_opt_itemsContext _localctx = new Createdb_opt_itemsContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_createdb_opt_items);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7232); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7231);
					createdb_opt_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7234); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,346,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Createdb_opt_itemContext extends ParserRuleContext {
		public Createdb_opt_nameContext createdb_opt_name() {
			return getRuleContext(Createdb_opt_nameContext.class,0);
		}
		public Opt_equalContext opt_equal() {
			return getRuleContext(Opt_equalContext.class,0);
		}
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Createdb_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedb_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedb_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedb_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_itemContext createdb_opt_item() throws RecognitionException {
		Createdb_opt_itemContext _localctx = new Createdb_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_createdb_opt_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7236);
			createdb_opt_name();
			setState(7237);
			opt_equal();
			setState(7241);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
			case 1:
				{
				setState(7238);
				signediconst();
				}
				break;
			case 2:
				{
				setState(7239);
				opt_boolean_or_string();
				}
				break;
			case 3:
				{
				setState(7240);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Createdb_opt_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLParser.ENCODING, 0); }
		public TerminalNode LOCATION() { return getToken(PostgreSQLParser.LOCATION, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public Createdb_opt_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedb_opt_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedb_opt_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedb_opt_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_nameContext createdb_opt_name() throws RecognitionException {
		Createdb_opt_nameContext _localctx = new Createdb_opt_nameContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_createdb_opt_name);
		try {
			setState(7251);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7243);
				identifier();
				}
				break;
			case CONNECTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(7244);
				match(CONNECTION);
				setState(7245);
				match(LIMIT);
				}
				break;
			case ENCODING:
				enterOuterAlt(_localctx, 3);
				{
				setState(7246);
				match(ENCODING);
				}
				break;
			case LOCATION:
				enterOuterAlt(_localctx, 4);
				{
				setState(7247);
				match(LOCATION);
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 5);
				{
				setState(7248);
				match(OWNER);
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 6);
				{
				setState(7249);
				match(TABLESPACE);
				}
				break;
			case TEMPLATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(7250);
				match(TEMPLATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_equalContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Opt_equalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_equal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_equal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_equal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_equalContext opt_equal() throws RecognitionException {
		Opt_equalContext _localctx = new Opt_equalContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_opt_equal);
		try {
			setState(7255);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7253);
				match(EQUAL);
				}
				break;
			case PLUS:
			case MINUS:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case Integral:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterdatabasestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Createdb_opt_listContext createdb_opt_list() {
			return getRuleContext(Createdb_opt_listContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public AlterdatabasestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdatabasestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterdatabasestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterdatabasestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterdatabasestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterdatabasestmtContext alterdatabasestmt() throws RecognitionException {
		AlterdatabasestmtContext _localctx = new AlterdatabasestmtContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_alterdatabasestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7257);
			match(ALTER);
			setState(7258);
			match(DATABASE);
			setState(7259);
			name();
			setState(7266);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
			case 1:
				{
				setState(7260);
				match(WITH);
				setState(7261);
				createdb_opt_list();
				}
				break;
			case 2:
				{
				setState(7262);
				createdb_opt_list();
				}
				break;
			case 3:
				{
				setState(7263);
				match(SET);
				setState(7264);
				match(TABLESPACE);
				setState(7265);
				name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterdatabasesetstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public SetresetclauseContext setresetclause() {
			return getRuleContext(SetresetclauseContext.class,0);
		}
		public AlterdatabasesetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdatabasesetstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterdatabasesetstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterdatabasesetstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterdatabasesetstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterdatabasesetstmtContext alterdatabasesetstmt() throws RecognitionException {
		AlterdatabasesetstmtContext _localctx = new AlterdatabasesetstmtContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_alterdatabasesetstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7268);
			match(ALTER);
			setState(7269);
			match(DATABASE);
			setState(7270);
			name();
			setState(7271);
			setresetclause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropdbstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Drop_option_listContext drop_option_list() {
			return getRuleContext(Drop_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public DropdbstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropdbstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropdbstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropdbstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropdbstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropdbstmtContext dropdbstmt() throws RecognitionException {
		DropdbstmtContext _localctx = new DropdbstmtContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_dropdbstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7273);
			match(DROP);
			setState(7274);
			match(DATABASE);
			setState(7277);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
			case 1:
				{
				setState(7275);
				match(IF_P);
				setState(7276);
				match(EXISTS);
				}
				break;
			}
			setState(7279);
			name();
			setState(7285);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
			case 1:
				{
				setState(7280);
				opt_with();
				setState(7281);
				match(OPEN_PAREN);
				setState(7282);
				drop_option_list();
				setState(7283);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_option_listContext extends ParserRuleContext {
		public List<Drop_optionContext> drop_option() {
			return getRuleContexts(Drop_optionContext.class);
		}
		public Drop_optionContext drop_option(int i) {
			return getRuleContext(Drop_optionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Drop_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_option_listContext drop_option_list() throws RecognitionException {
		Drop_option_listContext _localctx = new Drop_option_listContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_drop_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7287);
			drop_option();
			setState(7292);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7288);
				match(COMMA);
				setState(7289);
				drop_option();
				}
				}
				setState(7294);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_optionContext extends ParserRuleContext {
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public Drop_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_optionContext drop_option() throws RecognitionException {
		Drop_optionContext _localctx = new Drop_optionContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_drop_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7295);
			match(FORCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltercollationstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public AltercollationstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altercollationstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltercollationstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltercollationstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltercollationstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltercollationstmtContext altercollationstmt() throws RecognitionException {
		AltercollationstmtContext _localctx = new AltercollationstmtContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_altercollationstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7297);
			match(ALTER);
			setState(7298);
			match(COLLATION);
			setState(7299);
			any_name();
			setState(7300);
			match(REFRESH);
			setState(7301);
			match(VERSION_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltersystemstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SYSTEM_P() { return getToken(PostgreSQLParser.SYSTEM_P, 0); }
		public Generic_setContext generic_set() {
			return getRuleContext(Generic_setContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public AltersystemstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altersystemstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltersystemstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltersystemstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltersystemstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltersystemstmtContext altersystemstmt() throws RecognitionException {
		AltersystemstmtContext _localctx = new AltersystemstmtContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_altersystemstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7303);
			match(ALTER);
			setState(7304);
			match(SYSTEM_P);
			setState(7305);
			_la = _input.LA(1);
			if ( !(_la==RESET || _la==SET) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7306);
			generic_set();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatedomainstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_asContext opt_as() {
			return getRuleContext(Opt_asContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public ColquallistContext colquallist() {
			return getRuleContext(ColquallistContext.class,0);
		}
		public CreatedomainstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdomainstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedomainstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedomainstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedomainstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedomainstmtContext createdomainstmt() throws RecognitionException {
		CreatedomainstmtContext _localctx = new CreatedomainstmtContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_createdomainstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7308);
			match(CREATE);
			setState(7309);
			match(DOMAIN_P);
			setState(7310);
			any_name();
			setState(7311);
			opt_as();
			setState(7312);
			typename();
			setState(7313);
			colquallist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterdomainstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Alter_column_defaultContext alter_column_default() {
			return getRuleContext(Alter_column_defaultContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TableconstraintContext tableconstraint() {
			return getRuleContext(TableconstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(PostgreSQLParser.VALIDATE, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public AlterdomainstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdomainstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterdomainstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterdomainstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterdomainstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterdomainstmtContext alterdomainstmt() throws RecognitionException {
		AlterdomainstmtContext _localctx = new AlterdomainstmtContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_alterdomainstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7315);
			match(ALTER);
			setState(7316);
			match(DOMAIN_P);
			setState(7317);
			any_name();
			setState(7339);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
			case 1:
				{
				setState(7318);
				alter_column_default();
				}
				break;
			case 2:
				{
				setState(7319);
				match(DROP);
				setState(7320);
				match(NOT);
				setState(7321);
				match(NULL_P);
				}
				break;
			case 3:
				{
				setState(7322);
				match(SET);
				setState(7323);
				match(NOT);
				setState(7324);
				match(NULL_P);
				}
				break;
			case 4:
				{
				setState(7325);
				match(ADD_P);
				setState(7326);
				tableconstraint();
				}
				break;
			case 5:
				{
				setState(7327);
				match(DROP);
				setState(7328);
				match(CONSTRAINT);
				setState(7331);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
				case 1:
					{
					setState(7329);
					match(IF_P);
					setState(7330);
					match(EXISTS);
					}
					break;
				}
				setState(7333);
				name();
				setState(7334);
				opt_drop_behavior();
				}
				break;
			case 6:
				{
				setState(7336);
				match(VALIDATE);
				setState(7337);
				match(CONSTRAINT);
				setState(7338);
				name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_asContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Opt_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_as(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_asContext opt_as() throws RecognitionException {
		Opt_asContext _localctx = new Opt_asContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_opt_as);
		try {
			setState(7343);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(7341);
				match(AS);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltertsdictionarystmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public AltertsdictionarystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertsdictionarystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltertsdictionarystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltertsdictionarystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltertsdictionarystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltertsdictionarystmtContext altertsdictionarystmt() throws RecognitionException {
		AltertsdictionarystmtContext _localctx = new AltertsdictionarystmtContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_altertsdictionarystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7345);
			match(ALTER);
			setState(7346);
			match(TEXT_P);
			setState(7347);
			match(SEARCH);
			setState(7348);
			match(DICTIONARY);
			setState(7349);
			any_name();
			setState(7350);
			definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltertsconfigurationstmtContext extends ParserRuleContext {
		public List<TerminalNode> ALTER() { return getTokens(PostgreSQLParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(PostgreSQLParser.ALTER, i);
		}
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Any_withContext any_with() {
			return getRuleContext(Any_withContext.class,0);
		}
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public AltertsconfigurationstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertsconfigurationstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltertsconfigurationstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltertsconfigurationstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltertsconfigurationstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltertsconfigurationstmtContext altertsconfigurationstmt() throws RecognitionException {
		AltertsconfigurationstmtContext _localctx = new AltertsconfigurationstmtContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_altertsconfigurationstmt);
		try {
			setState(7424);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7352);
				match(ALTER);
				setState(7353);
				match(TEXT_P);
				setState(7354);
				match(SEARCH);
				setState(7355);
				match(CONFIGURATION);
				setState(7356);
				any_name();
				setState(7357);
				match(ADD_P);
				setState(7358);
				match(MAPPING);
				setState(7359);
				match(FOR);
				setState(7360);
				name_list();
				setState(7361);
				any_with();
				setState(7362);
				any_name_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7364);
				match(ALTER);
				setState(7365);
				match(TEXT_P);
				setState(7366);
				match(SEARCH);
				setState(7367);
				match(CONFIGURATION);
				setState(7368);
				any_name();
				setState(7369);
				match(ALTER);
				setState(7370);
				match(MAPPING);
				setState(7371);
				match(FOR);
				setState(7372);
				name_list();
				setState(7373);
				any_with();
				setState(7374);
				any_name_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7376);
				match(ALTER);
				setState(7377);
				match(TEXT_P);
				setState(7378);
				match(SEARCH);
				setState(7379);
				match(CONFIGURATION);
				setState(7380);
				any_name();
				setState(7381);
				match(ALTER);
				setState(7382);
				match(MAPPING);
				setState(7383);
				match(REPLACE);
				setState(7384);
				any_name();
				setState(7385);
				any_with();
				setState(7386);
				any_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7388);
				match(ALTER);
				setState(7389);
				match(TEXT_P);
				setState(7390);
				match(SEARCH);
				setState(7391);
				match(CONFIGURATION);
				setState(7392);
				any_name();
				setState(7393);
				match(ALTER);
				setState(7394);
				match(MAPPING);
				setState(7395);
				match(FOR);
				setState(7396);
				name_list();
				setState(7397);
				match(REPLACE);
				setState(7398);
				any_name();
				setState(7399);
				any_with();
				setState(7400);
				any_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7402);
				match(ALTER);
				setState(7403);
				match(TEXT_P);
				setState(7404);
				match(SEARCH);
				setState(7405);
				match(CONFIGURATION);
				setState(7406);
				any_name();
				setState(7407);
				match(DROP);
				setState(7408);
				match(MAPPING);
				setState(7409);
				match(FOR);
				setState(7410);
				name_list();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7412);
				match(ALTER);
				setState(7413);
				match(TEXT_P);
				setState(7414);
				match(SEARCH);
				setState(7415);
				match(CONFIGURATION);
				setState(7416);
				any_name();
				setState(7417);
				match(DROP);
				setState(7418);
				match(MAPPING);
				setState(7419);
				match(IF_P);
				setState(7420);
				match(EXISTS);
				setState(7421);
				match(FOR);
				setState(7422);
				name_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Any_withContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Any_withContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_with; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAny_with(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAny_with(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAny_with(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_withContext any_with() throws RecognitionException {
		Any_withContext _localctx = new Any_withContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_any_with);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7426);
			match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateconversionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_defaultContext opt_default() {
			return getRuleContext(Opt_defaultContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public CreateconversionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createconversionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateconversionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateconversionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateconversionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateconversionstmtContext createconversionstmt() throws RecognitionException {
		CreateconversionstmtContext _localctx = new CreateconversionstmtContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_createconversionstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7428);
			match(CREATE);
			setState(7429);
			opt_default();
			setState(7430);
			match(CONVERSION_P);
			setState(7431);
			any_name();
			setState(7432);
			match(FOR);
			setState(7433);
			sconst();
			setState(7434);
			match(TO);
			setState(7435);
			sconst();
			setState(7436);
			match(FROM);
			setState(7437);
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ClusterstmtContext extends ParserRuleContext {
		public TerminalNode CLUSTER() { return getToken(PostgreSQLParser.CLUSTER, 0); }
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Cluster_index_specificationContext cluster_index_specification() {
			return getRuleContext(Cluster_index_specificationContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public ClusterstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterClusterstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitClusterstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitClusterstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterstmtContext clusterstmt() throws RecognitionException {
		ClusterstmtContext _localctx = new ClusterstmtContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_clusterstmt);
		try {
			setState(7452);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7439);
				match(CLUSTER);
				setState(7440);
				opt_verbose();
				setState(7441);
				qualified_name();
				setState(7442);
				cluster_index_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7444);
				match(CLUSTER);
				setState(7445);
				opt_verbose();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7446);
				match(CLUSTER);
				setState(7447);
				opt_verbose();
				setState(7448);
				name();
				setState(7449);
				match(ON);
				setState(7450);
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cluster_index_specificationContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Cluster_index_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_index_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCluster_index_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCluster_index_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCluster_index_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cluster_index_specificationContext cluster_index_specification() throws RecognitionException {
		Cluster_index_specificationContext _localctx = new Cluster_index_specificationContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_cluster_index_specification);
		try {
			setState(7457);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(7454);
				match(USING);
				setState(7455);
				name();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VacuumstmtContext extends ParserRuleContext {
		public TerminalNode VACUUM() { return getToken(PostgreSQLParser.VACUUM, 0); }
		public Opt_fullContext opt_full() {
			return getRuleContext(Opt_fullContext.class,0);
		}
		public Opt_freezeContext opt_freeze() {
			return getRuleContext(Opt_freezeContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public Opt_analyzeContext opt_analyze() {
			return getRuleContext(Opt_analyzeContext.class,0);
		}
		public Opt_vacuum_relation_listContext opt_vacuum_relation_list() {
			return getRuleContext(Opt_vacuum_relation_listContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Vac_analyze_option_listContext vac_analyze_option_list() {
			return getRuleContext(Vac_analyze_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public VacuumstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuumstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVacuumstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVacuumstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVacuumstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacuumstmtContext vacuumstmt() throws RecognitionException {
		VacuumstmtContext _localctx = new VacuumstmtContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_vacuumstmt);
		try {
			setState(7472);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7459);
				match(VACUUM);
				setState(7460);
				opt_full();
				setState(7461);
				opt_freeze();
				setState(7462);
				opt_verbose();
				setState(7463);
				opt_analyze();
				setState(7464);
				opt_vacuum_relation_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7466);
				match(VACUUM);
				setState(7467);
				match(OPEN_PAREN);
				setState(7468);
				vac_analyze_option_list();
				setState(7469);
				match(CLOSE_PAREN);
				setState(7470);
				opt_vacuum_relation_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AnalyzestmtContext extends ParserRuleContext {
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public Opt_vacuum_relation_listContext opt_vacuum_relation_list() {
			return getRuleContext(Opt_vacuum_relation_listContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Vac_analyze_option_listContext vac_analyze_option_list() {
			return getRuleContext(Vac_analyze_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AnalyzestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAnalyzestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAnalyzestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAnalyzestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzestmtContext analyzestmt() throws RecognitionException {
		AnalyzestmtContext _localctx = new AnalyzestmtContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_analyzestmt);
		try {
			setState(7484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7474);
				analyze_keyword();
				setState(7475);
				opt_verbose();
				setState(7476);
				opt_vacuum_relation_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7478);
				analyze_keyword();
				setState(7479);
				match(OPEN_PAREN);
				setState(7480);
				vac_analyze_option_list();
				setState(7481);
				match(CLOSE_PAREN);
				setState(7482);
				opt_vacuum_relation_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vac_analyze_option_listContext extends ParserRuleContext {
		public List<Vac_analyze_option_elemContext> vac_analyze_option_elem() {
			return getRuleContexts(Vac_analyze_option_elemContext.class);
		}
		public Vac_analyze_option_elemContext vac_analyze_option_elem(int i) {
			return getRuleContext(Vac_analyze_option_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Vac_analyze_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vac_analyze_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVac_analyze_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVac_analyze_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVac_analyze_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vac_analyze_option_listContext vac_analyze_option_list() throws RecognitionException {
		Vac_analyze_option_listContext _localctx = new Vac_analyze_option_listContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_vac_analyze_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7486);
			vac_analyze_option_elem();
			setState(7491);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7487);
				match(COMMA);
				setState(7488);
				vac_analyze_option_elem();
				}
				}
				setState(7493);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Analyze_keywordContext extends ParserRuleContext {
		public TerminalNode ANALYZE() { return getToken(PostgreSQLParser.ANALYZE, 0); }
		public TerminalNode ANALYSE() { return getToken(PostgreSQLParser.ANALYSE, 0); }
		public Analyze_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyze_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAnalyze_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAnalyze_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAnalyze_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Analyze_keywordContext analyze_keyword() throws RecognitionException {
		Analyze_keywordContext _localctx = new Analyze_keywordContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_analyze_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7494);
			_la = _input.LA(1);
			if ( !(_la==ANALYSE || _la==ANALYZE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vac_analyze_option_elemContext extends ParserRuleContext {
		public Vac_analyze_option_nameContext vac_analyze_option_name() {
			return getRuleContext(Vac_analyze_option_nameContext.class,0);
		}
		public Vac_analyze_option_argContext vac_analyze_option_arg() {
			return getRuleContext(Vac_analyze_option_argContext.class,0);
		}
		public Vac_analyze_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vac_analyze_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVac_analyze_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVac_analyze_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVac_analyze_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vac_analyze_option_elemContext vac_analyze_option_elem() throws RecognitionException {
		Vac_analyze_option_elemContext _localctx = new Vac_analyze_option_elemContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_vac_analyze_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7496);
			vac_analyze_option_name();
			setState(7497);
			vac_analyze_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vac_analyze_option_nameContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Vac_analyze_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vac_analyze_option_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVac_analyze_option_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVac_analyze_option_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVac_analyze_option_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vac_analyze_option_nameContext vac_analyze_option_name() throws RecognitionException {
		Vac_analyze_option_nameContext _localctx = new Vac_analyze_option_nameContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_vac_analyze_option_name);
		try {
			setState(7501);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7499);
				nonreservedword();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7500);
				analyze_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vac_analyze_option_argContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public Vac_analyze_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vac_analyze_option_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVac_analyze_option_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVac_analyze_option_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVac_analyze_option_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vac_analyze_option_argContext vac_analyze_option_arg() throws RecognitionException {
		Vac_analyze_option_argContext _localctx = new Vac_analyze_option_argContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_vac_analyze_option_arg);
		try {
			setState(7506);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(7503);
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(7504);
				numericonly();
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_analyzeContext extends ParserRuleContext {
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Opt_analyzeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_analyze; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_analyze(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_analyze(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_analyze(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_analyzeContext opt_analyze() throws RecognitionException {
		Opt_analyzeContext _localctx = new Opt_analyzeContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_opt_analyze);
		try {
			setState(7510);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7508);
				analyze_keyword();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_verboseContext extends ParserRuleContext {
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public Opt_verboseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_verbose; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_verbose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_verbose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_verbose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_verboseContext opt_verbose() throws RecognitionException {
		Opt_verboseContext _localctx = new Opt_verboseContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_opt_verbose);
		try {
			setState(7514);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERBOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7512);
				match(VERBOSE);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_fullContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public Opt_fullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_full; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_full(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_full(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_full(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fullContext opt_full() throws RecognitionException {
		Opt_fullContext _localctx = new Opt_fullContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_opt_full);
		try {
			setState(7518);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7516);
				match(FULL);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case FREEZE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_freezeContext extends ParserRuleContext {
		public TerminalNode FREEZE() { return getToken(PostgreSQLParser.FREEZE, 0); }
		public Opt_freezeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_freeze; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_freeze(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_freeze(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_freeze(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_freezeContext opt_freeze() throws RecognitionException {
		Opt_freezeContext _localctx = new Opt_freezeContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_opt_freeze);
		try {
			setState(7522);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FREEZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7520);
				match(FREEZE);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_name_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_name_listContext opt_name_list() throws RecognitionException {
		Opt_name_listContext _localctx = new Opt_name_listContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_opt_name_list);
		try {
			setState(7529);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7524);
				match(OPEN_PAREN);
				setState(7525);
				name_list();
				setState(7526);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vacuum_relationContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public Vacuum_relationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_relation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVacuum_relation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVacuum_relation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVacuum_relation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vacuum_relationContext vacuum_relation() throws RecognitionException {
		Vacuum_relationContext _localctx = new Vacuum_relationContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_vacuum_relation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7531);
			qualified_name();
			setState(7532);
			opt_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vacuum_relation_listContext extends ParserRuleContext {
		public List<Vacuum_relationContext> vacuum_relation() {
			return getRuleContexts(Vacuum_relationContext.class);
		}
		public Vacuum_relationContext vacuum_relation(int i) {
			return getRuleContext(Vacuum_relationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Vacuum_relation_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_relation_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVacuum_relation_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVacuum_relation_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVacuum_relation_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vacuum_relation_listContext vacuum_relation_list() throws RecognitionException {
		Vacuum_relation_listContext _localctx = new Vacuum_relation_listContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_vacuum_relation_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7534);
			vacuum_relation();
			setState(7539);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7535);
				match(COMMA);
				setState(7536);
				vacuum_relation();
				}
				}
				setState(7541);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_vacuum_relation_listContext extends ParserRuleContext {
		public Vacuum_relation_listContext vacuum_relation_list() {
			return getRuleContext(Vacuum_relation_listContext.class,0);
		}
		public Opt_vacuum_relation_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_vacuum_relation_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_vacuum_relation_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_vacuum_relation_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_vacuum_relation_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_vacuum_relation_listContext opt_vacuum_relation_list() throws RecognitionException {
		Opt_vacuum_relation_listContext _localctx = new Opt_vacuum_relation_listContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_opt_vacuum_relation_list);
		try {
			setState(7544);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7542);
				vacuum_relation_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExplainstmtContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(PostgreSQLParser.EXPLAIN, 0); }
		public ExplainablestmtContext explainablestmt() {
			return getRuleContext(ExplainablestmtContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Explain_option_listContext explain_option_list() {
			return getRuleContext(Explain_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExplainstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplainstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplainstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplainstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainstmtContext explainstmt() throws RecognitionException {
		ExplainstmtContext _localctx = new ExplainstmtContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_explainstmt);
		try {
			setState(7562);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7546);
				match(EXPLAIN);
				setState(7547);
				explainablestmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7548);
				match(EXPLAIN);
				setState(7549);
				analyze_keyword();
				setState(7550);
				opt_verbose();
				setState(7551);
				explainablestmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7553);
				match(EXPLAIN);
				setState(7554);
				match(VERBOSE);
				setState(7555);
				explainablestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7556);
				match(EXPLAIN);
				setState(7557);
				match(OPEN_PAREN);
				setState(7558);
				explain_option_list();
				setState(7559);
				match(CLOSE_PAREN);
				setState(7560);
				explainablestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExplainablestmtContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public InsertstmtContext insertstmt() {
			return getRuleContext(InsertstmtContext.class,0);
		}
		public UpdatestmtContext updatestmt() {
			return getRuleContext(UpdatestmtContext.class,0);
		}
		public DeletestmtContext deletestmt() {
			return getRuleContext(DeletestmtContext.class,0);
		}
		public DeclarecursorstmtContext declarecursorstmt() {
			return getRuleContext(DeclarecursorstmtContext.class,0);
		}
		public CreateasstmtContext createasstmt() {
			return getRuleContext(CreateasstmtContext.class,0);
		}
		public CreatematviewstmtContext creatematviewstmt() {
			return getRuleContext(CreatematviewstmtContext.class,0);
		}
		public RefreshmatviewstmtContext refreshmatviewstmt() {
			return getRuleContext(RefreshmatviewstmtContext.class,0);
		}
		public ExecutestmtContext executestmt() {
			return getRuleContext(ExecutestmtContext.class,0);
		}
		public ExplainablestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainablestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplainablestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplainablestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplainablestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainablestmtContext explainablestmt() throws RecognitionException {
		ExplainablestmtContext _localctx = new ExplainablestmtContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_explainablestmt);
		try {
			setState(7573);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7564);
				selectstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7565);
				insertstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7566);
				updatestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7567);
				deletestmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7568);
				declarecursorstmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7569);
				createasstmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7570);
				creatematviewstmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7571);
				refreshmatviewstmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7572);
				executestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Explain_option_listContext extends ParserRuleContext {
		public List<Explain_option_elemContext> explain_option_elem() {
			return getRuleContexts(Explain_option_elemContext.class);
		}
		public Explain_option_elemContext explain_option_elem(int i) {
			return getRuleContext(Explain_option_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Explain_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplain_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplain_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplain_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_listContext explain_option_list() throws RecognitionException {
		Explain_option_listContext _localctx = new Explain_option_listContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_explain_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7575);
			explain_option_elem();
			setState(7580);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7576);
				match(COMMA);
				setState(7577);
				explain_option_elem();
				}
				}
				setState(7582);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Explain_option_elemContext extends ParserRuleContext {
		public Explain_option_nameContext explain_option_name() {
			return getRuleContext(Explain_option_nameContext.class,0);
		}
		public Explain_option_argContext explain_option_arg() {
			return getRuleContext(Explain_option_argContext.class,0);
		}
		public Explain_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplain_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplain_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplain_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_elemContext explain_option_elem() throws RecognitionException {
		Explain_option_elemContext _localctx = new Explain_option_elemContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_explain_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7583);
			explain_option_name();
			setState(7584);
			explain_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Explain_option_nameContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Explain_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplain_option_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplain_option_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplain_option_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_nameContext explain_option_name() throws RecognitionException {
		Explain_option_nameContext _localctx = new Explain_option_nameContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_explain_option_name);
		try {
			setState(7588);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7586);
				nonreservedword();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7587);
				analyze_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Explain_option_argContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public Explain_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplain_option_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplain_option_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplain_option_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_argContext explain_option_arg() throws RecognitionException {
		Explain_option_argContext _localctx = new Explain_option_argContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_explain_option_arg);
		try {
			setState(7593);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(7590);
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(7591);
				numericonly();
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PreparestmtContext extends ParserRuleContext {
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Prep_type_clauseContext prep_type_clause() {
			return getRuleContext(Prep_type_clauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public PreparablestmtContext preparablestmt() {
			return getRuleContext(PreparablestmtContext.class,0);
		}
		public PreparestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPreparestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPreparestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPreparestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparestmtContext preparestmt() throws RecognitionException {
		PreparestmtContext _localctx = new PreparestmtContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_preparestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7595);
			match(PREPARE);
			setState(7596);
			name();
			setState(7597);
			prep_type_clause();
			setState(7598);
			match(AS);
			setState(7599);
			preparablestmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Prep_type_clauseContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Prep_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prep_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrep_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrep_type_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrep_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prep_type_clauseContext prep_type_clause() throws RecognitionException {
		Prep_type_clauseContext _localctx = new Prep_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_prep_type_clause);
		try {
			setState(7606);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(7601);
				match(OPEN_PAREN);
				setState(7602);
				type_list();
				setState(7603);
				match(CLOSE_PAREN);
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PreparablestmtContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public InsertstmtContext insertstmt() {
			return getRuleContext(InsertstmtContext.class,0);
		}
		public UpdatestmtContext updatestmt() {
			return getRuleContext(UpdatestmtContext.class,0);
		}
		public DeletestmtContext deletestmt() {
			return getRuleContext(DeletestmtContext.class,0);
		}
		public PreparablestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparablestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPreparablestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPreparablestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPreparablestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparablestmtContext preparablestmt() throws RecognitionException {
		PreparablestmtContext _localctx = new PreparablestmtContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_preparablestmt);
		try {
			setState(7612);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7608);
				selectstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7609);
				insertstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7610);
				updatestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7611);
				deletestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExecutestmtContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Execute_param_clauseContext execute_param_clause() {
			return getRuleContext(Execute_param_clauseContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Create_as_targetContext create_as_target() {
			return getRuleContext(Create_as_targetContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public ExecutestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExecutestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExecutestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExecutestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecutestmtContext executestmt() throws RecognitionException {
		ExecutestmtContext _localctx = new ExecutestmtContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_executestmt);
		try {
			setState(7641);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7614);
				match(EXECUTE);
				setState(7615);
				name();
				setState(7616);
				execute_param_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7618);
				match(CREATE);
				setState(7619);
				opttemp();
				setState(7620);
				match(TABLE);
				setState(7621);
				create_as_target();
				setState(7622);
				match(AS);
				setState(7623);
				match(EXECUTE);
				setState(7624);
				name();
				setState(7625);
				execute_param_clause();
				setState(7626);
				opt_with_data();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7628);
				match(CREATE);
				setState(7629);
				opttemp();
				setState(7630);
				match(TABLE);
				setState(7631);
				match(IF_P);
				setState(7632);
				match(NOT);
				setState(7633);
				match(EXISTS);
				setState(7634);
				create_as_target();
				setState(7635);
				match(AS);
				setState(7636);
				match(EXECUTE);
				setState(7637);
				name();
				setState(7638);
				execute_param_clause();
				setState(7639);
				opt_with_data();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Execute_param_clauseContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Execute_param_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_param_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExecute_param_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExecute_param_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExecute_param_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_param_clauseContext execute_param_clause() throws RecognitionException {
		Execute_param_clauseContext _localctx = new Execute_param_clauseContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_execute_param_clause);
		try {
			setState(7648);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7643);
				match(OPEN_PAREN);
				setState(7644);
				expr_list();
				setState(7645);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeallocatestmtContext extends ParserRuleContext {
		public TerminalNode DEALLOCATE() { return getToken(PostgreSQLParser.DEALLOCATE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public DeallocatestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocatestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDeallocatestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDeallocatestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDeallocatestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocatestmtContext deallocatestmt() throws RecognitionException {
		DeallocatestmtContext _localctx = new DeallocatestmtContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_deallocatestmt);
		try {
			setState(7660);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7650);
				match(DEALLOCATE);
				setState(7651);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7652);
				match(DEALLOCATE);
				setState(7653);
				match(PREPARE);
				setState(7654);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7655);
				match(DEALLOCATE);
				setState(7656);
				match(ALL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7657);
				match(DEALLOCATE);
				setState(7658);
				match(PREPARE);
				setState(7659);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertstmtContext extends ParserRuleContext {
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Insert_targetContext insert_target() {
			return getRuleContext(Insert_targetContext.class,0);
		}
		public Insert_restContext insert_rest() {
			return getRuleContext(Insert_restContext.class,0);
		}
		public Opt_on_conflictContext opt_on_conflict() {
			return getRuleContext(Opt_on_conflictContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public InsertstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsertstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsertstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsertstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertstmtContext insertstmt() throws RecognitionException {
		InsertstmtContext _localctx = new InsertstmtContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_insertstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7662);
			opt_with_clause();
			setState(7663);
			match(INSERT);
			setState(7664);
			match(INTO);
			setState(7665);
			insert_target();
			setState(7666);
			insert_rest();
			setState(7667);
			opt_on_conflict();
			setState(7668);
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_targetContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Insert_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsert_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsert_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsert_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_targetContext insert_target() throws RecognitionException {
		Insert_targetContext _localctx = new Insert_targetContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_insert_target);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7670);
			qualified_name();
			setState(7673);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7671);
				match(AS);
				setState(7672);
				colid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_restContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public TerminalNode OVERRIDING() { return getToken(PostgreSQLParser.OVERRIDING, 0); }
		public Override_kindContext override_kind() {
			return getRuleContext(Override_kindContext.class,0);
		}
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public Insert_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_rest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsert_rest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsert_rest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsert_rest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_restContext insert_rest() throws RecognitionException {
		Insert_restContext _localctx = new Insert_restContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_insert_rest);
		int _la;
		try {
			setState(7694);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7675);
				selectstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7676);
				match(OVERRIDING);
				setState(7677);
				override_kind();
				setState(7678);
				match(VALUE_P);
				setState(7679);
				selectstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7681);
				match(OPEN_PAREN);
				setState(7682);
				insert_column_list();
				setState(7683);
				match(CLOSE_PAREN);
				setState(7688);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OVERRIDING) {
					{
					setState(7684);
					match(OVERRIDING);
					setState(7685);
					override_kind();
					setState(7686);
					match(VALUE_P);
					}
				}

				setState(7690);
				selectstmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7692);
				match(DEFAULT);
				setState(7693);
				match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Override_kindContext extends ParserRuleContext {
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode SYSTEM_P() { return getToken(PostgreSQLParser.SYSTEM_P, 0); }
		public Override_kindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_override_kind; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOverride_kind(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOverride_kind(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOverride_kind(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Override_kindContext override_kind() throws RecognitionException {
		Override_kindContext _localctx = new Override_kindContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_override_kind);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7696);
			_la = _input.LA(1);
			if ( !(_la==USER || _la==SYSTEM_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_column_listContext extends ParserRuleContext {
		public List<Insert_column_itemContext> insert_column_item() {
			return getRuleContexts(Insert_column_itemContext.class);
		}
		public Insert_column_itemContext insert_column_item(int i) {
			return getRuleContext(Insert_column_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Insert_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsert_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsert_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsert_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_column_listContext insert_column_list() throws RecognitionException {
		Insert_column_listContext _localctx = new Insert_column_listContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_insert_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7698);
			insert_column_item();
			setState(7703);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7699);
				match(COMMA);
				setState(7700);
				insert_column_item();
				}
				}
				setState(7705);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_column_itemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Insert_column_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsert_column_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsert_column_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsert_column_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_column_itemContext insert_column_item() throws RecognitionException {
		Insert_column_itemContext _localctx = new Insert_column_itemContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_insert_column_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7706);
			colid();
			setState(7707);
			opt_indirection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_on_conflictContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode CONFLICT() { return getToken(PostgreSQLParser.CONFLICT, 0); }
		public Opt_conf_exprContext opt_conf_expr() {
			return getRuleContext(Opt_conf_exprContext.class,0);
		}
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public Opt_on_conflictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_on_conflict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_on_conflict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_on_conflict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_on_conflict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_on_conflictContext opt_on_conflict() throws RecognitionException {
		Opt_on_conflictContext _localctx = new Opt_on_conflictContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_opt_on_conflict);
		try {
			setState(7722);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(7709);
				match(ON);
				setState(7710);
				match(CONFLICT);
				setState(7711);
				opt_conf_expr();
				setState(7712);
				match(DO);
				setState(7719);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UPDATE:
					{
					setState(7713);
					match(UPDATE);
					setState(7714);
					match(SET);
					setState(7715);
					set_clause_list();
					setState(7716);
					where_clause();
					}
					break;
				case NOTHING:
					{
					setState(7718);
					match(NOTHING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_conf_exprContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Index_paramsContext index_params() {
			return getRuleContext(Index_paramsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_conf_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_conf_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_conf_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_conf_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_conf_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_conf_exprContext opt_conf_expr() throws RecognitionException {
		Opt_conf_exprContext _localctx = new Opt_conf_exprContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_opt_conf_expr);
		try {
			setState(7733);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(7724);
				match(OPEN_PAREN);
				setState(7725);
				index_params();
				setState(7726);
				match(CLOSE_PAREN);
				setState(7727);
				where_clause();
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(7729);
				match(ON);
				setState(7730);
				match(CONSTRAINT);
				setState(7731);
				name();
				}
				break;
			case DO:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Returning_clauseContext extends ParserRuleContext {
		public TerminalNode RETURNING() { return getToken(PostgreSQLParser.RETURNING, 0); }
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public Returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReturning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReturning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReturning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Returning_clauseContext returning_clause() throws RecognitionException {
		Returning_clauseContext _localctx = new Returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_returning_clause);
		try {
			setState(7738);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETURNING:
				enterOuterAlt(_localctx, 1);
				{
				setState(7735);
				match(RETURNING);
				setState(7736);
				target_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MergestmtContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(PostgreSQLParser.MERGE, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return getRuleContext(Merge_insert_clauseContext.class,0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return getRuleContext(Merge_update_clauseContext.class,0);
		}
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public List<Alias_clauseContext> alias_clause() {
			return getRuleContexts(Alias_clauseContext.class);
		}
		public Alias_clauseContext alias_clause(int i) {
			return getRuleContext(Alias_clauseContext.class,i);
		}
		public Merge_delete_clauseContext merge_delete_clause() {
			return getRuleContext(Merge_delete_clauseContext.class,0);
		}
		public MergestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mergestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterMergestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitMergestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitMergestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MergestmtContext mergestmt() throws RecognitionException {
		MergestmtContext _localctx = new MergestmtContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_mergestmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7740);
			match(MERGE);
			setState(7742);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(7741);
				match(INTO);
				}
			}

			setState(7744);
			qualified_name();
			setState(7746);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2459027080864595968L) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & -113665638399L) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & -1L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -9663676417L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -1L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -1152925902653358081L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -8796764110849L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -1L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & 432345718846390271L) != 0)) {
				{
				setState(7745);
				alias_clause();
				}
			}

			setState(7748);
			match(USING);
			setState(7751);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				{
				setState(7749);
				select_with_parens();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				setState(7750);
				qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7754);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2459027080864595968L) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & -113665638399L) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & -1L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -9663676417L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -1L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -1152925902653358081L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -8796764110849L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -1L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & 432345718846390271L) != 0)) {
				{
				setState(7753);
				alias_clause();
				}
			}

			setState(7756);
			match(ON);
			setState(7757);
			a_expr();
			setState(7766);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				setState(7758);
				merge_insert_clause();
				setState(7760);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
				case 1:
					{
					setState(7759);
					merge_update_clause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(7762);
				merge_update_clause();
				setState(7764);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
				case 1:
					{
					setState(7763);
					merge_insert_clause();
					}
					break;
				}
				}
				break;
			}
			setState(7769);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(7768);
				merge_delete_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_insert_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode MATCHED() { return getToken(PostgreSQLParser.MATCHED, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterMerge_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitMerge_insert_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitMerge_insert_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_insert_clauseContext merge_insert_clause() throws RecognitionException {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_merge_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7771);
			match(WHEN);
			setState(7772);
			match(NOT);
			setState(7773);
			match(MATCHED);
			setState(7776);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(7774);
				match(AND);
				setState(7775);
				a_expr();
				}
			}

			setState(7779);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THEN) {
				{
				setState(7778);
				match(THEN);
				}
			}

			setState(7781);
			match(INSERT);
			setState(7786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(7782);
				match(OPEN_PAREN);
				setState(7783);
				insert_column_list();
				setState(7784);
				match(CLOSE_PAREN);
				}
			}

			setState(7788);
			values_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_update_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(PostgreSQLParser.MATCHED, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterMerge_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitMerge_update_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitMerge_update_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_update_clauseContext merge_update_clause() throws RecognitionException {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_merge_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7790);
			match(WHEN);
			setState(7791);
			match(MATCHED);
			setState(7794);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(7792);
				match(AND);
				setState(7793);
				a_expr();
				}
			}

			setState(7797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THEN) {
				{
				setState(7796);
				match(THEN);
				}
			}

			setState(7799);
			match(UPDATE);
			setState(7800);
			match(SET);
			setState(7801);
			set_clause_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_delete_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(PostgreSQLParser.MATCHED, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public Merge_delete_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_delete_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterMerge_delete_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitMerge_delete_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitMerge_delete_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_delete_clauseContext merge_delete_clause() throws RecognitionException {
		Merge_delete_clauseContext _localctx = new Merge_delete_clauseContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_merge_delete_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7803);
			match(WHEN);
			setState(7804);
			match(MATCHED);
			setState(7806);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THEN) {
				{
				setState(7805);
				match(THEN);
				}
			}

			setState(7808);
			match(DELETE_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeletestmtContext extends ParserRuleContext {
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return getRuleContext(Relation_expr_opt_aliasContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Where_or_current_clauseContext where_or_current_clause() {
			return getRuleContext(Where_or_current_clauseContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public DeletestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deletestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDeletestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDeletestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDeletestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeletestmtContext deletestmt() throws RecognitionException {
		DeletestmtContext _localctx = new DeletestmtContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_deletestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7810);
			opt_with_clause();
			setState(7811);
			match(DELETE_P);
			setState(7812);
			match(FROM);
			setState(7813);
			relation_expr_opt_alias();
			setState(7814);
			using_clause();
			setState(7815);
			where_or_current_clause();
			setState(7816);
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUsing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUsing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_using_clause);
		try {
			setState(7821);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(7818);
				match(USING);
				setState(7819);
				from_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LockstmtContext extends ParserRuleContext {
		public TerminalNode LOCK_P() { return getToken(PostgreSQLParser.LOCK_P, 0); }
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Opt_lockContext opt_lock() {
			return getRuleContext(Opt_lockContext.class,0);
		}
		public Opt_nowaitContext opt_nowait() {
			return getRuleContext(Opt_nowaitContext.class,0);
		}
		public LockstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLockstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLockstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLockstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockstmtContext lockstmt() throws RecognitionException {
		LockstmtContext _localctx = new LockstmtContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_lockstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7823);
			match(LOCK_P);
			setState(7824);
			opt_table();
			setState(7825);
			relation_expr_list();
			setState(7826);
			opt_lock();
			setState(7827);
			opt_nowait();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_lockContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public Lock_typeContext lock_type() {
			return getRuleContext(Lock_typeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(PostgreSQLParser.MODE, 0); }
		public Opt_lockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_lock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_lock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_lock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_lock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_lockContext opt_lock() throws RecognitionException {
		Opt_lockContext _localctx = new Opt_lockContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_opt_lock);
		try {
			setState(7834);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(7829);
				match(IN_P);
				setState(7830);
				lock_type();
				setState(7831);
				match(MODE);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case NOWAIT:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lock_typeContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PostgreSQLParser.EXCLUSIVE, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Lock_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLock_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLock_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLock_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_typeContext lock_type() throws RecognitionException {
		Lock_typeContext _localctx = new Lock_typeContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_lock_type);
		int _la;
		try {
			setState(7848);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(7836);
				match(ACCESS);
				setState(7837);
				_la = _input.LA(1);
				if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ROW:
				enterOuterAlt(_localctx, 2);
				{
				setState(7838);
				match(ROW);
				setState(7839);
				_la = _input.LA(1);
				if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SHARE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7840);
				match(SHARE);
				setState(7845);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UPDATE:
					{
					setState(7841);
					match(UPDATE);
					setState(7842);
					match(EXCLUSIVE);
					}
					break;
				case ROW:
					{
					setState(7843);
					match(ROW);
					setState(7844);
					match(EXCLUSIVE);
					}
					break;
				case MODE:
					break;
				default:
					break;
				}
				}
				break;
			case EXCLUSIVE:
				enterOuterAlt(_localctx, 4);
				{
				setState(7847);
				match(EXCLUSIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_nowaitContext extends ParserRuleContext {
		public TerminalNode NOWAIT() { return getToken(PostgreSQLParser.NOWAIT, 0); }
		public Opt_nowaitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_nowait; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_nowait(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_nowait(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_nowait(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_nowaitContext opt_nowait() throws RecognitionException {
		Opt_nowaitContext _localctx = new Opt_nowaitContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_opt_nowait);
		try {
			setState(7852);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOWAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(7850);
				match(NOWAIT);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_nowait_or_skipContext extends ParserRuleContext {
		public TerminalNode NOWAIT() { return getToken(PostgreSQLParser.NOWAIT, 0); }
		public TerminalNode SKIP_P() { return getToken(PostgreSQLParser.SKIP_P, 0); }
		public TerminalNode LOCKED() { return getToken(PostgreSQLParser.LOCKED, 0); }
		public Opt_nowait_or_skipContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_nowait_or_skip; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_nowait_or_skip(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_nowait_or_skip(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_nowait_or_skip(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_nowait_or_skipContext opt_nowait_or_skip() throws RecognitionException {
		Opt_nowait_or_skipContext _localctx = new Opt_nowait_or_skipContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_opt_nowait_or_skip);
		try {
			setState(7858);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOWAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(7854);
				match(NOWAIT);
				}
				break;
			case SKIP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(7855);
				match(SKIP_P);
				setState(7856);
				match(LOCKED);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UpdatestmtContext extends ParserRuleContext {
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return getRuleContext(Relation_expr_opt_aliasContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_or_current_clauseContext where_or_current_clause() {
			return getRuleContext(Where_or_current_clauseContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public UpdatestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUpdatestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUpdatestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUpdatestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdatestmtContext updatestmt() throws RecognitionException {
		UpdatestmtContext _localctx = new UpdatestmtContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_updatestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7860);
			opt_with_clause();
			setState(7861);
			match(UPDATE);
			setState(7862);
			relation_expr_opt_alias();
			setState(7863);
			match(SET);
			setState(7864);
			set_clause_list();
			setState(7865);
			from_clause();
			setState(7866);
			where_or_current_clause();
			setState(7867);
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_clause_listContext extends ParserRuleContext {
		public List<Set_clauseContext> set_clause() {
			return getRuleContexts(Set_clauseContext.class);
		}
		public Set_clauseContext set_clause(int i) {
			return getRuleContext(Set_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Set_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_clause_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_clause_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_clause_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_clause_listContext set_clause_list() throws RecognitionException {
		Set_clause_listContext _localctx = new Set_clause_listContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_set_clause_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7869);
			set_clause();
			setState(7874);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7870);
				match(COMMA);
				setState(7871);
				set_clause();
				}
				}
				setState(7876);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_clauseContext extends ParserRuleContext {
		public Set_targetContext set_target() {
			return getRuleContext(Set_targetContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Set_target_listContext set_target_list() {
			return getRuleContext(Set_target_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_clauseContext set_clause() throws RecognitionException {
		Set_clauseContext _localctx = new Set_clauseContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_set_clause);
		try {
			setState(7887);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7877);
				set_target();
				setState(7878);
				match(EQUAL);
				setState(7879);
				a_expr();
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(7881);
				match(OPEN_PAREN);
				setState(7882);
				set_target_list();
				setState(7883);
				match(CLOSE_PAREN);
				setState(7884);
				match(EQUAL);
				setState(7885);
				a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_targetContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Set_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_targetContext set_target() throws RecognitionException {
		Set_targetContext _localctx = new Set_targetContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_set_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7889);
			colid();
			setState(7890);
			opt_indirection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_target_listContext extends ParserRuleContext {
		public List<Set_targetContext> set_target() {
			return getRuleContexts(Set_targetContext.class);
		}
		public Set_targetContext set_target(int i) {
			return getRuleContext(Set_targetContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Set_target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_target_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_target_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_target_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_target_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_target_listContext set_target_list() throws RecognitionException {
		Set_target_listContext _localctx = new Set_target_listContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_set_target_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7892);
			set_target();
			setState(7897);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7893);
				match(COMMA);
				setState(7894);
				set_target();
				}
				}
				setState(7899);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeclarecursorstmtContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(PostgreSQLParser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Cursor_optionsContext cursor_options() {
			return getRuleContext(Cursor_optionsContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(PostgreSQLParser.CURSOR, 0); }
		public Opt_holdContext opt_hold() {
			return getRuleContext(Opt_holdContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public DeclarecursorstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declarecursorstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDeclarecursorstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDeclarecursorstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDeclarecursorstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclarecursorstmtContext declarecursorstmt() throws RecognitionException {
		DeclarecursorstmtContext _localctx = new DeclarecursorstmtContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_declarecursorstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7900);
			match(DECLARE);
			setState(7901);
			cursor_name();
			setState(7902);
			cursor_options();
			setState(7903);
			match(CURSOR);
			setState(7904);
			opt_hold();
			setState(7905);
			match(FOR);
			setState(7906);
			selectstmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cursor_nameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_cursor_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7908);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cursor_optionsContext extends ParserRuleContext {
		public List<TerminalNode> NO() { return getTokens(PostgreSQLParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(PostgreSQLParser.NO, i);
		}
		public List<TerminalNode> SCROLL() { return getTokens(PostgreSQLParser.SCROLL); }
		public TerminalNode SCROLL(int i) {
			return getToken(PostgreSQLParser.SCROLL, i);
		}
		public List<TerminalNode> BINARY() { return getTokens(PostgreSQLParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(PostgreSQLParser.BINARY, i);
		}
		public List<TerminalNode> INSENSITIVE() { return getTokens(PostgreSQLParser.INSENSITIVE); }
		public TerminalNode INSENSITIVE(int i) {
			return getToken(PostgreSQLParser.INSENSITIVE, i);
		}
		public Cursor_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCursor_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCursor_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCursor_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_optionsContext cursor_options() throws RecognitionException {
		Cursor_optionsContext _localctx = new Cursor_optionsContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_cursor_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7917);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==BINARY || _la==INSENSITIVE || _la==NO || _la==SCROLL) {
				{
				setState(7915);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					setState(7910);
					match(NO);
					setState(7911);
					match(SCROLL);
					}
					break;
				case SCROLL:
					{
					setState(7912);
					match(SCROLL);
					}
					break;
				case BINARY:
					{
					setState(7913);
					match(BINARY);
					}
					break;
				case INSENSITIVE:
					{
					setState(7914);
					match(INSENSITIVE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(7919);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_holdContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode HOLD() { return getToken(PostgreSQLParser.HOLD, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public Opt_holdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_hold; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_hold(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_hold(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_hold(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_holdContext opt_hold() throws RecognitionException {
		Opt_holdContext _localctx = new Opt_holdContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_opt_hold);
		try {
			setState(7925);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(7921);
				match(WITH);
				setState(7922);
				match(HOLD);
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(7923);
				match(WITHOUT);
				setState(7924);
				match(HOLD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectstmtContext extends ParserRuleContext {
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public SelectstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelectstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelectstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelectstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectstmtContext selectstmt() throws RecognitionException {
		SelectstmtContext _localctx = new SelectstmtContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_selectstmt);
		try {
			setState(7929);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7927);
				select_no_parens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7928);
				select_with_parens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_with_parensContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Select_with_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_with_parens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_with_parens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_with_parens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_with_parens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_with_parensContext select_with_parens() throws RecognitionException {
		Select_with_parensContext _localctx = new Select_with_parensContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_select_with_parens);
		try {
			setState(7939);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7931);
				match(OPEN_PAREN);
				setState(7932);
				select_no_parens();
				setState(7933);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7935);
				match(OPEN_PAREN);
				setState(7936);
				select_with_parens();
				setState(7937);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_no_parensContext extends ParserRuleContext {
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public For_locking_clauseContext for_locking_clause() {
			return getRuleContext(For_locking_clauseContext.class,0);
		}
		public Opt_select_limitContext opt_select_limit() {
			return getRuleContext(Opt_select_limitContext.class,0);
		}
		public Select_limitContext select_limit() {
			return getRuleContext(Select_limitContext.class,0);
		}
		public Opt_for_locking_clauseContext opt_for_locking_clause() {
			return getRuleContext(Opt_for_locking_clauseContext.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Select_no_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_no_parens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_no_parens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_no_parens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_no_parens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_no_parensContext select_no_parens() throws RecognitionException {
		Select_no_parensContext _localctx = new Select_no_parensContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_select_no_parens);
		try {
			setState(7962);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case VALUES:
				enterOuterAlt(_localctx, 1);
				{
				setState(7941);
				select_clause();
				setState(7942);
				opt_sort_clause();
				setState(7949);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
				case 1:
					{
					setState(7943);
					for_locking_clause();
					setState(7944);
					opt_select_limit();
					}
					break;
				case 2:
					{
					setState(7946);
					select_limit();
					setState(7947);
					opt_for_locking_clause();
					}
					break;
				}
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(7951);
				with_clause();
				setState(7952);
				select_clause();
				setState(7953);
				opt_sort_clause();
				setState(7960);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
				case 1:
					{
					setState(7954);
					for_locking_clause();
					setState(7955);
					opt_select_limit();
					}
					break;
				case 2:
					{
					setState(7957);
					select_limit();
					setState(7958);
					opt_for_locking_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_clauseContext extends ParserRuleContext {
		public Simple_selectContext simple_select() {
			return getRuleContext(Simple_selectContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_clauseContext select_clause() throws RecognitionException {
		Select_clauseContext _localctx = new Select_clauseContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_select_clause);
		try {
			setState(7966);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7964);
				simple_select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7965);
				select_with_parens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Simple_selectContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public List<Into_clauseContext> into_clause() {
			return getRuleContexts(Into_clauseContext.class);
		}
		public Into_clauseContext into_clause(int i) {
			return getRuleContext(Into_clauseContext.class,i);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Group_clauseContext group_clause() {
			return getRuleContext(Group_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public List<Select_with_parensContext> select_with_parens() {
			return getRuleContexts(Select_with_parensContext.class);
		}
		public Select_with_parensContext select_with_parens(int i) {
			return getRuleContext(Select_with_parensContext.class,i);
		}
		public List<Set_operator_with_all_or_distinctContext> set_operator_with_all_or_distinct() {
			return getRuleContexts(Set_operator_with_all_or_distinctContext.class);
		}
		public Set_operator_with_all_or_distinctContext set_operator_with_all_or_distinct(int i) {
			return getRuleContext(Set_operator_with_all_or_distinctContext.class,i);
		}
		public Opt_all_clauseContext opt_all_clause() {
			return getRuleContext(Opt_all_clauseContext.class,0);
		}
		public Opt_target_listContext opt_target_list() {
			return getRuleContext(Opt_target_listContext.class,0);
		}
		public Distinct_clauseContext distinct_clause() {
			return getRuleContext(Distinct_clauseContext.class,0);
		}
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public List<Simple_selectContext> simple_select() {
			return getRuleContexts(Simple_selectContext.class);
		}
		public Simple_selectContext simple_select(int i) {
			return getRuleContext(Simple_selectContext.class,i);
		}
		public Simple_selectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_select; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSimple_select(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSimple_select(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSimple_select(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_selectContext simple_select() throws RecognitionException {
		Simple_selectContext _localctx = new Simple_selectContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_simple_select);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7994);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(7968);
				match(SELECT);
				setState(7976);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EOF:
				case OPEN_PAREN:
				case CLOSE_PAREN:
				case SEMI:
				case STAR:
				case PLUS:
				case MINUS:
				case PARAM:
				case Operator:
				case ALL:
				case ANALYSE:
				case ANALYZE:
				case AND:
				case ARRAY:
				case CASE:
				case CAST:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case CREATE:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_ROLE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DO:
				case EXCEPT:
				case FALSE_P:
				case FETCH:
				case FOR:
				case FROM:
				case GRANT:
				case GROUP_P:
				case HAVING:
				case INTERSECT:
				case INTO:
				case LIMIT:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case NOT:
				case NULL_P:
				case OFFSET:
				case ON:
				case ORDER:
				case RETURNING:
				case SELECT:
				case SESSION_USER:
				case TABLE:
				case TRUE_P:
				case UNION:
				case UNIQUE:
				case USER:
				case WHERE:
				case WINDOW:
				case WITH:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER_P:
				case IS:
				case ISNULL:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER_P:
				case OVER:
				case OVERLAPS:
				case RIGHT:
				case SIMILAR:
				case VERBOSE:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MERGE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case END_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case TABLESAMPLE:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case LOOP:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case BinaryStringConstant:
				case HexadecimalStringConstant:
				case Integral:
				case Numeric:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
				case MetaCommand:
				case EscapeStringConstant:
					{
					setState(7969);
					opt_all_clause();
					setState(7970);
					into_clause();
					setState(7971);
					opt_target_list();
					}
					break;
				case DISTINCT:
					{
					setState(7973);
					distinct_clause();
					setState(7974);
					target_list();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7978);
				into_clause();
				setState(7979);
				from_clause();
				setState(7980);
				where_clause();
				setState(7981);
				group_clause();
				setState(7982);
				having_clause();
				setState(7983);
				window_clause();
				}
				break;
			case VALUES:
				{
				setState(7985);
				values_clause();
				}
				break;
			case TABLE:
				{
				setState(7986);
				match(TABLE);
				setState(7987);
				relation_expr();
				}
				break;
			case OPEN_PAREN:
				{
				setState(7988);
				select_with_parens();
				setState(7989);
				set_operator_with_all_or_distinct();
				setState(7992);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
				case 1:
					{
					setState(7990);
					simple_select();
					}
					break;
				case 2:
					{
					setState(7991);
					select_with_parens();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8003);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,426,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7996);
					set_operator_with_all_or_distinct();
					setState(7999);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
					case 1:
						{
						setState(7997);
						simple_select();
						}
						break;
					case 2:
						{
						setState(7998);
						select_with_parens();
						}
						break;
					}
					}
					} 
				}
				setState(8005);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,426,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_operatorContext extends ParserRuleContext {
		public Set_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_operator; }
	 
		public Set_operatorContext() { }
		public void copyFrom(Set_operatorContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IntersectContext extends Set_operatorContext {
		public TerminalNode INTERSECT() { return getToken(PostgreSQLParser.INTERSECT, 0); }
		public IntersectContext(Set_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIntersect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIntersect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIntersect(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ExceptContext extends Set_operatorContext {
		public TerminalNode EXCEPT() { return getToken(PostgreSQLParser.EXCEPT, 0); }
		public ExceptContext(Set_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExcept(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExcept(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExcept(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UnionContext extends Set_operatorContext {
		public TerminalNode UNION() { return getToken(PostgreSQLParser.UNION, 0); }
		public UnionContext(Set_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUnion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUnion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUnion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_operatorContext set_operator() throws RecognitionException {
		Set_operatorContext _localctx = new Set_operatorContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_set_operator);
		try {
			setState(8009);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				_localctx = new UnionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(8006);
				match(UNION);
				}
				break;
			case INTERSECT:
				_localctx = new IntersectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(8007);
				match(INTERSECT);
				}
				break;
			case EXCEPT:
				_localctx = new ExceptContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(8008);
				match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_operator_with_all_or_distinctContext extends ParserRuleContext {
		public Set_operatorContext set_operator() {
			return getRuleContext(Set_operatorContext.class,0);
		}
		public All_or_distinctContext all_or_distinct() {
			return getRuleContext(All_or_distinctContext.class,0);
		}
		public Set_operator_with_all_or_distinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_operator_with_all_or_distinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_operator_with_all_or_distinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_operator_with_all_or_distinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_operator_with_all_or_distinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_operator_with_all_or_distinctContext set_operator_with_all_or_distinct() throws RecognitionException {
		Set_operator_with_all_or_distinctContext _localctx = new Set_operator_with_all_or_distinctContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_set_operator_with_all_or_distinct);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8011);
			set_operator();
			setState(8012);
			all_or_distinct();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class With_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Cte_listContext cte_list() {
			return getRuleContext(Cte_listContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLParser.RECURSIVE, 0); }
		public With_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWith_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWith_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWith_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_clauseContext with_clause() throws RecognitionException {
		With_clauseContext _localctx = new With_clauseContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_with_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8014);
			match(WITH);
			setState(8016);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				setState(8015);
				match(RECURSIVE);
				}
				break;
			}
			setState(8018);
			cte_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cte_listContext extends ParserRuleContext {
		public List<Common_table_exprContext> common_table_expr() {
			return getRuleContexts(Common_table_exprContext.class);
		}
		public Common_table_exprContext common_table_expr(int i) {
			return getRuleContext(Common_table_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Cte_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cte_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCte_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCte_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCte_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cte_listContext cte_list() throws RecognitionException {
		Cte_listContext _localctx = new Cte_listContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_cte_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8020);
			common_table_expr();
			setState(8025);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8021);
				match(COMMA);
				setState(8022);
				common_table_expr();
				}
				}
				setState(8027);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Common_table_exprContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Opt_materializedContext opt_materialized() {
			return getRuleContext(Opt_materializedContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public PreparablestmtContext preparablestmt() {
			return getRuleContext(PreparablestmtContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Common_table_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_table_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCommon_table_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCommon_table_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCommon_table_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_table_exprContext common_table_expr() throws RecognitionException {
		Common_table_exprContext _localctx = new Common_table_exprContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_common_table_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8028);
			name();
			setState(8029);
			opt_name_list();
			setState(8030);
			match(AS);
			setState(8031);
			opt_materialized();
			setState(8032);
			match(OPEN_PAREN);
			setState(8033);
			preparablestmt();
			setState(8034);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_materializedContext extends ParserRuleContext {
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public Opt_materializedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_materialized; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_materialized(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_materialized(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_materialized(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_materializedContext opt_materialized() throws RecognitionException {
		Opt_materializedContext _localctx = new Opt_materializedContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_opt_materialized);
		try {
			setState(8040);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MATERIALIZED:
				enterOuterAlt(_localctx, 1);
				{
				setState(8036);
				match(MATERIALIZED);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8037);
				match(NOT);
				setState(8038);
				match(MATERIALIZED);
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_with_clauseContext extends ParserRuleContext {
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Opt_with_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_with_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_with_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_with_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_with_clauseContext opt_with_clause() throws RecognitionException {
		Opt_with_clauseContext _localctx = new Opt_with_clauseContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_opt_with_clause);
		try {
			setState(8044);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(8042);
				with_clause();
				}
				break;
			case DELETE_P:
			case INSERT:
			case UPDATE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Opt_strictContext opt_strict() {
			return getRuleContext(Opt_strictContext.class,0);
		}
		public OpttempTableNameContext opttempTableName() {
			return getRuleContext(OpttempTableNameContext.class,0);
		}
		public Into_targetContext into_target() {
			return getRuleContext(Into_targetContext.class,0);
		}
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInto_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInto_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_into_clause);
		try {
			setState(8054);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8046);
				match(INTO);
				setState(8051);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
				case 1:
					{
					setState(8047);
					opt_strict();
					setState(8048);
					opttempTableName();
					}
					break;
				case 2:
					{
					setState(8050);
					into_target();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_strictContext extends ParserRuleContext {
		public TerminalNode STRICT_P() { return getToken(PostgreSQLParser.STRICT_P, 0); }
		public Opt_strictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_strict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_strict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_strict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_strict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_strictContext opt_strict() throws RecognitionException {
		Opt_strictContext _localctx = new Opt_strictContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_opt_strict);
		try {
			setState(8058);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8057);
				match(STRICT_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpttempTableNameContext extends ParserRuleContext {
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public OpttempTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttempTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttempTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttempTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttempTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttempTableNameContext opttempTableName() throws RecognitionException {
		OpttempTableNameContext _localctx = new OpttempTableNameContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_opttempTableName);
		int _la;
		try {
			setState(8074);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==LOCAL) {
					{
					setState(8060);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(8063);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8064);
				opt_table();
				setState(8065);
				qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8067);
				match(UNLOGGED);
				setState(8068);
				opt_table();
				setState(8069);
				qualified_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8071);
				match(TABLE);
				setState(8072);
				qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8073);
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_tableContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Opt_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_tableContext opt_table() throws RecognitionException {
		Opt_tableContext _localctx = new Opt_tableContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_opt_table);
		try {
			setState(8078);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8076);
				match(TABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class All_or_distinctContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public All_or_distinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_or_distinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAll_or_distinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAll_or_distinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAll_or_distinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_or_distinctContext all_or_distinct() throws RecognitionException {
		All_or_distinctContext _localctx = new All_or_distinctContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_all_or_distinct);
		try {
			setState(8083);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8080);
				match(ALL);
				}
				break;
			case DISTINCT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8081);
				match(DISTINCT);
				}
				break;
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case VALUES:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Distinct_clauseContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Distinct_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinct_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDistinct_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDistinct_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDistinct_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Distinct_clauseContext distinct_clause() throws RecognitionException {
		Distinct_clauseContext _localctx = new Distinct_clauseContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_distinct_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8085);
			match(DISTINCT);
			setState(8091);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(8086);
				match(ON);
				setState(8087);
				match(OPEN_PAREN);
				setState(8088);
				expr_list();
				setState(8089);
				match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_all_clauseContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Opt_all_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_all_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_all_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_all_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_all_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_all_clauseContext opt_all_clause() throws RecognitionException {
		Opt_all_clauseContext _localctx = new Opt_all_clauseContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_opt_all_clause);
		try {
			setState(8095);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8093);
				match(ALL);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case STAR:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case WHERE:
			case WINDOW:
			case WITH:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case LOOP:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_sort_clauseContext extends ParserRuleContext {
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public Opt_sort_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_sort_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_sort_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_sort_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_sort_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_sort_clauseContext opt_sort_clause() throws RecognitionException {
		Opt_sort_clauseContext _localctx = new Opt_sort_clauseContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_opt_sort_clause);
		try {
			setState(8099);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(8097);
				sort_clause();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case RANGE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case ROWS:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case GROUPS:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sort_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Sortby_listContext sortby_list() {
			return getRuleContext(Sortby_listContext.class,0);
		}
		public Sort_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSort_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSort_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSort_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sort_clauseContext sort_clause() throws RecognitionException {
		Sort_clauseContext _localctx = new Sort_clauseContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_sort_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8101);
			match(ORDER);
			setState(8102);
			match(BY);
			setState(8103);
			sortby_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sortby_listContext extends ParserRuleContext {
		public List<SortbyContext> sortby() {
			return getRuleContexts(SortbyContext.class);
		}
		public SortbyContext sortby(int i) {
			return getRuleContext(SortbyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Sortby_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSortby_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSortby_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSortby_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sortby_listContext sortby_list() throws RecognitionException {
		Sortby_listContext _localctx = new Sortby_listContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_sortby_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8105);
			sortby();
			setState(8110);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8106);
				match(COMMA);
				setState(8107);
				sortby();
				}
				}
				setState(8112);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SortbyContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_nulls_orderContext opt_nulls_order() {
			return getRuleContext(Opt_nulls_orderContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Qual_all_opContext qual_all_op() {
			return getRuleContext(Qual_all_opContext.class,0);
		}
		public Opt_asc_descContext opt_asc_desc() {
			return getRuleContext(Opt_asc_descContext.class,0);
		}
		public SortbyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSortby(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSortby(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSortby(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortbyContext sortby() throws RecognitionException {
		SortbyContext _localctx = new SortbyContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_sortby);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8113);
			a_expr();
			setState(8117);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				{
				setState(8114);
				match(USING);
				setState(8115);
				qual_all_op();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case ASC:
			case CREATE:
			case DESC:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case NULLS_P:
			case PREPARE:
			case RANGE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case ROWS:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case GROUPS:
			case LOOP:
			case MetaCommand:
				{
				setState(8116);
				opt_asc_desc();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8119);
			opt_nulls_order();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_limitContext extends ParserRuleContext {
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public Select_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_limit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_limit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_limit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_limit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_limitContext select_limit() throws RecognitionException {
		Select_limitContext _localctx = new Select_limitContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_select_limit);
		int _la;
		try {
			setState(8129);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FETCH:
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8121);
				limit_clause();
				setState(8123);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OFFSET) {
					{
					setState(8122);
					offset_clause();
					}
				}

				}
				break;
			case OFFSET:
				enterOuterAlt(_localctx, 2);
				{
				setState(8125);
				offset_clause();
				setState(8127);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
				case 1:
					{
					setState(8126);
					limit_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_select_limitContext extends ParserRuleContext {
		public Select_limitContext select_limit() {
			return getRuleContext(Select_limitContext.class,0);
		}
		public Opt_select_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_select_limit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_select_limit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_select_limit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_select_limit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_select_limitContext opt_select_limit() throws RecognitionException {
		Opt_select_limitContext _localctx = new Opt_select_limitContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_opt_select_limit);
		try {
			setState(8133);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8131);
				select_limit();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Limit_clauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public Select_limit_valueContext select_limit_value() {
			return getRuleContext(Select_limit_valueContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Select_offset_valueContext select_offset_value() {
			return getRuleContext(Select_offset_valueContext.class,0);
		}
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public First_or_nextContext first_or_next() {
			return getRuleContext(First_or_nextContext.class,0);
		}
		public Select_fetch_first_valueContext select_fetch_first_value() {
			return getRuleContext(Select_fetch_first_valueContext.class,0);
		}
		public Row_or_rowsContext row_or_rows() {
			return getRuleContext(Row_or_rowsContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLParser.TIES, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLimit_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLimit_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLimit_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_limit_clause);
		int _la;
		try {
			setState(8158);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8135);
				match(LIMIT);
				setState(8136);
				select_limit_value();
				setState(8139);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(8137);
					match(COMMA);
					setState(8138);
					select_offset_value();
					}
				}

				}
				break;
			case FETCH:
				enterOuterAlt(_localctx, 2);
				{
				setState(8141);
				match(FETCH);
				setState(8142);
				first_or_next();
				setState(8156);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
				case 1:
					{
					setState(8143);
					select_fetch_first_value();
					setState(8144);
					row_or_rows();
					setState(8148);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ONLY:
						{
						setState(8145);
						match(ONLY);
						}
						break;
					case WITH:
						{
						setState(8146);
						match(WITH);
						setState(8147);
						match(TIES);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 2:
					{
					setState(8150);
					row_or_rows();
					setState(8154);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ONLY:
						{
						setState(8151);
						match(ONLY);
						}
						break;
					case WITH:
						{
						setState(8152);
						match(WITH);
						setState(8153);
						match(TIES);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Offset_clauseContext extends ParserRuleContext {
		public TerminalNode OFFSET() { return getToken(PostgreSQLParser.OFFSET, 0); }
		public Select_offset_valueContext select_offset_value() {
			return getRuleContext(Select_offset_valueContext.class,0);
		}
		public Select_fetch_first_valueContext select_fetch_first_value() {
			return getRuleContext(Select_fetch_first_valueContext.class,0);
		}
		public Row_or_rowsContext row_or_rows() {
			return getRuleContext(Row_or_rowsContext.class,0);
		}
		public Offset_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offset_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOffset_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOffset_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOffset_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Offset_clauseContext offset_clause() throws RecognitionException {
		Offset_clauseContext _localctx = new Offset_clauseContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_offset_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8160);
			match(OFFSET);
			setState(8165);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
			case 1:
				{
				setState(8161);
				select_offset_value();
				}
				break;
			case 2:
				{
				setState(8162);
				select_fetch_first_value();
				setState(8163);
				row_or_rows();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_limit_valueContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Select_limit_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_limit_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_limit_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_limit_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_limit_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_limit_valueContext select_limit_value() throws RecognitionException {
		Select_limit_valueContext _localctx = new Select_limit_valueContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_select_limit_value);
		try {
			setState(8169);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(8167);
				a_expr();
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8168);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_offset_valueContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Select_offset_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_offset_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_offset_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_offset_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_offset_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_offset_valueContext select_offset_value() throws RecognitionException {
		Select_offset_valueContext _localctx = new Select_offset_valueContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_select_offset_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8171);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_fetch_first_valueContext extends ParserRuleContext {
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public I_or_f_constContext i_or_f_const() {
			return getRuleContext(I_or_f_constContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public Select_fetch_first_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_fetch_first_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_fetch_first_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_fetch_first_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_fetch_first_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_fetch_first_valueContext select_fetch_first_value() throws RecognitionException {
		Select_fetch_first_valueContext _localctx = new Select_fetch_first_valueContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_select_fetch_first_value);
		try {
			setState(8178);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PARAM:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(8173);
				c_expr();
				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(8174);
				match(PLUS);
				setState(8175);
				i_or_f_const();
				}
				break;
			case MINUS:
				enterOuterAlt(_localctx, 3);
				{
				setState(8176);
				match(MINUS);
				setState(8177);
				i_or_f_const();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class I_or_f_constContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public FconstContext fconst() {
			return getRuleContext(FconstContext.class,0);
		}
		public I_or_f_constContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_i_or_f_const; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterI_or_f_const(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitI_or_f_const(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitI_or_f_const(this);
			else return visitor.visitChildren(this);
		}
	}

	public final I_or_f_constContext i_or_f_const() throws RecognitionException {
		I_or_f_constContext _localctx = new I_or_f_constContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_i_or_f_const);
		try {
			setState(8182);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Integral:
				enterOuterAlt(_localctx, 1);
				{
				setState(8180);
				iconst();
				}
				break;
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(8181);
				fconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Row_or_rowsContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public Row_or_rowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_or_rows; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRow_or_rows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRow_or_rows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRow_or_rows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_or_rowsContext row_or_rows() throws RecognitionException {
		Row_or_rowsContext _localctx = new Row_or_rowsContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_row_or_rows);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8184);
			_la = _input.LA(1);
			if ( !(_la==ROWS || _la==ROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class First_or_nextContext extends ParserRuleContext {
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public First_or_nextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_or_next; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFirst_or_next(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFirst_or_next(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFirst_or_next(this);
			else return visitor.visitChildren(this);
		}
	}

	public final First_or_nextContext first_or_next() throws RecognitionException {
		First_or_nextContext _localctx = new First_or_nextContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_first_or_next);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8186);
			_la = _input.LA(1);
			if ( !(_la==FIRST_P || _la==NEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Group_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Group_by_listContext group_by_list() {
			return getRuleContext(Group_by_listContext.class,0);
		}
		public Group_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGroup_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGroup_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGroup_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_clauseContext group_clause() throws RecognitionException {
		Group_clauseContext _localctx = new Group_clauseContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_group_clause);
		try {
			setState(8192);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GROUP_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(8188);
				match(GROUP_P);
				setState(8189);
				match(BY);
				setState(8190);
				group_by_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Group_by_listContext extends ParserRuleContext {
		public List<Group_by_itemContext> group_by_item() {
			return getRuleContexts(Group_by_itemContext.class);
		}
		public Group_by_itemContext group_by_item(int i) {
			return getRuleContext(Group_by_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Group_by_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGroup_by_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGroup_by_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGroup_by_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_listContext group_by_list() throws RecognitionException {
		Group_by_listContext _localctx = new Group_by_listContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_group_by_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8194);
			group_by_item();
			setState(8199);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,458,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8195);
					match(COMMA);
					setState(8196);
					group_by_item();
					}
					} 
				}
				setState(8201);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,458,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Group_by_itemContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Empty_grouping_setContext empty_grouping_set() {
			return getRuleContext(Empty_grouping_setContext.class,0);
		}
		public Cube_clauseContext cube_clause() {
			return getRuleContext(Cube_clauseContext.class,0);
		}
		public Rollup_clauseContext rollup_clause() {
			return getRuleContext(Rollup_clauseContext.class,0);
		}
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGroup_by_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGroup_by_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGroup_by_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_itemContext group_by_item() throws RecognitionException {
		Group_by_itemContext _localctx = new Group_by_itemContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_group_by_item);
		try {
			setState(8207);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8202);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8203);
				empty_grouping_set();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8204);
				cube_clause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8205);
				rollup_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8206);
				grouping_sets_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Empty_grouping_setContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Empty_grouping_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_empty_grouping_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEmpty_grouping_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEmpty_grouping_set(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEmpty_grouping_set(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Empty_grouping_setContext empty_grouping_set() throws RecognitionException {
		Empty_grouping_setContext _localctx = new Empty_grouping_setContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_empty_grouping_set);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8209);
			match(OPEN_PAREN);
			setState(8210);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rollup_clauseContext extends ParserRuleContext {
		public TerminalNode ROLLUP() { return getToken(PostgreSQLParser.ROLLUP, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Rollup_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRollup_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRollup_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRollup_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollup_clauseContext rollup_clause() throws RecognitionException {
		Rollup_clauseContext _localctx = new Rollup_clauseContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_rollup_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8212);
			match(ROLLUP);
			setState(8213);
			match(OPEN_PAREN);
			setState(8214);
			expr_list();
			setState(8215);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cube_clauseContext extends ParserRuleContext {
		public TerminalNode CUBE() { return getToken(PostgreSQLParser.CUBE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cube_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCube_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCube_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCube_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cube_clauseContext cube_clause() throws RecognitionException {
		Cube_clauseContext _localctx = new Cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_cube_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8217);
			match(CUBE);
			setState(8218);
			match(OPEN_PAREN);
			setState(8219);
			expr_list();
			setState(8220);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(PostgreSQLParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(PostgreSQLParser.SETS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Group_by_listContext group_by_list() {
			return getRuleContext(Group_by_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrouping_sets_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrouping_sets_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrouping_sets_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_grouping_sets_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8222);
			match(GROUPING);
			setState(8223);
			match(SETS);
			setState(8224);
			match(OPEN_PAREN);
			setState(8225);
			group_by_list();
			setState(8226);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(PostgreSQLParser.HAVING, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_having_clause);
		try {
			setState(8231);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HAVING:
				enterOuterAlt(_localctx, 1);
				{
				setState(8228);
				match(HAVING);
				setState(8229);
				a_expr();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_locking_clauseContext extends ParserRuleContext {
		public For_locking_itemsContext for_locking_items() {
			return getRuleContext(For_locking_itemsContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public For_locking_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_locking_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_locking_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_locking_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_clauseContext for_locking_clause() throws RecognitionException {
		For_locking_clauseContext _localctx = new For_locking_clauseContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_for_locking_clause);
		try {
			setState(8237);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8233);
				for_locking_items();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8234);
				match(FOR);
				setState(8235);
				match(READ);
				setState(8236);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_for_locking_clauseContext extends ParserRuleContext {
		public For_locking_clauseContext for_locking_clause() {
			return getRuleContext(For_locking_clauseContext.class,0);
		}
		public Opt_for_locking_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_for_locking_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_for_locking_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_for_locking_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_for_locking_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_for_locking_clauseContext opt_for_locking_clause() throws RecognitionException {
		Opt_for_locking_clauseContext _localctx = new Opt_for_locking_clauseContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_opt_for_locking_clause);
		try {
			setState(8241);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(8239);
				for_locking_clause();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_locking_itemsContext extends ParserRuleContext {
		public List<For_locking_itemContext> for_locking_item() {
			return getRuleContexts(For_locking_itemContext.class);
		}
		public For_locking_itemContext for_locking_item(int i) {
			return getRuleContext(For_locking_itemContext.class,i);
		}
		public For_locking_itemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_items; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_locking_items(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_locking_items(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_locking_items(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_itemsContext for_locking_items() throws RecognitionException {
		For_locking_itemsContext _localctx = new For_locking_itemsContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_for_locking_items);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8244); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(8243);
				for_locking_item();
				}
				}
				setState(8246); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==FOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_locking_itemContext extends ParserRuleContext {
		public For_locking_strengthContext for_locking_strength() {
			return getRuleContext(For_locking_strengthContext.class,0);
		}
		public Locked_rels_listContext locked_rels_list() {
			return getRuleContext(Locked_rels_listContext.class,0);
		}
		public Opt_nowait_or_skipContext opt_nowait_or_skip() {
			return getRuleContext(Opt_nowait_or_skipContext.class,0);
		}
		public For_locking_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_locking_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_locking_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_locking_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_itemContext for_locking_item() throws RecognitionException {
		For_locking_itemContext _localctx = new For_locking_itemContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_for_locking_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8248);
			for_locking_strength();
			setState(8249);
			locked_rels_list();
			setState(8250);
			opt_nowait_or_skip();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_locking_strengthContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLParser.SHARE, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public For_locking_strengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_strength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_locking_strength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_locking_strength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_locking_strength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_strengthContext for_locking_strength() throws RecognitionException {
		For_locking_strengthContext _localctx = new For_locking_strengthContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_for_locking_strength);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8252);
			match(FOR);
			setState(8262);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
			case UPDATE:
				{
				setState(8255);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(8253);
					match(NO);
					setState(8254);
					match(KEY);
					}
				}

				setState(8257);
				match(UPDATE);
				}
				break;
			case KEY:
			case SHARE:
				{
				setState(8259);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KEY) {
					{
					setState(8258);
					match(KEY);
					}
				}

				setState(8261);
				match(SHARE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Locked_rels_listContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public Locked_rels_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_locked_rels_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLocked_rels_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLocked_rels_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLocked_rels_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Locked_rels_listContext locked_rels_list() throws RecognitionException {
		Locked_rels_listContext _localctx = new Locked_rels_listContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_locked_rels_list);
		try {
			setState(8267);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OF:
				enterOuterAlt(_localctx, 1);
				{
				setState(8264);
				match(OF);
				setState(8265);
				qualified_name_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case NOWAIT:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case SKIP_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<Expr_listContext> expr_list() {
			return getRuleContexts(Expr_listContext.class);
		}
		public Expr_listContext expr_list(int i) {
			return getRuleContext(Expr_listContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitValues_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitValues_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_values_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8269);
			match(VALUES);
			setState(8270);
			match(OPEN_PAREN);
			setState(8271);
			expr_list();
			setState(8272);
			match(CLOSE_PAREN);
			setState(8280);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8273);
				match(COMMA);
				setState(8274);
				match(OPEN_PAREN);
				setState(8275);
				expr_list();
				setState(8276);
				match(CLOSE_PAREN);
				}
				}
				setState(8282);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_from_clause);
		try {
			setState(8286);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
				enterOuterAlt(_localctx, 1);
				{
				setState(8283);
				match(FROM);
				setState(8284);
				from_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class From_listContext extends ParserRuleContext {
		public Non_ansi_joinContext non_ansi_join() {
			return getRuleContext(Non_ansi_joinContext.class,0);
		}
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public From_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrom_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrom_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrom_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_listContext from_list() throws RecognitionException {
		From_listContext _localctx = new From_listContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_from_list);
		try {
			int _alt;
			setState(8297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8288);
				non_ansi_join();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8289);
				table_ref();
				setState(8294);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(8290);
						match(COMMA);
						setState(8291);
						table_ref();
						}
						} 
					}
					setState(8296);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Non_ansi_joinContext extends ParserRuleContext {
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Non_ansi_joinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_ansi_join; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNon_ansi_join(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNon_ansi_join(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNon_ansi_join(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_ansi_joinContext non_ansi_join() throws RecognitionException {
		Non_ansi_joinContext _localctx = new Non_ansi_joinContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_non_ansi_join);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8299);
			table_ref();
			setState(8302); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(8300);
					match(COMMA);
					setState(8301);
					table_ref();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8304); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,472,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_refContext extends ParserRuleContext {
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Opt_alias_clauseContext opt_alias_clause() {
			return getRuleContext(Opt_alias_clauseContext.class,0);
		}
		public Func_tableContext func_table() {
			return getRuleContext(Func_tableContext.class,0);
		}
		public Func_alias_clauseContext func_alias_clause() {
			return getRuleContext(Func_alias_clauseContext.class,0);
		}
		public XmltableContext xmltable() {
			return getRuleContext(XmltableContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode LATERAL_P() { return getToken(PostgreSQLParser.LATERAL_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> CROSS() { return getTokens(PostgreSQLParser.CROSS); }
		public TerminalNode CROSS(int i) {
			return getToken(PostgreSQLParser.CROSS, i);
		}
		public List<TerminalNode> JOIN() { return getTokens(PostgreSQLParser.JOIN); }
		public TerminalNode JOIN(int i) {
			return getToken(PostgreSQLParser.JOIN, i);
		}
		public List<TerminalNode> NATURAL() { return getTokens(PostgreSQLParser.NATURAL); }
		public TerminalNode NATURAL(int i) {
			return getToken(PostgreSQLParser.NATURAL, i);
		}
		public List<Join_qualContext> join_qual() {
			return getRuleContexts(Join_qualContext.class);
		}
		public Join_qualContext join_qual(int i) {
			return getRuleContext(Join_qualContext.class,i);
		}
		public Tablesample_clauseContext tablesample_clause() {
			return getRuleContext(Tablesample_clauseContext.class,0);
		}
		public List<Join_typeContext> join_type() {
			return getRuleContexts(Join_typeContext.class);
		}
		public Join_typeContext join_type(int i) {
			return getRuleContext(Join_typeContext.class,i);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_table_ref);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8355);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				{
				setState(8306);
				relation_expr();
				setState(8307);
				opt_alias_clause();
				setState(8309);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLESAMPLE) {
					{
					setState(8308);
					tablesample_clause();
					}
				}

				}
				break;
			case 2:
				{
				setState(8311);
				func_table();
				setState(8312);
				func_alias_clause();
				}
				break;
			case 3:
				{
				setState(8314);
				xmltable();
				setState(8315);
				opt_alias_clause();
				}
				break;
			case 4:
				{
				setState(8317);
				select_with_parens();
				setState(8318);
				opt_alias_clause();
				}
				break;
			case 5:
				{
				setState(8320);
				match(LATERAL_P);
				setState(8330);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
				case 1:
					{
					setState(8321);
					xmltable();
					setState(8322);
					opt_alias_clause();
					}
					break;
				case 2:
					{
					setState(8324);
					func_table();
					setState(8325);
					func_alias_clause();
					}
					break;
				case 3:
					{
					setState(8327);
					select_with_parens();
					setState(8328);
					opt_alias_clause();
					}
					break;
				}
				}
				break;
			case 6:
				{
				setState(8332);
				match(OPEN_PAREN);
				setState(8333);
				table_ref();
				setState(8350);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CROSS:
					{
					setState(8334);
					match(CROSS);
					setState(8335);
					match(JOIN);
					setState(8336);
					table_ref();
					}
					break;
				case NATURAL:
					{
					setState(8337);
					match(NATURAL);
					setState(8339);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 8261L) != 0)) {
						{
						setState(8338);
						join_type();
						}
					}

					setState(8341);
					match(JOIN);
					setState(8342);
					table_ref();
					}
					break;
				case FULL:
				case INNER_P:
				case JOIN:
				case LEFT:
				case RIGHT:
					{
					setState(8344);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 8261L) != 0)) {
						{
						setState(8343);
						join_type();
						}
					}

					setState(8346);
					match(JOIN);
					setState(8347);
					table_ref();
					setState(8348);
					join_qual();
					}
					break;
				case CLOSE_PAREN:
					break;
				default:
					break;
				}
				setState(8352);
				match(CLOSE_PAREN);
				setState(8353);
				opt_alias_clause();
				}
				break;
			}
			setState(8375);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,482,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(8373);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CROSS:
						{
						setState(8357);
						match(CROSS);
						setState(8358);
						match(JOIN);
						setState(8359);
						table_ref();
						}
						break;
					case NATURAL:
						{
						setState(8360);
						match(NATURAL);
						setState(8362);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 8261L) != 0)) {
							{
							setState(8361);
							join_type();
							}
						}

						setState(8364);
						match(JOIN);
						setState(8365);
						table_ref();
						}
						break;
					case FULL:
					case INNER_P:
					case JOIN:
					case LEFT:
					case RIGHT:
						{
						setState(8367);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 8261L) != 0)) {
							{
							setState(8366);
							join_type();
							}
						}

						setState(8369);
						match(JOIN);
						setState(8370);
						table_ref();
						setState(8371);
						join_qual();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(8377);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,482,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alias_clauseContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Alias_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlias_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlias_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlias_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alias_clauseContext alias_clause() throws RecognitionException {
		Alias_clauseContext _localctx = new Alias_clauseContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_alias_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(8378);
				match(AS);
				}
			}

			setState(8381);
			colid();
			setState(8386);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				{
				setState(8382);
				match(OPEN_PAREN);
				setState(8383);
				name_list();
				setState(8384);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_alias_clauseContext extends ParserRuleContext {
		public Table_alias_clauseContext table_alias_clause() {
			return getRuleContext(Table_alias_clauseContext.class,0);
		}
		public Opt_alias_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_alias_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_alias_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_alias_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_alias_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_alias_clauseContext opt_alias_clause() throws RecognitionException {
		Opt_alias_clauseContext _localctx = new Opt_alias_clauseContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_opt_alias_clause);
		try {
			setState(8390);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8388);
				table_alias_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_alias_clauseContext extends ParserRuleContext {
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Table_alias_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_alias_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_alias_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_alias_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_alias_clauseContext table_alias_clause() throws RecognitionException {
		Table_alias_clauseContext _localctx = new Table_alias_clauseContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_table_alias_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8393);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(8392);
				match(AS);
				}
			}

			setState(8395);
			table_alias();
			setState(8400);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
			case 1:
				{
				setState(8396);
				match(OPEN_PAREN);
				setState(8397);
				name_list();
				setState(8398);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_alias_clauseContext extends ParserRuleContext {
		public Alias_clauseContext alias_clause() {
			return getRuleContext(Alias_clauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TablefuncelementlistContext tablefuncelementlist() {
			return getRuleContext(TablefuncelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Func_alias_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_alias_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_alias_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_alias_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_alias_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_alias_clauseContext func_alias_clause() throws RecognitionException {
		Func_alias_clauseContext _localctx = new Func_alias_clauseContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_func_alias_clause);
		int _la;
		try {
			setState(8415);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8402);
				alias_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8408);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AS:
					{
					setState(8403);
					match(AS);
					setState(8405);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2459027012145119232L) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & -113665638399L) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & -1L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -9663676417L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -1L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -1152925902653358081L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -8796764110849L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -1L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & 432345718846390271L) != 0)) {
						{
						setState(8404);
						colid();
						}
					}

					}
					break;
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case IS:
				case LEFT:
				case OUTER_P:
				case OVER:
				case RIGHT:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					setState(8407);
					colid();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8410);
				match(OPEN_PAREN);
				setState(8411);
				tablefuncelementlist();
				setState(8412);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Join_typeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(PostgreSQLParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLParser.RIGHT, 0); }
		public TerminalNode INNER_P() { return getToken(PostgreSQLParser.INNER_P, 0); }
		public TerminalNode OUTER_P() { return getToken(PostgreSQLParser.OUTER_P, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterJoin_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitJoin_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitJoin_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_typeContext join_type() throws RecognitionException {
		Join_typeContext _localctx = new Join_typeContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8417);
			_la = _input.LA(1);
			if ( !(((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 8261L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8419);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER_P) {
				{
				setState(8418);
				match(OUTER_P);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Join_qualContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Join_qualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_qual; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterJoin_qual(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitJoin_qual(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitJoin_qual(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_qualContext join_qual() throws RecognitionException {
		Join_qualContext _localctx = new Join_qualContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_join_qual);
		try {
			setState(8428);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(8421);
				match(USING);
				setState(8422);
				match(OPEN_PAREN);
				setState(8423);
				name_list();
				setState(8424);
				match(CLOSE_PAREN);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(8426);
				match(ON);
				setState(8427);
				a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Relation_exprContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Relation_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRelation_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRelation_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRelation_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_exprContext relation_expr() throws RecognitionException {
		Relation_exprContext _localctx = new Relation_exprContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_relation_expr);
		int _la;
		try {
			setState(8442);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(8430);
				qualified_name();
				setState(8432);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STAR) {
					{
					setState(8431);
					match(STAR);
					}
				}

				}
				break;
			case ONLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(8434);
				match(ONLY);
				setState(8440);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case IS:
				case LEFT:
				case OUTER_P:
				case OVER:
				case RIGHT:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					setState(8435);
					qualified_name();
					}
					break;
				case OPEN_PAREN:
					{
					setState(8436);
					match(OPEN_PAREN);
					setState(8437);
					qualified_name();
					setState(8438);
					match(CLOSE_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Relation_expr_listContext extends ParserRuleContext {
		public List<Relation_exprContext> relation_expr() {
			return getRuleContexts(Relation_exprContext.class);
		}
		public Relation_exprContext relation_expr(int i) {
			return getRuleContext(Relation_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Relation_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRelation_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRelation_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRelation_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_expr_listContext relation_expr_list() throws RecognitionException {
		Relation_expr_listContext _localctx = new Relation_expr_listContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_relation_expr_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8444);
			relation_expr();
			setState(8449);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8445);
				match(COMMA);
				setState(8446);
				relation_expr();
				}
				}
				setState(8451);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Relation_expr_opt_aliasContext extends ParserRuleContext {
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Relation_expr_opt_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr_opt_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRelation_expr_opt_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRelation_expr_opt_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRelation_expr_opt_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_expr_opt_aliasContext relation_expr_opt_alias() throws RecognitionException {
		Relation_expr_opt_aliasContext _localctx = new Relation_expr_opt_aliasContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_relation_expr_opt_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8452);
			relation_expr();
			setState(8457);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
			case 1:
				{
				setState(8454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(8453);
					match(AS);
					}
				}

				setState(8456);
				colid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Tablesample_clauseContext extends ParserRuleContext {
		public TerminalNode TABLESAMPLE() { return getToken(PostgreSQLParser.TABLESAMPLE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_repeatable_clauseContext opt_repeatable_clause() {
			return getRuleContext(Opt_repeatable_clauseContext.class,0);
		}
		public Tablesample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablesample_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablesample_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablesample_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablesample_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tablesample_clauseContext tablesample_clause() throws RecognitionException {
		Tablesample_clauseContext _localctx = new Tablesample_clauseContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_tablesample_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8459);
			match(TABLESAMPLE);
			setState(8460);
			func_name();
			setState(8461);
			match(OPEN_PAREN);
			setState(8462);
			expr_list();
			setState(8463);
			match(CLOSE_PAREN);
			setState(8464);
			opt_repeatable_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_repeatable_clauseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLParser.REPEATABLE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_repeatable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_repeatable_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_repeatable_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_repeatable_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_repeatable_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_repeatable_clauseContext opt_repeatable_clause() throws RecognitionException {
		Opt_repeatable_clauseContext _localctx = new Opt_repeatable_clauseContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_opt_repeatable_clause);
		try {
			setState(8472);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPEATABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8466);
				match(REPEATABLE);
				setState(8467);
				match(OPEN_PAREN);
				setState(8468);
				a_expr();
				setState(8469);
				match(CLOSE_PAREN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case CROSS:
			case FULL:
			case INNER_P:
			case JOIN:
			case LEFT:
			case NATURAL:
			case RIGHT:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_tableContext extends ParserRuleContext {
		public Func_expr_windowlessContext func_expr_windowless() {
			return getRuleContext(Func_expr_windowlessContext.class,0);
		}
		public Opt_ordinalityContext opt_ordinality() {
			return getRuleContext(Opt_ordinalityContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Rowsfrom_listContext rowsfrom_list() {
			return getRuleContext(Rowsfrom_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_tableContext func_table() throws RecognitionException {
		Func_tableContext _localctx = new Func_tableContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_func_table);
		try {
			setState(8484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8474);
				func_expr_windowless();
				setState(8475);
				opt_ordinality();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8477);
				match(ROWS);
				setState(8478);
				match(FROM);
				setState(8479);
				match(OPEN_PAREN);
				setState(8480);
				rowsfrom_list();
				setState(8481);
				match(CLOSE_PAREN);
				setState(8482);
				opt_ordinality();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rowsfrom_itemContext extends ParserRuleContext {
		public Func_expr_windowlessContext func_expr_windowless() {
			return getRuleContext(Func_expr_windowlessContext.class,0);
		}
		public Opt_col_def_listContext opt_col_def_list() {
			return getRuleContext(Opt_col_def_listContext.class,0);
		}
		public Rowsfrom_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsfrom_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsfrom_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsfrom_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsfrom_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rowsfrom_itemContext rowsfrom_item() throws RecognitionException {
		Rowsfrom_itemContext _localctx = new Rowsfrom_itemContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_rowsfrom_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8486);
			func_expr_windowless();
			setState(8487);
			opt_col_def_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rowsfrom_listContext extends ParserRuleContext {
		public List<Rowsfrom_itemContext> rowsfrom_item() {
			return getRuleContexts(Rowsfrom_itemContext.class);
		}
		public Rowsfrom_itemContext rowsfrom_item(int i) {
			return getRuleContext(Rowsfrom_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Rowsfrom_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsfrom_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsfrom_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsfrom_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsfrom_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rowsfrom_listContext rowsfrom_list() throws RecognitionException {
		Rowsfrom_listContext _localctx = new Rowsfrom_listContext(_ctx, getState());
		enterRule(_localctx, 1090, RULE_rowsfrom_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8489);
			rowsfrom_item();
			setState(8494);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8490);
				match(COMMA);
				setState(8491);
				rowsfrom_item();
				}
				}
				setState(8496);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_col_def_listContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TablefuncelementlistContext tablefuncelementlist() {
			return getRuleContext(TablefuncelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_col_def_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_col_def_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_col_def_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_col_def_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_col_def_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_col_def_listContext opt_col_def_list() throws RecognitionException {
		Opt_col_def_listContext _localctx = new Opt_col_def_listContext(_ctx, getState());
		enterRule(_localctx, 1092, RULE_opt_col_def_list);
		try {
			setState(8503);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(8497);
				match(AS);
				setState(8498);
				match(OPEN_PAREN);
				setState(8499);
				tablefuncelementlist();
				setState(8500);
				match(CLOSE_PAREN);
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_ordinalityContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLParser.ORDINALITY, 0); }
		public Opt_ordinalityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_ordinality; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_ordinality(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_ordinality(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_ordinality(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_ordinalityContext opt_ordinality() throws RecognitionException {
		Opt_ordinalityContext _localctx = new Opt_ordinalityContext(_ctx, getState());
		enterRule(_localctx, 1094, RULE_opt_ordinality);
		try {
			setState(8508);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,503,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8505);
				match(WITH);
				setState(8506);
				match(ORDINALITY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 1096, RULE_where_clause);
		try {
			setState(8513);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHERE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8510);
				match(WHERE);
				setState(8511);
				a_expr();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Where_or_current_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Where_or_current_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_or_current_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWhere_or_current_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWhere_or_current_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWhere_or_current_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_or_current_clauseContext where_or_current_clause() throws RecognitionException {
		Where_or_current_clauseContext _localctx = new Where_or_current_clauseContext(_ctx, getState());
		enterRule(_localctx, 1098, RULE_where_or_current_clause);
		try {
			setState(8523);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHERE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8515);
				match(WHERE);
				setState(8520);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
				case 1:
					{
					setState(8516);
					match(CURRENT_P);
					setState(8517);
					match(OF);
					setState(8518);
					cursor_name();
					}
					break;
				case 2:
					{
					setState(8519);
					a_expr();
					}
					break;
				}
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpttablefuncelementlistContext extends ParserRuleContext {
		public TablefuncelementlistContext tablefuncelementlist() {
			return getRuleContext(TablefuncelementlistContext.class,0);
		}
		public OpttablefuncelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttablefuncelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttablefuncelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttablefuncelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttablefuncelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttablefuncelementlistContext opttablefuncelementlist() throws RecognitionException {
		OpttablefuncelementlistContext _localctx = new OpttablefuncelementlistContext(_ctx, getState());
		enterRule(_localctx, 1100, RULE_opttablefuncelementlist);
		try {
			setState(8527);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(8525);
				tablefuncelementlist();
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablefuncelementlistContext extends ParserRuleContext {
		public List<TablefuncelementContext> tablefuncelement() {
			return getRuleContexts(TablefuncelementContext.class);
		}
		public TablefuncelementContext tablefuncelement(int i) {
			return getRuleContext(TablefuncelementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TablefuncelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablefuncelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablefuncelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablefuncelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablefuncelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablefuncelementlistContext tablefuncelementlist() throws RecognitionException {
		TablefuncelementlistContext _localctx = new TablefuncelementlistContext(_ctx, getState());
		enterRule(_localctx, 1102, RULE_tablefuncelementlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8529);
			tablefuncelement();
			setState(8534);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8530);
				match(COMMA);
				setState(8531);
				tablefuncelement();
				}
				}
				setState(8536);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablefuncelementContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public TablefuncelementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablefuncelement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablefuncelement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablefuncelement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablefuncelement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablefuncelementContext tablefuncelement() throws RecognitionException {
		TablefuncelementContext _localctx = new TablefuncelementContext(_ctx, getState());
		enterRule(_localctx, 1104, RULE_tablefuncelement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8537);
			colid();
			setState(8538);
			typename();
			setState(8539);
			opt_collate_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmltableContext extends ParserRuleContext {
		public TerminalNode XMLTABLE() { return getToken(PostgreSQLParser.XMLTABLE, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public Xmlexists_argumentContext xmlexists_argument() {
			return getRuleContext(Xmlexists_argumentContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(PostgreSQLParser.COLUMNS, 0); }
		public Xmltable_column_listContext xmltable_column_list() {
			return getRuleContext(Xmltable_column_listContext.class,0);
		}
		public TerminalNode XMLNAMESPACES() { return getToken(PostgreSQLParser.XMLNAMESPACES, 0); }
		public Xml_namespace_listContext xml_namespace_list() {
			return getRuleContext(Xml_namespace_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public XmltableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmltable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmltable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmltable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmltableContext xmltable() throws RecognitionException {
		XmltableContext _localctx = new XmltableContext(_ctx, getState());
		enterRule(_localctx, 1106, RULE_xmltable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8541);
			match(XMLTABLE);
			setState(8542);
			match(OPEN_PAREN);
			setState(8558);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,509,_ctx) ) {
			case 1:
				{
				setState(8543);
				c_expr();
				setState(8544);
				xmlexists_argument();
				setState(8545);
				match(COLUMNS);
				setState(8546);
				xmltable_column_list();
				}
				break;
			case 2:
				{
				setState(8548);
				match(XMLNAMESPACES);
				setState(8549);
				match(OPEN_PAREN);
				setState(8550);
				xml_namespace_list();
				setState(8551);
				match(CLOSE_PAREN);
				setState(8552);
				match(COMMA);
				setState(8553);
				c_expr();
				setState(8554);
				xmlexists_argument();
				setState(8555);
				match(COLUMNS);
				setState(8556);
				xmltable_column_list();
				}
				break;
			}
			setState(8560);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmltable_column_listContext extends ParserRuleContext {
		public List<Xmltable_column_elContext> xmltable_column_el() {
			return getRuleContexts(Xmltable_column_elContext.class);
		}
		public Xmltable_column_elContext xmltable_column_el(int i) {
			return getRuleContext(Xmltable_column_elContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Xmltable_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmltable_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmltable_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmltable_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltable_column_listContext xmltable_column_list() throws RecognitionException {
		Xmltable_column_listContext _localctx = new Xmltable_column_listContext(_ctx, getState());
		enterRule(_localctx, 1108, RULE_xmltable_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8562);
			xmltable_column_el();
			setState(8567);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8563);
				match(COMMA);
				setState(8564);
				xmltable_column_el();
				}
				}
				setState(8569);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmltable_column_elContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLParser.ORDINALITY, 0); }
		public Xmltable_column_option_listContext xmltable_column_option_list() {
			return getRuleContext(Xmltable_column_option_listContext.class,0);
		}
		public Xmltable_column_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable_column_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmltable_column_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmltable_column_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmltable_column_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltable_column_elContext xmltable_column_el() throws RecognitionException {
		Xmltable_column_elContext _localctx = new Xmltable_column_elContext(_ctx, getState());
		enterRule(_localctx, 1110, RULE_xmltable_column_el);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8570);
			colid();
			setState(8577);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				setState(8571);
				typename();
				setState(8573);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & 576513529147825157L) != 0) || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 74346914954363009L) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & 56295003965620233L) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & 18068292027564033L) != 0) || _la==TYPE_P || ((((_la - 433)) & ~0x3f) == 0 && ((1L << (_la - 433)) & -144097595889811453L) != 0) || ((((_la - 497)) & ~0x3f) == 0 && ((1L << (_la - 497)) & 12516927L) != 0) || ((((_la - 636)) & ~0x3f) == 0 && ((1L << (_la - 636)) & 100663331L) != 0)) {
					{
					setState(8572);
					xmltable_column_option_list();
					}
				}

				}
				break;
			case FOR:
				{
				setState(8575);
				match(FOR);
				setState(8576);
				match(ORDINALITY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmltable_column_option_listContext extends ParserRuleContext {
		public List<Xmltable_column_option_elContext> xmltable_column_option_el() {
			return getRuleContexts(Xmltable_column_option_elContext.class);
		}
		public Xmltable_column_option_elContext xmltable_column_option_el(int i) {
			return getRuleContext(Xmltable_column_option_elContext.class,i);
		}
		public Xmltable_column_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable_column_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmltable_column_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmltable_column_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmltable_column_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltable_column_option_listContext xmltable_column_option_list() throws RecognitionException {
		Xmltable_column_option_listContext _localctx = new Xmltable_column_option_listContext(_ctx, getState());
		enterRule(_localctx, 1112, RULE_xmltable_column_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8580); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(8579);
				xmltable_column_option_el();
				}
				}
				setState(8582); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & 576513529147825157L) != 0) || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 74346914954363009L) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & 56295003965620233L) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & 18068292027564033L) != 0) || _la==TYPE_P || ((((_la - 433)) & ~0x3f) == 0 && ((1L << (_la - 433)) & -144097595889811453L) != 0) || ((((_la - 497)) & ~0x3f) == 0 && ((1L << (_la - 497)) & 12516927L) != 0) || ((((_la - 636)) & ~0x3f) == 0 && ((1L << (_la - 636)) & 100663331L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmltable_column_option_elContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Xmltable_column_option_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable_column_option_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmltable_column_option_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmltable_column_option_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmltable_column_option_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltable_column_option_elContext xmltable_column_option_el() throws RecognitionException {
		Xmltable_column_option_elContext _localctx = new Xmltable_column_option_elContext(_ctx, getState());
		enterRule(_localctx, 1114, RULE_xmltable_column_option_el);
		try {
			setState(8592);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8584);
				match(DEFAULT);
				setState(8585);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8586);
				identifier();
				setState(8587);
				a_expr();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8589);
				match(NOT);
				setState(8590);
				match(NULL_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8591);
				match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_namespace_listContext extends ParserRuleContext {
		public List<Xml_namespace_elContext> xml_namespace_el() {
			return getRuleContexts(Xml_namespace_elContext.class);
		}
		public Xml_namespace_elContext xml_namespace_el(int i) {
			return getRuleContext(Xml_namespace_elContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Xml_namespace_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespace_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_namespace_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_namespace_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_namespace_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_namespace_listContext xml_namespace_list() throws RecognitionException {
		Xml_namespace_listContext _localctx = new Xml_namespace_listContext(_ctx, getState());
		enterRule(_localctx, 1116, RULE_xml_namespace_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8594);
			xml_namespace_el();
			setState(8599);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8595);
				match(COMMA);
				setState(8596);
				xml_namespace_el();
				}
				}
				setState(8601);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_namespace_elContext extends ParserRuleContext {
		public B_exprContext b_expr() {
			return getRuleContext(B_exprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Xml_namespace_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespace_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_namespace_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_namespace_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_namespace_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_namespace_elContext xml_namespace_el() throws RecognitionException {
		Xml_namespace_elContext _localctx = new Xml_namespace_elContext(_ctx, getState());
		enterRule(_localctx, 1118, RULE_xml_namespace_el);
		try {
			setState(8608);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8602);
				b_expr(0);
				setState(8603);
				match(AS);
				setState(8604);
				collabel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8606);
				match(DEFAULT);
				setState(8607);
				b_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypenameContext extends ParserRuleContext {
		public SimpletypenameContext simpletypename() {
			return getRuleContext(SimpletypenameContext.class,0);
		}
		public Opt_array_boundsContext opt_array_bounds() {
			return getRuleContext(Opt_array_boundsContext.class,0);
		}
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public TerminalNode SETOF() { return getToken(PostgreSQLParser.SETOF, 0); }
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode ROWTYPE() { return getToken(PostgreSQLParser.ROWTYPE, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTypename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTypename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypenameContext typename() throws RecognitionException {
		TypenameContext _localctx = new TypenameContext(_ctx, getState());
		enterRule(_localctx, 1120, RULE_typename);
		int _la;
		try {
			setState(8628);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8611);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SETOF) {
					{
					setState(8610);
					match(SETOF);
					}
				}

				setState(8613);
				simpletypename();
				setState(8622);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
				case 1:
					{
					setState(8614);
					opt_array_bounds();
					}
					break;
				case 2:
					{
					setState(8615);
					match(ARRAY);
					setState(8620);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
					case 1:
						{
						setState(8616);
						match(OPEN_BRACKET);
						setState(8617);
						iconst();
						setState(8618);
						match(CLOSE_BRACKET);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8624);
				qualified_name();
				setState(8625);
				match(PERCENT);
				setState(8626);
				_la = _input.LA(1);
				if ( !(_la==TYPE_P || _la==ROWTYPE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_array_boundsContext extends ParserRuleContext {
		public List<TerminalNode> OPEN_BRACKET() { return getTokens(PostgreSQLParser.OPEN_BRACKET); }
		public TerminalNode OPEN_BRACKET(int i) {
			return getToken(PostgreSQLParser.OPEN_BRACKET, i);
		}
		public List<TerminalNode> CLOSE_BRACKET() { return getTokens(PostgreSQLParser.CLOSE_BRACKET); }
		public TerminalNode CLOSE_BRACKET(int i) {
			return getToken(PostgreSQLParser.CLOSE_BRACKET, i);
		}
		public List<IconstContext> iconst() {
			return getRuleContexts(IconstContext.class);
		}
		public IconstContext iconst(int i) {
			return getRuleContext(IconstContext.class,i);
		}
		public Opt_array_boundsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_array_bounds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_array_bounds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_array_bounds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_array_bounds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_array_boundsContext opt_array_bounds() throws RecognitionException {
		Opt_array_boundsContext _localctx = new Opt_array_boundsContext(_ctx, getState());
		enterRule(_localctx, 1122, RULE_opt_array_bounds);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8637);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,522,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8630);
					match(OPEN_BRACKET);
					setState(8632);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==Integral) {
						{
						setState(8631);
						iconst();
						}
					}

					setState(8634);
					match(CLOSE_BRACKET);
					}
					} 
				}
				setState(8639);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,522,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpletypenameContext extends ParserRuleContext {
		public GenerictypeContext generictype() {
			return getRuleContext(GenerictypeContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public BitContext bit() {
			return getRuleContext(BitContext.class,0);
		}
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public ConstdatetimeContext constdatetime() {
			return getRuleContext(ConstdatetimeContext.class,0);
		}
		public ConstintervalContext constinterval() {
			return getRuleContext(ConstintervalContext.class,0);
		}
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public SimpletypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpletypename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSimpletypename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSimpletypename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSimpletypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpletypenameContext simpletypename() throws RecognitionException {
		SimpletypenameContext _localctx = new SimpletypenameContext(_ctx, getState());
		enterRule(_localctx, 1124, RULE_simpletypename);
		try {
			setState(8653);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8640);
				generictype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8641);
				numeric();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8642);
				bit();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8643);
				character();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8644);
				constdatetime();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8645);
				constinterval();
				setState(8651);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
				case 1:
					{
					setState(8646);
					opt_interval();
					}
					break;
				case 2:
					{
					setState(8647);
					match(OPEN_PAREN);
					setState(8648);
					iconst();
					setState(8649);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConsttypenameContext extends ParserRuleContext {
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public ConstbitContext constbit() {
			return getRuleContext(ConstbitContext.class,0);
		}
		public ConstcharacterContext constcharacter() {
			return getRuleContext(ConstcharacterContext.class,0);
		}
		public ConstdatetimeContext constdatetime() {
			return getRuleContext(ConstdatetimeContext.class,0);
		}
		public ConsttypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_consttypename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConsttypename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConsttypename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConsttypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConsttypenameContext consttypename() throws RecognitionException {
		ConsttypenameContext _localctx = new ConsttypenameContext(_ctx, getState());
		enterRule(_localctx, 1126, RULE_consttypename);
		try {
			setState(8659);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_P:
			case BIGINT:
			case BOOLEAN_P:
			case DEC:
			case DECIMAL_P:
			case FLOAT_P:
			case INT_P:
			case INTEGER:
			case NUMERIC:
			case REAL:
			case SMALLINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8655);
				numeric();
				}
				break;
			case BIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8656);
				constbit();
				}
				break;
			case CHAR_P:
			case CHARACTER:
			case NATIONAL:
			case NCHAR:
			case VARCHAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(8657);
				constcharacter();
				}
				break;
			case TIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 4);
				{
				setState(8658);
				constdatetime();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GenerictypeContext extends ParserRuleContext {
		public Opt_type_modifiersContext opt_type_modifiers() {
			return getRuleContext(Opt_type_modifiersContext.class,0);
		}
		public Builtin_function_nameContext builtin_function_name() {
			return getRuleContext(Builtin_function_nameContext.class,0);
		}
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(PostgreSQLParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLParser.RIGHT, 0); }
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public GenerictypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generictype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGenerictype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGenerictype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGenerictype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenerictypeContext generictype() throws RecognitionException {
		GenerictypeContext _localctx = new GenerictypeContext(_ctx, getState());
		enterRule(_localctx, 1128, RULE_generictype);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8665);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLACE:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case REVERSE:
			case LOG:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
				{
				setState(8661);
				builtin_function_name();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case COLUMNS:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				setState(8662);
				type_function_name();
				}
				break;
			case LEFT:
				{
				setState(8663);
				match(LEFT);
				}
				break;
			case RIGHT:
				{
				setState(8664);
				match(RIGHT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8668);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				{
				setState(8667);
				attrs();
				}
				break;
			}
			setState(8670);
			opt_type_modifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_type_modifiersContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_type_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_type_modifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_type_modifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_type_modifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_type_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_type_modifiersContext opt_type_modifiers() throws RecognitionException {
		Opt_type_modifiersContext _localctx = new Opt_type_modifiersContext(_ctx, getState());
		enterRule(_localctx, 1130, RULE_opt_type_modifiers);
		try {
			setState(8677);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8672);
				match(OPEN_PAREN);
				setState(8673);
				expr_list();
				setState(8674);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumericContext extends ParserRuleContext {
		public TerminalNode INT_P() { return getToken(PostgreSQLParser.INT_P, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLParser.INTEGER, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSQLParser.SMALLINT, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSQLParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(PostgreSQLParser.REAL, 0); }
		public TerminalNode FLOAT_P() { return getToken(PostgreSQLParser.FLOAT_P, 0); }
		public Opt_floatContext opt_float() {
			return getRuleContext(Opt_floatContext.class,0);
		}
		public TerminalNode DOUBLE_P() { return getToken(PostgreSQLParser.DOUBLE_P, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSQLParser.PRECISION, 0); }
		public TerminalNode DECIMAL_P() { return getToken(PostgreSQLParser.DECIMAL_P, 0); }
		public Opt_type_modifiersContext opt_type_modifiers() {
			return getRuleContext(Opt_type_modifiersContext.class,0);
		}
		public TerminalNode DEC() { return getToken(PostgreSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(PostgreSQLParser.NUMERIC, 0); }
		public TerminalNode BOOLEAN_P() { return getToken(PostgreSQLParser.BOOLEAN_P, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNumeric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 1132, RULE_numeric);
		try {
			setState(8695);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(8679);
				match(INT_P);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(8680);
				match(INTEGER);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 3);
				{
				setState(8681);
				match(SMALLINT);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 4);
				{
				setState(8682);
				match(BIGINT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(8683);
				match(REAL);
				}
				break;
			case FLOAT_P:
				enterOuterAlt(_localctx, 6);
				{
				setState(8684);
				match(FLOAT_P);
				setState(8685);
				opt_float();
				}
				break;
			case DOUBLE_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(8686);
				match(DOUBLE_P);
				setState(8687);
				match(PRECISION);
				}
				break;
			case DECIMAL_P:
				enterOuterAlt(_localctx, 8);
				{
				setState(8688);
				match(DECIMAL_P);
				setState(8689);
				opt_type_modifiers();
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 9);
				{
				setState(8690);
				match(DEC);
				setState(8691);
				opt_type_modifiers();
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 10);
				{
				setState(8692);
				match(NUMERIC);
				setState(8693);
				opt_type_modifiers();
				}
				break;
			case BOOLEAN_P:
				enterOuterAlt(_localctx, 11);
				{
				setState(8694);
				match(BOOLEAN_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_floatContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_floatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_float; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_float(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_float(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_float(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_floatContext opt_float() throws RecognitionException {
		Opt_floatContext _localctx = new Opt_floatContext(_ctx, getState());
		enterRule(_localctx, 1134, RULE_opt_float);
		try {
			setState(8702);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8697);
				match(OPEN_PAREN);
				setState(8698);
				iconst();
				setState(8699);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BitContext extends ParserRuleContext {
		public BitwithlengthContext bitwithlength() {
			return getRuleContext(BitwithlengthContext.class,0);
		}
		public BitwithoutlengthContext bitwithoutlength() {
			return getRuleContext(BitwithoutlengthContext.class,0);
		}
		public BitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterBit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitBit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitBit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitContext bit() throws RecognitionException {
		BitContext _localctx = new BitContext(_ctx, getState());
		enterRule(_localctx, 1136, RULE_bit);
		try {
			setState(8706);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8704);
				bitwithlength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8705);
				bitwithoutlength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstbitContext extends ParserRuleContext {
		public BitwithlengthContext bitwithlength() {
			return getRuleContext(BitwithlengthContext.class,0);
		}
		public BitwithoutlengthContext bitwithoutlength() {
			return getRuleContext(BitwithoutlengthContext.class,0);
		}
		public ConstbitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constbit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstbit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstbit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstbit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstbitContext constbit() throws RecognitionException {
		ConstbitContext _localctx = new ConstbitContext(_ctx, getState());
		enterRule(_localctx, 1138, RULE_constbit);
		try {
			setState(8710);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8708);
				bitwithlength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8709);
				bitwithoutlength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BitwithlengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(PostgreSQLParser.BIT, 0); }
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public BitwithlengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitwithlength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterBitwithlength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitBitwithlength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitBitwithlength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitwithlengthContext bitwithlength() throws RecognitionException {
		BitwithlengthContext _localctx = new BitwithlengthContext(_ctx, getState());
		enterRule(_localctx, 1140, RULE_bitwithlength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8712);
			match(BIT);
			setState(8713);
			opt_varying();
			setState(8714);
			match(OPEN_PAREN);
			setState(8715);
			expr_list();
			setState(8716);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BitwithoutlengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(PostgreSQLParser.BIT, 0); }
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public BitwithoutlengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitwithoutlength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterBitwithoutlength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitBitwithoutlength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitBitwithoutlength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitwithoutlengthContext bitwithoutlength() throws RecognitionException {
		BitwithoutlengthContext _localctx = new BitwithoutlengthContext(_ctx, getState());
		enterRule(_localctx, 1142, RULE_bitwithoutlength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8718);
			match(BIT);
			setState(8719);
			opt_varying();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharacterContext extends ParserRuleContext {
		public Character_cContext character_c() {
			return getRuleContext(Character_cContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCharacter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCharacter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterContext character() throws RecognitionException {
		CharacterContext _localctx = new CharacterContext(_ctx, getState());
		enterRule(_localctx, 1144, RULE_character);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8721);
			character_c();
			setState(8726);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,533,_ctx) ) {
			case 1:
				{
				setState(8722);
				match(OPEN_PAREN);
				setState(8723);
				iconst();
				setState(8724);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstcharacterContext extends ParserRuleContext {
		public Character_cContext character_c() {
			return getRuleContext(Character_cContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstcharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constcharacter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstcharacter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstcharacter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstcharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstcharacterContext constcharacter() throws RecognitionException {
		ConstcharacterContext _localctx = new ConstcharacterContext(_ctx, getState());
		enterRule(_localctx, 1146, RULE_constcharacter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8728);
			character_c();
			setState(8733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(8729);
				match(OPEN_PAREN);
				setState(8730);
				iconst();
				setState(8731);
				match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Character_cContext extends ParserRuleContext {
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(PostgreSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR_P() { return getToken(PostgreSQLParser.CHAR_P, 0); }
		public TerminalNode NCHAR() { return getToken(PostgreSQLParser.NCHAR, 0); }
		public TerminalNode VARCHAR() { return getToken(PostgreSQLParser.VARCHAR, 0); }
		public TerminalNode NATIONAL() { return getToken(PostgreSQLParser.NATIONAL, 0); }
		public Character_cContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_c; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCharacter_c(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCharacter_c(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCharacter_c(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_cContext character_c() throws RecognitionException {
		Character_cContext _localctx = new Character_cContext(_ctx, getState());
		enterRule(_localctx, 1148, RULE_character_c);
		int _la;
		try {
			setState(8741);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHAR_P:
			case CHARACTER:
			case NCHAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(8735);
				_la = _input.LA(1);
				if ( !(((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & 32771L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8736);
				opt_varying();
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(8737);
				match(VARCHAR);
				}
				break;
			case NATIONAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(8738);
				match(NATIONAL);
				setState(8739);
				_la = _input.LA(1);
				if ( !(_la==CHAR_P || _la==CHARACTER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8740);
				opt_varying();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_varyingContext extends ParserRuleContext {
		public TerminalNode VARYING() { return getToken(PostgreSQLParser.VARYING, 0); }
		public Opt_varyingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_varying; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_varying(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_varying(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_varying(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_varyingContext opt_varying() throws RecognitionException {
		Opt_varyingContext _localctx = new Opt_varyingContext(_ctx, getState());
		enterRule(_localctx, 1150, RULE_opt_varying);
		try {
			setState(8745);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,536,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8743);
				match(VARYING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstdatetimeContext extends ParserRuleContext {
		public Opt_timezoneContext opt_timezone() {
			return getRuleContext(Opt_timezoneContext.class,0);
		}
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLParser.TIMESTAMP, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstdatetimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constdatetime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstdatetime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstdatetime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstdatetime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstdatetimeContext constdatetime() throws RecognitionException {
		ConstdatetimeContext _localctx = new ConstdatetimeContext(_ctx, getState());
		enterRule(_localctx, 1152, RULE_constdatetime);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8747);
			_la = _input.LA(1);
			if ( !(_la==TIME || _la==TIMESTAMP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8752);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,537,_ctx) ) {
			case 1:
				{
				setState(8748);
				match(OPEN_PAREN);
				setState(8749);
				iconst();
				setState(8750);
				match(CLOSE_PAREN);
				}
				break;
			}
			setState(8754);
			opt_timezone();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstintervalContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(PostgreSQLParser.INTERVAL, 0); }
		public ConstintervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constinterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstinterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstinterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstinterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstintervalContext constinterval() throws RecognitionException {
		ConstintervalContext _localctx = new ConstintervalContext(_ctx, getState());
		enterRule(_localctx, 1154, RULE_constinterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8756);
			match(INTERVAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_timezoneContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public Opt_timezoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_timezone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_timezone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_timezone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_timezone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_timezoneContext opt_timezone() throws RecognitionException {
		Opt_timezoneContext _localctx = new Opt_timezoneContext(_ctx, getState());
		enterRule(_localctx, 1156, RULE_opt_timezone);
		try {
			setState(8765);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8758);
				match(WITH);
				setState(8759);
				match(TIME);
				setState(8760);
				match(ZONE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8761);
				match(WITHOUT);
				setState(8762);
				match(TIME);
				setState(8763);
				match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_intervalContext extends ParserRuleContext {
		public TerminalNode YEAR_P() { return getToken(PostgreSQLParser.YEAR_P, 0); }
		public TerminalNode MONTH_P() { return getToken(PostgreSQLParser.MONTH_P, 0); }
		public TerminalNode DAY_P() { return getToken(PostgreSQLParser.DAY_P, 0); }
		public TerminalNode HOUR_P() { return getToken(PostgreSQLParser.HOUR_P, 0); }
		public TerminalNode MINUTE_P() { return getToken(PostgreSQLParser.MINUTE_P, 0); }
		public Interval_secondContext interval_second() {
			return getRuleContext(Interval_secondContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Opt_intervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_interval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_interval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_interval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_interval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_intervalContext opt_interval() throws RecognitionException {
		Opt_intervalContext _localctx = new Opt_intervalContext(_ctx, getState());
		enterRule(_localctx, 1158, RULE_opt_interval);
		try {
			setState(8793);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8767);
				match(YEAR_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8768);
				match(MONTH_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8769);
				match(DAY_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8770);
				match(HOUR_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8771);
				match(MINUTE_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8772);
				interval_second();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8773);
				match(YEAR_P);
				setState(8774);
				match(TO);
				setState(8775);
				match(MONTH_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8776);
				match(DAY_P);
				setState(8777);
				match(TO);
				setState(8781);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case HOUR_P:
					{
					setState(8778);
					match(HOUR_P);
					}
					break;
				case MINUTE_P:
					{
					setState(8779);
					match(MINUTE_P);
					}
					break;
				case SECOND_P:
					{
					setState(8780);
					interval_second();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8783);
				match(HOUR_P);
				setState(8784);
				match(TO);
				setState(8787);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MINUTE_P:
					{
					setState(8785);
					match(MINUTE_P);
					}
					break;
				case SECOND_P:
					{
					setState(8786);
					interval_second();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8789);
				match(MINUTE_P);
				setState(8790);
				match(TO);
				setState(8791);
				interval_second();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Interval_secondContext extends ParserRuleContext {
		public TerminalNode SECOND_P() { return getToken(PostgreSQLParser.SECOND_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Interval_secondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_second; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInterval_second(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInterval_second(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInterval_second(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_secondContext interval_second() throws RecognitionException {
		Interval_secondContext _localctx = new Interval_secondContext(_ctx, getState());
		enterRule(_localctx, 1160, RULE_interval_second);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8795);
			match(SECOND_P);
			setState(8800);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
			case 1:
				{
				setState(8796);
				match(OPEN_PAREN);
				setState(8797);
				iconst();
				setState(8798);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_escapeContext extends ParserRuleContext {
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_escapeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_escape; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_escape(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_escape(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_escape(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_escapeContext opt_escape() throws RecognitionException {
		Opt_escapeContext _localctx = new Opt_escapeContext(_ctx, getState());
		enterRule(_localctx, 1162, RULE_opt_escape);
		try {
			setState(8805);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8802);
				match(ESCAPE);
				setState(8803);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_exprContext extends ParserRuleContext {
		public A_expr_qualContext a_expr_qual() {
			return getRuleContext(A_expr_qualContext.class,0);
		}
		public A_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_exprContext a_expr() throws RecognitionException {
		A_exprContext _localctx = new A_exprContext(_ctx, getState());
		enterRule(_localctx, 1164, RULE_a_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8807);
			a_expr_qual();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_qualContext extends ParserRuleContext {
		public A_expr_lesslessContext a_expr_lessless() {
			return getRuleContext(A_expr_lesslessContext.class,0);
		}
		public Qual_opContext qual_op() {
			return getRuleContext(Qual_opContext.class,0);
		}
		public A_expr_qualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_qual; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_qual(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_qual(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_qual(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_qualContext a_expr_qual() throws RecognitionException {
		A_expr_qualContext _localctx = new A_expr_qualContext(_ctx, getState());
		enterRule(_localctx, 1166, RULE_a_expr_qual);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8809);
			a_expr_lessless();
			setState(8811);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
			case 1:
				{
				setState(8810);
				qual_op();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_lesslessContext extends ParserRuleContext {
		public List<A_expr_orContext> a_expr_or() {
			return getRuleContexts(A_expr_orContext.class);
		}
		public A_expr_orContext a_expr_or(int i) {
			return getRuleContext(A_expr_orContext.class,i);
		}
		public List<TerminalNode> LESS_LESS() { return getTokens(PostgreSQLParser.LESS_LESS); }
		public TerminalNode LESS_LESS(int i) {
			return getToken(PostgreSQLParser.LESS_LESS, i);
		}
		public List<TerminalNode> GREATER_GREATER() { return getTokens(PostgreSQLParser.GREATER_GREATER); }
		public TerminalNode GREATER_GREATER(int i) {
			return getToken(PostgreSQLParser.GREATER_GREATER, i);
		}
		public A_expr_lesslessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_lessless; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_lessless(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_lessless(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_lessless(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_lesslessContext a_expr_lessless() throws RecognitionException {
		A_expr_lesslessContext _localctx = new A_expr_lesslessContext(_ctx, getState());
		enterRule(_localctx, 1168, RULE_a_expr_lessless);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8813);
			a_expr_or();
			setState(8818);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,545,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8814);
					_la = _input.LA(1);
					if ( !(_la==LESS_LESS || _la==GREATER_GREATER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8815);
					a_expr_or();
					}
					} 
				}
				setState(8820);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,545,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_orContext extends ParserRuleContext {
		public List<A_expr_andContext> a_expr_and() {
			return getRuleContexts(A_expr_andContext.class);
		}
		public A_expr_andContext a_expr_and(int i) {
			return getRuleContext(A_expr_andContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(PostgreSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PostgreSQLParser.OR, i);
		}
		public A_expr_orContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_or; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_or(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_or(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_or(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_orContext a_expr_or() throws RecognitionException {
		A_expr_orContext _localctx = new A_expr_orContext(_ctx, getState());
		enterRule(_localctx, 1170, RULE_a_expr_or);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8821);
			a_expr_and();
			setState(8826);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,546,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8822);
					match(OR);
					setState(8823);
					a_expr_and();
					}
					} 
				}
				setState(8828);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,546,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_andContext extends ParserRuleContext {
		public List<A_expr_betweenContext> a_expr_between() {
			return getRuleContexts(A_expr_betweenContext.class);
		}
		public A_expr_betweenContext a_expr_between(int i) {
			return getRuleContext(A_expr_betweenContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(PostgreSQLParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(PostgreSQLParser.AND, i);
		}
		public A_expr_andContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_and; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_and(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_and(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_and(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_andContext a_expr_and() throws RecognitionException {
		A_expr_andContext _localctx = new A_expr_andContext(_ctx, getState());
		enterRule(_localctx, 1172, RULE_a_expr_and);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8829);
			a_expr_between();
			setState(8834);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,547,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8830);
					match(AND);
					setState(8831);
					a_expr_between();
					}
					} 
				}
				setState(8836);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,547,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_betweenContext extends ParserRuleContext {
		public List<A_expr_inContext> a_expr_in() {
			return getRuleContexts(A_expr_inContext.class);
		}
		public A_expr_inContext a_expr_in(int i) {
			return getRuleContext(A_expr_inContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode SYMMETRIC() { return getToken(PostgreSQLParser.SYMMETRIC, 0); }
		public A_expr_betweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_between; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_between(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_between(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_between(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_betweenContext a_expr_between() throws RecognitionException {
		A_expr_betweenContext _localctx = new A_expr_betweenContext(_ctx, getState());
		enterRule(_localctx, 1174, RULE_a_expr_between);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8837);
			a_expr_in();
			setState(8849);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,550,_ctx) ) {
			case 1:
				{
				setState(8839);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8838);
					match(NOT);
					}
				}

				setState(8841);
				match(BETWEEN);
				setState(8843);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SYMMETRIC) {
					{
					setState(8842);
					match(SYMMETRIC);
					}
				}

				setState(8845);
				a_expr_in();
				setState(8846);
				match(AND);
				setState(8847);
				a_expr_in();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_inContext extends ParserRuleContext {
		public A_expr_unary_notContext a_expr_unary_not() {
			return getRuleContext(A_expr_unary_notContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public In_exprContext in_expr() {
			return getRuleContext(In_exprContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public A_expr_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_in(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_inContext a_expr_in() throws RecognitionException {
		A_expr_inContext _localctx = new A_expr_inContext(_ctx, getState());
		enterRule(_localctx, 1176, RULE_a_expr_in);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8851);
			a_expr_unary_not();
			setState(8857);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,552,_ctx) ) {
			case 1:
				{
				setState(8853);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8852);
					match(NOT);
					}
				}

				setState(8855);
				match(IN_P);
				setState(8856);
				in_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_unary_notContext extends ParserRuleContext {
		public A_expr_isnullContext a_expr_isnull() {
			return getRuleContext(A_expr_isnullContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public A_expr_unary_notContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_unary_not; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_unary_not(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_unary_not(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_unary_not(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_unary_notContext a_expr_unary_not() throws RecognitionException {
		A_expr_unary_notContext _localctx = new A_expr_unary_notContext(_ctx, getState());
		enterRule(_localctx, 1178, RULE_a_expr_unary_not);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8860);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(8859);
				match(NOT);
				}
			}

			setState(8862);
			a_expr_isnull();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_isnullContext extends ParserRuleContext {
		public A_expr_is_notContext a_expr_is_not() {
			return getRuleContext(A_expr_is_notContext.class,0);
		}
		public TerminalNode ISNULL() { return getToken(PostgreSQLParser.ISNULL, 0); }
		public TerminalNode NOTNULL() { return getToken(PostgreSQLParser.NOTNULL, 0); }
		public A_expr_isnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_isnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_isnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_isnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_isnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_isnullContext a_expr_isnull() throws RecognitionException {
		A_expr_isnullContext _localctx = new A_expr_isnullContext(_ctx, getState());
		enterRule(_localctx, 1180, RULE_a_expr_isnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8864);
			a_expr_is_not();
			setState(8866);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
			case 1:
				{
				setState(8865);
				_la = _input.LA(1);
				if ( !(_la==ISNULL || _la==NOTNULL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_is_notContext extends ParserRuleContext {
		public A_expr_compareContext a_expr_compare() {
			return getRuleContext(A_expr_compareContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode UNKNOWN() { return getToken(PostgreSQLParser.UNKNOWN, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public TerminalNode NORMALIZED() { return getToken(PostgreSQLParser.NORMALIZED, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public Unicode_normal_formContext unicode_normal_form() {
			return getRuleContext(Unicode_normal_formContext.class,0);
		}
		public A_expr_is_notContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_is_not; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_is_not(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_is_not(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_is_not(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_is_notContext a_expr_is_not() throws RecognitionException {
		A_expr_is_notContext _localctx = new A_expr_is_notContext(_ctx, getState());
		enterRule(_localctx, 1182, RULE_a_expr_is_not);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8868);
			a_expr_compare();
			setState(8892);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
			case 1:
				{
				setState(8869);
				match(IS);
				setState(8871);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8870);
					match(NOT);
					}
				}

				setState(8890);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NULL_P:
					{
					setState(8873);
					match(NULL_P);
					}
					break;
				case TRUE_P:
					{
					setState(8874);
					match(TRUE_P);
					}
					break;
				case FALSE_P:
					{
					setState(8875);
					match(FALSE_P);
					}
					break;
				case UNKNOWN:
					{
					setState(8876);
					match(UNKNOWN);
					}
					break;
				case DISTINCT:
					{
					setState(8877);
					match(DISTINCT);
					setState(8878);
					match(FROM);
					setState(8879);
					a_expr();
					}
					break;
				case OF:
					{
					setState(8880);
					match(OF);
					setState(8881);
					match(OPEN_PAREN);
					setState(8882);
					type_list();
					setState(8883);
					match(CLOSE_PAREN);
					}
					break;
				case DOCUMENT_P:
					{
					setState(8885);
					match(DOCUMENT_P);
					}
					break;
				case NORMALIZED:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
					{
					setState(8887);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 483)) & ~0x3f) == 0 && ((1L << (_la - 483)) & 15L) != 0)) {
						{
						setState(8886);
						unicode_normal_form();
						}
					}

					setState(8889);
					match(NORMALIZED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_compareContext extends ParserRuleContext {
		public List<A_expr_likeContext> a_expr_like() {
			return getRuleContexts(A_expr_likeContext.class);
		}
		public A_expr_likeContext a_expr_like(int i) {
			return getRuleContext(A_expr_likeContext.class,i);
		}
		public Subquery_OpContext subquery_Op() {
			return getRuleContext(Subquery_OpContext.class,0);
		}
		public Sub_typeContext sub_type() {
			return getRuleContext(Sub_typeContext.class,0);
		}
		public TerminalNode LT() { return getToken(PostgreSQLParser.LT, 0); }
		public TerminalNode GT() { return getToken(PostgreSQLParser.GT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode LESS_EQUALS() { return getToken(PostgreSQLParser.LESS_EQUALS, 0); }
		public TerminalNode GREATER_EQUALS() { return getToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		public TerminalNode NOT_EQUALS() { return getToken(PostgreSQLParser.NOT_EQUALS, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public A_expr_compareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_compare; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_compare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_compare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_compare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_compareContext a_expr_compare() throws RecognitionException {
		A_expr_compareContext _localctx = new A_expr_compareContext(_ctx, getState());
		enterRule(_localctx, 1184, RULE_a_expr_compare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8894);
			a_expr_like();
			setState(8906);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
			case 1:
				{
				setState(8895);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 44237824L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8896);
				a_expr_like();
				}
				break;
			case 2:
				{
				setState(8897);
				subquery_Op();
				setState(8898);
				sub_type();
				setState(8904);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
				case 1:
					{
					setState(8899);
					select_with_parens();
					}
					break;
				case 2:
					{
					setState(8900);
					match(OPEN_PAREN);
					setState(8901);
					a_expr();
					setState(8902);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_likeContext extends ParserRuleContext {
		public List<A_expr_qual_opContext> a_expr_qual_op() {
			return getRuleContexts(A_expr_qual_opContext.class);
		}
		public A_expr_qual_opContext a_expr_qual_op(int i) {
			return getRuleContext(A_expr_qual_opContext.class,i);
		}
		public Opt_escapeContext opt_escape() {
			return getRuleContext(Opt_escapeContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public TerminalNode ILIKE() { return getToken(PostgreSQLParser.ILIKE, 0); }
		public TerminalNode SIMILAR() { return getToken(PostgreSQLParser.SIMILAR, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public A_expr_likeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_like; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_like(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_like(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_like(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_likeContext a_expr_like() throws RecognitionException {
		A_expr_likeContext _localctx = new A_expr_likeContext(_ctx, getState());
		enterRule(_localctx, 1186, RULE_a_expr_like);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8908);
			a_expr_qual_op();
			setState(8921);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
			case 1:
				{
				setState(8910);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8909);
					match(NOT);
					}
				}

				setState(8916);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LIKE:
					{
					setState(8912);
					match(LIKE);
					}
					break;
				case ILIKE:
					{
					setState(8913);
					match(ILIKE);
					}
					break;
				case SIMILAR:
					{
					setState(8914);
					match(SIMILAR);
					setState(8915);
					match(TO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8918);
				a_expr_qual_op();
				setState(8919);
				opt_escape();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_qual_opContext extends ParserRuleContext {
		public List<A_expr_unary_qualopContext> a_expr_unary_qualop() {
			return getRuleContexts(A_expr_unary_qualopContext.class);
		}
		public A_expr_unary_qualopContext a_expr_unary_qualop(int i) {
			return getRuleContext(A_expr_unary_qualopContext.class,i);
		}
		public List<Qual_opContext> qual_op() {
			return getRuleContexts(Qual_opContext.class);
		}
		public Qual_opContext qual_op(int i) {
			return getRuleContext(Qual_opContext.class,i);
		}
		public A_expr_qual_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_qual_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_qual_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_qual_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_qual_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_qual_opContext a_expr_qual_op() throws RecognitionException {
		A_expr_qual_opContext _localctx = new A_expr_qual_opContext(_ctx, getState());
		enterRule(_localctx, 1188, RULE_a_expr_qual_op);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8923);
			a_expr_unary_qualop();
			setState(8929);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,564,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8924);
					qual_op();
					setState(8925);
					a_expr_unary_qualop();
					}
					} 
				}
				setState(8931);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,564,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_unary_qualopContext extends ParserRuleContext {
		public A_expr_addContext a_expr_add() {
			return getRuleContext(A_expr_addContext.class,0);
		}
		public Qual_opContext qual_op() {
			return getRuleContext(Qual_opContext.class,0);
		}
		public A_expr_unary_qualopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_unary_qualop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_unary_qualop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_unary_qualop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_unary_qualop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_unary_qualopContext a_expr_unary_qualop() throws RecognitionException {
		A_expr_unary_qualopContext _localctx = new A_expr_unary_qualopContext(_ctx, getState());
		enterRule(_localctx, 1190, RULE_a_expr_unary_qualop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8933);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,565,_ctx) ) {
			case 1:
				{
				setState(8932);
				qual_op();
				}
				break;
			}
			setState(8935);
			a_expr_add();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_addContext extends ParserRuleContext {
		public List<A_expr_mulContext> a_expr_mul() {
			return getRuleContexts(A_expr_mulContext.class);
		}
		public A_expr_mulContext a_expr_mul(int i) {
			return getRuleContext(A_expr_mulContext.class,i);
		}
		public List<TerminalNode> MINUS() { return getTokens(PostgreSQLParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(PostgreSQLParser.MINUS, i);
		}
		public List<TerminalNode> PLUS() { return getTokens(PostgreSQLParser.PLUS); }
		public TerminalNode PLUS(int i) {
			return getToken(PostgreSQLParser.PLUS, i);
		}
		public A_expr_addContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_add; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_add(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_add(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_add(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_addContext a_expr_add() throws RecognitionException {
		A_expr_addContext _localctx = new A_expr_addContext(_ctx, getState());
		enterRule(_localctx, 1192, RULE_a_expr_add);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8937);
			a_expr_mul();
			setState(8942);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,566,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8938);
					_la = _input.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8939);
					a_expr_mul();
					}
					} 
				}
				setState(8944);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,566,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_mulContext extends ParserRuleContext {
		public List<A_expr_caretContext> a_expr_caret() {
			return getRuleContexts(A_expr_caretContext.class);
		}
		public A_expr_caretContext a_expr_caret(int i) {
			return getRuleContext(A_expr_caretContext.class,i);
		}
		public List<TerminalNode> STAR() { return getTokens(PostgreSQLParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(PostgreSQLParser.STAR, i);
		}
		public List<TerminalNode> SLASH() { return getTokens(PostgreSQLParser.SLASH); }
		public TerminalNode SLASH(int i) {
			return getToken(PostgreSQLParser.SLASH, i);
		}
		public List<TerminalNode> PERCENT() { return getTokens(PostgreSQLParser.PERCENT); }
		public TerminalNode PERCENT(int i) {
			return getToken(PostgreSQLParser.PERCENT, i);
		}
		public A_expr_mulContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_mul; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_mul(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_mul(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_mul(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_mulContext a_expr_mul() throws RecognitionException {
		A_expr_mulContext _localctx = new A_expr_mulContext(_ctx, getState());
		enterRule(_localctx, 1194, RULE_a_expr_mul);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8945);
			a_expr_caret();
			setState(8950);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,567,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8946);
					_la = _input.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 134234624L) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8947);
					a_expr_caret();
					}
					} 
				}
				setState(8952);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,567,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_caretContext extends ParserRuleContext {
		public A_expr_unary_signContext a_expr_unary_sign() {
			return getRuleContext(A_expr_unary_signContext.class,0);
		}
		public TerminalNode CARET() { return getToken(PostgreSQLParser.CARET, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public A_expr_caretContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_caret; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_caret(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_caret(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_caret(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_caretContext a_expr_caret() throws RecognitionException {
		A_expr_caretContext _localctx = new A_expr_caretContext(_ctx, getState());
		enterRule(_localctx, 1196, RULE_a_expr_caret);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8953);
			a_expr_unary_sign();
			setState(8956);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,568,_ctx) ) {
			case 1:
				{
				setState(8954);
				match(CARET);
				setState(8955);
				a_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_unary_signContext extends ParserRuleContext {
		public A_expr_at_time_zoneContext a_expr_at_time_zone() {
			return getRuleContext(A_expr_at_time_zoneContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public A_expr_unary_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_unary_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_unary_sign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_unary_sign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_unary_sign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_unary_signContext a_expr_unary_sign() throws RecognitionException {
		A_expr_unary_signContext _localctx = new A_expr_unary_signContext(_ctx, getState());
		enterRule(_localctx, 1198, RULE_a_expr_unary_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8959);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				setState(8958);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(8961);
			a_expr_at_time_zone();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_at_time_zoneContext extends ParserRuleContext {
		public A_expr_collateContext a_expr_collate() {
			return getRuleContext(A_expr_collateContext.class,0);
		}
		public TerminalNode AT() { return getToken(PostgreSQLParser.AT, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public A_expr_at_time_zoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_at_time_zone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_at_time_zone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_at_time_zone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_at_time_zone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_at_time_zoneContext a_expr_at_time_zone() throws RecognitionException {
		A_expr_at_time_zoneContext _localctx = new A_expr_at_time_zoneContext(_ctx, getState());
		enterRule(_localctx, 1200, RULE_a_expr_at_time_zone);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8963);
			a_expr_collate();
			setState(8968);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,570,_ctx) ) {
			case 1:
				{
				setState(8964);
				match(AT);
				setState(8965);
				match(TIME);
				setState(8966);
				match(ZONE);
				setState(8967);
				a_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_collateContext extends ParserRuleContext {
		public A_expr_typecastContext a_expr_typecast() {
			return getRuleContext(A_expr_typecastContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public A_expr_collateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_collate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_collate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_collate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_collate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_collateContext a_expr_collate() throws RecognitionException {
		A_expr_collateContext _localctx = new A_expr_collateContext(_ctx, getState());
		enterRule(_localctx, 1202, RULE_a_expr_collate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8970);
			a_expr_typecast();
			setState(8973);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
			case 1:
				{
				setState(8971);
				match(COLLATE);
				setState(8972);
				any_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_typecastContext extends ParserRuleContext {
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public List<TerminalNode> TYPECAST() { return getTokens(PostgreSQLParser.TYPECAST); }
		public TerminalNode TYPECAST(int i) {
			return getToken(PostgreSQLParser.TYPECAST, i);
		}
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public A_expr_typecastContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_typecast; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_typecast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_typecast(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_typecast(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_typecastContext a_expr_typecast() throws RecognitionException {
		A_expr_typecastContext _localctx = new A_expr_typecastContext(_ctx, getState());
		enterRule(_localctx, 1204, RULE_a_expr_typecast);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8975);
			c_expr();
			setState(8980);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==TYPECAST) {
				{
				{
				setState(8976);
				match(TYPECAST);
				setState(8977);
				typename();
				}
				}
				setState(8982);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class B_exprContext extends ParserRuleContext {
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public Qual_opContext qual_op() {
			return getRuleContext(Qual_opContext.class,0);
		}
		public TerminalNode CARET() { return getToken(PostgreSQLParser.CARET, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode SLASH() { return getToken(PostgreSQLParser.SLASH, 0); }
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode LT() { return getToken(PostgreSQLParser.LT, 0); }
		public TerminalNode GT() { return getToken(PostgreSQLParser.GT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode LESS_EQUALS() { return getToken(PostgreSQLParser.LESS_EQUALS, 0); }
		public TerminalNode GREATER_EQUALS() { return getToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		public TerminalNode NOT_EQUALS() { return getToken(PostgreSQLParser.NOT_EQUALS, 0); }
		public TerminalNode TYPECAST() { return getToken(PostgreSQLParser.TYPECAST, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public B_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_b_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterB_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitB_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitB_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final B_exprContext b_expr() throws RecognitionException {
		return b_expr(0);
	}

	private B_exprContext b_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		B_exprContext _localctx = new B_exprContext(_ctx, _parentState);
		B_exprContext _prevctx = _localctx;
		int _startState = 1206;
		enterRecursionRule(_localctx, 1206, RULE_b_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8990);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
			case 1:
				{
				setState(8984);
				c_expr();
				}
				break;
			case 2:
				{
				setState(8985);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8986);
				b_expr(9);
				}
				break;
			case 3:
				{
				setState(8987);
				qual_op();
				setState(8988);
				b_expr(3);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(9031);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,577,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(9029);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,576,_ctx) ) {
					case 1:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8992);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(8993);
						match(CARET);
						setState(8994);
						b_expr(9);
						}
						break;
					case 2:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8995);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(8996);
						_la = _input.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 134234624L) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(8997);
						b_expr(8);
						}
						break;
					case 3:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8998);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(8999);
						_la = _input.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(9000);
						b_expr(7);
						}
						break;
					case 4:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9001);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(9002);
						qual_op();
						setState(9003);
						b_expr(6);
						}
						break;
					case 5:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9005);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(9006);
						_la = _input.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 44237824L) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(9007);
						b_expr(5);
						}
						break;
					case 6:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9008);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(9009);
						match(TYPECAST);
						setState(9010);
						typename();
						}
						break;
					case 7:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9011);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(9012);
						qual_op();
						}
						break;
					case 8:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9013);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(9014);
						match(IS);
						setState(9016);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(9015);
							match(NOT);
							}
						}

						setState(9027);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case DISTINCT:
							{
							setState(9018);
							match(DISTINCT);
							setState(9019);
							match(FROM);
							setState(9020);
							b_expr(0);
							}
							break;
						case OF:
							{
							setState(9021);
							match(OF);
							setState(9022);
							match(OPEN_PAREN);
							setState(9023);
							type_list();
							setState(9024);
							match(CLOSE_PAREN);
							}
							break;
						case DOCUMENT_P:
							{
							setState(9026);
							match(DOCUMENT_P);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				setState(9033);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,577,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class C_exprContext extends ParserRuleContext {
		public C_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_expr; }
	 
		public C_exprContext() { }
		public void copyFrom(C_exprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class C_expr_existsContext extends C_exprContext {
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public C_expr_existsContext(C_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterC_expr_exists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitC_expr_exists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitC_expr_exists(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class C_expr_caseContext extends C_exprContext {
		public Case_exprContext case_expr() {
			return getRuleContext(Case_exprContext.class,0);
		}
		public C_expr_caseContext(C_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterC_expr_case(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitC_expr_case(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitC_expr_case(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class C_expr_exprContext extends C_exprContext {
		public A_exprContext a_expr_in_parens;
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Array_exprContext array_expr() {
			return getRuleContext(Array_exprContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(PostgreSQLParser.PARAM, 0); }
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public TerminalNode GROUPING() { return getToken(PostgreSQLParser.GROUPING, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public ColumnrefContext columnref() {
			return getRuleContext(ColumnrefContext.class,0);
		}
		public AexprconstContext aexprconst() {
			return getRuleContext(AexprconstContext.class,0);
		}
		public PlsqlvariablenameContext plsqlvariablename() {
			return getRuleContext(PlsqlvariablenameContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Func_exprContext func_expr() {
			return getRuleContext(Func_exprContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Explicit_rowContext explicit_row() {
			return getRuleContext(Explicit_rowContext.class,0);
		}
		public Implicit_rowContext implicit_row() {
			return getRuleContext(Implicit_rowContext.class,0);
		}
		public List<RowContext> row() {
			return getRuleContexts(RowContext.class);
		}
		public RowContext row(int i) {
			return getRuleContext(RowContext.class,i);
		}
		public TerminalNode OVERLAPS() { return getToken(PostgreSQLParser.OVERLAPS, 0); }
		public C_expr_exprContext(C_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterC_expr_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitC_expr_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitC_expr_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_exprContext c_expr() throws RecognitionException {
		C_exprContext _localctx = new C_exprContext(_ctx, getState());
		enterRule(_localctx, 1208, RULE_c_expr);
		try {
			setState(9070);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,580,_ctx) ) {
			case 1:
				_localctx = new C_expr_existsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(9034);
				match(EXISTS);
				setState(9035);
				select_with_parens();
				}
				break;
			case 2:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(9036);
				match(ARRAY);
				setState(9039);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAREN:
					{
					setState(9037);
					select_with_parens();
					}
					break;
				case OPEN_BRACKET:
					{
					setState(9038);
					array_expr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(9041);
				match(PARAM);
				setState(9042);
				opt_indirection();
				}
				break;
			case 4:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(9043);
				match(GROUPING);
				setState(9044);
				match(OPEN_PAREN);
				setState(9045);
				expr_list();
				setState(9046);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(9048);
				match(UNIQUE);
				setState(9049);
				select_with_parens();
				}
				break;
			case 6:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(9050);
				columnref();
				}
				break;
			case 7:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(9051);
				aexprconst();
				}
				break;
			case 8:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(9052);
				plsqlvariablename();
				}
				break;
			case 9:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(9053);
				match(OPEN_PAREN);
				setState(9054);
				((C_expr_exprContext)_localctx).a_expr_in_parens = a_expr();
				setState(9055);
				match(CLOSE_PAREN);
				setState(9056);
				opt_indirection();
				}
				break;
			case 10:
				_localctx = new C_expr_caseContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(9058);
				case_expr();
				}
				break;
			case 11:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(9059);
				func_expr();
				}
				break;
			case 12:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(9060);
				select_with_parens();
				setState(9062);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
				case 1:
					{
					setState(9061);
					indirection();
					}
					break;
				}
				}
				break;
			case 13:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(9064);
				explicit_row();
				}
				break;
			case 14:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(9065);
				implicit_row();
				}
				break;
			case 15:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(9066);
				row();
				setState(9067);
				match(OVERLAPS);
				setState(9068);
				row();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PlsqlvariablenameContext extends ParserRuleContext {
		public TerminalNode PLSQLVARIABLENAME() { return getToken(PostgreSQLParser.PLSQLVARIABLENAME, 0); }
		public PlsqlvariablenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsqlvariablename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsqlvariablename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsqlvariablename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsqlvariablename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlsqlvariablenameContext plsqlvariablename() throws RecognitionException {
		PlsqlvariablenameContext _localctx = new PlsqlvariablenameContext(_ctx, getState());
		enterRule(_localctx, 1210, RULE_plsqlvariablename);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9072);
			match(PLSQLVARIABLENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_applicationContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public TerminalNode VARIADIC() { return getToken(PostgreSQLParser.VARIADIC, 0); }
		public Func_arg_exprContext func_arg_expr() {
			return getRuleContext(Func_arg_exprContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Func_applicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_application; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_application(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_application(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_application(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_applicationContext func_application() throws RecognitionException {
		Func_applicationContext _localctx = new Func_applicationContext(_ctx, getState());
		enterRule(_localctx, 1212, RULE_func_application);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9074);
			func_name();
			setState(9075);
			match(OPEN_PAREN);
			setState(9094);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				{
				setState(9076);
				func_arg_list();
				setState(9080);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9077);
					match(COMMA);
					setState(9078);
					match(VARIADIC);
					setState(9079);
					func_arg_expr();
					}
				}

				setState(9082);
				opt_sort_clause();
				}
				break;
			case VARIADIC:
				{
				setState(9084);
				match(VARIADIC);
				setState(9085);
				func_arg_expr();
				setState(9086);
				opt_sort_clause();
				}
				break;
			case ALL:
			case DISTINCT:
				{
				setState(9088);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9089);
				func_arg_list();
				setState(9090);
				opt_sort_clause();
				}
				break;
			case STAR:
				{
				setState(9092);
				match(STAR);
				}
				break;
			case CLOSE_PAREN:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9096);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_exprContext extends ParserRuleContext {
		public Func_applicationContext func_application() {
			return getRuleContext(Func_applicationContext.class,0);
		}
		public Within_group_clauseContext within_group_clause() {
			return getRuleContext(Within_group_clauseContext.class,0);
		}
		public Filter_clauseContext filter_clause() {
			return getRuleContext(Filter_clauseContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Func_expr_common_subexprContext func_expr_common_subexpr() {
			return getRuleContext(Func_expr_common_subexprContext.class,0);
		}
		public Func_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_exprContext func_expr() throws RecognitionException {
		Func_exprContext _localctx = new Func_exprContext(_ctx, getState());
		enterRule(_localctx, 1214, RULE_func_expr);
		try {
			setState(9104);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,583,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9098);
				func_application();
				setState(9099);
				within_group_clause();
				setState(9100);
				filter_clause();
				setState(9101);
				over_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9103);
				func_expr_common_subexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_expr_windowlessContext extends ParserRuleContext {
		public Func_applicationContext func_application() {
			return getRuleContext(Func_applicationContext.class,0);
		}
		public Func_expr_common_subexprContext func_expr_common_subexpr() {
			return getRuleContext(Func_expr_common_subexprContext.class,0);
		}
		public Func_expr_windowlessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_expr_windowless; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_expr_windowless(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_expr_windowless(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_expr_windowless(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_expr_windowlessContext func_expr_windowless() throws RecognitionException {
		Func_expr_windowlessContext _localctx = new Func_expr_windowlessContext(_ctx, getState());
		enterRule(_localctx, 1216, RULE_func_expr_windowless);
		try {
			setState(9108);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,584,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9106);
				func_application();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9107);
				func_expr_common_subexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_expr_common_subexprContext extends ParserRuleContext {
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PostgreSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PostgreSQLParser.CURRENT_TIME, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(PostgreSQLParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PostgreSQLParser.LOCALTIMESTAMP, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PostgreSQLParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PostgreSQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode EXTRACT() { return getToken(PostgreSQLParser.EXTRACT, 0); }
		public Extract_listContext extract_list() {
			return getRuleContext(Extract_listContext.class,0);
		}
		public TerminalNode NORMALIZE() { return getToken(PostgreSQLParser.NORMALIZE, 0); }
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Unicode_normal_formContext unicode_normal_form() {
			return getRuleContext(Unicode_normal_formContext.class,0);
		}
		public TerminalNode OVERLAY() { return getToken(PostgreSQLParser.OVERLAY, 0); }
		public Overlay_listContext overlay_list() {
			return getRuleContext(Overlay_listContext.class,0);
		}
		public TerminalNode POSITION() { return getToken(PostgreSQLParser.POSITION, 0); }
		public Position_listContext position_list() {
			return getRuleContext(Position_listContext.class,0);
		}
		public TerminalNode SUBSTRING() { return getToken(PostgreSQLParser.SUBSTRING, 0); }
		public Substr_listContext substr_list() {
			return getRuleContext(Substr_listContext.class,0);
		}
		public TerminalNode TREAT() { return getToken(PostgreSQLParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(PostgreSQLParser.TRIM, 0); }
		public Trim_listContext trim_list() {
			return getRuleContext(Trim_listContext.class,0);
		}
		public TerminalNode BOTH() { return getToken(PostgreSQLParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(PostgreSQLParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(PostgreSQLParser.TRAILING, 0); }
		public TerminalNode NULLIF() { return getToken(PostgreSQLParser.NULLIF, 0); }
		public TerminalNode COALESCE() { return getToken(PostgreSQLParser.COALESCE, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode GREATEST() { return getToken(PostgreSQLParser.GREATEST, 0); }
		public TerminalNode LEAST() { return getToken(PostgreSQLParser.LEAST, 0); }
		public TerminalNode XMLCONCAT() { return getToken(PostgreSQLParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PostgreSQLParser.XMLELEMENT, 0); }
		public TerminalNode NAME_P() { return getToken(PostgreSQLParser.NAME_P, 0); }
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Xml_attributesContext xml_attributes() {
			return getRuleContext(Xml_attributesContext.class,0);
		}
		public TerminalNode XMLEXISTS() { return getToken(PostgreSQLParser.XMLEXISTS, 0); }
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public Xmlexists_argumentContext xmlexists_argument() {
			return getRuleContext(Xmlexists_argumentContext.class,0);
		}
		public TerminalNode XMLFOREST() { return getToken(PostgreSQLParser.XMLFOREST, 0); }
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(PostgreSQLParser.XMLPARSE, 0); }
		public Document_or_contentContext document_or_content() {
			return getRuleContext(Document_or_contentContext.class,0);
		}
		public Xml_whitespace_optionContext xml_whitespace_option() {
			return getRuleContext(Xml_whitespace_optionContext.class,0);
		}
		public TerminalNode XMLPI() { return getToken(PostgreSQLParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(PostgreSQLParser.XMLROOT, 0); }
		public TerminalNode XML_P() { return getToken(PostgreSQLParser.XML_P, 0); }
		public Xml_root_versionContext xml_root_version() {
			return getRuleContext(Xml_root_versionContext.class,0);
		}
		public Opt_xml_root_standaloneContext opt_xml_root_standalone() {
			return getRuleContext(Opt_xml_root_standaloneContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(PostgreSQLParser.XMLSERIALIZE, 0); }
		public SimpletypenameContext simpletypename() {
			return getRuleContext(SimpletypenameContext.class,0);
		}
		public Func_expr_common_subexprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_expr_common_subexpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_expr_common_subexpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_expr_common_subexpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_expr_common_subexpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_expr_common_subexprContext func_expr_common_subexpr() throws RecognitionException {
		Func_expr_common_subexprContext _localctx = new Func_expr_common_subexprContext(_ctx, getState());
		enterRule(_localctx, 1218, RULE_func_expr_common_subexpr);
		int _la;
		try {
			setState(9287);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLLATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(9110);
				match(COLLATION);
				setState(9111);
				match(FOR);
				setState(9112);
				match(OPEN_PAREN);
				setState(9113);
				a_expr();
				setState(9114);
				match(CLOSE_PAREN);
				}
				break;
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(9116);
				match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 3);
				{
				setState(9117);
				match(CURRENT_TIME);
				setState(9122);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,585,_ctx) ) {
				case 1:
					{
					setState(9118);
					match(OPEN_PAREN);
					setState(9119);
					iconst();
					setState(9120);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 4);
				{
				setState(9124);
				match(CURRENT_TIMESTAMP);
				setState(9129);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
				case 1:
					{
					setState(9125);
					match(OPEN_PAREN);
					setState(9126);
					iconst();
					setState(9127);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 5);
				{
				setState(9131);
				match(LOCALTIME);
				setState(9136);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,587,_ctx) ) {
				case 1:
					{
					setState(9132);
					match(OPEN_PAREN);
					setState(9133);
					iconst();
					setState(9134);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 6);
				{
				setState(9138);
				match(LOCALTIMESTAMP);
				setState(9143);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
				case 1:
					{
					setState(9139);
					match(OPEN_PAREN);
					setState(9140);
					iconst();
					setState(9141);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case CURRENT_ROLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(9145);
				match(CURRENT_ROLE);
				}
				break;
			case CURRENT_USER:
				enterOuterAlt(_localctx, 8);
				{
				setState(9146);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				enterOuterAlt(_localctx, 9);
				{
				setState(9147);
				match(SESSION_USER);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 10);
				{
				setState(9148);
				match(USER);
				}
				break;
			case CURRENT_CATALOG:
				enterOuterAlt(_localctx, 11);
				{
				setState(9149);
				match(CURRENT_CATALOG);
				}
				break;
			case CURRENT_SCHEMA:
				enterOuterAlt(_localctx, 12);
				{
				setState(9150);
				match(CURRENT_SCHEMA);
				}
				break;
			case CAST:
				enterOuterAlt(_localctx, 13);
				{
				setState(9151);
				match(CAST);
				setState(9152);
				match(OPEN_PAREN);
				setState(9153);
				a_expr();
				setState(9154);
				match(AS);
				setState(9155);
				typename();
				setState(9156);
				match(CLOSE_PAREN);
				}
				break;
			case EXTRACT:
				enterOuterAlt(_localctx, 14);
				{
				setState(9158);
				match(EXTRACT);
				setState(9159);
				match(OPEN_PAREN);
				setState(9160);
				extract_list();
				setState(9161);
				match(CLOSE_PAREN);
				}
				break;
			case NORMALIZE:
				enterOuterAlt(_localctx, 15);
				{
				setState(9163);
				match(NORMALIZE);
				setState(9164);
				match(OPEN_PAREN);
				setState(9165);
				a_expr();
				setState(9168);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9166);
					match(COMMA);
					setState(9167);
					unicode_normal_form();
					}
				}

				setState(9170);
				match(CLOSE_PAREN);
				}
				break;
			case OVERLAY:
				enterOuterAlt(_localctx, 16);
				{
				setState(9172);
				match(OVERLAY);
				setState(9173);
				match(OPEN_PAREN);
				setState(9174);
				overlay_list();
				setState(9175);
				match(CLOSE_PAREN);
				}
				break;
			case POSITION:
				enterOuterAlt(_localctx, 17);
				{
				setState(9177);
				match(POSITION);
				setState(9178);
				match(OPEN_PAREN);
				setState(9179);
				position_list();
				setState(9180);
				match(CLOSE_PAREN);
				}
				break;
			case SUBSTRING:
				enterOuterAlt(_localctx, 18);
				{
				setState(9182);
				match(SUBSTRING);
				setState(9183);
				match(OPEN_PAREN);
				setState(9184);
				substr_list();
				setState(9185);
				match(CLOSE_PAREN);
				}
				break;
			case TREAT:
				enterOuterAlt(_localctx, 19);
				{
				setState(9187);
				match(TREAT);
				setState(9188);
				match(OPEN_PAREN);
				setState(9189);
				a_expr();
				setState(9190);
				match(AS);
				setState(9191);
				typename();
				setState(9192);
				match(CLOSE_PAREN);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 20);
				{
				setState(9194);
				match(TRIM);
				setState(9195);
				match(OPEN_PAREN);
				setState(9197);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & 72057611217797121L) != 0)) {
					{
					setState(9196);
					_la = _input.LA(1);
					if ( !(((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & 72057611217797121L) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9199);
				trim_list();
				setState(9200);
				match(CLOSE_PAREN);
				}
				break;
			case NULLIF:
				enterOuterAlt(_localctx, 21);
				{
				setState(9202);
				match(NULLIF);
				setState(9203);
				match(OPEN_PAREN);
				setState(9204);
				a_expr();
				setState(9205);
				match(COMMA);
				setState(9206);
				a_expr();
				setState(9207);
				match(CLOSE_PAREN);
				}
				break;
			case COALESCE:
				enterOuterAlt(_localctx, 22);
				{
				setState(9209);
				match(COALESCE);
				setState(9210);
				match(OPEN_PAREN);
				setState(9211);
				expr_list();
				setState(9212);
				match(CLOSE_PAREN);
				}
				break;
			case GREATEST:
				enterOuterAlt(_localctx, 23);
				{
				setState(9214);
				match(GREATEST);
				setState(9215);
				match(OPEN_PAREN);
				setState(9216);
				expr_list();
				setState(9217);
				match(CLOSE_PAREN);
				}
				break;
			case LEAST:
				enterOuterAlt(_localctx, 24);
				{
				setState(9219);
				match(LEAST);
				setState(9220);
				match(OPEN_PAREN);
				setState(9221);
				expr_list();
				setState(9222);
				match(CLOSE_PAREN);
				}
				break;
			case XMLCONCAT:
				enterOuterAlt(_localctx, 25);
				{
				setState(9224);
				match(XMLCONCAT);
				setState(9225);
				match(OPEN_PAREN);
				setState(9226);
				expr_list();
				setState(9227);
				match(CLOSE_PAREN);
				}
				break;
			case XMLELEMENT:
				enterOuterAlt(_localctx, 26);
				{
				setState(9229);
				match(XMLELEMENT);
				setState(9230);
				match(OPEN_PAREN);
				setState(9231);
				match(NAME_P);
				setState(9232);
				collabel();
				setState(9238);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9233);
					match(COMMA);
					setState(9236);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
					case 1:
						{
						setState(9234);
						xml_attributes();
						}
						break;
					case 2:
						{
						setState(9235);
						expr_list();
						}
						break;
					}
					}
				}

				setState(9240);
				match(CLOSE_PAREN);
				}
				break;
			case XMLEXISTS:
				enterOuterAlt(_localctx, 27);
				{
				setState(9242);
				match(XMLEXISTS);
				setState(9243);
				match(OPEN_PAREN);
				setState(9244);
				c_expr();
				setState(9245);
				xmlexists_argument();
				setState(9246);
				match(CLOSE_PAREN);
				}
				break;
			case XMLFOREST:
				enterOuterAlt(_localctx, 28);
				{
				setState(9248);
				match(XMLFOREST);
				setState(9249);
				match(OPEN_PAREN);
				setState(9250);
				xml_attribute_list();
				setState(9251);
				match(CLOSE_PAREN);
				}
				break;
			case XMLPARSE:
				enterOuterAlt(_localctx, 29);
				{
				setState(9253);
				match(XMLPARSE);
				setState(9254);
				match(OPEN_PAREN);
				setState(9255);
				document_or_content();
				setState(9256);
				a_expr();
				setState(9257);
				xml_whitespace_option();
				setState(9258);
				match(CLOSE_PAREN);
				}
				break;
			case XMLPI:
				enterOuterAlt(_localctx, 30);
				{
				setState(9260);
				match(XMLPI);
				setState(9261);
				match(OPEN_PAREN);
				setState(9262);
				match(NAME_P);
				setState(9263);
				collabel();
				setState(9266);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9264);
					match(COMMA);
					setState(9265);
					a_expr();
					}
				}

				setState(9268);
				match(CLOSE_PAREN);
				}
				break;
			case XMLROOT:
				enterOuterAlt(_localctx, 31);
				{
				setState(9270);
				match(XMLROOT);
				setState(9271);
				match(OPEN_PAREN);
				setState(9272);
				match(XML_P);
				setState(9273);
				a_expr();
				setState(9274);
				match(COMMA);
				setState(9275);
				xml_root_version();
				setState(9276);
				opt_xml_root_standalone();
				setState(9277);
				match(CLOSE_PAREN);
				}
				break;
			case XMLSERIALIZE:
				enterOuterAlt(_localctx, 32);
				{
				setState(9279);
				match(XMLSERIALIZE);
				setState(9280);
				match(OPEN_PAREN);
				setState(9281);
				document_or_content();
				setState(9282);
				a_expr();
				setState(9283);
				match(AS);
				setState(9284);
				simpletypename();
				setState(9285);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_root_versionContext extends ParserRuleContext {
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public Xml_root_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_root_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_root_version(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_root_version(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_root_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_root_versionContext xml_root_version() throws RecognitionException {
		Xml_root_versionContext _localctx = new Xml_root_versionContext(_ctx, getState());
		enterRule(_localctx, 1220, RULE_xml_root_version);
		try {
			setState(9294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9289);
				match(VERSION_P);
				setState(9290);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9291);
				match(VERSION_P);
				setState(9292);
				match(NO);
				setState(9293);
				match(VALUE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_xml_root_standaloneContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TerminalNode STANDALONE_P() { return getToken(PostgreSQLParser.STANDALONE_P, 0); }
		public TerminalNode YES_P() { return getToken(PostgreSQLParser.YES_P, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public Opt_xml_root_standaloneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_xml_root_standalone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_xml_root_standalone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_xml_root_standalone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_xml_root_standalone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_xml_root_standaloneContext opt_xml_root_standalone() throws RecognitionException {
		Opt_xml_root_standaloneContext _localctx = new Opt_xml_root_standaloneContext(_ctx, getState());
		enterRule(_localctx, 1222, RULE_opt_xml_root_standalone);
		try {
			setState(9307);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9296);
				match(COMMA);
				setState(9297);
				match(STANDALONE_P);
				setState(9298);
				match(YES_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9299);
				match(COMMA);
				setState(9300);
				match(STANDALONE_P);
				setState(9301);
				match(NO);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9302);
				match(COMMA);
				setState(9303);
				match(STANDALONE_P);
				setState(9304);
				match(NO);
				setState(9305);
				match(VALUE_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_attributesContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(PostgreSQLParser.XMLATTRIBUTES, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Xml_attributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_attributes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_attributes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_attributes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attributesContext xml_attributes() throws RecognitionException {
		Xml_attributesContext _localctx = new Xml_attributesContext(_ctx, getState());
		enterRule(_localctx, 1224, RULE_xml_attributes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9309);
			match(XMLATTRIBUTES);
			setState(9310);
			match(OPEN_PAREN);
			setState(9311);
			xml_attribute_list();
			setState(9312);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_attribute_listContext extends ParserRuleContext {
		public List<Xml_attribute_elContext> xml_attribute_el() {
			return getRuleContexts(Xml_attribute_elContext.class);
		}
		public Xml_attribute_elContext xml_attribute_el(int i) {
			return getRuleContext(Xml_attribute_elContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Xml_attribute_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attribute_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_attribute_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_attribute_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_attribute_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attribute_listContext xml_attribute_list() throws RecognitionException {
		Xml_attribute_listContext _localctx = new Xml_attribute_listContext(_ctx, getState());
		enterRule(_localctx, 1226, RULE_xml_attribute_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9314);
			xml_attribute_el();
			setState(9319);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9315);
				match(COMMA);
				setState(9316);
				xml_attribute_el();
				}
				}
				setState(9321);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_attribute_elContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Xml_attribute_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attribute_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_attribute_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_attribute_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_attribute_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attribute_elContext xml_attribute_el() throws RecognitionException {
		Xml_attribute_elContext _localctx = new Xml_attribute_elContext(_ctx, getState());
		enterRule(_localctx, 1228, RULE_xml_attribute_el);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9322);
			a_expr();
			setState(9325);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(9323);
				match(AS);
				setState(9324);
				collabel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Document_or_contentContext extends ParserRuleContext {
		public TerminalNode DOCUMENT_P() { return getToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public TerminalNode CONTENT_P() { return getToken(PostgreSQLParser.CONTENT_P, 0); }
		public Document_or_contentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_document_or_content; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDocument_or_content(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDocument_or_content(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDocument_or_content(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Document_or_contentContext document_or_content() throws RecognitionException {
		Document_or_contentContext _localctx = new Document_or_contentContext(_ctx, getState());
		enterRule(_localctx, 1230, RULE_document_or_content);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9327);
			_la = _input.LA(1);
			if ( !(_la==CONTENT_P || _la==DOCUMENT_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_whitespace_optionContext extends ParserRuleContext {
		public TerminalNode PRESERVE() { return getToken(PostgreSQLParser.PRESERVE, 0); }
		public TerminalNode WHITESPACE_P() { return getToken(PostgreSQLParser.WHITESPACE_P, 0); }
		public TerminalNode STRIP_P() { return getToken(PostgreSQLParser.STRIP_P, 0); }
		public Xml_whitespace_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_whitespace_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_whitespace_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_whitespace_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_whitespace_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_whitespace_optionContext xml_whitespace_option() throws RecognitionException {
		Xml_whitespace_optionContext _localctx = new Xml_whitespace_optionContext(_ctx, getState());
		enterRule(_localctx, 1232, RULE_xml_whitespace_option);
		try {
			setState(9334);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRESERVE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9329);
				match(PRESERVE);
				setState(9330);
				match(WHITESPACE_P);
				}
				break;
			case STRIP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(9331);
				match(STRIP_P);
				setState(9332);
				match(WHITESPACE_P);
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmlexists_argumentContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(PostgreSQLParser.PASSING, 0); }
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public List<Xml_passing_mechContext> xml_passing_mech() {
			return getRuleContexts(Xml_passing_mechContext.class);
		}
		public Xml_passing_mechContext xml_passing_mech(int i) {
			return getRuleContext(Xml_passing_mechContext.class,i);
		}
		public Xmlexists_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlexists_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmlexists_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmlexists_argument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmlexists_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlexists_argumentContext xmlexists_argument() throws RecognitionException {
		Xmlexists_argumentContext _localctx = new Xmlexists_argumentContext(_ctx, getState());
		enterRule(_localctx, 1234, RULE_xmlexists_argument);
		try {
			setState(9351);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,600,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9336);
				match(PASSING);
				setState(9337);
				c_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9338);
				match(PASSING);
				setState(9339);
				c_expr();
				setState(9340);
				xml_passing_mech();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9342);
				match(PASSING);
				setState(9343);
				xml_passing_mech();
				setState(9344);
				c_expr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9346);
				match(PASSING);
				setState(9347);
				xml_passing_mech();
				setState(9348);
				c_expr();
				setState(9349);
				xml_passing_mech();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_passing_mechContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode REF() { return getToken(PostgreSQLParser.REF, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public Xml_passing_mechContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_passing_mech; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_passing_mech(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_passing_mech(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_passing_mech(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_passing_mechContext xml_passing_mech() throws RecognitionException {
		Xml_passing_mechContext _localctx = new Xml_passing_mechContext(_ctx, getState());
		enterRule(_localctx, 1236, RULE_xml_passing_mech);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9353);
			match(BY);
			setState(9354);
			_la = _input.LA(1);
			if ( !(_la==REF || _la==VALUE_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Within_group_clauseContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(PostgreSQLParser.WITHIN, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Within_group_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_group_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWithin_group_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWithin_group_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWithin_group_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Within_group_clauseContext within_group_clause() throws RecognitionException {
		Within_group_clauseContext _localctx = new Within_group_clauseContext(_ctx, getState());
		enterRule(_localctx, 1238, RULE_within_group_clause);
		try {
			setState(9363);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,601,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9356);
				match(WITHIN);
				setState(9357);
				match(GROUP_P);
				setState(9358);
				match(OPEN_PAREN);
				setState(9359);
				sort_clause();
				setState(9360);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Filter_clauseContext extends ParserRuleContext {
		public TerminalNode FILTER() { return getToken(PostgreSQLParser.FILTER, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Filter_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filter_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFilter_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFilter_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFilter_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Filter_clauseContext filter_clause() throws RecognitionException {
		Filter_clauseContext _localctx = new Filter_clauseContext(_ctx, getState());
		enterRule(_localctx, 1240, RULE_filter_clause);
		try {
			setState(9372);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9365);
				match(FILTER);
				setState(9366);
				match(OPEN_PAREN);
				setState(9367);
				match(WHERE);
				setState(9368);
				a_expr();
				setState(9369);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_clauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(PostgreSQLParser.WINDOW, 0); }
		public Window_definition_listContext window_definition_list() {
			return getRuleContext(Window_definition_listContext.class,0);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_clauseContext window_clause() throws RecognitionException {
		Window_clauseContext _localctx = new Window_clauseContext(_ctx, getState());
		enterRule(_localctx, 1242, RULE_window_clause);
		try {
			setState(9377);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WINDOW:
				enterOuterAlt(_localctx, 1);
				{
				setState(9374);
				match(WINDOW);
				setState(9375);
				window_definition_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_definition_listContext extends ParserRuleContext {
		public List<Window_definitionContext> window_definition() {
			return getRuleContexts(Window_definitionContext.class);
		}
		public Window_definitionContext window_definition(int i) {
			return getRuleContext(Window_definitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Window_definition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_definition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_definition_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_definition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_definition_listContext window_definition_list() throws RecognitionException {
		Window_definition_listContext _localctx = new Window_definition_listContext(_ctx, getState());
		enterRule(_localctx, 1244, RULE_window_definition_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9379);
			window_definition();
			setState(9384);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,604,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9380);
					match(COMMA);
					setState(9381);
					window_definition();
					}
					} 
				}
				setState(9386);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,604,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_definitionContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public Window_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_definitionContext window_definition() throws RecognitionException {
		Window_definitionContext _localctx = new Window_definitionContext(_ctx, getState());
		enterRule(_localctx, 1246, RULE_window_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9387);
			colid();
			setState(9388);
			match(AS);
			setState(9389);
			window_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(PostgreSQLParser.OVER, 0); }
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 1248, RULE_over_clause);
		try {
			setState(9397);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,606,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9391);
				match(OVER);
				setState(9394);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAREN:
					{
					setState(9392);
					window_specification();
					}
					break;
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case IS:
				case LEFT:
				case OUTER_P:
				case OVER:
				case RIGHT:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					setState(9393);
					colid();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_specificationContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Opt_existing_window_nameContext opt_existing_window_name() {
			return getRuleContext(Opt_existing_window_nameContext.class,0);
		}
		public Opt_partition_clauseContext opt_partition_clause() {
			return getRuleContext(Opt_partition_clauseContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public Opt_frame_clauseContext opt_frame_clause() {
			return getRuleContext(Opt_frame_clauseContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Window_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_specificationContext window_specification() throws RecognitionException {
		Window_specificationContext _localctx = new Window_specificationContext(_ctx, getState());
		enterRule(_localctx, 1250, RULE_window_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9399);
			match(OPEN_PAREN);
			setState(9400);
			opt_existing_window_name();
			setState(9401);
			opt_partition_clause();
			setState(9402);
			opt_sort_clause();
			setState(9403);
			opt_frame_clause();
			setState(9404);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_existing_window_nameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Opt_existing_window_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_existing_window_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_existing_window_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_existing_window_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_existing_window_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_existing_window_nameContext opt_existing_window_name() throws RecognitionException {
		Opt_existing_window_nameContext _localctx = new Opt_existing_window_nameContext(_ctx, getState());
		enterRule(_localctx, 1252, RULE_opt_existing_window_name);
		try {
			setState(9408);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,607,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9406);
				colid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_partition_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_partition_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_partition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_partition_clauseContext opt_partition_clause() throws RecognitionException {
		Opt_partition_clauseContext _localctx = new Opt_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 1254, RULE_opt_partition_clause);
		try {
			setState(9414);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARTITION:
				enterOuterAlt(_localctx, 1);
				{
				setState(9410);
				match(PARTITION);
				setState(9411);
				match(BY);
				setState(9412);
				expr_list();
				}
				break;
			case CLOSE_PAREN:
			case ORDER:
			case RANGE:
			case ROWS:
			case GROUPS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_frame_clauseContext extends ParserRuleContext {
		public TerminalNode RANGE() { return getToken(PostgreSQLParser.RANGE, 0); }
		public Frame_extentContext frame_extent() {
			return getRuleContext(Frame_extentContext.class,0);
		}
		public Opt_window_exclusion_clauseContext opt_window_exclusion_clause() {
			return getRuleContext(Opt_window_exclusion_clauseContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode GROUPS() { return getToken(PostgreSQLParser.GROUPS, 0); }
		public Opt_frame_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_frame_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_frame_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_frame_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_frame_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_frame_clauseContext opt_frame_clause() throws RecognitionException {
		Opt_frame_clauseContext _localctx = new Opt_frame_clauseContext(_ctx, getState());
		enterRule(_localctx, 1256, RULE_opt_frame_clause);
		try {
			setState(9429);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RANGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9416);
				match(RANGE);
				setState(9417);
				frame_extent();
				setState(9418);
				opt_window_exclusion_clause();
				}
				break;
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				setState(9420);
				match(ROWS);
				setState(9421);
				frame_extent();
				setState(9422);
				opt_window_exclusion_clause();
				}
				break;
			case GROUPS:
				enterOuterAlt(_localctx, 3);
				{
				setState(9424);
				match(GROUPS);
				setState(9425);
				frame_extent();
				setState(9426);
				opt_window_exclusion_clause();
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Frame_extentContext extends ParserRuleContext {
		public List<Frame_boundContext> frame_bound() {
			return getRuleContexts(Frame_boundContext.class);
		}
		public Frame_boundContext frame_bound(int i) {
			return getRuleContext(Frame_boundContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public Frame_extentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_extent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrame_extent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrame_extent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrame_extent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_extentContext frame_extent() throws RecognitionException {
		Frame_extentContext _localctx = new Frame_extentContext(_ctx, getState());
		enterRule(_localctx, 1258, RULE_frame_extent);
		try {
			setState(9437);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,610,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9431);
				frame_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9432);
				match(BETWEEN);
				setState(9433);
				frame_bound();
				setState(9434);
				match(AND);
				setState(9435);
				frame_bound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Frame_boundContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(PostgreSQLParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(PostgreSQLParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(PostgreSQLParser.FOLLOWING, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Frame_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrame_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrame_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrame_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_boundContext frame_bound() throws RecognitionException {
		Frame_boundContext _localctx = new Frame_boundContext(_ctx, getState());
		enterRule(_localctx, 1260, RULE_frame_bound);
		int _la;
		try {
			setState(9446);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,611,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9439);
				match(UNBOUNDED);
				setState(9440);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9441);
				match(CURRENT_P);
				setState(9442);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9443);
				a_expr();
				setState(9444);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_window_exclusion_clauseContext extends ParserRuleContext {
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLParser.EXCLUDE, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLParser.TIES, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode OTHERS() { return getToken(PostgreSQLParser.OTHERS, 0); }
		public Opt_window_exclusion_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_window_exclusion_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_window_exclusion_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_window_exclusion_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_window_exclusion_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_window_exclusion_clauseContext opt_window_exclusion_clause() throws RecognitionException {
		Opt_window_exclusion_clauseContext _localctx = new Opt_window_exclusion_clauseContext(_ctx, getState());
		enterRule(_localctx, 1262, RULE_opt_window_exclusion_clause);
		try {
			setState(9458);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXCLUDE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9448);
				match(EXCLUDE);
				setState(9455);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT_P:
					{
					setState(9449);
					match(CURRENT_P);
					setState(9450);
					match(ROW);
					}
					break;
				case GROUP_P:
					{
					setState(9451);
					match(GROUP_P);
					}
					break;
				case TIES:
					{
					setState(9452);
					match(TIES);
					}
					break;
				case NO:
					{
					setState(9453);
					match(NO);
					setState(9454);
					match(OTHERS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public RowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowContext row() throws RecognitionException {
		RowContext _localctx = new RowContext(_ctx, getState());
		enterRule(_localctx, 1264, RULE_row);
		int _la;
		try {
			setState(9472);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(9460);
				match(ROW);
				setState(9461);
				match(OPEN_PAREN);
				setState(9463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3620818277858553860L) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & -2120073201L) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & -1L) != 0) || ((((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & -1266637395197953L) != 0) || ((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & -1L) != 0) || ((((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & -1L) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & -576460752303423489L) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & -1153009465537069057L) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & -1L) != 0) || ((((_la - 587)) & ~0x3f) == 0 && ((1L << (_la - 587)) & -3150267939345661953L) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & 131537L) != 0)) {
					{
					setState(9462);
					expr_list();
					}
				}

				setState(9465);
				match(CLOSE_PAREN);
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(9466);
				match(OPEN_PAREN);
				setState(9467);
				expr_list();
				setState(9468);
				match(COMMA);
				setState(9469);
				a_expr();
				setState(9470);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Explicit_rowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Explicit_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicit_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplicit_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplicit_row(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplicit_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explicit_rowContext explicit_row() throws RecognitionException {
		Explicit_rowContext _localctx = new Explicit_rowContext(_ctx, getState());
		enterRule(_localctx, 1266, RULE_explicit_row);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9474);
			match(ROW);
			setState(9475);
			match(OPEN_PAREN);
			setState(9477);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3620818277858553860L) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & -2120073201L) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & -1L) != 0) || ((((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & -1266637395197953L) != 0) || ((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & -1L) != 0) || ((((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & -1L) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & -576460752303423489L) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & -1153009465537069057L) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & -1L) != 0) || ((((_la - 587)) & ~0x3f) == 0 && ((1L << (_la - 587)) & -3150267939345661953L) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & 131537L) != 0)) {
				{
				setState(9476);
				expr_list();
				}
			}

			setState(9479);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Implicit_rowContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Implicit_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implicit_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterImplicit_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitImplicit_row(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitImplicit_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implicit_rowContext implicit_row() throws RecognitionException {
		Implicit_rowContext _localctx = new Implicit_rowContext(_ctx, getState());
		enterRule(_localctx, 1268, RULE_implicit_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9481);
			match(OPEN_PAREN);
			setState(9482);
			expr_list();
			setState(9483);
			match(COMMA);
			setState(9484);
			a_expr();
			setState(9485);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sub_typeContext extends ParserRuleContext {
		public TerminalNode ANY() { return getToken(PostgreSQLParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(PostgreSQLParser.SOME, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Sub_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sub_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSub_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSub_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSub_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sub_typeContext sub_type() throws RecognitionException {
		Sub_typeContext _localctx = new Sub_typeContext(_ctx, getState());
		enterRule(_localctx, 1270, RULE_sub_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9487);
			_la = _input.LA(1);
			if ( !(((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 1152921504606846993L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class All_opContext extends ParserRuleContext {
		public TerminalNode Operator() { return getToken(PostgreSQLParser.Operator, 0); }
		public MathopContext mathop() {
			return getRuleContext(MathopContext.class,0);
		}
		public All_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAll_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAll_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAll_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_opContext all_op() throws RecognitionException {
		All_opContext _localctx = new All_opContext(_ctx, getState());
		enterRule(_localctx, 1272, RULE_all_op);
		try {
			setState(9491);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Operator:
				enterOuterAlt(_localctx, 1);
				{
				setState(9489);
				match(Operator);
				}
				break;
			case STAR:
			case EQUAL:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case PERCENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(9490);
				mathop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MathopContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode SLASH() { return getToken(PostgreSQLParser.SLASH, 0); }
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode CARET() { return getToken(PostgreSQLParser.CARET, 0); }
		public TerminalNode LT() { return getToken(PostgreSQLParser.LT, 0); }
		public TerminalNode GT() { return getToken(PostgreSQLParser.GT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode LESS_EQUALS() { return getToken(PostgreSQLParser.LESS_EQUALS, 0); }
		public TerminalNode GREATER_EQUALS() { return getToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		public TerminalNode NOT_EQUALS() { return getToken(PostgreSQLParser.NOT_EQUALS, 0); }
		public MathopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterMathop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitMathop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitMathop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathopContext mathop() throws RecognitionException {
		MathopContext _localctx = new MathopContext(_ctx, getState());
		enterRule(_localctx, 1274, RULE_mathop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9493);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 178517504L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Qual_opContext extends ParserRuleContext {
		public TerminalNode Operator() { return getToken(PostgreSQLParser.Operator, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Qual_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qual_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterQual_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitQual_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitQual_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qual_opContext qual_op() throws RecognitionException {
		Qual_opContext _localctx = new Qual_opContext(_ctx, getState());
		enterRule(_localctx, 1276, RULE_qual_op);
		try {
			setState(9501);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Operator:
				enterOuterAlt(_localctx, 1);
				{
				setState(9495);
				match(Operator);
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(9496);
				match(OPERATOR);
				setState(9497);
				match(OPEN_PAREN);
				setState(9498);
				any_operator();
				setState(9499);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Qual_all_opContext extends ParserRuleContext {
		public All_opContext all_op() {
			return getRuleContext(All_opContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Qual_all_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qual_all_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterQual_all_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitQual_all_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitQual_all_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qual_all_opContext qual_all_op() throws RecognitionException {
		Qual_all_opContext _localctx = new Qual_all_opContext(_ctx, getState());
		enterRule(_localctx, 1278, RULE_qual_all_op);
		try {
			setState(9509);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
			case EQUAL:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case PERCENT:
			case Operator:
				enterOuterAlt(_localctx, 1);
				{
				setState(9503);
				all_op();
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(9504);
				match(OPERATOR);
				setState(9505);
				match(OPEN_PAREN);
				setState(9506);
				any_operator();
				setState(9507);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subquery_OpContext extends ParserRuleContext {
		public All_opContext all_op() {
			return getRuleContext(All_opContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode ILIKE() { return getToken(PostgreSQLParser.ILIKE, 0); }
		public Subquery_OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_Op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSubquery_Op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSubquery_Op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSubquery_Op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_OpContext subquery_Op() throws RecognitionException {
		Subquery_OpContext _localctx = new Subquery_OpContext(_ctx, getState());
		enterRule(_localctx, 1280, RULE_subquery_Op);
		try {
			setState(9523);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,620,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9511);
				all_op();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9512);
				match(OPERATOR);
				setState(9513);
				match(OPEN_PAREN);
				setState(9514);
				any_operator();
				setState(9515);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9517);
				match(LIKE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9518);
				match(NOT);
				setState(9519);
				match(LIKE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9520);
				match(ILIKE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9521);
				match(NOT);
				setState(9522);
				match(ILIKE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expr_listContext extends ParserRuleContext {
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_listContext expr_list() throws RecognitionException {
		Expr_listContext _localctx = new Expr_listContext(_ctx, getState());
		enterRule(_localctx, 1282, RULE_expr_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9525);
			a_expr();
			setState(9530);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,621,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9526);
					match(COMMA);
					setState(9527);
					a_expr();
					}
					} 
				}
				setState(9532);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,621,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_arg_listContext extends ParserRuleContext {
		public List<Func_arg_exprContext> func_arg_expr() {
			return getRuleContexts(Func_arg_exprContext.class);
		}
		public Func_arg_exprContext func_arg_expr(int i) {
			return getRuleContext(Func_arg_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Func_arg_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_arg_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_arg_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_arg_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_listContext func_arg_list() throws RecognitionException {
		Func_arg_listContext _localctx = new Func_arg_listContext(_ctx, getState());
		enterRule(_localctx, 1284, RULE_func_arg_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9533);
			func_arg_expr();
			setState(9538);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,622,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9534);
					match(COMMA);
					setState(9535);
					func_arg_expr();
					}
					} 
				}
				setState(9540);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,622,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_arg_exprContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public TerminalNode COLON_EQUALS() { return getToken(PostgreSQLParser.COLON_EQUALS, 0); }
		public TerminalNode EQUALS_GREATER() { return getToken(PostgreSQLParser.EQUALS_GREATER, 0); }
		public Func_arg_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_arg_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_arg_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_arg_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_exprContext func_arg_expr() throws RecognitionException {
		Func_arg_exprContext _localctx = new Func_arg_exprContext(_ctx, getState());
		enterRule(_localctx, 1286, RULE_func_arg_expr);
		int _la;
		try {
			setState(9546);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9541);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9542);
				param_name();
				setState(9543);
				_la = _input.LA(1);
				if ( !(_la==COLON_EQUALS || _la==EQUALS_GREATER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9544);
				a_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_listContext extends ParserRuleContext {
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterType_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitType_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitType_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_listContext type_list() throws RecognitionException {
		Type_listContext _localctx = new Type_listContext(_ctx, getState());
		enterRule(_localctx, 1288, RULE_type_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9548);
			typename();
			setState(9553);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9549);
				match(COMMA);
				setState(9550);
				typename();
				}
				}
				setState(9555);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Array_exprContext extends ParserRuleContext {
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Array_expr_listContext array_expr_list() {
			return getRuleContext(Array_expr_listContext.class,0);
		}
		public Array_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterArray_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitArray_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitArray_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_exprContext array_expr() throws RecognitionException {
		Array_exprContext _localctx = new Array_exprContext(_ctx, getState());
		enterRule(_localctx, 1290, RULE_array_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9556);
			match(OPEN_BRACKET);
			setState(9559);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				{
				setState(9557);
				expr_list();
				}
				break;
			case OPEN_BRACKET:
				{
				setState(9558);
				array_expr_list();
				}
				break;
			case CLOSE_BRACKET:
				break;
			default:
				break;
			}
			setState(9561);
			match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Array_expr_listContext extends ParserRuleContext {
		public List<Array_exprContext> array_expr() {
			return getRuleContexts(Array_exprContext.class);
		}
		public Array_exprContext array_expr(int i) {
			return getRuleContext(Array_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Array_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterArray_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitArray_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitArray_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_expr_listContext array_expr_list() throws RecognitionException {
		Array_expr_listContext _localctx = new Array_expr_listContext(_ctx, getState());
		enterRule(_localctx, 1292, RULE_array_expr_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9563);
			array_expr();
			setState(9568);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9564);
				match(COMMA);
				setState(9565);
				array_expr();
				}
				}
				setState(9570);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Extract_listContext extends ParserRuleContext {
		public Extract_argContext extract_arg() {
			return getRuleContext(Extract_argContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Extract_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExtract_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExtract_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExtract_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_listContext extract_list() throws RecognitionException {
		Extract_listContext _localctx = new Extract_listContext(_ctx, getState());
		enterRule(_localctx, 1294, RULE_extract_list);
		try {
			setState(9576);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case DAY_P:
			case FIRST_P:
			case FORWARD:
			case HOUR_P:
			case INSERT:
			case LAST_P:
			case MINUTE_P:
			case MONTH_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SECOND_P:
			case SET:
			case TYPE_P:
			case YEAR_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(9571);
				extract_arg();
				setState(9572);
				match(FROM);
				setState(9573);
				a_expr();
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Extract_argContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode YEAR_P() { return getToken(PostgreSQLParser.YEAR_P, 0); }
		public TerminalNode MONTH_P() { return getToken(PostgreSQLParser.MONTH_P, 0); }
		public TerminalNode DAY_P() { return getToken(PostgreSQLParser.DAY_P, 0); }
		public TerminalNode HOUR_P() { return getToken(PostgreSQLParser.HOUR_P, 0); }
		public TerminalNode MINUTE_P() { return getToken(PostgreSQLParser.MINUTE_P, 0); }
		public TerminalNode SECOND_P() { return getToken(PostgreSQLParser.SECOND_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Extract_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExtract_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExtract_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExtract_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_argContext extract_arg() throws RecognitionException {
		Extract_argContext _localctx = new Extract_argContext(_ctx, getState());
		enterRule(_localctx, 1296, RULE_extract_arg);
		try {
			setState(9586);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(9578);
				identifier();
				}
				break;
			case YEAR_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(9579);
				match(YEAR_P);
				}
				break;
			case MONTH_P:
				enterOuterAlt(_localctx, 3);
				{
				setState(9580);
				match(MONTH_P);
				}
				break;
			case DAY_P:
				enterOuterAlt(_localctx, 4);
				{
				setState(9581);
				match(DAY_P);
				}
				break;
			case HOUR_P:
				enterOuterAlt(_localctx, 5);
				{
				setState(9582);
				match(HOUR_P);
				}
				break;
			case MINUTE_P:
				enterOuterAlt(_localctx, 6);
				{
				setState(9583);
				match(MINUTE_P);
				}
				break;
			case SECOND_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(9584);
				match(SECOND_P);
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 8);
				{
				setState(9585);
				sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unicode_normal_formContext extends ParserRuleContext {
		public TerminalNode NFC() { return getToken(PostgreSQLParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(PostgreSQLParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(PostgreSQLParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(PostgreSQLParser.NFKD, 0); }
		public Unicode_normal_formContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unicode_normal_form; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUnicode_normal_form(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUnicode_normal_form(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUnicode_normal_form(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unicode_normal_formContext unicode_normal_form() throws RecognitionException {
		Unicode_normal_formContext _localctx = new Unicode_normal_formContext(_ctx, getState());
		enterRule(_localctx, 1298, RULE_unicode_normal_form);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9588);
			_la = _input.LA(1);
			if ( !(((((_la - 483)) & ~0x3f) == 0 && ((1L << (_la - 483)) & 15L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Overlay_listContext extends ParserRuleContext {
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode PLACING() { return getToken(PostgreSQLParser.PLACING, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Overlay_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlay_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOverlay_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOverlay_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOverlay_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Overlay_listContext overlay_list() throws RecognitionException {
		Overlay_listContext _localctx = new Overlay_listContext(_ctx, getState());
		enterRule(_localctx, 1300, RULE_overlay_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9590);
			a_expr();
			setState(9591);
			match(PLACING);
			setState(9592);
			a_expr();
			setState(9593);
			match(FROM);
			setState(9594);
			a_expr();
			setState(9597);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(9595);
				match(FOR);
				setState(9596);
				a_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Position_listContext extends ParserRuleContext {
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public Position_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_position_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPosition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPosition_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPosition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Position_listContext position_list() throws RecognitionException {
		Position_listContext _localctx = new Position_listContext(_ctx, getState());
		enterRule(_localctx, 1302, RULE_position_list);
		try {
			setState(9604);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(9599);
				b_expr(0);
				setState(9600);
				match(IN_P);
				setState(9601);
				b_expr(0);
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Substr_listContext extends ParserRuleContext {
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode SIMILAR() { return getToken(PostgreSQLParser.SIMILAR, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Substr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSubstr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSubstr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSubstr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Substr_listContext substr_list() throws RecognitionException {
		Substr_listContext _localctx = new Substr_listContext(_ctx, getState());
		enterRule(_localctx, 1304, RULE_substr_list);
		try {
			setState(9634);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,631,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9606);
				a_expr();
				setState(9607);
				match(FROM);
				setState(9608);
				a_expr();
				setState(9609);
				match(FOR);
				setState(9610);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9612);
				a_expr();
				setState(9613);
				match(FOR);
				setState(9614);
				a_expr();
				setState(9615);
				match(FROM);
				setState(9616);
				a_expr();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9618);
				a_expr();
				setState(9619);
				match(FROM);
				setState(9620);
				a_expr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9622);
				a_expr();
				setState(9623);
				match(FOR);
				setState(9624);
				a_expr();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9626);
				a_expr();
				setState(9627);
				match(SIMILAR);
				setState(9628);
				a_expr();
				setState(9629);
				match(ESCAPE);
				setState(9630);
				a_expr();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9632);
				expr_list();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Trim_listContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Trim_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTrim_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTrim_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTrim_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trim_listContext trim_list() throws RecognitionException {
		Trim_listContext _localctx = new Trim_listContext(_ctx, getState());
		enterRule(_localctx, 1306, RULE_trim_list);
		try {
			setState(9643);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,632,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9636);
				a_expr();
				setState(9637);
				match(FROM);
				setState(9638);
				expr_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9640);
				match(FROM);
				setState(9641);
				expr_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9642);
				expr_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class In_exprContext extends ParserRuleContext {
		public In_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_expr; }
	 
		public In_exprContext() { }
		public void copyFrom(In_exprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class In_expr_listContext extends In_exprContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public In_expr_listContext(In_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIn_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIn_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIn_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class In_expr_selectContext extends In_exprContext {
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public In_expr_selectContext(In_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIn_expr_select(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIn_expr_select(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIn_expr_select(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_exprContext in_expr() throws RecognitionException {
		In_exprContext _localctx = new In_exprContext(_ctx, getState());
		enterRule(_localctx, 1308, RULE_in_expr);
		try {
			setState(9650);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,633,_ctx) ) {
			case 1:
				_localctx = new In_expr_selectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(9645);
				select_with_parens();
				}
				break;
			case 2:
				_localctx = new In_expr_listContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(9646);
				match(OPEN_PAREN);
				setState(9647);
				expr_list();
				setState(9648);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Case_exprContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(PostgreSQLParser.CASE, 0); }
		public Case_argContext case_arg() {
			return getRuleContext(Case_argContext.class,0);
		}
		public When_clause_listContext when_clause_list() {
			return getRuleContext(When_clause_listContext.class,0);
		}
		public Case_defaultContext case_default() {
			return getRuleContext(Case_defaultContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public Case_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCase_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCase_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCase_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_exprContext case_expr() throws RecognitionException {
		Case_exprContext _localctx = new Case_exprContext(_ctx, getState());
		enterRule(_localctx, 1310, RULE_case_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9652);
			match(CASE);
			setState(9653);
			case_arg();
			setState(9654);
			when_clause_list();
			setState(9655);
			case_default();
			setState(9656);
			match(END_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class When_clause_listContext extends ParserRuleContext {
		public List<When_clauseContext> when_clause() {
			return getRuleContexts(When_clauseContext.class);
		}
		public When_clauseContext when_clause(int i) {
			return getRuleContext(When_clauseContext.class,i);
		}
		public When_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_clause_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWhen_clause_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWhen_clause_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWhen_clause_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final When_clause_listContext when_clause_list() throws RecognitionException {
		When_clause_listContext _localctx = new When_clause_listContext(_ctx, getState());
		enterRule(_localctx, 1312, RULE_when_clause_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9659); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(9658);
				when_clause();
				}
				}
				setState(9661); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class When_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public When_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWhen_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWhen_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWhen_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final When_clauseContext when_clause() throws RecognitionException {
		When_clauseContext _localctx = new When_clauseContext(_ctx, getState());
		enterRule(_localctx, 1314, RULE_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9663);
			match(WHEN);
			setState(9664);
			a_expr();
			setState(9665);
			match(THEN);
			setState(9666);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Case_defaultContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PostgreSQLParser.ELSE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Case_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCase_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCase_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCase_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_defaultContext case_default() throws RecognitionException {
		Case_defaultContext _localctx = new Case_defaultContext(_ctx, getState());
		enterRule(_localctx, 1316, RULE_case_default);
		try {
			setState(9671);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ELSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9668);
				match(ELSE);
				setState(9669);
				a_expr();
				}
				break;
			case END_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Case_argContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Case_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCase_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCase_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCase_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_argContext case_arg() throws RecognitionException {
		Case_argContext _localctx = new Case_argContext(_ctx, getState());
		enterRule(_localctx, 1318, RULE_case_arg);
		try {
			setState(9675);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(9673);
				a_expr();
				}
				break;
			case WHEN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnrefContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public ColumnrefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumnref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumnref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumnref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnrefContext columnref() throws RecognitionException {
		ColumnrefContext _localctx = new ColumnrefContext(_ctx, getState());
		enterRule(_localctx, 1320, RULE_columnref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9677);
			colid();
			setState(9679);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
			case 1:
				{
				setState(9678);
				indirection();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Indirection_elContext extends ParserRuleContext {
		public TerminalNode DOT() { return getToken(PostgreSQLParser.DOT, 0); }
		public Attr_nameContext attr_name() {
			return getRuleContext(Attr_nameContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public List<Opt_slice_boundContext> opt_slice_bound() {
			return getRuleContexts(Opt_slice_boundContext.class);
		}
		public Opt_slice_boundContext opt_slice_bound(int i) {
			return getRuleContext(Opt_slice_boundContext.class,i);
		}
		public TerminalNode COLON() { return getToken(PostgreSQLParser.COLON, 0); }
		public Indirection_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndirection_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndirection_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndirection_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Indirection_elContext indirection_el() throws RecognitionException {
		Indirection_elContext _localctx = new Indirection_elContext(_ctx, getState());
		enterRule(_localctx, 1322, RULE_indirection_el);
		try {
			setState(9696);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(9681);
				match(DOT);
				setState(9684);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALL:
				case ANALYSE:
				case ANALYZE:
				case AND:
				case ANY:
				case ARRAY:
				case AS:
				case ASC:
				case ASYMMETRIC:
				case BOTH:
				case CASE:
				case CAST:
				case CHECK:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case CREATE:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_ROLE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DEFERRABLE:
				case DESC:
				case DISTINCT:
				case DO:
				case ELSE:
				case EXCEPT:
				case FALSE_P:
				case FETCH:
				case FOR:
				case FOREIGN:
				case FROM:
				case GRANT:
				case GROUP_P:
				case HAVING:
				case IN_P:
				case INITIALLY:
				case INTERSECT:
				case LATERAL_P:
				case LEADING:
				case LIMIT:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case NOT:
				case NULL_P:
				case OFFSET:
				case ON:
				case ONLY:
				case OR:
				case ORDER:
				case PLACING:
				case PRIMARY:
				case REFERENCES:
				case RETURNING:
				case SELECT:
				case SESSION_USER:
				case SOME:
				case SYMMETRIC:
				case TABLE:
				case THEN:
				case TO:
				case TRAILING:
				case TRUE_P:
				case UNION:
				case UNIQUE:
				case USER:
				case USING:
				case VARIADIC:
				case WHEN:
				case WHERE:
				case WINDOW:
				case WITH:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER_P:
				case IS:
				case ISNULL:
				case JOIN:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER_P:
				case OVER:
				case OVERLAPS:
				case SIMILAR:
				case VERBOSE:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case END_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case TABLESAMPLE:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					setState(9682);
					attr_name();
					}
					break;
				case STAR:
					{
					setState(9683);
					match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case OPEN_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(9686);
				match(OPEN_BRACKET);
				setState(9692);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,639,_ctx) ) {
				case 1:
					{
					setState(9687);
					a_expr();
					}
					break;
				case 2:
					{
					setState(9688);
					opt_slice_bound();
					setState(9689);
					match(COLON);
					setState(9690);
					opt_slice_bound();
					}
					break;
				}
				setState(9694);
				match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_slice_boundContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_slice_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_slice_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_slice_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_slice_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_slice_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_slice_boundContext opt_slice_bound() throws RecognitionException {
		Opt_slice_boundContext _localctx = new Opt_slice_boundContext(_ctx, getState());
		enterRule(_localctx, 1324, RULE_opt_slice_bound);
		try {
			setState(9700);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(9698);
				a_expr();
				}
				break;
			case CLOSE_BRACKET:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndirectionContext extends ParserRuleContext {
		public List<Indirection_elContext> indirection_el() {
			return getRuleContexts(Indirection_elContext.class);
		}
		public Indirection_elContext indirection_el(int i) {
			return getRuleContext(Indirection_elContext.class,i);
		}
		public IndirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionContext indirection() throws RecognitionException {
		IndirectionContext _localctx = new IndirectionContext(_ctx, getState());
		enterRule(_localctx, 1326, RULE_indirection);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9703); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(9702);
					indirection_el();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9705); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,642,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_indirectionContext extends ParserRuleContext {
		public List<Indirection_elContext> indirection_el() {
			return getRuleContexts(Indirection_elContext.class);
		}
		public Indirection_elContext indirection_el(int i) {
			return getRuleContext(Indirection_elContext.class,i);
		}
		public Opt_indirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_indirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_indirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_indirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_indirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_indirectionContext opt_indirection() throws RecognitionException {
		Opt_indirectionContext _localctx = new Opt_indirectionContext(_ctx, getState());
		enterRule(_localctx, 1328, RULE_opt_indirection);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9710);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,643,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9707);
					indirection_el();
					}
					} 
				}
				setState(9712);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,643,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_target_listContext extends ParserRuleContext {
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public Opt_target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_target_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_target_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_target_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_target_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_target_listContext opt_target_list() throws RecognitionException {
		Opt_target_listContext _localctx = new Opt_target_listContext(_ctx, getState());
		enterRule(_localctx, 1330, RULE_opt_target_list);
		try {
			setState(9715);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,644,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9713);
				target_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Target_listContext extends ParserRuleContext {
		public List<Target_elContext> target_el() {
			return getRuleContexts(Target_elContext.class);
		}
		public Target_elContext target_el(int i) {
			return getRuleContext(Target_elContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTarget_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTarget_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTarget_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_listContext target_list() throws RecognitionException {
		Target_listContext _localctx = new Target_listContext(_ctx, getState());
		enterRule(_localctx, 1332, RULE_target_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9717);
			target_el();
			setState(9722);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,645,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9718);
					match(COMMA);
					setState(9719);
					target_el();
					}
					} 
				}
				setState(9724);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,645,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Target_elContext extends ParserRuleContext {
		public Target_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_el; }
	 
		public Target_elContext() { }
		public void copyFrom(Target_elContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class Target_labelContext extends Target_elContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Target_labelContext(Target_elContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTarget_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTarget_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTarget_label(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class Target_starContext extends Target_elContext {
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public Target_starContext(Target_elContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTarget_star(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTarget_star(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTarget_star(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_elContext target_el() throws RecognitionException {
		Target_elContext _localctx = new Target_elContext(_ctx, getState());
		enterRule(_localctx, 1334, RULE_target_el);
		try {
			setState(9733);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				_localctx = new Target_labelContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(9725);
				a_expr();
				setState(9730);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
				case 1:
					{
					setState(9726);
					match(AS);
					setState(9727);
					collabel();
					}
					break;
				case 2:
					{
					setState(9728);
					identifier();
					}
					break;
				case 3:
					{
					}
					break;
				}
				}
				break;
			case STAR:
				_localctx = new Target_starContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(9732);
				match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Qualified_name_listContext extends ParserRuleContext {
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Qualified_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterQualified_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitQualified_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitQualified_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_name_listContext qualified_name_list() throws RecognitionException {
		Qualified_name_listContext _localctx = new Qualified_name_listContext(_ctx, getState());
		enterRule(_localctx, 1336, RULE_qualified_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9735);
			qualified_name();
			setState(9740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9736);
				match(COMMA);
				setState(9737);
				qualified_name();
				}
				}
				setState(9742);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Qualified_nameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Qualified_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterQualified_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitQualified_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitQualified_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_nameContext qualified_name() throws RecognitionException {
		Qualified_nameContext _localctx = new Qualified_nameContext(_ctx, getState());
		enterRule(_localctx, 1338, RULE_qualified_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9743);
			colid();
			setState(9745);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET || _la==DOT) {
				{
				setState(9744);
				indirection();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Name_listContext extends ParserRuleContext {
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterName_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitName_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitName_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Name_listContext name_list() throws RecognitionException {
		Name_listContext _localctx = new Name_listContext(_ctx, getState());
		enterRule(_localctx, 1340, RULE_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9747);
			name();
			setState(9752);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9748);
				match(COMMA);
				setState(9749);
				name();
				}
				}
				setState(9754);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public NameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameContext name() throws RecognitionException {
		NameContext _localctx = new NameContext(_ctx, getState());
		enterRule(_localctx, 1342, RULE_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9755);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Attr_nameContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Attr_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attr_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAttr_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAttr_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAttr_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attr_nameContext attr_name() throws RecognitionException {
		Attr_nameContext _localctx = new Attr_nameContext(_ctx, getState());
		enterRule(_localctx, 1344, RULE_attr_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9757);
			collabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class File_nameContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public File_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFile_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFile_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFile_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_nameContext file_name() throws RecognitionException {
		File_nameContext _localctx = new File_nameContext(_ctx, getState());
		enterRule(_localctx, 1346, RULE_file_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9759);
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_nameContext extends ParserRuleContext {
		public Builtin_function_nameContext builtin_function_name() {
			return getRuleContext(Builtin_function_nameContext.class,0);
		}
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(PostgreSQLParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLParser.RIGHT, 0); }
		public Func_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_nameContext func_name() throws RecognitionException {
		Func_nameContext _localctx = new Func_nameContext(_ctx, getState());
		enterRule(_localctx, 1348, RULE_func_name);
		try {
			setState(9768);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,651,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9761);
				builtin_function_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9762);
				type_function_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9763);
				colid();
				setState(9764);
				indirection();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9766);
				match(LEFT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9767);
				match(RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AexprconstContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public FconstContext fconst() {
			return getRuleContext(FconstContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public BconstContext bconst() {
			return getRuleContext(BconstContext.class,0);
		}
		public XconstContext xconst() {
			return getRuleContext(XconstContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConsttypenameContext consttypename() {
			return getRuleContext(ConsttypenameContext.class,0);
		}
		public ConstintervalContext constinterval() {
			return getRuleContext(ConstintervalContext.class,0);
		}
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public AexprconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aexprconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAexprconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAexprconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAexprconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AexprconstContext aexprconst() throws RecognitionException {
		AexprconstContext _localctx = new AexprconstContext(_ctx, getState());
		enterRule(_localctx, 1350, RULE_aexprconst);
		try {
			setState(9802);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9770);
				iconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9771);
				fconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9772);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9773);
				bconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9774);
				xconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9775);
				func_name();
				setState(9783);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case EscapeStringConstant:
					{
					setState(9776);
					sconst();
					}
					break;
				case OPEN_PAREN:
					{
					setState(9777);
					match(OPEN_PAREN);
					setState(9778);
					func_arg_list();
					setState(9779);
					opt_sort_clause();
					setState(9780);
					match(CLOSE_PAREN);
					setState(9781);
					sconst();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9785);
				consttypename();
				setState(9786);
				sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9788);
				constinterval();
				setState(9797);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case EscapeStringConstant:
					{
					setState(9789);
					sconst();
					setState(9790);
					opt_interval();
					}
					break;
				case OPEN_PAREN:
					{
					setState(9792);
					match(OPEN_PAREN);
					setState(9793);
					iconst();
					setState(9794);
					match(CLOSE_PAREN);
					setState(9795);
					sconst();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9799);
				match(TRUE_P);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9800);
				match(FALSE_P);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9801);
				match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XconstContext extends ParserRuleContext {
		public TerminalNode HexadecimalStringConstant() { return getToken(PostgreSQLParser.HexadecimalStringConstant, 0); }
		public XconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XconstContext xconst() throws RecognitionException {
		XconstContext _localctx = new XconstContext(_ctx, getState());
		enterRule(_localctx, 1352, RULE_xconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9804);
			match(HexadecimalStringConstant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BconstContext extends ParserRuleContext {
		public TerminalNode BinaryStringConstant() { return getToken(PostgreSQLParser.BinaryStringConstant, 0); }
		public BconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterBconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitBconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitBconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BconstContext bconst() throws RecognitionException {
		BconstContext _localctx = new BconstContext(_ctx, getState());
		enterRule(_localctx, 1354, RULE_bconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9806);
			match(BinaryStringConstant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FconstContext extends ParserRuleContext {
		public TerminalNode Numeric() { return getToken(PostgreSQLParser.Numeric, 0); }
		public FconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FconstContext fconst() throws RecognitionException {
		FconstContext _localctx = new FconstContext(_ctx, getState());
		enterRule(_localctx, 1356, RULE_fconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9808);
			match(Numeric);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IconstContext extends ParserRuleContext {
		public TerminalNode Integral() { return getToken(PostgreSQLParser.Integral, 0); }
		public IconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IconstContext iconst() throws RecognitionException {
		IconstContext _localctx = new IconstContext(_ctx, getState());
		enterRule(_localctx, 1358, RULE_iconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9810);
			match(Integral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SconstContext extends ParserRuleContext {
		public AnysconstContext anysconst() {
			return getRuleContext(AnysconstContext.class,0);
		}
		public Opt_uescapeContext opt_uescape() {
			return getRuleContext(Opt_uescapeContext.class,0);
		}
		public SconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SconstContext sconst() throws RecognitionException {
		SconstContext _localctx = new SconstContext(_ctx, getState());
		enterRule(_localctx, 1360, RULE_sconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9812);
			anysconst();
			setState(9813);
			opt_uescape();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AnysconstContext extends ParserRuleContext {
		public TerminalNode StringConstant() { return getToken(PostgreSQLParser.StringConstant, 0); }
		public TerminalNode UnicodeEscapeStringConstant() { return getToken(PostgreSQLParser.UnicodeEscapeStringConstant, 0); }
		public TerminalNode BeginDollarStringConstant() { return getToken(PostgreSQLParser.BeginDollarStringConstant, 0); }
		public TerminalNode EndDollarStringConstant() { return getToken(PostgreSQLParser.EndDollarStringConstant, 0); }
		public List<TerminalNode> DollarText() { return getTokens(PostgreSQLParser.DollarText); }
		public TerminalNode DollarText(int i) {
			return getToken(PostgreSQLParser.DollarText, i);
		}
		public TerminalNode EscapeStringConstant() { return getToken(PostgreSQLParser.EscapeStringConstant, 0); }
		public AnysconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anysconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAnysconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAnysconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAnysconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnysconstContext anysconst() throws RecognitionException {
		AnysconstContext _localctx = new AnysconstContext(_ctx, getState());
		enterRule(_localctx, 1362, RULE_anysconst);
		int _la;
		try {
			setState(9826);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(9815);
				match(StringConstant);
				}
				break;
			case UnicodeEscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				setState(9816);
				match(UnicodeEscapeStringConstant);
				}
				break;
			case BeginDollarStringConstant:
				enterOuterAlt(_localctx, 3);
				{
				setState(9817);
				match(BeginDollarStringConstant);
				setState(9821);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DollarText) {
					{
					{
					setState(9818);
					match(DollarText);
					}
					}
					setState(9823);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(9824);
				match(EndDollarStringConstant);
				}
				break;
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 4);
				{
				setState(9825);
				match(EscapeStringConstant);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_uescapeContext extends ParserRuleContext {
		public TerminalNode UESCAPE() { return getToken(PostgreSQLParser.UESCAPE, 0); }
		public AnysconstContext anysconst() {
			return getRuleContext(AnysconstContext.class,0);
		}
		public Opt_uescapeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_uescape; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_uescape(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_uescape(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_uescape(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_uescapeContext opt_uescape() throws RecognitionException {
		Opt_uescapeContext _localctx = new Opt_uescapeContext(_ctx, getState());
		enterRule(_localctx, 1364, RULE_opt_uescape);
		try {
			setState(9831);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,657,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9828);
				match(UESCAPE);
				setState(9829);
				anysconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SignediconstContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public SignediconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signediconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSignediconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSignediconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSignediconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignediconstContext signediconst() throws RecognitionException {
		SignediconstContext _localctx = new SignediconstContext(_ctx, getState());
		enterRule(_localctx, 1366, RULE_signediconst);
		try {
			setState(9838);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Integral:
				enterOuterAlt(_localctx, 1);
				{
				setState(9833);
				iconst();
				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(9834);
				match(PLUS);
				setState(9835);
				iconst();
				}
				break;
			case MINUS:
				enterOuterAlt(_localctx, 3);
				{
				setState(9836);
				match(MINUS);
				setState(9837);
				iconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoleidContext extends ParserRuleContext {
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public RoleidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRoleid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRoleid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRoleid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleidContext roleid() throws RecognitionException {
		RoleidContext _localctx = new RoleidContext(_ctx, getState());
		enterRule(_localctx, 1368, RULE_roleid);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9840);
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RolespecContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public RolespecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rolespec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRolespec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRolespec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRolespec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RolespecContext rolespec() throws RecognitionException {
		RolespecContext _localctx = new RolespecContext(_ctx, getState());
		enterRule(_localctx, 1370, RULE_rolespec);
		try {
			setState(9845);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(9842);
				nonreservedword();
				}
				break;
			case CURRENT_USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(9843);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(9844);
				match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Role_listContext extends ParserRuleContext {
		public List<RolespecContext> rolespec() {
			return getRuleContexts(RolespecContext.class);
		}
		public RolespecContext rolespec(int i) {
			return getRuleContext(RolespecContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Role_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRole_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRole_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRole_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Role_listContext role_list() throws RecognitionException {
		Role_listContext _localctx = new Role_listContext(_ctx, getState());
		enterRule(_localctx, 1372, RULE_role_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9847);
			rolespec();
			setState(9852);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9848);
				match(COMMA);
				setState(9849);
				rolespec();
				}
				}
				setState(9854);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColidContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(PostgreSQLParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLParser.RIGHT, 0); }
		public ColidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColidContext colid() throws RecognitionException {
		ColidContext _localctx = new ColidContext(_ctx, getState());
		enterRule(_localctx, 1374, RULE_colid);
		try {
			setState(9861);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9855);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9856);
				unreserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9857);
				col_name_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9858);
				plsql_unreserved_keyword();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9859);
				match(LEFT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9860);
				match(RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_aliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 1376, RULE_table_alias);
		try {
			setState(9867);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,662,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9863);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9864);
				unreserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9865);
				col_name_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9866);
				plsql_unreserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_function_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public Type_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterType_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitType_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitType_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_function_nameContext type_function_name() throws RecognitionException {
		Type_function_nameContext _localctx = new Type_function_nameContext(_ctx, getState());
		enterRule(_localctx, 1378, RULE_type_function_name);
		try {
			setState(9873);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9869);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9870);
				unreserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9871);
				plsql_unreserved_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9872);
				type_func_name_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NonreservedwordContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public NonreservedwordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonreservedword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNonreservedword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNonreservedword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNonreservedword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonreservedwordContext nonreservedword() throws RecognitionException {
		NonreservedwordContext _localctx = new NonreservedwordContext(_ctx, getState());
		enterRule(_localctx, 1380, RULE_nonreservedword);
		try {
			setState(9879);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9875);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9876);
				unreserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9877);
				col_name_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9878);
				type_func_name_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CollabelContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public CollabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCollabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCollabel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCollabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollabelContext collabel() throws RecognitionException {
		CollabelContext _localctx = new CollabelContext(_ctx, getState());
		enterRule(_localctx, 1382, RULE_collabel);
		try {
			setState(9887);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9881);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9882);
				plsql_unreserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9883);
				unreserved_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9884);
				col_name_keyword();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9885);
				type_func_name_keyword();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9886);
				reserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode Identifier() { return getToken(PostgreSQLParser.Identifier, 0); }
		public Opt_uescapeContext opt_uescape() {
			return getRuleContext(Opt_uescapeContext.class,0);
		}
		public TerminalNode QuotedIdentifier() { return getToken(PostgreSQLParser.QuotedIdentifier, 0); }
		public TerminalNode UnicodeQuotedIdentifier() { return getToken(PostgreSQLParser.UnicodeQuotedIdentifier, 0); }
		public PlsqlvariablenameContext plsqlvariablename() {
			return getRuleContext(PlsqlvariablenameContext.class,0);
		}
		public PlsqlidentifierContext plsqlidentifier() {
			return getRuleContext(PlsqlidentifierContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 1384, RULE_identifier);
		try {
			setState(9896);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Identifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(9889);
				match(Identifier);
				setState(9890);
				opt_uescape();
				}
				break;
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 2);
				{
				setState(9891);
				match(QuotedIdentifier);
				}
				break;
			case UnicodeQuotedIdentifier:
				enterOuterAlt(_localctx, 3);
				{
				setState(9892);
				match(UnicodeQuotedIdentifier);
				}
				break;
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(9893);
				plsqlvariablename();
				}
				break;
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 5);
				{
				setState(9894);
				plsqlidentifier();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
				enterOuterAlt(_localctx, 6);
				{
				setState(9895);
				plsql_unreserved_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PlsqlidentifierContext extends ParserRuleContext {
		public TerminalNode PLSQLIDENTIFIER() { return getToken(PostgreSQLParser.PLSQLIDENTIFIER, 0); }
		public PlsqlidentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsqlidentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsqlidentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsqlidentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsqlidentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlsqlidentifierContext plsqlidentifier() throws RecognitionException {
		PlsqlidentifierContext _localctx = new PlsqlidentifierContext(_ctx, getState());
		enterRule(_localctx, 1386, RULE_plsqlidentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9898);
			match(PLSQLIDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unreserved_keywordContext extends ParserRuleContext {
		public TerminalNode ABORT_P() { return getToken(PostgreSQLParser.ABORT_P, 0); }
		public TerminalNode ABSOLUTE_P() { return getToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode ACTION() { return getToken(PostgreSQLParser.ACTION, 0); }
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public TerminalNode ALSO() { return getToken(PostgreSQLParser.ALSO, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode ASSERTION() { return getToken(PostgreSQLParser.ASSERTION, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PostgreSQLParser.ASSIGNMENT, 0); }
		public TerminalNode AT() { return getToken(PostgreSQLParser.AT, 0); }
		public TerminalNode ATTACH() { return getToken(PostgreSQLParser.ATTACH, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLParser.ATTRIBUTE, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public TerminalNode BEFORE() { return getToken(PostgreSQLParser.BEFORE, 0); }
		public TerminalNode BEGIN_P() { return getToken(PostgreSQLParser.BEGIN_P, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode CACHE() { return getToken(PostgreSQLParser.CACHE, 0); }
		public TerminalNode CALL() { return getToken(PostgreSQLParser.CALL, 0); }
		public TerminalNode CALLED() { return getToken(PostgreSQLParser.CALLED, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode CASCADED() { return getToken(PostgreSQLParser.CASCADED, 0); }
		public TerminalNode CATALOG() { return getToken(PostgreSQLParser.CATALOG, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLParser.CHAIN, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		public TerminalNode CHECKPOINT() { return getToken(PostgreSQLParser.CHECKPOINT, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode CLOSE() { return getToken(PostgreSQLParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(PostgreSQLParser.CLUSTER, 0); }
		public TerminalNode COLUMNS() { return getToken(PostgreSQLParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(PostgreSQLParser.COMMENT, 0); }
		public TerminalNode COMMENTS() { return getToken(PostgreSQLParser.COMMENTS, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PostgreSQLParser.COMMITTED, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode CONFLICT() { return getToken(PostgreSQLParser.CONFLICT, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLParser.CONSTRAINTS, 0); }
		public TerminalNode CONTENT_P() { return getToken(PostgreSQLParser.CONTENT_P, 0); }
		public TerminalNode CONTINUE_P() { return getToken(PostgreSQLParser.CONTINUE_P, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode COPY() { return getToken(PostgreSQLParser.COPY, 0); }
		public TerminalNode COST() { return getToken(PostgreSQLParser.COST, 0); }
		public TerminalNode CSV() { return getToken(PostgreSQLParser.CSV, 0); }
		public TerminalNode CUBE() { return getToken(PostgreSQLParser.CUBE, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode CURSOR() { return getToken(PostgreSQLParser.CURSOR, 0); }
		public TerminalNode CYCLE() { return getToken(PostgreSQLParser.CYCLE, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode DAY_P() { return getToken(PostgreSQLParser.DAY_P, 0); }
		public TerminalNode DEALLOCATE() { return getToken(PostgreSQLParser.DEALLOCATE, 0); }
		public TerminalNode DECLARE() { return getToken(PostgreSQLParser.DECLARE, 0); }
		public TerminalNode DEFAULTS() { return getToken(PostgreSQLParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(PostgreSQLParser.DEFINER, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode DELIMITER() { return getToken(PostgreSQLParser.DELIMITER, 0); }
		public TerminalNode DELIMITERS() { return getToken(PostgreSQLParser.DELIMITERS, 0); }
		public TerminalNode DEPENDS() { return getToken(PostgreSQLParser.DEPENDS, 0); }
		public TerminalNode DETACH() { return getToken(PostgreSQLParser.DETACH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode DISABLE_P() { return getToken(PostgreSQLParser.DISABLE_P, 0); }
		public TerminalNode DISCARD() { return getToken(PostgreSQLParser.DISCARD, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode DOUBLE_P() { return getToken(PostgreSQLParser.DOUBLE_P, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode EACH() { return getToken(PostgreSQLParser.EACH, 0); }
		public TerminalNode ENABLE_P() { return getToken(PostgreSQLParser.ENABLE_P, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLParser.ENCODING, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PostgreSQLParser.ENCRYPTED, 0); }
		public TerminalNode ENUM_P() { return getToken(PostgreSQLParser.ENUM_P, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLParser.EXCLUDE, 0); }
		public TerminalNode EXCLUDING() { return getToken(PostgreSQLParser.EXCLUDING, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PostgreSQLParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public TerminalNode EXPLAIN() { return getToken(PostgreSQLParser.EXPLAIN, 0); }
		public TerminalNode EXPRESSION() { return getToken(PostgreSQLParser.EXPRESSION, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSQLParser.EXTERNAL, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode FILTER() { return getToken(PostgreSQLParser.FILTER, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode FOLLOWING() { return getToken(PostgreSQLParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLParser.FUNCTIONS, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLParser.GLOBAL, 0); }
		public TerminalNode GRANTED() { return getToken(PostgreSQLParser.GRANTED, 0); }
		public TerminalNode GROUPS() { return getToken(PostgreSQLParser.GROUPS, 0); }
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public TerminalNode HEADER_P() { return getToken(PostgreSQLParser.HEADER_P, 0); }
		public TerminalNode HOLD() { return getToken(PostgreSQLParser.HOLD, 0); }
		public TerminalNode HOUR_P() { return getToken(PostgreSQLParser.HOUR_P, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PostgreSQLParser.IMMUTABLE, 0); }
		public TerminalNode IMPLICIT_P() { return getToken(PostgreSQLParser.IMPLICIT_P, 0); }
		public TerminalNode IMPORT_P() { return getToken(PostgreSQLParser.IMPORT_P, 0); }
		public TerminalNode INCLUDE() { return getToken(PostgreSQLParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(PostgreSQLParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSQLParser.INCREMENT, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(PostgreSQLParser.INDEXES, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public TerminalNode INHERITS() { return getToken(PostgreSQLParser.INHERITS, 0); }
		public TerminalNode INLINE_P() { return getToken(PostgreSQLParser.INLINE_P, 0); }
		public TerminalNode INPUT_P() { return getToken(PostgreSQLParser.INPUT_P, 0); }
		public TerminalNode INSENSITIVE() { return getToken(PostgreSQLParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode INSTEAD() { return getToken(PostgreSQLParser.INSTEAD, 0); }
		public TerminalNode INVOKER() { return getToken(PostgreSQLParser.INVOKER, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(PostgreSQLParser.LABEL, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public TerminalNode LEAKPROOF() { return getToken(PostgreSQLParser.LEAKPROOF, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode LISTEN() { return getToken(PostgreSQLParser.LISTEN, 0); }
		public TerminalNode LOAD() { return getToken(PostgreSQLParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(PostgreSQLParser.LOCATION, 0); }
		public TerminalNode LOCK_P() { return getToken(PostgreSQLParser.LOCK_P, 0); }
		public TerminalNode LOCKED() { return getToken(PostgreSQLParser.LOCKED, 0); }
		public TerminalNode LOGGED() { return getToken(PostgreSQLParser.LOGGED, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode MATCH() { return getToken(PostgreSQLParser.MATCH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode MAXVALUE() { return getToken(PostgreSQLParser.MAXVALUE, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public TerminalNode MINUTE_P() { return getToken(PostgreSQLParser.MINUTE_P, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSQLParser.MINVALUE, 0); }
		public TerminalNode MODE() { return getToken(PostgreSQLParser.MODE, 0); }
		public TerminalNode MONTH_P() { return getToken(PostgreSQLParser.MONTH_P, 0); }
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public TerminalNode NAME_P() { return getToken(PostgreSQLParser.NAME_P, 0); }
		public TerminalNode NAMES() { return getToken(PostgreSQLParser.NAMES, 0); }
		public TerminalNode NEW() { return getToken(PostgreSQLParser.NEW, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public TerminalNode NFC() { return getToken(PostgreSQLParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(PostgreSQLParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(PostgreSQLParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(PostgreSQLParser.NFKD, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode NORMALIZED() { return getToken(PostgreSQLParser.NORMALIZED, 0); }
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public TerminalNode NOTIFY() { return getToken(PostgreSQLParser.NOTIFY, 0); }
		public TerminalNode NOWAIT() { return getToken(PostgreSQLParser.NOWAIT, 0); }
		public TerminalNode NULLS_P() { return getToken(PostgreSQLParser.NULLS_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode OFF() { return getToken(PostgreSQLParser.OFF, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLParser.OIDS, 0); }
		public TerminalNode OLD() { return getToken(PostgreSQLParser.OLD, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLParser.ORDINALITY, 0); }
		public TerminalNode OTHERS() { return getToken(PostgreSQLParser.OTHERS, 0); }
		public TerminalNode OVER() { return getToken(PostgreSQLParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(PostgreSQLParser.OVERRIDING, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode PARALLEL() { return getToken(PostgreSQLParser.PARALLEL, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLParser.PARTIAL, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(PostgreSQLParser.PASSING, 0); }
		public TerminalNode PASSWORD() { return getToken(PostgreSQLParser.PASSWORD, 0); }
		public TerminalNode PLANS() { return getToken(PostgreSQLParser.PLANS, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public TerminalNode PRECEDING() { return getToken(PostgreSQLParser.PRECEDING, 0); }
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public TerminalNode PREPARED() { return getToken(PostgreSQLParser.PREPARED, 0); }
		public TerminalNode PRESERVE() { return getToken(PostgreSQLParser.PRESERVE, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLParser.PROCEDURAL, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode PROCEDURES() { return getToken(PostgreSQLParser.PROCEDURES, 0); }
		public TerminalNode PROGRAM() { return getToken(PostgreSQLParser.PROGRAM, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode QUOTE() { return getToken(PostgreSQLParser.QUOTE, 0); }
		public TerminalNode RANGE() { return getToken(PostgreSQLParser.RANGE, 0); }
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode REASSIGN() { return getToken(PostgreSQLParser.REASSIGN, 0); }
		public TerminalNode RECHECK() { return getToken(PostgreSQLParser.RECHECK, 0); }
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLParser.RECURSIVE, 0); }
		public TerminalNode REF() { return getToken(PostgreSQLParser.REF, 0); }
		public TerminalNode REFERENCING() { return getToken(PostgreSQLParser.REFERENCING, 0); }
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode REINDEX() { return getToken(PostgreSQLParser.REINDEX, 0); }
		public TerminalNode RELATIVE_P() { return getToken(PostgreSQLParser.RELATIVE_P, 0); }
		public TerminalNode RELEASE() { return getToken(PostgreSQLParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLParser.REPEATABLE, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLParser.REPLICA, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public TerminalNode RETURNS() { return getToken(PostgreSQLParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(PostgreSQLParser.ROLLUP, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLParser.ROUTINES, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SCHEMAS() { return getToken(PostgreSQLParser.SCHEMAS, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSQLParser.SCROLL, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode SECOND_P() { return getToken(PostgreSQLParser.SECOND_P, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PostgreSQLParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SETS() { return getToken(PostgreSQLParser.SETS, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLParser.SHARE, 0); }
		public TerminalNode SHOW() { return getToken(PostgreSQLParser.SHOW, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSQLParser.SIMPLE, 0); }
		public TerminalNode SKIP_P() { return getToken(PostgreSQLParser.SKIP_P, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PostgreSQLParser.SNAPSHOT, 0); }
		public TerminalNode SQL_P() { return getToken(PostgreSQLParser.SQL_P, 0); }
		public TerminalNode STABLE() { return getToken(PostgreSQLParser.STABLE, 0); }
		public TerminalNode STANDALONE_P() { return getToken(PostgreSQLParser.STANDALONE_P, 0); }
		public TerminalNode START() { return getToken(PostgreSQLParser.START, 0); }
		public TerminalNode STATEMENT() { return getToken(PostgreSQLParser.STATEMENT, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode STDIN() { return getToken(PostgreSQLParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PostgreSQLParser.STDOUT, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TerminalNode STORED() { return getToken(PostgreSQLParser.STORED, 0); }
		public TerminalNode STRICT_P() { return getToken(PostgreSQLParser.STRICT_P, 0); }
		public TerminalNode STRIP_P() { return getToken(PostgreSQLParser.STRIP_P, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode SUPPORT() { return getToken(PostgreSQLParser.SUPPORT, 0); }
		public TerminalNode SYSID() { return getToken(PostgreSQLParser.SYSID, 0); }
		public TerminalNode SYSTEM_P() { return getToken(PostgreSQLParser.SYSTEM_P, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLParser.TABLES, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLParser.TIES, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLParser.TRUNCATE, 0); }
		public TerminalNode TRUSTED() { return getToken(PostgreSQLParser.TRUSTED, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode TYPES_P() { return getToken(PostgreSQLParser.TYPES_P, 0); }
		public TerminalNode UESCAPE() { return getToken(PostgreSQLParser.UESCAPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PostgreSQLParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PostgreSQLParser.UNCOMMITTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PostgreSQLParser.UNENCRYPTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(PostgreSQLParser.UNKNOWN, 0); }
		public TerminalNode UNLISTEN() { return getToken(PostgreSQLParser.UNLISTEN, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public TerminalNode UNTIL() { return getToken(PostgreSQLParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode VACUUM() { return getToken(PostgreSQLParser.VACUUM, 0); }
		public TerminalNode VALID() { return getToken(PostgreSQLParser.VALID, 0); }
		public TerminalNode VALIDATE() { return getToken(PostgreSQLParser.VALIDATE, 0); }
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public TerminalNode VARYING() { return getToken(PostgreSQLParser.VARYING, 0); }
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode VIEWS() { return getToken(PostgreSQLParser.VIEWS, 0); }
		public TerminalNode VOLATILE() { return getToken(PostgreSQLParser.VOLATILE, 0); }
		public TerminalNode WHITESPACE_P() { return getToken(PostgreSQLParser.WHITESPACE_P, 0); }
		public TerminalNode WITHIN() { return getToken(PostgreSQLParser.WITHIN, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public TerminalNode WRITE() { return getToken(PostgreSQLParser.WRITE, 0); }
		public TerminalNode XML_P() { return getToken(PostgreSQLParser.XML_P, 0); }
		public TerminalNode YEAR_P() { return getToken(PostgreSQLParser.YEAR_P, 0); }
		public TerminalNode YES_P() { return getToken(PostgreSQLParser.YES_P, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public Unreserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUnreserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUnreserved_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUnreserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unreserved_keywordContext unreserved_keyword() throws RecognitionException {
		Unreserved_keywordContext _localctx = new Unreserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1388, RULE_unreserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9900);
			_la = _input.LA(1);
			if ( !(((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & -31L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & -4611686018427387905L) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & -4503599627370499L) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & -1L) != 0) || ((((_la - 433)) & ~0x3f) == 0 && ((1L << (_la - 433)) & 72028319537692671L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Col_name_keywordContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSQLParser.BIGINT, 0); }
		public BitContext bit() {
			return getRuleContext(BitContext.class,0);
		}
		public TerminalNode BOOLEAN_P() { return getToken(PostgreSQLParser.BOOLEAN_P, 0); }
		public TerminalNode CHAR_P() { return getToken(PostgreSQLParser.CHAR_P, 0); }
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public TerminalNode COALESCE() { return getToken(PostgreSQLParser.COALESCE, 0); }
		public TerminalNode DEC() { return getToken(PostgreSQLParser.DEC, 0); }
		public TerminalNode DECIMAL_P() { return getToken(PostgreSQLParser.DECIMAL_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode EXTRACT() { return getToken(PostgreSQLParser.EXTRACT, 0); }
		public TerminalNode FLOAT_P() { return getToken(PostgreSQLParser.FLOAT_P, 0); }
		public TerminalNode GREATEST() { return getToken(PostgreSQLParser.GREATEST, 0); }
		public TerminalNode GROUPING() { return getToken(PostgreSQLParser.GROUPING, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public TerminalNode INT_P() { return getToken(PostgreSQLParser.INT_P, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(PostgreSQLParser.INTERVAL, 0); }
		public TerminalNode LEAST() { return getToken(PostgreSQLParser.LEAST, 0); }
		public TerminalNode NATIONAL() { return getToken(PostgreSQLParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(PostgreSQLParser.NCHAR, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public TerminalNode NORMALIZE() { return getToken(PostgreSQLParser.NORMALIZE, 0); }
		public TerminalNode NULLIF() { return getToken(PostgreSQLParser.NULLIF, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode OUT_P() { return getToken(PostgreSQLParser.OUT_P, 0); }
		public TerminalNode OVERLAY() { return getToken(PostgreSQLParser.OVERLAY, 0); }
		public TerminalNode POSITION() { return getToken(PostgreSQLParser.POSITION, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSQLParser.PRECISION, 0); }
		public TerminalNode REAL() { return getToken(PostgreSQLParser.REAL, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode SETOF() { return getToken(PostgreSQLParser.SETOF, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSQLParser.SMALLINT, 0); }
		public TerminalNode SUBSTRING() { return getToken(PostgreSQLParser.SUBSTRING, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLParser.TIMESTAMP, 0); }
		public TerminalNode TREAT() { return getToken(PostgreSQLParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(PostgreSQLParser.TRIM, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(PostgreSQLParser.VARCHAR, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(PostgreSQLParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCONCAT() { return getToken(PostgreSQLParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PostgreSQLParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PostgreSQLParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(PostgreSQLParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(PostgreSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(PostgreSQLParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(PostgreSQLParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(PostgreSQLParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(PostgreSQLParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(PostgreSQLParser.XMLTABLE, 0); }
		public Builtin_function_nameContext builtin_function_name() {
			return getRuleContext(Builtin_function_nameContext.class,0);
		}
		public Col_name_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_col_name_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCol_name_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCol_name_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCol_name_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Col_name_keywordContext col_name_keyword() throws RecognitionException {
		Col_name_keywordContext _localctx = new Col_name_keywordContext(_ctx, getState());
		enterRule(_localctx, 1390, RULE_col_name_keyword);
		try {
			setState(9954);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,667,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9902);
				match(BETWEEN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9903);
				match(BIGINT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9904);
				bit();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9905);
				match(BOOLEAN_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9906);
				match(CHAR_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9907);
				character();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9908);
				match(COALESCE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9909);
				match(DEC);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9910);
				match(DECIMAL_P);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9911);
				match(EXISTS);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9912);
				match(EXTRACT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(9913);
				match(FLOAT_P);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(9914);
				match(GREATEST);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(9915);
				match(GROUPING);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(9916);
				match(INOUT);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(9917);
				match(INT_P);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(9918);
				match(INTEGER);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(9919);
				match(INTERVAL);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(9920);
				match(LEAST);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(9921);
				match(NATIONAL);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(9922);
				match(NCHAR);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(9923);
				match(NONE);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(9924);
				match(NORMALIZE);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(9925);
				match(NULLIF);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(9926);
				numeric();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(9927);
				match(OUT_P);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(9928);
				match(OVERLAY);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(9929);
				match(POSITION);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(9930);
				match(PRECISION);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(9931);
				match(REAL);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(9932);
				match(ROW);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(9933);
				match(SETOF);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(9934);
				match(SMALLINT);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(9935);
				match(SUBSTRING);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(9936);
				match(TIME);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(9937);
				match(TIMESTAMP);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(9938);
				match(TREAT);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(9939);
				match(TRIM);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(9940);
				match(VALUES);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(9941);
				match(VARCHAR);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(9942);
				match(XMLATTRIBUTES);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(9943);
				match(XMLCONCAT);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(9944);
				match(XMLELEMENT);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(9945);
				match(XMLEXISTS);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(9946);
				match(XMLFOREST);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(9947);
				match(XMLNAMESPACES);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(9948);
				match(XMLPARSE);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(9949);
				match(XMLPI);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(9950);
				match(XMLROOT);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(9951);
				match(XMLSERIALIZE);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(9952);
				match(XMLTABLE);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(9953);
				builtin_function_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_func_name_keywordContext extends ParserRuleContext {
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public TerminalNode BINARY() { return getToken(PostgreSQLParser.BINARY, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public TerminalNode CROSS() { return getToken(PostgreSQLParser.CROSS, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PostgreSQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode FREEZE() { return getToken(PostgreSQLParser.FREEZE, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode ILIKE() { return getToken(PostgreSQLParser.ILIKE, 0); }
		public TerminalNode INNER_P() { return getToken(PostgreSQLParser.INNER_P, 0); }
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode ISNULL() { return getToken(PostgreSQLParser.ISNULL, 0); }
		public TerminalNode JOIN() { return getToken(PostgreSQLParser.JOIN, 0); }
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public TerminalNode NATURAL() { return getToken(PostgreSQLParser.NATURAL, 0); }
		public TerminalNode NOTNULL() { return getToken(PostgreSQLParser.NOTNULL, 0); }
		public TerminalNode OUTER_P() { return getToken(PostgreSQLParser.OUTER_P, 0); }
		public TerminalNode OVERLAPS() { return getToken(PostgreSQLParser.OVERLAPS, 0); }
		public TerminalNode SIMILAR() { return getToken(PostgreSQLParser.SIMILAR, 0); }
		public TerminalNode TABLESAMPLE() { return getToken(PostgreSQLParser.TABLESAMPLE, 0); }
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public Type_func_name_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_func_name_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterType_func_name_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitType_func_name_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitType_func_name_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_func_name_keywordContext type_func_name_keyword() throws RecognitionException {
		Type_func_name_keywordContext _localctx = new Type_func_name_keywordContext(_ctx, getState());
		enterRule(_localctx, 1392, RULE_type_func_name_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9956);
			_la = _input.LA(1);
			if ( !(((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 7069695L) != 0) || _la==TABLESAMPLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reserved_keywordContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode ANALYSE() { return getToken(PostgreSQLParser.ANALYSE, 0); }
		public TerminalNode ANALYZE() { return getToken(PostgreSQLParser.ANALYZE, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode ANY() { return getToken(PostgreSQLParser.ANY, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode ASC() { return getToken(PostgreSQLParser.ASC, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(PostgreSQLParser.ASYMMETRIC, 0); }
		public TerminalNode BOTH() { return getToken(PostgreSQLParser.BOTH, 0); }
		public TerminalNode CASE() { return getToken(PostgreSQLParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PostgreSQLParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PostgreSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PostgreSQLParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode DESC() { return getToken(PostgreSQLParser.DESC, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public TerminalNode ELSE() { return getToken(PostgreSQLParser.ELSE, 0); }
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public TerminalNode EXCEPT() { return getToken(PostgreSQLParser.EXCEPT, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode HAVING() { return getToken(PostgreSQLParser.HAVING, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLParser.INITIALLY, 0); }
		public TerminalNode INTERSECT() { return getToken(PostgreSQLParser.INTERSECT, 0); }
		public TerminalNode LATERAL_P() { return getToken(PostgreSQLParser.LATERAL_P, 0); }
		public TerminalNode LEADING() { return getToken(PostgreSQLParser.LEADING, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public TerminalNode LOCALTIME() { return getToken(PostgreSQLParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PostgreSQLParser.LOCALTIMESTAMP, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode OFFSET() { return getToken(PostgreSQLParser.OFFSET, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode PLACING() { return getToken(PostgreSQLParser.PLACING, 0); }
		public TerminalNode PRIMARY() { return getToken(PostgreSQLParser.PRIMARY, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public TerminalNode RETURNING() { return getToken(PostgreSQLParser.RETURNING, 0); }
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public TerminalNode SOME() { return getToken(PostgreSQLParser.SOME, 0); }
		public TerminalNode SYMMETRIC() { return getToken(PostgreSQLParser.SYMMETRIC, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode TRAILING() { return getToken(PostgreSQLParser.TRAILING, 0); }
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode UNION() { return getToken(PostgreSQLParser.UNION, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSQLParser.VARIADIC, 0); }
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public TerminalNode WINDOW() { return getToken(PostgreSQLParser.WINDOW, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Reserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReserved_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reserved_keywordContext reserved_keyword() throws RecognitionException {
		Reserved_keywordContext _localctx = new Reserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1394, RULE_reserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9958);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -9007200328482816L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4398046510975L) != 0) || _la==END_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Builtin_function_nameContext extends ParserRuleContext {
		public TerminalNode XMLCOMMENT() { return getToken(PostgreSQLParser.XMLCOMMENT, 0); }
		public TerminalNode XML_IS_WELL_FORMED() { return getToken(PostgreSQLParser.XML_IS_WELL_FORMED, 0); }
		public TerminalNode XML_IS_WELL_FORMED_DOCUMENT() { return getToken(PostgreSQLParser.XML_IS_WELL_FORMED_DOCUMENT, 0); }
		public TerminalNode XML_IS_WELL_FORMED_CONTENT() { return getToken(PostgreSQLParser.XML_IS_WELL_FORMED_CONTENT, 0); }
		public TerminalNode XMLAGG() { return getToken(PostgreSQLParser.XMLAGG, 0); }
		public TerminalNode XPATH() { return getToken(PostgreSQLParser.XPATH, 0); }
		public TerminalNode XPATH_EXISTS() { return getToken(PostgreSQLParser.XPATH_EXISTS, 0); }
		public TerminalNode ABS() { return getToken(PostgreSQLParser.ABS, 0); }
		public TerminalNode CBRT() { return getToken(PostgreSQLParser.CBRT, 0); }
		public TerminalNode CEIL() { return getToken(PostgreSQLParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(PostgreSQLParser.CEILING, 0); }
		public TerminalNode DEGREES() { return getToken(PostgreSQLParser.DEGREES, 0); }
		public TerminalNode DIV() { return getToken(PostgreSQLParser.DIV, 0); }
		public TerminalNode EXP() { return getToken(PostgreSQLParser.EXP, 0); }
		public TerminalNode FACTORIAL() { return getToken(PostgreSQLParser.FACTORIAL, 0); }
		public TerminalNode FLOOR() { return getToken(PostgreSQLParser.FLOOR, 0); }
		public TerminalNode GCD() { return getToken(PostgreSQLParser.GCD, 0); }
		public TerminalNode LCM() { return getToken(PostgreSQLParser.LCM, 0); }
		public TerminalNode LN() { return getToken(PostgreSQLParser.LN, 0); }
		public TerminalNode LOG() { return getToken(PostgreSQLParser.LOG, 0); }
		public TerminalNode LOG10() { return getToken(PostgreSQLParser.LOG10, 0); }
		public TerminalNode MIN_SCALE() { return getToken(PostgreSQLParser.MIN_SCALE, 0); }
		public TerminalNode MOD() { return getToken(PostgreSQLParser.MOD, 0); }
		public TerminalNode PI() { return getToken(PostgreSQLParser.PI, 0); }
		public TerminalNode POWER() { return getToken(PostgreSQLParser.POWER, 0); }
		public TerminalNode RADIANS() { return getToken(PostgreSQLParser.RADIANS, 0); }
		public TerminalNode ROUND() { return getToken(PostgreSQLParser.ROUND, 0); }
		public TerminalNode SCALE() { return getToken(PostgreSQLParser.SCALE, 0); }
		public TerminalNode SIGN() { return getToken(PostgreSQLParser.SIGN, 0); }
		public TerminalNode SQRT() { return getToken(PostgreSQLParser.SQRT, 0); }
		public TerminalNode TRIM_SCALE() { return getToken(PostgreSQLParser.TRIM_SCALE, 0); }
		public TerminalNode TRUNC() { return getToken(PostgreSQLParser.TRUNC, 0); }
		public TerminalNode WIDTH_BUCKET() { return getToken(PostgreSQLParser.WIDTH_BUCKET, 0); }
		public TerminalNode RANDOM() { return getToken(PostgreSQLParser.RANDOM, 0); }
		public TerminalNode SETSEED() { return getToken(PostgreSQLParser.SETSEED, 0); }
		public TerminalNode ACOS() { return getToken(PostgreSQLParser.ACOS, 0); }
		public TerminalNode ACOSD() { return getToken(PostgreSQLParser.ACOSD, 0); }
		public TerminalNode ACOSH() { return getToken(PostgreSQLParser.ACOSH, 0); }
		public TerminalNode ASIN() { return getToken(PostgreSQLParser.ASIN, 0); }
		public TerminalNode ASIND() { return getToken(PostgreSQLParser.ASIND, 0); }
		public TerminalNode ASINH() { return getToken(PostgreSQLParser.ASINH, 0); }
		public TerminalNode ATAN() { return getToken(PostgreSQLParser.ATAN, 0); }
		public TerminalNode ATAND() { return getToken(PostgreSQLParser.ATAND, 0); }
		public TerminalNode ATANH() { return getToken(PostgreSQLParser.ATANH, 0); }
		public TerminalNode ATAN2() { return getToken(PostgreSQLParser.ATAN2, 0); }
		public TerminalNode ATAN2D() { return getToken(PostgreSQLParser.ATAN2D, 0); }
		public TerminalNode COS() { return getToken(PostgreSQLParser.COS, 0); }
		public TerminalNode COSD() { return getToken(PostgreSQLParser.COSD, 0); }
		public TerminalNode COSH() { return getToken(PostgreSQLParser.COSH, 0); }
		public TerminalNode COT() { return getToken(PostgreSQLParser.COT, 0); }
		public TerminalNode COTD() { return getToken(PostgreSQLParser.COTD, 0); }
		public TerminalNode SIN() { return getToken(PostgreSQLParser.SIN, 0); }
		public TerminalNode SIND() { return getToken(PostgreSQLParser.SIND, 0); }
		public TerminalNode SINH() { return getToken(PostgreSQLParser.SINH, 0); }
		public TerminalNode TAN() { return getToken(PostgreSQLParser.TAN, 0); }
		public TerminalNode TAND() { return getToken(PostgreSQLParser.TAND, 0); }
		public TerminalNode TANH() { return getToken(PostgreSQLParser.TANH, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(PostgreSQLParser.BIT_LENGTH, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(PostgreSQLParser.CHAR_LENGTH, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(PostgreSQLParser.CHARACTER_LENGTH, 0); }
		public TerminalNode LOWER() { return getToken(PostgreSQLParser.LOWER, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(PostgreSQLParser.OCTET_LENGTH, 0); }
		public TerminalNode UPPER() { return getToken(PostgreSQLParser.UPPER, 0); }
		public TerminalNode ASCII() { return getToken(PostgreSQLParser.ASCII, 0); }
		public TerminalNode BTRIM() { return getToken(PostgreSQLParser.BTRIM, 0); }
		public TerminalNode CHR() { return getToken(PostgreSQLParser.CHR, 0); }
		public TerminalNode CONCAT() { return getToken(PostgreSQLParser.CONCAT, 0); }
		public TerminalNode CONCAT_WS() { return getToken(PostgreSQLParser.CONCAT_WS, 0); }
		public TerminalNode FORMAT() { return getToken(PostgreSQLParser.FORMAT, 0); }
		public TerminalNode INITCAP() { return getToken(PostgreSQLParser.INITCAP, 0); }
		public TerminalNode LENGTH() { return getToken(PostgreSQLParser.LENGTH, 0); }
		public TerminalNode LPAD() { return getToken(PostgreSQLParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(PostgreSQLParser.LTRIM, 0); }
		public TerminalNode MD5() { return getToken(PostgreSQLParser.MD5, 0); }
		public TerminalNode PARSE_IDENT() { return getToken(PostgreSQLParser.PARSE_IDENT, 0); }
		public TerminalNode PG_CLIENT_ENCODING() { return getToken(PostgreSQLParser.PG_CLIENT_ENCODING, 0); }
		public TerminalNode QUOTE_IDENT() { return getToken(PostgreSQLParser.QUOTE_IDENT, 0); }
		public TerminalNode QUOTE_LITERAL() { return getToken(PostgreSQLParser.QUOTE_LITERAL, 0); }
		public TerminalNode QUOTE_NULLABLE() { return getToken(PostgreSQLParser.QUOTE_NULLABLE, 0); }
		public TerminalNode REGEXP_COUNT() { return getToken(PostgreSQLParser.REGEXP_COUNT, 0); }
		public TerminalNode REGEXP_INSTR() { return getToken(PostgreSQLParser.REGEXP_INSTR, 0); }
		public TerminalNode REGEXP_LIKE() { return getToken(PostgreSQLParser.REGEXP_LIKE, 0); }
		public TerminalNode REGEXP_MATCH() { return getToken(PostgreSQLParser.REGEXP_MATCH, 0); }
		public TerminalNode REGEXP_MATCHES() { return getToken(PostgreSQLParser.REGEXP_MATCHES, 0); }
		public TerminalNode REGEXP_REPLACE() { return getToken(PostgreSQLParser.REGEXP_REPLACE, 0); }
		public TerminalNode REGEXP_SPLIT_TO_ARRAY() { return getToken(PostgreSQLParser.REGEXP_SPLIT_TO_ARRAY, 0); }
		public TerminalNode REGEXP_SPLIT_TO_TABLE() { return getToken(PostgreSQLParser.REGEXP_SPLIT_TO_TABLE, 0); }
		public TerminalNode REGEXP_SUBSTR() { return getToken(PostgreSQLParser.REGEXP_SUBSTR, 0); }
		public TerminalNode REPEAT() { return getToken(PostgreSQLParser.REPEAT, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public TerminalNode REVERSE() { return getToken(PostgreSQLParser.REVERSE, 0); }
		public TerminalNode RPAD() { return getToken(PostgreSQLParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(PostgreSQLParser.RTRIM, 0); }
		public TerminalNode SPLIT_PART() { return getToken(PostgreSQLParser.SPLIT_PART, 0); }
		public TerminalNode STARTS_WITH() { return getToken(PostgreSQLParser.STARTS_WITH, 0); }
		public TerminalNode STRING_TO_ARRAY() { return getToken(PostgreSQLParser.STRING_TO_ARRAY, 0); }
		public TerminalNode STRING_TO_TABLE() { return getToken(PostgreSQLParser.STRING_TO_TABLE, 0); }
		public TerminalNode STRPOS() { return getToken(PostgreSQLParser.STRPOS, 0); }
		public TerminalNode SUBSTR() { return getToken(PostgreSQLParser.SUBSTR, 0); }
		public TerminalNode TO_ASCII() { return getToken(PostgreSQLParser.TO_ASCII, 0); }
		public TerminalNode TO_HEX() { return getToken(PostgreSQLParser.TO_HEX, 0); }
		public TerminalNode TRANSLATE() { return getToken(PostgreSQLParser.TRANSLATE, 0); }
		public TerminalNode UNISTR() { return getToken(PostgreSQLParser.UNISTR, 0); }
		public TerminalNode AGE() { return getToken(PostgreSQLParser.AGE, 0); }
		public TerminalNode DATE_BIN() { return getToken(PostgreSQLParser.DATE_BIN, 0); }
		public TerminalNode DATE_PART() { return getToken(PostgreSQLParser.DATE_PART, 0); }
		public TerminalNode DATE_TRUNC() { return getToken(PostgreSQLParser.DATE_TRUNC, 0); }
		public TerminalNode ISFINITE() { return getToken(PostgreSQLParser.ISFINITE, 0); }
		public TerminalNode JUSTIFY_DAYS() { return getToken(PostgreSQLParser.JUSTIFY_DAYS, 0); }
		public TerminalNode JUSTIFY_HOURS() { return getToken(PostgreSQLParser.JUSTIFY_HOURS, 0); }
		public TerminalNode JUSTIFY_INTERVAL() { return getToken(PostgreSQLParser.JUSTIFY_INTERVAL, 0); }
		public TerminalNode MAKE_DATE() { return getToken(PostgreSQLParser.MAKE_DATE, 0); }
		public TerminalNode MAKE_INTERVAL() { return getToken(PostgreSQLParser.MAKE_INTERVAL, 0); }
		public TerminalNode MAKE_TIME() { return getToken(PostgreSQLParser.MAKE_TIME, 0); }
		public TerminalNode MAKE_TIMESTAMP() { return getToken(PostgreSQLParser.MAKE_TIMESTAMP, 0); }
		public TerminalNode MAKE_TIMESTAMPTZ() { return getToken(PostgreSQLParser.MAKE_TIMESTAMPTZ, 0); }
		public TerminalNode CLOCK_TIMESTAMP() { return getToken(PostgreSQLParser.CLOCK_TIMESTAMP, 0); }
		public TerminalNode NOW() { return getToken(PostgreSQLParser.NOW, 0); }
		public TerminalNode STATEMENT_TIMESTAMP() { return getToken(PostgreSQLParser.STATEMENT_TIMESTAMP, 0); }
		public TerminalNode TIMEOFDAY() { return getToken(PostgreSQLParser.TIMEOFDAY, 0); }
		public TerminalNode TRANSACTION_TIMESTAMP() { return getToken(PostgreSQLParser.TRANSACTION_TIMESTAMP, 0); }
		public TerminalNode TO_TIMESTAMP() { return getToken(PostgreSQLParser.TO_TIMESTAMP, 0); }
		public TerminalNode TO_CHAR() { return getToken(PostgreSQLParser.TO_CHAR, 0); }
		public TerminalNode TO_DATE() { return getToken(PostgreSQLParser.TO_DATE, 0); }
		public TerminalNode TO_NUMBER() { return getToken(PostgreSQLParser.TO_NUMBER, 0); }
		public Builtin_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_builtin_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterBuiltin_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitBuiltin_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitBuiltin_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Builtin_function_nameContext builtin_function_name() throws RecognitionException {
		Builtin_function_nameContext _localctx = new Builtin_function_nameContext(_ctx, getState());
		enterRule(_localctx, 1396, RULE_builtin_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9960);
			_la = _input.LA(1);
			if ( !(_la==REPLACE || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & 127L) != 0) || ((((_la - 504)) & ~0x3f) == 0 && ((1L << (_la - 504)) & -130559L) != 0) || ((((_la - 568)) & ~0x3f) == 0 && ((1L << (_la - 568)) & -1L) != 0) || ((((_la - 632)) & ~0x3f) == 0 && ((1L << (_la - 632)) & 15L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pl_functionContext extends ParserRuleContext {
		public Comp_optionsContext comp_options() {
			return getRuleContext(Comp_optionsContext.class,0);
		}
		public Pl_blockContext pl_block() {
			return getRuleContext(Pl_blockContext.class,0);
		}
		public Opt_semiContext opt_semi() {
			return getRuleContext(Opt_semiContext.class,0);
		}
		public Pl_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pl_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPl_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPl_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPl_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pl_functionContext pl_function() throws RecognitionException {
		Pl_functionContext _localctx = new Pl_functionContext(_ctx, getState());
		enterRule(_localctx, 1398, RULE_pl_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9962);
			comp_options();
			setState(9963);
			pl_block();
			setState(9964);
			opt_semi();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comp_optionsContext extends ParserRuleContext {
		public List<Comp_optionContext> comp_option() {
			return getRuleContexts(Comp_optionContext.class);
		}
		public Comp_optionContext comp_option(int i) {
			return getRuleContext(Comp_optionContext.class,i);
		}
		public Comp_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comp_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterComp_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitComp_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitComp_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comp_optionsContext comp_options() throws RecognitionException {
		Comp_optionsContext _localctx = new Comp_optionsContext(_ctx, getState());
		enterRule(_localctx, 1400, RULE_comp_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9969);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Operator) {
				{
				{
				setState(9966);
				comp_option();
				}
				}
				setState(9971);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comp_optionContext extends ParserRuleContext {
		public SharpContext sharp() {
			return getRuleContext(SharpContext.class,0);
		}
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode DUMP() { return getToken(PostgreSQLParser.DUMP, 0); }
		public TerminalNode PRINT_STRICT_PARAMS() { return getToken(PostgreSQLParser.PRINT_STRICT_PARAMS, 0); }
		public Option_valueContext option_value() {
			return getRuleContext(Option_valueContext.class,0);
		}
		public TerminalNode VARIABLE_CONFLICT() { return getToken(PostgreSQLParser.VARIABLE_CONFLICT, 0); }
		public TerminalNode ERROR() { return getToken(PostgreSQLParser.ERROR, 0); }
		public TerminalNode USE_VARIABLE() { return getToken(PostgreSQLParser.USE_VARIABLE, 0); }
		public TerminalNode USE_COLUMN() { return getToken(PostgreSQLParser.USE_COLUMN, 0); }
		public Comp_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comp_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterComp_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitComp_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitComp_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comp_optionContext comp_option() throws RecognitionException {
		Comp_optionContext _localctx = new Comp_optionContext(_ctx, getState());
		enterRule(_localctx, 1402, RULE_comp_option);
		try {
			setState(9992);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,669,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9972);
				sharp();
				setState(9973);
				match(OPTION);
				setState(9974);
				match(DUMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9976);
				sharp();
				setState(9977);
				match(PRINT_STRICT_PARAMS);
				setState(9978);
				option_value();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9980);
				sharp();
				setState(9981);
				match(VARIABLE_CONFLICT);
				setState(9982);
				match(ERROR);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9984);
				sharp();
				setState(9985);
				match(VARIABLE_CONFLICT);
				setState(9986);
				match(USE_VARIABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9988);
				sharp();
				setState(9989);
				match(VARIABLE_CONFLICT);
				setState(9990);
				match(USE_COLUMN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SharpContext extends ParserRuleContext {
		public TerminalNode Operator() { return getToken(PostgreSQLParser.Operator, 0); }
		public SharpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sharp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSharp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSharp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSharp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SharpContext sharp() throws RecognitionException {
		SharpContext _localctx = new SharpContext(_ctx, getState());
		enterRule(_localctx, 1404, RULE_sharp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9994);
			match(Operator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Option_valueContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Option_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOption_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOption_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOption_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Option_valueContext option_value() throws RecognitionException {
		Option_valueContext _localctx = new Option_valueContext(_ctx, getState());
		enterRule(_localctx, 1406, RULE_option_value);
		try {
			setState(10000);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,670,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9996);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9997);
				reserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9998);
				plsql_unreserved_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9999);
				unreserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_semiContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Opt_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_semi(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_semi(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_semiContext opt_semi() throws RecognitionException {
		Opt_semiContext _localctx = new Opt_semiContext(_ctx, getState());
		enterRule(_localctx, 1408, RULE_opt_semi);
		try {
			setState(10004);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case SEMI:
				enterOuterAlt(_localctx, 2);
				{
				setState(10003);
				match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pl_blockContext extends ParserRuleContext {
		public Decl_sectContext decl_sect() {
			return getRuleContext(Decl_sectContext.class,0);
		}
		public TerminalNode BEGIN_P() { return getToken(PostgreSQLParser.BEGIN_P, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Exception_sectContext exception_sect() {
			return getRuleContext(Exception_sectContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public Opt_labelContext opt_label() {
			return getRuleContext(Opt_labelContext.class,0);
		}
		public Pl_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pl_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPl_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPl_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPl_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pl_blockContext pl_block() throws RecognitionException {
		Pl_blockContext _localctx = new Pl_blockContext(_ctx, getState());
		enterRule(_localctx, 1410, RULE_pl_block);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10006);
			decl_sect();
			setState(10007);
			match(BEGIN_P);
			setState(10008);
			proc_sect();
			setState(10009);
			exception_sect();
			setState(10010);
			match(END_P);
			setState(10011);
			opt_label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Decl_sectContext extends ParserRuleContext {
		public Opt_block_labelContext opt_block_label() {
			return getRuleContext(Opt_block_labelContext.class,0);
		}
		public Decl_startContext decl_start() {
			return getRuleContext(Decl_startContext.class,0);
		}
		public Decl_stmtsContext decl_stmts() {
			return getRuleContext(Decl_stmtsContext.class,0);
		}
		public Decl_sectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_sect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_sect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_sect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_sect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_sectContext decl_sect() throws RecognitionException {
		Decl_sectContext _localctx = new Decl_sectContext(_ctx, getState());
		enterRule(_localctx, 1412, RULE_decl_sect);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10013);
			opt_block_label();
			setState(10018);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(10014);
				decl_start();
				setState(10016);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,672,_ctx) ) {
				case 1:
					{
					setState(10015);
					decl_stmts();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Decl_startContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(PostgreSQLParser.DECLARE, 0); }
		public Decl_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_startContext decl_start() throws RecognitionException {
		Decl_startContext _localctx = new Decl_startContext(_ctx, getState());
		enterRule(_localctx, 1414, RULE_decl_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10020);
			match(DECLARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Decl_stmtsContext extends ParserRuleContext {
		public List<Decl_stmtContext> decl_stmt() {
			return getRuleContexts(Decl_stmtContext.class);
		}
		public Decl_stmtContext decl_stmt(int i) {
			return getRuleContext(Decl_stmtContext.class,i);
		}
		public Decl_stmtsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_stmts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_stmts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_stmts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_stmts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_stmtsContext decl_stmts() throws RecognitionException {
		Decl_stmtsContext _localctx = new Decl_stmtsContext(_ctx, getState());
		enterRule(_localctx, 1416, RULE_decl_stmts);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(10023); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(10022);
					decl_stmt();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(10025); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,674,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Label_declContext extends ParserRuleContext {
		public TerminalNode LESS_LESS() { return getToken(PostgreSQLParser.LESS_LESS, 0); }
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public TerminalNode GREATER_GREATER() { return getToken(PostgreSQLParser.GREATER_GREATER, 0); }
		public Label_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_decl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLabel_decl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLabel_decl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLabel_decl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_declContext label_decl() throws RecognitionException {
		Label_declContext _localctx = new Label_declContext(_ctx, getState());
		enterRule(_localctx, 1418, RULE_label_decl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10027);
			match(LESS_LESS);
			setState(10028);
			any_identifier();
			setState(10029);
			match(GREATER_GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Decl_stmtContext extends ParserRuleContext {
		public Decl_statementContext decl_statement() {
			return getRuleContext(Decl_statementContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PostgreSQLParser.DECLARE, 0); }
		public Label_declContext label_decl() {
			return getRuleContext(Label_declContext.class,0);
		}
		public Decl_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_stmtContext decl_stmt() throws RecognitionException {
		Decl_stmtContext _localctx = new Decl_stmtContext(_ctx, getState());
		enterRule(_localctx, 1420, RULE_decl_stmt);
		try {
			setState(10034);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10031);
				decl_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10032);
				match(DECLARE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10033);
				label_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Decl_statementContext extends ParserRuleContext {
		public Decl_varnameContext decl_varname() {
			return getRuleContext(Decl_varnameContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public TerminalNode ALIAS() { return getToken(PostgreSQLParser.ALIAS, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Decl_aliasitemContext decl_aliasitem() {
			return getRuleContext(Decl_aliasitemContext.class,0);
		}
		public Decl_constContext decl_const() {
			return getRuleContext(Decl_constContext.class,0);
		}
		public Decl_datatypeContext decl_datatype() {
			return getRuleContext(Decl_datatypeContext.class,0);
		}
		public Decl_collateContext decl_collate() {
			return getRuleContext(Decl_collateContext.class,0);
		}
		public Decl_notnullContext decl_notnull() {
			return getRuleContext(Decl_notnullContext.class,0);
		}
		public Decl_defvalContext decl_defval() {
			return getRuleContext(Decl_defvalContext.class,0);
		}
		public Opt_scrollableContext opt_scrollable() {
			return getRuleContext(Opt_scrollableContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(PostgreSQLParser.CURSOR, 0); }
		public Decl_cursor_argsContext decl_cursor_args() {
			return getRuleContext(Decl_cursor_argsContext.class,0);
		}
		public Decl_is_forContext decl_is_for() {
			return getRuleContext(Decl_is_forContext.class,0);
		}
		public Decl_cursor_queryContext decl_cursor_query() {
			return getRuleContext(Decl_cursor_queryContext.class,0);
		}
		public Decl_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_statementContext decl_statement() throws RecognitionException {
		Decl_statementContext _localctx = new Decl_statementContext(_ctx, getState());
		enterRule(_localctx, 1422, RULE_decl_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10036);
			decl_varname();
			setState(10052);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,676,_ctx) ) {
			case 1:
				{
				setState(10037);
				match(ALIAS);
				setState(10038);
				match(FOR);
				setState(10039);
				decl_aliasitem();
				}
				break;
			case 2:
				{
				setState(10040);
				decl_const();
				setState(10041);
				decl_datatype();
				setState(10042);
				decl_collate();
				setState(10043);
				decl_notnull();
				setState(10044);
				decl_defval();
				}
				break;
			case 3:
				{
				setState(10046);
				opt_scrollable();
				setState(10047);
				match(CURSOR);
				setState(10048);
				decl_cursor_args();
				setState(10049);
				decl_is_for();
				setState(10050);
				decl_cursor_query();
				}
				break;
			}
			setState(10054);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_scrollableContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSQLParser.SCROLL, 0); }
		public Opt_scrollableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_scrollable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_scrollable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_scrollable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_scrollable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_scrollableContext opt_scrollable() throws RecognitionException {
		Opt_scrollableContext _localctx = new Opt_scrollableContext(_ctx, getState());
		enterRule(_localctx, 1424, RULE_opt_scrollable);
		try {
			setState(10060);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURSOR:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(10057);
				match(NO);
				setState(10058);
				match(SCROLL);
				}
				break;
			case SCROLL:
				enterOuterAlt(_localctx, 3);
				{
				setState(10059);
				match(SCROLL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Decl_cursor_queryContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public Decl_cursor_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_cursor_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_cursor_query(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_cursor_query(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_queryContext decl_cursor_query() throws RecognitionException {
		Decl_cursor_queryContext _localctx = new Decl_cursor_queryContext(_ctx, getState());
		enterRule(_localctx, 1426, RULE_decl_cursor_query);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10062);
			selectstmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Decl_cursor_argsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Decl_cursor_arglistContext decl_cursor_arglist() {
			return getRuleContext(Decl_cursor_arglistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Decl_cursor_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_cursor_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_cursor_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_cursor_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_argsContext decl_cursor_args() throws RecognitionException {
		Decl_cursor_argsContext _localctx = new Decl_cursor_argsContext(_ctx, getState());
		enterRule(_localctx, 1428, RULE_decl_cursor_args);
		try {
			setState(10069);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
			case IS:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(10065);
				match(OPEN_PAREN);
				setState(10066);
				decl_cursor_arglist();
				setState(10067);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Decl_cursor_arglistContext extends ParserRuleContext {
		public List<Decl_cursor_argContext> decl_cursor_arg() {
			return getRuleContexts(Decl_cursor_argContext.class);
		}
		public Decl_cursor_argContext decl_cursor_arg(int i) {
			return getRuleContext(Decl_cursor_argContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Decl_cursor_arglistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_arglist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_cursor_arglist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_cursor_arglist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_cursor_arglist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_arglistContext decl_cursor_arglist() throws RecognitionException {
		Decl_cursor_arglistContext _localctx = new Decl_cursor_arglistContext(_ctx, getState());
		enterRule(_localctx, 1430, RULE_decl_cursor_arglist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10071);
			decl_cursor_arg();
			setState(10076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10072);
				match(COMMA);
				setState(10073);
				decl_cursor_arg();
				}
				}
				setState(10078);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Decl_cursor_argContext extends ParserRuleContext {
		public Decl_varnameContext decl_varname() {
			return getRuleContext(Decl_varnameContext.class,0);
		}
		public Decl_datatypeContext decl_datatype() {
			return getRuleContext(Decl_datatypeContext.class,0);
		}
		public Decl_cursor_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_cursor_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_cursor_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_cursor_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_argContext decl_cursor_arg() throws RecognitionException {
		Decl_cursor_argContext _localctx = new Decl_cursor_argContext(_ctx, getState());
		enterRule(_localctx, 1432, RULE_decl_cursor_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10079);
			decl_varname();
			setState(10080);
			decl_datatype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Decl_is_forContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Decl_is_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_is_for; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_is_for(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_is_for(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_is_for(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_is_forContext decl_is_for() throws RecognitionException {
		Decl_is_forContext _localctx = new Decl_is_forContext(_ctx, getState());
		enterRule(_localctx, 1434, RULE_decl_is_for);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10082);
			_la = _input.LA(1);
			if ( !(_la==FOR || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Decl_aliasitemContext extends ParserRuleContext {
		public TerminalNode PARAM() { return getToken(PostgreSQLParser.PARAM, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Decl_aliasitemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_aliasitem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_aliasitem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_aliasitem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_aliasitem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_aliasitemContext decl_aliasitem() throws RecognitionException {
		Decl_aliasitemContext _localctx = new Decl_aliasitemContext(_ctx, getState());
		enterRule(_localctx, 1436, RULE_decl_aliasitem);
		try {
			setState(10086);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARAM:
				enterOuterAlt(_localctx, 1);
				{
				setState(10084);
				match(PARAM);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(10085);
				colid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Decl_varnameContext extends ParserRuleContext {
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public Decl_varnameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_varname; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_varname(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_varname(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_varname(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_varnameContext decl_varname() throws RecognitionException {
		Decl_varnameContext _localctx = new Decl_varnameContext(_ctx, getState());
		enterRule(_localctx, 1438, RULE_decl_varname);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10088);
			any_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Decl_constContext extends ParserRuleContext {
		public TerminalNode CONSTANT() { return getToken(PostgreSQLParser.CONSTANT, 0); }
		public Decl_constContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_const; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_const(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_const(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_const(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_constContext decl_const() throws RecognitionException {
		Decl_constContext _localctx = new Decl_constContext(_ctx, getState());
		enterRule(_localctx, 1440, RULE_decl_const);
		try {
			setState(10092);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,681,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10091);
				match(CONSTANT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Decl_datatypeContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Decl_datatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_datatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_datatype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_datatype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_datatypeContext decl_datatype() throws RecognitionException {
		Decl_datatypeContext _localctx = new Decl_datatypeContext(_ctx, getState());
		enterRule(_localctx, 1442, RULE_decl_datatype);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10094);
			typename();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Decl_collateContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Decl_collateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_collate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_collate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_collate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_collate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_collateContext decl_collate() throws RecognitionException {
		Decl_collateContext _localctx = new Decl_collateContext(_ctx, getState());
		enterRule(_localctx, 1444, RULE_decl_collate);
		try {
			setState(10099);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case EQUAL:
			case COLON_EQUALS:
			case DEFAULT:
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case COLLATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10097);
				match(COLLATE);
				setState(10098);
				any_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Decl_notnullContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Decl_notnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_notnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_notnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_notnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_notnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_notnullContext decl_notnull() throws RecognitionException {
		Decl_notnullContext _localctx = new Decl_notnullContext(_ctx, getState());
		enterRule(_localctx, 1446, RULE_decl_notnull);
		try {
			setState(10104);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case EQUAL:
			case COLON_EQUALS:
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10102);
				match(NOT);
				setState(10103);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Decl_defvalContext extends ParserRuleContext {
		public Decl_defkeyContext decl_defkey() {
			return getRuleContext(Decl_defkeyContext.class,0);
		}
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Decl_defvalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_defval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_defval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_defval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_defval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_defvalContext decl_defval() throws RecognitionException {
		Decl_defvalContext _localctx = new Decl_defvalContext(_ctx, getState());
		enterRule(_localctx, 1448, RULE_decl_defval);
		try {
			setState(10110);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case EQUAL:
			case COLON_EQUALS:
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10107);
				decl_defkey();
				setState(10108);
				sql_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Decl_defkeyContext extends ParserRuleContext {
		public Assign_operatorContext assign_operator() {
			return getRuleContext(Assign_operatorContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Decl_defkeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_defkey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_defkey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_defkey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_defkey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_defkeyContext decl_defkey() throws RecognitionException {
		Decl_defkeyContext _localctx = new Decl_defkeyContext(_ctx, getState());
		enterRule(_localctx, 1450, RULE_decl_defkey);
		try {
			setState(10114);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
			case COLON_EQUALS:
				enterOuterAlt(_localctx, 1);
				{
				setState(10112);
				assign_operator();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10113);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Assign_operatorContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode COLON_EQUALS() { return getToken(PostgreSQLParser.COLON_EQUALS, 0); }
		public Assign_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assign_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAssign_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAssign_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAssign_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assign_operatorContext assign_operator() throws RecognitionException {
		Assign_operatorContext _localctx = new Assign_operatorContext(_ctx, getState());
		enterRule(_localctx, 1452, RULE_assign_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10116);
			_la = _input.LA(1);
			if ( !(_la==EQUAL || _la==COLON_EQUALS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Proc_sectContext extends ParserRuleContext {
		public List<Proc_stmtContext> proc_stmt() {
			return getRuleContexts(Proc_stmtContext.class);
		}
		public Proc_stmtContext proc_stmt(int i) {
			return getRuleContext(Proc_stmtContext.class,i);
		}
		public Proc_sectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_sect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_sect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_sect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_sect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_sectContext proc_sect() throws RecognitionException {
		Proc_sectContext _localctx = new Proc_sectContext(_ctx, getState());
		enterRule(_localctx, 1454, RULE_proc_sect);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(10121);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,686,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(10118);
					proc_stmt();
					}
					} 
				}
				setState(10123);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,686,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Proc_stmtContext extends ParserRuleContext {
		public Pl_blockContext pl_block() {
			return getRuleContext(Pl_blockContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_returnContext stmt_return() {
			return getRuleContext(Stmt_returnContext.class,0);
		}
		public Stmt_raiseContext stmt_raise() {
			return getRuleContext(Stmt_raiseContext.class,0);
		}
		public Stmt_assignContext stmt_assign() {
			return getRuleContext(Stmt_assignContext.class,0);
		}
		public Stmt_ifContext stmt_if() {
			return getRuleContext(Stmt_ifContext.class,0);
		}
		public Stmt_caseContext stmt_case() {
			return getRuleContext(Stmt_caseContext.class,0);
		}
		public Stmt_loopContext stmt_loop() {
			return getRuleContext(Stmt_loopContext.class,0);
		}
		public Stmt_whileContext stmt_while() {
			return getRuleContext(Stmt_whileContext.class,0);
		}
		public Stmt_forContext stmt_for() {
			return getRuleContext(Stmt_forContext.class,0);
		}
		public Stmt_foreach_aContext stmt_foreach_a() {
			return getRuleContext(Stmt_foreach_aContext.class,0);
		}
		public Stmt_exitContext stmt_exit() {
			return getRuleContext(Stmt_exitContext.class,0);
		}
		public Stmt_assertContext stmt_assert() {
			return getRuleContext(Stmt_assertContext.class,0);
		}
		public Stmt_execsqlContext stmt_execsql() {
			return getRuleContext(Stmt_execsqlContext.class,0);
		}
		public Stmt_dynexecuteContext stmt_dynexecute() {
			return getRuleContext(Stmt_dynexecuteContext.class,0);
		}
		public Stmt_performContext stmt_perform() {
			return getRuleContext(Stmt_performContext.class,0);
		}
		public Stmt_callContext stmt_call() {
			return getRuleContext(Stmt_callContext.class,0);
		}
		public Stmt_getdiagContext stmt_getdiag() {
			return getRuleContext(Stmt_getdiagContext.class,0);
		}
		public Stmt_openContext stmt_open() {
			return getRuleContext(Stmt_openContext.class,0);
		}
		public Stmt_fetchContext stmt_fetch() {
			return getRuleContext(Stmt_fetchContext.class,0);
		}
		public Stmt_moveContext stmt_move() {
			return getRuleContext(Stmt_moveContext.class,0);
		}
		public Stmt_closeContext stmt_close() {
			return getRuleContext(Stmt_closeContext.class,0);
		}
		public Stmt_nullContext stmt_null() {
			return getRuleContext(Stmt_nullContext.class,0);
		}
		public Stmt_commitContext stmt_commit() {
			return getRuleContext(Stmt_commitContext.class,0);
		}
		public Stmt_rollbackContext stmt_rollback() {
			return getRuleContext(Stmt_rollbackContext.class,0);
		}
		public Stmt_setContext stmt_set() {
			return getRuleContext(Stmt_setContext.class,0);
		}
		public Proc_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_stmtContext proc_stmt() throws RecognitionException {
		Proc_stmtContext _localctx = new Proc_stmtContext(_ctx, getState());
		enterRule(_localctx, 1456, RULE_proc_stmt);
		try {
			setState(10151);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10124);
				pl_block();
				setState(10125);
				match(SEMI);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10127);
				stmt_return();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10128);
				stmt_raise();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10129);
				stmt_assign();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10130);
				stmt_if();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10131);
				stmt_case();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10132);
				stmt_loop();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10133);
				stmt_while();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(10134);
				stmt_for();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(10135);
				stmt_foreach_a();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(10136);
				stmt_exit();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(10137);
				stmt_assert();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(10138);
				stmt_execsql();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(10139);
				stmt_dynexecute();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(10140);
				stmt_perform();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(10141);
				stmt_call();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(10142);
				stmt_getdiag();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(10143);
				stmt_open();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(10144);
				stmt_fetch();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(10145);
				stmt_move();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(10146);
				stmt_close();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(10147);
				stmt_null();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(10148);
				stmt_commit();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(10149);
				stmt_rollback();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(10150);
				stmt_set();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_performContext extends ParserRuleContext {
		public TerminalNode PERFORM() { return getToken(PostgreSQLParser.PERFORM, 0); }
		public Expr_until_semiContext expr_until_semi() {
			return getRuleContext(Expr_until_semiContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_performContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_perform; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_perform(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_perform(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_perform(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_performContext stmt_perform() throws RecognitionException {
		Stmt_performContext _localctx = new Stmt_performContext(_ctx, getState());
		enterRule(_localctx, 1458, RULE_stmt_perform);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10153);
			match(PERFORM);
			setState(10154);
			expr_until_semi();
			setState(10155);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_callContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(PostgreSQLParser.CALL, 0); }
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Opt_expr_listContext opt_expr_list() {
			return getRuleContext(Opt_expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public Stmt_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_call(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_call(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_callContext stmt_call() throws RecognitionException {
		Stmt_callContext _localctx = new Stmt_callContext(_ctx, getState());
		enterRule(_localctx, 1460, RULE_stmt_call);
		try {
			setState(10171);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(10157);
				match(CALL);
				setState(10158);
				any_identifier();
				setState(10159);
				match(OPEN_PAREN);
				setState(10160);
				opt_expr_list();
				setState(10161);
				match(CLOSE_PAREN);
				setState(10162);
				match(SEMI);
				}
				break;
			case DO:
				enterOuterAlt(_localctx, 2);
				{
				setState(10164);
				match(DO);
				setState(10165);
				any_identifier();
				setState(10166);
				match(OPEN_PAREN);
				setState(10167);
				opt_expr_list();
				setState(10168);
				match(CLOSE_PAREN);
				setState(10169);
				match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_expr_listContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_expr_listContext opt_expr_list() throws RecognitionException {
		Opt_expr_listContext _localctx = new Opt_expr_listContext(_ctx, getState());
		enterRule(_localctx, 1462, RULE_opt_expr_list);
		try {
			setState(10175);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				setState(10174);
				expr_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_assignContext extends ParserRuleContext {
		public Assign_varContext assign_var() {
			return getRuleContext(Assign_varContext.class,0);
		}
		public Assign_operatorContext assign_operator() {
			return getRuleContext(Assign_operatorContext.class,0);
		}
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_assignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_assign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_assign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_assign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_assign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_assignContext stmt_assign() throws RecognitionException {
		Stmt_assignContext _localctx = new Stmt_assignContext(_ctx, getState());
		enterRule(_localctx, 1464, RULE_stmt_assign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10177);
			assign_var();
			setState(10178);
			assign_operator();
			setState(10179);
			sql_expression();
			setState(10180);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_getdiagContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(PostgreSQLParser.GET, 0); }
		public Getdiag_area_optContext getdiag_area_opt() {
			return getRuleContext(Getdiag_area_optContext.class,0);
		}
		public TerminalNode DIAGNOSTICS() { return getToken(PostgreSQLParser.DIAGNOSTICS, 0); }
		public Getdiag_listContext getdiag_list() {
			return getRuleContext(Getdiag_listContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_getdiagContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_getdiag; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_getdiag(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_getdiag(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_getdiag(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_getdiagContext stmt_getdiag() throws RecognitionException {
		Stmt_getdiagContext _localctx = new Stmt_getdiagContext(_ctx, getState());
		enterRule(_localctx, 1466, RULE_stmt_getdiag);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10182);
			match(GET);
			setState(10183);
			getdiag_area_opt();
			setState(10184);
			match(DIAGNOSTICS);
			setState(10185);
			getdiag_list();
			setState(10186);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Getdiag_area_optContext extends ParserRuleContext {
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode STACKED() { return getToken(PostgreSQLParser.STACKED, 0); }
		public Getdiag_area_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_area_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGetdiag_area_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGetdiag_area_opt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGetdiag_area_opt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_area_optContext getdiag_area_opt() throws RecognitionException {
		Getdiag_area_optContext _localctx = new Getdiag_area_optContext(_ctx, getState());
		enterRule(_localctx, 1468, RULE_getdiag_area_opt);
		try {
			setState(10191);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DIAGNOSTICS:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case CURRENT_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(10189);
				match(CURRENT_P);
				}
				break;
			case STACKED:
				enterOuterAlt(_localctx, 3);
				{
				setState(10190);
				match(STACKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Getdiag_listContext extends ParserRuleContext {
		public List<Getdiag_list_itemContext> getdiag_list_item() {
			return getRuleContexts(Getdiag_list_itemContext.class);
		}
		public Getdiag_list_itemContext getdiag_list_item(int i) {
			return getRuleContext(Getdiag_list_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Getdiag_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGetdiag_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGetdiag_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGetdiag_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_listContext getdiag_list() throws RecognitionException {
		Getdiag_listContext _localctx = new Getdiag_listContext(_ctx, getState());
		enterRule(_localctx, 1470, RULE_getdiag_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10193);
			getdiag_list_item();
			setState(10198);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10194);
				match(COMMA);
				setState(10195);
				getdiag_list_item();
				}
				}
				setState(10200);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Getdiag_list_itemContext extends ParserRuleContext {
		public Getdiag_targetContext getdiag_target() {
			return getRuleContext(Getdiag_targetContext.class,0);
		}
		public Assign_operatorContext assign_operator() {
			return getRuleContext(Assign_operatorContext.class,0);
		}
		public Getdiag_itemContext getdiag_item() {
			return getRuleContext(Getdiag_itemContext.class,0);
		}
		public Getdiag_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_list_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGetdiag_list_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGetdiag_list_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGetdiag_list_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_list_itemContext getdiag_list_item() throws RecognitionException {
		Getdiag_list_itemContext _localctx = new Getdiag_list_itemContext(_ctx, getState());
		enterRule(_localctx, 1472, RULE_getdiag_list_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10201);
			getdiag_target();
			setState(10202);
			assign_operator();
			setState(10203);
			getdiag_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Getdiag_itemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Getdiag_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGetdiag_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGetdiag_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGetdiag_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_itemContext getdiag_item() throws RecognitionException {
		Getdiag_itemContext _localctx = new Getdiag_itemContext(_ctx, getState());
		enterRule(_localctx, 1474, RULE_getdiag_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10205);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Getdiag_targetContext extends ParserRuleContext {
		public Assign_varContext assign_var() {
			return getRuleContext(Assign_varContext.class,0);
		}
		public Getdiag_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGetdiag_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGetdiag_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGetdiag_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_targetContext getdiag_target() throws RecognitionException {
		Getdiag_targetContext _localctx = new Getdiag_targetContext(_ctx, getState());
		enterRule(_localctx, 1476, RULE_getdiag_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10207);
			assign_var();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Assign_varContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(PostgreSQLParser.PARAM, 0); }
		public List<TerminalNode> OPEN_BRACKET() { return getTokens(PostgreSQLParser.OPEN_BRACKET); }
		public TerminalNode OPEN_BRACKET(int i) {
			return getToken(PostgreSQLParser.OPEN_BRACKET, i);
		}
		public List<Expr_until_rightbracketContext> expr_until_rightbracket() {
			return getRuleContexts(Expr_until_rightbracketContext.class);
		}
		public Expr_until_rightbracketContext expr_until_rightbracket(int i) {
			return getRuleContext(Expr_until_rightbracketContext.class,i);
		}
		public List<TerminalNode> CLOSE_BRACKET() { return getTokens(PostgreSQLParser.CLOSE_BRACKET); }
		public TerminalNode CLOSE_BRACKET(int i) {
			return getToken(PostgreSQLParser.CLOSE_BRACKET, i);
		}
		public Assign_varContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assign_var; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAssign_var(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAssign_var(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAssign_var(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assign_varContext assign_var() throws RecognitionException {
		Assign_varContext _localctx = new Assign_varContext(_ctx, getState());
		enterRule(_localctx, 1478, RULE_assign_var);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10211);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				setState(10209);
				any_name();
				}
				break;
			case PARAM:
				{
				setState(10210);
				match(PARAM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(10219);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OPEN_BRACKET) {
				{
				{
				setState(10213);
				match(OPEN_BRACKET);
				setState(10214);
				expr_until_rightbracket();
				setState(10215);
				match(CLOSE_BRACKET);
				}
				}
				setState(10221);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_ifContext extends ParserRuleContext {
		public List<TerminalNode> IF_P() { return getTokens(PostgreSQLParser.IF_P); }
		public TerminalNode IF_P(int i) {
			return getToken(PostgreSQLParser.IF_P, i);
		}
		public Expr_until_thenContext expr_until_then() {
			return getRuleContext(Expr_until_thenContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Stmt_elsifsContext stmt_elsifs() {
			return getRuleContext(Stmt_elsifsContext.class,0);
		}
		public Stmt_elseContext stmt_else() {
			return getRuleContext(Stmt_elseContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_ifContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_if; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_if(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_if(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_if(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_ifContext stmt_if() throws RecognitionException {
		Stmt_ifContext _localctx = new Stmt_ifContext(_ctx, getState());
		enterRule(_localctx, 1480, RULE_stmt_if);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10222);
			match(IF_P);
			setState(10223);
			expr_until_then();
			setState(10224);
			match(THEN);
			setState(10225);
			proc_sect();
			setState(10226);
			stmt_elsifs();
			setState(10227);
			stmt_else();
			setState(10228);
			match(END_P);
			setState(10229);
			match(IF_P);
			setState(10230);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_elsifsContext extends ParserRuleContext {
		public List<TerminalNode> ELSIF() { return getTokens(PostgreSQLParser.ELSIF); }
		public TerminalNode ELSIF(int i) {
			return getToken(PostgreSQLParser.ELSIF, i);
		}
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public List<TerminalNode> THEN() { return getTokens(PostgreSQLParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(PostgreSQLParser.THEN, i);
		}
		public List<Proc_sectContext> proc_sect() {
			return getRuleContexts(Proc_sectContext.class);
		}
		public Proc_sectContext proc_sect(int i) {
			return getRuleContext(Proc_sectContext.class,i);
		}
		public Stmt_elsifsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_elsifs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_elsifs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_elsifs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_elsifs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_elsifsContext stmt_elsifs() throws RecognitionException {
		Stmt_elsifsContext _localctx = new Stmt_elsifsContext(_ctx, getState());
		enterRule(_localctx, 1482, RULE_stmt_elsifs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10239);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSIF) {
				{
				{
				setState(10232);
				match(ELSIF);
				setState(10233);
				a_expr();
				setState(10234);
				match(THEN);
				setState(10235);
				proc_sect();
				}
				}
				setState(10241);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_elseContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PostgreSQLParser.ELSE, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Stmt_elseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_else; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_else(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_else(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_else(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_elseContext stmt_else() throws RecognitionException {
		Stmt_elseContext _localctx = new Stmt_elseContext(_ctx, getState());
		enterRule(_localctx, 1484, RULE_stmt_else);
		try {
			setState(10245);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case END_P:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ELSE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10243);
				match(ELSE);
				setState(10244);
				proc_sect();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_caseContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(PostgreSQLParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PostgreSQLParser.CASE, i);
		}
		public Opt_expr_until_whenContext opt_expr_until_when() {
			return getRuleContext(Opt_expr_until_whenContext.class,0);
		}
		public Case_when_listContext case_when_list() {
			return getRuleContext(Case_when_listContext.class,0);
		}
		public Opt_case_elseContext opt_case_else() {
			return getRuleContext(Opt_case_elseContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_case; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_case(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_case(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_case(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_caseContext stmt_case() throws RecognitionException {
		Stmt_caseContext _localctx = new Stmt_caseContext(_ctx, getState());
		enterRule(_localctx, 1486, RULE_stmt_case);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10247);
			match(CASE);
			setState(10248);
			opt_expr_until_when();
			setState(10249);
			case_when_list();
			setState(10250);
			opt_case_else();
			setState(10251);
			match(END_P);
			setState(10252);
			match(CASE);
			setState(10253);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_expr_until_whenContext extends ParserRuleContext {
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Opt_expr_until_whenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_expr_until_when; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_expr_until_when(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_expr_until_when(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_expr_until_when(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_expr_until_whenContext opt_expr_until_when() throws RecognitionException {
		Opt_expr_until_whenContext _localctx = new Opt_expr_until_whenContext(_ctx, getState());
		enterRule(_localctx, 1488, RULE_opt_expr_until_when);
		try {
			setState(10257);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,696,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10256);
				sql_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Case_when_listContext extends ParserRuleContext {
		public List<Case_whenContext> case_when() {
			return getRuleContexts(Case_whenContext.class);
		}
		public Case_whenContext case_when(int i) {
			return getRuleContext(Case_whenContext.class,i);
		}
		public Case_when_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_when_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCase_when_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCase_when_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCase_when_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_when_listContext case_when_list() throws RecognitionException {
		Case_when_listContext _localctx = new Case_when_listContext(_ctx, getState());
		enterRule(_localctx, 1490, RULE_case_when_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10260); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(10259);
				case_when();
				}
				}
				setState(10262); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Case_whenContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Case_whenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_when; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCase_when(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCase_when(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCase_when(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_whenContext case_when() throws RecognitionException {
		Case_whenContext _localctx = new Case_whenContext(_ctx, getState());
		enterRule(_localctx, 1492, RULE_case_when);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10264);
			match(WHEN);
			setState(10265);
			expr_list();
			setState(10266);
			match(THEN);
			setState(10267);
			proc_sect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_case_elseContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PostgreSQLParser.ELSE, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Opt_case_elseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_case_else; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_case_else(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_case_else(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_case_else(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_case_elseContext opt_case_else() throws RecognitionException {
		Opt_case_elseContext _localctx = new Opt_case_elseContext(_ctx, getState());
		enterRule(_localctx, 1494, RULE_opt_case_else);
		try {
			setState(10272);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case END_P:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ELSE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10270);
				match(ELSE);
				setState(10271);
				proc_sect();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_loopContext extends ParserRuleContext {
		public Opt_loop_labelContext opt_loop_label() {
			return getRuleContext(Opt_loop_labelContext.class,0);
		}
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Stmt_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_loopContext stmt_loop() throws RecognitionException {
		Stmt_loopContext _localctx = new Stmt_loopContext(_ctx, getState());
		enterRule(_localctx, 1496, RULE_stmt_loop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10274);
			opt_loop_label();
			setState(10275);
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_whileContext extends ParserRuleContext {
		public Opt_loop_labelContext opt_loop_label() {
			return getRuleContext(Opt_loop_labelContext.class,0);
		}
		public TerminalNode WHILE() { return getToken(PostgreSQLParser.WHILE, 0); }
		public Expr_until_loopContext expr_until_loop() {
			return getRuleContext(Expr_until_loopContext.class,0);
		}
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Stmt_whileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_while; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_while(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_while(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_while(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_whileContext stmt_while() throws RecognitionException {
		Stmt_whileContext _localctx = new Stmt_whileContext(_ctx, getState());
		enterRule(_localctx, 1498, RULE_stmt_while);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10277);
			opt_loop_label();
			setState(10278);
			match(WHILE);
			setState(10279);
			expr_until_loop();
			setState(10280);
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_forContext extends ParserRuleContext {
		public Opt_loop_labelContext opt_loop_label() {
			return getRuleContext(Opt_loop_labelContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public For_controlContext for_control() {
			return getRuleContext(For_controlContext.class,0);
		}
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Stmt_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_for; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_for(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_for(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_for(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_forContext stmt_for() throws RecognitionException {
		Stmt_forContext _localctx = new Stmt_forContext(_ctx, getState());
		enterRule(_localctx, 1500, RULE_stmt_for);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10282);
			opt_loop_label();
			setState(10283);
			match(FOR);
			setState(10284);
			for_control();
			setState(10285);
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_controlContext extends ParserRuleContext {
		public For_variableContext for_variable() {
			return getRuleContext(For_variableContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Opt_cursor_parametersContext opt_cursor_parameters() {
			return getRuleContext(Opt_cursor_parametersContext.class,0);
		}
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public ExplainstmtContext explainstmt() {
			return getRuleContext(ExplainstmtContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public Opt_for_using_expressionContext opt_for_using_expression() {
			return getRuleContext(Opt_for_using_expressionContext.class,0);
		}
		public Opt_reverseContext opt_reverse() {
			return getRuleContext(Opt_reverseContext.class,0);
		}
		public TerminalNode DOT_DOT() { return getToken(PostgreSQLParser.DOT_DOT, 0); }
		public Opt_by_expressionContext opt_by_expression() {
			return getRuleContext(Opt_by_expressionContext.class,0);
		}
		public For_controlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_control; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_control(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_control(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_control(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_controlContext for_control() throws RecognitionException {
		For_controlContext _localctx = new For_controlContext(_ctx, getState());
		enterRule(_localctx, 1502, RULE_for_control);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10287);
			for_variable();
			setState(10288);
			match(IN_P);
			setState(10304);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,699,_ctx) ) {
			case 1:
				{
				setState(10289);
				cursor_name();
				setState(10290);
				opt_cursor_parameters();
				}
				break;
			case 2:
				{
				setState(10292);
				selectstmt();
				}
				break;
			case 3:
				{
				setState(10293);
				explainstmt();
				}
				break;
			case 4:
				{
				setState(10294);
				match(EXECUTE);
				setState(10295);
				a_expr();
				setState(10296);
				opt_for_using_expression();
				}
				break;
			case 5:
				{
				setState(10298);
				opt_reverse();
				setState(10299);
				a_expr();
				setState(10300);
				match(DOT_DOT);
				setState(10301);
				a_expr();
				setState(10302);
				opt_by_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_for_using_expressionContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_for_using_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_for_using_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_for_using_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_for_using_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_for_using_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_for_using_expressionContext opt_for_using_expression() throws RecognitionException {
		Opt_for_using_expressionContext _localctx = new Opt_for_using_expressionContext(_ctx, getState());
		enterRule(_localctx, 1504, RULE_opt_for_using_expression);
		try {
			setState(10309);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case LOOP:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(10307);
				match(USING);
				setState(10308);
				expr_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_cursor_parametersContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_cursor_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_cursor_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_cursor_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_cursor_parameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_cursor_parameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_cursor_parametersContext opt_cursor_parameters() throws RecognitionException {
		Opt_cursor_parametersContext _localctx = new Opt_cursor_parametersContext(_ctx, getState());
		enterRule(_localctx, 1506, RULE_opt_cursor_parameters);
		int _la;
		try {
			setState(10323);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOOP:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(10312);
				match(OPEN_PAREN);
				setState(10313);
				a_expr();
				setState(10318);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(10314);
					match(COMMA);
					setState(10315);
					a_expr();
					}
					}
					setState(10320);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(10321);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_reverseContext extends ParserRuleContext {
		public TerminalNode REVERSE() { return getToken(PostgreSQLParser.REVERSE, 0); }
		public Opt_reverseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_reverse; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_reverse(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_reverse(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_reverse(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_reverseContext opt_reverse() throws RecognitionException {
		Opt_reverseContext _localctx = new Opt_reverseContext(_ctx, getState());
		enterRule(_localctx, 1508, RULE_opt_reverse);
		try {
			setState(10327);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,703,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10326);
				match(REVERSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_by_expressionContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_by_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_by_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_by_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_by_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_by_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_by_expressionContext opt_by_expression() throws RecognitionException {
		Opt_by_expressionContext _localctx = new Opt_by_expressionContext(_ctx, getState());
		enterRule(_localctx, 1510, RULE_opt_by_expression);
		try {
			setState(10332);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOOP:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case BY:
				enterOuterAlt(_localctx, 2);
				{
				setState(10330);
				match(BY);
				setState(10331);
				a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_variableContext extends ParserRuleContext {
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public For_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_variableContext for_variable() throws RecognitionException {
		For_variableContext _localctx = new For_variableContext(_ctx, getState());
		enterRule(_localctx, 1512, RULE_for_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10334);
			any_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_foreach_aContext extends ParserRuleContext {
		public Opt_loop_labelContext opt_loop_label() {
			return getRuleContext(Opt_loop_labelContext.class,0);
		}
		public TerminalNode FOREACH() { return getToken(PostgreSQLParser.FOREACH, 0); }
		public For_variableContext for_variable() {
			return getRuleContext(For_variableContext.class,0);
		}
		public Foreach_sliceContext foreach_slice() {
			return getRuleContext(Foreach_sliceContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Stmt_foreach_aContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_foreach_a; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_foreach_a(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_foreach_a(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_foreach_a(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_foreach_aContext stmt_foreach_a() throws RecognitionException {
		Stmt_foreach_aContext _localctx = new Stmt_foreach_aContext(_ctx, getState());
		enterRule(_localctx, 1514, RULE_stmt_foreach_a);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10336);
			opt_loop_label();
			setState(10337);
			match(FOREACH);
			setState(10338);
			for_variable();
			setState(10339);
			foreach_slice();
			setState(10340);
			match(IN_P);
			setState(10341);
			match(ARRAY);
			setState(10342);
			a_expr();
			setState(10343);
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Foreach_sliceContext extends ParserRuleContext {
		public TerminalNode SLICE() { return getToken(PostgreSQLParser.SLICE, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Foreach_sliceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreach_slice; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterForeach_slice(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitForeach_slice(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitForeach_slice(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Foreach_sliceContext foreach_slice() throws RecognitionException {
		Foreach_sliceContext _localctx = new Foreach_sliceContext(_ctx, getState());
		enterRule(_localctx, 1516, RULE_foreach_slice);
		try {
			setState(10348);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case SLICE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10346);
				match(SLICE);
				setState(10347);
				iconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_exitContext extends ParserRuleContext {
		public Exit_typeContext exit_type() {
			return getRuleContext(Exit_typeContext.class,0);
		}
		public Opt_labelContext opt_label() {
			return getRuleContext(Opt_labelContext.class,0);
		}
		public Opt_exitcondContext opt_exitcond() {
			return getRuleContext(Opt_exitcondContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_exitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_exit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_exit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_exit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_exit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_exitContext stmt_exit() throws RecognitionException {
		Stmt_exitContext _localctx = new Stmt_exitContext(_ctx, getState());
		enterRule(_localctx, 1518, RULE_stmt_exit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10350);
			exit_type();
			setState(10351);
			opt_label();
			setState(10352);
			opt_exitcond();
			setState(10353);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Exit_typeContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(PostgreSQLParser.EXIT, 0); }
		public TerminalNode CONTINUE_P() { return getToken(PostgreSQLParser.CONTINUE_P, 0); }
		public Exit_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExit_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExit_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExit_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_typeContext exit_type() throws RecognitionException {
		Exit_typeContext _localctx = new Exit_typeContext(_ctx, getState());
		enterRule(_localctx, 1520, RULE_exit_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10355);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE_P || _la==EXIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_returnContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(PostgreSQLParser.RETURN, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public TerminalNode QUERY() { return getToken(PostgreSQLParser.QUERY, 0); }
		public Opt_return_resultContext opt_return_result() {
			return getRuleContext(Opt_return_resultContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_for_using_expressionContext opt_for_using_expression() {
			return getRuleContext(Opt_for_using_expressionContext.class,0);
		}
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public Stmt_returnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_return; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_return(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_return(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_return(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_returnContext stmt_return() throws RecognitionException {
		Stmt_returnContext _localctx = new Stmt_returnContext(_ctx, getState());
		enterRule(_localctx, 1522, RULE_stmt_return);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10357);
			match(RETURN);
			setState(10369);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,707,_ctx) ) {
			case 1:
				{
				setState(10358);
				match(NEXT);
				setState(10359);
				sql_expression();
				}
				break;
			case 2:
				{
				setState(10360);
				match(QUERY);
				setState(10366);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EXECUTE:
					{
					setState(10361);
					match(EXECUTE);
					setState(10362);
					a_expr();
					setState(10363);
					opt_for_using_expression();
					}
					break;
				case OPEN_PAREN:
				case SELECT:
				case TABLE:
				case WITH:
				case VALUES:
					{
					setState(10365);
					selectstmt();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				setState(10368);
				opt_return_result();
				}
				break;
			}
			setState(10371);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_return_resultContext extends ParserRuleContext {
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Opt_return_resultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_return_result; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_return_result(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_return_result(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_return_result(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_return_resultContext opt_return_result() throws RecognitionException {
		Opt_return_resultContext _localctx = new Opt_return_resultContext(_ctx, getState());
		enterRule(_localctx, 1524, RULE_opt_return_result);
		try {
			setState(10375);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,708,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10374);
				sql_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_raiseContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(PostgreSQLParser.RAISE, 0); }
		public Opt_stmt_raise_levelContext opt_stmt_raise_level() {
			return getRuleContext(Opt_stmt_raise_levelContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Opt_raise_listContext opt_raise_list() {
			return getRuleContext(Opt_raise_listContext.class,0);
		}
		public Opt_raise_usingContext opt_raise_using() {
			return getRuleContext(Opt_raise_usingContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(PostgreSQLParser.SQLSTATE, 0); }
		public Stmt_raiseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_raise; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_raise(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_raise(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_raise(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_raiseContext stmt_raise() throws RecognitionException {
		Stmt_raiseContext _localctx = new Stmt_raiseContext(_ctx, getState());
		enterRule(_localctx, 1526, RULE_stmt_raise);
		try {
			setState(10403);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,709,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10377);
				match(RAISE);
				setState(10378);
				opt_stmt_raise_level();
				setState(10379);
				sconst();
				setState(10380);
				opt_raise_list();
				setState(10381);
				opt_raise_using();
				setState(10382);
				match(SEMI);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10384);
				match(RAISE);
				setState(10385);
				opt_stmt_raise_level();
				setState(10386);
				identifier();
				setState(10387);
				opt_raise_using();
				setState(10388);
				match(SEMI);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10390);
				match(RAISE);
				setState(10391);
				opt_stmt_raise_level();
				setState(10392);
				match(SQLSTATE);
				setState(10393);
				sconst();
				setState(10394);
				opt_raise_using();
				setState(10395);
				match(SEMI);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10397);
				match(RAISE);
				setState(10398);
				opt_stmt_raise_level();
				setState(10399);
				opt_raise_using();
				setState(10400);
				match(SEMI);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10402);
				match(RAISE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_stmt_raise_levelContext extends ParserRuleContext {
		public TerminalNode DEBUG() { return getToken(PostgreSQLParser.DEBUG, 0); }
		public TerminalNode LOG() { return getToken(PostgreSQLParser.LOG, 0); }
		public TerminalNode INFO() { return getToken(PostgreSQLParser.INFO, 0); }
		public TerminalNode NOTICE() { return getToken(PostgreSQLParser.NOTICE, 0); }
		public TerminalNode WARNING() { return getToken(PostgreSQLParser.WARNING, 0); }
		public TerminalNode EXCEPTION() { return getToken(PostgreSQLParser.EXCEPTION, 0); }
		public Opt_stmt_raise_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_stmt_raise_level; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_stmt_raise_level(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_stmt_raise_level(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_stmt_raise_level(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_stmt_raise_levelContext opt_stmt_raise_level() throws RecognitionException {
		Opt_stmt_raise_levelContext _localctx = new Opt_stmt_raise_levelContext(_ctx, getState());
		enterRule(_localctx, 1528, RULE_opt_stmt_raise_level);
		try {
			setState(10413);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,710,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10407);
				match(DEBUG);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10408);
				match(LOG);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10409);
				match(INFO);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10410);
				match(NOTICE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10411);
				match(WARNING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10412);
				match(EXCEPTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_raise_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public Opt_raise_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_raise_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_raise_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_raise_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_raise_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_raise_listContext opt_raise_list() throws RecognitionException {
		Opt_raise_listContext _localctx = new Opt_raise_listContext(_ctx, getState());
		enterRule(_localctx, 1530, RULE_opt_raise_list);
		int _la;
		try {
			setState(10422);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case COMMA:
				enterOuterAlt(_localctx, 2);
				{
				setState(10418); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(10416);
					match(COMMA);
					setState(10417);
					a_expr();
					}
					}
					setState(10420); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_raise_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Opt_raise_using_elem_listContext opt_raise_using_elem_list() {
			return getRuleContext(Opt_raise_using_elem_listContext.class,0);
		}
		public Opt_raise_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_raise_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_raise_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_raise_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_raise_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_raise_usingContext opt_raise_using() throws RecognitionException {
		Opt_raise_usingContext _localctx = new Opt_raise_usingContext(_ctx, getState());
		enterRule(_localctx, 1532, RULE_opt_raise_using);
		try {
			setState(10427);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(10425);
				match(USING);
				setState(10426);
				opt_raise_using_elem_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_raise_using_elemContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_raise_using_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_raise_using_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_raise_using_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_raise_using_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_raise_using_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_raise_using_elemContext opt_raise_using_elem() throws RecognitionException {
		Opt_raise_using_elemContext _localctx = new Opt_raise_using_elemContext(_ctx, getState());
		enterRule(_localctx, 1534, RULE_opt_raise_using_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10429);
			identifier();
			setState(10430);
			match(EQUAL);
			setState(10431);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_raise_using_elem_listContext extends ParserRuleContext {
		public List<Opt_raise_using_elemContext> opt_raise_using_elem() {
			return getRuleContexts(Opt_raise_using_elemContext.class);
		}
		public Opt_raise_using_elemContext opt_raise_using_elem(int i) {
			return getRuleContext(Opt_raise_using_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_raise_using_elem_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_raise_using_elem_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_raise_using_elem_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_raise_using_elem_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_raise_using_elem_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_raise_using_elem_listContext opt_raise_using_elem_list() throws RecognitionException {
		Opt_raise_using_elem_listContext _localctx = new Opt_raise_using_elem_listContext(_ctx, getState());
		enterRule(_localctx, 1536, RULE_opt_raise_using_elem_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10433);
			opt_raise_using_elem();
			setState(10438);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10434);
				match(COMMA);
				setState(10435);
				opt_raise_using_elem();
				}
				}
				setState(10440);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_assertContext extends ParserRuleContext {
		public TerminalNode ASSERT() { return getToken(PostgreSQLParser.ASSERT, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Opt_stmt_assert_messageContext opt_stmt_assert_message() {
			return getRuleContext(Opt_stmt_assert_messageContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_assertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_assert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_assert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_assert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_assert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_assertContext stmt_assert() throws RecognitionException {
		Stmt_assertContext _localctx = new Stmt_assertContext(_ctx, getState());
		enterRule(_localctx, 1538, RULE_stmt_assert);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10441);
			match(ASSERT);
			setState(10442);
			sql_expression();
			setState(10443);
			opt_stmt_assert_message();
			setState(10444);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_stmt_assert_messageContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Opt_stmt_assert_messageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_stmt_assert_message; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_stmt_assert_message(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_stmt_assert_message(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_stmt_assert_message(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_stmt_assert_messageContext opt_stmt_assert_message() throws RecognitionException {
		Opt_stmt_assert_messageContext _localctx = new Opt_stmt_assert_messageContext(_ctx, getState());
		enterRule(_localctx, 1540, RULE_opt_stmt_assert_message);
		try {
			setState(10449);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case COMMA:
				enterOuterAlt(_localctx, 2);
				{
				setState(10447);
				match(COMMA);
				setState(10448);
				sql_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Loop_bodyContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(PostgreSQLParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(PostgreSQLParser.LOOP, i);
		}
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public Opt_labelContext opt_label() {
			return getRuleContext(Opt_labelContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Loop_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLoop_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLoop_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLoop_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Loop_bodyContext loop_body() throws RecognitionException {
		Loop_bodyContext _localctx = new Loop_bodyContext(_ctx, getState());
		enterRule(_localctx, 1542, RULE_loop_body);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10451);
			match(LOOP);
			setState(10452);
			proc_sect();
			setState(10453);
			match(END_P);
			setState(10454);
			match(LOOP);
			setState(10455);
			opt_label();
			setState(10456);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_execsqlContext extends ParserRuleContext {
		public Make_execsql_stmtContext make_execsql_stmt() {
			return getRuleContext(Make_execsql_stmtContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_execsqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_execsql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_execsql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_execsql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_execsql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_execsqlContext stmt_execsql() throws RecognitionException {
		Stmt_execsqlContext _localctx = new Stmt_execsqlContext(_ctx, getState());
		enterRule(_localctx, 1544, RULE_stmt_execsql);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10458);
			make_execsql_stmt();
			setState(10459);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_dynexecuteContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Opt_execute_intoContext opt_execute_into() {
			return getRuleContext(Opt_execute_intoContext.class,0);
		}
		public Opt_execute_usingContext opt_execute_using() {
			return getRuleContext(Opt_execute_usingContext.class,0);
		}
		public Stmt_dynexecuteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_dynexecute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_dynexecute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_dynexecute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_dynexecute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_dynexecuteContext stmt_dynexecute() throws RecognitionException {
		Stmt_dynexecuteContext _localctx = new Stmt_dynexecuteContext(_ctx, getState());
		enterRule(_localctx, 1546, RULE_stmt_dynexecute);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10461);
			match(EXECUTE);
			setState(10462);
			a_expr();
			setState(10470);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
			case 1:
				{
				setState(10463);
				opt_execute_into();
				setState(10464);
				opt_execute_using();
				}
				break;
			case 2:
				{
				setState(10466);
				opt_execute_using();
				setState(10467);
				opt_execute_into();
				}
				break;
			case 3:
				{
				}
				break;
			}
			setState(10472);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_execute_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Opt_execute_using_listContext opt_execute_using_list() {
			return getRuleContext(Opt_execute_using_listContext.class,0);
		}
		public Opt_execute_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_execute_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_execute_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_execute_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_execute_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_execute_usingContext opt_execute_using() throws RecognitionException {
		Opt_execute_usingContext _localctx = new Opt_execute_usingContext(_ctx, getState());
		enterRule(_localctx, 1548, RULE_opt_execute_using);
		try {
			setState(10477);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case INTO:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(10475);
				match(USING);
				setState(10476);
				opt_execute_using_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_execute_using_listContext extends ParserRuleContext {
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_execute_using_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_execute_using_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_execute_using_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_execute_using_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_execute_using_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_execute_using_listContext opt_execute_using_list() throws RecognitionException {
		Opt_execute_using_listContext _localctx = new Opt_execute_using_listContext(_ctx, getState());
		enterRule(_localctx, 1550, RULE_opt_execute_using_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10479);
			a_expr();
			setState(10484);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10480);
				match(COMMA);
				setState(10481);
				a_expr();
				}
				}
				setState(10486);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_execute_intoContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Into_targetContext into_target() {
			return getRuleContext(Into_targetContext.class,0);
		}
		public TerminalNode STRICT_P() { return getToken(PostgreSQLParser.STRICT_P, 0); }
		public Opt_execute_intoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_execute_into; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_execute_into(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_execute_into(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_execute_into(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_execute_intoContext opt_execute_into() throws RecognitionException {
		Opt_execute_intoContext _localctx = new Opt_execute_intoContext(_ctx, getState());
		enterRule(_localctx, 1552, RULE_opt_execute_into);
		try {
			setState(10493);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case INTO:
				enterOuterAlt(_localctx, 2);
				{
				setState(10488);
				match(INTO);
				setState(10490);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,719,_ctx) ) {
				case 1:
					{
					setState(10489);
					match(STRICT_P);
					}
					break;
				}
				setState(10492);
				into_target();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_openContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(PostgreSQLParser.OPEN, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public Opt_scroll_optionContext opt_scroll_option() {
			return getRuleContext(Opt_scroll_optionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Opt_open_usingContext opt_open_using() {
			return getRuleContext(Opt_open_usingContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Opt_open_bound_listContext opt_open_bound_list() {
			return getRuleContext(Opt_open_bound_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Stmt_openContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_open; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_open(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_open(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_open(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_openContext stmt_open() throws RecognitionException {
		Stmt_openContext _localctx = new Stmt_openContext(_ctx, getState());
		enterRule(_localctx, 1554, RULE_stmt_open);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10495);
			match(OPEN);
			setState(10513);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,723,_ctx) ) {
			case 1:
				{
				setState(10496);
				cursor_variable();
				setState(10497);
				opt_scroll_option();
				setState(10498);
				match(FOR);
				setState(10504);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAREN:
				case SELECT:
				case TABLE:
				case WITH:
				case VALUES:
					{
					setState(10499);
					selectstmt();
					}
					break;
				case EXECUTE:
					{
					setState(10500);
					match(EXECUTE);
					setState(10501);
					sql_expression();
					setState(10502);
					opt_open_using();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(10506);
				colid();
				setState(10511);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(10507);
					match(OPEN_PAREN);
					setState(10508);
					opt_open_bound_list();
					setState(10509);
					match(CLOSE_PAREN);
					}
				}

				}
				break;
			}
			setState(10515);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_open_bound_list_itemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode COLON_EQUALS() { return getToken(PostgreSQLParser.COLON_EQUALS, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_open_bound_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_open_bound_list_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_open_bound_list_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_open_bound_list_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_open_bound_list_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_open_bound_list_itemContext opt_open_bound_list_item() throws RecognitionException {
		Opt_open_bound_list_itemContext _localctx = new Opt_open_bound_list_itemContext(_ctx, getState());
		enterRule(_localctx, 1556, RULE_opt_open_bound_list_item);
		try {
			setState(10522);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,724,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10517);
				colid();
				setState(10518);
				match(COLON_EQUALS);
				setState(10519);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10521);
				a_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_open_bound_listContext extends ParserRuleContext {
		public List<Opt_open_bound_list_itemContext> opt_open_bound_list_item() {
			return getRuleContexts(Opt_open_bound_list_itemContext.class);
		}
		public Opt_open_bound_list_itemContext opt_open_bound_list_item(int i) {
			return getRuleContext(Opt_open_bound_list_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_open_bound_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_open_bound_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_open_bound_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_open_bound_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_open_bound_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_open_bound_listContext opt_open_bound_list() throws RecognitionException {
		Opt_open_bound_listContext _localctx = new Opt_open_bound_listContext(_ctx, getState());
		enterRule(_localctx, 1558, RULE_opt_open_bound_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10524);
			opt_open_bound_list_item();
			setState(10529);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10525);
				match(COMMA);
				setState(10526);
				opt_open_bound_list_item();
				}
				}
				setState(10531);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_open_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_open_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_open_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_open_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_open_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_open_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_open_usingContext opt_open_using() throws RecognitionException {
		Opt_open_usingContext _localctx = new Opt_open_usingContext(_ctx, getState());
		enterRule(_localctx, 1560, RULE_opt_open_using);
		try {
			setState(10535);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(10533);
				match(USING);
				setState(10534);
				expr_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_scroll_optionContext extends ParserRuleContext {
		public Opt_scroll_option_noContext opt_scroll_option_no() {
			return getRuleContext(Opt_scroll_option_noContext.class,0);
		}
		public TerminalNode SCROLL() { return getToken(PostgreSQLParser.SCROLL, 0); }
		public Opt_scroll_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_scroll_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_scroll_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_scroll_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_scroll_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_scroll_optionContext opt_scroll_option() throws RecognitionException {
		Opt_scroll_optionContext _localctx = new Opt_scroll_optionContext(_ctx, getState());
		enterRule(_localctx, 1562, RULE_opt_scroll_option);
		try {
			setState(10541);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NO:
			case SCROLL:
				enterOuterAlt(_localctx, 2);
				{
				setState(10538);
				opt_scroll_option_no();
				setState(10539);
				match(SCROLL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_scroll_option_noContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Opt_scroll_option_noContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_scroll_option_no; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_scroll_option_no(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_scroll_option_no(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_scroll_option_no(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_scroll_option_noContext opt_scroll_option_no() throws RecognitionException {
		Opt_scroll_option_noContext _localctx = new Opt_scroll_option_noContext(_ctx, getState());
		enterRule(_localctx, 1564, RULE_opt_scroll_option_no);
		try {
			setState(10545);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCROLL:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(10544);
				match(NO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_fetchContext extends ParserRuleContext {
		public Opt_fetch_directionContext direction;
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public Opt_cursor_fromContext opt_cursor_from() {
			return getRuleContext(Opt_cursor_fromContext.class,0);
		}
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Into_targetContext into_target() {
			return getRuleContext(Into_targetContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Opt_fetch_directionContext opt_fetch_direction() {
			return getRuleContext(Opt_fetch_directionContext.class,0);
		}
		public Stmt_fetchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_fetch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_fetch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_fetch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_fetch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_fetchContext stmt_fetch() throws RecognitionException {
		Stmt_fetchContext _localctx = new Stmt_fetchContext(_ctx, getState());
		enterRule(_localctx, 1566, RULE_stmt_fetch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10547);
			match(FETCH);
			setState(10548);
			((Stmt_fetchContext)_localctx).direction = opt_fetch_direction();
			setState(10549);
			opt_cursor_from();
			setState(10550);
			cursor_variable();
			setState(10551);
			match(INTO);
			setState(10552);
			into_target();
			setState(10553);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Into_targetContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Into_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInto_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInto_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInto_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_targetContext into_target() throws RecognitionException {
		Into_targetContext _localctx = new Into_targetContext(_ctx, getState());
		enterRule(_localctx, 1568, RULE_into_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10555);
			expr_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_cursor_fromContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public Opt_cursor_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_cursor_from; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_cursor_from(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_cursor_from(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_cursor_from(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_cursor_fromContext opt_cursor_from() throws RecognitionException {
		Opt_cursor_fromContext _localctx = new Opt_cursor_fromContext(_ctx, getState());
		enterRule(_localctx, 1570, RULE_opt_cursor_from);
		try {
			setState(10560);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARAM:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 2);
				{
				setState(10558);
				match(FROM);
				}
				break;
			case IN_P:
				enterOuterAlt(_localctx, 3);
				{
				setState(10559);
				match(IN_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_fetch_directionContext extends ParserRuleContext {
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public TerminalNode ABSOLUTE_P() { return getToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode RELATIVE_P() { return getToken(PostgreSQLParser.RELATIVE_P, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public Opt_fetch_directionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_fetch_direction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_fetch_direction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_fetch_direction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_fetch_direction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fetch_directionContext opt_fetch_direction() throws RecognitionException {
		Opt_fetch_directionContext _localctx = new Opt_fetch_directionContext(_ctx, getState());
		enterRule(_localctx, 1572, RULE_opt_fetch_direction);
		int _la;
		try {
			setState(10579);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,731,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10564);
				match(NEXT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10565);
				match(PRIOR);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10566);
				match(FIRST_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10567);
				match(LAST_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10568);
				match(ABSOLUTE_P);
				setState(10569);
				a_expr();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10570);
				match(RELATIVE_P);
				setState(10571);
				a_expr();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(10572);
				a_expr();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(10573);
				match(ALL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(10574);
				_la = _input.LA(1);
				if ( !(_la==BACKWARD || _la==FORWARD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10577);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,730,_ctx) ) {
				case 1:
					{
					setState(10575);
					a_expr();
					}
					break;
				case 2:
					{
					setState(10576);
					match(ALL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_moveContext extends ParserRuleContext {
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public Opt_fetch_directionContext opt_fetch_direction() {
			return getRuleContext(Opt_fetch_directionContext.class,0);
		}
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_moveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_move; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_move(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_move(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_move(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_moveContext stmt_move() throws RecognitionException {
		Stmt_moveContext _localctx = new Stmt_moveContext(_ctx, getState());
		enterRule(_localctx, 1574, RULE_stmt_move);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10581);
			match(MOVE);
			setState(10582);
			opt_fetch_direction();
			setState(10583);
			cursor_variable();
			setState(10584);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_closeContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(PostgreSQLParser.CLOSE, 0); }
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_closeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_close; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_close(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_close(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_close(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_closeContext stmt_close() throws RecognitionException {
		Stmt_closeContext _localctx = new Stmt_closeContext(_ctx, getState());
		enterRule(_localctx, 1576, RULE_stmt_close);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10586);
			match(CLOSE);
			setState(10587);
			cursor_variable();
			setState(10588);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_nullContext extends ParserRuleContext {
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_nullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_null; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_null(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_null(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_null(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_nullContext stmt_null() throws RecognitionException {
		Stmt_nullContext _localctx = new Stmt_nullContext(_ctx, getState());
		enterRule(_localctx, 1578, RULE_stmt_null);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10590);
			match(NULL_P);
			setState(10591);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_commitContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public Plsql_opt_transaction_chainContext plsql_opt_transaction_chain() {
			return getRuleContext(Plsql_opt_transaction_chainContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_commitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_commit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_commit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_commit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_commit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_commitContext stmt_commit() throws RecognitionException {
		Stmt_commitContext _localctx = new Stmt_commitContext(_ctx, getState());
		enterRule(_localctx, 1580, RULE_stmt_commit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10593);
			match(COMMIT);
			setState(10594);
			plsql_opt_transaction_chain();
			setState(10595);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_rollbackContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public Plsql_opt_transaction_chainContext plsql_opt_transaction_chain() {
			return getRuleContext(Plsql_opt_transaction_chainContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_rollbackContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_rollback; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_rollback(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_rollback(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_rollback(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_rollbackContext stmt_rollback() throws RecognitionException {
		Stmt_rollbackContext _localctx = new Stmt_rollbackContext(_ctx, getState());
		enterRule(_localctx, 1582, RULE_stmt_rollback);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10597);
			match(ROLLBACK);
			setState(10598);
			plsql_opt_transaction_chain();
			setState(10599);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Plsql_opt_transaction_chainContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLParser.CHAIN, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Plsql_opt_transaction_chainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsql_opt_transaction_chain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsql_opt_transaction_chain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsql_opt_transaction_chain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsql_opt_transaction_chain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Plsql_opt_transaction_chainContext plsql_opt_transaction_chain() throws RecognitionException {
		Plsql_opt_transaction_chainContext _localctx = new Plsql_opt_transaction_chainContext(_ctx, getState());
		enterRule(_localctx, 1584, RULE_plsql_opt_transaction_chain);
		int _la;
		try {
			setState(10607);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(10601);
				match(AND);
				setState(10603);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(10602);
					match(NO);
					}
				}

				setState(10605);
				match(CHAIN);
				}
				break;
			case SEMI:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stmt_setContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Stmt_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_set(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_set(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_setContext stmt_set() throws RecognitionException {
		Stmt_setContext _localctx = new Stmt_setContext(_ctx, getState());
		enterRule(_localctx, 1586, RULE_stmt_set);
		try {
			setState(10621);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(10609);
				match(SET);
				setState(10610);
				any_name();
				setState(10611);
				match(TO);
				setState(10612);
				match(DEFAULT);
				setState(10613);
				match(SEMI);
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(10615);
				match(RESET);
				setState(10618);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case IS:
				case LEFT:
				case OUTER_P:
				case OVER:
				case RIGHT:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					setState(10616);
					any_name();
					}
					break;
				case ALL:
					{
					setState(10617);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(10620);
				match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cursor_variableContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(PostgreSQLParser.PARAM, 0); }
		public Cursor_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCursor_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCursor_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCursor_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_variableContext cursor_variable() throws RecognitionException {
		Cursor_variableContext _localctx = new Cursor_variableContext(_ctx, getState());
		enterRule(_localctx, 1588, RULE_cursor_variable);
		try {
			setState(10625);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(10623);
				colid();
				}
				break;
			case PARAM:
				enterOuterAlt(_localctx, 2);
				{
				setState(10624);
				match(PARAM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Exception_sectContext extends ParserRuleContext {
		public TerminalNode EXCEPTION() { return getToken(PostgreSQLParser.EXCEPTION, 0); }
		public Proc_exceptionsContext proc_exceptions() {
			return getRuleContext(Proc_exceptionsContext.class,0);
		}
		public Exception_sectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_sect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterException_sect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitException_sect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitException_sect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_sectContext exception_sect() throws RecognitionException {
		Exception_sectContext _localctx = new Exception_sectContext(_ctx, getState());
		enterRule(_localctx, 1590, RULE_exception_sect);
		try {
			setState(10630);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case END_P:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case EXCEPTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(10628);
				match(EXCEPTION);
				setState(10629);
				proc_exceptions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Proc_exceptionsContext extends ParserRuleContext {
		public List<Proc_exceptionContext> proc_exception() {
			return getRuleContexts(Proc_exceptionContext.class);
		}
		public Proc_exceptionContext proc_exception(int i) {
			return getRuleContext(Proc_exceptionContext.class,i);
		}
		public Proc_exceptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_exceptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_exceptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_exceptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_exceptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_exceptionsContext proc_exceptions() throws RecognitionException {
		Proc_exceptionsContext _localctx = new Proc_exceptionsContext(_ctx, getState());
		enterRule(_localctx, 1592, RULE_proc_exceptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10633); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(10632);
				proc_exception();
				}
				}
				setState(10635); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Proc_exceptionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public Proc_conditionsContext proc_conditions() {
			return getRuleContext(Proc_conditionsContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Proc_exceptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_exception; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_exception(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_exception(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_exception(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_exceptionContext proc_exception() throws RecognitionException {
		Proc_exceptionContext _localctx = new Proc_exceptionContext(_ctx, getState());
		enterRule(_localctx, 1594, RULE_proc_exception);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10637);
			match(WHEN);
			setState(10638);
			proc_conditions();
			setState(10639);
			match(THEN);
			setState(10640);
			proc_sect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Proc_conditionsContext extends ParserRuleContext {
		public List<Proc_conditionContext> proc_condition() {
			return getRuleContexts(Proc_conditionContext.class);
		}
		public Proc_conditionContext proc_condition(int i) {
			return getRuleContext(Proc_conditionContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(PostgreSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PostgreSQLParser.OR, i);
		}
		public Proc_conditionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_conditions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_conditions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_conditions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_conditions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_conditionsContext proc_conditions() throws RecognitionException {
		Proc_conditionsContext _localctx = new Proc_conditionsContext(_ctx, getState());
		enterRule(_localctx, 1596, RULE_proc_conditions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10642);
			proc_condition();
			setState(10647);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(10643);
				match(OR);
				setState(10644);
				proc_condition();
				}
				}
				setState(10649);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Proc_conditionContext extends ParserRuleContext {
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(PostgreSQLParser.SQLSTATE, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Proc_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_condition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_conditionContext proc_condition() throws RecognitionException {
		Proc_conditionContext _localctx = new Proc_conditionContext(_ctx, getState());
		enterRule(_localctx, 1598, RULE_proc_condition);
		try {
			setState(10653);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,740,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10650);
				any_identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10651);
				match(SQLSTATE);
				setState(10652);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_block_labelContext extends ParserRuleContext {
		public Label_declContext label_decl() {
			return getRuleContext(Label_declContext.class,0);
		}
		public Opt_block_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_block_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_block_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_block_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_block_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_block_labelContext opt_block_label() throws RecognitionException {
		Opt_block_labelContext _localctx = new Opt_block_labelContext(_ctx, getState());
		enterRule(_localctx, 1600, RULE_opt_block_label);
		try {
			setState(10657);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEGIN_P:
			case DECLARE:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case LESS_LESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(10656);
				label_decl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_loop_labelContext extends ParserRuleContext {
		public Label_declContext label_decl() {
			return getRuleContext(Label_declContext.class,0);
		}
		public Opt_loop_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_loop_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_loop_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_loop_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_loop_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_loop_labelContext opt_loop_label() throws RecognitionException {
		Opt_loop_labelContext _localctx = new Opt_loop_labelContext(_ctx, getState());
		enterRule(_localctx, 1602, RULE_opt_loop_label);
		try {
			setState(10661);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
			case WHILE:
			case FOREACH:
			case LOOP:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case LESS_LESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(10660);
				label_decl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_labelContext extends ParserRuleContext {
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public Opt_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_labelContext opt_label() throws RecognitionException {
		Opt_labelContext _localctx = new Opt_labelContext(_ctx, getState());
		enterRule(_localctx, 1604, RULE_opt_label);
		try {
			setState(10665);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case SEMI:
			case WHEN:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(10664);
				any_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_exitcondContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public Expr_until_semiContext expr_until_semi() {
			return getRuleContext(Expr_until_semiContext.class,0);
		}
		public Opt_exitcondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_exitcond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_exitcond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_exitcond(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_exitcond(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_exitcondContext opt_exitcond() throws RecognitionException {
		Opt_exitcondContext _localctx = new Opt_exitcondContext(_ctx, getState());
		enterRule(_localctx, 1606, RULE_opt_exitcond);
		try {
			setState(10670);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(10667);
				match(WHEN);
				setState(10668);
				expr_until_semi();
				}
				break;
			case SEMI:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Any_identifierContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public Any_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAny_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAny_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAny_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_identifierContext any_identifier() throws RecognitionException {
		Any_identifierContext _localctx = new Any_identifierContext(_ctx, getState());
		enterRule(_localctx, 1608, RULE_any_identifier);
		try {
			setState(10674);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,745,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10672);
				colid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10673);
				plsql_unreserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Plsql_unreserved_keywordContext extends ParserRuleContext {
		public TerminalNode ABSOLUTE_P() { return getToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		public TerminalNode ALIAS() { return getToken(PostgreSQLParser.ALIAS, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public TerminalNode ASSERT() { return getToken(PostgreSQLParser.ASSERT, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public TerminalNode CALL() { return getToken(PostgreSQLParser.CALL, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLParser.CHAIN, 0); }
		public TerminalNode CLOSE() { return getToken(PostgreSQLParser.CLOSE, 0); }
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode CONSTANT() { return getToken(PostgreSQLParser.CONSTANT, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode CONTINUE_P() { return getToken(PostgreSQLParser.CONTINUE_P, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode CURSOR() { return getToken(PostgreSQLParser.CURSOR, 0); }
		public TerminalNode DEBUG() { return getToken(PostgreSQLParser.DEBUG, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(PostgreSQLParser.DIAGNOSTICS, 0); }
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public TerminalNode DUMP() { return getToken(PostgreSQLParser.DUMP, 0); }
		public TerminalNode ELSIF() { return getToken(PostgreSQLParser.ELSIF, 0); }
		public TerminalNode ERROR() { return getToken(PostgreSQLParser.ERROR, 0); }
		public TerminalNode EXCEPTION() { return getToken(PostgreSQLParser.EXCEPTION, 0); }
		public TerminalNode EXIT() { return getToken(PostgreSQLParser.EXIT, 0); }
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode GET() { return getToken(PostgreSQLParser.GET, 0); }
		public TerminalNode INFO() { return getToken(PostgreSQLParser.INFO, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode NOTICE() { return getToken(PostgreSQLParser.NOTICE, 0); }
		public TerminalNode OPEN() { return getToken(PostgreSQLParser.OPEN, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode PERFORM() { return getToken(PostgreSQLParser.PERFORM, 0); }
		public TerminalNode PRINT_STRICT_PARAMS() { return getToken(PostgreSQLParser.PRINT_STRICT_PARAMS, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode QUERY() { return getToken(PostgreSQLParser.QUERY, 0); }
		public TerminalNode RAISE() { return getToken(PostgreSQLParser.RAISE, 0); }
		public TerminalNode RELATIVE_P() { return getToken(PostgreSQLParser.RELATIVE_P, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode RETURN() { return getToken(PostgreSQLParser.RETURN, 0); }
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public TerminalNode ROWTYPE() { return getToken(PostgreSQLParser.ROWTYPE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSQLParser.SCROLL, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SLICE() { return getToken(PostgreSQLParser.SLICE, 0); }
		public TerminalNode SQLSTATE() { return getToken(PostgreSQLParser.SQLSTATE, 0); }
		public TerminalNode STACKED() { return getToken(PostgreSQLParser.STACKED, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode USE_COLUMN() { return getToken(PostgreSQLParser.USE_COLUMN, 0); }
		public TerminalNode USE_VARIABLE() { return getToken(PostgreSQLParser.USE_VARIABLE, 0); }
		public TerminalNode VARIABLE_CONFLICT() { return getToken(PostgreSQLParser.VARIABLE_CONFLICT, 0); }
		public TerminalNode WARNING() { return getToken(PostgreSQLParser.WARNING, 0); }
		public TerminalNode OUTER_P() { return getToken(PostgreSQLParser.OUTER_P, 0); }
		public Plsql_unreserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsql_unreserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsql_unreserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsql_unreserved_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsql_unreserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Plsql_unreserved_keywordContext plsql_unreserved_keyword() throws RecognitionException {
		Plsql_unreserved_keywordContext _localctx = new Plsql_unreserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1610, RULE_plsql_unreserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10676);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2459027012145119232L) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & 2310346885883232257L) != 0) || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & 10133099161617425L) != 0) || ((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & 18015499698831617L) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & 9007199322050625L) != 0) || ((((_la - 433)) & ~0x3f) == 0 && ((1L << (_la - 433)) & -144097595889811453L) != 0) || ((((_la - 497)) & ~0x3f) == 0 && ((1L << (_la - 497)) & 12516927L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sql_expressionContext extends ParserRuleContext {
		public Opt_target_listContext opt_target_list() {
			return getRuleContext(Opt_target_listContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Group_clauseContext group_clause() {
			return getRuleContext(Group_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public Sql_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSql_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSql_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSql_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_expressionContext sql_expression() throws RecognitionException {
		Sql_expressionContext _localctx = new Sql_expressionContext(_ctx, getState());
		enterRule(_localctx, 1612, RULE_sql_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10678);
			opt_target_list();
			setState(10679);
			into_clause();
			setState(10680);
			from_clause();
			setState(10681);
			where_clause();
			setState(10682);
			group_clause();
			setState(10683);
			having_clause();
			setState(10684);
			window_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expr_until_thenContext extends ParserRuleContext {
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Expr_until_thenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_then; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_until_then(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_until_then(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_until_then(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_thenContext expr_until_then() throws RecognitionException {
		Expr_until_thenContext _localctx = new Expr_until_thenContext(_ctx, getState());
		enterRule(_localctx, 1614, RULE_expr_until_then);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10686);
			sql_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expr_until_semiContext extends ParserRuleContext {
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Expr_until_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_until_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_until_semi(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_until_semi(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_semiContext expr_until_semi() throws RecognitionException {
		Expr_until_semiContext _localctx = new Expr_until_semiContext(_ctx, getState());
		enterRule(_localctx, 1616, RULE_expr_until_semi);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10688);
			sql_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expr_until_rightbracketContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Expr_until_rightbracketContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_rightbracket; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_until_rightbracket(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_until_rightbracket(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_until_rightbracket(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_rightbracketContext expr_until_rightbracket() throws RecognitionException {
		Expr_until_rightbracketContext _localctx = new Expr_until_rightbracketContext(_ctx, getState());
		enterRule(_localctx, 1618, RULE_expr_until_rightbracket);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10690);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expr_until_loopContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Expr_until_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_until_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_until_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_until_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_loopContext expr_until_loop() throws RecognitionException {
		Expr_until_loopContext _localctx = new Expr_until_loopContext(_ctx, getState());
		enterRule(_localctx, 1620, RULE_expr_until_loop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10692);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Make_execsql_stmtContext extends ParserRuleContext {
		public StmtContext stmt() {
			return getRuleContext(StmtContext.class,0);
		}
		public Opt_returning_clause_intoContext opt_returning_clause_into() {
			return getRuleContext(Opt_returning_clause_intoContext.class,0);
		}
		public Make_execsql_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_make_execsql_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterMake_execsql_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitMake_execsql_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitMake_execsql_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Make_execsql_stmtContext make_execsql_stmt() throws RecognitionException {
		Make_execsql_stmtContext _localctx = new Make_execsql_stmtContext(_ctx, getState());
		enterRule(_localctx, 1622, RULE_make_execsql_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10694);
			stmt();
			setState(10695);
			opt_returning_clause_into();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_returning_clause_intoContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Opt_strictContext opt_strict() {
			return getRuleContext(Opt_strictContext.class,0);
		}
		public Into_targetContext into_target() {
			return getRuleContext(Into_targetContext.class,0);
		}
		public Opt_returning_clause_intoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_returning_clause_into; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_returning_clause_into(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_returning_clause_into(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_returning_clause_into(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_returning_clause_intoContext opt_returning_clause_into() throws RecognitionException {
		Opt_returning_clause_intoContext _localctx = new Opt_returning_clause_intoContext(_ctx, getState());
		enterRule(_localctx, 1624, RULE_opt_returning_clause_into);
		try {
			setState(10702);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(10697);
				match(INTO);
				setState(10698);
				opt_strict();
				setState(10699);
				into_target();
				}
				break;
			case SEMI:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 603:
			return b_expr_sempred((B_exprContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean b_expr_sempred(B_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 8);
		case 1:
			return precpred(_ctx, 7);
		case 2:
			return precpred(_ctx, 6);
		case 3:
			return precpred(_ctx, 5);
		case 4:
			return precpred(_ctx, 4);
		case 5:
			return precpred(_ctx, 10);
		case 6:
			return precpred(_ctx, 2);
		case 7:
			return precpred(_ctx, 1);
		}
		return true;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u02a7\u29d1\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"+
		"\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"+
		"\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"+
		"\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"+
		"\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"+
		"\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"+
		"\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"+
		"\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"+
		"\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"+
		"\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"+
		"\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"+
		"\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"+
		"\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"+
		"\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"+
		"\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"+
		"\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"+
		"\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"+
		"\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"+
		"\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"+
		"\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"+
		"\u00ef\u0002\u00f0\u0007\u00f0\u0002\u00f1\u0007\u00f1\u0002\u00f2\u0007"+
		"\u00f2\u0002\u00f3\u0007\u00f3\u0002\u00f4\u0007\u00f4\u0002\u00f5\u0007"+
		"\u00f5\u0002\u00f6\u0007\u00f6\u0002\u00f7\u0007\u00f7\u0002\u00f8\u0007"+
		"\u00f8\u0002\u00f9\u0007\u00f9\u0002\u00fa\u0007\u00fa\u0002\u00fb\u0007"+
		"\u00fb\u0002\u00fc\u0007\u00fc\u0002\u00fd\u0007\u00fd\u0002\u00fe\u0007"+
		"\u00fe\u0002\u00ff\u0007\u00ff\u0002\u0100\u0007\u0100\u0002\u0101\u0007"+
		"\u0101\u0002\u0102\u0007\u0102\u0002\u0103\u0007\u0103\u0002\u0104\u0007"+
		"\u0104\u0002\u0105\u0007\u0105\u0002\u0106\u0007\u0106\u0002\u0107\u0007"+
		"\u0107\u0002\u0108\u0007\u0108\u0002\u0109\u0007\u0109\u0002\u010a\u0007"+
		"\u010a\u0002\u010b\u0007\u010b\u0002\u010c\u0007\u010c\u0002\u010d\u0007"+
		"\u010d\u0002\u010e\u0007\u010e\u0002\u010f\u0007\u010f\u0002\u0110\u0007"+
		"\u0110\u0002\u0111\u0007\u0111\u0002\u0112\u0007\u0112\u0002\u0113\u0007"+
		"\u0113\u0002\u0114\u0007\u0114\u0002\u0115\u0007\u0115\u0002\u0116\u0007"+
		"\u0116\u0002\u0117\u0007\u0117\u0002\u0118\u0007\u0118\u0002\u0119\u0007"+
		"\u0119\u0002\u011a\u0007\u011a\u0002\u011b\u0007\u011b\u0002\u011c\u0007"+
		"\u011c\u0002\u011d\u0007\u011d\u0002\u011e\u0007\u011e\u0002\u011f\u0007"+
		"\u011f\u0002\u0120\u0007\u0120\u0002\u0121\u0007\u0121\u0002\u0122\u0007"+
		"\u0122\u0002\u0123\u0007\u0123\u0002\u0124\u0007\u0124\u0002\u0125\u0007"+
		"\u0125\u0002\u0126\u0007\u0126\u0002\u0127\u0007\u0127\u0002\u0128\u0007"+
		"\u0128\u0002\u0129\u0007\u0129\u0002\u012a\u0007\u012a\u0002\u012b\u0007"+
		"\u012b\u0002\u012c\u0007\u012c\u0002\u012d\u0007\u012d\u0002\u012e\u0007"+
		"\u012e\u0002\u012f\u0007\u012f\u0002\u0130\u0007\u0130\u0002\u0131\u0007"+
		"\u0131\u0002\u0132\u0007\u0132\u0002\u0133\u0007\u0133\u0002\u0134\u0007"+
		"\u0134\u0002\u0135\u0007\u0135\u0002\u0136\u0007\u0136\u0002\u0137\u0007"+
		"\u0137\u0002\u0138\u0007\u0138\u0002\u0139\u0007\u0139\u0002\u013a\u0007"+
		"\u013a\u0002\u013b\u0007\u013b\u0002\u013c\u0007\u013c\u0002\u013d\u0007"+
		"\u013d\u0002\u013e\u0007\u013e\u0002\u013f\u0007\u013f\u0002\u0140\u0007"+
		"\u0140\u0002\u0141\u0007\u0141\u0002\u0142\u0007\u0142\u0002\u0143\u0007"+
		"\u0143\u0002\u0144\u0007\u0144\u0002\u0145\u0007\u0145\u0002\u0146\u0007"+
		"\u0146\u0002\u0147\u0007\u0147\u0002\u0148\u0007\u0148\u0002\u0149\u0007"+
		"\u0149\u0002\u014a\u0007\u014a\u0002\u014b\u0007\u014b\u0002\u014c\u0007"+
		"\u014c\u0002\u014d\u0007\u014d\u0002\u014e\u0007\u014e\u0002\u014f\u0007"+
		"\u014f\u0002\u0150\u0007\u0150\u0002\u0151\u0007\u0151\u0002\u0152\u0007"+
		"\u0152\u0002\u0153\u0007\u0153\u0002\u0154\u0007\u0154\u0002\u0155\u0007"+
		"\u0155\u0002\u0156\u0007\u0156\u0002\u0157\u0007\u0157\u0002\u0158\u0007"+
		"\u0158\u0002\u0159\u0007\u0159\u0002\u015a\u0007\u015a\u0002\u015b\u0007"+
		"\u015b\u0002\u015c\u0007\u015c\u0002\u015d\u0007\u015d\u0002\u015e\u0007"+
		"\u015e\u0002\u015f\u0007\u015f\u0002\u0160\u0007\u0160\u0002\u0161\u0007"+
		"\u0161\u0002\u0162\u0007\u0162\u0002\u0163\u0007\u0163\u0002\u0164\u0007"+
		"\u0164\u0002\u0165\u0007\u0165\u0002\u0166\u0007\u0166\u0002\u0167\u0007"+
		"\u0167\u0002\u0168\u0007\u0168\u0002\u0169\u0007\u0169\u0002\u016a\u0007"+
		"\u016a\u0002\u016b\u0007\u016b\u0002\u016c\u0007\u016c\u0002\u016d\u0007"+
		"\u016d\u0002\u016e\u0007\u016e\u0002\u016f\u0007\u016f\u0002\u0170\u0007"+
		"\u0170\u0002\u0171\u0007\u0171\u0002\u0172\u0007\u0172\u0002\u0173\u0007"+
		"\u0173\u0002\u0174\u0007\u0174\u0002\u0175\u0007\u0175\u0002\u0176\u0007"+
		"\u0176\u0002\u0177\u0007\u0177\u0002\u0178\u0007\u0178\u0002\u0179\u0007"+
		"\u0179\u0002\u017a\u0007\u017a\u0002\u017b\u0007\u017b\u0002\u017c\u0007"+
		"\u017c\u0002\u017d\u0007\u017d\u0002\u017e\u0007\u017e\u0002\u017f\u0007"+
		"\u017f\u0002\u0180\u0007\u0180\u0002\u0181\u0007\u0181\u0002\u0182\u0007"+
		"\u0182\u0002\u0183\u0007\u0183\u0002\u0184\u0007\u0184\u0002\u0185\u0007"+
		"\u0185\u0002\u0186\u0007\u0186\u0002\u0187\u0007\u0187\u0002\u0188\u0007"+
		"\u0188\u0002\u0189\u0007\u0189\u0002\u018a\u0007\u018a\u0002\u018b\u0007"+
		"\u018b\u0002\u018c\u0007\u018c\u0002\u018d\u0007\u018d\u0002\u018e\u0007"+
		"\u018e\u0002\u018f\u0007\u018f\u0002\u0190\u0007\u0190\u0002\u0191\u0007"+
		"\u0191\u0002\u0192\u0007\u0192\u0002\u0193\u0007\u0193\u0002\u0194\u0007"+
		"\u0194\u0002\u0195\u0007\u0195\u0002\u0196\u0007\u0196\u0002\u0197\u0007"+
		"\u0197\u0002\u0198\u0007\u0198\u0002\u0199\u0007\u0199\u0002\u019a\u0007"+
		"\u019a\u0002\u019b\u0007\u019b\u0002\u019c\u0007\u019c\u0002\u019d\u0007"+
		"\u019d\u0002\u019e\u0007\u019e\u0002\u019f\u0007\u019f\u0002\u01a0\u0007"+
		"\u01a0\u0002\u01a1\u0007\u01a1\u0002\u01a2\u0007\u01a2\u0002\u01a3\u0007"+
		"\u01a3\u0002\u01a4\u0007\u01a4\u0002\u01a5\u0007\u01a5\u0002\u01a6\u0007"+
		"\u01a6\u0002\u01a7\u0007\u01a7\u0002\u01a8\u0007\u01a8\u0002\u01a9\u0007"+
		"\u01a9\u0002\u01aa\u0007\u01aa\u0002\u01ab\u0007\u01ab\u0002\u01ac\u0007"+
		"\u01ac\u0002\u01ad\u0007\u01ad\u0002\u01ae\u0007\u01ae\u0002\u01af\u0007"+
		"\u01af\u0002\u01b0\u0007\u01b0\u0002\u01b1\u0007\u01b1\u0002\u01b2\u0007"+
		"\u01b2\u0002\u01b3\u0007\u01b3\u0002\u01b4\u0007\u01b4\u0002\u01b5\u0007"+
		"\u01b5\u0002\u01b6\u0007\u01b6\u0002\u01b7\u0007\u01b7\u0002\u01b8\u0007"+
		"\u01b8\u0002\u01b9\u0007\u01b9\u0002\u01ba\u0007\u01ba\u0002\u01bb\u0007"+
		"\u01bb\u0002\u01bc\u0007\u01bc\u0002\u01bd\u0007\u01bd\u0002\u01be\u0007"+
		"\u01be\u0002\u01bf\u0007\u01bf\u0002\u01c0\u0007\u01c0\u0002\u01c1\u0007"+
		"\u01c1\u0002\u01c2\u0007\u01c2\u0002\u01c3\u0007\u01c3\u0002\u01c4\u0007"+
		"\u01c4\u0002\u01c5\u0007\u01c5\u0002\u01c6\u0007\u01c6\u0002\u01c7\u0007"+
		"\u01c7\u0002\u01c8\u0007\u01c8\u0002\u01c9\u0007\u01c9\u0002\u01ca\u0007"+
		"\u01ca\u0002\u01cb\u0007\u01cb\u0002\u01cc\u0007\u01cc\u0002\u01cd\u0007"+
		"\u01cd\u0002\u01ce\u0007\u01ce\u0002\u01cf\u0007\u01cf\u0002\u01d0\u0007"+
		"\u01d0\u0002\u01d1\u0007\u01d1\u0002\u01d2\u0007\u01d2\u0002\u01d3\u0007"+
		"\u01d3\u0002\u01d4\u0007\u01d4\u0002\u01d5\u0007\u01d5\u0002\u01d6\u0007"+
		"\u01d6\u0002\u01d7\u0007\u01d7\u0002\u01d8\u0007\u01d8\u0002\u01d9\u0007"+
		"\u01d9\u0002\u01da\u0007\u01da\u0002\u01db\u0007\u01db\u0002\u01dc\u0007"+
		"\u01dc\u0002\u01dd\u0007\u01dd\u0002\u01de\u0007\u01de\u0002\u01df\u0007"+
		"\u01df\u0002\u01e0\u0007\u01e0\u0002\u01e1\u0007\u01e1\u0002\u01e2\u0007"+
		"\u01e2\u0002\u01e3\u0007\u01e3\u0002\u01e4\u0007\u01e4\u0002\u01e5\u0007"+
		"\u01e5\u0002\u01e6\u0007\u01e6\u0002\u01e7\u0007\u01e7\u0002\u01e8\u0007"+
		"\u01e8\u0002\u01e9\u0007\u01e9\u0002\u01ea\u0007\u01ea\u0002\u01eb\u0007"+
		"\u01eb\u0002\u01ec\u0007\u01ec\u0002\u01ed\u0007\u01ed\u0002\u01ee\u0007"+
		"\u01ee\u0002\u01ef\u0007\u01ef\u0002\u01f0\u0007\u01f0\u0002\u01f1\u0007"+
		"\u01f1\u0002\u01f2\u0007\u01f2\u0002\u01f3\u0007\u01f3\u0002\u01f4\u0007"+
		"\u01f4\u0002\u01f5\u0007\u01f5\u0002\u01f6\u0007\u01f6\u0002\u01f7\u0007"+
		"\u01f7\u0002\u01f8\u0007\u01f8\u0002\u01f9\u0007\u01f9\u0002\u01fa\u0007"+
		"\u01fa\u0002\u01fb\u0007\u01fb\u0002\u01fc\u0007\u01fc\u0002\u01fd\u0007"+
		"\u01fd\u0002\u01fe\u0007\u01fe\u0002\u01ff\u0007\u01ff\u0002\u0200\u0007"+
		"\u0200\u0002\u0201\u0007\u0201\u0002\u0202\u0007\u0202\u0002\u0203\u0007"+
		"\u0203\u0002\u0204\u0007\u0204\u0002\u0205\u0007\u0205\u0002\u0206\u0007"+
		"\u0206\u0002\u0207\u0007\u0207\u0002\u0208\u0007\u0208\u0002\u0209\u0007"+
		"\u0209\u0002\u020a\u0007\u020a\u0002\u020b\u0007\u020b\u0002\u020c\u0007"+
		"\u020c\u0002\u020d\u0007\u020d\u0002\u020e\u0007\u020e\u0002\u020f\u0007"+
		"\u020f\u0002\u0210\u0007\u0210\u0002\u0211\u0007\u0211\u0002\u0212\u0007"+
		"\u0212\u0002\u0213\u0007\u0213\u0002\u0214\u0007\u0214\u0002\u0215\u0007"+
		"\u0215\u0002\u0216\u0007\u0216\u0002\u0217\u0007\u0217\u0002\u0218\u0007"+
		"\u0218\u0002\u0219\u0007\u0219\u0002\u021a\u0007\u021a\u0002\u021b\u0007"+
		"\u021b\u0002\u021c\u0007\u021c\u0002\u021d\u0007\u021d\u0002\u021e\u0007"+
		"\u021e\u0002\u021f\u0007\u021f\u0002\u0220\u0007\u0220\u0002\u0221\u0007"+
		"\u0221\u0002\u0222\u0007\u0222\u0002\u0223\u0007\u0223\u0002\u0224\u0007"+
		"\u0224\u0002\u0225\u0007\u0225\u0002\u0226\u0007\u0226\u0002\u0227\u0007"+
		"\u0227\u0002\u0228\u0007\u0228\u0002\u0229\u0007\u0229\u0002\u022a\u0007"+
		"\u022a\u0002\u022b\u0007\u022b\u0002\u022c\u0007\u022c\u0002\u022d\u0007"+
		"\u022d\u0002\u022e\u0007\u022e\u0002\u022f\u0007\u022f\u0002\u0230\u0007"+
		"\u0230\u0002\u0231\u0007\u0231\u0002\u0232\u0007\u0232\u0002\u0233\u0007"+
		"\u0233\u0002\u0234\u0007\u0234\u0002\u0235\u0007\u0235\u0002\u0236\u0007"+
		"\u0236\u0002\u0237\u0007\u0237\u0002\u0238\u0007\u0238\u0002\u0239\u0007"+
		"\u0239\u0002\u023a\u0007\u023a\u0002\u023b\u0007\u023b\u0002\u023c\u0007"+
		"\u023c\u0002\u023d\u0007\u023d\u0002\u023e\u0007\u023e\u0002\u023f\u0007"+
		"\u023f\u0002\u0240\u0007\u0240\u0002\u0241\u0007\u0241\u0002\u0242\u0007"+
		"\u0242\u0002\u0243\u0007\u0243\u0002\u0244\u0007\u0244\u0002\u0245\u0007"+
		"\u0245\u0002\u0246\u0007\u0246\u0002\u0247\u0007\u0247\u0002\u0248\u0007"+
		"\u0248\u0002\u0249\u0007\u0249\u0002\u024a\u0007\u024a\u0002\u024b\u0007"+
		"\u024b\u0002\u024c\u0007\u024c\u0002\u024d\u0007\u024d\u0002\u024e\u0007"+
		"\u024e\u0002\u024f\u0007\u024f\u0002\u0250\u0007\u0250\u0002\u0251\u0007"+
		"\u0251\u0002\u0252\u0007\u0252\u0002\u0253\u0007\u0253\u0002\u0254\u0007"+
		"\u0254\u0002\u0255\u0007\u0255\u0002\u0256\u0007\u0256\u0002\u0257\u0007"+
		"\u0257\u0002\u0258\u0007\u0258\u0002\u0259\u0007\u0259\u0002\u025a\u0007"+
		"\u025a\u0002\u025b\u0007\u025b\u0002\u025c\u0007\u025c\u0002\u025d\u0007"+
		"\u025d\u0002\u025e\u0007\u025e\u0002\u025f\u0007\u025f\u0002\u0260\u0007"+
		"\u0260\u0002\u0261\u0007\u0261\u0002\u0262\u0007\u0262\u0002\u0263\u0007"+
		"\u0263\u0002\u0264\u0007\u0264\u0002\u0265\u0007\u0265\u0002\u0266\u0007"+
		"\u0266\u0002\u0267\u0007\u0267\u0002\u0268\u0007\u0268\u0002\u0269\u0007"+
		"\u0269\u0002\u026a\u0007\u026a\u0002\u026b\u0007\u026b\u0002\u026c\u0007"+
		"\u026c\u0002\u026d\u0007\u026d\u0002\u026e\u0007\u026e\u0002\u026f\u0007"+
		"\u026f\u0002\u0270\u0007\u0270\u0002\u0271\u0007\u0271\u0002\u0272\u0007"+
		"\u0272\u0002\u0273\u0007\u0273\u0002\u0274\u0007\u0274\u0002\u0275\u0007"+
		"\u0275\u0002\u0276\u0007\u0276\u0002\u0277\u0007\u0277\u0002\u0278\u0007"+
		"\u0278\u0002\u0279\u0007\u0279\u0002\u027a\u0007\u027a\u0002\u027b\u0007"+
		"\u027b\u0002\u027c\u0007\u027c\u0002\u027d\u0007\u027d\u0002\u027e\u0007"+
		"\u027e\u0002\u027f\u0007\u027f\u0002\u0280\u0007\u0280\u0002\u0281\u0007"+
		"\u0281\u0002\u0282\u0007\u0282\u0002\u0283\u0007\u0283\u0002\u0284\u0007"+
		"\u0284\u0002\u0285\u0007\u0285\u0002\u0286\u0007\u0286\u0002\u0287\u0007"+
		"\u0287\u0002\u0288\u0007\u0288\u0002\u0289\u0007\u0289\u0002\u028a\u0007"+
		"\u028a\u0002\u028b\u0007\u028b\u0002\u028c\u0007\u028c\u0002\u028d\u0007"+
		"\u028d\u0002\u028e\u0007\u028e\u0002\u028f\u0007\u028f\u0002\u0290\u0007"+
		"\u0290\u0002\u0291\u0007\u0291\u0002\u0292\u0007\u0292\u0002\u0293\u0007"+
		"\u0293\u0002\u0294\u0007\u0294\u0002\u0295\u0007\u0295\u0002\u0296\u0007"+
		"\u0296\u0002\u0297\u0007\u0297\u0002\u0298\u0007\u0298\u0002\u0299\u0007"+
		"\u0299\u0002\u029a\u0007\u029a\u0002\u029b\u0007\u029b\u0002\u029c\u0007"+
		"\u029c\u0002\u029d\u0007\u029d\u0002\u029e\u0007\u029e\u0002\u029f\u0007"+
		"\u029f\u0002\u02a0\u0007\u02a0\u0002\u02a1\u0007\u02a1\u0002\u02a2\u0007"+
		"\u02a2\u0002\u02a3\u0007\u02a3\u0002\u02a4\u0007\u02a4\u0002\u02a5\u0007"+
		"\u02a5\u0002\u02a6\u0007\u02a6\u0002\u02a7\u0007\u02a7\u0002\u02a8\u0007"+
		"\u02a8\u0002\u02a9\u0007\u02a9\u0002\u02aa\u0007\u02aa\u0002\u02ab\u0007"+
		"\u02ab\u0002\u02ac\u0007\u02ac\u0002\u02ad\u0007\u02ad\u0002\u02ae\u0007"+
		"\u02ae\u0002\u02af\u0007\u02af\u0002\u02b0\u0007\u02b0\u0002\u02b1\u0007"+
		"\u02b1\u0002\u02b2\u0007\u02b2\u0002\u02b3\u0007\u02b3\u0002\u02b4\u0007"+
		"\u02b4\u0002\u02b5\u0007\u02b5\u0002\u02b6\u0007\u02b6\u0002\u02b7\u0007"+
		"\u02b7\u0002\u02b8\u0007\u02b8\u0002\u02b9\u0007\u02b9\u0002\u02ba\u0007"+
		"\u02ba\u0002\u02bb\u0007\u02bb\u0002\u02bc\u0007\u02bc\u0002\u02bd\u0007"+
		"\u02bd\u0002\u02be\u0007\u02be\u0002\u02bf\u0007\u02bf\u0002\u02c0\u0007"+
		"\u02c0\u0002\u02c1\u0007\u02c1\u0002\u02c2\u0007\u02c2\u0002\u02c3\u0007"+
		"\u02c3\u0002\u02c4\u0007\u02c4\u0002\u02c5\u0007\u02c5\u0002\u02c6\u0007"+
		"\u02c6\u0002\u02c7\u0007\u02c7\u0002\u02c8\u0007\u02c8\u0002\u02c9\u0007"+
		"\u02c9\u0002\u02ca\u0007\u02ca\u0002\u02cb\u0007\u02cb\u0002\u02cc\u0007"+
		"\u02cc\u0002\u02cd\u0007\u02cd\u0002\u02ce\u0007\u02ce\u0002\u02cf\u0007"+
		"\u02cf\u0002\u02d0\u0007\u02d0\u0002\u02d1\u0007\u02d1\u0002\u02d2\u0007"+
		"\u02d2\u0002\u02d3\u0007\u02d3\u0002\u02d4\u0007\u02d4\u0002\u02d5\u0007"+
		"\u02d5\u0002\u02d6\u0007\u02d6\u0002\u02d7\u0007\u02d7\u0002\u02d8\u0007"+
		"\u02d8\u0002\u02d9\u0007\u02d9\u0002\u02da\u0007\u02da\u0002\u02db\u0007"+
		"\u02db\u0002\u02dc\u0007\u02dc\u0002\u02dd\u0007\u02dd\u0002\u02de\u0007"+
		"\u02de\u0002\u02df\u0007\u02df\u0002\u02e0\u0007\u02e0\u0002\u02e1\u0007"+
		"\u02e1\u0002\u02e2\u0007\u02e2\u0002\u02e3\u0007\u02e3\u0002\u02e4\u0007"+
		"\u02e4\u0002\u02e5\u0007\u02e5\u0002\u02e6\u0007\u02e6\u0002\u02e7\u0007"+
		"\u02e7\u0002\u02e8\u0007\u02e8\u0002\u02e9\u0007\u02e9\u0002\u02ea\u0007"+
		"\u02ea\u0002\u02eb\u0007\u02eb\u0002\u02ec\u0007\u02ec\u0002\u02ed\u0007"+
		"\u02ed\u0002\u02ee\u0007\u02ee\u0002\u02ef\u0007\u02ef\u0002\u02f0\u0007"+
		"\u02f0\u0002\u02f1\u0007\u02f1\u0002\u02f2\u0007\u02f2\u0002\u02f3\u0007"+
		"\u02f3\u0002\u02f4\u0007\u02f4\u0002\u02f5\u0007\u02f5\u0002\u02f6\u0007"+
		"\u02f6\u0002\u02f7\u0007\u02f7\u0002\u02f8\u0007\u02f8\u0002\u02f9\u0007"+
		"\u02f9\u0002\u02fa\u0007\u02fa\u0002\u02fb\u0007\u02fb\u0002\u02fc\u0007"+
		"\u02fc\u0002\u02fd\u0007\u02fd\u0002\u02fe\u0007\u02fe\u0002\u02ff\u0007"+
		"\u02ff\u0002\u0300\u0007\u0300\u0002\u0301\u0007\u0301\u0002\u0302\u0007"+
		"\u0302\u0002\u0303\u0007\u0303\u0002\u0304\u0007\u0304\u0002\u0305\u0007"+
		"\u0305\u0002\u0306\u0007\u0306\u0002\u0307\u0007\u0307\u0002\u0308\u0007"+
		"\u0308\u0002\u0309\u0007\u0309\u0002\u030a\u0007\u030a\u0002\u030b\u0007"+
		"\u030b\u0002\u030c\u0007\u030c\u0002\u030d\u0007\u030d\u0002\u030e\u0007"+
		"\u030e\u0002\u030f\u0007\u030f\u0002\u0310\u0007\u0310\u0002\u0311\u0007"+
		"\u0311\u0002\u0312\u0007\u0312\u0002\u0313\u0007\u0313\u0002\u0314\u0007"+
		"\u0314\u0002\u0315\u0007\u0315\u0002\u0316\u0007\u0316\u0002\u0317\u0007"+
		"\u0317\u0002\u0318\u0007\u0318\u0002\u0319\u0007\u0319\u0002\u031a\u0007"+
		"\u031a\u0002\u031b\u0007\u031b\u0002\u031c\u0007\u031c\u0002\u031d\u0007"+
		"\u031d\u0002\u031e\u0007\u031e\u0002\u031f\u0007\u031f\u0002\u0320\u0007"+
		"\u0320\u0002\u0321\u0007\u0321\u0002\u0322\u0007\u0322\u0002\u0323\u0007"+
		"\u0323\u0002\u0324\u0007\u0324\u0002\u0325\u0007\u0325\u0002\u0326\u0007"+
		"\u0326\u0002\u0327\u0007\u0327\u0002\u0328\u0007\u0328\u0002\u0329\u0007"+
		"\u0329\u0002\u032a\u0007\u032a\u0002\u032b\u0007\u032b\u0002\u032c\u0007"+
		"\u032c\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0001"+
		"\u0002\u0001\u0002\u0001\u0003\u0001\u0003\u0003\u0003\u0664\b\u0003\u0005"+
		"\u0003\u0666\b\u0003\n\u0003\f\u0003\u0669\t\u0003\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0003\u0004\u06e8\b\u0004\u0001\u0005"+
		"\u0001\u0005\u0003\u0005\u06ec\b\u0005\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\b\u0001\b\u0003\b\u06f9\b\b\u0001\t\u0005\t\u06fc\b\t\n\t\f\t\u06ff"+
		"\t\t\u0001\n\u0005\n\u0702\b\n\n\n\f\n\u0705\t\n\u0001\u000b\u0001\u000b"+
		"\u0001\u000b\u0003\u000b\u070a\b\u000b\u0001\u000b\u0001\u000b\u0001\u000b"+
		"\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b"+
		"\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0003\u000b\u0719\b\u000b"+
		"\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001"+
		"\f\u0001\f\u0003\f\u0725\b\f\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001"+
		"\r\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e"+
		"\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u0737\b\u000f"+
		"\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010\u073c\b\u0010\u0001\u0010"+
		"\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0011\u0001\u0011\u0001\u0011"+
		"\u0001\u0011\u0003\u0011\u0746\b\u0011\u0001\u0011\u0001\u0011\u0001\u0012"+
		"\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0014\u0001\u0014\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015"+
		"\u0001\u0015\u0003\u0015\u075e\b\u0015\u0001\u0015\u0001\u0015\u0001\u0015"+
		"\u0001\u0015\u0001\u0015\u0003\u0015\u0765\b\u0015\u0001\u0015\u0001\u0015"+
		"\u0001\u0016\u0001\u0016\u0003\u0016\u076b\b\u0016\u0001\u0017\u0005\u0017"+
		"\u076e\b\u0017\n\u0017\f\u0017\u0771\t\u0017\u0001\u0018\u0001\u0018\u0001"+
		"\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0003\u0018\u0779\b\u0018\u0001"+
		"\u0019\u0001\u0019\u0003\u0019\u077d\b\u0019\u0001\u0019\u0001\u0019\u0001"+
		"\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001"+
		"\u001a\u0001\u001a\u0003\u001a\u0789\b\u001a\u0001\u001b\u0001\u001b\u0001"+
		"\u001b\u0001\u001b\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u07a8\b\u001c\u0001\u001d\u0001"+
		"\u001d\u0001\u001d\u0005\u001d\u07ad\b\u001d\n\u001d\f\u001d\u07b0\t\u001d"+
		"\u0001\u001e\u0001\u001e\u0001\u001e\u0005\u001e\u07b5\b\u001e\n\u001e"+
		"\f\u001e\u07b8\t\u001e\u0001\u001f\u0001\u001f\u0003\u001f\u07bc\b\u001f"+
		"\u0001 \u0001 \u0001 \u0001 \u0001 \u0003 \u07c3\b \u0001!\u0001!\u0001"+
		"!\u0001!\u0003!\u07c9\b!\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001"+
		"\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001"+
		"\"\u0003\"\u07da\b\"\u0001#\u0001#\u0001#\u0003#\u07df\b#\u0001$\u0001"+
		"$\u0003$\u07e3\b$\u0001%\u0001%\u0001%\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0003&\u07f0\b&\u0001\'\u0001\'\u0003\'\u07f4\b"+
		"\'\u0001(\u0001(\u0001(\u0003(\u07f9\b(\u0001)\u0001)\u0001)\u0003)\u07fe"+
		"\b)\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001"+
		"*\u0003*\u080a\b*\u0001+\u0001+\u0001+\u0001+\u0001+\u0001,\u0001,\u0003"+
		",\u0813\b,\u0001-\u0001-\u0001.\u0001.\u0001/\u0001/\u0001/\u00010\u0001"+
		"0\u00010\u00010\u00030\u0820\b0\u00010\u00010\u00010\u00030\u0825\b0\u0001"+
		"0\u00010\u00010\u00010\u00010\u00010\u00010\u00010\u00010\u00030\u0830"+
		"\b0\u00010\u00010\u00010\u00010\u00010\u00010\u00010\u00010\u00010\u0003"+
		"0\u083b\b0\u00010\u00010\u00010\u00030\u0840\b0\u00010\u00010\u00010\u0001"+
		"0\u00010\u00010\u00010\u00010\u00010\u00030\u084b\b0\u00010\u00010\u0001"+
		"0\u00010\u00010\u00010\u00010\u00010\u00010\u00030\u0856\b0\u00010\u0001"+
		"0\u00010\u00010\u00010\u00010\u00010\u00030\u085f\b0\u00010\u00010\u0001"+
		"0\u00010\u00010\u00010\u00010\u00010\u00030\u0869\b0\u00010\u00010\u0001"+
		"0\u00010\u00010\u00010\u00010\u00010\u00010\u00010\u00010\u00010\u0001"+
		"0\u00030\u0878\b0\u00010\u00010\u00010\u00010\u00010\u00010\u00010\u0001"+
		"0\u00010\u00010\u00030\u0884\b0\u00010\u00010\u00010\u00030\u0889\b0\u0001"+
		"1\u00011\u00011\u00051\u088e\b1\n1\f1\u0891\t1\u00012\u00012\u00012\u0001"+
		"2\u00012\u00012\u00012\u00012\u00032\u089b\b2\u00013\u00013\u00013\u0001"+
		"3\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00014\u00034\u099d\b4\u00015\u00015\u00015\u00015\u00015\u0003"+
		"5\u09a4\b5\u00016\u00016\u00016\u00036\u09a9\b6\u00017\u00017\u00017\u0003"+
		"7\u09ae\b7\u00018\u00018\u00018\u00038\u09b3\b8\u00019\u00019\u00019\u0001"+
		"9\u00019\u00019\u00039\u09bb\b9\u0001:\u0001:\u0001:\u0001:\u0001;\u0001"+
		";\u0001;\u0003;\u09c4\b;\u0001<\u0001<\u0001<\u0005<\u09c9\b<\n<\f<\u09cc"+
		"\t<\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0003=\u09d5\b=\u0003"+
		"=\u09d7\b=\u0001>\u0004>\u09da\b>\u000b>\f>\u09db\u0001?\u0001?\u0001"+
		"?\u0001?\u0003?\u09e2\b?\u0001?\u0001?\u0001?\u0001?\u0003?\u09e8\b?\u0003"+
		"?\u09ea\b?\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001"+
		"@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001"+
		"@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0003@\u0a06\b@\u0001"+
		"A\u0001A\u0001A\u0001B\u0001B\u0001B\u0005B\u0a0e\bB\nB\fB\u0a11\tB\u0001"+
		"C\u0001C\u0001C\u0001C\u0001C\u0001D\u0001D\u0001D\u0005D\u0a1b\bD\nD"+
		"\fD\u0a1e\tD\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001"+
		"E\u0003E\u0a29\bE\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001"+
		"E\u0001E\u0001E\u0001E\u0001E\u0003E\u0a37\bE\u0001F\u0001F\u0001F\u0003"+
		"F\u0a3c\bF\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001"+
		"G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001"+
		"G\u0001G\u0001G\u0001G\u0003G\u0a54\bG\u0001H\u0001H\u0001I\u0001I\u0003"+
		"I\u0a5a\bI\u0001J\u0001J\u0001J\u0003J\u0a5f\bJ\u0001K\u0001K\u0001K\u0001"+
		"K\u0001K\u0003K\u0a66\bK\u0001L\u0005L\u0a69\bL\nL\fL\u0a6c\tL\u0001M"+
		"\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001"+
		"M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001"+
		"M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001"+
		"M\u0001M\u0001M\u0001M\u0001M\u0003M\u0a91\bM\u0001N\u0001N\u0003N\u0a95"+
		"\bN\u0001O\u0001O\u0001O\u0001O\u0001O\u0003O\u0a9c\bO\u0001P\u0001P\u0003"+
		"P\u0aa0\bP\u0001Q\u0001Q\u0001Q\u0005Q\u0aa5\bQ\nQ\fQ\u0aa8\tQ\u0001R"+
		"\u0001R\u0001R\u0001S\u0001S\u0001S\u0001S\u0001S\u0001S\u0001S\u0001"+
		"S\u0003S\u0ab5\bS\u0001T\u0001T\u0001T\u0005T\u0aba\bT\nT\fT\u0abd\tT"+
		"\u0001U\u0001U\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0003V\u0ac7"+
		"\bV\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001"+
		"V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001"+
		"V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001"+
		"V\u0001V\u0003V\u0ae8\bV\u0001W\u0001W\u0001W\u0001W\u0001W\u0001W\u0001"+
		"W\u0001W\u0003W\u0af2\bW\u0001X\u0001X\u0003X\u0af6\bX\u0001Y\u0001Y\u0001"+
		"Y\u0001Y\u0001Y\u0003Y\u0afd\bY\u0001Z\u0001Z\u0001Z\u0005Z\u0b02\bZ\n"+
		"Z\fZ\u0b05\tZ\u0001[\u0001[\u0001[\u0005[\u0b0a\b[\n[\f[\u0b0d\t[\u0001"+
		"\\\u0001\\\u0001\\\u0003\\\u0b12\b\\\u0001]\u0001]\u0003]\u0b16\b]\u0001"+
		"^\u0001^\u0001^\u0001^\u0001^\u0001_\u0001_\u0001_\u0003_\u0b20\b_\u0001"+
		"_\u0001_\u0001`\u0005`\u0b25\b`\n`\f`\u0b28\t`\u0001a\u0001a\u0001a\u0001"+
		"a\u0001a\u0001a\u0001a\u0001a\u0003a\u0b32\ba\u0001b\u0001b\u0001b\u0001"+
		"b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001"+
		"b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001"+
		"b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0003b\u0b52\bb\u0001b\u0001"+
		"b\u0001b\u0001b\u0001b\u0001b\u0003b\u0b5a\bb\u0001c\u0001c\u0001c\u0003"+
		"c\u0b5f\bc\u0001d\u0001d\u0001d\u0001d\u0001d\u0003d\u0b66\bd\u0001e\u0001"+
		"e\u0001e\u0001e\u0001f\u0001f\u0005f\u0b6e\bf\nf\ff\u0b71\tf\u0001g\u0001"+
		"g\u0001h\u0001h\u0001h\u0001h\u0001h\u0003h\u0b7a\bh\u0001i\u0001i\u0001"+
		"i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001"+
		"i\u0001i\u0001i\u0001i\u0001i\u0001i\u0003i\u0b8e\bi\u0001i\u0001i\u0001"+
		"i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001"+
		"i\u0003i\u0b9d\bi\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001"+
		"i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001"+
		"i\u0001i\u0001i\u0001i\u0001i\u0001i\u0003i\u0bb6\bi\u0001j\u0001j\u0001"+
		"j\u0003j\u0bbb\bj\u0001k\u0001k\u0001k\u0001k\u0001k\u0003k\u0bc2\bk\u0001"+
		"l\u0001l\u0001l\u0005l\u0bc7\bl\nl\fl\u0bca\tl\u0001m\u0001m\u0001n\u0001"+
		"n\u0001n\u0001n\u0001n\u0001n\u0003n\u0bd4\bn\u0001o\u0001o\u0001o\u0003"+
		"o\u0bd9\bo\u0001p\u0001p\u0001p\u0005p\u0bde\bp\np\fp\u0be1\tp\u0001q"+
		"\u0001q\u0001q\u0001q\u0001q\u0001q\u0001q\u0001q\u0003q\u0beb\bq\u0001"+
		"r\u0001r\u0001r\u0001r\u0001r\u0001r\u0003r\u0bf3\br\u0001s\u0001s\u0001"+
		"s\u0001s\u0001s\u0001s\u0001s\u0001s\u0001s\u0003s\u0bfe\bs\u0001t\u0001"+
		"t\u0001t\u0001t\u0001u\u0001u\u0001u\u0001u\u0001v\u0001v\u0001v\u0001"+
		"v\u0001v\u0001v\u0003v\u0c0e\bv\u0001w\u0001w\u0001w\u0001w\u0001w\u0001"+
		"w\u0003w\u0c16\bw\u0001x\u0001x\u0003x\u0c1a\bx\u0001y\u0001y\u0001y\u0001"+
		"y\u0001y\u0001y\u0001y\u0001z\u0001z\u0001z\u0005z\u0c26\bz\nz\fz\u0c29"+
		"\tz\u0001{\u0001{\u0001{\u0001{\u0001{\u0001{\u0001{\u0001{\u0001{\u0001"+
		"{\u0001{\u0001{\u0001{\u0001{\u0003{\u0c39\b{\u0001|\u0001|\u0001|\u0003"+
		"|\u0c3e\b|\u0001}\u0001}\u0001}\u0001}\u0001}\u0003}\u0c45\b}\u0001~\u0001"+
		"~\u0001~\u0001~\u0001~\u0001~\u0001~\u0003~\u0c4e\b~\u0001~\u0003~\u0c51"+
		"\b~\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u0c56\b\u007f\u0001"+
		"\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u0c5d"+
		"\b\u0080\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0082\u0001"+
		"\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0003\u0082\u0c68\b\u0082\u0001"+
		"\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001"+
		"\u0082\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0003\u0083\u0c75"+
		"\b\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001"+
		"\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0003"+
		"\u0084\u0c82\b\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001"+
		"\u0084\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001"+
		"\u0085\u0001\u0085\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0003"+
		"\u0086\u0c94\b\u0086\u0001\u0086\u0003\u0086\u0c97\b\u0086\u0001\u0087"+
		"\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087"+
		"\u0003\u0087\u0ca0\b\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087"+
		"\u0001\u0087\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088"+
		"\u0001\u0088\u0001\u0089\u0001\u0089\u0003\u0089\u0caf\b\u0089\u0001\u008a"+
		"\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a"+
		"\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b"+
		"\u0003\u008b\u0cbe\b\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008c"+
		"\u0001\u008c\u0001\u008c\u0001\u008c\u0003\u008c\u0cc7\b\u008c\u0001\u008c"+
		"\u0001\u008c\u0001\u008c\u0001\u008d\u0001\u008d\u0003\u008d\u0cce\b\u008d"+
		"\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0003\u008e"+
		"\u0cd5\b\u008e\u0001\u008f\u0004\u008f\u0cd8\b\u008f\u000b\u008f\f\u008f"+
		"\u0cd9\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001"+
		"\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001"+
		"\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001"+
		"\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001"+
		"\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0003\u0090\u0cf8"+
		"\b\u0090\u0003\u0090\u0cfa\b\u0090\u0001\u0091\u0001\u0091\u0003\u0091"+
		"\u0cfe\b\u0091\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092"+
		"\u0001\u0092\u0003\u0092\u0d06\b\u0092\u0001\u0093\u0001\u0093\u0001\u0093"+
		"\u0005\u0093\u0d0b\b\u0093\n\u0093\f\u0093\u0d0e\t\u0093\u0001\u0094\u0001"+
		"\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001"+
		"\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0003\u0094\u0d1b\b\u0094\u0001"+
		"\u0095\u0001\u0095\u0003\u0095\u0d1f\b\u0095\u0001\u0096\u0001\u0096\u0003"+
		"\u0096\u0d23\b\u0096\u0001\u0097\u0001\u0097\u0001\u0097\u0003\u0097\u0d28"+
		"\b\u0097\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0003\u0098\u0d2e"+
		"\b\u0098\u0001\u0099\u0001\u0099\u0003\u0099\u0d32\b\u0099\u0001\u009a"+
		"\u0001\u009a\u0003\u009a\u0d36\b\u009a\u0001\u009b\u0001\u009b\u0001\u009b"+
		"\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009c"+
		"\u0001\u009c\u0001\u009c\u0003\u009c\u0d43\b\u009c\u0001\u009d\u0001\u009d"+
		"\u0001\u009d\u0001\u009d\u0003\u009d\u0d49\b\u009d\u0001\u009d\u0001\u009d"+
		"\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0003\u009e"+
		"\u0d52\b\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009f"+
		"\u0005\u009f\u0d59\b\u009f\n\u009f\f\u009f\u0d5c\t\u009f\u0001\u00a0\u0001"+
		"\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0003"+
		"\u00a0\u0d65\b\u00a0\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001"+
		"\u00a1\u0001\u00a1\u0001\u00a2\u0005\u00a2\u0d6e\b\u00a2\n\u00a2\f\u00a2"+
		"\u0d71\t\u00a2\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0003\u00a4\u0dde\b\u00a4\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5"+
		"\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a6\u0001\u00a6"+
		"\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6"+
		"\u0003\u00a6\u0df0\b\u00a6\u0001\u00a7\u0004\u00a7\u0df3\b\u00a7\u000b"+
		"\u00a7\f\u00a7\u0df4\u0001\u00a8\u0001\u00a8\u0003\u00a8\u0df9\b\u00a8"+
		"\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9"+
		"\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9"+
		"\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0003\u00a9\u0e0a\b\u00a9\u0001\u00aa"+
		"\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0003\u00aa"+
		"\u0e12\b\u00aa\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0005\u00ab\u0e17\b"+
		"\u00ab\n\u00ab\f\u00ab\u0e1a\t\u00ab\u0001\u00ac\u0001\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0005\u00ad"+
		"\u0e24\b\u00ad\n\u00ad\f\u00ad\u0e27\t\u00ad\u0001\u00ae\u0001\u00ae\u0001"+
		"\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0003\u00ae\u0e30"+
		"\b\u00ae\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00b0\u0001\u00b0\u0001"+
		"\u00b1\u0001\u00b1\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001"+
		"\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001"+
		"\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001"+
		"\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001"+
		"\u00b2\u0001\u00b2\u0001\u00b2\u0003\u00b2\u0e52\b\u00b2\u0001\u00b3\u0001"+
		"\u00b3\u0001\u00b3\u0003\u00b3\u0e57\b\u00b3\u0001\u00b4\u0001\u00b4\u0001"+
		"\u00b4\u0003\u00b4\u0e5c\b\u00b4\u0001\u00b5\u0001\u00b5\u0003\u00b5\u0e60"+
		"\b\u00b5\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001"+
		"\u00b6\u0003\u00b6\u0e68\b\u00b6\u0003\u00b6\u0e6a\b\u00b6\u0001\u00b7"+
		"\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7"+
		"\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7"+
		"\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7"+
		"\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7"+
		"\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7"+
		"\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7"+
		"\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7"+
		"\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7"+
		"\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7"+
		"\u0001\u00b7\u0003\u00b7\u0ea4\b\u00b7\u0001\u00b8\u0001\u00b8\u0001\u00b8"+
		"\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0001\u00b8"+
		"\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0001\u00b9\u0001\u00b9\u0001\u00b9"+
		"\u0003\u00b9\u0eb5\b\u00b9\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba"+
		"\u0001\u00ba\u0001\u00ba\u0003\u00ba\u0ebd\b\u00ba\u0001\u00bb\u0001\u00bb"+
		"\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb"+
		"\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb"+
		"\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb"+
		"\u0001\u00bb\u0003\u00bb\u0ed4\b\u00bb\u0001\u00bc\u0001\u00bc\u0003\u00bc"+
		"\u0ed8\b\u00bc\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd"+
		"\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd"+
		"\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd"+
		"\u0001\u00bd\u0003\u00bd\u0eec\b\u00bd\u0001\u00be\u0001\u00be\u0001\u00be"+
		"\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be"+
		"\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf"+
		"\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00c0"+
		"\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0"+
		"\u0001\u00c0\u0001\u00c0\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0001\u00c1"+
		"\u0001\u00c1\u0001\u00c1\u0003\u00c1\u0f11\b\u00c1\u0001\u00c2\u0001\u00c2"+
		"\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0003\u00c2"+
		"\u0f1a\b\u00c2\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0003\u00c3\u0f1f\b"+
		"\u00c3\u0001\u00c4\u0001\u00c4\u0001\u00c4\u0003\u00c4\u0f24\b\u00c4\u0001"+
		"\u00c5\u0001\u00c5\u0001\u00c5\u0003\u00c5\u0f29\b\u00c5\u0001\u00c6\u0001"+
		"\u00c6\u0001\u00c6\u0003\u00c6\u0f2e\b\u00c6\u0001\u00c7\u0001\u00c7\u0001"+
		"\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001"+
		"\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c9\u0001\u00c9\u0001\u00ca\u0001"+
		"\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001"+
		"\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001"+
		"\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001"+
		"\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001"+
		"\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001"+
		"\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001"+
		"\u00ca\u0003\u00ca\u0f63\b\u00ca\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001"+
		"\u00cb\u0003\u00cb\u0f69\b\u00cb\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0005"+
		"\u00cc\u0f6e\b\u00cc\n\u00cc\f\u00cc\u0f71\t\u00cc\u0001\u00cd\u0001\u00cd"+
		"\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0003\u00cd"+
		"\u0f7a\b\u00cd\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0003\u00ce\u0f7f\b"+
		"\u00ce\u0001\u00cf\u0004\u00cf\u0f82\b\u00cf\u000b\u00cf\f\u00cf\u0f83"+
		"\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d1"+
		"\u0001\u00d1\u0001\u00d2\u0001\u00d2\u0001\u00d3\u0001\u00d3\u0001\u00d4"+
		"\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0003\u00d4\u0f96\b\u00d4"+
		"\u0001\u00d5\u0001\u00d5\u0003\u00d5\u0f9a\b\u00d5\u0001\u00d6\u0001\u00d6"+
		"\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7"+
		"\u0003\u00d7\u0fa4\b\u00d7\u0001\u00d8\u0001\u00d8\u0001\u00d9\u0001\u00d9"+
		"\u0003\u00d9\u0faa\b\u00d9\u0001\u00d9\u0001\u00d9\u0005\u00d9\u0fae\b"+
		"\u00d9\n\u00d9\f\u00d9\u0fb1\t\u00d9\u0001\u00da\u0001\u00da\u0001\u00da"+
		"\u0001\u00da\u0003\u00da\u0fb7\b\u00da\u0001\u00db\u0001\u00db\u0001\u00db"+
		"\u0003\u00db\u0fbc\b\u00db\u0001\u00dc\u0005\u00dc\u0fbf\b\u00dc\n\u00dc"+
		"\f\u00dc\u0fc2\t\u00dc\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd"+
		"\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd"+
		"\u0001\u00dd\u0003\u00dd\u0fcf\b\u00dd\u0001\u00de\u0001\u00de\u0001\u00de"+
		"\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00de"+
		"\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00de"+
		"\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00de"+
		"\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00de\u0003\u00de"+
		"\u0feb\b\u00de\u0001\u00df\u0001\u00df\u0001\u00df\u0005\u00df\u0ff0\b"+
		"\u00df\n\u00df\f\u00df\u0ff3\t\u00df\u0001\u00e0\u0001\u00e0\u0001\u00e0"+
		"\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0005\u00e1\u0ffe\b\u00e1\n\u00e1\f\u00e1\u1001\t\u00e1\u0001\u00e2\u0001"+
		"\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0003\u00e3\u100f"+
		"\b\u00e3\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0003\u00e5\u1084\b\u00e5\u0001\u00e6\u0001\u00e6\u0001"+
		"\u00e6\u0001\u00e6\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0005\u00e7\u108d"+
		"\b\u00e7\n\u00e7\f\u00e7\u1090\t\u00e7\u0001\u00e8\u0001\u00e8\u0001\u00e8"+
		"\u0003\u00e8\u1095\b\u00e8\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9"+
		"\u0001\u00e9\u0001\u00e9\u0003\u00e9\u109d\b\u00e9\u0001\u00ea\u0001\u00ea"+
		"\u0001\u00ea\u0001\u00ea\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0005\u00eb"+
		"\u10a6\b\u00eb\n\u00eb\f\u00eb\u10a9\t\u00eb\u0001\u00ec\u0001\u00ec\u0001"+
		"\u00ec\u0001\u00ec\u0001\u00ed\u0001\u00ed\u0003\u00ed\u10b1\b\u00ed\u0001"+
		"\u00ee\u0001\u00ee\u0001\u00ee\u0005\u00ee\u10b6\b\u00ee\n\u00ee\f\u00ee"+
		"\u10b9\t\u00ee\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef"+
		"\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef"+
		"\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef"+
		"\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef"+
		"\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef"+
		"\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef"+
		"\u0001\u00ef\u0001\u00ef\u0003\u00ef\u10e0\b\u00ef\u0001\u00f0\u0001\u00f0"+
		"\u0001\u00f0\u0001\u00f0\u0003\u00f0\u10e6\b\u00f0\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0005\u00f2\u10f9\b\u00f2\n\u00f2"+
		"\f\u00f2\u10fc\t\u00f2\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3"+
		"\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3"+
		"\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3"+
		"\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3"+
		"\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0003\u00f3\u1117\b\u00f3\u0001\u00f4"+
		"\u0001\u00f4\u0003\u00f4\u111b\b\u00f4\u0001\u00f5\u0001\u00f5\u0001\u00f5"+
		"\u0003\u00f5\u1120\b\u00f5\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f6"+
		"\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0003\u00f6\u1129\b\u00f6\u0001\u00f7"+
		"\u0001\u00f7\u0003\u00f7\u112d\b\u00f7\u0001\u00f8\u0001\u00f8\u0001\u00f8"+
		"\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f9\u0001\u00f9"+
		"\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9"+
		"\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9"+
		"\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0003\u00f9\u1148\b\u00f9"+
		"\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0005\u00fa\u114d\b\u00fa\n\u00fa"+
		"\f\u00fa\u1150\t\u00fa\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb"+
		"\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb"+
		"\u0001\u00fb\u0001\u00fb\u0003\u00fb\u115e\b\u00fb\u0001\u00fc\u0001\u00fc"+
		"\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc"+
		"\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc"+
		"\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0003\u00fc\u1172\b\u00fc"+
		"\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd"+
		"\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd"+
		"\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd"+
		"\u0003\u00fd\u1186\b\u00fd\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe"+
		"\u0001\u00fe\u0001\u00fe\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff"+
		"\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u0100\u0001\u0100\u0001\u0100"+
		"\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100"+
		"\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100"+
		"\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100"+
		"\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100"+
		"\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100"+
		"\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100"+
		"\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100"+
		"\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100"+
		"\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100"+
		"\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100"+
		"\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100"+
		"\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100"+
		"\u0001\u0100\u0001\u0100\u0001\u0100\u0003\u0100\u11e3\b\u0100\u0001\u0101"+
		"\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101"+
		"\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101"+
		"\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101"+
		"\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0003\u0101\u11fc\b\u0101"+
		"\u0001\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0003\u0102"+
		"\u1203\b\u0102\u0001\u0103\u0001\u0103\u0001\u0103\u0001\u0103\u0001\u0103"+
		"\u0001\u0103\u0001\u0103\u0001\u0103\u0001\u0103\u0001\u0103\u0001\u0103"+
		"\u0001\u0103\u0001\u0103\u0001\u0103\u0003\u0103\u1213\b\u0103\u0001\u0104"+
		"\u0001\u0104\u0001\u0105\u0001\u0105\u0001\u0105\u0005\u0105\u121a\b\u0105"+
		"\n\u0105\f\u0105\u121d\t\u0105\u0001\u0106\u0001\u0106\u0003\u0106\u1221"+
		"\b\u0106\u0001\u0107\u0001\u0107\u0004\u0107\u1225\b\u0107\u000b\u0107"+
		"\f\u0107\u1226\u0001\u0108\u0001\u0108\u0001\u0108\u0005\u0108\u122c\b"+
		"\u0108\n\u0108\f\u0108\u122f\t\u0108\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u010a\u0001\u010a\u0001\u010a"+
		"\u0001\u010a\u0001\u010a\u0003\u010a\u123c\b\u010a\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0003\u010b\u12d1\b\u010b\u0001\u010c\u0001\u010c\u0003\u010c"+
		"\u12d5\b\u010c\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d"+
		"\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d"+
		"\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d"+
		"\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d"+
		"\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d"+
		"\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d"+
		"\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d"+
		"\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d"+
		"\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d"+
		"\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d"+
		"\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d"+
		"\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d"+
		"\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d"+
		"\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d"+
		"\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d"+
		"\u0001\u010d\u0001\u010d\u0003\u010d\u1332\b\u010d\u0001\u010e\u0001\u010e"+
		"\u0001\u010e\u0003\u010e\u1337\b\u010e\u0001\u010f\u0001\u010f\u0003\u010f"+
		"\u133b\b\u010f\u0001\u0110\u0001\u0110\u0001\u0110\u0001\u0110\u0003\u0110"+
		"\u1341\b\u0110\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111"+
		"\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111"+
		"\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111"+
		"\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111"+
		"\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111"+
		"\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111"+
		"\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111"+
		"\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111"+
		"\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111"+
		"\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111"+
		"\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111"+
		"\u0001\u0111\u0003\u0111\u1385\b\u0111\u0001\u0112\u0001\u0112\u0001\u0113"+
		"\u0001\u0113\u0003\u0113\u138b\b\u0113\u0001\u0114\u0001\u0114\u0001\u0114"+
		"\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0115"+
		"\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115"+
		"\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115"+
		"\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115"+
		"\u0003\u0115\u13a8\b\u0115\u0001\u0116\u0001\u0116\u0001\u0116\u0001\u0116"+
		"\u0001\u0116\u0001\u0116\u0001\u0116\u0001\u0116\u0001\u0116\u0001\u0116"+
		"\u0001\u0116\u0001\u0116\u0001\u0116\u0001\u0116\u0001\u0116\u0003\u0116"+
		"\u13b9\b\u0116\u0001\u0117\u0001\u0117\u0001\u0117\u0005\u0117\u13be\b"+
		"\u0117\n\u0117\f\u0117\u13c1\t\u0117\u0001\u0118\u0001\u0118\u0001\u0118"+
		"\u0001\u0118\u0001\u0118\u0001\u0118\u0001\u0118\u0001\u0118\u0001\u0118"+
		"\u0003\u0118\u13cc\b\u0118\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119"+
		"\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119"+
		"\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119"+
		"\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119"+
		"\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119"+
		"\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119"+
		"\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119"+
		"\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119"+
		"\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119"+
		"\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119"+
		"\u0003\u0119\u1408\b\u0119\u0001\u011a\u0001\u011a\u0001\u011a\u0005\u011a"+
		"\u140d\b\u011a\n\u011a\f\u011a\u1410\t\u011a\u0001\u011b\u0001\u011b\u0001"+
		"\u011b\u0003\u011b\u1415\b\u011b\u0001\u011c\u0001\u011c\u0001\u011c\u0001"+
		"\u011c\u0003\u011c\u141b\b\u011c\u0001\u011d\u0001\u011d\u0001\u011d\u0001"+
		"\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011e\u0001\u011e\u0001"+
		"\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001"+
		"\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001"+
		"\u011e\u0001\u011e\u0001\u011e\u0003\u011e\u1435\b\u011e\u0001\u011f\u0001"+
		"\u011f\u0001\u011f\u0001\u011f\u0003\u011f\u143b\b\u011f\u0001\u0120\u0001"+
		"\u0120\u0001\u0120\u0001\u0120\u0003\u0120\u1441\b\u0120\u0001\u0121\u0001"+
		"\u0121\u0001\u0121\u0001\u0121\u0001\u0121\u0001\u0121\u0001\u0122\u0005"+
		"\u0122\u144a\b\u0122\n\u0122\f\u0122\u144d\t\u0122\u0001\u0123\u0001\u0123"+
		"\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0123"+
		"\u0001\u0123\u0003\u0123\u1458\b\u0123\u0001\u0124\u0001\u0124\u0001\u0124"+
		"\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0124"+
		"\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0124"+
		"\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0124"+
		"\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0124"+
		"\u0003\u0124\u1475\b\u0124\u0001\u0125\u0001\u0125\u0001\u0126\u0001\u0126"+
		"\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126"+
		"\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126"+
		"\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126"+
		"\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126"+
		"\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126"+
		"\u0001\u0126\u0001\u0126\u0001\u0126\u0003\u0126\u149c\b\u0126\u0001\u0127"+
		"\u0001\u0127\u0003\u0127\u14a0\b\u0127\u0001\u0128\u0001\u0128\u0003\u0128"+
		"\u14a4\b\u0128\u0001\u0129\u0001\u0129\u0003\u0129\u14a8\b\u0129\u0001"+
		"\u012a\u0001\u012a\u0001\u012a\u0003\u012a\u14ad\b\u012a\u0001\u012b\u0001"+
		"\u012b\u0001\u012b\u0005\u012b\u14b2\b\u012b\n\u012b\f\u012b\u14b5\t\u012b"+
		"\u0001\u012c\u0001\u012c\u0001\u012c\u0001\u012c\u0001\u012c\u0001\u012c"+
		"\u0001\u012c\u0001\u012c\u0001\u012c\u0001\u012c\u0001\u012c\u0003\u012c"+
		"\u14c2\b\u012c\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012d"+
		"\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012d"+
		"\u0003\u012d\u14cf\b\u012d\u0001\u012e\u0001\u012e\u0001\u012e\u0001\u012e"+
		"\u0001\u012e\u0001\u012e\u0003\u012e\u14d7\b\u012e\u0001\u012f\u0001\u012f"+
		"\u0001\u012f\u0005\u012f\u14dc\b\u012f\n\u012f\f\u012f\u14df\t\u012f\u0001"+
		"\u0130\u0001\u0130\u0001\u0130\u0003\u0130\u14e4\b\u0130\u0001\u0131\u0001"+
		"\u0131\u0003\u0131\u14e8\b\u0131\u0001\u0132\u0001\u0132\u0001\u0132\u0003"+
		"\u0132\u14ed\b\u0132\u0001\u0133\u0001\u0133\u0001\u0133\u0001\u0133\u0001"+
		"\u0133\u0003\u0133\u14f4\b\u0133\u0001\u0134\u0001\u0134\u0001\u0134\u0001"+
		"\u0134\u0001\u0134\u0001\u0134\u0001\u0134\u0001\u0134\u0001\u0134\u0001"+
		"\u0134\u0001\u0134\u0001\u0134\u0003\u0134\u1502\b\u0134\u0003\u0134\u1504"+
		"\b\u0134\u0001\u0134\u0001\u0134\u0001\u0135\u0001\u0135\u0001\u0135\u0003"+
		"\u0135\u150b\b\u0135\u0001\u0136\u0001\u0136\u0003\u0136\u150f\b\u0136"+
		"\u0001\u0136\u0001\u0136\u0001\u0137\u0001\u0137\u0001\u0137\u0005\u0137"+
		"\u1516\b\u0137\n\u0137\f\u0137\u1519\t\u0137\u0001\u0138\u0001\u0138\u0001"+
		"\u0138\u0005\u0138\u151e\b\u0138\n\u0138\f\u0138\u1521\t\u0138\u0001\u0139"+
		"\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0003\u0139"+
		"\u1529\b\u0139\u0003\u0139\u152b\b\u0139\u0001\u013a\u0001\u013a\u0003"+
		"\u013a\u152f\b\u013a\u0001\u013a\u0001\u013a\u0001\u013b\u0001\u013b\u0001"+
		"\u013b\u0005\u013b\u1536\b\u013b\n\u013b\f\u013b\u1539\t\u013b\u0001\u013c"+
		"\u0001\u013c\u0003\u013c\u153d\b\u013c\u0001\u013c\u0001\u013c\u0001\u013c"+
		"\u0001\u013c\u0003\u013c\u1543\b\u013c\u0001\u013c\u0001\u013c\u0001\u013c"+
		"\u0003\u013c\u1548\b\u013c\u0001\u013d\u0001\u013d\u0003\u013d\u154c\b"+
		"\u013d\u0001\u013d\u0001\u013d\u0001\u013d\u0003\u013d\u1551\b\u013d\u0001"+
		"\u013e\u0001\u013e\u0001\u013e\u0001\u013e\u0003\u013e\u1557\b\u013e\u0001"+
		"\u013f\u0001\u013f\u0001\u0140\u0001\u0140\u0003\u0140\u155d\b\u0140\u0001"+
		"\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0003\u0140\u1563\b\u0140\u0001"+
		"\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0003\u0140\u1569\b\u0140\u0001"+
		"\u0141\u0001\u0141\u0001\u0141\u0003\u0141\u156e\b\u0141\u0001\u0142\u0001"+
		"\u0142\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001"+
		"\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0003"+
		"\u0143\u157d\b\u0143\u0001\u0143\u0001\u0143\u0001\u0144\u0001\u0144\u0001"+
		"\u0144\u0005\u0144\u1584\b\u0144\n\u0144\f\u0144\u1587\t\u0144\u0001\u0145"+
		"\u0001\u0145\u0001\u0145\u0001\u0146\u0001\u0146\u0001\u0146\u0005\u0146"+
		"\u158f\b\u0146\n\u0146\f\u0146\u1592\t\u0146\u0001\u0147\u0004\u0147\u1595"+
		"\b\u0147\u000b\u0147\f\u0147\u1596\u0001\u0147\u0001\u0147\u0001\u0148"+
		"\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148"+
		"\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148"+
		"\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148"+
		"\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148"+
		"\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148"+
		"\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0003\u0148\u15be\b\u0148"+
		"\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149"+
		"\u0001\u0149\u0001\u0149\u0003\u0149\u15c8\b\u0149\u0001\u014a\u0001\u014a"+
		"\u0001\u014a\u0001\u014a\u0001\u014a\u0003\u014a\u15cf\b\u014a\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b"+
		"\u0005\u014b\u15d8\b\u014b\n\u014b\f\u014b\u15db\t\u014b\u0001\u014c\u0001"+
		"\u014c\u0001\u014c\u0003\u014c\u15e0\b\u014c\u0001\u014d\u0001\u014d\u0001"+
		"\u014d\u0001\u014e\u0001\u014e\u0001\u014e\u0005\u014e\u15e8\b\u014e\n"+
		"\u014e\f\u014e\u15eb\t\u014e\u0001\u014f\u0001\u014f\u0001\u014f\u0001"+
		"\u014f\u0001\u014f\u0001\u014f\u0001\u0150\u0004\u0150\u15f4\b\u0150\u000b"+
		"\u0150\f\u0150\u15f5\u0001\u0151\u0001\u0151\u0003\u0151\u15fa\b\u0151"+
		"\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152"+
		"\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152"+
		"\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152"+
		"\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152"+
		"\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152"+
		"\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152"+
		"\u0003\u0152\u1620\b\u0152\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153"+
		"\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153"+
		"\u0001\u0153\u0001\u0153\u0003\u0153\u162e\b\u0153\u0001\u0154\u0001\u0154"+
		"\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154"+
		"\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0003\u0154\u163c\b\u0154"+
		"\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155"+
		"\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155"+
		"\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155"+
		"\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0003\u0155\u1654\b\u0155"+
		"\u0001\u0156\u0001\u0156\u0001\u0156\u0005\u0156\u1659\b\u0156\n\u0156"+
		"\f\u0156\u165c\t\u0156\u0001\u0156\u0001\u0156\u0001\u0157\u0001\u0157"+
		"\u0001\u0157\u0005\u0157\u1663\b\u0157\n\u0157\f\u0157\u1666\t\u0157\u0001"+
		"\u0158\u0001\u0158\u0001\u0158\u0001\u0159\u0001\u0159\u0001\u0159\u0001"+
		"\u015a\u0004\u015a\u166f\b\u015a\u000b\u015a\f\u015a\u1670\u0001\u015b"+
		"\u0001\u015b\u0001\u015b\u0003\u015b\u1676\b\u015b\u0001\u015c\u0001\u015c"+
		"\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c"+
		"\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c"+
		"\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c"+
		"\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c"+
		"\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c"+
		"\u0001\u015c\u0001\u015c\u0003\u015c\u169a\b\u015c\u0001\u015d\u0001\u015d"+
		"\u0001\u015d\u0001\u015d\u0001\u015d\u0003\u015d\u16a1\b\u015d\u0001\u015e"+
		"\u0001\u015e\u0001\u015e\u0001\u015e\u0001\u015e\u0001\u015e\u0001\u015e"+
		"\u0001\u015e\u0001\u015e\u0001\u015e\u0001\u015f\u0001\u015f\u0001\u015f"+
		"\u0003\u015f\u16b0\b\u015f\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160"+
		"\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160"+
		"\u0001\u0160\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161"+
		"\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161"+
		"\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161"+
		"\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161"+
		"\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161"+
		"\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161\u0003\u0161"+
		"\u16df\b\u0161\u0001\u0162\u0001\u0162\u0001\u0162\u0001\u0162\u0001\u0162"+
		"\u0001\u0162\u0001\u0162\u0001\u0162\u0001\u0162\u0001\u0163\u0001\u0163"+
		"\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163"+
		"\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163"+
		"\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163"+
		"\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163"+
		"\u0003\u0163\u1704\b\u0163\u0001\u0164\u0001\u0164\u0001\u0165\u0001\u0165"+
		"\u0001\u0166\u0001\u0166\u0001\u0166\u0005\u0166\u170d\b\u0166\n\u0166"+
		"\f\u0166\u1710\t\u0166\u0001\u0167\u0001\u0167\u0001\u0168\u0001\u0168"+
		"\u0001\u0168\u0001\u0168\u0001\u0168\u0001\u0168\u0001\u0168\u0001\u0168"+
		"\u0001\u0168\u0001\u0168\u0001\u0168\u0001\u0168\u0003\u0168\u1720\b\u0168"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169"+
		"\u0003\u0169\u18f6\b\u0169\u0001\u016a\u0001\u016a\u0003\u016a\u18fa\b"+
		"\u016a\u0001\u016b\u0001\u016b\u0001\u016b\u0003\u016b\u18ff\b\u016b\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0003\u016c\u193a\b\u016c\u0001\u016d\u0001"+
		"\u016d\u0003\u016d\u193e\b\u016d\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0003\u016e\u1a19\b\u016e\u0001"+
		"\u016f\u0001\u016f\u0001\u016f\u0001\u016f\u0001\u016f\u0001\u016f\u0001"+
		"\u016f\u0001\u016f\u0001\u0170\u0001\u0170\u0001\u0170\u0005\u0170\u1a26"+
		"\b\u0170\n\u0170\f\u0170\u1a29\t\u0170\u0001\u0171\u0001\u0171\u0001\u0171"+
		"\u0001\u0171\u0001\u0171\u0001\u0171\u0001\u0171\u0001\u0171\u0003\u0171"+
		"\u1a33\b\u0171\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0003\u0172\u1a3a\b\u0172\u0001\u0173\u0001\u0173\u0001\u0173\u0001\u0173"+
		"\u0001\u0173\u0001\u0173\u0001\u0173\u0001\u0173\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0003\u0174\u1afb\b\u0174\u0001\u0175\u0001\u0175\u0001\u0175"+
		"\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0176\u0001\u0176\u0003\u0176"+
		"\u1b05\b\u0176\u0001\u0177\u0001\u0177\u0001\u0177\u0001\u0177\u0001\u0177"+
		"\u0001\u0177\u0003\u0177\u1b0d\b\u0177\u0001\u0178\u0001\u0178\u0001\u0178"+
		"\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178"+
		"\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178"+
		"\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178"+
		"\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178"+
		"\u0003\u0178\u1b2a\b\u0178\u0001\u0179\u0001\u0179\u0001\u0179\u0001\u0179"+
		"\u0001\u0179\u0001\u0179\u0001\u0179\u0001\u0179\u0001\u0179\u0001\u017a"+
		"\u0001\u017a\u0001\u017a\u0005\u017a\u1b38\b\u017a\n\u017a\f\u017a\u1b3b"+
		"\t\u017a\u0001\u017b\u0001\u017b\u0001\u017c\u0001\u017c\u0001\u017c\u0001"+
		"\u017c\u0001\u017c\u0001\u017c\u0001\u017c\u0001\u017c\u0001\u017c\u0001"+
		"\u017c\u0001\u017c\u0001\u017c\u0001\u017c\u0001\u017c\u0001\u017c\u0001"+
		"\u017c\u0001\u017c\u0001\u017c\u0001\u017c\u0001\u017c\u0001\u017c\u0001"+
		"\u017c\u0001\u017c\u0001\u017c\u0001\u017c\u0001\u017c\u0001\u017c\u0001"+
		"\u017c\u0001\u017c\u0001\u017c\u0001\u017c\u0001\u017c\u0001\u017c\u0001"+
		"\u017c\u0001\u017c\u0001\u017c\u0001\u017c\u0003\u017c\u1b64\b\u017c\u0001"+
		"\u017d\u0001\u017d\u0001\u017d\u0001\u017d\u0001\u017d\u0001\u017d\u0001"+
		"\u017d\u0001\u017d\u0001\u017d\u0001\u017d\u0001\u017d\u0001\u017d\u0003"+
		"\u017d\u1b72\b\u017d\u0001\u017e\u0001\u017e\u0001\u017e\u0001\u017e\u0001"+
		"\u017e\u0001\u017e\u0001\u017e\u0001\u017e\u0001\u017e\u0001\u017e\u0001"+
		"\u017e\u0001\u017e\u0001\u017e\u0001\u017e\u0001\u017f\u0001\u017f\u0001"+
		"\u017f\u0001\u017f\u0001\u017f\u0001\u017f\u0003\u017f\u1b88\b\u017f\u0001"+
		"\u0180\u0001\u0180\u0001\u0180\u0005\u0180\u1b8d\b\u0180\n\u0180\f\u0180"+
		"\u1b90\t\u0180\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0181"+
		"\u0003\u0181\u1b97\b\u0181\u0001\u0182\u0001\u0182\u0003\u0182\u1b9b\b"+
		"\u0182\u0001\u0183\u0001\u0183\u0001\u0184\u0001\u0184\u0001\u0184\u0003"+
		"\u0184\u1ba2\b\u0184\u0001\u0185\u0001\u0185\u0001\u0185\u0001\u0185\u0001"+
		"\u0186\u0001\u0186\u0001\u0186\u0003\u0186\u1bab\b\u0186\u0001\u0187\u0001"+
		"\u0187\u0001\u0187\u0001\u0188\u0001\u0188\u0001\u0188\u0001\u0188\u0003"+
		"\u0188\u1bb4\b\u0188\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001"+
		"\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001"+
		"\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001"+
		"\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001"+
		"\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001"+
		"\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001"+
		"\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001"+
		"\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001"+
		"\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0003\u0189\u1be8\b\u0189\u0001"+
		"\u018a\u0001\u018a\u0001\u018a\u0003\u018a\u1bed\b\u018a\u0001\u018b\u0001"+
		"\u018b\u0001\u018b\u0001\u018b\u0001\u018b\u0001\u018b\u0001\u018b\u0001"+
		"\u018b\u0001\u018b\u0001\u018b\u0003\u018b\u1bf9\b\u018b\u0001\u018c\u0001"+
		"\u018c\u0003\u018c\u1bfd\b\u018c\u0001\u018c\u0005\u018c\u1c00\b\u018c"+
		"\n\u018c\f\u018c\u1c03\t\u018c\u0001\u018d\u0001\u018d\u0003\u018d\u1c07"+
		"\b\u018d\u0001\u018e\u0001\u018e\u0003\u018e\u1c0b\b\u018e\u0001\u018e"+
		"\u0001\u018e\u0003\u018e\u1c0f\b\u018e\u0001\u018f\u0001\u018f\u0001\u018f"+
		"\u0003\u018f\u1c14\b\u018f\u0001\u018f\u0001\u018f\u0001\u018f\u0001\u018f"+
		"\u0001\u018f\u0001\u018f\u0001\u018f\u0001\u018f\u0001\u018f\u0001\u018f"+
		"\u0001\u018f\u0001\u018f\u0001\u018f\u0001\u018f\u0003\u018f\u1c24\b\u018f"+
		"\u0001\u018f\u0001\u018f\u0001\u018f\u0001\u018f\u0001\u0190\u0001\u0190"+
		"\u0003\u0190\u1c2c\b\u0190\u0001\u0190\u0001\u0190\u0001\u0190\u0003\u0190"+
		"\u1c31\b\u0190\u0001\u0191\u0001\u0191\u0001\u0191\u0001\u0192\u0001\u0192"+
		"\u0001\u0192\u0001\u0192\u0001\u0192\u0001\u0192\u0001\u0193\u0001\u0193"+
		"\u0003\u0193\u1c3e\b\u0193\u0001\u0194\u0004\u0194\u1c41\b\u0194\u000b"+
		"\u0194\f\u0194\u1c42\u0001\u0195\u0001\u0195\u0001\u0195\u0001\u0195\u0001"+
		"\u0195\u0003\u0195\u1c4a\b\u0195\u0001\u0196\u0001\u0196\u0001\u0196\u0001"+
		"\u0196\u0001\u0196\u0001\u0196\u0001\u0196\u0001\u0196\u0003\u0196\u1c54"+
		"\b\u0196\u0001\u0197\u0001\u0197\u0003\u0197\u1c58\b\u0197\u0001\u0198"+
		"\u0001\u0198\u0001\u0198\u0001\u0198\u0001\u0198\u0001\u0198\u0001\u0198"+
		"\u0001\u0198\u0001\u0198\u0003\u0198\u1c63\b\u0198\u0001\u0199\u0001\u0199"+
		"\u0001\u0199\u0001\u0199\u0001\u0199\u0001\u019a\u0001\u019a\u0001\u019a"+
		"\u0001\u019a\u0003\u019a\u1c6e\b\u019a\u0001\u019a\u0001\u019a\u0001\u019a"+
		"\u0001\u019a\u0001\u019a\u0001\u019a\u0003\u019a\u1c76\b\u019a\u0001\u019b"+
		"\u0001\u019b\u0001\u019b\u0005\u019b\u1c7b\b\u019b\n\u019b\f\u019b\u1c7e"+
		"\t\u019b\u0001\u019c\u0001\u019c\u0001\u019d\u0001\u019d\u0001\u019d\u0001"+
		"\u019d\u0001\u019d\u0001\u019d\u0001\u019e\u0001\u019e\u0001\u019e\u0001"+
		"\u019e\u0001\u019e\u0001\u019f\u0001\u019f\u0001\u019f\u0001\u019f\u0001"+
		"\u019f\u0001\u019f\u0001\u019f\u0001\u01a0\u0001\u01a0\u0001\u01a0\u0001"+
		"\u01a0\u0001\u01a0\u0001\u01a0\u0001\u01a0\u0001\u01a0\u0001\u01a0\u0001"+
		"\u01a0\u0001\u01a0\u0001\u01a0\u0001\u01a0\u0001\u01a0\u0001\u01a0\u0001"+
		"\u01a0\u0003\u01a0\u1ca4\b\u01a0\u0001\u01a0\u0001\u01a0\u0001\u01a0\u0001"+
		"\u01a0\u0001\u01a0\u0001\u01a0\u0003\u01a0\u1cac\b\u01a0\u0001\u01a1\u0001"+
		"\u01a1\u0003\u01a1\u1cb0\b\u01a1\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001"+
		"\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a3\u0001\u01a3\u0001"+
		"\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001"+
		"\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001"+
		"\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001"+
		"\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001"+
		"\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001"+
		"\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001"+
		"\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001"+
		"\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001"+
		"\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001"+
		"\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001"+
		"\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001"+
		"\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0003\u01a3\u1d01\b\u01a3\u0001"+
		"\u01a4\u0001\u01a4\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001"+
		"\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001"+
		"\u01a5\u0001\u01a6\u0001\u01a6\u0001\u01a6\u0001\u01a6\u0001\u01a6\u0001"+
		"\u01a6\u0001\u01a6\u0001\u01a6\u0001\u01a6\u0001\u01a6\u0001\u01a6\u0001"+
		"\u01a6\u0001\u01a6\u0003\u01a6\u1d1d\b\u01a6\u0001\u01a7\u0001\u01a7\u0001"+
		"\u01a7\u0003\u01a7\u1d22\b\u01a7\u0001\u01a8\u0001\u01a8\u0001\u01a8\u0001"+
		"\u01a8\u0001\u01a8\u0001\u01a8\u0001\u01a8\u0001\u01a8\u0001\u01a8\u0001"+
		"\u01a8\u0001\u01a8\u0001\u01a8\u0001\u01a8\u0003\u01a8\u1d31\b\u01a8\u0001"+
		"\u01a9\u0001\u01a9\u0001\u01a9\u0001\u01a9\u0001\u01a9\u0001\u01a9\u0001"+
		"\u01a9\u0001\u01a9\u0001\u01a9\u0001\u01a9\u0003\u01a9\u1d3d\b\u01a9\u0001"+
		"\u01aa\u0001\u01aa\u0001\u01aa\u0005\u01aa\u1d42\b\u01aa\n\u01aa\f\u01aa"+
		"\u1d45\t\u01aa\u0001\u01ab\u0001\u01ab\u0001\u01ac\u0001\u01ac\u0001\u01ac"+
		"\u0001\u01ad\u0001\u01ad\u0003\u01ad\u1d4e\b\u01ad\u0001\u01ae\u0001\u01ae"+
		"\u0001\u01ae\u0003\u01ae\u1d53\b\u01ae\u0001\u01af\u0001\u01af\u0003\u01af"+
		"\u1d57\b\u01af\u0001\u01b0\u0001\u01b0\u0003\u01b0\u1d5b\b\u01b0\u0001"+
		"\u01b1\u0001\u01b1\u0003\u01b1\u1d5f\b\u01b1\u0001\u01b2\u0001\u01b2\u0003"+
		"\u01b2\u1d63\b\u01b2\u0001\u01b3\u0001\u01b3\u0001\u01b3\u0001\u01b3\u0001"+
		"\u01b3\u0003\u01b3\u1d6a\b\u01b3\u0001\u01b4\u0001\u01b4\u0001\u01b4\u0001"+
		"\u01b5\u0001\u01b5\u0001\u01b5\u0005\u01b5\u1d72\b\u01b5\n\u01b5\f\u01b5"+
		"\u1d75\t\u01b5\u0001\u01b6\u0001\u01b6\u0003\u01b6\u1d79\b\u01b6\u0001"+
		"\u01b7\u0001\u01b7\u0001\u01b7\u0001\u01b7\u0001\u01b7\u0001\u01b7\u0001"+
		"\u01b7\u0001\u01b7\u0001\u01b7\u0001\u01b7\u0001\u01b7\u0001\u01b7\u0001"+
		"\u01b7\u0001\u01b7\u0001\u01b7\u0001\u01b7\u0003\u01b7\u1d8b\b\u01b7\u0001"+
		"\u01b8\u0001\u01b8\u0001\u01b8\u0001\u01b8\u0001\u01b8\u0001\u01b8\u0001"+
		"\u01b8\u0001\u01b8\u0001\u01b8\u0003\u01b8\u1d96\b\u01b8\u0001\u01b9\u0001"+
		"\u01b9\u0001\u01b9\u0005\u01b9\u1d9b\b\u01b9\n\u01b9\f\u01b9\u1d9e\t\u01b9"+
		"\u0001\u01ba\u0001\u01ba\u0001\u01ba\u0001\u01bb\u0001\u01bb\u0003\u01bb"+
		"\u1da5\b\u01bb\u0001\u01bc\u0001\u01bc\u0001\u01bc\u0003\u01bc\u1daa\b"+
		"\u01bc\u0001\u01bd\u0001\u01bd\u0001\u01bd\u0001\u01bd\u0001\u01bd\u0001"+
		"\u01bd\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003"+
		"\u01be\u1db7\b\u01be\u0001\u01bf\u0001\u01bf\u0001\u01bf\u0001\u01bf\u0003"+
		"\u01bf\u1dbd\b\u01bf\u0001\u01c0\u0001\u01c0\u0001\u01c0\u0001\u01c0\u0001"+
		"\u01c0\u0001\u01c0\u0001\u01c0\u0001\u01c0\u0001\u01c0\u0001\u01c0\u0001"+
		"\u01c0\u0001\u01c0\u0001\u01c0\u0001\u01c0\u0001\u01c0\u0001\u01c0\u0001"+
		"\u01c0\u0001\u01c0\u0001\u01c0\u0001\u01c0\u0001\u01c0\u0001\u01c0\u0001"+
		"\u01c0\u0001\u01c0\u0001\u01c0\u0001\u01c0\u0001\u01c0\u0003\u01c0\u1dda"+
		"\b\u01c0\u0001\u01c1\u0001\u01c1\u0001\u01c1\u0001\u01c1\u0001\u01c1\u0003"+
		"\u01c1\u1de1\b\u01c1\u0001\u01c2\u0001\u01c2\u0001\u01c2\u0001\u01c2\u0001"+
		"\u01c2\u0001\u01c2\u0001\u01c2\u0001\u01c2\u0001\u01c2\u0001\u01c2\u0003"+
		"\u01c2\u1ded\b\u01c2\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c4\u0001\u01c4\u0001"+
		"\u01c4\u0003\u01c4\u1dfa\b\u01c4\u0001\u01c5\u0001\u01c5\u0001\u01c5\u0001"+
		"\u01c5\u0001\u01c5\u0001\u01c5\u0001\u01c5\u0001\u01c5\u0001\u01c5\u0001"+
		"\u01c5\u0001\u01c5\u0001\u01c5\u0001\u01c5\u0003\u01c5\u1e09\b\u01c5\u0001"+
		"\u01c5\u0001\u01c5\u0001\u01c5\u0001\u01c5\u0003\u01c5\u1e0f\b\u01c5\u0001"+
		"\u01c6\u0001\u01c6\u0001\u01c7\u0001\u01c7\u0001\u01c7\u0005\u01c7\u1e16"+
		"\b\u01c7\n\u01c7\f\u01c7\u1e19\t\u01c7\u0001\u01c8\u0001\u01c8\u0001\u01c8"+
		"\u0001\u01c9\u0001\u01c9\u0001\u01c9\u0001\u01c9\u0001\u01c9\u0001\u01c9"+
		"\u0001\u01c9\u0001\u01c9\u0001\u01c9\u0001\u01c9\u0003\u01c9\u1e28\b\u01c9"+
		"\u0001\u01c9\u0003\u01c9\u1e2b\b\u01c9\u0001\u01ca\u0001\u01ca\u0001\u01ca"+
		"\u0001\u01ca\u0001\u01ca\u0001\u01ca\u0001\u01ca\u0001\u01ca\u0001\u01ca"+
		"\u0003\u01ca\u1e36\b\u01ca\u0001\u01cb\u0001\u01cb\u0001\u01cb\u0003\u01cb"+
		"\u1e3b\b\u01cb\u0001\u01cc\u0001\u01cc\u0003\u01cc\u1e3f\b\u01cc\u0001"+
		"\u01cc\u0001\u01cc\u0003\u01cc\u1e43\b\u01cc\u0001\u01cc\u0001\u01cc\u0001"+
		"\u01cc\u0003\u01cc\u1e48\b\u01cc\u0001\u01cc\u0003\u01cc\u1e4b\b\u01cc"+
		"\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0003\u01cc\u1e51\b\u01cc"+
		"\u0001\u01cc\u0001\u01cc\u0003\u01cc\u1e55\b\u01cc\u0003\u01cc\u1e57\b"+
		"\u01cc\u0001\u01cc\u0003\u01cc\u1e5a\b\u01cc\u0001\u01cd\u0001\u01cd\u0001"+
		"\u01cd\u0001\u01cd\u0001\u01cd\u0003\u01cd\u1e61\b\u01cd\u0001\u01cd\u0003"+
		"\u01cd\u1e64\b\u01cd\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0001"+
		"\u01cd\u0003\u01cd\u1e6b\b\u01cd\u0001\u01cd\u0001\u01cd\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0003\u01ce\u1e73\b\u01ce\u0001\u01ce\u0003"+
		"\u01ce\u1e76\b\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01cf\u0001\u01cf\u0001\u01cf\u0003\u01cf\u1e7f\b\u01cf\u0001\u01cf\u0001"+
		"\u01cf\u0001\u01d0\u0001\u01d0\u0001\u01d0\u0001\u01d0\u0001\u01d0\u0001"+
		"\u01d0\u0001\u01d0\u0001\u01d0\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0003"+
		"\u01d1\u1e8e\b\u01d1\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0001"+
		"\u01d2\u0001\u01d2\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001"+
		"\u01d3\u0003\u01d3\u1e9b\b\u01d3\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001"+
		"\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0003"+
		"\u01d4\u1ea6\b\u01d4\u0001\u01d4\u0003\u01d4\u1ea9\b\u01d4\u0001\u01d5"+
		"\u0001\u01d5\u0003\u01d5\u1ead\b\u01d5\u0001\u01d6\u0001\u01d6\u0001\u01d6"+
		"\u0001\u01d6\u0003\u01d6\u1eb3\b\u01d6\u0001\u01d7\u0001\u01d7\u0001\u01d7"+
		"\u0001\u01d7\u0001\u01d7\u0001\u01d7\u0001\u01d7\u0001\u01d7\u0001\u01d7"+
		"\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0005\u01d8\u1ec1\b\u01d8\n\u01d8"+
		"\f\u01d8\u1ec4\t\u01d8\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0001\u01d9"+
		"\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0001\u01d9"+
		"\u0003\u01d9\u1ed0\b\u01d9\u0001\u01da\u0001\u01da\u0001\u01da\u0001\u01db"+
		"\u0001\u01db\u0001\u01db\u0005\u01db\u1ed8\b\u01db\n\u01db\f\u01db\u1edb"+
		"\t\u01db\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0001"+
		"\u01dc\u0001\u01dc\u0001\u01dc\u0001\u01dd\u0001\u01dd\u0001\u01de\u0001"+
		"\u01de\u0001\u01de\u0001\u01de\u0001\u01de\u0005\u01de\u1eec\b\u01de\n"+
		"\u01de\f\u01de\u1eef\t\u01de\u0001\u01df\u0001\u01df\u0001\u01df\u0001"+
		"\u01df\u0001\u01df\u0003\u01df\u1ef6\b\u01df\u0001\u01e0\u0001\u01e0\u0003"+
		"\u01e0\u1efa\b\u01e0\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0003\u01e1\u1f04\b\u01e1\u0001"+
		"\u01e2\u0001\u01e2\u0001\u01e2\u0001\u01e2\u0001\u01e2\u0001\u01e2\u0001"+
		"\u01e2\u0001\u01e2\u0003\u01e2\u1f0e\b\u01e2\u0001\u01e2\u0001\u01e2\u0001"+
		"\u01e2\u0001\u01e2\u0001\u01e2\u0001\u01e2\u0001\u01e2\u0001\u01e2\u0001"+
		"\u01e2\u0003\u01e2\u1f19\b\u01e2\u0003\u01e2\u1f1b\b\u01e2\u0001\u01e3"+
		"\u0001\u01e3\u0003\u01e3\u1f1f\b\u01e3\u0001\u01e4\u0001\u01e4\u0001\u01e4"+
		"\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0003\u01e4"+
		"\u1f29\b\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e4"+
		"\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e4"+
		"\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0003\u01e4\u1f39\b\u01e4\u0003\u01e4"+
		"\u1f3b\b\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0003\u01e4\u1f40\b"+
		"\u01e4\u0005\u01e4\u1f42\b\u01e4\n\u01e4\f\u01e4\u1f45\t\u01e4\u0001\u01e5"+
		"\u0001\u01e5\u0001\u01e5\u0003\u01e5\u1f4a\b\u01e5\u0001\u01e6\u0001\u01e6"+
		"\u0001\u01e6\u0001\u01e7\u0001\u01e7\u0003\u01e7\u1f51\b\u01e7\u0001\u01e7"+
		"\u0001\u01e7\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0005\u01e8\u1f58\b\u01e8"+
		"\n\u01e8\f\u01e8\u1f5b\t\u01e8\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001"+
		"\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01e9\u0001\u01ea\u0001"+
		"\u01ea\u0001\u01ea\u0001\u01ea\u0003\u01ea\u1f69\b\u01ea\u0001\u01eb\u0001"+
		"\u01eb\u0003\u01eb\u1f6d\b\u01eb\u0001\u01ec\u0001\u01ec\u0001\u01ec\u0001"+
		"\u01ec\u0001\u01ec\u0003\u01ec\u1f74\b\u01ec\u0001\u01ec\u0003\u01ec\u1f77"+
		"\b\u01ec\u0001\u01ed\u0001\u01ed\u0003\u01ed\u1f7b\b\u01ed\u0001\u01ee"+
		"\u0003\u01ee\u1f7e\b\u01ee\u0001\u01ee\u0001\u01ee\u0001\u01ee\u0001\u01ee"+
		"\u0001\u01ee\u0001\u01ee\u0001\u01ee\u0001\u01ee\u0001\u01ee\u0001\u01ee"+
		"\u0001\u01ee\u0003\u01ee\u1f8b\b\u01ee\u0001\u01ef\u0001\u01ef\u0003\u01ef"+
		"\u1f8f\b\u01ef\u0001\u01f0\u0001\u01f0\u0001\u01f0\u0003\u01f0\u1f94\b"+
		"\u01f0\u0001\u01f1\u0001\u01f1\u0001\u01f1\u0001\u01f1\u0001\u01f1\u0001"+
		"\u01f1\u0003\u01f1\u1f9c\b\u01f1\u0001\u01f2\u0001\u01f2\u0003\u01f2\u1fa0"+
		"\b\u01f2\u0001\u01f3\u0001\u01f3\u0003\u01f3\u1fa4\b\u01f3\u0001\u01f4"+
		"\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f5\u0001\u01f5\u0001\u01f5"+
		"\u0005\u01f5\u1fad\b\u01f5\n\u01f5\f\u01f5\u1fb0\t\u01f5\u0001\u01f6\u0001"+
		"\u01f6\u0001\u01f6\u0001\u01f6\u0003\u01f6\u1fb6\b\u01f6\u0001\u01f6\u0001"+
		"\u01f6\u0001\u01f7\u0001\u01f7\u0003\u01f7\u1fbc\b\u01f7\u0001\u01f7\u0001"+
		"\u01f7\u0003\u01f7\u1fc0\b\u01f7\u0003\u01f7\u1fc2\b\u01f7\u0001\u01f8"+
		"\u0001\u01f8\u0003\u01f8\u1fc6\b\u01f8\u0001\u01f9\u0001\u01f9\u0001\u01f9"+
		"\u0001\u01f9\u0003\u01f9\u1fcc\b\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9"+
		"\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0003\u01f9\u1fd5\b\u01f9"+
		"\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0003\u01f9\u1fdb\b\u01f9"+
		"\u0003\u01f9\u1fdd\b\u01f9\u0003\u01f9\u1fdf\b\u01f9\u0001\u01fa\u0001"+
		"\u01fa\u0001\u01fa\u0001\u01fa\u0001\u01fa\u0003\u01fa\u1fe6\b\u01fa\u0001"+
		"\u01fb\u0001\u01fb\u0003\u01fb\u1fea\b\u01fb\u0001\u01fc\u0001\u01fc\u0001"+
		"\u01fd\u0001\u01fd\u0001\u01fd\u0001\u01fd\u0001\u01fd\u0003\u01fd\u1ff3"+
		"\b\u01fd\u0001\u01fe\u0001\u01fe\u0003\u01fe\u1ff7\b\u01fe\u0001\u01ff"+
		"\u0001\u01ff\u0001\u0200\u0001\u0200\u0001\u0201\u0001\u0201\u0001\u0201"+
		"\u0001\u0201\u0003\u0201\u2001\b\u0201\u0001\u0202\u0001\u0202\u0001\u0202"+
		"\u0005\u0202\u2006\b\u0202\n\u0202\f\u0202\u2009\t\u0202\u0001\u0203\u0001"+
		"\u0203\u0001\u0203\u0001\u0203\u0001\u0203\u0003\u0203\u2010\b\u0203\u0001"+
		"\u0204\u0001\u0204\u0001\u0204\u0001\u0205\u0001\u0205\u0001\u0205\u0001"+
		"\u0205\u0001\u0205\u0001\u0206\u0001\u0206\u0001\u0206\u0001\u0206\u0001"+
		"\u0206\u0001\u0207\u0001\u0207\u0001\u0207\u0001\u0207\u0001\u0207\u0001"+
		"\u0207\u0001\u0208\u0001\u0208\u0001\u0208\u0003\u0208\u2028\b\u0208\u0001"+
		"\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0003\u0209\u202e\b\u0209\u0001"+
		"\u020a\u0001\u020a\u0003\u020a\u2032\b\u020a\u0001\u020b\u0004\u020b\u2035"+
		"\b\u020b\u000b\u020b\f\u020b\u2036\u0001\u020c\u0001\u020c\u0001\u020c"+
		"\u0001\u020c\u0001\u020d\u0001\u020d\u0001\u020d\u0003\u020d\u2040\b\u020d"+
		"\u0001\u020d\u0001\u020d\u0003\u020d\u2044\b\u020d\u0001\u020d\u0003\u020d"+
		"\u2047\b\u020d\u0001\u020e\u0001\u020e\u0001\u020e\u0003\u020e\u204c\b"+
		"\u020e\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001"+
		"\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0005\u020f\u2057\b\u020f\n"+
		"\u020f\f\u020f\u205a\t\u020f\u0001\u0210\u0001\u0210\u0001\u0210\u0003"+
		"\u0210\u205f\b\u0210\u0001\u0211\u0001\u0211\u0001\u0211\u0001\u0211\u0005"+
		"\u0211\u2065\b\u0211\n\u0211\f\u0211\u2068\t\u0211\u0003\u0211\u206a\b"+
		"\u0211\u0001\u0212\u0001\u0212\u0001\u0212\u0004\u0212\u206f\b\u0212\u000b"+
		"\u0212\f\u0212\u2070\u0001\u0213\u0001\u0213\u0001\u0213\u0003\u0213\u2076"+
		"\b\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0001"+
		"\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0001"+
		"\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0001"+
		"\u0213\u0001\u0213\u0003\u0213\u208b\b\u0213\u0001\u0213\u0001\u0213\u0001"+
		"\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0003\u0213\u2094"+
		"\b\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0003\u0213\u2099\b\u0213"+
		"\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0003\u0213\u209f\b\u0213"+
		"\u0001\u0213\u0001\u0213\u0001\u0213\u0003\u0213\u20a4\b\u0213\u0001\u0213"+
		"\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0003\u0213\u20ab\b\u0213"+
		"\u0001\u0213\u0001\u0213\u0001\u0213\u0003\u0213\u20b0\b\u0213\u0001\u0213"+
		"\u0001\u0213\u0001\u0213\u0001\u0213\u0005\u0213\u20b6\b\u0213\n\u0213"+
		"\f\u0213\u20b9\t\u0213\u0001\u0214\u0003\u0214\u20bc\b\u0214\u0001\u0214"+
		"\u0001\u0214\u0001\u0214\u0001\u0214\u0001\u0214\u0003\u0214\u20c3\b\u0214"+
		"\u0001\u0215\u0001\u0215\u0003\u0215\u20c7\b\u0215\u0001\u0216\u0003\u0216"+
		"\u20ca\b\u0216\u0001\u0216\u0001\u0216\u0001\u0216\u0001\u0216\u0001\u0216"+
		"\u0003\u0216\u20d1\b\u0216\u0001\u0217\u0001\u0217\u0001\u0217\u0003\u0217"+
		"\u20d6\b\u0217\u0001\u0217\u0003\u0217\u20d9\b\u0217\u0001\u0217\u0001"+
		"\u0217\u0001\u0217\u0001\u0217\u0001\u0217\u0003\u0217\u20e0\b\u0217\u0001"+
		"\u0218\u0001\u0218\u0003\u0218\u20e4\b\u0218\u0001\u0219\u0001\u0219\u0001"+
		"\u0219\u0001\u0219\u0001\u0219\u0001\u0219\u0001\u0219\u0003\u0219\u20ed"+
		"\b\u0219\u0001\u021a\u0001\u021a\u0003\u021a\u20f1\b\u021a\u0001\u021a"+
		"\u0001\u021a\u0001\u021a\u0001\u021a\u0001\u021a\u0001\u021a\u0003\u021a"+
		"\u20f9\b\u021a\u0003\u021a\u20fb\b\u021a\u0001\u021b\u0001\u021b\u0001"+
		"\u021b\u0005\u021b\u2100\b\u021b\n\u021b\f\u021b\u2103\t\u021b\u0001\u021c"+
		"\u0001\u021c\u0003\u021c\u2107\b\u021c\u0001\u021c\u0003\u021c\u210a\b"+
		"\u021c\u0001\u021d\u0001\u021d\u0001\u021d\u0001\u021d\u0001\u021d\u0001"+
		"\u021d\u0001\u021d\u0001\u021e\u0001\u021e\u0001\u021e\u0001\u021e\u0001"+
		"\u021e\u0001\u021e\u0003\u021e\u2119\b\u021e\u0001\u021f\u0001\u021f\u0001"+
		"\u021f\u0001\u021f\u0001\u021f\u0001\u021f\u0001\u021f\u0001\u021f\u0001"+
		"\u021f\u0001\u021f\u0003\u021f\u2125\b\u021f\u0001\u0220\u0001\u0220\u0001"+
		"\u0220\u0001\u0221\u0001\u0221\u0001\u0221\u0005\u0221\u212d\b\u0221\n"+
		"\u0221\f\u0221\u2130\t\u0221\u0001\u0222\u0001\u0222\u0001\u0222\u0001"+
		"\u0222\u0001\u0222\u0001\u0222\u0003\u0222\u2138\b\u0222\u0001\u0223\u0001"+
		"\u0223\u0001\u0223\u0003\u0223\u213d\b\u0223\u0001\u0224\u0001\u0224\u0001"+
		"\u0224\u0003\u0224\u2142\b\u0224\u0001\u0225\u0001\u0225\u0001\u0225\u0001"+
		"\u0225\u0001\u0225\u0003\u0225\u2149\b\u0225\u0001\u0225\u0003\u0225\u214c"+
		"\b\u0225\u0001\u0226\u0001\u0226\u0003\u0226\u2150\b\u0226\u0001\u0227"+
		"\u0001\u0227\u0001\u0227\u0005\u0227\u2155\b\u0227\n\u0227\f\u0227\u2158"+
		"\t\u0227\u0001\u0228\u0001\u0228\u0001\u0228\u0001\u0228\u0001\u0229\u0001"+
		"\u0229\u0001\u0229\u0001\u0229\u0001\u0229\u0001\u0229\u0001\u0229\u0001"+
		"\u0229\u0001\u0229\u0001\u0229\u0001\u0229\u0001\u0229\u0001\u0229\u0001"+
		"\u0229\u0001\u0229\u0001\u0229\u0001\u0229\u0003\u0229\u216f\b\u0229\u0001"+
		"\u0229\u0001\u0229\u0001\u022a\u0001\u022a\u0001\u022a\u0005\u022a\u2176"+
		"\b\u022a\n\u022a\f\u022a\u2179\t\u022a\u0001\u022b\u0001\u022b\u0001\u022b"+
		"\u0003\u022b\u217e\b\u022b\u0001\u022b\u0001\u022b\u0003\u022b\u2182\b"+
		"\u022b\u0001\u022c\u0004\u022c\u2185\b\u022c\u000b\u022c\f\u022c\u2186"+
		"\u0001\u022d\u0001\u022d\u0001\u022d\u0001\u022d\u0001\u022d\u0001\u022d"+
		"\u0001\u022d\u0001\u022d\u0003\u022d\u2191\b\u022d\u0001\u022e\u0001\u022e"+
		"\u0001\u022e\u0005\u022e\u2196\b\u022e\n\u022e\f\u022e\u2199\t\u022e\u0001"+
		"\u022f\u0001\u022f\u0001\u022f\u0001\u022f\u0001\u022f\u0001\u022f\u0003"+
		"\u022f\u21a1\b\u022f\u0001\u0230\u0003\u0230\u21a4\b\u0230\u0001\u0230"+
		"\u0001\u0230\u0001\u0230\u0001\u0230\u0001\u0230\u0001\u0230\u0001\u0230"+
		"\u0003\u0230\u21ad\b\u0230\u0003\u0230\u21af\b\u0230\u0001\u0230\u0001"+
		"\u0230\u0001\u0230\u0001\u0230\u0003\u0230\u21b5\b\u0230\u0001\u0231\u0001"+
		"\u0231\u0003\u0231\u21b9\b\u0231\u0001\u0231\u0005\u0231\u21bc\b\u0231"+
		"\n\u0231\f\u0231\u21bf\t\u0231\u0001\u0232\u0001\u0232\u0001\u0232\u0001"+
		"\u0232\u0001\u0232\u0001\u0232\u0001\u0232\u0001\u0232\u0001\u0232\u0001"+
		"\u0232\u0001\u0232\u0003\u0232\u21cc\b\u0232\u0003\u0232\u21ce\b\u0232"+
		"\u0001\u0233\u0001\u0233\u0001\u0233\u0001\u0233\u0003\u0233\u21d4\b\u0233"+
		"\u0001\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0003\u0234\u21da\b\u0234"+
		"\u0001\u0234\u0003\u0234\u21dd\b\u0234\u0001\u0234\u0001\u0234\u0001\u0235"+
		"\u0001\u0235\u0001\u0235\u0001\u0235\u0001\u0235\u0003\u0235\u21e6\b\u0235"+
		"\u0001\u0236\u0001\u0236\u0001\u0236\u0001\u0236\u0001\u0236\u0001\u0236"+
		"\u0001\u0236\u0001\u0236\u0001\u0236\u0001\u0236\u0001\u0236\u0001\u0236"+
		"\u0001\u0236\u0001\u0236\u0001\u0236\u0001\u0236\u0003\u0236\u21f8\b\u0236"+
		"\u0001\u0237\u0001\u0237\u0001\u0237\u0001\u0237\u0001\u0237\u0003\u0237"+
		"\u21ff\b\u0237\u0001\u0238\u0001\u0238\u0003\u0238\u2203\b\u0238\u0001"+
		"\u0239\u0001\u0239\u0003\u0239\u2207\b\u0239\u0001\u023a\u0001\u023a\u0001"+
		"\u023a\u0001\u023a\u0001\u023a\u0001\u023a\u0001\u023b\u0001\u023b\u0001"+
		"\u023b\u0001\u023c\u0001\u023c\u0001\u023c\u0001\u023c\u0001\u023c\u0003"+
		"\u023c\u2217\b\u023c\u0001\u023d\u0001\u023d\u0001\u023d\u0001\u023d\u0001"+
		"\u023d\u0003\u023d\u221e\b\u023d\u0001\u023e\u0001\u023e\u0001\u023e\u0001"+
		"\u023e\u0001\u023e\u0001\u023e\u0003\u023e\u2226\b\u023e\u0001\u023f\u0001"+
		"\u023f\u0003\u023f\u222a\b\u023f\u0001\u0240\u0001\u0240\u0001\u0240\u0001"+
		"\u0240\u0001\u0240\u0003\u0240\u2231\b\u0240\u0001\u0240\u0001\u0240\u0001"+
		"\u0241\u0001\u0241\u0001\u0242\u0001\u0242\u0001\u0242\u0001\u0242\u0001"+
		"\u0242\u0001\u0242\u0001\u0242\u0003\u0242\u223e\b\u0242\u0001\u0243\u0001"+
		"\u0243\u0001\u0243\u0001\u0243\u0001\u0243\u0001\u0243\u0001\u0243\u0001"+
		"\u0243\u0001\u0243\u0001\u0243\u0001\u0243\u0001\u0243\u0001\u0243\u0001"+
		"\u0243\u0003\u0243\u224e\b\u0243\u0001\u0243\u0001\u0243\u0001\u0243\u0001"+
		"\u0243\u0003\u0243\u2254\b\u0243\u0001\u0243\u0001\u0243\u0001\u0243\u0001"+
		"\u0243\u0003\u0243\u225a\b\u0243\u0001\u0244\u0001\u0244\u0001\u0244\u0001"+
		"\u0244\u0001\u0244\u0003\u0244\u2261\b\u0244\u0001\u0245\u0001\u0245\u0001"+
		"\u0245\u0003\u0245\u2266\b\u0245\u0001\u0246\u0001\u0246\u0001\u0247\u0001"+
		"\u0247\u0003\u0247\u226c\b\u0247\u0001\u0248\u0001\u0248\u0001\u0248\u0005"+
		"\u0248\u2271\b\u0248\n\u0248\f\u0248\u2274\t\u0248\u0001\u0249\u0001\u0249"+
		"\u0001\u0249\u0005\u0249\u2279\b\u0249\n\u0249\f\u0249\u227c\t\u0249\u0001"+
		"\u024a\u0001\u024a\u0001\u024a\u0005\u024a\u2281\b\u024a\n\u024a\f\u024a"+
		"\u2284\t\u024a\u0001\u024b\u0001\u024b\u0003\u024b\u2288\b\u024b\u0001"+
		"\u024b\u0001\u024b\u0003\u024b\u228c\b\u024b\u0001\u024b\u0001\u024b\u0001"+
		"\u024b\u0001\u024b\u0003\u024b\u2292\b\u024b\u0001\u024c\u0001\u024c\u0003"+
		"\u024c\u2296\b\u024c\u0001\u024c\u0001\u024c\u0003\u024c\u229a\b\u024c"+
		"\u0001\u024d\u0003\u024d\u229d\b\u024d\u0001\u024d\u0001\u024d\u0001\u024e"+
		"\u0001\u024e\u0003\u024e\u22a3\b\u024e\u0001\u024f\u0001\u024f\u0001\u024f"+
		"\u0003\u024f\u22a8\b\u024f\u0001\u024f\u0001\u024f\u0001\u024f\u0001\u024f"+
		"\u0001\u024f\u0001\u024f\u0001\u024f\u0001\u024f\u0001\u024f\u0001\u024f"+
		"\u0001\u024f\u0001\u024f\u0001\u024f\u0001\u024f\u0003\u024f\u22b8\b\u024f"+
		"\u0001\u024f\u0003\u024f\u22bb\b\u024f\u0003\u024f\u22bd\b\u024f\u0001"+
		"\u0250\u0001\u0250\u0001\u0250\u0001\u0250\u0001\u0250\u0001\u0250\u0001"+
		"\u0250\u0001\u0250\u0001\u0250\u0001\u0250\u0003\u0250\u22c9\b\u0250\u0003"+
		"\u0250\u22cb\b\u0250\u0001\u0251\u0001\u0251\u0003\u0251\u22cf\b\u0251"+
		"\u0001\u0251\u0001\u0251\u0001\u0251\u0001\u0251\u0003\u0251\u22d5\b\u0251"+
		"\u0001\u0251\u0001\u0251\u0001\u0251\u0003\u0251\u22da\b\u0251\u0001\u0252"+
		"\u0001\u0252\u0001\u0252\u0001\u0252\u0005\u0252\u22e0\b\u0252\n\u0252"+
		"\f\u0252\u22e3\t\u0252\u0001\u0253\u0003\u0253\u22e6\b\u0253\u0001\u0253"+
		"\u0001\u0253\u0001\u0254\u0001\u0254\u0001\u0254\u0005\u0254\u22ed\b\u0254"+
		"\n\u0254\f\u0254\u22f0\t\u0254\u0001\u0255\u0001\u0255\u0001\u0255\u0005"+
		"\u0255\u22f5\b\u0255\n\u0255\f\u0255\u22f8\t\u0255\u0001\u0256\u0001\u0256"+
		"\u0001\u0256\u0003\u0256\u22fd\b\u0256\u0001\u0257\u0003\u0257\u2300\b"+
		"\u0257\u0001\u0257\u0001\u0257\u0001\u0258\u0001\u0258\u0001\u0258\u0001"+
		"\u0258\u0001\u0258\u0003\u0258\u2309\b\u0258\u0001\u0259\u0001\u0259\u0001"+
		"\u0259\u0003\u0259\u230e\b\u0259\u0001\u025a\u0001\u025a\u0001\u025a\u0005"+
		"\u025a\u2313\b\u025a\n\u025a\f\u025a\u2316\t\u025a\u0001\u025b\u0001\u025b"+
		"\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0003\u025b"+
		"\u231f\b\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b"+
		"\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b"+
		"\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b"+
		"\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b"+
		"\u0001\u025b\u0003\u025b\u2339\b\u025b\u0001\u025b\u0001\u025b\u0001\u025b"+
		"\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b"+
		"\u0003\u025b\u2344\b\u025b\u0005\u025b\u2346\b\u025b\n\u025b\f\u025b\u2349"+
		"\t\u025b\u0001\u025c\u0001\u025c\u0001\u025c\u0001\u025c\u0001\u025c\u0003"+
		"\u025c\u2350\b\u025c\u0001\u025c\u0001\u025c\u0001\u025c\u0001\u025c\u0001"+
		"\u025c\u0001\u025c\u0001\u025c\u0001\u025c\u0001\u025c\u0001\u025c\u0001"+
		"\u025c\u0001\u025c\u0001\u025c\u0001\u025c\u0001\u025c\u0001\u025c\u0001"+
		"\u025c\u0001\u025c\u0001\u025c\u0001\u025c\u0001\u025c\u0003\u025c\u2367"+
		"\b\u025c\u0001\u025c\u0001\u025c\u0001\u025c\u0001\u025c\u0001\u025c\u0001"+
		"\u025c\u0003\u025c\u236f\b\u025c\u0001\u025d\u0001\u025d\u0001\u025e\u0001"+
		"\u025e\u0001\u025e\u0001\u025e\u0001\u025e\u0001\u025e\u0003\u025e\u2379"+
		"\b\u025e\u0001\u025e\u0001\u025e\u0001\u025e\u0001\u025e\u0001\u025e\u0001"+
		"\u025e\u0001\u025e\u0001\u025e\u0001\u025e\u0001\u025e\u0001\u025e\u0001"+
		"\u025e\u0003\u025e\u2387\b\u025e\u0001\u025e\u0001\u025e\u0001\u025f\u0001"+
		"\u025f\u0001\u025f\u0001\u025f\u0001\u025f\u0001\u025f\u0003\u025f\u2391"+
		"\b\u025f\u0001\u0260\u0001\u0260\u0003\u0260\u2395\b\u0260\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0003\u0261"+
		"\u23a3\b\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0003\u0261\u23aa\b\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0003\u0261\u23b1\b\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0003\u0261\u23b8\b\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0003\u0261\u23d1\b\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0003\u0261\u23ee\b\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0003\u0261"+
		"\u2415\b\u0261\u0003\u0261\u2417\b\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0003"+
		"\u0261\u2433\b\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0003\u0261\u2448\b\u0261\u0001\u0262\u0001"+
		"\u0262\u0001\u0262\u0001\u0262\u0001\u0262\u0003\u0262\u244f\b\u0262\u0001"+
		"\u0263\u0001\u0263\u0001\u0263\u0001\u0263\u0001\u0263\u0001\u0263\u0001"+
		"\u0263\u0001\u0263\u0001\u0263\u0001\u0263\u0001\u0263\u0003\u0263\u245c"+
		"\b\u0263\u0001\u0264\u0001\u0264\u0001\u0264\u0001\u0264\u0001\u0264\u0001"+
		"\u0265\u0001\u0265\u0001\u0265\u0005\u0265\u2466\b\u0265\n\u0265\f\u0265"+
		"\u2469\t\u0265\u0001\u0266\u0001\u0266\u0001\u0266\u0003\u0266\u246e\b"+
		"\u0266\u0001\u0267\u0001\u0267\u0001\u0268\u0001\u0268\u0001\u0268\u0001"+
		"\u0268\u0001\u0268\u0003\u0268\u2477\b\u0268\u0001\u0269\u0001\u0269\u0001"+
		"\u0269\u0001\u0269\u0001\u0269\u0001\u0269\u0001\u0269\u0001\u0269\u0001"+
		"\u0269\u0001\u0269\u0001\u0269\u0001\u0269\u0001\u0269\u0001\u0269\u0001"+
		"\u0269\u0003\u0269\u2488\b\u0269\u0001\u026a\u0001\u026a\u0001\u026a\u0001"+
		"\u026b\u0001\u026b\u0001\u026b\u0001\u026b\u0001\u026b\u0001\u026b\u0001"+
		"\u026b\u0003\u026b\u2494\b\u026b\u0001\u026c\u0001\u026c\u0001\u026c\u0001"+
		"\u026c\u0001\u026c\u0001\u026c\u0001\u026c\u0003\u026c\u249d\b\u026c\u0001"+
		"\u026d\u0001\u026d\u0001\u026d\u0003\u026d\u24a2\b\u026d\u0001\u026e\u0001"+
		"\u026e\u0001\u026e\u0005\u026e\u24a7\b\u026e\n\u026e\f\u026e\u24aa\t\u026e"+
		"\u0001\u026f\u0001\u026f\u0001\u026f\u0001\u026f\u0001\u0270\u0001\u0270"+
		"\u0001\u0270\u0003\u0270\u24b3\b\u0270\u0001\u0270\u0003\u0270\u24b6\b"+
		"\u0270\u0001\u0271\u0001\u0271\u0001\u0271\u0001\u0271\u0001\u0271\u0001"+
		"\u0271\u0001\u0271\u0001\u0272\u0001\u0272\u0003\u0272\u24c1\b\u0272\u0001"+
		"\u0273\u0001\u0273\u0001\u0273\u0001\u0273\u0003\u0273\u24c7\b\u0273\u0001"+
		"\u0274\u0001\u0274\u0001\u0274\u0001\u0274\u0001\u0274\u0001\u0274\u0001"+
		"\u0274\u0001\u0274\u0001\u0274\u0001\u0274\u0001\u0274\u0001\u0274\u0001"+
		"\u0274\u0003\u0274\u24d6\b\u0274\u0001\u0275\u0001\u0275\u0001\u0275\u0001"+
		"\u0275\u0001\u0275\u0001\u0275\u0003\u0275\u24de\b\u0275\u0001\u0276\u0001"+
		"\u0276\u0001\u0276\u0001\u0276\u0001\u0276\u0001\u0276\u0001\u0276\u0003"+
		"\u0276\u24e7\b\u0276\u0001\u0277\u0001\u0277\u0001\u0277\u0001\u0277\u0001"+
		"\u0277\u0001\u0277\u0001\u0277\u0003\u0277\u24f0\b\u0277\u0001\u0277\u0003"+
		"\u0277\u24f3\b\u0277\u0001\u0278\u0001\u0278\u0001\u0278\u0003\u0278\u24f8"+
		"\b\u0278\u0001\u0278\u0001\u0278\u0001\u0278\u0001\u0278\u0001\u0278\u0001"+
		"\u0278\u0001\u0278\u0003\u0278\u2501\b\u0278\u0001\u0279\u0001\u0279\u0001"+
		"\u0279\u0003\u0279\u2506\b\u0279\u0001\u0279\u0001\u0279\u0001\u027a\u0001"+
		"\u027a\u0001\u027a\u0001\u027a\u0001\u027a\u0001\u027a\u0001\u027b\u0001"+
		"\u027b\u0001\u027c\u0001\u027c\u0003\u027c\u2514\b\u027c\u0001\u027d\u0001"+
		"\u027d\u0001\u027e\u0001\u027e\u0001\u027e\u0001\u027e\u0001\u027e\u0001"+
		"\u027e\u0003\u027e\u251e\b\u027e\u0001\u027f\u0001\u027f\u0001\u027f\u0001"+
		"\u027f\u0001\u027f\u0001\u027f\u0003\u027f\u2526\b\u027f\u0001\u0280\u0001"+
		"\u0280\u0001\u0280\u0001\u0280\u0001\u0280\u0001\u0280\u0001\u0280\u0001"+
		"\u0280\u0001\u0280\u0001\u0280\u0001\u0280\u0001\u0280\u0003\u0280\u2534"+
		"\b\u0280\u0001\u0281\u0001\u0281\u0001\u0281\u0005\u0281\u2539\b\u0281"+
		"\n\u0281\f\u0281\u253c\t\u0281\u0001\u0282\u0001\u0282\u0001\u0282\u0005"+
		"\u0282\u2541\b\u0282\n\u0282\f\u0282\u2544\t\u0282\u0001\u0283\u0001\u0283"+
		"\u0001\u0283\u0001\u0283\u0001\u0283\u0003\u0283\u254b\b\u0283\u0001\u0284"+
		"\u0001\u0284\u0001\u0284\u0005\u0284\u2550\b\u0284\n\u0284\f\u0284\u2553"+
		"\t\u0284\u0001\u0285\u0001\u0285\u0001\u0285\u0003\u0285\u2558\b\u0285"+
		"\u0001\u0285\u0001\u0285\u0001\u0286\u0001\u0286\u0001\u0286\u0005\u0286"+
		"\u255f\b\u0286\n\u0286\f\u0286\u2562\t\u0286\u0001\u0287\u0001\u0287\u0001"+
		"\u0287\u0001\u0287\u0001\u0287\u0003\u0287\u2569\b\u0287\u0001\u0288\u0001"+
		"\u0288\u0001\u0288\u0001\u0288\u0001\u0288\u0001\u0288\u0001\u0288\u0001"+
		"\u0288\u0003\u0288\u2573\b\u0288\u0001\u0289\u0001\u0289\u0001\u028a\u0001"+
		"\u028a\u0001\u028a\u0001\u028a\u0001\u028a\u0001\u028a\u0001\u028a\u0003"+
		"\u028a\u257e\b\u028a\u0001\u028b\u0001\u028b\u0001\u028b\u0001\u028b\u0001"+
		"\u028b\u0003\u028b\u2585\b\u028b\u0001\u028c\u0001\u028c\u0001\u028c\u0001"+
		"\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001"+
		"\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001"+
		"\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001"+
		"\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001"+
		"\u028c\u0003\u028c\u25a3\b\u028c\u0001\u028d\u0001\u028d\u0001\u028d\u0001"+
		"\u028d\u0001\u028d\u0001\u028d\u0001\u028d\u0003\u028d\u25ac\b\u028d\u0001"+
		"\u028e\u0001\u028e\u0001\u028e\u0001\u028e\u0001\u028e\u0003\u028e\u25b3"+
		"\b\u028e\u0001\u028f\u0001\u028f\u0001\u028f\u0001\u028f\u0001\u028f\u0001"+
		"\u028f\u0001\u0290\u0004\u0290\u25bc\b\u0290\u000b\u0290\f\u0290\u25bd"+
		"\u0001\u0291\u0001\u0291\u0001\u0291\u0001\u0291\u0001\u0291\u0001\u0292"+
		"\u0001\u0292\u0001\u0292\u0003\u0292\u25c8\b\u0292\u0001\u0293\u0001\u0293"+
		"\u0003\u0293\u25cc\b\u0293\u0001\u0294\u0001\u0294\u0003\u0294\u25d0\b"+
		"\u0294\u0001\u0295\u0001\u0295\u0001\u0295\u0003\u0295\u25d5\b\u0295\u0001"+
		"\u0295\u0001\u0295\u0001\u0295\u0001\u0295\u0001\u0295\u0001\u0295\u0003"+
		"\u0295\u25dd\b\u0295\u0001\u0295\u0001\u0295\u0003\u0295\u25e1\b\u0295"+
		"\u0001\u0296\u0001\u0296\u0003\u0296\u25e5\b\u0296\u0001\u0297\u0004\u0297"+
		"\u25e8\b\u0297\u000b\u0297\f\u0297\u25e9\u0001\u0298\u0005\u0298\u25ed"+
		"\b\u0298\n\u0298\f\u0298\u25f0\t\u0298\u0001\u0299\u0001\u0299\u0003\u0299"+
		"\u25f4\b\u0299\u0001\u029a\u0001\u029a\u0001\u029a\u0005\u029a\u25f9\b"+
		"\u029a\n\u029a\f\u029a\u25fc\t\u029a\u0001\u029b\u0001\u029b\u0001\u029b"+
		"\u0001\u029b\u0001\u029b\u0003\u029b\u2603\b\u029b\u0001\u029b\u0003\u029b"+
		"\u2606\b\u029b\u0001\u029c\u0001\u029c\u0001\u029c\u0005\u029c\u260b\b"+
		"\u029c\n\u029c\f\u029c\u260e\t\u029c\u0001\u029d\u0001\u029d\u0003\u029d"+
		"\u2612\b\u029d\u0001\u029e\u0001\u029e\u0001\u029e\u0005\u029e\u2617\b"+
		"\u029e\n\u029e\f\u029e\u261a\t\u029e\u0001\u029f\u0001\u029f\u0001\u02a0"+
		"\u0001\u02a0\u0001\u02a1\u0001\u02a1\u0001\u02a2\u0001\u02a2\u0001\u02a2"+
		"\u0001\u02a2\u0001\u02a2\u0001\u02a2\u0001\u02a2\u0003\u02a2\u2629\b\u02a2"+
		"\u0001\u02a3\u0001\u02a3\u0001\u02a3\u0001\u02a3\u0001\u02a3\u0001\u02a3"+
		"\u0001\u02a3\u0001\u02a3\u0001\u02a3\u0001\u02a3\u0001\u02a3\u0001\u02a3"+
		"\u0001\u02a3\u0003\u02a3\u2638\b\u02a3\u0001\u02a3\u0001\u02a3\u0001\u02a3"+
		"\u0001\u02a3\u0001\u02a3\u0001\u02a3\u0001\u02a3\u0001\u02a3\u0001\u02a3"+
		"\u0001\u02a3\u0001\u02a3\u0001\u02a3\u0003\u02a3\u2646\b\u02a3\u0001\u02a3"+
		"\u0001\u02a3\u0001\u02a3\u0003\u02a3\u264b\b\u02a3\u0001\u02a4\u0001\u02a4"+
		"\u0001\u02a5\u0001\u02a5\u0001\u02a6\u0001\u02a6\u0001\u02a7\u0001\u02a7"+
		"\u0001\u02a8\u0001\u02a8\u0001\u02a8\u0001\u02a9\u0001\u02a9\u0001\u02a9"+
		"\u0001\u02a9\u0005\u02a9\u265c\b\u02a9\n\u02a9\f\u02a9\u265f\t\u02a9\u0001"+
		"\u02a9\u0001\u02a9\u0003\u02a9\u2663\b\u02a9\u0001\u02aa\u0001\u02aa\u0001"+
		"\u02aa\u0003\u02aa\u2668\b\u02aa\u0001\u02ab\u0001\u02ab\u0001\u02ab\u0001"+
		"\u02ab\u0001\u02ab\u0003\u02ab\u266f\b\u02ab\u0001\u02ac\u0001\u02ac\u0001"+
		"\u02ad\u0001\u02ad\u0001\u02ad\u0003\u02ad\u2676\b\u02ad\u0001\u02ae\u0001"+
		"\u02ae\u0001\u02ae\u0005\u02ae\u267b\b\u02ae\n\u02ae\f\u02ae\u267e\t\u02ae"+
		"\u0001\u02af\u0001\u02af\u0001\u02af\u0001\u02af\u0001\u02af\u0001\u02af"+
		"\u0003\u02af\u2686\b\u02af\u0001\u02b0\u0001\u02b0\u0001\u02b0\u0001\u02b0"+
		"\u0003\u02b0\u268c\b\u02b0\u0001\u02b1\u0001\u02b1\u0001\u02b1\u0001\u02b1"+
		"\u0003\u02b1\u2692\b\u02b1\u0001\u02b2\u0001\u02b2\u0001\u02b2\u0001\u02b2"+
		"\u0003\u02b2\u2698\b\u02b2\u0001\u02b3\u0001\u02b3\u0001\u02b3\u0001\u02b3"+
		"\u0001\u02b3\u0001\u02b3\u0003\u02b3\u26a0\b\u02b3\u0001\u02b4\u0001\u02b4"+
		"\u0001\u02b4\u0001\u02b4\u0001\u02b4\u0001\u02b4\u0001\u02b4\u0003\u02b4"+
		"\u26a9\b\u02b4\u0001\u02b5\u0001\u02b5\u0001\u02b6\u0001\u02b6\u0001\u02b7"+
		"\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7"+
		"\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7"+
		"\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7"+
		"\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7"+
		"\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7"+
		"\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7"+
		"\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7"+
		"\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0001\u02b7"+
		"\u0001\u02b7\u0001\u02b7\u0001\u02b7\u0003\u02b7\u26e3\b\u02b7\u0001\u02b8"+
		"\u0001\u02b8\u0001\u02b9\u0001\u02b9\u0001\u02ba\u0001\u02ba\u0001\u02bb"+
		"\u0001\u02bb\u0001\u02bb\u0001\u02bb\u0001\u02bc\u0005\u02bc\u26f0\b\u02bc"+
		"\n\u02bc\f\u02bc\u26f3\t\u02bc\u0001\u02bd\u0001\u02bd\u0001\u02bd\u0001"+
		"\u02bd\u0001\u02bd\u0001\u02bd\u0001\u02bd\u0001\u02bd\u0001\u02bd\u0001"+
		"\u02bd\u0001\u02bd\u0001\u02bd\u0001\u02bd\u0001\u02bd\u0001\u02bd\u0001"+
		"\u02bd\u0001\u02bd\u0001\u02bd\u0001\u02bd\u0001\u02bd\u0003\u02bd\u2709"+
		"\b\u02bd\u0001\u02be\u0001\u02be\u0001\u02bf\u0001\u02bf\u0001\u02bf\u0001"+
		"\u02bf\u0003\u02bf\u2711\b\u02bf\u0001\u02c0\u0001\u02c0\u0003\u02c0\u2715"+
		"\b\u02c0\u0001\u02c1\u0001\u02c1\u0001\u02c1\u0001\u02c1\u0001\u02c1\u0001"+
		"\u02c1\u0001\u02c1\u0001\u02c2\u0001\u02c2\u0001\u02c2\u0003\u02c2\u2721"+
		"\b\u02c2\u0003\u02c2\u2723\b\u02c2\u0001\u02c3\u0001\u02c3\u0001\u02c4"+
		"\u0004\u02c4\u2728\b\u02c4\u000b\u02c4\f\u02c4\u2729\u0001\u02c5\u0001"+
		"\u02c5\u0001\u02c5\u0001\u02c5\u0001\u02c6\u0001\u02c6\u0001\u02c6\u0003"+
		"\u02c6\u2733\b\u02c6\u0001\u02c7\u0001\u02c7\u0001\u02c7\u0001\u02c7\u0001"+
		"\u02c7\u0001\u02c7\u0001\u02c7\u0001\u02c7\u0001\u02c7\u0001\u02c7\u0001"+
		"\u02c7\u0001\u02c7\u0001\u02c7\u0001\u02c7\u0001\u02c7\u0001\u02c7\u0003"+
		"\u02c7\u2745\b\u02c7\u0001\u02c7\u0001\u02c7\u0001\u02c8\u0001\u02c8\u0001"+
		"\u02c8\u0001\u02c8\u0003\u02c8\u274d\b\u02c8\u0001\u02c9\u0001\u02c9\u0001"+
		"\u02ca\u0001\u02ca\u0001\u02ca\u0001\u02ca\u0001\u02ca\u0003\u02ca\u2756"+
		"\b\u02ca\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0005\u02cb\u275b\b\u02cb"+
		"\n\u02cb\f\u02cb\u275e\t\u02cb\u0001\u02cc\u0001\u02cc\u0001\u02cc\u0001"+
		"\u02cd\u0001\u02cd\u0001\u02ce\u0001\u02ce\u0003\u02ce\u2767\b\u02ce\u0001"+
		"\u02cf\u0001\u02cf\u0001\u02d0\u0001\u02d0\u0003\u02d0\u276d\b\u02d0\u0001"+
		"\u02d1\u0001\u02d1\u0001\u02d2\u0001\u02d2\u0001\u02d2\u0003\u02d2\u2774"+
		"\b\u02d2\u0001\u02d3\u0001\u02d3\u0001\u02d3\u0003\u02d3\u2779\b\u02d3"+
		"\u0001\u02d4\u0001\u02d4\u0001\u02d4\u0001\u02d4\u0003\u02d4\u277f\b\u02d4"+
		"\u0001\u02d5\u0001\u02d5\u0003\u02d5\u2783\b\u02d5\u0001\u02d6\u0001\u02d6"+
		"\u0001\u02d7\u0005\u02d7\u2788\b\u02d7\n\u02d7\f\u02d7\u278b\t\u02d7\u0001"+
		"\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001"+
		"\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001"+
		"\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001"+
		"\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001\u02d8\u0001"+
		"\u02d8\u0001\u02d8\u0001\u02d8\u0003\u02d8\u27a8\b\u02d8\u0001\u02d9\u0001"+
		"\u02d9\u0001\u02d9\u0001\u02d9\u0001\u02da\u0001\u02da\u0001\u02da\u0001"+
		"\u02da\u0001\u02da\u0001\u02da\u0001\u02da\u0001\u02da\u0001\u02da\u0001"+
		"\u02da\u0001\u02da\u0001\u02da\u0001\u02da\u0001\u02da\u0003\u02da\u27bc"+
		"\b\u02da\u0001\u02db\u0001\u02db\u0003\u02db\u27c0\b\u02db\u0001\u02dc"+
		"\u0001\u02dc\u0001\u02dc\u0001\u02dc\u0001\u02dc\u0001\u02dd\u0001\u02dd"+
		"\u0001\u02dd\u0001\u02dd\u0001\u02dd\u0001\u02dd\u0001\u02de\u0001\u02de"+
		"\u0001\u02de\u0003\u02de\u27d0\b\u02de\u0001\u02df\u0001\u02df\u0001\u02df"+
		"\u0005\u02df\u27d5\b\u02df\n\u02df\f\u02df\u27d8\t\u02df\u0001\u02e0\u0001"+
		"\u02e0\u0001\u02e0\u0001\u02e0\u0001\u02e1\u0001\u02e1\u0001\u02e2\u0001"+
		"\u02e2\u0001\u02e3\u0001\u02e3\u0003\u02e3\u27e4\b\u02e3\u0001\u02e3\u0001"+
		"\u02e3\u0001\u02e3\u0001\u02e3\u0005\u02e3\u27ea\b\u02e3\n\u02e3\f\u02e3"+
		"\u27ed\t\u02e3\u0001\u02e4\u0001\u02e4\u0001\u02e4\u0001\u02e4\u0001\u02e4"+
		"\u0001\u02e4\u0001\u02e4\u0001\u02e4\u0001\u02e4\u0001\u02e4\u0001\u02e5"+
		"\u0001\u02e5\u0001\u02e5\u0001\u02e5\u0001\u02e5\u0005\u02e5\u27fe\b\u02e5"+
		"\n\u02e5\f\u02e5\u2801\t\u02e5\u0001\u02e6\u0001\u02e6\u0001\u02e6\u0003"+
		"\u02e6\u2806\b\u02e6\u0001\u02e7\u0001\u02e7\u0001\u02e7\u0001\u02e7\u0001"+
		"\u02e7\u0001\u02e7\u0001\u02e7\u0001\u02e7\u0001\u02e8\u0001\u02e8\u0003"+
		"\u02e8\u2812\b\u02e8\u0001\u02e9\u0004\u02e9\u2815\b\u02e9\u000b\u02e9"+
		"\f\u02e9\u2816\u0001\u02ea\u0001\u02ea\u0001\u02ea\u0001\u02ea\u0001\u02ea"+
		"\u0001\u02eb\u0001\u02eb\u0001\u02eb\u0003\u02eb\u2821\b\u02eb\u0001\u02ec"+
		"\u0001\u02ec\u0001\u02ec\u0001\u02ed\u0001\u02ed\u0001\u02ed\u0001\u02ed"+
		"\u0001\u02ed\u0001\u02ee\u0001\u02ee\u0001\u02ee\u0001\u02ee\u0001\u02ee"+
		"\u0001\u02ef\u0001\u02ef\u0001\u02ef\u0001\u02ef\u0001\u02ef\u0001\u02ef"+
		"\u0001\u02ef\u0001\u02ef\u0001\u02ef\u0001\u02ef\u0001\u02ef\u0001\u02ef"+
		"\u0001\u02ef\u0001\u02ef\u0001\u02ef\u0001\u02ef\u0001\u02ef\u0003\u02ef"+
		"\u2841\b\u02ef\u0001\u02f0\u0001\u02f0\u0001\u02f0\u0003\u02f0\u2846\b"+
		"\u02f0\u0001\u02f1\u0001\u02f1\u0001\u02f1\u0001\u02f1\u0001\u02f1\u0005"+
		"\u02f1\u284d\b\u02f1\n\u02f1\f\u02f1\u2850\t\u02f1\u0001\u02f1\u0001\u02f1"+
		"\u0003\u02f1\u2854\b\u02f1\u0001\u02f2\u0001\u02f2\u0003\u02f2\u2858\b"+
		"\u02f2\u0001\u02f3\u0001\u02f3\u0001\u02f3\u0003\u02f3\u285d\b\u02f3\u0001"+
		"\u02f4\u0001\u02f4\u0001\u02f5\u0001\u02f5\u0001\u02f5\u0001\u02f5\u0001"+
		"\u02f5\u0001\u02f5\u0001\u02f5\u0001\u02f5\u0001\u02f5\u0001\u02f6\u0001"+
		"\u02f6\u0001\u02f6\u0003\u02f6\u286d\b\u02f6\u0001\u02f7\u0001\u02f7\u0001"+
		"\u02f7\u0001\u02f7\u0001\u02f7\u0001\u02f8\u0001\u02f8\u0001\u02f9\u0001"+
		"\u02f9\u0001\u02f9\u0001\u02f9\u0001\u02f9\u0001\u02f9\u0001\u02f9\u0001"+
		"\u02f9\u0001\u02f9\u0003\u02f9\u287f\b\u02f9\u0001\u02f9\u0003\u02f9\u2882"+
		"\b\u02f9\u0001\u02f9\u0001\u02f9\u0001\u02fa\u0001\u02fa\u0003\u02fa\u2888"+
		"\b\u02fa\u0001\u02fb\u0001\u02fb\u0001\u02fb\u0001\u02fb\u0001\u02fb\u0001"+
		"\u02fb\u0001\u02fb\u0001\u02fb\u0001\u02fb\u0001\u02fb\u0001\u02fb\u0001"+
		"\u02fb\u0001\u02fb\u0001\u02fb\u0001\u02fb\u0001\u02fb\u0001\u02fb\u0001"+
		"\u02fb\u0001\u02fb\u0001\u02fb\u0001\u02fb\u0001\u02fb\u0001\u02fb\u0001"+
		"\u02fb\u0001\u02fb\u0001\u02fb\u0003\u02fb\u28a4\b\u02fb\u0001\u02fc\u0001"+
		"\u02fc\u0001\u02fc\u0001\u02fc\u0001\u02fc\u0001\u02fc\u0001\u02fc\u0001"+
		"\u02fc\u0003\u02fc\u28ae\b\u02fc\u0001\u02fd\u0001\u02fd\u0001\u02fd\u0004"+
		"\u02fd\u28b3\b\u02fd\u000b\u02fd\f\u02fd\u28b4\u0003\u02fd\u28b7\b\u02fd"+
		"\u0001\u02fe\u0001\u02fe\u0001\u02fe\u0003\u02fe\u28bc\b\u02fe\u0001\u02ff"+
		"\u0001\u02ff\u0001\u02ff\u0001\u02ff\u0001\u0300\u0001\u0300\u0001\u0300"+
		"\u0005\u0300\u28c5\b\u0300\n\u0300\f\u0300\u28c8\t\u0300\u0001\u0301\u0001"+
		"\u0301\u0001\u0301\u0001\u0301\u0001\u0301\u0001\u0302\u0001\u0302\u0001"+
		"\u0302\u0003\u0302\u28d2\b\u0302\u0001\u0303\u0001\u0303\u0001\u0303\u0001"+
		"\u0303\u0001\u0303\u0001\u0303\u0001\u0303\u0001\u0304\u0001\u0304\u0001"+
		"\u0304\u0001\u0305\u0001\u0305\u0001\u0305\u0001\u0305\u0001\u0305\u0001"+
		"\u0305\u0001\u0305\u0001\u0305\u0001\u0305\u0003\u0305\u28e7\b\u0305\u0001"+
		"\u0305\u0001\u0305\u0001\u0306\u0001\u0306\u0001\u0306\u0003\u0306\u28ee"+
		"\b\u0306\u0001\u0307\u0001\u0307\u0001\u0307\u0005\u0307\u28f3\b\u0307"+
		"\n\u0307\f\u0307\u28f6\t\u0307\u0001\u0308\u0001\u0308\u0001\u0308\u0003"+
		"\u0308\u28fb\b\u0308\u0001\u0308\u0003\u0308\u28fe\b\u0308\u0001\u0309"+
		"\u0001\u0309\u0001\u0309\u0001\u0309\u0001\u0309";
	private static final String _serializedATNSegment1 =
		"\u0001\u0309\u0001\u0309\u0001\u0309\u0001\u0309\u0003\u0309\u2909\b\u0309"+
		"\u0001\u0309\u0001\u0309\u0001\u0309\u0001\u0309\u0001\u0309\u0003\u0309"+
		"\u2910\b\u0309\u0003\u0309\u2912\b\u0309\u0001\u0309\u0001\u0309\u0001"+
		"\u030a\u0001\u030a\u0001\u030a\u0001\u030a\u0001\u030a\u0003\u030a\u291b"+
		"\b\u030a\u0001\u030b\u0001\u030b\u0001\u030b\u0005\u030b\u2920\b\u030b"+
		"\n\u030b\f\u030b\u2923\t\u030b\u0001\u030c\u0001\u030c\u0001\u030c\u0003"+
		"\u030c\u2928\b\u030c\u0001\u030d\u0001\u030d\u0001\u030d\u0001\u030d\u0003"+
		"\u030d\u292e\b\u030d\u0001\u030e\u0001\u030e\u0003\u030e\u2932\b\u030e"+
		"\u0001\u030f\u0001\u030f\u0001\u030f\u0001\u030f\u0001\u030f\u0001\u030f"+
		"\u0001\u030f\u0001\u030f\u0001\u0310\u0001\u0310\u0001\u0311\u0001\u0311"+
		"\u0001\u0311\u0003\u0311\u2941\b\u0311\u0001\u0312\u0001\u0312\u0001\u0312"+
		"\u0001\u0312\u0001\u0312\u0001\u0312\u0001\u0312\u0001\u0312\u0001\u0312"+
		"\u0001\u0312\u0001\u0312\u0001\u0312\u0001\u0312\u0001\u0312\u0001\u0312"+
		"\u0003\u0312\u2952\b\u0312\u0003\u0312\u2954\b\u0312\u0001\u0313\u0001"+
		"\u0313\u0001\u0313\u0001\u0313\u0001\u0313\u0001\u0314\u0001\u0314\u0001"+
		"\u0314\u0001\u0314\u0001\u0315\u0001\u0315\u0001\u0315\u0001\u0316\u0001"+
		"\u0316\u0001\u0316\u0001\u0316\u0001\u0317\u0001\u0317\u0001\u0317\u0001"+
		"\u0317\u0001\u0318\u0001\u0318\u0003\u0318\u296c\b\u0318\u0001\u0318\u0001"+
		"\u0318\u0003\u0318\u2970\b\u0318\u0001\u0319\u0001\u0319\u0001\u0319\u0001"+
		"\u0319\u0001\u0319\u0001\u0319\u0001\u0319\u0001\u0319\u0001\u0319\u0003"+
		"\u0319\u297b\b\u0319\u0001\u0319\u0003\u0319\u297e\b\u0319\u0001\u031a"+
		"\u0001\u031a\u0003\u031a\u2982\b\u031a\u0001\u031b\u0001\u031b\u0001\u031b"+
		"\u0003\u031b\u2987\b\u031b\u0001\u031c\u0004\u031c\u298a\b\u031c\u000b"+
		"\u031c\f\u031c\u298b\u0001\u031d\u0001\u031d\u0001\u031d\u0001\u031d\u0001"+
		"\u031d\u0001\u031e\u0001\u031e\u0001\u031e\u0005\u031e\u2996\b\u031e\n"+
		"\u031e\f\u031e\u2999\t\u031e\u0001\u031f\u0001\u031f\u0001\u031f\u0003"+
		"\u031f\u299e\b\u031f\u0001\u0320\u0001\u0320\u0003\u0320\u29a2\b\u0320"+
		"\u0001\u0321\u0001\u0321\u0003\u0321\u29a6\b\u0321\u0001\u0322\u0001\u0322"+
		"\u0003\u0322\u29aa\b\u0322\u0001\u0323\u0001\u0323\u0001\u0323\u0003\u0323"+
		"\u29af\b\u0323\u0001\u0324\u0001\u0324\u0003\u0324\u29b3\b\u0324\u0001"+
		"\u0325\u0001\u0325\u0001\u0326\u0001\u0326\u0001\u0326\u0001\u0326\u0001"+
		"\u0326\u0001\u0326\u0001\u0326\u0001\u0326\u0001\u0327\u0001\u0327\u0001"+
		"\u0328\u0001\u0328\u0001\u0329\u0001\u0329\u0001\u032a\u0001\u032a\u0001"+
		"\u032b\u0001\u032b\u0001\u032b\u0001\u032c\u0001\u032c\u0001\u032c\u0001"+
		"\u032c\u0001\u032c\u0003\u032c\u29cf\b\u032c\u0001\u032c\u0000\u0001\u04b6"+
		"\u032d\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018"+
		"\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080"+
		"\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098"+
		"\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0"+
		"\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8"+
		"\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0"+
		"\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8"+
		"\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110"+
		"\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128"+
		"\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140"+
		"\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158"+
		"\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170"+
		"\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188"+
		"\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0"+
		"\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8"+
		"\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0"+
		"\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8"+
		"\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200"+
		"\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218"+
		"\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230"+
		"\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248"+
		"\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260"+
		"\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278"+
		"\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290"+
		"\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8"+
		"\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0"+
		"\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8"+
		"\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0"+
		"\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308"+
		"\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320"+
		"\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338"+
		"\u033a\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350"+
		"\u0352\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368"+
		"\u036a\u036c\u036e\u0370\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380"+
		"\u0382\u0384\u0386\u0388\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398"+
		"\u039a\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0"+
		"\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\u03c0\u03c2\u03c4\u03c6\u03c8"+
		"\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0"+
		"\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8"+
		"\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406\u0408\u040a\u040c\u040e\u0410"+
		"\u0412\u0414\u0416\u0418\u041a\u041c\u041e\u0420\u0422\u0424\u0426\u0428"+
		"\u042a\u042c\u042e\u0430\u0432\u0434\u0436\u0438\u043a\u043c\u043e\u0440"+
		"\u0442\u0444\u0446\u0448\u044a\u044c\u044e\u0450\u0452\u0454\u0456\u0458"+
		"\u045a\u045c\u045e\u0460\u0462\u0464\u0466\u0468\u046a\u046c\u046e\u0470"+
		"\u0472\u0474\u0476\u0478\u047a\u047c\u047e\u0480\u0482\u0484\u0486\u0488"+
		"\u048a\u048c\u048e\u0490\u0492\u0494\u0496\u0498\u049a\u049c\u049e\u04a0"+
		"\u04a2\u04a4\u04a6\u04a8\u04aa\u04ac\u04ae\u04b0\u04b2\u04b4\u04b6\u04b8"+
		"\u04ba\u04bc\u04be\u04c0\u04c2\u04c4\u04c6\u04c8\u04ca\u04cc\u04ce\u04d0"+
		"\u04d2\u04d4\u04d6\u04d8\u04da\u04dc\u04de\u04e0\u04e2\u04e4\u04e6\u04e8"+
		"\u04ea\u04ec\u04ee\u04f0\u04f2\u04f4\u04f6\u04f8\u04fa\u04fc\u04fe\u0500"+
		"\u0502\u0504\u0506\u0508\u050a\u050c\u050e\u0510\u0512\u0514\u0516\u0518"+
		"\u051a\u051c\u051e\u0520\u0522\u0524\u0526\u0528\u052a\u052c\u052e\u0530"+
		"\u0532\u0534\u0536\u0538\u053a\u053c\u053e\u0540\u0542\u0544\u0546\u0548"+
		"\u054a\u054c\u054e\u0550\u0552\u0554\u0556\u0558\u055a\u055c\u055e\u0560"+
		"\u0562\u0564\u0566\u0568\u056a\u056c\u056e\u0570\u0572\u0574\u0576\u0578"+
		"\u057a\u057c\u057e\u0580\u0582\u0584\u0586\u0588\u058a\u058c\u058e\u0590"+
		"\u0592\u0594\u0596\u0598\u059a\u059c\u059e\u05a0\u05a2\u05a4\u05a6\u05a8"+
		"\u05aa\u05ac\u05ae\u05b0\u05b2\u05b4\u05b6\u05b8\u05ba\u05bc\u05be\u05c0"+
		"\u05c2\u05c4\u05c6\u05c8\u05ca\u05cc\u05ce\u05d0\u05d2\u05d4\u05d6\u05d8"+
		"\u05da\u05dc\u05de\u05e0\u05e2\u05e4\u05e6\u05e8\u05ea\u05ec\u05ee\u05f0"+
		"\u05f2\u05f4\u05f6\u05f8\u05fa\u05fc\u05fe\u0600\u0602\u0604\u0606\u0608"+
		"\u060a\u060c\u060e\u0610\u0612\u0614\u0616\u0618\u061a\u061c\u061e\u0620"+
		"\u0622\u0624\u0626\u0628\u062a\u062c\u062e\u0630\u0632\u0634\u0636\u0638"+
		"\u063a\u063c\u063e\u0640\u0642\u0644\u0646\u0648\u064a\u064c\u064e\u0650"+
		"\u0652\u0654\u0656\u0658\u0000B\u0002\u0000\u00c3\u00c3\u0165\u0165\u0002"+
		"\u0000BB\u0137\u0137\u0002\u0000cc\u0137\u0137\u0003\u0000BBcc\u0137\u0137"+
		"\u0002\u0000\u0085\u0085\u00bf\u00bf\u0002\u0000\u00f5\u00f5\u0145\u0145"+
		"\u0002\u0000\n\n^^\u0002\u0000\u00a2\u00a2\u0164\u0164\u0002\u0000\u00b4"+
		"\u00b4\u00dd\u00dd\u0005\u0000\u001e\u001e\u0119\u0119\u0142\u0142\u0159"+
		"\u0159\u015b\u015b\u0002\u0000@@^^\u0002\u0000\u0159\u0159\u015b\u015b"+
		"\u0002\u0000\u00c8\u00c8\u00e0\u00e0\t\u0000\u001e\u001e\u00a0\u00a0\u00a5"+
		"\u00a5\u00b3\u00b3\u00db\u00db\u00e3\u00e3\u014f\u014f\u0152\u0152\u01b6"+
		"\u01b6\u0003\u0000qq\u0115\u0115\u0149\u0149\u0002\u000055NN\u0003\u0000"+
		"\u00ad\u00ad\u00fc\u00fc\u00ff\u00ff\u0005\u0000\u001e\u001eXX\u00b6\u00b6"+
		"\u00e8\u00e8\u016a\u016a\u0002\u0000\\\\\u00e2\u00e2\u0001\u0000\u01c0"+
		"\u01c1\u0002\u0000\\\\\u0197\u0197\u0002\u0000\u014e\u014e\u0197\u0197"+
		"\u0002\u0000\u00d3\u00d3\u0121\u0121\u0003\u0000\u013a\u013a\u015e\u015e"+
		"\u01bd\u01bd\u0002\u0000@@DD\u0005\u0000\u00d4\u00d4\u0142\u0142\u0157"+
		"\u0157\u0162\u0162\u01c7\u01c8\u0002\u0000\n\n55\u0003\u0000\u00d3\u00d3"+
		"\u0121\u0121\u01ba\u01ba\u0003\u0000\u00af\u00af\u013c\u013c\u0156\u0156"+
		"\u0004\u0000XX\u00b6\u00b6\u00e8\u00e8\u016a\u016a\u0002\u0000\u0097\u0097"+
		"\u00f5\u00f5\u0002\u0000\u0132\u0132\u0146\u0146\u0001\u0000\u001f \u0002"+
		"\u0000cc\u0156\u0156\u0002\u0000\u00c9\u00c9\u0147\u0147\u0002\u0000\u00d5"+
		"\u00d5\u00f5\u00f5\u0002\u0000\u0139\u0139\u0197\u0197\u0002\u0000\u00cf"+
		"\u00cf\u0105\u0105\u0004\u0000qqssww~~\u0002\u0000\u0161\u0161\u01dd\u01dd"+
		"\u0002\u0000\u0180\u0181\u018f\u018f\u0001\u0000\u0180\u0181\u0001\u0000"+
		"\u019b\u019c\u0001\u0000\u0012\u0013\u0002\u0000uuzz\u0005\u0000\n\n\u0010"+
		"\u0011\u0015\u0015\u0017\u0017\u0019\u0019\u0001\u0000\f\r\u0003\u0000"+
		"\t\t\u000e\u000e\u001b\u001b\u0002\u0000\u001e\u001e88\u0003\u0000\'\'"+
		"II__\u0002\u0000\u00a6\u00a6\u00bc\u00bc\u0002\u0000\u0129\u0129\u01c2"+
		"\u01c2\u0002\u0000\u00d0\u00d0\u011a\u011a\u0003\u0000\u001e\u001e\"\""+
		"ZZ\u0006\u0000\t\n\f\u0011\u0015\u0015\u0017\u0017\u0019\u0019\u001b\u001b"+
		"\u0002\u0000\u0014\u0014\u0016\u0016\u0001\u0000\u01e3\u01e6\u000b\u0000"+
		"||\u0081\u00f9\u00fb\u00fc\u00fe\u012f\u0131\u017b\u01b1\u01c4\u01c7\u01d5"+
		"\u01d7\u01d7\u01d9\u01d9\u01db\u01db\u01de\u01e8\u0005\u0000jvx{}}\u007f"+
		"\u0080\u01d8\u01d8\u0004\u0000\u001e46FHi\u01c6\u01c6\u0005\u0000\u0130"+
		"\u0130\u01a2\u01a8\u01f8\u01f8\u0201\u0201\u0209\u027b\u0002\u0000>>t"+
		"t\u0002\u0000\n\n\u0014\u0014\u0002\u0000\u00a7\u00a7\u01fb\u01fb\u0002"+
		"\u0000\u0090\u0090\u00d2\u00d2$\u0000!!##+-5599==\\\\tt{{\u0082\u0082"+
		"\u0090\u0090\u0099\u0099\u009d\u009d\u00a1\u00a1\u00a7\u00a7\u00ac\u00ac"+
		"\u00cf\u00cf\u00d2\u00d2\u00e8\u00e8\u00f0\u00f0\u0102\u0102\u0105\u0106"+
		"\u0110\u0110\u011e\u011e\u012c\u012c\u0132\u0132\u0138\u0138\u013c\u013d"+
		"\u0146\u0146\u0161\u0161\u01b1\u01b2\u01dd\u01dd\u01ea\u01f6\u01fa\u0200"+
		"\u0202\u0206\u0208\u0208\u2d32\u0000\u065a\u0001\u0000\u0000\u0000\u0002"+
		"\u065d\u0001\u0000\u0000\u0000\u0004\u065f\u0001\u0000\u0000\u0000\u0006"+
		"\u0667\u0001\u0000\u0000\u0000\b\u06e7\u0001\u0000\u0000\u0000\n\u06e9"+
		"\u0001\u0000\u0000\u0000\f\u06ed\u0001\u0000\u0000\u0000\u000e\u06f0\u0001"+
		"\u0000\u0000\u0000\u0010\u06f8\u0001\u0000\u0000\u0000\u0012\u06fd\u0001"+
		"\u0000\u0000\u0000\u0014\u0703\u0001\u0000\u0000\u0000\u0016\u0718\u0001"+
		"\u0000\u0000\u0000\u0018\u0724\u0001\u0000\u0000\u0000\u001a\u0726\u0001"+
		"\u0000\u0000\u0000\u001c\u072c\u0001\u0000\u0000\u0000\u001e\u0736\u0001"+
		"\u0000\u0000\u0000 \u0738\u0001\u0000\u0000\u0000\"\u0741\u0001\u0000"+
		"\u0000\u0000$\u0749\u0001\u0000\u0000\u0000&\u074f\u0001\u0000\u0000\u0000"+
		"(\u0756\u0001\u0000\u0000\u0000*\u0758\u0001\u0000\u0000\u0000,\u076a"+
		"\u0001\u0000\u0000\u0000.\u076f\u0001\u0000\u0000\u00000\u0778\u0001\u0000"+
		"\u0000\u00002\u077a\u0001\u0000\u0000\u00004\u0788\u0001\u0000\u0000\u0000"+
		"6\u078a\u0001\u0000\u0000\u00008\u07a7\u0001\u0000\u0000\u0000:\u07a9"+
		"\u0001\u0000\u0000\u0000<\u07b1\u0001\u0000\u0000\u0000>\u07bb\u0001\u0000"+
		"\u0000\u0000@\u07c2\u0001\u0000\u0000\u0000B\u07c8\u0001\u0000\u0000\u0000"+
		"D\u07d9\u0001\u0000\u0000\u0000F\u07de\u0001\u0000\u0000\u0000H\u07e2"+
		"\u0001\u0000\u0000\u0000J\u07e4\u0001\u0000\u0000\u0000L\u07ef\u0001\u0000"+
		"\u0000\u0000N\u07f3\u0001\u0000\u0000\u0000P\u07f8\u0001\u0000\u0000\u0000"+
		"R\u07fd\u0001\u0000\u0000\u0000T\u07ff\u0001\u0000\u0000\u0000V\u080b"+
		"\u0001\u0000\u0000\u0000X\u0812\u0001\u0000\u0000\u0000Z\u0814\u0001\u0000"+
		"\u0000\u0000\\\u0816\u0001\u0000\u0000\u0000^\u0818\u0001\u0000\u0000"+
		"\u0000`\u0888\u0001\u0000\u0000\u0000b\u088a\u0001\u0000\u0000\u0000d"+
		"\u089a\u0001\u0000\u0000\u0000f\u089c\u0001\u0000\u0000\u0000h\u099c\u0001"+
		"\u0000\u0000\u0000j\u09a3\u0001\u0000\u0000\u0000l\u09a8\u0001\u0000\u0000"+
		"\u0000n\u09ad\u0001\u0000\u0000\u0000p\u09b2\u0001\u0000\u0000\u0000r"+
		"\u09ba\u0001\u0000\u0000\u0000t\u09bc\u0001\u0000\u0000\u0000v\u09c3\u0001"+
		"\u0000\u0000\u0000x\u09c5\u0001\u0000\u0000\u0000z\u09cd\u0001\u0000\u0000"+
		"\u0000|\u09d9\u0001\u0000\u0000\u0000~\u09e9\u0001\u0000\u0000\u0000\u0080"+
		"\u0a05\u0001\u0000\u0000\u0000\u0082\u0a07\u0001\u0000\u0000\u0000\u0084"+
		"\u0a0a\u0001\u0000\u0000\u0000\u0086\u0a12\u0001\u0000\u0000\u0000\u0088"+
		"\u0a17\u0001\u0000\u0000\u0000\u008a\u0a36\u0001\u0000\u0000\u0000\u008c"+
		"\u0a38\u0001\u0000\u0000\u0000\u008e\u0a53\u0001\u0000\u0000\u0000\u0090"+
		"\u0a55\u0001\u0000\u0000\u0000\u0092\u0a59\u0001\u0000\u0000\u0000\u0094"+
		"\u0a5e\u0001\u0000\u0000\u0000\u0096\u0a65\u0001\u0000\u0000\u0000\u0098"+
		"\u0a6a\u0001\u0000\u0000\u0000\u009a\u0a90\u0001\u0000\u0000\u0000\u009c"+
		"\u0a94\u0001\u0000\u0000\u0000\u009e\u0a9b\u0001\u0000\u0000\u0000\u00a0"+
		"\u0a9f\u0001\u0000\u0000\u0000\u00a2\u0aa1\u0001\u0000\u0000\u0000\u00a4"+
		"\u0aa9\u0001\u0000\u0000\u0000\u00a6\u0ab4\u0001\u0000\u0000\u0000\u00a8"+
		"\u0ab6\u0001\u0000\u0000\u0000\u00aa\u0abe\u0001\u0000\u0000\u0000\u00ac"+
		"\u0ac0\u0001\u0000\u0000\u0000\u00ae\u0af1\u0001\u0000\u0000\u0000\u00b0"+
		"\u0af5\u0001\u0000\u0000\u0000\u00b2\u0afc\u0001\u0000\u0000\u0000\u00b4"+
		"\u0afe\u0001\u0000\u0000\u0000\u00b6\u0b06\u0001\u0000\u0000\u0000\u00b8"+
		"\u0b11\u0001\u0000\u0000\u0000\u00ba\u0b15\u0001\u0000\u0000\u0000\u00bc"+
		"\u0b17\u0001\u0000\u0000\u0000\u00be\u0b1c\u0001\u0000\u0000\u0000\u00c0"+
		"\u0b26\u0001\u0000\u0000\u0000\u00c2\u0b31\u0001\u0000\u0000\u0000\u00c4"+
		"\u0b59\u0001\u0000\u0000\u0000\u00c6\u0b5e\u0001\u0000\u0000\u0000\u00c8"+
		"\u0b65\u0001\u0000\u0000\u0000\u00ca\u0b67\u0001\u0000\u0000\u0000\u00cc"+
		"\u0b6f\u0001\u0000\u0000\u0000\u00ce\u0b72\u0001\u0000\u0000\u0000\u00d0"+
		"\u0b79\u0001\u0000\u0000\u0000\u00d2\u0bb5\u0001\u0000\u0000\u0000\u00d4"+
		"\u0bba\u0001\u0000\u0000\u0000\u00d6\u0bc1\u0001\u0000\u0000\u0000\u00d8"+
		"\u0bc3\u0001\u0000\u0000\u0000\u00da\u0bcb\u0001\u0000\u0000\u0000\u00dc"+
		"\u0bd3\u0001\u0000\u0000\u0000\u00de\u0bd8\u0001\u0000\u0000\u0000\u00e0"+
		"\u0bda\u0001\u0000\u0000\u0000\u00e2\u0be2\u0001\u0000\u0000\u0000\u00e4"+
		"\u0bf2\u0001\u0000\u0000\u0000\u00e6\u0bfd\u0001\u0000\u0000\u0000\u00e8"+
		"\u0bff\u0001\u0000\u0000\u0000\u00ea\u0c03\u0001\u0000\u0000\u0000\u00ec"+
		"\u0c0d\u0001\u0000\u0000\u0000\u00ee\u0c15\u0001\u0000\u0000\u0000\u00f0"+
		"\u0c19\u0001\u0000\u0000\u0000\u00f2\u0c1b\u0001\u0000\u0000\u0000\u00f4"+
		"\u0c22\u0001\u0000\u0000\u0000\u00f6\u0c38\u0001\u0000\u0000\u0000\u00f8"+
		"\u0c3d\u0001\u0000\u0000\u0000\u00fa\u0c44\u0001\u0000\u0000\u0000\u00fc"+
		"\u0c50\u0001\u0000\u0000\u0000\u00fe\u0c55\u0001\u0000\u0000\u0000\u0100"+
		"\u0c5c\u0001\u0000\u0000\u0000\u0102\u0c5e\u0001\u0000\u0000\u0000\u0104"+
		"\u0c62\u0001\u0000\u0000\u0000\u0106\u0c70\u0001\u0000\u0000\u0000\u0108"+
		"\u0c7b\u0001\u0000\u0000\u0000\u010a\u0c88\u0001\u0000\u0000\u0000\u010c"+
		"\u0c96\u0001\u0000\u0000\u0000\u010e\u0c98\u0001\u0000\u0000\u0000\u0110"+
		"\u0ca6\u0001\u0000\u0000\u0000\u0112\u0cae\u0001\u0000\u0000\u0000\u0114"+
		"\u0cb0\u0001\u0000\u0000\u0000\u0116\u0cb7\u0001\u0000\u0000\u0000\u0118"+
		"\u0cc2\u0001\u0000\u0000\u0000\u011a\u0ccd\u0001\u0000\u0000\u0000\u011c"+
		"\u0cd4\u0001\u0000\u0000\u0000\u011e\u0cd7\u0001\u0000\u0000\u0000\u0120"+
		"\u0cf9\u0001\u0000\u0000\u0000\u0122\u0cfd\u0001\u0000\u0000\u0000\u0124"+
		"\u0d05\u0001\u0000\u0000\u0000\u0126\u0d07\u0001\u0000\u0000\u0000\u0128"+
		"\u0d0f\u0001\u0000\u0000\u0000\u012a\u0d1e\u0001\u0000\u0000\u0000\u012c"+
		"\u0d20\u0001\u0000\u0000\u0000\u012e\u0d27\u0001\u0000\u0000\u0000\u0130"+
		"\u0d2d\u0001\u0000\u0000\u0000\u0132\u0d31\u0001\u0000\u0000\u0000\u0134"+
		"\u0d35\u0001\u0000\u0000\u0000\u0136\u0d37\u0001\u0000\u0000\u0000\u0138"+
		"\u0d42\u0001\u0000\u0000\u0000\u013a\u0d44\u0001\u0000\u0000\u0000\u013c"+
		"\u0d4c\u0001\u0000\u0000\u0000\u013e\u0d5a\u0001\u0000\u0000\u0000\u0140"+
		"\u0d64\u0001\u0000\u0000\u0000\u0142\u0d66\u0001\u0000\u0000\u0000\u0144"+
		"\u0d6f\u0001\u0000\u0000\u0000\u0146\u0d72\u0001\u0000\u0000\u0000\u0148"+
		"\u0ddd\u0001\u0000\u0000\u0000\u014a\u0ddf\u0001\u0000\u0000\u0000\u014c"+
		"\u0def\u0001\u0000\u0000\u0000\u014e\u0df2\u0001\u0000\u0000\u0000\u0150"+
		"\u0df8\u0001\u0000\u0000\u0000\u0152\u0e09\u0001\u0000\u0000\u0000\u0154"+
		"\u0e11\u0001\u0000\u0000\u0000\u0156\u0e13\u0001\u0000\u0000\u0000\u0158"+
		"\u0e1b\u0001\u0000\u0000\u0000\u015a\u0e20\u0001\u0000\u0000\u0000\u015c"+
		"\u0e2f\u0001\u0000\u0000\u0000\u015e\u0e31\u0001\u0000\u0000\u0000\u0160"+
		"\u0e34\u0001\u0000\u0000\u0000\u0162\u0e36\u0001\u0000\u0000\u0000\u0164"+
		"\u0e51\u0001\u0000\u0000\u0000\u0166\u0e56\u0001\u0000\u0000\u0000\u0168"+
		"\u0e58\u0001\u0000\u0000\u0000\u016a\u0e5f\u0001\u0000\u0000\u0000\u016c"+
		"\u0e61\u0001\u0000\u0000\u0000\u016e\u0ea3\u0001\u0000\u0000\u0000\u0170"+
		"\u0ea5\u0001\u0000\u0000\u0000\u0172\u0eb4\u0001\u0000\u0000\u0000\u0174"+
		"\u0ebc\u0001\u0000\u0000\u0000\u0176\u0ed3\u0001\u0000\u0000\u0000\u0178"+
		"\u0ed7\u0001\u0000\u0000\u0000\u017a\u0eeb\u0001\u0000\u0000\u0000\u017c"+
		"\u0eed\u0001\u0000\u0000\u0000\u017e\u0ef6\u0001\u0000\u0000\u0000\u0180"+
		"\u0f01\u0001\u0000\u0000\u0000\u0182\u0f10\u0001\u0000\u0000\u0000\u0184"+
		"\u0f19\u0001\u0000\u0000\u0000\u0186\u0f1e\u0001\u0000\u0000\u0000\u0188"+
		"\u0f23\u0001\u0000\u0000\u0000\u018a\u0f28\u0001\u0000\u0000\u0000\u018c"+
		"\u0f2d\u0001\u0000\u0000\u0000\u018e\u0f2f\u0001\u0000\u0000\u0000\u0190"+
		"\u0f31\u0001\u0000\u0000\u0000\u0192\u0f3a\u0001\u0000\u0000\u0000\u0194"+
		"\u0f62\u0001\u0000\u0000\u0000\u0196\u0f68\u0001\u0000\u0000\u0000\u0198"+
		"\u0f6a\u0001\u0000\u0000\u0000\u019a\u0f79\u0001\u0000\u0000\u0000\u019c"+
		"\u0f7e\u0001\u0000\u0000\u0000\u019e\u0f81\u0001\u0000\u0000\u0000\u01a0"+
		"\u0f85\u0001\u0000\u0000\u0000\u01a2\u0f8a\u0001\u0000\u0000\u0000\u01a4"+
		"\u0f8c\u0001\u0000\u0000\u0000\u01a6\u0f8e\u0001\u0000\u0000\u0000\u01a8"+
		"\u0f95\u0001\u0000\u0000\u0000\u01aa\u0f99\u0001\u0000\u0000\u0000\u01ac"+
		"\u0f9b\u0001\u0000\u0000\u0000\u01ae\u0fa3\u0001\u0000\u0000\u0000\u01b0"+
		"\u0fa5\u0001\u0000\u0000\u0000\u01b2\u0fa9\u0001\u0000\u0000\u0000\u01b4"+
		"\u0fb6\u0001\u0000\u0000\u0000\u01b6\u0fbb\u0001\u0000\u0000\u0000\u01b8"+
		"\u0fc0\u0001\u0000\u0000\u0000\u01ba\u0fce\u0001\u0000\u0000\u0000\u01bc"+
		"\u0fea\u0001\u0000\u0000\u0000\u01be\u0fec\u0001\u0000\u0000\u0000\u01c0"+
		"\u0ff4\u0001\u0000\u0000\u0000\u01c2\u0ffa\u0001\u0000\u0000\u0000\u01c4"+
		"\u1002\u0001\u0000\u0000\u0000\u01c6\u100e\u0001\u0000\u0000\u0000\u01c8"+
		"\u1010\u0001\u0000\u0000\u0000\u01ca\u1083\u0001\u0000\u0000\u0000\u01cc"+
		"\u1085\u0001\u0000\u0000\u0000\u01ce\u1089\u0001\u0000\u0000\u0000\u01d0"+
		"\u1091\u0001\u0000\u0000\u0000\u01d2\u109c\u0001\u0000\u0000\u0000\u01d4"+
		"\u109e\u0001\u0000\u0000\u0000\u01d6\u10a2\u0001\u0000\u0000\u0000\u01d8"+
		"\u10aa\u0001\u0000\u0000\u0000\u01da\u10b0\u0001\u0000\u0000\u0000\u01dc"+
		"\u10b2\u0001\u0000\u0000\u0000\u01de\u10df\u0001\u0000\u0000\u0000\u01e0"+
		"\u10e5\u0001\u0000\u0000\u0000\u01e2\u10e7\u0001\u0000\u0000\u0000\u01e4"+
		"\u10f5\u0001\u0000\u0000\u0000\u01e6\u1116\u0001\u0000\u0000\u0000\u01e8"+
		"\u111a\u0001\u0000\u0000\u0000\u01ea\u111f\u0001\u0000\u0000\u0000\u01ec"+
		"\u1128\u0001\u0000\u0000\u0000\u01ee\u112c\u0001\u0000\u0000\u0000\u01f0"+
		"\u112e\u0001\u0000\u0000\u0000\u01f2\u1147\u0001\u0000\u0000\u0000\u01f4"+
		"\u1149\u0001\u0000\u0000\u0000\u01f6\u115d\u0001\u0000\u0000\u0000\u01f8"+
		"\u1171\u0001\u0000\u0000\u0000\u01fa\u1185\u0001\u0000\u0000\u0000\u01fc"+
		"\u1187\u0001\u0000\u0000\u0000\u01fe\u118d\u0001\u0000\u0000\u0000\u0200"+
		"\u11e2\u0001\u0000\u0000\u0000\u0202\u11fb\u0001\u0000\u0000\u0000\u0204"+
		"\u1202\u0001\u0000\u0000\u0000\u0206\u1212\u0001\u0000\u0000\u0000\u0208"+
		"\u1214\u0001\u0000\u0000\u0000\u020a\u1216\u0001\u0000\u0000\u0000\u020c"+
		"\u121e\u0001\u0000\u0000\u0000\u020e\u1224\u0001\u0000\u0000\u0000\u0210"+
		"\u1228\u0001\u0000\u0000\u0000\u0212\u1230\u0001\u0000\u0000\u0000\u0214"+
		"\u123b\u0001\u0000\u0000\u0000\u0216\u12d0\u0001\u0000\u0000\u0000\u0218"+
		"\u12d4\u0001\u0000\u0000\u0000\u021a\u1331\u0001\u0000\u0000\u0000\u021c"+
		"\u1336\u0001\u0000\u0000\u0000\u021e\u133a\u0001\u0000\u0000\u0000\u0220"+
		"\u1340\u0001\u0000\u0000\u0000\u0222\u1384\u0001\u0000\u0000\u0000\u0224"+
		"\u1386\u0001\u0000\u0000\u0000\u0226\u138a\u0001\u0000\u0000\u0000\u0228"+
		"\u138c\u0001\u0000\u0000\u0000\u022a\u13a7\u0001\u0000\u0000\u0000\u022c"+
		"\u13b8\u0001\u0000\u0000\u0000\u022e\u13ba\u0001\u0000\u0000\u0000\u0230"+
		"\u13cb\u0001\u0000\u0000\u0000\u0232\u1407\u0001\u0000\u0000\u0000\u0234"+
		"\u1409\u0001\u0000\u0000\u0000\u0236\u1414\u0001\u0000\u0000\u0000\u0238"+
		"\u141a\u0001\u0000\u0000\u0000\u023a\u141c\u0001\u0000\u0000\u0000\u023c"+
		"\u1434\u0001\u0000\u0000\u0000\u023e\u143a\u0001\u0000\u0000\u0000\u0240"+
		"\u1440\u0001\u0000\u0000\u0000\u0242\u1442\u0001\u0000\u0000\u0000\u0244"+
		"\u144b\u0001\u0000\u0000\u0000\u0246\u1457\u0001\u0000\u0000\u0000\u0248"+
		"\u1474\u0001\u0000\u0000\u0000\u024a\u1476\u0001\u0000\u0000\u0000\u024c"+
		"\u149b\u0001\u0000\u0000\u0000\u024e\u149f\u0001\u0000\u0000\u0000\u0250"+
		"\u14a3\u0001\u0000\u0000\u0000\u0252\u14a7\u0001\u0000\u0000\u0000\u0254"+
		"\u14ac\u0001\u0000\u0000\u0000\u0256\u14ae\u0001\u0000\u0000\u0000\u0258"+
		"\u14c1\u0001\u0000\u0000\u0000\u025a\u14ce\u0001\u0000\u0000\u0000\u025c"+
		"\u14d6\u0001\u0000\u0000\u0000\u025e\u14d8\u0001\u0000\u0000\u0000\u0260"+
		"\u14e3\u0001\u0000\u0000\u0000\u0262\u14e7\u0001\u0000\u0000\u0000\u0264"+
		"\u14ec\u0001\u0000\u0000\u0000\u0266\u14f3\u0001\u0000\u0000\u0000\u0268"+
		"\u14f5\u0001\u0000\u0000\u0000\u026a\u150a\u0001\u0000\u0000\u0000\u026c"+
		"\u150c\u0001\u0000\u0000\u0000\u026e\u1512\u0001\u0000\u0000\u0000\u0270"+
		"\u151a\u0001\u0000\u0000\u0000\u0272\u152a\u0001\u0000\u0000\u0000\u0274"+
		"\u152c\u0001\u0000\u0000\u0000\u0276\u1532\u0001\u0000\u0000\u0000\u0278"+
		"\u1547\u0001\u0000\u0000\u0000\u027a\u1550\u0001\u0000\u0000\u0000\u027c"+
		"\u1556\u0001\u0000\u0000\u0000\u027e\u1558\u0001\u0000\u0000\u0000\u0280"+
		"\u1568\u0001\u0000\u0000\u0000\u0282\u156a\u0001\u0000\u0000\u0000\u0284"+
		"\u156f\u0001\u0000\u0000\u0000\u0286\u1571\u0001\u0000\u0000\u0000\u0288"+
		"\u1580\u0001\u0000\u0000\u0000\u028a\u1588\u0001\u0000\u0000\u0000\u028c"+
		"\u158b\u0001\u0000\u0000\u0000\u028e\u1594\u0001\u0000\u0000\u0000\u0290"+
		"\u15bd\u0001\u0000\u0000\u0000\u0292\u15c7\u0001\u0000\u0000\u0000\u0294"+
		"\u15ce\u0001\u0000\u0000\u0000\u0296\u15d0\u0001\u0000\u0000\u0000\u0298"+
		"\u15df\u0001\u0000\u0000\u0000\u029a\u15e1\u0001\u0000\u0000\u0000\u029c"+
		"\u15e4\u0001\u0000\u0000\u0000\u029e\u15ec\u0001\u0000\u0000\u0000\u02a0"+
		"\u15f3\u0001\u0000\u0000\u0000\u02a2\u15f9\u0001\u0000\u0000\u0000\u02a4"+
		"\u161f\u0001\u0000\u0000\u0000\u02a6\u162d\u0001\u0000\u0000\u0000\u02a8"+
		"\u163b\u0001\u0000\u0000\u0000\u02aa\u1653\u0001\u0000\u0000\u0000\u02ac"+
		"\u165a\u0001\u0000\u0000\u0000\u02ae\u165f\u0001\u0000\u0000\u0000\u02b0"+
		"\u1667\u0001\u0000\u0000\u0000\u02b2\u166a\u0001\u0000\u0000\u0000\u02b4"+
		"\u166e\u0001\u0000\u0000\u0000\u02b6\u1675\u0001\u0000\u0000\u0000\u02b8"+
		"\u1699\u0001\u0000\u0000\u0000\u02ba\u16a0\u0001\u0000\u0000\u0000\u02bc"+
		"\u16a2\u0001\u0000\u0000\u0000\u02be\u16af\u0001\u0000\u0000\u0000\u02c0"+
		"\u16b1\u0001\u0000\u0000\u0000\u02c2\u16de\u0001\u0000\u0000\u0000\u02c4"+
		"\u16e0\u0001\u0000\u0000\u0000\u02c6\u1703\u0001\u0000\u0000\u0000\u02c8"+
		"\u1705\u0001\u0000\u0000\u0000\u02ca\u1707\u0001\u0000\u0000\u0000\u02cc"+
		"\u1709\u0001\u0000\u0000\u0000\u02ce\u1711\u0001\u0000\u0000\u0000\u02d0"+
		"\u171f\u0001\u0000\u0000\u0000\u02d2\u18f5\u0001\u0000\u0000\u0000\u02d4"+
		"\u18f9\u0001\u0000\u0000\u0000\u02d6\u18fe\u0001\u0000\u0000\u0000\u02d8"+
		"\u1939\u0001\u0000\u0000\u0000\u02da\u193d\u0001\u0000\u0000\u0000\u02dc"+
		"\u1a18\u0001\u0000\u0000\u0000\u02de\u1a1a\u0001\u0000\u0000\u0000\u02e0"+
		"\u1a22\u0001\u0000\u0000\u0000\u02e2\u1a32\u0001\u0000\u0000\u0000\u02e4"+
		"\u1a39\u0001\u0000\u0000\u0000\u02e6\u1a3b\u0001\u0000\u0000\u0000\u02e8"+
		"\u1afa\u0001\u0000\u0000\u0000\u02ea\u1afc\u0001\u0000\u0000\u0000\u02ec"+
		"\u1b04\u0001\u0000\u0000\u0000\u02ee\u1b0c\u0001\u0000\u0000\u0000\u02f0"+
		"\u1b29\u0001\u0000\u0000\u0000\u02f2\u1b2b\u0001\u0000\u0000\u0000\u02f4"+
		"\u1b34\u0001\u0000\u0000\u0000\u02f6\u1b3c\u0001\u0000\u0000\u0000\u02f8"+
		"\u1b63\u0001\u0000\u0000\u0000\u02fa\u1b71\u0001\u0000\u0000\u0000\u02fc"+
		"\u1b73\u0001\u0000\u0000\u0000\u02fe\u1b87\u0001\u0000\u0000\u0000\u0300"+
		"\u1b89\u0001\u0000\u0000\u0000\u0302\u1b96\u0001\u0000\u0000\u0000\u0304"+
		"\u1b9a\u0001\u0000\u0000\u0000\u0306\u1b9c\u0001\u0000\u0000\u0000\u0308"+
		"\u1ba1\u0001\u0000\u0000\u0000\u030a\u1ba3\u0001\u0000\u0000\u0000\u030c"+
		"\u1baa\u0001\u0000\u0000\u0000\u030e\u1bac\u0001\u0000\u0000\u0000\u0310"+
		"\u1bb3\u0001\u0000\u0000\u0000\u0312\u1be7\u0001\u0000\u0000\u0000\u0314"+
		"\u1bec\u0001\u0000\u0000\u0000\u0316\u1bf8\u0001\u0000\u0000\u0000\u0318"+
		"\u1bfa\u0001\u0000\u0000\u0000\u031a\u1c06\u0001\u0000\u0000\u0000\u031c"+
		"\u1c0e\u0001\u0000\u0000\u0000\u031e\u1c10\u0001\u0000\u0000\u0000\u0320"+
		"\u1c30\u0001\u0000\u0000\u0000\u0322\u1c32\u0001\u0000\u0000\u0000\u0324"+
		"\u1c35\u0001\u0000\u0000\u0000\u0326\u1c3d\u0001\u0000\u0000\u0000\u0328"+
		"\u1c40\u0001\u0000\u0000\u0000\u032a\u1c44\u0001\u0000\u0000\u0000\u032c"+
		"\u1c53\u0001\u0000\u0000\u0000\u032e\u1c57\u0001\u0000\u0000\u0000\u0330"+
		"\u1c59\u0001\u0000\u0000\u0000\u0332\u1c64\u0001\u0000\u0000\u0000\u0334"+
		"\u1c69\u0001\u0000\u0000\u0000\u0336\u1c77\u0001\u0000\u0000\u0000\u0338"+
		"\u1c7f\u0001\u0000\u0000\u0000\u033a\u1c81\u0001\u0000\u0000\u0000\u033c"+
		"\u1c87\u0001\u0000\u0000\u0000\u033e\u1c8c\u0001\u0000\u0000\u0000\u0340"+
		"\u1c93\u0001\u0000\u0000\u0000\u0342\u1caf\u0001\u0000\u0000\u0000\u0344"+
		"\u1cb1\u0001\u0000\u0000\u0000\u0346\u1d00\u0001\u0000\u0000\u0000\u0348"+
		"\u1d02\u0001\u0000\u0000\u0000\u034a\u1d04\u0001\u0000\u0000\u0000\u034c"+
		"\u1d1c\u0001\u0000\u0000\u0000\u034e\u1d21\u0001\u0000\u0000\u0000\u0350"+
		"\u1d30\u0001\u0000\u0000\u0000\u0352\u1d3c\u0001\u0000\u0000\u0000\u0354"+
		"\u1d3e\u0001\u0000\u0000\u0000\u0356\u1d46\u0001\u0000\u0000\u0000\u0358"+
		"\u1d48\u0001\u0000\u0000\u0000\u035a\u1d4d\u0001\u0000\u0000\u0000\u035c"+
		"\u1d52\u0001\u0000\u0000\u0000\u035e\u1d56\u0001\u0000\u0000\u0000\u0360"+
		"\u1d5a\u0001\u0000\u0000\u0000\u0362\u1d5e\u0001\u0000\u0000\u0000\u0364"+
		"\u1d62\u0001\u0000\u0000\u0000\u0366\u1d69\u0001\u0000\u0000\u0000\u0368"+
		"\u1d6b\u0001\u0000\u0000\u0000\u036a\u1d6e\u0001\u0000\u0000\u0000\u036c"+
		"\u1d78\u0001\u0000\u0000\u0000\u036e\u1d8a\u0001\u0000\u0000\u0000\u0370"+
		"\u1d95\u0001\u0000\u0000\u0000\u0372\u1d97\u0001\u0000\u0000\u0000\u0374"+
		"\u1d9f\u0001\u0000\u0000\u0000\u0376\u1da4\u0001\u0000\u0000\u0000\u0378"+
		"\u1da9\u0001\u0000\u0000\u0000\u037a\u1dab\u0001\u0000\u0000\u0000\u037c"+
		"\u1db6\u0001\u0000\u0000\u0000\u037e\u1dbc\u0001\u0000\u0000\u0000\u0380"+
		"\u1dd9\u0001\u0000\u0000\u0000\u0382\u1de0\u0001\u0000\u0000\u0000\u0384"+
		"\u1dec\u0001\u0000\u0000\u0000\u0386\u1dee\u0001\u0000\u0000\u0000\u0388"+
		"\u1df6\u0001\u0000\u0000\u0000\u038a\u1e0e\u0001\u0000\u0000\u0000\u038c"+
		"\u1e10\u0001\u0000\u0000\u0000\u038e\u1e12\u0001\u0000\u0000\u0000\u0390"+
		"\u1e1a\u0001\u0000\u0000\u0000\u0392\u1e2a\u0001\u0000\u0000\u0000\u0394"+
		"\u1e35\u0001\u0000\u0000\u0000\u0396\u1e3a\u0001\u0000\u0000\u0000\u0398"+
		"\u1e3c\u0001\u0000\u0000\u0000\u039a\u1e5b\u0001\u0000\u0000\u0000\u039c"+
		"\u1e6e\u0001\u0000\u0000\u0000\u039e\u1e7b\u0001\u0000\u0000\u0000\u03a0"+
		"\u1e82\u0001\u0000\u0000\u0000\u03a2\u1e8d\u0001\u0000\u0000\u0000\u03a4"+
		"\u1e8f\u0001\u0000\u0000\u0000\u03a6\u1e9a\u0001\u0000\u0000\u0000\u03a8"+
		"\u1ea8\u0001\u0000\u0000\u0000\u03aa\u1eac\u0001\u0000\u0000\u0000\u03ac"+
		"\u1eb2\u0001\u0000\u0000\u0000\u03ae\u1eb4\u0001\u0000\u0000\u0000\u03b0"+
		"\u1ebd\u0001\u0000\u0000\u0000\u03b2\u1ecf\u0001\u0000\u0000\u0000\u03b4"+
		"\u1ed1\u0001\u0000\u0000\u0000\u03b6\u1ed4\u0001\u0000\u0000\u0000\u03b8"+
		"\u1edc\u0001\u0000\u0000\u0000\u03ba\u1ee4\u0001\u0000\u0000\u0000\u03bc"+
		"\u1eed\u0001\u0000\u0000\u0000\u03be\u1ef5\u0001\u0000\u0000\u0000\u03c0"+
		"\u1ef9\u0001\u0000\u0000\u0000\u03c2\u1f03\u0001\u0000\u0000\u0000\u03c4"+
		"\u1f1a\u0001\u0000\u0000\u0000\u03c6\u1f1e\u0001\u0000\u0000\u0000\u03c8"+
		"\u1f3a\u0001\u0000\u0000\u0000\u03ca\u1f49\u0001\u0000\u0000\u0000\u03cc"+
		"\u1f4b\u0001\u0000\u0000\u0000\u03ce\u1f4e\u0001\u0000\u0000\u0000\u03d0"+
		"\u1f54\u0001\u0000\u0000\u0000\u03d2\u1f5c\u0001\u0000\u0000\u0000\u03d4"+
		"\u1f68\u0001\u0000\u0000\u0000\u03d6\u1f6c\u0001\u0000\u0000\u0000\u03d8"+
		"\u1f76\u0001\u0000\u0000\u0000\u03da\u1f7a\u0001\u0000\u0000\u0000\u03dc"+
		"\u1f8a\u0001\u0000\u0000\u0000\u03de\u1f8e\u0001\u0000\u0000\u0000\u03e0"+
		"\u1f93\u0001\u0000\u0000\u0000\u03e2\u1f95\u0001\u0000\u0000\u0000\u03e4"+
		"\u1f9f\u0001\u0000\u0000\u0000\u03e6\u1fa3\u0001\u0000\u0000\u0000\u03e8"+
		"\u1fa5\u0001\u0000\u0000\u0000\u03ea\u1fa9\u0001\u0000\u0000\u0000\u03ec"+
		"\u1fb1\u0001\u0000\u0000\u0000\u03ee\u1fc1\u0001\u0000\u0000\u0000\u03f0"+
		"\u1fc5\u0001\u0000\u0000\u0000\u03f2\u1fde\u0001\u0000\u0000\u0000\u03f4"+
		"\u1fe0\u0001\u0000\u0000\u0000\u03f6\u1fe9\u0001\u0000\u0000\u0000\u03f8"+
		"\u1feb\u0001\u0000\u0000\u0000\u03fa\u1ff2\u0001\u0000\u0000\u0000\u03fc"+
		"\u1ff6\u0001\u0000\u0000\u0000\u03fe\u1ff8\u0001\u0000\u0000\u0000\u0400"+
		"\u1ffa\u0001\u0000\u0000\u0000\u0402\u2000\u0001\u0000\u0000\u0000\u0404"+
		"\u2002\u0001\u0000\u0000\u0000\u0406\u200f\u0001\u0000\u0000\u0000\u0408"+
		"\u2011\u0001\u0000\u0000\u0000\u040a\u2014\u0001\u0000\u0000\u0000\u040c"+
		"\u2019\u0001\u0000\u0000\u0000\u040e\u201e\u0001\u0000\u0000\u0000\u0410"+
		"\u2027\u0001\u0000\u0000\u0000\u0412\u202d\u0001\u0000\u0000\u0000\u0414"+
		"\u2031\u0001\u0000\u0000\u0000\u0416\u2034\u0001\u0000\u0000\u0000\u0418"+
		"\u2038\u0001\u0000\u0000\u0000\u041a\u203c\u0001\u0000\u0000\u0000\u041c"+
		"\u204b\u0001\u0000\u0000\u0000\u041e\u204d\u0001\u0000\u0000\u0000\u0420"+
		"\u205e\u0001\u0000\u0000\u0000\u0422\u2069\u0001\u0000\u0000\u0000\u0424"+
		"\u206b\u0001\u0000\u0000\u0000\u0426\u20a3\u0001\u0000\u0000\u0000\u0428"+
		"\u20bb\u0001\u0000\u0000\u0000\u042a\u20c6\u0001\u0000\u0000\u0000\u042c"+
		"\u20c9\u0001\u0000\u0000\u0000\u042e\u20df\u0001\u0000\u0000\u0000\u0430"+
		"\u20e1\u0001\u0000\u0000\u0000\u0432\u20ec\u0001\u0000\u0000\u0000\u0434"+
		"\u20fa\u0001\u0000\u0000\u0000\u0436\u20fc\u0001\u0000\u0000\u0000\u0438"+
		"\u2104\u0001\u0000\u0000\u0000\u043a\u210b\u0001\u0000\u0000\u0000\u043c"+
		"\u2118\u0001\u0000\u0000\u0000\u043e\u2124\u0001\u0000\u0000\u0000\u0440"+
		"\u2126\u0001\u0000\u0000\u0000\u0442\u2129\u0001\u0000\u0000\u0000\u0444"+
		"\u2137\u0001\u0000\u0000\u0000\u0446\u213c\u0001\u0000\u0000\u0000\u0448"+
		"\u2141\u0001\u0000\u0000\u0000\u044a\u214b\u0001\u0000\u0000\u0000\u044c"+
		"\u214f\u0001\u0000\u0000\u0000\u044e\u2151\u0001\u0000\u0000\u0000\u0450"+
		"\u2159\u0001\u0000\u0000\u0000\u0452\u215d\u0001\u0000\u0000\u0000\u0454"+
		"\u2172\u0001\u0000\u0000\u0000\u0456\u217a\u0001\u0000\u0000\u0000\u0458"+
		"\u2184\u0001\u0000\u0000\u0000\u045a\u2190\u0001\u0000\u0000\u0000\u045c"+
		"\u2192\u0001\u0000\u0000\u0000\u045e\u21a0\u0001\u0000\u0000\u0000\u0460"+
		"\u21b4\u0001\u0000\u0000\u0000\u0462\u21bd\u0001\u0000\u0000\u0000\u0464"+
		"\u21cd\u0001\u0000\u0000\u0000\u0466\u21d3\u0001\u0000\u0000\u0000\u0468"+
		"\u21d9\u0001\u0000\u0000\u0000\u046a\u21e5\u0001\u0000\u0000\u0000\u046c"+
		"\u21f7\u0001\u0000\u0000\u0000\u046e\u21fe\u0001\u0000\u0000\u0000\u0470"+
		"\u2202\u0001\u0000\u0000\u0000\u0472\u2206\u0001\u0000\u0000\u0000\u0474"+
		"\u2208\u0001\u0000\u0000\u0000\u0476\u220e\u0001\u0000\u0000\u0000\u0478"+
		"\u2211\u0001\u0000\u0000\u0000\u047a\u2218\u0001\u0000\u0000\u0000\u047c"+
		"\u2225\u0001\u0000\u0000\u0000\u047e\u2229\u0001\u0000\u0000\u0000\u0480"+
		"\u222b\u0001\u0000\u0000\u0000\u0482\u2234\u0001\u0000\u0000\u0000\u0484"+
		"\u223d\u0001\u0000\u0000\u0000\u0486\u2259\u0001\u0000\u0000\u0000\u0488"+
		"\u225b\u0001\u0000\u0000\u0000\u048a\u2265\u0001\u0000\u0000\u0000\u048c"+
		"\u2267\u0001\u0000\u0000\u0000\u048e\u2269\u0001\u0000\u0000\u0000\u0490"+
		"\u226d\u0001\u0000\u0000\u0000\u0492\u2275\u0001\u0000\u0000\u0000\u0494"+
		"\u227d\u0001\u0000\u0000\u0000\u0496\u2285\u0001\u0000\u0000\u0000\u0498"+
		"\u2293\u0001\u0000\u0000\u0000\u049a\u229c\u0001\u0000\u0000\u0000\u049c"+
		"\u22a0\u0001\u0000\u0000\u0000\u049e\u22a4\u0001\u0000\u0000\u0000\u04a0"+
		"\u22be\u0001\u0000\u0000\u0000\u04a2\u22cc\u0001\u0000\u0000\u0000\u04a4"+
		"\u22db\u0001\u0000\u0000\u0000\u04a6\u22e5\u0001\u0000\u0000\u0000\u04a8"+
		"\u22e9\u0001\u0000\u0000\u0000\u04aa\u22f1\u0001\u0000\u0000\u0000\u04ac"+
		"\u22f9\u0001\u0000\u0000\u0000\u04ae\u22ff\u0001\u0000\u0000\u0000\u04b0"+
		"\u2303\u0001\u0000\u0000\u0000\u04b2\u230a\u0001\u0000\u0000\u0000\u04b4"+
		"\u230f\u0001\u0000\u0000\u0000\u04b6\u231e\u0001\u0000\u0000\u0000\u04b8"+
		"\u236e\u0001\u0000\u0000\u0000\u04ba\u2370\u0001\u0000\u0000\u0000\u04bc"+
		"\u2372\u0001\u0000\u0000\u0000\u04be\u2390\u0001\u0000\u0000\u0000\u04c0"+
		"\u2394\u0001\u0000\u0000\u0000\u04c2\u2447\u0001\u0000\u0000\u0000\u04c4"+
		"\u244e\u0001\u0000\u0000\u0000\u04c6\u245b\u0001\u0000\u0000\u0000\u04c8"+
		"\u245d\u0001\u0000\u0000\u0000\u04ca\u2462\u0001\u0000\u0000\u0000\u04cc"+
		"\u246a\u0001\u0000\u0000\u0000\u04ce\u246f\u0001\u0000\u0000\u0000\u04d0"+
		"\u2476\u0001\u0000\u0000\u0000\u04d2\u2487\u0001\u0000\u0000\u0000\u04d4"+
		"\u2489\u0001\u0000\u0000\u0000\u04d6\u2493\u0001\u0000\u0000\u0000\u04d8"+
		"\u249c\u0001\u0000\u0000\u0000\u04da\u24a1\u0001\u0000\u0000\u0000\u04dc"+
		"\u24a3\u0001\u0000\u0000\u0000\u04de\u24ab\u0001\u0000\u0000\u0000\u04e0"+
		"\u24b5\u0001\u0000\u0000\u0000\u04e2\u24b7\u0001\u0000\u0000\u0000\u04e4"+
		"\u24c0\u0001\u0000\u0000\u0000\u04e6\u24c6\u0001\u0000\u0000\u0000\u04e8"+
		"\u24d5\u0001\u0000\u0000\u0000\u04ea\u24dd\u0001\u0000\u0000\u0000\u04ec"+
		"\u24e6\u0001\u0000\u0000\u0000\u04ee\u24f2\u0001\u0000\u0000\u0000\u04f0"+
		"\u2500\u0001\u0000\u0000\u0000\u04f2\u2502\u0001\u0000\u0000\u0000\u04f4"+
		"\u2509\u0001\u0000\u0000\u0000\u04f6\u250f\u0001\u0000\u0000\u0000\u04f8"+
		"\u2513\u0001\u0000\u0000\u0000\u04fa\u2515\u0001\u0000\u0000\u0000\u04fc"+
		"\u251d\u0001\u0000\u0000\u0000\u04fe\u2525\u0001\u0000\u0000\u0000\u0500"+
		"\u2533\u0001\u0000\u0000\u0000\u0502\u2535\u0001\u0000\u0000\u0000\u0504"+
		"\u253d\u0001\u0000\u0000\u0000\u0506\u254a\u0001\u0000\u0000\u0000\u0508"+
		"\u254c\u0001\u0000\u0000\u0000\u050a\u2554\u0001\u0000\u0000\u0000\u050c"+
		"\u255b\u0001\u0000\u0000\u0000\u050e\u2568\u0001\u0000\u0000\u0000\u0510"+
		"\u2572\u0001\u0000\u0000\u0000\u0512\u2574\u0001\u0000\u0000\u0000\u0514"+
		"\u2576\u0001\u0000\u0000\u0000\u0516\u2584\u0001\u0000\u0000\u0000\u0518"+
		"\u25a2\u0001\u0000\u0000\u0000\u051a\u25ab\u0001\u0000\u0000\u0000\u051c"+
		"\u25b2\u0001\u0000\u0000\u0000\u051e\u25b4\u0001\u0000\u0000\u0000\u0520"+
		"\u25bb\u0001\u0000\u0000\u0000\u0522\u25bf\u0001\u0000\u0000\u0000\u0524"+
		"\u25c7\u0001\u0000\u0000\u0000\u0526\u25cb\u0001\u0000\u0000\u0000\u0528"+
		"\u25cd\u0001\u0000\u0000\u0000\u052a\u25e0\u0001\u0000\u0000\u0000\u052c"+
		"\u25e4\u0001\u0000\u0000\u0000\u052e\u25e7\u0001\u0000\u0000\u0000\u0530"+
		"\u25ee\u0001\u0000\u0000\u0000\u0532\u25f3\u0001\u0000\u0000\u0000\u0534"+
		"\u25f5\u0001\u0000\u0000\u0000\u0536\u2605\u0001\u0000\u0000\u0000\u0538"+
		"\u2607\u0001\u0000\u0000\u0000\u053a\u260f\u0001\u0000\u0000\u0000\u053c"+
		"\u2613\u0001\u0000\u0000\u0000\u053e\u261b\u0001\u0000\u0000\u0000\u0540"+
		"\u261d\u0001\u0000\u0000\u0000\u0542\u261f\u0001\u0000\u0000\u0000\u0544"+
		"\u2628\u0001\u0000\u0000\u0000\u0546\u264a\u0001\u0000\u0000\u0000\u0548"+
		"\u264c\u0001\u0000\u0000\u0000\u054a\u264e\u0001\u0000\u0000\u0000\u054c"+
		"\u2650\u0001\u0000\u0000\u0000\u054e\u2652\u0001\u0000\u0000\u0000\u0550"+
		"\u2654\u0001\u0000\u0000\u0000\u0552\u2662\u0001\u0000\u0000\u0000\u0554"+
		"\u2667\u0001\u0000\u0000\u0000\u0556\u266e\u0001\u0000\u0000\u0000\u0558"+
		"\u2670\u0001\u0000\u0000\u0000\u055a\u2675\u0001\u0000\u0000\u0000\u055c"+
		"\u2677\u0001\u0000\u0000\u0000\u055e\u2685\u0001\u0000\u0000\u0000\u0560"+
		"\u268b\u0001\u0000\u0000\u0000\u0562\u2691\u0001\u0000\u0000\u0000\u0564"+
		"\u2697\u0001\u0000\u0000\u0000\u0566\u269f\u0001\u0000\u0000\u0000\u0568"+
		"\u26a8\u0001\u0000\u0000\u0000\u056a\u26aa\u0001\u0000\u0000\u0000\u056c"+
		"\u26ac\u0001\u0000\u0000\u0000\u056e\u26e2\u0001\u0000\u0000\u0000\u0570"+
		"\u26e4\u0001\u0000\u0000\u0000\u0572\u26e6\u0001\u0000\u0000\u0000\u0574"+
		"\u26e8\u0001\u0000\u0000\u0000\u0576\u26ea\u0001\u0000\u0000\u0000\u0578"+
		"\u26f1\u0001\u0000\u0000\u0000\u057a\u2708\u0001\u0000\u0000\u0000\u057c"+
		"\u270a\u0001\u0000\u0000\u0000\u057e\u2710\u0001\u0000\u0000\u0000\u0580"+
		"\u2714\u0001\u0000\u0000\u0000\u0582\u2716\u0001\u0000\u0000\u0000\u0584"+
		"\u271d\u0001\u0000\u0000\u0000\u0586\u2724\u0001\u0000\u0000\u0000\u0588"+
		"\u2727\u0001\u0000\u0000\u0000\u058a\u272b\u0001\u0000\u0000\u0000\u058c"+
		"\u2732\u0001\u0000\u0000\u0000\u058e\u2734\u0001\u0000\u0000\u0000\u0590"+
		"\u274c\u0001\u0000\u0000\u0000\u0592\u274e\u0001\u0000\u0000\u0000\u0594"+
		"\u2755\u0001\u0000\u0000\u0000\u0596\u2757\u0001\u0000\u0000\u0000\u0598"+
		"\u275f\u0001\u0000\u0000\u0000\u059a\u2762\u0001\u0000\u0000\u0000\u059c"+
		"\u2766\u0001\u0000\u0000\u0000\u059e\u2768\u0001\u0000\u0000\u0000\u05a0"+
		"\u276c\u0001\u0000\u0000\u0000\u05a2\u276e\u0001\u0000\u0000\u0000\u05a4"+
		"\u2773\u0001\u0000\u0000\u0000\u05a6\u2778\u0001\u0000\u0000\u0000\u05a8"+
		"\u277e\u0001\u0000\u0000\u0000\u05aa\u2782\u0001\u0000\u0000\u0000\u05ac"+
		"\u2784\u0001\u0000\u0000\u0000\u05ae\u2789\u0001\u0000\u0000\u0000\u05b0"+
		"\u27a7\u0001\u0000\u0000\u0000\u05b2\u27a9\u0001\u0000\u0000\u0000\u05b4"+
		"\u27bb\u0001\u0000\u0000\u0000\u05b6\u27bf\u0001\u0000\u0000\u0000\u05b8"+
		"\u27c1\u0001\u0000\u0000\u0000\u05ba\u27c6\u0001\u0000\u0000\u0000\u05bc"+
		"\u27cf\u0001\u0000\u0000\u0000\u05be\u27d1\u0001\u0000\u0000\u0000\u05c0"+
		"\u27d9\u0001\u0000\u0000\u0000\u05c2\u27dd\u0001\u0000\u0000\u0000\u05c4"+
		"\u27df\u0001\u0000\u0000\u0000\u05c6\u27e3\u0001\u0000\u0000\u0000\u05c8"+
		"\u27ee\u0001\u0000\u0000\u0000\u05ca\u27ff\u0001\u0000\u0000\u0000\u05cc"+
		"\u2805\u0001\u0000\u0000\u0000\u05ce\u2807\u0001\u0000\u0000\u0000\u05d0"+
		"\u2811\u0001\u0000\u0000\u0000\u05d2\u2814\u0001\u0000\u0000\u0000\u05d4"+
		"\u2818\u0001\u0000\u0000\u0000\u05d6\u2820\u0001\u0000\u0000\u0000\u05d8"+
		"\u2822\u0001\u0000\u0000\u0000\u05da\u2825\u0001\u0000\u0000\u0000\u05dc"+
		"\u282a\u0001\u0000\u0000\u0000\u05de\u282f\u0001\u0000\u0000\u0000\u05e0"+
		"\u2845\u0001\u0000\u0000\u0000\u05e2\u2853\u0001\u0000\u0000\u0000\u05e4"+
		"\u2857\u0001\u0000\u0000\u0000\u05e6\u285c\u0001\u0000\u0000\u0000\u05e8"+
		"\u285e\u0001\u0000\u0000\u0000\u05ea\u2860\u0001\u0000\u0000\u0000\u05ec"+
		"\u286c\u0001\u0000\u0000\u0000\u05ee\u286e\u0001\u0000\u0000\u0000\u05f0"+
		"\u2873\u0001\u0000\u0000\u0000\u05f2\u2875\u0001\u0000\u0000\u0000\u05f4"+
		"\u2887\u0001\u0000\u0000\u0000\u05f6\u28a3\u0001\u0000\u0000\u0000\u05f8"+
		"\u28ad\u0001\u0000\u0000\u0000\u05fa\u28b6\u0001\u0000\u0000\u0000\u05fc"+
		"\u28bb\u0001\u0000\u0000\u0000\u05fe\u28bd\u0001\u0000\u0000\u0000\u0600"+
		"\u28c1\u0001\u0000\u0000\u0000\u0602\u28c9\u0001\u0000\u0000\u0000\u0604"+
		"\u28d1\u0001\u0000\u0000\u0000\u0606\u28d3\u0001\u0000\u0000\u0000\u0608"+
		"\u28da\u0001\u0000\u0000\u0000\u060a\u28dd\u0001\u0000\u0000\u0000\u060c"+
		"\u28ed\u0001\u0000\u0000\u0000\u060e\u28ef\u0001\u0000\u0000\u0000\u0610"+
		"\u28fd\u0001\u0000\u0000\u0000\u0612\u28ff\u0001\u0000\u0000\u0000\u0614"+
		"\u291a\u0001\u0000\u0000\u0000\u0616\u291c\u0001\u0000\u0000\u0000\u0618"+
		"\u2927\u0001\u0000\u0000\u0000\u061a\u292d\u0001\u0000\u0000\u0000\u061c"+
		"\u2931\u0001\u0000\u0000\u0000\u061e\u2933\u0001\u0000\u0000\u0000\u0620"+
		"\u293b\u0001\u0000\u0000\u0000\u0622\u2940\u0001\u0000\u0000\u0000\u0624"+
		"\u2953\u0001\u0000\u0000\u0000\u0626\u2955\u0001\u0000\u0000\u0000\u0628"+
		"\u295a\u0001\u0000\u0000\u0000\u062a\u295e\u0001\u0000\u0000\u0000\u062c"+
		"\u2961\u0001\u0000\u0000\u0000\u062e\u2965\u0001\u0000\u0000\u0000\u0630"+
		"\u296f\u0001\u0000\u0000\u0000\u0632\u297d\u0001\u0000\u0000\u0000\u0634"+
		"\u2981\u0001\u0000\u0000\u0000\u0636\u2986\u0001\u0000\u0000\u0000\u0638"+
		"\u2989\u0001\u0000\u0000\u0000\u063a\u298d\u0001\u0000\u0000\u0000\u063c"+
		"\u2992\u0001\u0000\u0000\u0000\u063e\u299d\u0001\u0000\u0000\u0000\u0640"+
		"\u29a1\u0001\u0000\u0000\u0000\u0642\u29a5\u0001\u0000\u0000\u0000\u0644"+
		"\u29a9\u0001\u0000\u0000\u0000\u0646\u29ae\u0001\u0000\u0000\u0000\u0648"+
		"\u29b2\u0001\u0000\u0000\u0000\u064a\u29b4\u0001\u0000\u0000\u0000\u064c"+
		"\u29b6\u0001\u0000\u0000\u0000\u064e\u29be\u0001\u0000\u0000\u0000\u0650"+
		"\u29c0\u0001\u0000\u0000\u0000\u0652\u29c2\u0001\u0000\u0000\u0000\u0654"+
		"\u29c4\u0001\u0000\u0000\u0000\u0656\u29c6\u0001\u0000\u0000\u0000\u0658"+
		"\u29ce\u0001\u0000\u0000\u0000\u065a\u065b\u0003\u0004\u0002\u0000\u065b"+
		"\u065c\u0005\u0000\u0000\u0001\u065c\u0001\u0001\u0000\u0000\u0000\u065d"+
		"\u065e\u0003\u0576\u02bb\u0000\u065e\u0003\u0001\u0000\u0000\u0000\u065f"+
		"\u0660\u0003\u0006\u0003\u0000\u0660\u0005\u0001\u0000\u0000\u0000\u0661"+
		"\u0663\u0003\b\u0004\u0000\u0662\u0664\u0005\u0007\u0000\u0000\u0663\u0662"+
		"\u0001\u0000\u0000\u0000\u0663\u0664\u0001\u0000\u0000\u0000\u0664\u0666"+
		"\u0001\u0000\u0000\u0000\u0665\u0661\u0001\u0000\u0000\u0000\u0666\u0669"+
		"\u0001\u0000\u0000\u0000\u0667\u0665\u0001\u0000\u0000\u0000\u0667\u0668"+
		"\u0001\u0000\u0000\u0000\u0668\u0007\u0001\u0000\u0000\u0000\u0669\u0667"+
		"\u0001\u0000\u0000\u0000\u066a\u06e8\u0003\u01c4\u00e2\u0000\u066b\u06e8"+
		"\u0003\u033a\u019d\u0000\u066c\u06e8\u0003\u0330\u0198\u0000\u066d\u06e8"+
		"\u0003\u0332\u0199\u0000\u066e\u06e8\u0003\u0242\u0121\u0000\u066f\u06e8"+
		"\u0003\u0340\u01a0\u0000\u0670\u06e8\u0003\u01de\u00ef\u0000\u0671\u06e8"+
		"\u0003\u0142\u00a1\u0000\u0672\u06e8\u0003\u0148\u00a4\u0000\u0673\u06e8"+
		"\u0003\u0152\u00a9\u0000\u0674\u06e8\u0003\u016c\u00b6\u0000\u0675\u06e8"+
		"\u0003\u029e\u014f\u0000\u0676\u06e8\u0003&\u0013\u0000\u0677\u06e8\u0003"+
		"\u02d8\u016c\u0000\u0678\u06e8\u0003\u02dc\u016e\u0000\u0679\u06e8\u0003"+
		"\u02e8\u0174\u0000\u067a\u06e8\u0003\u02de\u016f\u0000\u067b\u06e8\u0003"+
		"\u02e6\u0173\u0000\u067c\u06e8\u0003\u0180\u00c0\u0000\u067d\u06e8\u0003"+
		"\u0118\u008c\u0000\u067e\u06e8\u0003\u033c\u019e\u0000\u067f\u06e8\u0003"+
		"`0\u0000\u0680\u06e8\u0003\u02d0\u0168\u0000\u0681\u06e8\u0003\u0086C"+
		"\u0000\u0682\u06e8\u0003\u02f0\u0178\u0000\u0683\u06e8\u0003 \u0010\u0000"+
		"\u0684\u06e8\u0003\u001c\u000e\u0000\u0685\u06e8\u0003\u02f8\u017c\u0000"+
		"\u0686\u06e8\u0003\u0106\u0083\u0000\u0687\u06e8\u0003\u0346\u01a3\u0000"+
		"\u0688\u06e8\u0003\u0344\u01a2\u0000\u0689\u06e8\u0003\u017c\u00be\u0000"+
		"\u068a\u06e8\u0003\u0352\u01a9\u0000\u068b\u06e8\u0003\f\u0006\u0000\u068c"+
		"\u06e8\u0003\\.\u0000\u068d\u06e8\u0003\u008cF\u0000\u068e\u06e8\u0003"+
		"\u034c\u01a6\u0000\u068f\u06e8\u0003\u0216\u010b\u0000\u0690\u06e8\u0003"+
		"V+\u0000\u0691\u06e8\u0003\u008eG\u0000\u0692\u06e8\u0003\u0190\u00c8"+
		"\u0000\u0693\u06e8\u0003\u0108\u0084\u0000\u0694\u06e8\u0003\u01c8\u00e4"+
		"\u0000\u0695\u06e8\u0003\u02b8\u015c\u0000\u0696\u06e8\u0003\u034a\u01a5"+
		"\u0000\u0697\u06e8\u0003\u033e\u019f\u0000\u0698\u06e8\u0003\u013c\u009e"+
		"\u0000\u0699\u06e8\u0003\u014a\u00a5\u0000\u069a\u06e8\u0003\u0164\u00b2"+
		"\u0000\u069b\u06e8\u0003\u016e\u00b7\u0000\u069c\u06e8\u0003\u0268\u0134"+
		"\u0000\u069d\u06e8\u0003$\u0012\u0000\u069e\u06e8\u0003\u010e\u0087\u0000"+
		"\u069f\u06e8\u0003\u01e2\u00f1\u0000\u06a0\u06e8\u0003\u01f0\u00f8\u0000"+
		"\u06a1\u06e8\u0003\u02ea\u0175\u0000\u06a2\u06e8\u0003\u01f2\u00f9\u0000"+
		"\u06a3\u06e8\u0003\u017e\u00bf\u0000\u06a4\u06e8\u0003\u0128\u0094\u0000"+
		"\u06a5\u06e8\u0003*\u0015\u0000\u06a6\u06e8\u0003\u0116\u008b\u0000\u06a7"+
		"\u06e8\u0003\u00acV\u0000\u06a8\u06e8\u0003\u02f2\u0179\u0000\u06a9\u06e8"+
		"\u0003\u0104\u0082\u0000\u06aa\u06e8\u0003\u0136\u009b\u0000\u06ab\u06e8"+
		"\u0003\u02c0\u0160\u0000\u06ac\u06e8\u0003\u0194\u00ca\u0000\u06ad\u06e8"+
		"\u0003\u01bc\u00de\u0000\u06ae\u06e8\u0003\u000e\u0007\u0000\u06af\u06e8"+
		"\u0003\u001a\r\u0000\u06b0\u06e8\u0003\u0176\u00bb\u0000\u06b1\u06e8\u0003"+
		"\u0324\u0192\u0000\u06b2\u06e8\u0003\u0384\u01c2\u0000\u06b3\u06e8\u0003"+
		"\u03b8\u01dc\u0000\u06b4\u06e8\u0003\u01ca\u00e5\u0000\u06b5\u06e8\u0003"+
		"\u03a0\u01d0\u0000\u06b6\u06e8\u0003^/\u0000\u06b7\u06e8\u0003\u02b2\u0159"+
		"\u0000\u06b8\u06e8\u0003\u02bc\u015e\u0000\u06b9\u06e8\u0003\u01f8\u00fc"+
		"\u0000\u06ba\u06e8\u0003\u01fa\u00fd\u0000\u06bb\u06e8\u0003\u01fc\u00fe"+
		"\u0000\u06bc\u06e8\u0003\u0200\u0100\u0000\u06bd\u06e8\u0003\u02fa\u017d"+
		"\u0000\u06be\u06e8\u0003\u013a\u009d\u0000\u06bf\u06e8\u0003\u02c4\u0162"+
		"\u0000\u06c0\u06e8\u0003\"\u0011\u0000\u06c1\u06e8\u0003\u017a\u00bd\u0000"+
		"\u06c2\u06e8\u0003\u0334\u019a\u0000\u06c3\u06e8\u0003\u0380\u01c0\u0000"+
		"\u06c4\u06e8\u0003\u036e\u01b7\u0000\u06c5\u06e8\u0003\u0220\u0110\u0000"+
		"\u06c6\u06e8\u0003\u0228\u0114\u0000\u06c7\u06e8\u0003\u023a\u011d\u0000"+
		"\u06c8\u06e8\u0003\u0170\u00b8\u0000\u06c9\u06e8\u0003\u024c\u0126\u0000"+
		"\u06ca\u06e8\u0003\u0386\u01c3\u0000\u06cb\u06e8\u0003\u0398\u01cc\u0000"+
		"\u06cc\u06e8\u0003\u030e\u0187\u0000\u06cd\u06e8\u0003\u0114\u008a\u0000"+
		"\u06ce\u06e8\u0003\u0322\u0191\u0000\u06cf\u06e8\u0003\u03a4\u01d2\u0000"+
		"\u06d0\u06e8\u0003\u030a\u0185\u0000\u06d1\u06e8\u0003\u037a\u01bd\u0000"+
		"\u06d2\u06e8\u0003\u01fe\u00ff\u0000\u06d3\u06e8\u0003\u02c6\u0163\u0000"+
		"\u06d4\u06e8\u0003\u02a6\u0153\u0000\u06d5\u06e8\u0003\u02a4\u0152\u0000"+
		"\u06d6\u06e8\u0003\u02a8\u0154\u0000\u06d7\u06e8\u0003\u02d2\u0169\u0000"+
		"\u06d8\u06e8\u0003\u022a\u0115\u0000\u06d9\u06e8\u0003\u023c\u011e\u0000"+
		"\u06da\u06e8\u0003\u02fc\u017e\u0000\u06db\u06e8\u0003\u021a\u010d\u0000"+
		"\u06dc\u06e8\u0003\u03c0\u01e0\u0000\u06dd\u06e8\u0003\u0312\u0189\u0000"+
		"\u06de\u06e8\u0003\u0212\u0109\u0000\u06df\u06e8\u0003\u0310\u0188\u0000"+
		"\u06e0\u06e8\u0003\u03ae\u01d7\u0000\u06e1\u06e8\u0003\u0350\u01a8\u0000"+
		"\u06e2\u06e8\u0003J%\u0000\u06e3\u06e8\u00032\u0019\u0000\u06e4\u06e8"+
		"\u0003T*\u0000\u06e5\u06e8\u0003\u031e\u018f\u0000\u06e6\u06e8\u0003\n"+
		"\u0005\u0000\u06e7\u066a\u0001\u0000\u0000\u0000\u06e7\u066b\u0001\u0000"+
		"\u0000\u0000\u06e7\u066c\u0001\u0000\u0000\u0000\u06e7\u066d\u0001\u0000"+
		"\u0000\u0000\u06e7\u066e\u0001\u0000\u0000\u0000\u06e7\u066f\u0001\u0000"+
		"\u0000\u0000\u06e7\u0670\u0001\u0000\u0000\u0000\u06e7\u0671\u0001\u0000"+
		"\u0000\u0000\u06e7\u0672\u0001\u0000\u0000\u0000\u06e7\u0673\u0001\u0000"+
		"\u0000\u0000\u06e7\u0674\u0001\u0000\u0000\u0000\u06e7\u0675\u0001\u0000"+
		"\u0000\u0000\u06e7\u0676\u0001\u0000\u0000\u0000\u06e7\u0677\u0001\u0000"+
		"\u0000\u0000\u06e7\u0678\u0001\u0000\u0000\u0000\u06e7\u0679\u0001\u0000"+
		"\u0000\u0000\u06e7\u067a\u0001\u0000\u0000\u0000\u06e7\u067b\u0001\u0000"+
		"\u0000\u0000\u06e7\u067c\u0001\u0000\u0000\u0000\u06e7\u067d\u0001\u0000"+
		"\u0000\u0000\u06e7\u067e\u0001\u0000\u0000\u0000\u06e7\u067f\u0001\u0000"+
		"\u0000\u0000\u06e7\u0680\u0001\u0000\u0000\u0000\u06e7\u0681\u0001\u0000"+
		"\u0000\u0000\u06e7\u0682\u0001\u0000\u0000\u0000\u06e7\u0683\u0001\u0000"+
		"\u0000\u0000\u06e7\u0684\u0001\u0000\u0000\u0000\u06e7\u0685\u0001\u0000"+
		"\u0000\u0000\u06e7\u0686\u0001\u0000\u0000\u0000\u06e7\u0687\u0001\u0000"+
		"\u0000\u0000\u06e7\u0688\u0001\u0000\u0000\u0000\u06e7\u0689\u0001\u0000"+
		"\u0000\u0000\u06e7\u068a\u0001\u0000\u0000\u0000\u06e7\u068b\u0001\u0000"+
		"\u0000\u0000\u06e7\u068c\u0001\u0000\u0000\u0000\u06e7\u068d\u0001\u0000"+
		"\u0000\u0000\u06e7\u068e\u0001\u0000\u0000\u0000\u06e7\u068f\u0001\u0000"+
		"\u0000\u0000\u06e7\u0690\u0001\u0000\u0000\u0000\u06e7\u0691\u0001\u0000"+
		"\u0000\u0000\u06e7\u0692\u0001\u0000\u0000\u0000\u06e7\u0693\u0001\u0000"+
		"\u0000\u0000\u06e7\u0694\u0001\u0000\u0000\u0000\u06e7\u0695\u0001\u0000"+
		"\u0000\u0000\u06e7\u0696\u0001\u0000\u0000\u0000\u06e7\u0697\u0001\u0000"+
		"\u0000\u0000\u06e7\u0698\u0001\u0000\u0000\u0000\u06e7\u0699\u0001\u0000"+
		"\u0000\u0000\u06e7\u069a\u0001\u0000\u0000\u0000\u06e7\u069b\u0001\u0000"+
		"\u0000\u0000\u06e7\u069c\u0001\u0000\u0000\u0000\u06e7\u069d\u0001\u0000"+
		"\u0000\u0000\u06e7\u069e\u0001\u0000\u0000\u0000\u06e7\u069f\u0001\u0000"+
		"\u0000\u0000\u06e7\u06a0\u0001\u0000\u0000\u0000\u06e7\u06a1\u0001\u0000"+
		"\u0000\u0000\u06e7\u06a2\u0001\u0000\u0000\u0000\u06e7\u06a3\u0001\u0000"+
		"\u0000\u0000\u06e7\u06a4\u0001\u0000\u0000\u0000\u06e7\u06a5\u0001\u0000"+
		"\u0000\u0000\u06e7\u06a6\u0001\u0000\u0000\u0000\u06e7\u06a7\u0001\u0000"+
		"\u0000\u0000\u06e7\u06a8\u0001\u0000\u0000\u0000\u06e7\u06a9\u0001\u0000"+
		"\u0000\u0000\u06e7\u06aa\u0001\u0000\u0000\u0000\u06e7\u06ab\u0001\u0000"+
		"\u0000\u0000\u06e7\u06ac\u0001\u0000\u0000\u0000\u06e7\u06ad\u0001\u0000"+
		"\u0000\u0000\u06e7\u06ae\u0001\u0000\u0000\u0000\u06e7\u06af\u0001\u0000"+
		"\u0000\u0000\u06e7\u06b0\u0001\u0000\u0000\u0000\u06e7\u06b1\u0001\u0000"+
		"\u0000\u0000\u06e7\u06b2\u0001\u0000\u0000\u0000\u06e7\u06b3\u0001\u0000"+
		"\u0000\u0000\u06e7\u06b4\u0001\u0000\u0000\u0000\u06e7\u06b5\u0001\u0000"+
		"\u0000\u0000\u06e7\u06b6\u0001\u0000\u0000\u0000\u06e7\u06b7\u0001\u0000"+
		"\u0000\u0000\u06e7\u06b8\u0001\u0000\u0000\u0000\u06e7\u06b9\u0001\u0000"+
		"\u0000\u0000\u06e7\u06ba\u0001\u0000\u0000\u0000\u06e7\u06bb\u0001\u0000"+
		"\u0000\u0000\u06e7\u06bc\u0001\u0000\u0000\u0000\u06e7\u06bd\u0001\u0000"+
		"\u0000\u0000\u06e7\u06be\u0001\u0000\u0000\u0000\u06e7\u06bf\u0001\u0000"+
		"\u0000\u0000\u06e7\u06c0\u0001\u0000\u0000\u0000\u06e7\u06c1\u0001\u0000"+
		"\u0000\u0000\u06e7\u06c2\u0001\u0000\u0000\u0000\u06e7\u06c3\u0001\u0000"+
		"\u0000\u0000\u06e7\u06c4\u0001\u0000\u0000\u0000\u06e7\u06c5\u0001\u0000"+
		"\u0000\u0000\u06e7\u06c6\u0001\u0000\u0000\u0000\u06e7\u06c7\u0001\u0000"+
		"\u0000\u0000\u06e7\u06c8\u0001\u0000\u0000\u0000\u06e7\u06c9\u0001\u0000"+
		"\u0000\u0000\u06e7\u06ca\u0001\u0000\u0000\u0000\u06e7\u06cb\u0001\u0000"+
		"\u0000\u0000\u06e7\u06cc\u0001\u0000\u0000\u0000\u06e7\u06cd\u0001\u0000"+
		"\u0000\u0000\u06e7\u06ce\u0001\u0000\u0000\u0000\u06e7\u06cf\u0001\u0000"+
		"\u0000\u0000\u06e7\u06d0\u0001\u0000\u0000\u0000\u06e7\u06d1\u0001\u0000"+
		"\u0000\u0000\u06e7\u06d2\u0001\u0000\u0000\u0000\u06e7\u06d3\u0001\u0000"+
		"\u0000\u0000\u06e7\u06d4\u0001\u0000\u0000\u0000\u06e7\u06d5\u0001\u0000"+
		"\u0000\u0000\u06e7\u06d6\u0001\u0000\u0000\u0000\u06e7\u06d7\u0001\u0000"+
		"\u0000\u0000\u06e7\u06d8\u0001\u0000\u0000\u0000\u06e7\u06d9\u0001\u0000"+
		"\u0000\u0000\u06e7\u06da\u0001\u0000\u0000\u0000\u06e7\u06db\u0001\u0000"+
		"\u0000\u0000\u06e7\u06dc\u0001\u0000\u0000\u0000\u06e7\u06dd\u0001\u0000"+
		"\u0000\u0000\u06e7\u06de\u0001\u0000\u0000\u0000\u06e7\u06df\u0001\u0000"+
		"\u0000\u0000\u06e7\u06e0\u0001\u0000\u0000\u0000\u06e7\u06e1\u0001\u0000"+
		"\u0000\u0000\u06e7\u06e2\u0001\u0000\u0000\u0000\u06e7\u06e3\u0001\u0000"+
		"\u0000\u0000\u06e7\u06e4\u0001\u0000\u0000\u0000\u06e7\u06e5\u0001\u0000"+
		"\u0000\u0000\u06e7\u06e6\u0001\u0000\u0000\u0000\u06e8\t\u0001\u0000\u0000"+
		"\u0000\u06e9\u06eb\u0005\u029c\u0000\u0000\u06ea\u06ec\u0005\u029d\u0000"+
		"\u0000\u06eb\u06ea\u0001\u0000\u0000\u0000\u06eb\u06ec\u0001\u0000\u0000"+
		"\u0000\u06ec\u000b\u0001\u0000\u0000\u0000\u06ed\u06ee\u0005\u01b1\u0000"+
		"\u0000\u06ee\u06ef\u0003\u04bc\u025e\u0000\u06ef\r\u0001\u0000\u0000\u0000"+
		"\u06f0\u06f1\u0005.\u0000\u0000\u06f1\u06f2\u0005\u0137\u0000\u0000\u06f2"+
		"\u06f3\u0003\u0558\u02ac\u0000\u06f3\u06f4\u0003\u0010\b\u0000\u06f4\u06f5"+
		"\u0003\u0012\t\u0000\u06f5\u000f\u0001\u0000\u0000\u0000\u06f6\u06f9\u0005"+
		"i\u0000\u0000\u06f7\u06f9\u0001\u0000\u0000\u0000\u06f8\u06f6\u0001\u0000"+
		"\u0000\u0000\u06f8\u06f7\u0001\u0000\u0000\u0000\u06f9\u0011\u0001\u0000"+
		"\u0000\u0000\u06fa\u06fc\u0003\u0018\f\u0000\u06fb\u06fa\u0001\u0000\u0000"+
		"\u0000\u06fc\u06ff\u0001\u0000\u0000\u0000\u06fd\u06fb\u0001\u0000\u0000"+
		"\u0000\u06fd\u06fe\u0001\u0000\u0000\u0000\u06fe\u0013\u0001\u0000\u0000"+
		"\u0000\u06ff\u06fd\u0001\u0000\u0000\u0000\u0700\u0702\u0003\u0016\u000b"+
		"\u0000\u0701\u0700\u0001\u0000\u0000\u0000\u0702\u0705\u0001\u0000\u0000"+
		"\u0000\u0703\u0701\u0001\u0000\u0000\u0000\u0703\u0704\u0001\u0000\u0000"+
		"\u0000\u0704\u0015\u0001\u0000\u0000\u0000\u0705\u0703\u0001\u0000\u0000"+
		"\u0000\u0706\u0709\u0005\u0118\u0000\u0000\u0707\u070a\u0003\u0550\u02a8"+
		"\u0000\u0708\u070a\u0005N\u0000\u0000\u0709\u0707\u0001\u0000\u0000\u0000"+
		"\u0709\u0708\u0001\u0000\u0000\u0000\u070a\u0719\u0001\u0000\u0000\u0000"+
		"\u070b\u070c\u0007\u0000\u0000\u0000\u070c\u070d\u0005\u0118\u0000\u0000"+
		"\u070d\u0719\u0003\u0550\u02a8\u0000\u070e\u0719\u0005\u00e4\u0000\u0000"+
		"\u070f\u0710\u0005\u00a4\u0000\u0000\u0710\u0711\u0005J\u0000\u0000\u0711"+
		"\u0719\u0003\u0556\u02ab\u0000\u0712\u0713\u0005\u016c\u0000\u0000\u0713"+
		"\u0714\u0005\u0169\u0000\u0000\u0714\u0719\u0003\u0550\u02a8\u0000\u0715"+
		"\u0716\u0005c\u0000\u0000\u0716\u0719\u0003\u055c\u02ae\u0000\u0717\u0719"+
		"\u0003\u0568\u02b4\u0000\u0718\u0706\u0001\u0000\u0000\u0000\u0718\u070b"+
		"\u0001\u0000\u0000\u0000\u0718\u070e\u0001\u0000\u0000\u0000\u0718\u070f"+
		"\u0001\u0000\u0000\u0000\u0718\u0712\u0001\u0000\u0000\u0000\u0718\u0715"+
		"\u0001\u0000\u0000\u0000\u0718\u0717\u0001\u0000\u0000\u0000\u0719\u0017"+
		"\u0001\u0000\u0000\u0000\u071a\u0725\u0003\u0016\u000b\u0000\u071b\u071c"+
		"\u0005\u0155\u0000\u0000\u071c\u0725\u0003\u054e\u02a7\u0000\u071d\u071e"+
		"\u0005\u0086\u0000\u0000\u071e\u0725\u0003\u055c\u02ae\u0000\u071f\u0720"+
		"\u0005\u0137\u0000\u0000\u0720\u0725\u0003\u055c\u02ae\u0000\u0721\u0722"+
		"\u0005D\u0000\u0000\u0722\u0723\u0007\u0001\u0000\u0000\u0723\u0725\u0003"+
		"\u055c\u02ae\u0000\u0724\u071a\u0001\u0000\u0000\u0000\u0724\u071b\u0001"+
		"\u0000\u0000\u0000\u0724\u071d\u0001\u0000\u0000\u0000\u0724\u071f\u0001"+
		"\u0000\u0000\u0000\u0724\u0721\u0001\u0000\u0000\u0000\u0725\u0019\u0001"+
		"\u0000\u0000\u0000\u0726\u0727\u0005.\u0000\u0000\u0727\u0728\u0005c\u0000"+
		"\u0000\u0728\u0729\u0003\u0558\u02ac\u0000\u0729\u072a\u0003\u0010\b\u0000"+
		"\u072a\u072b\u0003\u0012\t\u0000\u072b\u001b\u0001\u0000\u0000\u0000\u072c"+
		"\u072d\u0005\u008a\u0000\u0000\u072d\u072e\u0007\u0002\u0000\u0000\u072e"+
		"\u072f\u0003\u055a\u02ad\u0000\u072f\u0730\u0003\u0010\b\u0000\u0730\u0731"+
		"\u0003\u0014\n\u0000\u0731\u001d\u0001\u0000\u0000\u0000\u0732\u0737\u0001"+
		"\u0000\u0000\u0000\u0733\u0734\u0005D\u0000\u0000\u0734\u0735\u0005\u00af"+
		"\u0000\u0000\u0735\u0737\u0003\u053e\u029f\u0000\u0736\u0732\u0001\u0000"+
		"\u0000\u0000\u0736\u0733\u0001\u0000\u0000\u0000\u0737\u001f\u0001\u0000"+
		"\u0000\u0000\u0738\u0739\u0005\u008a\u0000\u0000\u0739\u073b\u0007\u0002"+
		"\u0000\u0000\u073a\u073c\u0005\u001e\u0000\u0000\u073b\u073a\u0001\u0000"+
		"\u0000\u0000\u073b\u073c\u0001\u0000\u0000\u0000\u073c\u073d\u0001\u0000"+
		"\u0000\u0000\u073d\u073e\u0003\u055a\u02ad\u0000\u073e\u073f\u0003\u001e"+
		"\u000f\u0000\u073f\u0740\u0003P(\u0000\u0740!\u0001\u0000\u0000\u0000"+
		"\u0741\u0742\u0005\u00bf\u0000\u0000\u0742\u0745\u0007\u0003\u0000\u0000"+
		"\u0743\u0744\u0005\u00dc\u0000\u0000\u0744\u0746\u0005\u0185\u0000\u0000"+
		"\u0745\u0743\u0001\u0000\u0000\u0000\u0745\u0746\u0001\u0000\u0000\u0000"+
		"\u0746\u0747\u0001\u0000\u0000\u0000\u0747\u0748\u0003\u055c\u02ae\u0000"+
		"\u0748#\u0001\u0000\u0000\u0000\u0749\u074a\u0005.\u0000\u0000\u074a\u074b"+
		"\u0005B\u0000\u0000\u074b\u074c\u0003\u0558\u02ac\u0000\u074c\u074d\u0003"+
		"\u0010\b\u0000\u074d\u074e\u0003\u0012\t\u0000\u074e%\u0001\u0000\u0000"+
		"\u0000\u074f\u0750\u0005\u008a\u0000\u0000\u0750\u0751\u0005B\u0000\u0000"+
		"\u0751\u0752\u0003\u055a\u02ad\u0000\u0752\u0753\u0003(\u0014\u0000\u0753"+
		"\u0754\u0005c\u0000\u0000\u0754\u0755\u0003\u055c\u02ae\u0000\u0755\'"+
		"\u0001\u0000\u0000\u0000\u0756\u0757\u0007\u0004\u0000\u0000\u0757)\u0001"+
		"\u0000\u0000\u0000\u0758\u0759\u0005.\u0000\u0000\u0759\u075d\u0005\u013c"+
		"\u0000\u0000\u075a\u075b\u0005\u00dc\u0000\u0000\u075b\u075c\u0005M\u0000"+
		"\u0000\u075c\u075e\u0005\u0185\u0000\u0000\u075d\u075a\u0001\u0000\u0000"+
		"\u0000\u075d\u075e\u0001\u0000\u0000\u0000\u075e\u0764\u0001\u0000\u0000"+
		"\u0000\u075f\u0760\u0003,\u0016\u0000\u0760\u0761\u0005j\u0000\u0000\u0761"+
		"\u0762\u0003\u055a\u02ad\u0000\u0762\u0765\u0001\u0000\u0000\u0000\u0763"+
		"\u0765\u0003\u055e\u02af\u0000\u0764\u075f\u0001\u0000\u0000\u0000\u0764"+
		"\u0763\u0001\u0000\u0000\u0000\u0765\u0766\u0001\u0000\u0000\u0000\u0766"+
		"\u0767\u0003.\u0017\u0000\u0767+\u0001\u0000\u0000\u0000\u0768\u076b\u0003"+
		"\u055e\u02af\u0000\u0769\u076b\u0001\u0000\u0000\u0000\u076a\u0768\u0001"+
		"\u0000\u0000\u0000\u076a\u0769\u0001\u0000\u0000\u0000\u076b-\u0001\u0000"+
		"\u0000\u0000\u076c\u076e\u00030\u0018\u0000\u076d\u076c\u0001\u0000\u0000"+
		"\u0000\u076e\u0771\u0001\u0000\u0000\u0000\u076f\u076d\u0001\u0000\u0000"+
		"\u0000\u076f\u0770\u0001\u0000\u0000\u0000\u0770/\u0001\u0000\u0000\u0000"+
		"\u0771\u076f\u0001\u0000\u0000\u0000\u0772\u0779\u0003\u00acV\u0000\u0773"+
		"\u0779\u0003\u024c\u0126\u0000\u0774\u0779\u0003\u0116\u008b\u0000\u0775"+
		"\u0779\u0003\u0194\u00ca\u0000\u0776\u0779\u0003\u0228\u0114\u0000\u0777"+
		"\u0779\u0003\u031e\u018f\u0000\u0778\u0772\u0001\u0000\u0000\u0000\u0778"+
		"\u0773\u0001\u0000\u0000\u0000\u0778\u0774\u0001\u0000\u0000\u0000\u0778"+
		"\u0775\u0001\u0000\u0000\u0000\u0778\u0776\u0001\u0000\u0000\u0000\u0778"+
		"\u0777\u0001\u0000\u0000\u0000\u07791\u0001\u0000\u0000\u0000\u077a\u077c"+
		"\u0005\u0146\u0000\u0000\u077b\u077d\u0007\u0005\u0000\u0000\u077c\u077b"+
		"\u0001\u0000\u0000\u0000\u077c\u077d\u0001\u0000\u0000\u0000\u077d\u077e"+
		"\u0001\u0000\u0000\u0000\u077e\u077f\u00034\u001a\u0000\u077f3\u0001\u0000"+
		"\u0000\u0000\u0780\u0781\u0005\u015d\u0000\u0000\u0781\u0789\u0003\u0318"+
		"\u018c\u0000\u0782\u0783\u0005\u0145\u0000\u0000\u0783\u0784\u0005\u009a"+
		"\u0000\u0000\u0784\u0785\u0005$\u0000\u0000\u0785\u0786\u0005\u015d\u0000"+
		"\u0000\u0786\u0789\u0003\u0318\u018c\u0000\u0787\u0789\u00038\u001c\u0000"+
		"\u0788\u0780\u0001\u0000\u0000\u0000\u0788\u0782\u0001\u0000\u0000\u0000"+
		"\u0788\u0787\u0001\u0000\u0000\u0000\u07895\u0001\u0000\u0000\u0000\u078a"+
		"\u078b\u0003:\u001d\u0000\u078b\u078c\u0007\u0006\u0000\u0000\u078c\u078d"+
		"\u0003<\u001e\u0000\u078d7\u0001\u0000\u0000\u0000\u078e\u07a8\u00036"+
		"\u001b\u0000\u078f\u0790\u0003:\u001d\u0000\u0790\u0791\u0005@\u0000\u0000"+
		"\u0791\u0792\u0005\u01b2\u0000\u0000\u0792\u07a8\u0001\u0000\u0000\u0000"+
		"\u0793\u0794\u0005\u019b\u0000\u0000\u0794\u0795\u0005\u017b\u0000\u0000"+
		"\u0795\u07a8\u0003D\"\u0000\u0796\u0797\u0005\u0098\u0000\u0000\u0797"+
		"\u07a8\u0003\u0550\u02a8\u0000\u0798\u0799\u0005\u013c\u0000\u0000\u0799"+
		"\u07a8\u0003\u0550\u02a8\u0000\u079a\u079b\u0005\u0104\u0000\u0000\u079b"+
		"\u07a8\u0003F#\u0000\u079c\u079d\u0005\u0137\u0000\u0000\u079d\u07a8\u0003"+
		"H$\u0000\u079e\u079f\u0005\u0145\u0000\u0000\u079f\u07a0\u0005j\u0000"+
		"\u0000\u07a0\u07a8\u0003H$\u0000\u07a1\u07a2\u0005\u0178\u0000\u0000\u07a2"+
		"\u07a3\u0005\u0110\u0000\u0000\u07a3\u07a8\u0003\u04ce\u0267\u0000\u07a4"+
		"\u07a5\u0005\u015d\u0000\u0000\u07a5\u07a6\u0005\u014a\u0000\u0000\u07a6"+
		"\u07a8\u0003\u0550\u02a8\u0000\u07a7\u078e\u0001\u0000\u0000\u0000\u07a7"+
		"\u078f\u0001\u0000\u0000\u0000\u07a7\u0793\u0001\u0000\u0000\u0000\u07a7"+
		"\u0796\u0001\u0000\u0000\u0000\u07a7\u0798\u0001\u0000\u0000\u0000\u07a7"+
		"\u079a\u0001\u0000\u0000\u0000\u07a7\u079c\u0001\u0000\u0000\u0000\u07a7"+
		"\u079e\u0001\u0000\u0000\u0000\u07a7\u07a1\u0001\u0000\u0000\u0000\u07a7"+
		"\u07a4\u0001\u0000\u0000\u0000\u07a89\u0001\u0000\u0000\u0000\u07a9\u07ae"+
		"\u0003\u055e\u02af\u0000\u07aa\u07ab\u0005\u000b\u0000\u0000\u07ab\u07ad"+
		"\u0003\u055e\u02af\u0000\u07ac\u07aa\u0001\u0000\u0000\u0000\u07ad\u07b0"+
		"\u0001\u0000\u0000\u0000\u07ae\u07ac\u0001\u0000\u0000\u0000\u07ae\u07af"+
		"\u0001\u0000\u0000\u0000\u07af;\u0001\u0000\u0000\u0000\u07b0\u07ae\u0001"+
		"\u0000\u0000\u0000\u07b1\u07b6\u0003>\u001f\u0000\u07b2\u07b3\u0005\u0006"+
		"\u0000\u0000\u07b3\u07b5\u0003>\u001f\u0000\u07b4\u07b2\u0001\u0000\u0000"+
		"\u0000\u07b5\u07b8\u0001\u0000\u0000\u0000\u07b6\u07b4\u0001\u0000\u0000"+
		"\u0000\u07b6\u07b7\u0001\u0000\u0000\u0000\u07b7=\u0001\u0000\u0000\u0000"+
		"\u07b8\u07b6\u0001\u0000\u0000\u0000\u07b9\u07bc\u0003B!\u0000\u07ba\u07bc"+
		"\u0003\u0124\u0092\u0000\u07bb\u07b9\u0001\u0000\u0000\u0000\u07bb\u07ba"+
		"\u0001\u0000\u0000\u0000\u07bc?\u0001\u0000\u0000\u0000\u07bd\u07be\u0005"+
		"\u0125\u0000\u0000\u07be\u07c3\u0007\u0007\u0000\u0000\u07bf\u07c0\u0005"+
		"\u012f\u0000\u0000\u07c0\u07c3\u0005\u0125\u0000\u0000\u07c1\u07c3\u0005"+
		"\u0143\u0000\u0000\u07c2\u07bd\u0001\u0000\u0000\u0000\u07c2\u07bf\u0001"+
		"\u0000\u0000\u0000\u07c2\u07c1\u0001\u0000\u0000\u0000\u07c3A\u0001\u0000"+
		"\u0000\u0000\u07c4\u07c9\u0005`\u0000\u0000\u07c5\u07c9\u0005<\u0000\u0000"+
		"\u07c6\u07c9\u0005P\u0000\u0000\u07c7\u07c9\u0003H$\u0000\u07c8\u07c4"+
		"\u0001\u0000\u0000\u0000\u07c8\u07c5\u0001\u0000\u0000\u0000\u07c8\u07c6"+
		"\u0001\u0000\u0000\u0000\u07c8\u07c7\u0001\u0000\u0000\u0000\u07c9C\u0001"+
		"\u0000\u0000\u0000\u07ca\u07da\u0003\u0550\u02a8\u0000\u07cb\u07da\u0003"+
		"\u0568\u02b4\u0000\u07cc\u07cd\u0003\u0482\u0241\u0000\u07cd\u07ce\u0003"+
		"\u0550\u02a8\u0000\u07ce\u07cf\u0003\u0486\u0243\u0000\u07cf\u07da\u0001"+
		"\u0000\u0000\u0000\u07d0\u07d1\u0003\u0482\u0241\u0000\u07d1\u07d2\u0005"+
		"\u0002\u0000\u0000\u07d2\u07d3\u0003\u054e\u02a7\u0000\u07d3\u07d4\u0005"+
		"\u0003\u0000\u0000\u07d4\u07d5\u0003\u0550\u02a8\u0000\u07d5\u07da\u0001"+
		"\u0000\u0000\u0000\u07d6\u07da\u0003\u0124\u0092\u0000\u07d7\u07da\u0005"+
		"5\u0000\u0000\u07d8\u07da\u0005\u00f5\u0000\u0000\u07d9\u07ca\u0001\u0000"+
		"\u0000\u0000\u07d9\u07cb\u0001\u0000\u0000\u0000\u07d9\u07cc\u0001\u0000"+
		"\u0000\u0000\u07d9\u07d0\u0001\u0000\u0000\u0000\u07d9\u07d6\u0001\u0000"+
		"\u0000\u0000\u07d9\u07d7\u0001\u0000\u0000\u0000\u07d9\u07d8\u0001\u0000"+
		"\u0000\u0000\u07daE\u0001\u0000\u0000\u0000\u07db\u07df\u0003\u0550\u02a8"+
		"\u0000\u07dc\u07df\u00055\u0000\u0000\u07dd\u07df\u0001\u0000\u0000\u0000"+
		"\u07de\u07db\u0001\u0000\u0000\u0000\u07de\u07dc\u0001\u0000\u0000\u0000"+
		"\u07de\u07dd\u0001\u0000\u0000\u0000\u07dfG\u0001\u0000\u0000\u0000\u07e0"+
		"\u07e3\u0003\u0564\u02b2\u0000\u07e1\u07e3\u0003\u0550\u02a8\u0000\u07e2"+
		"\u07e0\u0001\u0000\u0000\u0000\u07e2\u07e1\u0001\u0000\u0000\u0000\u07e3"+
		"I\u0001\u0000\u0000\u0000\u07e4\u07e5\u0005\u0132\u0000\u0000\u07e5\u07e6"+
		"\u0003L&\u0000\u07e6K\u0001\u0000\u0000\u0000\u07e7\u07f0\u0003N\'\u0000"+
		"\u07e8\u07e9\u0005\u019b\u0000\u0000\u07e9\u07f0\u0005\u017b\u0000\u0000"+
		"\u07ea\u07eb\u0005\u015d\u0000\u0000\u07eb\u07ec\u0005\u00eb\u0000\u0000"+
		"\u07ec\u07f0\u0005\u00f2\u0000\u0000\u07ed\u07ee\u0005\u0145\u0000\u0000"+
		"\u07ee\u07f0\u0005j\u0000\u0000\u07ef\u07e7\u0001\u0000\u0000\u0000\u07ef"+
		"\u07e8\u0001\u0000\u0000\u0000\u07ef\u07ea\u0001\u0000\u0000\u0000\u07ef"+
		"\u07ed\u0001\u0000\u0000\u0000\u07f0M\u0001\u0000\u0000\u0000\u07f1\u07f4"+
		"\u0003:\u001d\u0000\u07f2\u07f4\u0005\u001e\u0000\u0000\u07f3\u07f1\u0001"+
		"\u0000\u0000\u0000\u07f3\u07f2\u0001\u0000\u0000\u0000\u07f4O\u0001\u0000"+
		"\u0000\u0000\u07f5\u07f6\u0005\u0146\u0000\u0000\u07f6\u07f9\u00034\u001a"+
		"\u0000\u07f7\u07f9\u0003J%\u0000\u07f8\u07f5\u0001\u0000\u0000\u0000\u07f8"+
		"\u07f7\u0001\u0000\u0000\u0000\u07f9Q\u0001\u0000\u0000\u0000\u07fa\u07fb"+
		"\u0005\u0146\u0000\u0000\u07fb\u07fe\u00038\u001c\u0000\u07fc\u07fe\u0003"+
		"J%\u0000\u07fd\u07fa\u0001\u0000\u0000\u0000\u07fd\u07fc\u0001\u0000\u0000"+
		"\u0000\u07feS\u0001\u0000\u0000\u0000\u07ff\u0809\u0005\u0148\u0000\u0000"+
		"\u0800\u080a\u0003:\u001d\u0000\u0801\u0802\u0005\u019b\u0000\u0000\u0802"+
		"\u080a\u0005\u017b\u0000\u0000\u0803\u0804\u0005\u015d\u0000\u0000\u0804"+
		"\u0805\u0005\u00eb\u0000\u0000\u0805\u080a\u0005\u00f2\u0000\u0000\u0806"+
		"\u0807\u0005\u0145\u0000\u0000\u0807\u080a\u0005j\u0000\u0000\u0808\u080a"+
		"\u0005\u001e\u0000\u0000\u0809\u0800\u0001\u0000\u0000\u0000\u0809\u0801"+
		"\u0001\u0000\u0000\u0000\u0809\u0803\u0001\u0000\u0000\u0000\u0809\u0806"+
		"\u0001\u0000\u0000\u0000\u0809\u0808\u0001\u0000\u0000\u0000\u080aU\u0001"+
		"\u0000\u0000\u0000\u080b\u080c\u0005\u0146\u0000\u0000\u080c\u080d\u0005"+
		"\u00a5\u0000\u0000\u080d\u080e\u0003X,\u0000\u080e\u080f\u0003Z-\u0000"+
		"\u080fW\u0001\u0000\u0000\u0000\u0810\u0813\u0005\u001e\u0000\u0000\u0811"+
		"\u0813\u0003\u0538\u029c\u0000\u0812\u0810\u0001\u0000\u0000\u0000\u0812"+
		"\u0811\u0001\u0000\u0000\u0000\u0813Y\u0001\u0000\u0000\u0000\u0814\u0815"+
		"\u0007\b\u0000\u0000\u0815[\u0001\u0000\u0000\u0000\u0816\u0817\u0005"+
		"\u009b\u0000\u0000\u0817]\u0001\u0000\u0000\u0000\u0818\u0819\u0005\u00bb"+
		"\u0000\u0000\u0819\u081a\u0007\t\u0000\u0000\u081a_\u0001\u0000\u0000"+
		"\u0000\u081b\u081c\u0005\u008a\u0000\u0000\u081c\u081f\u0005\\\u0000\u0000"+
		"\u081d\u081e\u0005\u00dc\u0000\u0000\u081e\u0820\u0005\u0185\u0000\u0000"+
		"\u081f\u081d\u0001\u0000\u0000\u0000\u081f\u0820\u0001\u0000\u0000\u0000"+
		"\u0820\u0821\u0001\u0000\u0000\u0000\u0821\u0824\u0003\u0434\u021a\u0000"+
		"\u0822\u0825\u0003b1\u0000\u0823\u0825\u0003d2\u0000\u0824\u0822\u0001"+
		"\u0000\u0000\u0000\u0824\u0823\u0001\u0000\u0000\u0000\u0825\u0889\u0001"+
		"\u0000\u0000\u0000\u0826\u0827\u0005\u008a\u0000\u0000\u0827\u0828\u0005"+
		"\\\u0000\u0000\u0828\u0829\u0005\u001e\u0000\u0000\u0829\u082a\u0005D"+
		"\u0000\u0000\u082a\u082b\u0005\u0158\u0000\u0000\u082b\u082f\u0003\u053e"+
		"\u029f\u0000\u082c\u082d\u0005\u0112\u0000\u0000\u082d\u082e\u0005\u0093"+
		"\u0000\u0000\u082e\u0830\u0003\u055c\u02ae\u0000\u082f\u082c\u0001\u0000"+
		"\u0000\u0000\u082f\u0830\u0001\u0000\u0000\u0000\u0830\u0831\u0001\u0000"+
		"\u0000\u0000\u0831\u0832\u0005\u0146\u0000\u0000\u0832\u0833\u0005\u0158"+
		"\u0000\u0000\u0833\u0834\u0003\u053e\u029f\u0000\u0834\u0835\u0003\u03aa"+
		"\u01d5\u0000\u0835\u0889\u0001\u0000\u0000\u0000\u0836\u0837\u0005\u008a"+
		"\u0000\u0000\u0837\u083a\u0005\u00e2\u0000\u0000\u0838\u0839\u0005\u00dc"+
		"\u0000\u0000\u0839\u083b\u0005\u0185\u0000\u0000\u083a\u0838\u0001\u0000"+
		"\u0000\u0000\u083a\u083b\u0001\u0000\u0000\u0000\u083b\u083c\u0001\u0000"+
		"\u0000\u0000\u083c\u083f\u0003\u053a\u029d\u0000\u083d\u0840\u0003b1\u0000"+
		"\u083e\u0840\u0003f3\u0000\u083f\u083d\u0001\u0000\u0000\u0000\u083f\u083e"+
		"\u0001\u0000\u0000\u0000\u0840\u0889\u0001\u0000\u0000\u0000\u0841\u0842"+
		"\u0005\u008a\u0000\u0000\u0842\u0843\u0005\u00e2\u0000\u0000\u0843\u0844"+
		"\u0005\u001e\u0000\u0000\u0844\u0845\u0005D\u0000\u0000\u0845\u0846\u0005"+
		"\u0158\u0000\u0000\u0846\u084a\u0003\u053e\u029f\u0000\u0847\u0848\u0005"+
		"\u0112\u0000\u0000\u0848\u0849\u0005\u0093\u0000\u0000\u0849\u084b\u0003"+
		"\u055c\u02ae\u0000\u084a\u0847\u0001\u0000\u0000\u0000\u084a\u084b\u0001"+
		"\u0000\u0000\u0000\u084b\u084c\u0001\u0000\u0000\u0000\u084c\u084d\u0005"+
		"\u0146\u0000\u0000\u084d\u084e\u0005\u0158\u0000\u0000\u084e\u084f\u0003"+
		"\u053e\u029f\u0000\u084f\u0850\u0003\u03aa\u01d5\u0000\u0850\u0889\u0001"+
		"\u0000\u0000\u0000\u0851\u0852\u0005\u008a\u0000\u0000\u0852\u0855\u0005"+
		"\u0141\u0000\u0000\u0853\u0854\u0005\u00dc\u0000\u0000\u0854\u0856\u0005"+
		"\u0185\u0000\u0000\u0855\u0853\u0001\u0000\u0000\u0000\u0855\u0856\u0001"+
		"\u0000\u0000\u0000\u0856\u0857\u0001\u0000\u0000\u0000\u0857\u0858\u0003"+
		"\u053a\u029d\u0000\u0858\u0859\u0003b1\u0000\u0859\u0889\u0001\u0000\u0000"+
		"\u0000\u085a\u085b\u0005\u008a\u0000\u0000\u085b\u085e\u0005\u0171\u0000"+
		"\u0000\u085c\u085d\u0005\u00dc\u0000\u0000\u085d\u085f\u0005\u0185\u0000"+
		"\u0000\u085e\u085c\u0001\u0000\u0000\u0000\u085e\u085f\u0001\u0000\u0000"+
		"\u0000\u085f\u0860\u0001\u0000\u0000\u0000\u0860\u0861\u0003\u053a\u029d"+
		"\u0000\u0861\u0862\u0003b1\u0000\u0862\u0889\u0001\u0000\u0000\u0000\u0863"+
		"\u0864\u0005\u008a\u0000\u0000\u0864\u0865\u0005\u00fb\u0000\u0000\u0865"+
		"\u0868\u0005\u0171\u0000\u0000\u0866\u0867\u0005\u00dc\u0000\u0000\u0867"+
		"\u0869\u0005\u0185\u0000\u0000\u0868\u0866\u0001\u0000\u0000\u0000\u0868"+
		"\u0869\u0001\u0000\u0000\u0000\u0869\u086a\u0001\u0000\u0000\u0000\u086a"+
		"\u086b\u0003\u053a\u029d\u0000\u086b\u086c\u0003b1\u0000\u086c\u0889\u0001"+
		"\u0000\u0000\u0000\u086d\u086e\u0005\u008a\u0000\u0000\u086e\u086f\u0005"+
		"\u00fb\u0000\u0000\u086f\u0870\u0005\u0171\u0000\u0000\u0870\u0871\u0005"+
		"\u001e\u0000\u0000\u0871\u0872\u0005D\u0000\u0000\u0872\u0873\u0005\u0158"+
		"\u0000\u0000\u0873\u0877\u0003\u053e\u029f\u0000\u0874\u0875\u0005\u0112"+
		"\u0000\u0000\u0875\u0876\u0005\u0093\u0000\u0000\u0876\u0878\u0003\u055c"+
		"\u02ae\u0000\u0877\u0874\u0001\u0000\u0000\u0000\u0877\u0878\u0001\u0000"+
		"\u0000\u0000\u0878\u0879\u0001\u0000\u0000\u0000\u0879\u087a\u0005\u0146"+
		"\u0000\u0000\u087a\u087b\u0005\u0158\u0000\u0000\u087b\u087c\u0003\u053e"+
		"\u029f\u0000\u087c\u087d\u0003\u03aa\u01d5\u0000\u087d\u0889\u0001\u0000"+
		"\u0000\u0000\u087e\u087f\u0005\u008a\u0000\u0000\u087f\u0880\u0005?\u0000"+
		"\u0000\u0880\u0883\u0005\\\u0000\u0000\u0881\u0882\u0005\u00dc\u0000\u0000"+
		"\u0882\u0884\u0005\u0185\u0000\u0000\u0883\u0881\u0001\u0000\u0000\u0000"+
		"\u0883\u0884\u0001\u0000\u0000\u0000\u0884\u0885\u0001\u0000\u0000\u0000"+
		"\u0885\u0886\u0003\u0434\u021a\u0000\u0886\u0887\u0003b1\u0000\u0887\u0889"+
		"\u0001\u0000\u0000\u0000\u0888\u081b\u0001\u0000\u0000\u0000\u0888\u0826"+
		"\u0001\u0000\u0000\u0000\u0888\u0836\u0001\u0000\u0000\u0000\u0888\u0841"+
		"\u0001\u0000\u0000\u0000\u0888\u0851\u0001\u0000\u0000\u0000\u0888\u085a"+
		"\u0001\u0000\u0000\u0000\u0888\u0863\u0001\u0000\u0000\u0000\u0888\u086d"+
		"\u0001\u0000\u0000\u0000\u0888\u087e\u0001\u0000\u0000\u0000\u0889a\u0001"+
		"\u0000\u0000\u0000\u088a\u088f\u0003h4\u0000\u088b\u088c\u0005\u0006\u0000"+
		"\u0000\u088c\u088e\u0003h4\u0000\u088d\u088b\u0001\u0000\u0000\u0000\u088e"+
		"\u0891\u0001\u0000\u0000\u0000\u088f\u088d\u0001\u0000\u0000\u0000\u088f"+
		"\u0890\u0001\u0000\u0000\u0000\u0890c\u0001\u0000\u0000\u0000\u0891\u088f"+
		"\u0001\u0000\u0000\u0000\u0892\u0893\u0005\u01b3\u0000\u0000\u0893\u0894"+
		"\u0005\u0116\u0000\u0000\u0894\u0895\u0003\u053a\u029d\u0000\u0895\u0896"+
		"\u0003\u0080@\u0000\u0896\u089b\u0001\u0000\u0000\u0000\u0897\u0898\u0005"+
		"\u01b4\u0000\u0000\u0898\u0899\u0005\u0116\u0000\u0000\u0899\u089b\u0003"+
		"\u053a\u029d\u0000\u089a\u0892\u0001\u0000\u0000\u0000\u089a\u0897\u0001"+
		"\u0000\u0000\u0000\u089be\u0001\u0000\u0000\u0000\u089c\u089d\u0005\u01b3"+
		"\u0000\u0000\u089d\u089e\u0005\u0116\u0000\u0000\u089e\u089f\u0003\u053a"+
		"\u029d\u0000\u089fg\u0001\u0000\u0000\u0000\u08a0\u08a1\u0005\u0085\u0000"+
		"\u0000\u08a1\u099d\u0003\u00bc^\u0000\u08a2\u08a3\u0005\u0085\u0000\u0000"+
		"\u08a3\u08a4\u0005\u00dc\u0000\u0000\u08a4\u08a5\u0005M\u0000\u0000\u08a5"+
		"\u08a6\u0005\u0185\u0000\u0000\u08a6\u099d\u0003\u00bc^\u0000\u08a7\u08a8"+
		"\u0005\u0085\u0000\u0000\u08a8\u08a9\u0005,\u0000\u0000\u08a9\u099d\u0003"+
		"\u00bc^\u0000\u08aa\u08ab\u0005\u0085\u0000\u0000\u08ab\u08ac\u0005,\u0000"+
		"\u0000\u08ac\u08ad\u0005\u00dc\u0000\u0000\u08ad\u08ae\u0005M\u0000\u0000"+
		"\u08ae\u08af\u0005\u0185\u0000\u0000\u08af\u099d\u0003\u00bc^\u0000\u08b0"+
		"\u08b1\u0005\u008a\u0000\u0000\u08b1\u08b2\u0003\u02d4\u016a\u0000\u08b2"+
		"\u08b3\u0003\u055e\u02af\u0000\u08b3\u08b4\u0003j5\u0000\u08b4\u099d\u0001"+
		"\u0000\u0000\u0000\u08b5\u08b6\u0005\u008a\u0000\u0000\u08b6\u08b7\u0003"+
		"\u02d4\u016a\u0000\u08b7\u08b8\u0003\u055e\u02af\u0000\u08b8\u08b9\u0005"+
		"\u00bf\u0000\u0000\u08b9\u08ba\u0005M\u0000\u0000\u08ba\u08bb\u0005N\u0000"+
		"\u0000\u08bb\u099d\u0001\u0000\u0000\u0000\u08bc\u08bd\u0005\u008a\u0000"+
		"\u0000\u08bd\u08be\u0003\u02d4\u016a\u0000\u08be\u08bf\u0003\u055e\u02af"+
		"\u0000\u08bf\u08c0\u0005\u0146\u0000\u0000\u08c0\u08c1\u0005M\u0000\u0000"+
		"\u08c1\u08c2\u0005N\u0000\u0000\u08c2\u099d\u0001\u0000\u0000\u0000\u08c3"+
		"\u08c4\u0005\u008a\u0000\u0000\u08c4\u08c5\u0003\u02d4\u016a\u0000\u08c5"+
		"\u08c6\u0003\u055e\u02af\u0000\u08c6\u08c7\u0005\u00bf\u0000\u0000\u08c7"+
		"\u08c8\u0005\u01b5\u0000\u0000\u08c8\u099d\u0001\u0000\u0000\u0000\u08c9"+
		"\u08ca\u0005\u008a\u0000\u0000\u08ca\u08cb\u0003\u02d4\u016a\u0000\u08cb"+
		"\u08cc\u0003\u055e\u02af\u0000\u08cc\u08cd\u0005\u00bf\u0000\u0000\u08cd"+
		"\u08ce\u0005\u01b5\u0000\u0000\u08ce\u08cf\u0005\u00dc\u0000\u0000\u08cf"+
		"\u08d0\u0005\u0185\u0000\u0000\u08d0\u099d\u0001\u0000\u0000\u0000\u08d1"+
		"\u08d2\u0005\u008a\u0000\u0000\u08d2\u08d3\u0003\u02d4\u016a\u0000\u08d3"+
		"\u08d4\u0003\u055e\u02af\u0000\u08d4\u08d5\u0005\u0146\u0000\u0000\u08d5"+
		"\u08d6\u0005\u014f\u0000\u0000\u08d6\u08d7\u0003\u0556\u02ab\u0000\u08d7"+
		"\u099d\u0001\u0000\u0000\u0000\u08d8\u08d9\u0005\u008a\u0000\u0000\u08d9"+
		"\u08da\u0003\u02d4\u016a\u0000\u08da\u08db\u0003\u054e\u02a7\u0000\u08db"+
		"\u08dc\u0005\u0146\u0000\u0000\u08dc\u08dd\u0005\u014f\u0000\u0000\u08dd"+
		"\u08de\u0003\u0556\u02ab\u0000\u08de\u099d\u0001\u0000\u0000\u0000\u08df"+
		"\u08e0\u0005\u008a\u0000\u0000\u08e0\u08e1\u0003\u02d4\u016a\u0000\u08e1"+
		"\u08e2\u0003\u055e\u02af\u0000\u08e2\u08e3\u0005\u0146\u0000\u0000\u08e3"+
		"\u08e4\u0003t:\u0000\u08e4\u099d\u0001\u0000\u0000\u0000\u08e5\u08e6\u0005"+
		"\u008a\u0000\u0000\u08e6\u08e7\u0003\u02d4\u016a\u0000\u08e7\u08e8\u0003"+
		"\u055e\u02af\u0000\u08e8\u08e9\u0005\u0132\u0000\u0000\u08e9\u08ea\u0003"+
		"t:\u0000\u08ea\u099d\u0001\u0000\u0000\u0000\u08eb\u08ec\u0005\u008a\u0000"+
		"\u0000\u08ec\u08ed\u0003\u02d4\u016a\u0000\u08ed\u08ee\u0003\u055e\u02af"+
		"\u0000\u08ee\u08ef\u0005\u0146\u0000\u0000\u08ef\u08f0\u0005\u0152\u0000"+
		"\u0000\u08f0\u08f1\u0003\u055e\u02af\u0000\u08f1\u099d\u0001\u0000\u0000"+
		"\u0000\u08f2\u08f3\u0005\u008a\u0000\u0000\u08f3\u08f4\u0003\u02d4\u016a"+
		"\u0000\u08f4\u08f5\u0003\u055e\u02af\u0000\u08f5\u08f6\u0005\u0085\u0000"+
		"\u0000\u08f6\u08f7\u0005\u01b6\u0000\u0000\u08f7\u08f8\u0003\u00c6c\u0000"+
		"\u08f8\u08f9\u0005$\u0000\u0000\u08f9\u08fa\u0005\u00db\u0000\u0000\u08fa"+
		"\u08fb\u0003\u011c\u008e\u0000\u08fb\u099d\u0001\u0000\u0000\u0000\u08fc"+
		"\u08fd\u0005\u008a\u0000\u0000\u08fd\u08fe\u0003\u02d4\u016a\u0000\u08fe"+
		"\u08ff\u0003\u055e\u02af\u0000\u08ff\u0900\u0003|>\u0000\u0900\u099d\u0001"+
		"\u0000\u0000\u0000\u0901\u0902\u0005\u008a\u0000\u0000\u0902\u0903\u0003"+
		"\u02d4\u016a\u0000\u0903\u0904\u0003\u055e\u02af\u0000\u0904\u0905\u0005"+
		"\u00bf\u0000\u0000\u0905\u0906\u0005\u00db\u0000\u0000\u0906\u099d\u0001"+
		"\u0000\u0000\u0000\u0907\u0908\u0005\u008a\u0000\u0000\u0908\u0909\u0003"+
		"\u02d4\u016a\u0000\u0909\u090a\u0003\u055e\u02af\u0000\u090a\u090b\u0005"+
		"\u00bf\u0000\u0000\u090b\u090c\u0005\u00db\u0000\u0000\u090c\u090d\u0005"+
		"\u00dc\u0000\u0000\u090d\u090e\u0005\u0185\u0000\u0000\u090e\u099d\u0001"+
		"\u0000\u0000\u0000\u090f\u0910\u0005\u00bf\u0000\u0000\u0910\u0911\u0003"+
		"\u02d4\u016a\u0000\u0911\u0912\u0005\u00dc\u0000\u0000\u0912\u0913\u0005"+
		"\u0185\u0000\u0000\u0913\u0914\u0003\u055e\u02af\u0000\u0914\u0915\u0003"+
		"l6\u0000\u0915\u099d\u0001\u0000\u0000\u0000\u0916\u0917\u0005\u00bf\u0000"+
		"\u0000\u0917\u0918\u0003\u02d4\u016a\u0000\u0918\u0919\u0003\u055e\u02af"+
		"\u0000\u0919\u091a\u0003l6\u0000\u091a\u099d\u0001\u0000\u0000\u0000\u091b"+
		"\u091c\u0005\u008a\u0000\u0000\u091c\u091d\u0003\u02d4\u016a\u0000\u091d"+
		"\u091e\u0003\u055e\u02af\u0000\u091e\u091f\u0003\u02d6\u016b\u0000\u091f"+
		"\u0920\u0005\u0161\u0000\u0000\u0920\u0921\u0003\u0460\u0230\u0000\u0921"+
		"\u0922\u0003n7\u0000\u0922\u0923\u0003p8\u0000\u0923\u099d\u0001\u0000"+
		"\u0000\u0000\u0924\u0925\u0005\u008a\u0000\u0000\u0925\u0926\u0003\u02d4"+
		"\u016a\u0000\u0926\u0927\u0003\u055e\u02af\u0000\u0927\u0928\u0003\u0158"+
		"\u00ac\u0000\u0928\u099d\u0001\u0000\u0000\u0000\u0929\u092a\u0005\u0085"+
		"\u0000\u0000\u092a\u099d\u0003\u00d0h\u0000\u092b\u092c\u0005\u008a\u0000"+
		"\u0000\u092c\u092d\u0005-\u0000\u0000\u092d\u092e\u0003\u053e\u029f\u0000"+
		"\u092e\u092f\u0003\u01b8\u00dc\u0000\u092f\u099d\u0001\u0000\u0000\u0000"+
		"\u0930\u0931\u0005\u016d\u0000\u0000\u0931\u0932\u0005-\u0000\u0000\u0932"+
		"\u099d\u0003\u053e\u029f\u0000\u0933\u0934\u0005\u00bf\u0000\u0000\u0934"+
		"\u0935\u0005-\u0000\u0000\u0935\u0936\u0005\u00dc\u0000\u0000\u0936\u0937"+
		"\u0005\u0185\u0000\u0000\u0937\u0938\u0003\u053e\u029f\u0000\u0938\u0939"+
		"\u0003l6\u0000\u0939\u099d\u0001\u0000\u0000\u0000\u093a\u093b\u0005\u00bf"+
		"\u0000\u0000\u093b\u093c\u0005-\u0000\u0000\u093c\u093d\u0003\u053e\u029f"+
		"\u0000\u093d\u093e\u0003l6\u0000\u093e\u099d\u0001\u0000\u0000\u0000\u093f"+
		"\u0940\u0005\u0146\u0000\u0000\u0940\u0941\u0005\u0174\u0000\u0000\u0941"+
		"\u099d\u0005\u010e\u0000\u0000\u0942\u0943\u0005\u009e\u0000\u0000\u0943"+
		"\u0944\u0005P\u0000\u0000\u0944\u099d\u0003\u053e\u029f\u0000\u0945\u0946"+
		"\u0005\u0146\u0000\u0000\u0946\u0947\u0005\u0174\u0000\u0000\u0947\u099d"+
		"\u0005\u009e\u0000\u0000\u0948\u0949\u0005\u0146\u0000\u0000\u0949\u099d"+
		"\u0005\u01b7\u0000\u0000\u094a\u094b\u0005\u0146\u0000\u0000\u094b\u099d"+
		"\u0005\u0168\u0000\u0000\u094c\u094d\u0005\u00c1\u0000\u0000\u094d\u094e"+
		"\u0005\u015e\u0000\u0000\u094e\u099d\u0003\u053e\u029f\u0000\u094f\u0950"+
		"\u0005\u00c1\u0000\u0000\u0950\u0951\u0005\u008b\u0000\u0000\u0951\u0952"+
		"\u0005\u015e\u0000\u0000\u0952\u099d\u0003\u053e\u029f\u0000\u0953\u0954"+
		"\u0005\u00c1\u0000\u0000\u0954\u0955\u0005\u0131\u0000\u0000\u0955\u0956"+
		"\u0005\u015e\u0000\u0000\u0956\u099d\u0003\u053e\u029f\u0000\u0957\u0958"+
		"\u0005\u00c1\u0000\u0000\u0958\u0959\u0005\u015e\u0000\u0000\u0959\u099d"+
		"\u0005\u001e\u0000\u0000\u095a\u095b\u0005\u00c1\u0000\u0000\u095b\u095c"+
		"\u0005\u015e\u0000\u0000\u095c\u099d\u0005c\u0000\u0000\u095d\u095e\u0005"+
		"\u00ba\u0000\u0000\u095e\u095f\u0005\u015e\u0000\u0000\u095f\u099d\u0003"+
		"\u053e\u029f\u0000\u0960\u0961\u0005\u00ba\u0000\u0000\u0961\u0962\u0005"+
		"\u015e\u0000\u0000\u0962\u099d\u0005\u001e\u0000\u0000\u0963\u0964\u0005"+
		"\u00ba\u0000\u0000\u0964\u0965\u0005\u015e\u0000\u0000\u0965\u099d\u0005"+
		"c\u0000\u0000\u0966\u0967\u0005\u00c1\u0000\u0000\u0967\u0968\u0005\u013a"+
		"\u0000\u0000\u0968\u099d\u0003\u053e\u029f\u0000\u0969\u096a\u0005\u00c1"+
		"\u0000\u0000\u096a\u096b\u0005\u008b\u0000\u0000\u096b\u096c\u0005\u013a"+
		"\u0000\u0000\u096c\u099d\u0003\u053e\u029f\u0000\u096d\u096e\u0005\u00c1"+
		"\u0000\u0000\u096e\u096f\u0005\u0131\u0000\u0000\u096f\u0970\u0005\u013a"+
		"\u0000\u0000\u0970\u099d\u0003\u053e\u029f\u0000\u0971\u0972\u0005\u00ba"+
		"\u0000\u0000\u0972\u0973\u0005\u013a\u0000\u0000\u0973\u099d\u0003\u053e"+
		"\u029f\u0000\u0974\u0975\u0005\u00e4\u0000\u0000\u0975\u099d\u0003\u053a"+
		"\u029d\u0000\u0976\u0977\u0005\u0106\u0000\u0000\u0977\u0978\u0005\u00e4"+
		"\u0000\u0000\u0978\u099d\u0003\u053a\u029d\u0000\u0979\u097a\u0005\u010c"+
		"\u0000\u0000\u097a\u099d\u0003\u020c\u0106\u0000\u097b\u097c\u0005M\u0000"+
		"\u0000\u097c\u099d\u0005\u010c\u0000\u0000\u097d\u097e\u0005\u0113\u0000"+
		"\u0000\u097e\u097f\u0005^\u0000\u0000\u097f\u099d\u0003\u055a\u02ad\u0000"+
		"\u0980\u0981\u0005\u0146\u0000\u0000\u0981\u0982\u0005\u0158\u0000\u0000"+
		"\u0982\u099d\u0003\u053e\u029f\u0000\u0983\u0984\u0005\u0146\u0000\u0000"+
		"\u0984\u099d\u0003t:\u0000\u0985\u0986\u0005\u0132\u0000\u0000\u0986\u099d"+
		"\u0003t:\u0000\u0987\u0988\u0005\u0131\u0000\u0000\u0988\u0989\u0005\u00db"+
		"\u0000\u0000\u0989\u099d\u0003r9\u0000\u098a\u098b\u0005\u00c1\u0000\u0000"+
		"\u098b\u098c\u0005\u0197\u0000\u0000\u098c\u098d\u0005\u00f2\u0000\u0000"+
		"\u098d\u099d\u0005\u0140\u0000\u0000\u098e\u098f\u0005\u00ba\u0000\u0000"+
		"\u098f\u0990\u0005\u0197\u0000\u0000\u0990\u0991\u0005\u00f2\u0000\u0000"+
		"\u0991\u099d\u0005\u0140\u0000\u0000\u0992\u0993\u0005\u00d1\u0000\u0000"+
		"\u0993\u0994\u0005\u0197\u0000\u0000\u0994\u0995\u0005\u00f2\u0000\u0000"+
		"\u0995\u099d\u0005\u0140\u0000\u0000\u0996\u0997\u0005\u0106\u0000\u0000"+
		"\u0997\u0998\u0005\u00d1\u0000\u0000\u0998\u0999\u0005\u0197\u0000\u0000"+
		"\u0999\u099a\u0005\u00f2\u0000\u0000\u099a\u099d\u0005\u0140\u0000\u0000"+
		"\u099b\u099d\u0003\u0158\u00ac\u0000\u099c\u08a0\u0001\u0000\u0000\u0000"+
		"\u099c\u08a2\u0001\u0000\u0000\u0000\u099c\u08a7\u0001\u0000\u0000\u0000"+
		"\u099c\u08aa\u0001\u0000\u0000\u0000\u099c\u08b0\u0001\u0000\u0000\u0000"+
		"\u099c\u08b5\u0001\u0000\u0000\u0000\u099c\u08bc\u0001\u0000\u0000\u0000"+
		"\u099c\u08c3\u0001\u0000\u0000\u0000\u099c\u08c9\u0001\u0000\u0000\u0000"+
		"\u099c\u08d1\u0001\u0000\u0000\u0000\u099c\u08d8\u0001\u0000\u0000\u0000"+
		"\u099c\u08df\u0001\u0000\u0000\u0000\u099c\u08e5\u0001\u0000\u0000\u0000"+
		"\u099c\u08eb\u0001\u0000\u0000\u0000\u099c\u08f2\u0001\u0000\u0000\u0000"+
		"\u099c\u08fc\u0001\u0000\u0000\u0000\u099c\u0901\u0001\u0000\u0000\u0000"+
		"\u099c\u0907\u0001\u0000\u0000\u0000\u099c\u090f\u0001\u0000\u0000\u0000"+
		"\u099c\u0916\u0001\u0000\u0000\u0000\u099c\u091b\u0001\u0000\u0000\u0000"+
		"\u099c\u0924\u0001\u0000\u0000\u0000\u099c\u0929\u0001\u0000\u0000\u0000"+
		"\u099c\u092b\u0001\u0000\u0000\u0000\u099c\u0930\u0001\u0000\u0000\u0000"+
		"\u099c\u0933\u0001\u0000\u0000\u0000\u099c\u093a\u0001\u0000\u0000\u0000"+
		"\u099c\u093f\u0001\u0000\u0000\u0000\u099c\u0942\u0001\u0000\u0000\u0000"+
		"\u099c\u0945\u0001\u0000\u0000\u0000\u099c\u0948\u0001\u0000\u0000\u0000"+
		"\u099c\u094a\u0001\u0000\u0000\u0000\u099c\u094c\u0001\u0000\u0000\u0000"+
		"\u099c\u094f\u0001\u0000\u0000\u0000\u099c\u0953\u0001\u0000\u0000\u0000"+
		"\u099c\u0957\u0001\u0000\u0000\u0000\u099c\u095a\u0001\u0000\u0000\u0000"+
		"\u099c\u095d\u0001\u0000\u0000\u0000\u099c\u0960\u0001\u0000\u0000\u0000"+
		"\u099c\u0963\u0001\u0000\u0000\u0000\u099c\u0966\u0001\u0000\u0000\u0000"+
		"\u099c\u0969\u0001\u0000\u0000\u0000\u099c\u096d\u0001\u0000\u0000\u0000"+
		"\u099c\u0971\u0001\u0000\u0000\u0000\u099c\u0974\u0001\u0000\u0000\u0000"+
		"\u099c\u0976\u0001\u0000\u0000\u0000\u099c\u0979\u0001\u0000\u0000\u0000"+
		"\u099c\u097b\u0001\u0000\u0000\u0000\u099c\u097d\u0001\u0000\u0000\u0000"+
		"\u099c\u0980\u0001\u0000\u0000\u0000\u099c\u0983\u0001\u0000\u0000\u0000"+
		"\u099c\u0985\u0001\u0000\u0000\u0000\u099c\u0987\u0001\u0000\u0000\u0000"+
		"\u099c\u098a\u0001\u0000\u0000\u0000\u099c\u098e\u0001\u0000\u0000\u0000"+
		"\u099c\u0992\u0001\u0000\u0000\u0000\u099c\u0996\u0001\u0000\u0000\u0000"+
		"\u099c\u099b\u0001\u0000\u0000\u0000\u099di\u0001\u0000\u0000\u0000\u099e"+
		"\u099f\u0005\u0146\u0000\u0000\u099f\u09a0\u00055\u0000\u0000\u09a0\u09a4"+
		"\u0003\u048c\u0246\u0000\u09a1\u09a2\u0005\u00bf\u0000\u0000\u09a2\u09a4"+
		"\u00055\u0000\u0000\u09a3\u099e\u0001\u0000\u0000\u0000\u09a3\u09a1\u0001"+
		"\u0000\u0000\u0000\u09a4k\u0001\u0000\u0000\u0000\u09a5\u09a9\u0005\u0096"+
		"\u0000\u0000\u09a6\u09a9\u0005\u0134\u0000\u0000\u09a7\u09a9\u0001\u0000"+
		"\u0000\u0000\u09a8\u09a5\u0001\u0000\u0000\u0000\u09a8\u09a6\u0001\u0000"+
		"\u0000\u0000\u09a8\u09a7\u0001\u0000\u0000\u0000\u09a9m\u0001\u0000\u0000"+
		"\u0000\u09aa\u09ab\u0005+\u0000\u0000\u09ab\u09ae\u0003\u020c\u0106\u0000"+
		"\u09ac\u09ae\u0001\u0000\u0000\u0000\u09ad\u09aa\u0001\u0000\u0000\u0000"+
		"\u09ad\u09ac\u0001\u0000\u0000\u0000\u09aeo\u0001\u0000\u0000\u0000\u09af"+
		"\u09b0\u0005d\u0000\u0000\u09b0\u09b3\u0003\u048c\u0246\u0000\u09b1\u09b3"+
		"\u0001\u0000\u0000\u0000\u09b2\u09af\u0001\u0000\u0000\u0000\u09b2\u09b1"+
		"\u0001\u0000\u0000\u0000\u09b3q\u0001\u0000\u0000\u0000\u09b4\u09bb\u0005"+
		"\u0107\u0000\u0000\u09b5\u09bb\u0005q\u0000\u0000\u09b6\u09bb\u00055\u0000"+
		"\u0000\u09b7\u09b8\u0005d\u0000\u0000\u09b8\u09b9\u0005\u00e2\u0000\u0000"+
		"\u09b9\u09bb\u0003\u053e\u029f\u0000\u09ba\u09b4\u0001\u0000\u0000\u0000"+
		"\u09ba\u09b5\u0001\u0000\u0000\u0000\u09ba\u09b6\u0001\u0000\u0000\u0000"+
		"\u09ba\u09b7\u0001\u0000\u0000\u0000\u09bbs\u0001\u0000\u0000\u0000\u09bc"+
		"\u09bd\u0005\u0002\u0000\u0000\u09bd\u09be\u0003x<\u0000\u09be\u09bf\u0005"+
		"\u0003\u0000\u0000\u09bfu\u0001\u0000\u0000\u0000\u09c0\u09c1\u0005i\u0000"+
		"\u0000\u09c1\u09c4\u0003t:\u0000\u09c2\u09c4\u0001\u0000\u0000\u0000\u09c3"+
		"\u09c0\u0001\u0000\u0000\u0000\u09c3\u09c2\u0001\u0000\u0000\u0000\u09c4"+
		"w\u0001\u0000\u0000\u0000\u09c5\u09ca\u0003z=\u0000\u09c6\u09c7\u0005"+
		"\u0006\u0000\u0000\u09c7\u09c9\u0003z=\u0000\u09c8\u09c6\u0001\u0000\u0000"+
		"\u0000\u09c9\u09cc\u0001\u0000\u0000\u0000\u09ca\u09c8\u0001\u0000\u0000"+
		"\u0000\u09ca\u09cb\u0001\u0000\u0000\u0000\u09cby\u0001\u0000\u0000\u0000"+
		"\u09cc\u09ca\u0001\u0000\u0000\u0000\u09cd\u09d6\u0003\u0566\u02b3\u0000"+
		"\u09ce\u09cf\u0005\n\u0000\u0000\u09cf\u09d7\u0003\u01d2\u00e9\u0000\u09d0"+
		"\u09d1\u0005\u000b\u0000\u0000\u09d1\u09d4\u0003\u0566\u02b3\u0000\u09d2"+
		"\u09d3\u0005\n\u0000\u0000\u09d3\u09d5\u0003\u01d2\u00e9\u0000\u09d4\u09d2"+
		"\u0001\u0000\u0000\u0000\u09d4\u09d5\u0001\u0000\u0000\u0000\u09d5\u09d7"+
		"\u0001\u0000\u0000\u0000\u09d6\u09ce\u0001\u0000\u0000\u0000\u09d6\u09d0"+
		"\u0001\u0000\u0000\u0000\u09d6\u09d7\u0001\u0000\u0000\u0000\u09d7{\u0001"+
		"\u0000\u0000\u0000\u09d8\u09da\u0003~?\u0000\u09d9\u09d8\u0001\u0000\u0000"+
		"\u0000\u09da\u09db\u0001\u0000\u0000\u0000\u09db\u09d9\u0001\u0000\u0000"+
		"\u0000\u09db\u09dc\u0001\u0000\u0000\u0000\u09dc}\u0001\u0000\u0000\u0000"+
		"\u09dd\u09e1\u0005\u0133\u0000\u0000\u09de\u09df\u0003\u0010\b\u0000\u09df"+
		"\u09e0\u0003\u0124\u0092\u0000\u09e0\u09e2\u0001\u0000\u0000\u0000\u09e1"+
		"\u09de\u0001\u0000\u0000\u0000\u09e1\u09e2\u0001\u0000\u0000\u0000\u09e2"+
		"\u09ea\u0001\u0000\u0000\u0000\u09e3\u09e7\u0005\u0146\u0000\u0000\u09e4"+
		"\u09e8\u0003\u0120\u0090\u0000\u09e5\u09e6\u0005\u01b6\u0000\u0000\u09e6"+
		"\u09e8\u0003\u00c6c\u0000\u09e7\u09e4\u0001\u0000\u0000\u0000\u09e7\u09e5"+
		"\u0001\u0000\u0000\u0000\u09e8\u09ea\u0001\u0000\u0000\u0000\u09e9\u09dd"+
		"\u0001\u0000\u0000\u0000\u09e9\u09e3\u0001\u0000\u0000\u0000\u09ea\u007f"+
		"\u0001\u0000\u0000\u0000\u09eb\u09ec\u0005>\u0000\u0000\u09ec\u09ed\u0005"+
		"\u019f\u0000\u0000\u09ed\u09ee\u0005i\u0000\u0000\u09ee\u09ef\u0005\u0002"+
		"\u0000\u0000\u09ef\u09f0\u0003\u0084B\u0000\u09f0\u09f1\u0005\u0003\u0000"+
		"\u0000\u09f1\u0a06\u0001\u0000\u0000\u0000\u09f2\u09f3\u0005>\u0000\u0000"+
		"\u09f3\u09f4\u0005\u019f\u0000\u0000\u09f4\u09f5\u0005D\u0000\u0000\u09f5"+
		"\u09f6\u0005\u0002\u0000\u0000\u09f6\u09f7\u0003\u0502\u0281\u0000\u09f7"+
		"\u09f8\u0005\u0003\u0000\u0000\u09f8\u0a06\u0001\u0000\u0000\u0000\u09f9"+
		"\u09fa\u0005>\u0000\u0000\u09fa\u09fb\u0005\u019f\u0000\u0000\u09fb\u09fc"+
		"\u0005@\u0000\u0000\u09fc\u09fd\u0005\u0002\u0000\u0000\u09fd\u09fe\u0003"+
		"\u0502\u0281\u0000\u09fe\u09ff\u0005\u0003\u0000\u0000\u09ff\u0a00\u0005"+
		"^\u0000\u0000\u0a00\u0a01\u0005\u0002\u0000\u0000\u0a01\u0a02\u0003\u0502"+
		"\u0281\u0000\u0a02\u0a03\u0005\u0003\u0000\u0000\u0a03\u0a06\u0001\u0000"+
		"\u0000\u0000\u0a04\u0a06\u00055\u0000\u0000\u0a05\u09eb\u0001\u0000\u0000"+
		"\u0000\u0a05\u09f2\u0001\u0000\u0000\u0000\u0a05\u09f9\u0001\u0000\u0000"+
		"\u0000\u0a05\u0a04\u0001\u0000\u0000\u0000\u0a06\u0081\u0001\u0000\u0000"+
		"\u0000\u0a07\u0a08\u0003\u0564\u02b2\u0000\u0a08\u0a09\u0003\u054e\u02a7"+
		"\u0000\u0a09\u0083\u0001\u0000\u0000\u0000\u0a0a\u0a0f\u0003\u0082A\u0000"+
		"\u0a0b\u0a0c\u0005\u0006\u0000\u0000\u0a0c\u0a0e\u0003\u0082A\u0000\u0a0d"+
		"\u0a0b\u0001\u0000\u0000\u0000\u0a0e\u0a11\u0001\u0000\u0000\u0000\u0a0f"+
		"\u0a0d\u0001\u0000\u0000\u0000\u0a0f\u0a10\u0001\u0000\u0000\u0000\u0a10"+
		"\u0085\u0001\u0000\u0000\u0000\u0a11\u0a0f\u0001\u0000\u0000\u0000\u0a12"+
		"\u0a13\u0005\u008a\u0000\u0000\u0a13\u0a14\u0005\u0161\u0000\u0000\u0a14"+
		"\u0a15\u0003\u020c\u0106\u0000\u0a15\u0a16\u0003\u0088D\u0000\u0a16\u0087"+
		"\u0001\u0000\u0000\u0000\u0a17\u0a1c\u0003\u008aE\u0000\u0a18\u0a19\u0005"+
		"\u0006\u0000\u0000\u0a19\u0a1b\u0003\u008aE\u0000\u0a1a\u0a18\u0001\u0000"+
		"\u0000\u0000\u0a1b\u0a1e\u0001\u0000\u0000\u0000\u0a1c\u0a1a\u0001\u0000"+
		"\u0000\u0000\u0a1c\u0a1d\u0001\u0000\u0000\u0000\u0a1d\u0089\u0001\u0000"+
		"\u0000\u0000\u0a1e\u0a1c\u0001\u0000\u0000\u0000\u0a1f\u0a20\u0005\u0085"+
		"\u0000\u0000\u0a20\u0a21\u0005\u008f\u0000\u0000\u0a21\u0a22\u0003\u0450"+
		"\u0228\u0000\u0a22\u0a23\u0003l6\u0000\u0a23\u0a37\u0001\u0000\u0000\u0000"+
		"\u0a24\u0a25\u0005\u00bf\u0000\u0000\u0a25\u0a28\u0005\u008f\u0000\u0000"+
		"\u0a26\u0a27\u0005\u00dc\u0000\u0000\u0a27\u0a29\u0005\u0185\u0000\u0000"+
		"\u0a28\u0a26\u0001\u0000\u0000\u0000\u0a28\u0a29\u0001\u0000\u0000\u0000"+
		"\u0a29\u0a2a\u0001\u0000\u0000\u0000\u0a2a\u0a2b\u0003\u055e\u02af\u0000"+
		"\u0a2b\u0a2c\u0003l6\u0000\u0a2c\u0a37\u0001\u0000\u0000\u0000\u0a2d\u0a2e"+
		"\u0005\u008a\u0000\u0000\u0a2e\u0a2f\u0005\u008f\u0000\u0000\u0a2f\u0a30"+
		"\u0003\u055e\u02af\u0000\u0a30\u0a31\u0003\u02d6\u016b\u0000\u0a31\u0a32"+
		"\u0005\u0161\u0000\u0000\u0a32\u0a33\u0003\u0460\u0230\u0000\u0a33\u0a34"+
		"\u0003n7\u0000\u0a34\u0a35\u0003l6\u0000\u0a35\u0a37\u0001\u0000\u0000"+
		"\u0000\u0a36\u0a1f\u0001\u0000\u0000\u0000\u0a36\u0a24\u0001\u0000\u0000"+
		"\u0000\u0a36\u0a2d\u0001\u0000\u0000\u0000\u0a37\u008b\u0001\u0000\u0000"+
		"\u0000\u0a38\u0a3b\u0005\u009d\u0000\u0000\u0a39\u0a3c\u0003\u03ba\u01dd"+
		"\u0000\u0a3a\u0a3c\u0005\u001e\u0000\u0000\u0a3b\u0a39\u0001\u0000\u0000"+
		"\u0000\u0a3b\u0a3a\u0001\u0000\u0000\u0000\u0a3c\u008d\u0001\u0000\u0000"+
		"\u0000\u0a3d\u0a3e\u0005\u00a9\u0000\u0000\u0a3e\u0a3f\u0003\u009cN\u0000"+
		"\u0a3f\u0a40\u0003\u053a\u029d\u0000\u0a40\u0a41\u0003\u00d6k\u0000\u0a41"+
		"\u0a42\u0003\u0090H\u0000\u0a42\u0a43\u0003\u0092I\u0000\u0a43\u0a44\u0003"+
		"\u0094J\u0000\u0a44\u0a45\u0003\u009eO\u0000\u0a45\u0a46\u0003\u0010\b"+
		"\u0000\u0a46\u0a47\u0003\u0096K\u0000\u0a47\u0a48\u0003\u0448\u0224\u0000"+
		"\u0a48\u0a54\u0001\u0000\u0000\u0000\u0a49\u0a4a\u0005\u00a9\u0000\u0000"+
		"\u0a4a\u0a4b\u0005\u0002\u0000\u0000\u0a4b\u0a4c\u0003\u037e\u01bf\u0000"+
		"\u0a4c\u0a4d\u0005\u0003\u0000\u0000\u0a4d\u0a4e\u0005^\u0000\u0000\u0a4e"+
		"\u0a4f\u0003\u0092I\u0000\u0a4f\u0a50\u0003\u0094J\u0000\u0a50\u0a51\u0003"+
		"\u0010\b\u0000\u0a51\u0a52\u0003\u0096K\u0000\u0a52\u0a54\u0001\u0000"+
		"\u0000\u0000\u0a53\u0a3d\u0001\u0000\u0000\u0000\u0a53\u0a49\u0001\u0000"+
		"\u0000\u0000\u0a54\u008f\u0001\u0000\u0000\u0000\u0a55\u0a56\u0007\n\u0000"+
		"\u0000\u0a56\u0091\u0001\u0000\u0000\u0000\u0a57\u0a5a\u0005\u0122\u0000"+
		"\u0000\u0a58\u0a5a\u0001\u0000\u0000\u0000\u0a59\u0a57\u0001\u0000\u0000"+
		"\u0000\u0a59\u0a58\u0001\u0000\u0000\u0000\u0a5a\u0093\u0001\u0000\u0000"+
		"\u0000\u0a5b\u0a5f\u0003\u0550\u02a8\u0000\u0a5c\u0a5f\u0005\u0150\u0000"+
		"\u0000\u0a5d\u0a5f\u0005\u0151\u0000\u0000\u0a5e\u0a5b\u0001\u0000\u0000"+
		"\u0000\u0a5e\u0a5c\u0001\u0000\u0000\u0000\u0a5e\u0a5d\u0001\u0000\u0000"+
		"\u0000\u0a5f\u0095\u0001\u0000\u0000\u0000\u0a60\u0a66\u0003\u0098L\u0000"+
		"\u0a61\u0a62\u0005\u0002\u0000\u0000\u0a62\u0a63\u0003\u00a2Q\u0000\u0a63"+
		"\u0a64\u0005\u0003\u0000\u0000\u0a64\u0a66\u0001\u0000\u0000\u0000\u0a65"+
		"\u0a60\u0001\u0000\u0000\u0000\u0a65\u0a61\u0001\u0000\u0000\u0000\u0a66"+
		"\u0097\u0001\u0000\u0000\u0000\u0a67\u0a69\u0003\u009aM\u0000\u0a68\u0a67"+
		"\u0001\u0000\u0000\u0000\u0a69\u0a6c\u0001\u0000\u0000\u0000\u0a6a\u0a68"+
		"\u0001\u0000\u0000\u0000\u0a6a\u0a6b\u0001\u0000\u0000\u0000\u0a6b\u0099"+
		"\u0001\u0000\u0000\u0000\u0a6c\u0a6a\u0001\u0000\u0000\u0000\u0a6d\u0a91"+
		"\u0005k\u0000\u0000\u0a6e\u0a91\u0005p\u0000\u0000\u0a6f\u0a70\u0005\u00b7"+
		"\u0000\u0000\u0a70\u0a71\u0003\u0342\u01a1\u0000\u0a71\u0a72\u0003\u0550"+
		"\u02a8\u0000\u0a72\u0a91\u0001\u0000\u0000\u0000\u0a73\u0a74\u0005N\u0000"+
		"\u0000\u0a74\u0a75\u0003\u0342\u01a1\u0000\u0a75\u0a76\u0003\u0550\u02a8"+
		"\u0000\u0a76\u0a91\u0001\u0000\u0000\u0000\u0a77\u0a91\u0005\u00ab\u0000"+
		"\u0000\u0a78\u0a91\u0005\u00d8\u0000\u0000\u0a79\u0a7a\u0005\u0123\u0000"+
		"\u0000\u0a7a\u0a7b\u0003\u0342\u01a1\u0000\u0a7b\u0a7c\u0003\u0550\u02a8"+
		"\u0000\u0a7c\u0a91\u0001\u0000\u0000\u0000\u0a7d\u0a7e\u0005\u00c5\u0000"+
		"\u0000\u0a7e\u0a7f\u0003\u0342\u01a1\u0000\u0a7f\u0a80\u0003\u0550\u02a8"+
		"\u0000\u0a80\u0a91\u0001\u0000\u0000\u0000\u0a81\u0a82\u0005\u00d1\u0000"+
		"\u0000\u0a82\u0a83\u0005\u0123\u0000\u0000\u0a83\u0a91\u0003\u00d8l\u0000"+
		"\u0a84\u0a85\u0005\u00d1\u0000\u0000\u0a85\u0a86\u0005\u0123\u0000\u0000"+
		"\u0a86\u0a91\u0005\t\u0000\u0000\u0a87\u0a88\u0005\u00d1\u0000\u0000\u0a88"+
		"\u0a89\u0005M\u0000\u0000\u0a89\u0a8a\u0005N\u0000\u0000\u0a8a\u0a91\u0003"+
		"\u00d8l\u0000\u0a8b\u0a8c\u0005\u00d1\u0000\u0000\u0a8c\u0a8d\u0005N\u0000"+
		"\u0000\u0a8d\u0a91\u0003\u00d8l\u0000\u0a8e\u0a8f\u0005\u00c2\u0000\u0000"+
		"\u0a8f\u0a91\u0003\u0550\u02a8\u0000\u0a90\u0a6d\u0001\u0000\u0000\u0000"+
		"\u0a90\u0a6e\u0001\u0000\u0000\u0000\u0a90\u0a6f\u0001\u0000\u0000\u0000"+
		"\u0a90\u0a73\u0001\u0000\u0000\u0000\u0a90\u0a77\u0001\u0000\u0000\u0000"+
		"\u0a90\u0a78\u0001\u0000\u0000\u0000\u0a90\u0a79\u0001\u0000\u0000\u0000"+
		"\u0a90\u0a7d\u0001\u0000\u0000\u0000\u0a90\u0a81\u0001\u0000\u0000\u0000"+
		"\u0a90\u0a84\u0001\u0000\u0000\u0000\u0a90\u0a87\u0001\u0000\u0000\u0000"+
		"\u0a90\u0a8b\u0001\u0000\u0000\u0000\u0a90\u0a8e\u0001\u0000\u0000\u0000"+
		"\u0a91\u009b\u0001\u0000\u0000\u0000\u0a92\u0a95\u0005k\u0000\u0000\u0a93"+
		"\u0a95\u0001\u0000\u0000\u0000\u0a94\u0a92\u0001\u0000\u0000\u0000\u0a94"+
		"\u0a93\u0001\u0000\u0000\u0000\u0a95\u009d\u0001\u0000\u0000\u0000\u0a96"+
		"\u0a97\u0003\u00a0P\u0000\u0a97\u0a98\u0005\u00b8\u0000\u0000\u0a98\u0a99"+
		"\u0003\u0550\u02a8\u0000\u0a99\u0a9c\u0001\u0000\u0000\u0000\u0a9a\u0a9c"+
		"\u0001\u0000\u0000\u0000\u0a9b\u0a96\u0001\u0000\u0000\u0000\u0a9b\u0a9a"+
		"\u0001\u0000\u0000\u0000\u0a9c\u009f\u0001\u0000\u0000\u0000\u0a9d\u0aa0"+
		"\u0005d\u0000\u0000\u0a9e\u0aa0\u0001\u0000\u0000\u0000\u0a9f\u0a9d\u0001"+
		"\u0000\u0000\u0000\u0a9f\u0a9e\u0001\u0000\u0000\u0000\u0aa0\u00a1\u0001"+
		"\u0000\u0000\u0000\u0aa1\u0aa6\u0003\u00a4R\u0000\u0aa2\u0aa3\u0005\u0006"+
		"\u0000\u0000\u0aa3\u0aa5\u0003\u00a4R\u0000\u0aa4\u0aa2\u0001\u0000\u0000"+
		"\u0000\u0aa5\u0aa8\u0001\u0000\u0000\u0000\u0aa6\u0aa4\u0001\u0000\u0000"+
		"\u0000\u0aa6\u0aa7\u0001\u0000\u0000\u0000\u0aa7\u00a3\u0001\u0000\u0000"+
		"\u0000\u0aa8\u0aa6\u0001\u0000\u0000\u0000\u0aa9\u0aaa\u0003\u0566\u02b3"+
		"\u0000\u0aaa\u0aab\u0003\u00a6S\u0000\u0aab\u00a5\u0001\u0000\u0000\u0000"+
		"\u0aac\u0ab5\u0003B!\u0000\u0aad\u0ab5\u0003\u0124\u0092\u0000\u0aae\u0ab5"+
		"\u0005\t\u0000\u0000\u0aaf\u0ab0\u0005\u0002\u0000\u0000\u0ab0\u0ab1\u0003"+
		"\u00a8T\u0000\u0ab1\u0ab2\u0005\u0003\u0000\u0000\u0ab2\u0ab5\u0001\u0000"+
		"\u0000\u0000\u0ab3\u0ab5\u0001\u0000\u0000\u0000\u0ab4\u0aac\u0001\u0000"+
		"\u0000\u0000\u0ab4\u0aad\u0001\u0000\u0000\u0000\u0ab4\u0aae\u0001\u0000"+
		"\u0000\u0000\u0ab4\u0aaf\u0001\u0000\u0000\u0000\u0ab4\u0ab3\u0001\u0000"+
		"\u0000\u0000\u0ab5\u00a7\u0001\u0000\u0000\u0000\u0ab6\u0abb\u0003\u00aa"+
		"U\u0000\u0ab7\u0ab8\u0005\u0006\u0000\u0000\u0ab8\u0aba\u0003\u00aaU\u0000"+
		"\u0ab9\u0ab7\u0001\u0000\u0000\u0000\u0aba\u0abd\u0001\u0000\u0000\u0000"+
		"\u0abb\u0ab9\u0001\u0000\u0000\u0000\u0abb\u0abc\u0001\u0000\u0000\u0000"+
		"\u0abc\u00a9\u0001\u0000\u0000\u0000\u0abd\u0abb\u0001\u0000\u0000\u0000"+
		"\u0abe\u0abf\u0003B!\u0000\u0abf\u00ab\u0001\u0000\u0000\u0000\u0ac0\u0ac1"+
		"\u0005.\u0000\u0000\u0ac1\u0ac2\u0003\u00aeW\u0000\u0ac2\u0ac6\u0005\\"+
		"\u0000\u0000\u0ac3\u0ac4\u0005\u00dc\u0000\u0000\u0ac4\u0ac5\u0005M\u0000"+
		"\u0000\u0ac5\u0ac7\u0005\u0185\u0000\u0000\u0ac6\u0ac3\u0001\u0000\u0000"+
		"\u0000\u0ac6\u0ac7\u0001\u0000\u0000\u0000\u0ac7\u0ac8\u0001\u0000\u0000"+
		"\u0000\u0ac8\u0ae7\u0003\u053a\u029d\u0000\u0ac9\u0aca\u0005\u0002\u0000"+
		"\u0000\u0aca\u0acb\u0003\u00b0X\u0000\u0acb\u0acc\u0005\u0003\u0000\u0000"+
		"\u0acc\u0acd\u0003\u00eew\u0000\u0acd\u0ace\u0003\u00f0x\u0000\u0ace\u0acf"+
		"\u0003\u00f8|\u0000\u0acf\u0ad0\u0003\u00fa}\u0000\u0ad0\u0ad1\u0003\u00fc"+
		"~\u0000\u0ad1\u0ad2\u0003\u00fe\u007f\u0000\u0ad2\u0ae8\u0001\u0000\u0000"+
		"\u0000\u0ad3\u0ad4\u0005\u010c\u0000\u0000\u0ad4\u0ad5\u0003\u020c\u0106"+
		"\u0000\u0ad5\u0ad6\u0003\u00b2Y\u0000\u0ad6\u0ad7\u0003\u00f0x\u0000\u0ad7"+
		"\u0ad8\u0003\u00f8|\u0000\u0ad8\u0ad9\u0003\u00fa}\u0000\u0ad9\u0ada\u0003"+
		"\u00fc~\u0000\u0ada\u0adb\u0003\u00fe\u007f\u0000\u0adb\u0ae8\u0001\u0000"+
		"\u0000\u0000\u0adc\u0add\u0005\u0116\u0000\u0000\u0add\u0ade\u0005\u010c"+
		"\u0000\u0000\u0ade\u0adf\u0003\u053a\u029d\u0000\u0adf\u0ae0\u0003\u00b2"+
		"Y\u0000\u0ae0\u0ae1\u0003\u0080@\u0000\u0ae1\u0ae2\u0003\u00f0x\u0000"+
		"\u0ae2\u0ae3\u0003\u00f8|\u0000\u0ae3\u0ae4\u0003\u00fa}\u0000\u0ae4\u0ae5"+
		"\u0003\u00fc~\u0000\u0ae5\u0ae6\u0003\u00fe\u007f\u0000\u0ae6\u0ae8\u0001"+
		"\u0000\u0000\u0000\u0ae7\u0ac9\u0001\u0000\u0000\u0000\u0ae7\u0ad3\u0001"+
		"\u0000\u0000\u0000\u0ae7\u0adc\u0001\u0000\u0000\u0000\u0ae8\u00ad\u0001"+
		"\u0000\u0000\u0000\u0ae9\u0af2\u0005\u015b\u0000\u0000\u0aea\u0af2\u0005"+
		"\u0159\u0000\u0000\u0aeb\u0aec\u0005\u00f5\u0000\u0000\u0aec\u0af2\u0007"+
		"\u000b\u0000\u0000\u0aed\u0aee\u0005\u00d5\u0000\u0000\u0aee\u0af2\u0007"+
		"\u000b\u0000\u0000\u0aef\u0af2\u0005\u0168\u0000\u0000\u0af0\u0af2\u0001"+
		"\u0000\u0000\u0000\u0af1\u0ae9\u0001\u0000\u0000\u0000\u0af1\u0aea\u0001"+
		"\u0000\u0000\u0000\u0af1\u0aeb\u0001\u0000\u0000\u0000\u0af1\u0aed\u0001"+
		"\u0000\u0000\u0000\u0af1\u0aef\u0001\u0000\u0000\u0000\u0af1\u0af0\u0001"+
		"\u0000\u0000\u0000\u0af2\u00af\u0001\u0000\u0000\u0000\u0af3\u0af6\u0003"+
		"\u00b4Z\u0000\u0af4\u0af6\u0001\u0000\u0000\u0000\u0af5\u0af3\u0001\u0000"+
		"\u0000\u0000\u0af5\u0af4\u0001\u0000\u0000\u0000\u0af6\u00b1\u0001\u0000"+
		"\u0000\u0000\u0af7\u0af8\u0005\u0002\u0000\u0000\u0af8\u0af9\u0003\u00b6"+
		"[\u0000\u0af9\u0afa\u0005\u0003\u0000\u0000\u0afa\u0afd\u0001\u0000\u0000"+
		"\u0000\u0afb\u0afd\u0001\u0000\u0000\u0000\u0afc\u0af7\u0001\u0000\u0000"+
		"\u0000\u0afc\u0afb\u0001\u0000\u0000\u0000\u0afd\u00b3\u0001\u0000\u0000"+
		"\u0000\u0afe\u0b03\u0003\u00b8\\\u0000\u0aff\u0b00\u0005\u0006\u0000\u0000"+
		"\u0b00\u0b02\u0003\u00b8\\\u0000\u0b01\u0aff\u0001\u0000\u0000\u0000\u0b02"+
		"\u0b05\u0001\u0000\u0000\u0000\u0b03\u0b01\u0001\u0000\u0000\u0000\u0b03"+
		"\u0b04\u0001\u0000\u0000\u0000\u0b04\u00b5\u0001\u0000\u0000\u0000\u0b05"+
		"\u0b03\u0001\u0000\u0000\u0000\u0b06\u0b0b\u0003\u00ba]\u0000\u0b07\u0b08"+
		"\u0005\u0006\u0000\u0000\u0b08\u0b0a\u0003\u00ba]\u0000\u0b09\u0b07\u0001"+
		"\u0000\u0000\u0000\u0b0a\u0b0d\u0001\u0000\u0000\u0000\u0b0b\u0b09\u0001"+
		"\u0000\u0000\u0000\u0b0b\u0b0c\u0001\u0000\u0000\u0000\u0b0c\u00b7\u0001"+
		"\u0000\u0000\u0000\u0b0d\u0b0b\u0001\u0000\u0000\u0000\u0b0e\u0b12\u0003"+
		"\u00d0h\u0000\u0b0f\u0b12\u0003\u00cae\u0000\u0b10\u0b12\u0003\u00bc^"+
		"\u0000\u0b11\u0b0e\u0001\u0000\u0000\u0000\u0b11\u0b0f\u0001\u0000\u0000"+
		"\u0000\u0b11\u0b10\u0001\u0000\u0000\u0000\u0b12\u00b9\u0001\u0000\u0000"+
		"\u0000\u0b13\u0b16\u0003\u00be_\u0000\u0b14\u0b16\u0003\u00d0h\u0000\u0b15"+
		"\u0b13\u0001\u0000\u0000\u0000\u0b15\u0b14\u0001\u0000\u0000\u0000\u0b16"+
		"\u00bb\u0001\u0000\u0000\u0000\u0b17\u0b18\u0003\u055e\u02af\u0000\u0b18"+
		"\u0b19\u0003\u0460\u0230\u0000\u0b19\u0b1a\u0003\u0154\u00aa\u0000\u0b1a"+
		"\u0b1b\u0003\u00c0`\u0000\u0b1b\u00bd\u0001\u0000\u0000\u0000\u0b1c\u0b1f"+
		"\u0003\u055e\u02af\u0000\u0b1d\u0b1e\u0005i\u0000\u0000\u0b1e\u0b20\u0005"+
		"\u0111\u0000\u0000\u0b1f\u0b1d\u0001\u0000\u0000\u0000\u0b1f\u0b20\u0001"+
		"\u0000\u0000\u0000\u0b20\u0b21\u0001\u0000\u0000\u0000\u0b21\u0b22\u0003"+
		"\u00c0`\u0000\u0b22\u00bf\u0001\u0000\u0000\u0000\u0b23\u0b25\u0003\u00c2"+
		"a\u0000\u0b24\u0b23\u0001\u0000\u0000\u0000\u0b25\u0b28\u0001\u0000\u0000"+
		"\u0000\u0b26\u0b24\u0001\u0000\u0000\u0000\u0b26\u0b27\u0001\u0000\u0000"+
		"\u0000\u0b27\u00c1\u0001\u0000\u0000\u0000\u0b28\u0b26\u0001\u0000\u0000"+
		"\u0000\u0b29\u0b2a\u0005-\u0000\u0000\u0b2a\u0b2b\u0003\u053e\u029f\u0000"+
		"\u0b2b\u0b2c\u0003\u00c4b\u0000\u0b2c\u0b32\u0001\u0000\u0000\u0000\u0b2d"+
		"\u0b32\u0003\u00c4b\u0000\u0b2e\u0b32\u0003\u00c8d\u0000\u0b2f\u0b30\u0005"+
		"+\u0000\u0000\u0b30\u0b32\u0003\u020c\u0106\u0000\u0b31\u0b29\u0001\u0000"+
		"\u0000\u0000\u0b31\u0b2d\u0001\u0000\u0000\u0000\u0b31\u0b2e\u0001\u0000"+
		"\u0000\u0000\u0b31\u0b2f\u0001\u0000\u0000\u0000\u0b32\u00c3\u0001\u0000"+
		"\u0000\u0000\u0b33\u0b34\u0005M\u0000\u0000\u0b34\u0b5a\u0005N\u0000\u0000"+
		"\u0b35\u0b5a\u0005N\u0000\u0000\u0b36\u0b37\u0005b\u0000\u0000\u0b37\u0b38"+
		"\u0003\u0298\u014c\u0000\u0b38\u0b39\u0003\u0100\u0080\u0000\u0b39\u0b5a"+
		"\u0001\u0000\u0000\u0000\u0b3a\u0b3b\u0005U\u0000\u0000\u0b3b\u0b3c\u0005"+
		"\u00ec\u0000\u0000\u0b3c\u0b3d\u0003\u0298\u014c\u0000\u0b3d\u0b3e\u0003"+
		"\u0100\u0080\u0000\u0b3e\u0b5a\u0001\u0000\u0000\u0000\u0b3f\u0b40\u0005"+
		"*\u0000\u0000\u0b40\u0b41\u0005\u0002\u0000\u0000\u0b41\u0b42\u0003\u048c"+
		"\u0246\u0000\u0b42\u0b43\u0005\u0003\u0000\u0000\u0b43\u0b44\u0003\u00d4"+
		"j\u0000\u0b44\u0b5a\u0001\u0000\u0000\u0000\u0b45\u0b46\u00055\u0000\u0000"+
		"\u0b46\u0b5a\u0003\u04b6\u025b\u0000\u0b47\u0b48\u0005\u01b6\u0000\u0000"+
		"\u0b48\u0b49\u0003\u00c6c\u0000\u0b49\u0b51\u0005$\u0000\u0000\u0b4a\u0b4b"+
		"\u0005\u00db\u0000\u0000\u0b4b\u0b52\u0003\u011c\u008e\u0000\u0b4c\u0b4d"+
		"\u0005\u0002\u0000\u0000\u0b4d\u0b4e\u0003\u048c\u0246\u0000\u0b4e\u0b4f"+
		"\u0005\u0003\u0000\u0000\u0b4f\u0b50\u0005\u01b8\u0000\u0000\u0b50\u0b52"+
		"\u0001\u0000\u0000\u0000\u0b51\u0b4a\u0001\u0000\u0000\u0000\u0b51\u0b4c"+
		"\u0001\u0000\u0000\u0000\u0b52\u0b5a\u0001\u0000\u0000\u0000\u0b53\u0b54"+
		"\u0005V\u0000\u0000\u0b54\u0b55\u0003\u053a\u029d\u0000\u0b55\u0b56\u0003"+
		"\u00d6k\u0000\u0b56\u0b57\u0003\u00deo\u0000\u0b57\u0b58\u0003\u00e6s"+
		"\u0000\u0b58\u0b5a\u0001\u0000\u0000\u0000\u0b59\u0b33\u0001\u0000\u0000"+
		"\u0000\u0b59\u0b35\u0001\u0000\u0000\u0000\u0b59\u0b36\u0001\u0000\u0000"+
		"\u0000\u0b59\u0b3a\u0001\u0000\u0000\u0000\u0b59\u0b3f\u0001\u0000\u0000"+
		"\u0000\u0b59\u0b45\u0001\u0000\u0000\u0000\u0b59\u0b47\u0001\u0000\u0000"+
		"\u0000\u0b59\u0b53\u0001\u0000\u0000\u0000\u0b5a\u00c5\u0001\u0000\u0000"+
		"\u0000\u0b5b\u0b5f\u0005\u008b\u0000\u0000\u0b5c\u0b5d\u0005\u0093\u0000"+
		"\u0000\u0b5d\u0b5f\u00055\u0000\u0000\u0b5e\u0b5b\u0001\u0000\u0000\u0000"+
		"\u0b5e\u0b5c\u0001\u0000\u0000\u0000\u0b5f\u00c7\u0001\u0000\u0000\u0000"+
		"\u0b60\u0b66\u00056\u0000\u0000\u0b61\u0b62\u0005M\u0000\u0000\u0b62\u0b66"+
		"\u00056\u0000\u0000\u0b63\u0b64\u0005E\u0000\u0000\u0b64\u0b66\u0007\b"+
		"\u0000\u0000\u0b65\u0b60\u0001\u0000\u0000\u0000\u0b65\u0b61\u0001\u0000"+
		"\u0000\u0000\u0b65\u0b63\u0001\u0000\u0000\u0000\u0b66\u00c9\u0001\u0000"+
		"\u0000\u0000\u0b67\u0b68\u0005x\u0000\u0000\u0b68\u0b69\u0003\u053a\u029d"+
		"\u0000\u0b69\u0b6a\u0003\u00ccf\u0000\u0b6a\u00cb\u0001\u0000\u0000\u0000"+
		"\u0b6b\u0b6c\u0007\f\u0000\u0000\u0b6c\u0b6e\u0003\u00ceg\u0000\u0b6d"+
		"\u0b6b\u0001\u0000\u0000\u0000\u0b6e\u0b71\u0001\u0000\u0000\u0000\u0b6f"+
		"\u0b6d\u0001\u0000\u0000\u0000\u0b6f\u0b70\u0001\u0000\u0000\u0000\u0b70"+
		"\u00cd\u0001\u0000\u0000\u0000\u0b71\u0b6f\u0001\u0000\u0000\u0000\u0b72"+
		"\u0b73\u0007\r\u0000\u0000\u0b73\u00cf\u0001\u0000\u0000\u0000\u0b74\u0b75"+
		"\u0005-\u0000\u0000\u0b75\u0b76\u0003\u053e\u029f\u0000\u0b76\u0b77\u0003"+
		"\u00d2i\u0000\u0b77\u0b7a\u0001\u0000\u0000\u0000\u0b78\u0b7a\u0003\u00d2"+
		"i\u0000\u0b79\u0b74\u0001\u0000\u0000\u0000\u0b79\u0b78\u0001\u0000\u0000"+
		"\u0000\u0b7a\u00d1\u0001\u0000\u0000\u0000\u0b7b\u0b7c\u0005*\u0000\u0000"+
		"\u0b7c\u0b7d\u0005\u0002\u0000\u0000\u0b7d\u0b7e\u0003\u048c\u0246\u0000"+
		"\u0b7e\u0b7f\u0005\u0003\u0000\u0000\u0b7f\u0b80\u0003\u01b8\u00dc\u0000"+
		"\u0b80\u0bb6\u0001\u0000\u0000\u0000\u0b81\u0b8d\u0005b\u0000\u0000\u0b82"+
		"\u0b83\u0005\u0002\u0000\u0000\u0b83\u0b84\u0003\u00d8l\u0000\u0b84\u0b85"+
		"\u0005\u0003\u0000\u0000\u0b85\u0b86\u0003\u00dcn\u0000\u0b86\u0b87\u0003"+
		"\u0298\u014c\u0000\u0b87\u0b88\u0003\u0100\u0080\u0000\u0b88\u0b89\u0003"+
		"\u01b8\u00dc\u0000\u0b89\u0b8e\u0001\u0000\u0000\u0000\u0b8a\u0b8b\u0003"+
		"\u0102\u0081\u0000\u0b8b\u0b8c\u0003\u01b8\u00dc\u0000\u0b8c\u0b8e\u0001"+
		"\u0000\u0000\u0000\u0b8d\u0b82\u0001\u0000\u0000\u0000\u0b8d\u0b8a\u0001"+
		"\u0000\u0000\u0000\u0b8e\u0bb6\u0001\u0000\u0000\u0000\u0b8f\u0b90\u0005"+
		"U\u0000\u0000\u0b90\u0b9c\u0005\u00ec\u0000\u0000\u0b91\u0b92\u0005\u0002"+
		"\u0000\u0000\u0b92\u0b93\u0003\u00d8l\u0000\u0b93\u0b94\u0005\u0003\u0000"+
		"\u0000\u0b94\u0b95\u0003\u00dcn\u0000\u0b95\u0b96\u0003\u0298\u014c\u0000"+
		"\u0b96\u0b97\u0003\u0100\u0080\u0000\u0b97\u0b98\u0003\u01b8\u00dc\u0000"+
		"\u0b98\u0b9d\u0001\u0000\u0000\u0000\u0b99\u0b9a\u0003\u0102\u0081\u0000"+
		"\u0b9a\u0b9b\u0003\u01b8\u00dc\u0000\u0b9b\u0b9d\u0001\u0000\u0000\u0000"+
		"\u0b9c\u0b91\u0001\u0000\u0000\u0000\u0b9c\u0b99\u0001\u0000\u0000\u0000"+
		"\u0b9d\u0bb6\u0001\u0000\u0000\u0000\u0b9e\u0b9f\u0005\u00c7\u0000\u0000"+
		"\u0b9f\u0ba0\u0003\u0254\u012a\u0000\u0ba0\u0ba1\u0005\u0002\u0000\u0000"+
		"\u0ba1\u0ba2\u0003\u00e0p\u0000\u0ba2\u0ba3\u0005\u0003\u0000\u0000\u0ba3"+
		"\u0ba4\u0003\u00dcn\u0000\u0ba4\u0ba5\u0003\u0298\u014c\u0000\u0ba5\u0ba6"+
		"\u0003\u0100\u0080\u0000\u0ba6\u0ba7\u0003\u00e4r\u0000\u0ba7\u0ba8\u0003"+
		"\u01b8\u00dc\u0000\u0ba8\u0bb6\u0001\u0000\u0000\u0000\u0ba9\u0baa\u0005"+
		"?\u0000\u0000\u0baa\u0bab\u0005\u00ec\u0000\u0000\u0bab\u0bac\u0005\u0002"+
		"\u0000\u0000\u0bac\u0bad\u0003\u00d8l\u0000\u0bad\u0bae\u0005\u0003\u0000"+
		"\u0000\u0bae\u0baf\u0005V\u0000\u0000\u0baf\u0bb0\u0003\u053a\u029d\u0000"+
		"\u0bb0\u0bb1\u0003\u00d6k\u0000\u0bb1\u0bb2\u0003\u00deo\u0000\u0bb2\u0bb3"+
		"\u0003\u00e6s\u0000\u0bb3\u0bb4\u0003\u01b8\u00dc\u0000\u0bb4\u0bb6\u0001"+
		"\u0000\u0000\u0000\u0bb5\u0b7b\u0001\u0000\u0000\u0000\u0bb5\u0b81\u0001"+
		"\u0000\u0000\u0000\u0bb5\u0b8f\u0001\u0000\u0000\u0000\u0bb5\u0b9e\u0001"+
		"\u0000\u0000\u0000\u0bb5\u0ba9\u0001\u0000\u0000\u0000\u0bb6\u00d3\u0001"+
		"\u0000\u0000\u0000\u0bb7\u0bb8\u0005\u0106\u0000\u0000\u0bb8\u0bbb\u0005"+
		"\u00e4\u0000\u0000\u0bb9\u0bbb\u0001\u0000\u0000\u0000\u0bba\u0bb7\u0001"+
		"\u0000\u0000\u0000\u0bba\u0bb9\u0001\u0000\u0000\u0000\u0bbb\u00d5\u0001"+
		"\u0000\u0000\u0000\u0bbc\u0bbd\u0005\u0002\u0000\u0000\u0bbd\u0bbe\u0003"+
		"\u00d8l\u0000\u0bbe\u0bbf\u0005\u0003\u0000\u0000\u0bbf\u0bc2\u0001\u0000"+
		"\u0000\u0000\u0bc0\u0bc2\u0001\u0000\u0000\u0000\u0bc1\u0bbc\u0001\u0000"+
		"\u0000\u0000\u0bc1\u0bc0\u0001\u0000\u0000\u0000\u0bc2\u00d7\u0001\u0000"+
		"\u0000\u0000\u0bc3\u0bc8\u0003\u00dam\u0000\u0bc4\u0bc5\u0005\u0006\u0000"+
		"\u0000\u0bc5\u0bc7\u0003\u00dam\u0000\u0bc6\u0bc4\u0001\u0000\u0000\u0000"+
		"\u0bc7\u0bca\u0001\u0000\u0000\u0000\u0bc8\u0bc6\u0001\u0000\u0000\u0000"+
		"\u0bc8\u0bc9\u0001\u0000\u0000\u0000\u0bc9\u00d9\u0001\u0000\u0000\u0000"+
		"\u0bca\u0bc8\u0001\u0000\u0000\u0000\u0bcb\u0bcc\u0003\u055e\u02af\u0000"+
		"\u0bcc\u00db\u0001\u0000\u0000\u0000\u0bcd\u0bce\u0005\u01b9\u0000\u0000"+
		"\u0bce\u0bcf\u0005\u0002\u0000\u0000\u0bcf\u0bd0\u0003\u00d8l\u0000\u0bd0"+
		"\u0bd1\u0005\u0003\u0000\u0000\u0bd1\u0bd4\u0001\u0000\u0000\u0000\u0bd2"+
		"\u0bd4\u0001\u0000\u0000\u0000\u0bd3\u0bcd\u0001\u0000\u0000\u0000\u0bd3"+
		"\u0bd2\u0001\u0000\u0000\u0000\u0bd4\u00dd\u0001\u0000\u0000\u0000\u0bd5"+
		"\u0bd6\u0005\u00f9\u0000\u0000\u0bd6\u0bd9\u0007\u000e\u0000\u0000\u0bd7"+
		"\u0bd9\u0001\u0000\u0000\u0000\u0bd8\u0bd5\u0001\u0000\u0000\u0000\u0bd8"+
		"\u0bd7\u0001\u0000\u0000\u0000\u0bd9\u00df\u0001\u0000\u0000\u0000\u0bda"+
		"\u0bdf\u0003\u00e2q\u0000\u0bdb\u0bdc\u0005\u0006\u0000\u0000\u0bdc\u0bde"+
		"\u0003\u00e2q\u0000\u0bdd\u0bdb\u0001\u0000\u0000\u0000\u0bde\u0be1\u0001"+
		"\u0000\u0000\u0000\u0bdf\u0bdd\u0001\u0000\u0000\u0000\u0bdf\u0be0\u0001"+
		"\u0000\u0000\u0000\u0be0\u00e1\u0001\u0000\u0000\u0000\u0be1\u0bdf\u0001"+
		"\u0000\u0000\u0000\u0be2\u0be3\u0003\u025a\u012d\u0000\u0be3\u0bea\u0005"+
		"i\u0000\u0000\u0be4\u0beb\u0003\u02ac\u0156\u0000\u0be5\u0be6\u0005\u010f"+
		"\u0000\u0000\u0be6\u0be7\u0005\u0002\u0000\u0000\u0be7\u0be8\u0003\u02ac"+
		"\u0156\u0000\u0be8\u0be9\u0005\u0003\u0000\u0000\u0be9\u0beb\u0001\u0000"+
		"\u0000\u0000\u0bea\u0be4\u0001\u0000\u0000\u0000\u0bea\u0be5\u0001\u0000"+
		"\u0000\u0000\u0beb\u00e3\u0001\u0000\u0000\u0000\u0bec\u0bed\u0005g\u0000"+
		"\u0000\u0bed\u0bee\u0005\u0002\u0000\u0000\u0bee\u0bef\u0003\u048c\u0246"+
		"\u0000\u0bef\u0bf0\u0005\u0003\u0000\u0000\u0bf0\u0bf3\u0001\u0000\u0000"+
		"\u0000\u0bf1\u0bf3\u0001\u0000\u0000\u0000\u0bf2\u0bec\u0001\u0000\u0000"+
		"\u0000\u0bf2\u0bf1\u0001\u0000\u0000\u0000\u0bf3\u00e5\u0001\u0000\u0000"+
		"\u0000\u0bf4\u0bfe\u0003\u00e8t\u0000\u0bf5\u0bfe\u0003\u00eau\u0000\u0bf6"+
		"\u0bf7\u0003\u00e8t\u0000\u0bf7\u0bf8\u0003\u00eau\u0000\u0bf8\u0bfe\u0001"+
		"\u0000\u0000\u0000\u0bf9\u0bfa\u0003\u00eau\u0000\u0bfa\u0bfb\u0003\u00e8"+
		"t\u0000\u0bfb\u0bfe\u0001\u0000\u0000\u0000\u0bfc\u0bfe\u0001\u0000\u0000"+
		"\u0000\u0bfd\u0bf4\u0001\u0000\u0000\u0000\u0bfd\u0bf5\u0001\u0000\u0000"+
		"\u0000\u0bfd\u0bf6\u0001\u0000\u0000\u0000\u0bfd\u0bf9\u0001\u0000\u0000"+
		"\u0000\u0bfd\u0bfc\u0001\u0000\u0000\u0000\u0bfe\u00e7\u0001\u0000\u0000"+
		"\u0000\u0bff\u0c00\u0005P\u0000\u0000\u0c00\u0c01\u0005\u016a\u0000\u0000"+
		"\u0c01\u0c02\u0003\u00ecv\u0000\u0c02\u00e9\u0001\u0000\u0000\u0000\u0c03"+
		"\u0c04\u0005P\u0000\u0000\u0c04\u0c05\u0005\u00b6\u0000\u0000\u0c05\u0c06"+
		"\u0003\u00ecv\u0000\u0c06\u00eb\u0001\u0000\u0000\u0000\u0c07\u0c08\u0005"+
		"\u0106\u0000\u0000\u0c08\u0c0e\u0005\u0084\u0000\u0000\u0c09\u0c0e\u0005"+
		"\u0134\u0000\u0000\u0c0a\u0c0e\u0005\u0096\u0000\u0000\u0c0b\u0c0c\u0005"+
		"\u0146\u0000\u0000\u0c0c\u0c0e\u0007\u000f\u0000\u0000\u0c0d\u0c07\u0001"+
		"\u0000\u0000\u0000\u0c0d\u0c09\u0001\u0000\u0000\u0000\u0c0d\u0c0a\u0001"+
		"\u0000\u0000\u0000\u0c0d\u0c0b\u0001\u0000\u0000\u0000\u0c0e\u00ed\u0001"+
		"\u0000\u0000\u0000\u0c0f\u0c10\u0005\u00e5\u0000\u0000\u0c10\u0c11\u0005"+
		"\u0002\u0000\u0000\u0c11\u0c12\u0003\u0538\u029c\u0000\u0c12\u0c13\u0005"+
		"\u0003\u0000\u0000\u0c13\u0c16\u0001\u0000\u0000\u0000\u0c14\u0c16\u0001"+
		"\u0000\u0000\u0000\u0c15\u0c0f\u0001\u0000\u0000\u0000\u0c15\u0c14\u0001"+
		"\u0000\u0000\u0000\u0c16\u00ef\u0001\u0000\u0000\u0000\u0c17\u0c1a\u0003"+
		"\u00f2y\u0000\u0c18\u0c1a\u0001\u0000\u0000\u0000\u0c19\u0c17\u0001\u0000"+
		"\u0000\u0000\u0c19\u0c18\u0001\u0000\u0000\u0000\u0c1a\u00f1\u0001\u0000"+
		"\u0000\u0000\u0c1b\u0c1c\u0005\u0116\u0000\u0000\u0c1c\u0c1d\u0005\u0093"+
		"\u0000\u0000\u0c1d\u0c1e\u0003\u055e\u02af\u0000\u0c1e\u0c1f\u0005\u0002"+
		"\u0000\u0000\u0c1f\u0c20\u0003\u00f4z\u0000\u0c20\u0c21\u0005\u0003\u0000"+
		"\u0000\u0c21\u00f3\u0001\u0000\u0000\u0000\u0c22\u0c27\u0003\u00f6{\u0000"+
		"\u0c23\u0c24\u0005\u0006\u0000\u0000\u0c24\u0c26\u0003\u00f6{\u0000\u0c25"+
		"\u0c23\u0001\u0000\u0000\u0000\u0c26\u0c29\u0001\u0000\u0000\u0000\u0c27"+
		"\u0c25\u0001\u0000\u0000\u0000\u0c27\u0c28\u0001\u0000\u0000\u0000\u0c28"+
		"\u00f5\u0001\u0000\u0000\u0000\u0c29\u0c27\u0001\u0000\u0000\u0000\u0c2a"+
		"\u0c2b\u0003\u055e\u02af\u0000\u0c2b\u0c2c\u0003\u0260\u0130\u0000\u0c2c"+
		"\u0c2d\u0003\u0262\u0131\u0000\u0c2d\u0c39\u0001\u0000\u0000\u0000\u0c2e"+
		"\u0c2f\u0003\u04c0\u0260\u0000\u0c2f\u0c30\u0003\u0260\u0130\u0000\u0c30"+
		"\u0c31\u0003\u0262\u0131\u0000\u0c31\u0c39\u0001\u0000\u0000\u0000\u0c32"+
		"\u0c33\u0005\u0002\u0000\u0000\u0c33\u0c34\u0003\u048c\u0246\u0000\u0c34"+
		"\u0c35\u0005\u0003\u0000\u0000\u0c35\u0c36\u0003\u0260\u0130\u0000\u0c36"+
		"\u0c37\u0003\u0262\u0131\u0000\u0c37\u0c39\u0001\u0000\u0000\u0000\u0c38"+
		"\u0c2a\u0001\u0000\u0000\u0000\u0c38\u0c2e\u0001\u0000\u0000\u0000\u0c38"+
		"\u0c32\u0001\u0000\u0000\u0000\u0c39\u00f7\u0001\u0000\u0000\u0000\u0c3a"+
		"\u0c3b\u0005d\u0000\u0000\u0c3b\u0c3e\u0003\u053e\u029f\u0000\u0c3c\u0c3e"+
		"\u0001\u0000\u0000\u0000\u0c3d\u0c3a\u0001\u0000\u0000\u0000\u0c3d\u0c3c"+
		"\u0001\u0000\u0000\u0000\u0c3e\u00f9\u0001\u0000\u0000\u0000\u0c3f\u0c40"+
		"\u0005i\u0000\u0000\u0c40\u0c45\u0003t:\u0000\u0c41\u0c42\u0005\u0174"+
		"\u0000\u0000\u0c42\u0c45\u0005\u010e\u0000\u0000\u0c43\u0c45\u0001\u0000"+
		"\u0000\u0000\u0c44\u0c3f\u0001\u0000\u0000\u0000\u0c44\u0c41\u0001\u0000"+
		"\u0000\u0000\u0c44\u0c43\u0001\u0000\u0000\u0000\u0c45\u00fb\u0001\u0000"+
		"\u0000\u0000\u0c46\u0c47\u0005P\u0000\u0000\u0c47\u0c4d\u0005\u00a1\u0000"+
		"\u0000\u0c48\u0c4e\u0005\u00bf\u0000\u0000\u0c49\u0c4a\u0005\u00b6\u0000"+
		"\u0000\u0c4a\u0c4e\u0005\u0139\u0000\u0000\u0c4b\u0c4c\u0005\u011d\u0000"+
		"\u0000\u0c4c\u0c4e\u0005\u0139\u0000\u0000\u0c4d\u0c48\u0001\u0000\u0000"+
		"\u0000\u0c4d\u0c49\u0001\u0000\u0000\u0000\u0c4d\u0c4b\u0001\u0000\u0000"+
		"\u0000\u0c4e\u0c51\u0001\u0000\u0000\u0000\u0c4f\u0c51\u0001\u0000\u0000"+
		"\u0000\u0c50\u0c46\u0001\u0000\u0000\u0000\u0c50\u0c4f\u0001\u0000\u0000"+
		"\u0000\u0c51\u00fd\u0001\u0000\u0000\u0000\u0c52\u0c53\u0005\u0158\u0000"+
		"\u0000\u0c53\u0c56\u0003\u053e\u029f\u0000\u0c54\u0c56\u0001\u0000\u0000"+
		"\u0000\u0c55\u0c52\u0001\u0000\u0000\u0000\u0c55\u0c54\u0001\u0000\u0000"+
		"\u0000\u0c56\u00ff\u0001\u0000\u0000\u0000\u0c57\u0c58\u0005d\u0000\u0000"+
		"\u0c58\u0c59\u0005\u00e2\u0000\u0000\u0c59\u0c5a\u0005\u0158\u0000\u0000"+
		"\u0c5a\u0c5d\u0003\u053e\u029f\u0000\u0c5b\u0c5d\u0001\u0000\u0000\u0000"+
		"\u0c5c\u0c57\u0001\u0000\u0000\u0000\u0c5c\u0c5b\u0001\u0000\u0000\u0000"+
		"\u0c5d\u0101\u0001\u0000\u0000\u0000\u0c5e\u0c5f\u0005d\u0000\u0000\u0c5f"+
		"\u0c60\u0005\u00e2\u0000\u0000\u0c60\u0c61\u0003\u053e\u029f\u0000\u0c61"+
		"\u0103\u0001\u0000\u0000\u0000\u0c62\u0c63\u0005.\u0000\u0000\u0c63\u0c67"+
		"\u0005\u014f\u0000\u0000\u0c64\u0c65\u0005\u00dc\u0000\u0000\u0c65\u0c66"+
		"\u0005M\u0000\u0000\u0c66\u0c68\u0005\u0185\u0000\u0000\u0c67\u0c64\u0001"+
		"\u0000\u0000\u0000\u0c67\u0c68\u0001\u0000\u0000\u0000\u0c68\u0c69\u0001"+
		"\u0000\u0000\u0000\u0c69\u0c6a\u0003\u020c\u0106\u0000\u0c6a\u0c6b\u0003"+
		"\u0366\u01b3\u0000\u0c6b\u0c6c\u0005P\u0000\u0000\u0c6c\u0c6d\u0003\u0502"+
		"\u0281\u0000\u0c6d\u0c6e\u0005@\u0000\u0000\u0c6e\u0c6f\u0003\u0422\u0211"+
		"\u0000\u0c6f\u0105\u0001\u0000\u0000\u0000\u0c70\u0c71\u0005\u008a\u0000"+
		"\u0000\u0c71\u0c74\u0005\u014f\u0000\u0000\u0c72\u0c73\u0005\u00dc\u0000"+
		"\u0000\u0c73\u0c75\u0005\u0185\u0000\u0000\u0c74\u0c72\u0001\u0000\u0000"+
		"\u0000\u0c74\u0c75\u0001\u0000\u0000\u0000\u0c75\u0c76\u0001\u0000\u0000"+
		"\u0000\u0c76\u0c77\u0003\u020c\u0106\u0000\u0c77\u0c78\u0005\u0146\u0000"+
		"\u0000\u0c78\u0c79\u0005\u014f\u0000\u0000\u0c79\u0c7a\u0003\u0556\u02ab"+
		"\u0000\u0c7a\u0107\u0001\u0000\u0000\u0000\u0c7b\u0c7c\u0005.\u0000\u0000"+
		"\u0c7c\u0c7d\u0003\u00aeW\u0000\u0c7d\u0c81\u0005\\\u0000\u0000\u0c7e"+
		"\u0c7f\u0005\u00dc\u0000\u0000\u0c7f\u0c80\u0005M\u0000\u0000\u0c80\u0c82"+
		"\u0005\u0185\u0000\u0000\u0c81\u0c7e\u0001\u0000\u0000\u0000\u0c81\u0c82"+
		"\u0001\u0000\u0000\u0000\u0c82\u0c83\u0001\u0000\u0000\u0000\u0c83\u0c84"+
		"\u0003\u010a\u0085\u0000\u0c84\u0c85\u0005$\u0000\u0000\u0c85\u0c86\u0003"+
		"\u03c0\u01e0\u0000\u0c86\u0c87\u0003\u010c\u0086\u0000\u0c87\u0109\u0001"+
		"\u0000\u0000\u0000\u0c88\u0c89\u0003\u053a\u029d\u0000\u0c89\u0c8a\u0003"+
		"\u00d6k\u0000\u0c8a\u0c8b\u0003\u00f8|\u0000\u0c8b\u0c8c\u0003\u00fa}"+
		"\u0000\u0c8c\u0c8d\u0003\u00fc~\u0000\u0c8d\u0c8e\u0003\u00fe\u007f\u0000"+
		"\u0c8e\u010b\u0001\u0000\u0000\u0000\u0c8f\u0c93\u0005i\u0000\u0000\u0c90"+
		"\u0c94\u0005\u00ae\u0000\u0000\u0c91\u0c92\u0005\u0106\u0000\u0000\u0c92"+
		"\u0c94\u0005\u00ae\u0000\u0000\u0c93\u0c90\u0001\u0000\u0000\u0000\u0c93"+
		"\u0c91\u0001\u0000\u0000\u0000\u0c94\u0c97\u0001\u0000\u0000\u0000\u0c95"+
		"\u0c97\u0001\u0000\u0000\u0000\u0c96\u0c8f\u0001\u0000\u0000\u0000\u0c96"+
		"\u0c95\u0001\u0000\u0000\u0000\u0c97\u010d\u0001\u0000\u0000\u0000\u0c98"+
		"\u0c99\u0005.\u0000\u0000\u0c99\u0c9a\u0003\u0112\u0089\u0000\u0c9a\u0c9b"+
		"\u0005\u00fb\u0000\u0000\u0c9b\u0c9f\u0005\u0171\u0000\u0000\u0c9c\u0c9d"+
		"\u0005\u00dc\u0000\u0000\u0c9d\u0c9e\u0005M\u0000\u0000\u0c9e\u0ca0\u0005"+
		"\u0185\u0000\u0000\u0c9f\u0c9c\u0001\u0000\u0000\u0000\u0c9f\u0ca0\u0001"+
		"\u0000\u0000\u0000\u0ca0\u0ca1\u0001\u0000\u0000\u0000\u0ca1\u0ca2\u0003"+
		"\u0110\u0088\u0000\u0ca2\u0ca3\u0005$\u0000\u0000\u0ca3\u0ca4\u0003\u03c0"+
		"\u01e0\u0000\u0ca4\u0ca5\u0003\u010c\u0086\u0000\u0ca5\u010f\u0001\u0000"+
		"\u0000\u0000\u0ca6\u0ca7\u0003\u053a\u029d\u0000\u0ca7\u0ca8\u0003\u00d6"+
		"k\u0000\u0ca8\u0ca9\u0003\u00f8|\u0000\u0ca9\u0caa\u0003v;\u0000\u0caa"+
		"\u0cab\u0003\u00fe\u007f\u0000\u0cab\u0111\u0001\u0000\u0000\u0000\u0cac"+
		"\u0caf\u0005\u0168\u0000\u0000\u0cad\u0caf\u0001\u0000\u0000\u0000\u0cae"+
		"\u0cac\u0001\u0000\u0000\u0000\u0cae\u0cad\u0001\u0000\u0000\u0000\u0caf"+
		"\u0113\u0001\u0000\u0000\u0000\u0cb0\u0cb1\u0005\u012a\u0000\u0000\u0cb1"+
		"\u0cb2\u0005\u00fb\u0000\u0000\u0cb2\u0cb3\u0005\u0171\u0000\u0000\u0cb3"+
		"\u0cb4\u0003\u0250\u0128\u0000\u0cb4\u0cb5\u0003\u053a\u029d\u0000\u0cb5"+
		"\u0cb6\u0003\u010c\u0086\u0000\u0cb6\u0115\u0001\u0000\u0000\u0000\u0cb7"+
		"\u0cb8\u0005.\u0000\u0000\u0cb8\u0cb9\u0003\u00aeW\u0000\u0cb9\u0cbd\u0005"+
		"\u0141\u0000\u0000\u0cba\u0cbb\u0005\u00dc\u0000\u0000\u0cbb\u0cbc\u0005"+
		"M\u0000\u0000\u0cbc\u0cbe\u0005\u0185\u0000\u0000\u0cbd\u0cba\u0001\u0000"+
		"\u0000\u0000\u0cbd\u0cbe\u0001\u0000\u0000\u0000\u0cbe\u0cbf\u0001\u0000"+
		"\u0000\u0000\u0cbf\u0cc0\u0003\u053a\u029d\u0000\u0cc0\u0cc1\u0003\u011a"+
		"\u008d\u0000\u0cc1\u0117\u0001\u0000\u0000\u0000\u0cc2\u0cc3\u0005\u008a"+
		"\u0000\u0000\u0cc3\u0cc6\u0005\u0141\u0000\u0000\u0cc4\u0cc5\u0005\u00dc"+
		"\u0000\u0000\u0cc5\u0cc7\u0005\u0185\u0000\u0000\u0cc6\u0cc4\u0001\u0000"+
		"\u0000\u0000\u0cc6\u0cc7\u0001\u0000\u0000\u0000\u0cc7\u0cc8\u0001\u0000"+
		"\u0000\u0000\u0cc8\u0cc9\u0003\u053a\u029d\u0000\u0cc9\u0cca\u0003\u011e"+
		"\u008f\u0000\u0cca\u0119\u0001\u0000\u0000\u0000\u0ccb\u0cce\u0003\u011e"+
		"\u008f\u0000\u0ccc\u0cce\u0001\u0000\u0000\u0000\u0ccd\u0ccb\u0001\u0000"+
		"\u0000\u0000\u0ccd\u0ccc\u0001\u0000\u0000\u0000\u0cce\u011b\u0001\u0000"+
		"\u0000\u0000\u0ccf\u0cd0\u0005\u0002\u0000\u0000\u0cd0\u0cd1\u0003\u011e"+
		"\u008f\u0000\u0cd1\u0cd2\u0005\u0003\u0000\u0000\u0cd2\u0cd5\u0001\u0000"+
		"\u0000\u0000\u0cd3\u0cd5\u0001\u0000\u0000\u0000\u0cd4\u0ccf\u0001\u0000"+
		"\u0000\u0000\u0cd4\u0cd3\u0001\u0000\u0000\u0000\u0cd5\u011d\u0001\u0000"+
		"\u0000\u0000\u0cd6\u0cd8\u0003\u0120\u0090\u0000\u0cd7\u0cd6\u0001\u0000"+
		"\u0000\u0000\u0cd8\u0cd9\u0001\u0000\u0000\u0000\u0cd9\u0cd7\u0001\u0000"+
		"\u0000\u0000\u0cd9\u0cda\u0001\u0000\u0000\u0000\u0cda\u011f\u0001\u0000"+
		"\u0000\u0000\u0cdb\u0cdc\u0005$\u0000\u0000\u0cdc\u0cfa\u0003\u0464\u0232"+
		"\u0000\u0cdd\u0cde\u0005\u0094\u0000\u0000\u0cde\u0cfa\u0003\u0124\u0092"+
		"\u0000\u0cdf\u0cfa\u0005\u00ad\u0000\u0000\u0ce0\u0ce1\u0005\u00e1\u0000"+
		"\u0000\u0ce1\u0ce2\u0003\u0122\u0091\u0000\u0ce2\u0ce3\u0003\u0124\u0092"+
		"\u0000\u0ce3\u0cfa\u0001\u0000\u0000\u0000\u0ce4\u0ce5\u0005\u00fc\u0000"+
		"\u0000\u0ce5\u0cfa\u0003\u0124\u0092\u0000\u0ce6\u0ce7\u0005\u00ff\u0000"+
		"\u0000\u0ce7\u0cfa\u0003\u0124\u0092\u0000\u0ce8\u0ce9\u0005\u0106\u0000"+
		"\u0000\u0ce9\u0cfa\u0007\u0010\u0000\u0000\u0cea\u0ceb\u0005\u0112\u0000"+
		"\u0000\u0ceb\u0cec\u0005\u0093\u0000\u0000\u0cec\u0cfa\u0003\u020c\u0106"+
		"\u0000\u0ced\u0cee\u0005\u0141\u0000\u0000\u0cee\u0cef\u0005\u0103\u0000"+
		"\u0000\u0cef\u0cfa\u0003\u020c\u0106\u0000\u0cf0\u0cf1\u0005\u014d\u0000"+
		"\u0000\u0cf1\u0cf2\u0003\u0010\b\u0000\u0cf2\u0cf3\u0003\u0124\u0092\u0000"+
		"\u0cf3\u0cfa\u0001\u0000\u0000\u0000\u0cf4\u0cf5\u0005\u0133\u0000\u0000"+
		"\u0cf5\u0cf7\u0003\u0010\b\u0000\u0cf6\u0cf8\u0003\u0124\u0092\u0000\u0cf7"+
		"\u0cf6\u0001\u0000\u0000\u0000\u0cf7\u0cf8\u0001\u0000\u0000\u0000\u0cf8"+
		"\u0cfa\u0001\u0000\u0000\u0000\u0cf9\u0cdb\u0001\u0000\u0000\u0000\u0cf9"+
		"\u0cdd\u0001\u0000\u0000\u0000\u0cf9\u0cdf\u0001\u0000\u0000\u0000\u0cf9"+
		"\u0ce0\u0001\u0000\u0000\u0000\u0cf9\u0ce4\u0001\u0000\u0000\u0000\u0cf9"+
		"\u0ce6\u0001\u0000\u0000\u0000\u0cf9\u0ce8\u0001\u0000\u0000\u0000\u0cf9"+
		"\u0cea\u0001\u0000\u0000\u0000\u0cf9\u0ced\u0001\u0000\u0000\u0000\u0cf9"+
		"\u0cf0\u0001\u0000\u0000\u0000\u0cf9\u0cf4\u0001\u0000\u0000\u0000\u0cfa"+
		"\u0121\u0001\u0000\u0000\u0000\u0cfb\u0cfe\u0005\u0093\u0000\u0000\u0cfc"+
		"\u0cfe\u0001\u0000\u0000\u0000\u0cfd\u0cfb\u0001\u0000\u0000\u0000\u0cfd"+
		"\u0cfc\u0001\u0000\u0000\u0000\u0cfe\u0123\u0001\u0000\u0000\u0000\u0cff"+
		"\u0d06\u0003\u054c\u02a6\u0000\u0d00\u0d01\u0005\f\u0000\u0000\u0d01\u0d06"+
		"\u0003\u054c\u02a6\u0000\u0d02\u0d03\u0005\r\u0000\u0000\u0d03\u0d06\u0003"+
		"\u054c\u02a6\u0000\u0d04\u0d06\u0003\u0556\u02ab\u0000\u0d05\u0cff\u0001"+
		"\u0000\u0000\u0000\u0d05\u0d00\u0001\u0000\u0000\u0000\u0d05\u0d02\u0001"+
		"\u0000\u0000\u0000\u0d05\u0d04\u0001\u0000\u0000\u0000\u0d06\u0125\u0001"+
		"\u0000\u0000\u0000\u0d07\u0d0c\u0003\u0124\u0092\u0000\u0d08\u0d09\u0005"+
		"\u0006\u0000\u0000\u0d09\u0d0b\u0003\u0124\u0092\u0000\u0d0a\u0d08\u0001"+
		"\u0000\u0000\u0000\u0d0b\u0d0e\u0001\u0000\u0000\u0000\u0d0c\u0d0a\u0001"+
		"\u0000\u0000\u0000\u0d0c\u0d0d\u0001\u0000\u0000\u0000\u0d0d\u0127\u0001"+
		"\u0000\u0000\u0000\u0d0e\u0d0c\u0001\u0000\u0000\u0000\u0d0f\u0d10\u0005"+
		".\u0000\u0000\u0d10\u0d11\u0003\u026a\u0135\u0000\u0d11\u0d12\u0003\u012a"+
		"\u0095\u0000\u0d12\u0d13\u0003\u0134\u009a\u0000\u0d13\u0d14\u0005\u00ee"+
		"\u0000\u0000\u0d14\u0d1a\u0003\u053e\u029f\u0000\u0d15\u0d16\u0005\u00d7"+
		"\u0000\u0000\u0d16\u0d17\u0003\u012c\u0096\u0000\u0d17\u0d18\u0003\u012e"+
		"\u0097\u0000\u0d18\u0d19\u0003\u0132\u0099\u0000\u0d19\u0d1b\u0001\u0000"+
		"\u0000\u0000\u0d1a\u0d15\u0001\u0000\u0000\u0000\u0d1a\u0d1b\u0001\u0000"+
		"\u0000\u0000\u0d1b\u0129\u0001\u0000\u0000\u0000\u0d1c\u0d1f\u0005\u0160"+
		"\u0000\u0000\u0d1d\u0d1f\u0001\u0000\u0000\u0000\u0d1e\u0d1c\u0001\u0000"+
		"\u0000\u0000\u0d1e\u0d1d\u0001\u0000\u0000\u0000\u0d1f\u012b\u0001\u0000"+
		"\u0000\u0000\u0d20\u0d22\u0003\u053e\u029f\u0000\u0d21\u0d23\u0003\u020e"+
		"\u0107\u0000\u0d22\u0d21\u0001\u0000\u0000\u0000\u0d22\u0d23\u0001\u0000"+
		"\u0000\u0000\u0d23\u012d\u0001\u0000\u0000\u0000\u0d24\u0d25\u0005\u00e6"+
		"\u0000\u0000\u0d25\u0d28\u0003\u012c\u0096\u0000\u0d26\u0d28\u0001\u0000"+
		"\u0000\u0000\u0d27\u0d24\u0001\u0000\u0000\u0000\u0d27\u0d26\u0001\u0000"+
		"\u0000\u0000\u0d28\u012f\u0001\u0000\u0000\u0000\u0d29\u0d2a\u0005\u016e"+
		"\u0000\u0000\u0d2a\u0d2e\u0003\u012c\u0096\u0000\u0d2b\u0d2c\u0005\u0106"+
		"\u0000\u0000\u0d2c\u0d2e\u0005\u016e\u0000\u0000\u0d2d\u0d29\u0001\u0000"+
		"\u0000\u0000\u0d2d\u0d2b\u0001\u0000\u0000\u0000\u0d2e\u0131\u0001\u0000"+
		"\u0000\u0000\u0d2f\u0d32\u0003\u0130\u0098\u0000\u0d30\u0d32\u0001\u0000"+
		"\u0000\u0000\u0d31\u0d2f\u0001\u0000\u0000\u0000\u0d31\u0d30\u0001\u0000"+
		"\u0000\u0000\u0d32\u0133\u0001\u0000\u0000\u0000\u0d33\u0d36\u0005\u0120"+
		"\u0000\u0000\u0d34\u0d36\u0001\u0000\u0000\u0000\u0d35\u0d33\u0001\u0000"+
		"\u0000\u0000\u0d35\u0d34\u0001\u0000\u0000\u0000\u0d36\u0135\u0001\u0000"+
		"\u0000\u0000\u0d37\u0d38\u0005.\u0000\u0000\u0d38\u0d39\u0005\u0158\u0000"+
		"\u0000\u0d39\u0d3a\u0003\u053e\u029f\u0000\u0d3a\u0d3b\u0003\u0138\u009c"+
		"\u0000\u0d3b\u0d3c\u0005\u00f6\u0000\u0000\u0d3c\u0d3d\u0003\u0550\u02a8"+
		"\u0000\u0d3d\u0d3e\u0003v;\u0000\u0d3e\u0137\u0001\u0000\u0000\u0000\u0d3f"+
		"\u0d40\u0005\u0113\u0000\u0000\u0d40\u0d43\u0003\u055a\u02ad\u0000\u0d41"+
		"\u0d43\u0001\u0000\u0000\u0000\u0d42\u0d3f\u0001\u0000\u0000\u0000\u0d42"+
		"\u0d41\u0001\u0000\u0000\u0000\u0d43\u0139\u0001\u0000\u0000\u0000\u0d44"+
		"\u0d45\u0005\u00bf\u0000\u0000\u0d45\u0d48\u0005\u0158\u0000\u0000\u0d46"+
		"\u0d47\u0005\u00dc\u0000\u0000\u0d47\u0d49\u0005\u0185\u0000\u0000\u0d48"+
		"\u0d46\u0001\u0000\u0000\u0000\u0d48\u0d49\u0001\u0000\u0000\u0000\u0d49"+
		"\u0d4a\u0001\u0000\u0000\u0000\u0d4a\u0d4b\u0003\u053e\u029f\u0000\u0d4b"+
		"\u013b\u0001\u0000\u0000\u0000\u0d4c\u0d4d\u0005.\u0000\u0000\u0d4d\u0d51"+
		"\u0005\u00cc\u0000\u0000\u0d4e\u0d4f\u0005\u00dc\u0000\u0000\u0d4f\u0d50"+
		"\u0005M\u0000\u0000\u0d50\u0d52\u0005\u0185\u0000\u0000\u0d51\u0d4e\u0001"+
		"\u0000\u0000\u0000\u0d51\u0d52\u0001\u0000\u0000\u0000\u0d52\u0d53\u0001"+
		"\u0000\u0000\u0000\u0d53\u0d54\u0003\u053e\u029f\u0000\u0d54\u0d55\u0003"+
		"\u0010\b\u0000\u0d55\u0d56\u0003\u013e\u009f\u0000\u0d56\u013d\u0001\u0000"+
		"\u0000\u0000\u0d57\u0d59\u0003\u0140\u00a0\u0000\u0d58\u0d57\u0001\u0000"+
		"\u0000\u0000\u0d59\u0d5c\u0001\u0000\u0000\u0000\u0d5a\u0d58\u0001\u0000"+
		"\u0000\u0000\u0d5a\u0d5b\u0001\u0000\u0000\u0000\u0d5b\u013f\u0001\u0000"+
		"\u0000\u0000\u0d5c\u0d5a\u0001\u0000\u0000\u0000\u0d5d\u0d5e\u0005\u013c"+
		"\u0000\u0000\u0d5e\u0d65\u0003\u053e\u029f\u0000\u0d5f\u0d60\u0005\u0170"+
		"\u0000\u0000\u0d60\u0d65\u0003H$\u0000\u0d61\u0d62\u0005@\u0000\u0000"+
		"\u0d62\u0d65\u0003H$\u0000\u0d63\u0d65\u0005\u0096\u0000\u0000\u0d64\u0d5d"+
		"\u0001\u0000\u0000\u0000\u0d64\u0d5f\u0001\u0000\u0000\u0000\u0d64\u0d61"+
		"\u0001\u0000\u0000\u0000\u0d64\u0d63\u0001\u0000\u0000\u0000\u0d65\u0141"+
		"\u0001\u0000\u0000\u0000\u0d66\u0d67\u0005\u008a\u0000\u0000\u0d67\u0d68"+
		"\u0005\u00cc\u0000\u0000\u0d68\u0d69\u0003\u053e\u029f\u0000\u0d69\u0d6a"+
		"\u0005\u016a\u0000\u0000\u0d6a\u0d6b\u0003\u0144\u00a2\u0000\u0d6b\u0143"+
		"\u0001\u0000\u0000\u0000\u0d6c\u0d6e\u0003\u0146\u00a3\u0000\u0d6d\u0d6c"+
		"\u0001\u0000\u0000\u0000\u0d6e\u0d71\u0001\u0000\u0000\u0000\u0d6f\u0d6d"+
		"\u0001\u0000\u0000\u0000\u0d6f\u0d70\u0001\u0000\u0000\u0000\u0d70\u0145"+
		"\u0001\u0000\u0000\u0000\u0d71\u0d6f\u0001\u0000\u0000\u0000\u0d72\u0d73"+
		"\u0005^\u0000\u0000\u0d73\u0d74\u0003H$\u0000\u0d74\u0147\u0001\u0000"+
		"\u0000\u0000\u0d75\u0d76\u0005\u008a\u0000\u0000\u0d76\u0d77\u0005\u00cc"+
		"\u0000\u0000\u0d77\u0d78\u0003\u053e\u029f\u0000\u0d78\u0d79\u0003(\u0014"+
		"\u0000\u0d79\u0d7a\u0003\u0204\u0102\u0000\u0d7a\u0d7b\u0003\u053e\u029f"+
		"\u0000\u0d7b\u0dde\u0001\u0000\u0000\u0000\u0d7c\u0d7d\u0005\u008a\u0000"+
		"\u0000\u0d7d\u0d7e\u0005\u00cc\u0000\u0000\u0d7e\u0d7f\u0003\u053e\u029f"+
		"\u0000\u0d7f\u0d80\u0003(\u0014\u0000\u0d80\u0d81\u0003\u0202\u0101\u0000"+
		"\u0d81\u0d82\u0003\u020c\u0106\u0000\u0d82\u0dde\u0001\u0000\u0000\u0000"+
		"\u0d83\u0d84\u0005\u008a\u0000\u0000\u0d84\u0d85\u0005\u00cc\u0000\u0000"+
		"\u0d85\u0d86\u0003\u053e\u029f\u0000\u0d86\u0d87\u0003(\u0014\u0000\u0d87"+
		"\u0d88\u0005\u0088\u0000\u0000\u0d88\u0d89\u0003\u028a\u0145\u0000\u0d89"+
		"\u0dde\u0001\u0000\u0000\u0000\u0d8a\u0d8b\u0005\u008a\u0000\u0000\u0d8b"+
		"\u0d8c\u0005\u00cc\u0000\u0000\u0d8c\u0d8d\u0003\u053e\u029f\u0000\u0d8d"+
		"\u0d8e\u0003(\u0014\u0000\u0d8e\u0d8f\u0005)\u0000\u0000\u0d8f\u0d90\u0005"+
		"\u0002\u0000\u0000\u0d90\u0d91\u0003\u0460\u0230\u0000\u0d91\u0d92\u0005"+
		"$\u0000\u0000\u0d92\u0d93\u0003\u0460\u0230\u0000\u0d93\u0d94\u0005\u0003"+
		"\u0000\u0000\u0d94\u0dde\u0001\u0000\u0000\u0000\u0d95\u0d96\u0005\u008a"+
		"\u0000\u0000\u0d96\u0d97\u0005\u00cc\u0000\u0000\u0d97\u0d98\u0003\u053e"+
		"\u029f\u0000\u0d98\u0d99\u0003(\u0014\u0000\u0d99\u0d9a\u0005\u00bd\u0000"+
		"\u0000\u0d9a\u0d9b\u0003\u0460\u0230\u0000\u0d9b\u0dde\u0001\u0000\u0000"+
		"\u0000\u0d9c\u0d9d\u0005\u008a\u0000\u0000\u0d9d\u0d9e\u0005\u00cc\u0000"+
		"\u0000\u0d9e\u0d9f\u0003\u053e\u029f\u0000\u0d9f\u0da0\u0003(\u0014\u0000"+
		"\u0da0\u0da1\u0005\u00d3\u0000\u0000\u0da1\u0da2\u0003\u0272\u0139\u0000"+
		"\u0da2\u0dde\u0001\u0000\u0000\u0000\u0da3\u0da4\u0005\u008a\u0000\u0000"+
		"\u0da4\u0da5\u0005\u00cc\u0000\u0000\u0da5\u0da6\u0003\u053e\u029f\u0000"+
		"\u0da6\u0da7\u0003(\u0014\u0000\u0da7\u0da8\u0005\u010f\u0000\u0000\u0da8"+
		"\u0da9\u0003\u02b0\u0158\u0000\u0da9\u0dde\u0001\u0000\u0000\u0000\u0daa"+
		"\u0dab\u0005\u008a\u0000\u0000\u0dab\u0dac\u0005\u00cc\u0000\u0000\u0dac"+
		"\u0dad\u0003\u053e\u029f\u0000\u0dad\u0dae\u0003(\u0014\u0000\u0dae\u0daf"+
		"\u0005\u010f\u0000\u0000\u0daf\u0db0\u0005\u009c\u0000\u0000\u0db0\u0db1"+
		"\u0003\u020c\u0106\u0000\u0db1\u0db2\u0005d\u0000\u0000\u0db2\u0db3\u0003"+
		"\u053e\u029f\u0000\u0db3\u0dde\u0001\u0000\u0000\u0000\u0db4\u0db5\u0005"+
		"\u008a\u0000\u0000\u0db5\u0db6\u0005\u00cc\u0000\u0000\u0db6\u0db7\u0003"+
		"\u053e\u029f\u0000\u0db7\u0db8\u0003(\u0014\u0000\u0db8\u0db9\u0005\u010f"+
		"\u0000\u0000\u0db9\u0dba\u0005\u00ce\u0000\u0000\u0dba\u0dbb\u0003\u020c"+
		"\u0106\u0000\u0dbb\u0dbc\u0005d\u0000\u0000\u0dbc\u0dbd\u0003\u053e\u029f"+
		"\u0000\u0dbd\u0dde\u0001\u0000\u0000\u0000\u0dbe\u0dbf\u0005\u008a\u0000"+
		"\u0000\u0dbf\u0dc0\u0005\u00cc\u0000\u0000\u0dc0\u0dc1\u0003\u053e\u029f"+
		"\u0000\u0dc1\u0dc2\u0003(\u0014\u0000\u0dc2\u0dc3\u0005\u0121\u0000\u0000"+
		"\u0dc3\u0dc4\u0003\u0272\u0139\u0000\u0dc4\u0dde\u0001\u0000\u0000\u0000"+
		"\u0dc5\u0dc6\u0005\u008a\u0000\u0000\u0dc6\u0dc7\u0005\u00cc\u0000\u0000"+
		"\u0dc7\u0dc8\u0003\u053e\u029f\u0000\u0dc8\u0dc9\u0003(\u0014\u0000\u0dc9"+
		"\u0dca\u0005\u01ba\u0000\u0000\u0dca\u0dcb\u0003\u0272\u0139\u0000\u0dcb"+
		"\u0dde\u0001\u0000\u0000\u0000\u0dcc\u0dcd\u0005\u008a\u0000\u0000\u0dcd"+
		"\u0dce\u0005\u00cc\u0000\u0000\u0dce\u0dcf\u0003\u053e\u029f\u0000\u0dcf"+
		"\u0dd0\u0003(\u0014\u0000\u0dd0\u0dd1\u0005\u01bb\u0000\u0000\u0dd1\u0dd2"+
		"\u0005>\u0000\u0000\u0dd2\u0dd3\u0003\u0460\u0230\u0000\u0dd3\u0dd4\u0005"+
		"\u00ee\u0000\u0000\u0dd4\u0dd5\u0003\u053e\u029f\u0000\u0dd5\u0dde\u0001"+
		"\u0000\u0000\u0000\u0dd6\u0dd7\u0005\u008a\u0000\u0000\u0dd7\u0dd8\u0005"+
		"\u00cc\u0000\u0000\u0dd8\u0dd9\u0003\u053e\u029f\u0000\u0dd9\u0dda\u0003"+
		"(\u0014\u0000\u0dda\u0ddb\u0005\u0161\u0000\u0000\u0ddb\u0ddc\u0003\u0460"+
		"\u0230\u0000\u0ddc\u0dde\u0001\u0000\u0000\u0000\u0ddd\u0d75\u0001\u0000"+
		"\u0000\u0000\u0ddd\u0d7c\u0001\u0000\u0000\u0000\u0ddd\u0d83\u0001\u0000"+
		"\u0000\u0000\u0ddd\u0d8a\u0001\u0000\u0000\u0000\u0ddd\u0d95\u0001\u0000"+
		"\u0000\u0000\u0ddd\u0d9c\u0001\u0000\u0000\u0000\u0ddd\u0da3\u0001\u0000"+
		"\u0000\u0000\u0ddd\u0daa\u0001\u0000\u0000\u0000\u0ddd\u0db4\u0001\u0000"+
		"\u0000\u0000\u0ddd\u0dbe\u0001\u0000\u0000\u0000\u0ddd\u0dc5\u0001\u0000"+
		"\u0000\u0000\u0ddd\u0dcc\u0001\u0000\u0000\u0000\u0ddd\u0dd6\u0001\u0000"+
		"\u0000\u0000\u0dde\u0149\u0001\u0000\u0000\u0000\u0ddf\u0de0\u0005.\u0000"+
		"\u0000\u0de0\u0de1\u0005?\u0000\u0000\u0de1\u0de2\u0005\u00ae\u0000\u0000"+
		"\u0de2\u0de3\u0005\u0176\u0000\u0000\u0de3\u0de4\u0003\u053e\u029f\u0000"+
		"\u0de4\u0de5\u0003\u0150\u00a8\u0000\u0de5\u0de6\u0003\u0154\u00aa\u0000"+
		"\u0de6\u014b\u0001\u0000\u0000\u0000\u0de7\u0de8\u0005\u00d7\u0000\u0000"+
		"\u0de8\u0df0\u0003\u012c\u0096\u0000\u0de9\u0dea\u0005\u0106\u0000\u0000"+
		"\u0dea\u0df0\u0005\u00d7\u0000\u0000\u0deb\u0dec\u0005\u016e\u0000\u0000"+
		"\u0dec\u0df0\u0003\u012c\u0096\u0000\u0ded\u0dee\u0005\u0106\u0000\u0000"+
		"\u0dee\u0df0\u0005\u016e\u0000\u0000\u0def\u0de7\u0001\u0000\u0000\u0000"+
		"\u0def\u0de9\u0001\u0000\u0000\u0000\u0def\u0deb\u0001\u0000\u0000\u0000"+
		"\u0def\u0ded\u0001\u0000\u0000\u0000\u0df0\u014d\u0001\u0000\u0000\u0000"+
		"\u0df1\u0df3\u0003\u014c\u00a6\u0000\u0df2\u0df1\u0001\u0000\u0000\u0000"+
		"\u0df3\u0df4\u0001\u0000\u0000\u0000\u0df4\u0df2\u0001\u0000\u0000\u0000"+
		"\u0df4\u0df5\u0001\u0000\u0000\u0000\u0df5\u014f\u0001\u0000\u0000\u0000"+
		"\u0df6\u0df9\u0003\u014e\u00a7\u0000\u0df7\u0df9\u0001\u0000\u0000\u0000"+
		"\u0df8\u0df6\u0001\u0000\u0000\u0000\u0df8\u0df7\u0001\u0000\u0000\u0000"+
		"\u0df9\u0151\u0001\u0000\u0000\u0000\u0dfa\u0dfb\u0005\u008a\u0000\u0000"+
		"\u0dfb\u0dfc\u0005?\u0000\u0000\u0dfc\u0dfd\u0005\u00ae\u0000\u0000\u0dfd"+
		"\u0dfe\u0005\u0176\u0000\u0000\u0dfe\u0dff\u0003\u053e\u029f\u0000\u0dff"+
		"\u0e00\u0003\u0150\u00a8\u0000\u0e00\u0e01\u0003\u0158\u00ac\u0000\u0e01"+
		"\u0e0a\u0001\u0000\u0000\u0000\u0e02\u0e03\u0005\u008a\u0000\u0000\u0e03"+
		"\u0e04\u0005?\u0000\u0000\u0e04\u0e05\u0005\u00ae\u0000\u0000\u0e05\u0e06"+
		"\u0005\u0176\u0000\u0000\u0e06\u0e07\u0003\u053e\u029f\u0000\u0e07\u0e08"+
		"\u0003\u014e\u00a7\u0000\u0e08\u0e0a\u0001\u0000\u0000\u0000\u0e09\u0dfa"+
		"\u0001\u0000\u0000\u0000\u0e09\u0e02\u0001\u0000\u0000\u0000\u0e0a\u0153"+
		"\u0001\u0000\u0000\u0000\u0e0b\u0e0c\u0005\u0111\u0000\u0000\u0e0c\u0e0d"+
		"\u0005\u0002\u0000\u0000\u0e0d\u0e0e\u0003\u0156\u00ab\u0000\u0e0e\u0e0f"+
		"\u0005\u0003\u0000\u0000\u0e0f\u0e12\u0001\u0000\u0000\u0000\u0e10\u0e12"+
		"\u0001\u0000\u0000\u0000\u0e11\u0e0b\u0001\u0000\u0000\u0000\u0e11\u0e10"+
		"\u0001\u0000\u0000\u0000\u0e12\u0155\u0001\u0000\u0000\u0000\u0e13\u0e18"+
		"\u0003\u015e\u00af\u0000\u0e14\u0e15\u0005\u0006\u0000\u0000\u0e15\u0e17"+
		"\u0003\u015e\u00af\u0000\u0e16\u0e14\u0001\u0000\u0000\u0000\u0e17\u0e1a"+
		"\u0001\u0000\u0000\u0000\u0e18\u0e16\u0001\u0000\u0000\u0000\u0e18\u0e19"+
		"\u0001\u0000\u0000\u0000\u0e19\u0157\u0001\u0000\u0000\u0000\u0e1a\u0e18"+
		"\u0001\u0000\u0000\u0000\u0e1b\u0e1c\u0005\u0111\u0000\u0000\u0e1c\u0e1d"+
		"\u0005\u0002\u0000\u0000\u0e1d\u0e1e\u0003\u015a\u00ad\u0000\u0e1e\u0e1f"+
		"\u0005\u0003\u0000\u0000\u0e1f\u0159\u0001\u0000\u0000\u0000\u0e20\u0e25"+
		"\u0003\u015c\u00ae\u0000\u0e21\u0e22\u0005\u0006\u0000\u0000\u0e22\u0e24"+
		"\u0003\u015c\u00ae\u0000\u0e23\u0e21\u0001\u0000\u0000\u0000\u0e24\u0e27"+
		"\u0001\u0000\u0000\u0000\u0e25\u0e23\u0001\u0000\u0000\u0000\u0e25\u0e26"+
		"\u0001\u0000\u0000\u0000\u0e26\u015b\u0001\u0000\u0000\u0000\u0e27\u0e25"+
		"\u0001\u0000\u0000\u0000\u0e28\u0e30\u0003\u015e\u00af\u0000\u0e29\u0e2a"+
		"\u0005\u0146\u0000\u0000\u0e2a\u0e30\u0003\u015e\u00af\u0000\u0e2b\u0e2c"+
		"\u0005\u0085\u0000\u0000\u0e2c\u0e30\u0003\u015e\u00af\u0000\u0e2d\u0e2e"+
		"\u0005\u00bf\u0000\u0000\u0e2e\u0e30\u0003\u0160\u00b0\u0000\u0e2f\u0e28"+
		"\u0001\u0000\u0000\u0000\u0e2f\u0e29\u0001\u0000\u0000\u0000\u0e2f\u0e2b"+
		"\u0001\u0000\u0000\u0000\u0e2f\u0e2d\u0001\u0000\u0000\u0000\u0e30\u015d"+
		"\u0001\u0000\u0000\u0000\u0e31\u0e32\u0003\u0160\u00b0\u0000\u0e32\u0e33"+
		"\u0003\u0162\u00b1\u0000\u0e33\u015f\u0001\u0000\u0000\u0000\u0e34\u0e35"+
		"\u0003\u0566\u02b3\u0000\u0e35\u0161\u0001\u0000\u0000\u0000\u0e36\u0e37"+
		"\u0003\u0550\u02a8\u0000\u0e37\u0163\u0001\u0000\u0000\u0000\u0e38\u0e39"+
		"\u0005.\u0000\u0000\u0e39\u0e3a\u0005\u0144\u0000\u0000\u0e3a\u0e3b\u0003"+
		"\u053e\u029f\u0000\u0e3b\u0e3c\u0003\u0166\u00b3\u0000\u0e3c\u0e3d\u0003"+
		"\u016a\u00b5\u0000\u0e3d\u0e3e\u0005?\u0000\u0000\u0e3e\u0e3f\u0005\u00ae"+
		"\u0000\u0000\u0e3f\u0e40\u0005\u0176\u0000\u0000\u0e40\u0e41\u0003\u053e"+
		"\u029f\u0000\u0e41\u0e42\u0003\u0154\u00aa\u0000\u0e42\u0e52\u0001\u0000"+
		"\u0000\u0000\u0e43\u0e44\u0005.\u0000\u0000\u0e44\u0e45\u0005\u0144\u0000"+
		"\u0000\u0e45\u0e46\u0005\u00dc\u0000\u0000\u0e46\u0e47\u0005M\u0000\u0000"+
		"\u0e47\u0e48\u0005\u0185\u0000\u0000\u0e48\u0e49\u0003\u053e\u029f\u0000"+
		"\u0e49\u0e4a\u0003\u0166\u00b3\u0000\u0e4a\u0e4b\u0003\u016a\u00b5\u0000"+
		"\u0e4b\u0e4c\u0005?\u0000\u0000\u0e4c\u0e4d\u0005\u00ae\u0000\u0000\u0e4d"+
		"\u0e4e\u0005\u0176\u0000\u0000\u0e4e\u0e4f\u0003\u053e\u029f\u0000\u0e4f"+
		"\u0e50\u0003\u0154\u00aa\u0000\u0e50\u0e52\u0001\u0000\u0000\u0000\u0e51"+
		"\u0e38\u0001\u0000\u0000\u0000\u0e51\u0e43\u0001\u0000\u0000\u0000\u0e52"+
		"\u0165\u0001\u0000\u0000\u0000\u0e53\u0e54\u0005\u0161\u0000\u0000\u0e54"+
		"\u0e57\u0003\u0550\u02a8\u0000\u0e55\u0e57\u0001\u0000\u0000\u0000\u0e56"+
		"\u0e53\u0001\u0000\u0000\u0000\u0e56\u0e55\u0001\u0000\u0000\u0000\u0e57"+
		"\u0167\u0001\u0000\u0000\u0000\u0e58\u0e5b\u0005\u0170\u0000\u0000\u0e59"+
		"\u0e5c\u0003\u0550\u02a8\u0000\u0e5a\u0e5c\u0005N\u0000\u0000\u0e5b\u0e59"+
		"\u0001\u0000\u0000\u0000\u0e5b\u0e5a\u0001\u0000\u0000\u0000\u0e5c\u0169"+
		"\u0001\u0000\u0000\u0000\u0e5d\u0e60\u0003\u0168\u00b4\u0000\u0e5e\u0e60"+
		"\u0001\u0000\u0000\u0000\u0e5f\u0e5d\u0001\u0000\u0000\u0000\u0e5f\u0e5e"+
		"\u0001\u0000\u0000\u0000\u0e60\u016b\u0001\u0000\u0000\u0000\u0e61\u0e62"+
		"\u0005\u008a\u0000\u0000\u0e62\u0e63\u0005\u0144\u0000\u0000\u0e63\u0e69"+
		"\u0003\u053e\u029f\u0000\u0e64\u0e6a\u0003\u0158\u00ac\u0000\u0e65\u0e67"+
		"\u0003\u0168\u00b4\u0000\u0e66\u0e68\u0003\u0158\u00ac\u0000\u0e67\u0e66"+
		"\u0001\u0000\u0000\u0000\u0e67\u0e68\u0001\u0000\u0000\u0000\u0e68\u0e6a";
	private static final String _serializedATNSegment2 =
		"\u0001\u0000\u0000\u0000\u0e69\u0e64\u0001\u0000\u0000\u0000\u0e69\u0e65"+
		"\u0001\u0000\u0000\u0000\u0e6a\u016d\u0001\u0000\u0000\u0000\u0e6b\u0e6c"+
		"\u0005.\u0000\u0000\u0e6c\u0e6d\u0005?\u0000\u0000\u0e6d\u0e6e\u0005\\"+
		"\u0000\u0000\u0e6e\u0e6f\u0003\u053a\u029d\u0000\u0e6f\u0e70\u0005\u0002"+
		"\u0000\u0000\u0e70\u0e71\u0003\u00b0X\u0000\u0e71\u0e72\u0005\u0003\u0000"+
		"\u0000\u0e72\u0e73\u0003\u00eew\u0000\u0e73\u0e74\u0005\u0144\u0000\u0000"+
		"\u0e74\u0e75\u0003\u053e\u029f\u0000\u0e75\u0e76\u0003\u0154\u00aa\u0000"+
		"\u0e76\u0ea4\u0001\u0000\u0000\u0000\u0e77\u0e78\u0005.\u0000\u0000\u0e78"+
		"\u0e79\u0005?\u0000\u0000\u0e79\u0e7a\u0005\\\u0000\u0000\u0e7a\u0e7b"+
		"\u0005\u00dc\u0000\u0000\u0e7b\u0e7c\u0005M\u0000\u0000\u0e7c\u0e7d\u0005"+
		"\u0185\u0000\u0000\u0e7d\u0e7e\u0003\u053a\u029d\u0000\u0e7e\u0e7f\u0005"+
		"\u0002\u0000\u0000\u0e7f\u0e80\u0003\u00b0X\u0000\u0e80\u0e81\u0005\u0003"+
		"\u0000\u0000\u0e81\u0e82\u0003\u00eew\u0000\u0e82\u0e83\u0005\u0144\u0000"+
		"\u0000\u0e83\u0e84\u0003\u053e\u029f\u0000\u0e84\u0e85\u0003\u0154\u00aa"+
		"\u0000\u0e85\u0ea4\u0001\u0000\u0000\u0000\u0e86\u0e87\u0005.\u0000\u0000"+
		"\u0e87\u0e88\u0005?\u0000\u0000\u0e88\u0e89\u0005\\\u0000\u0000\u0e89"+
		"\u0e8a\u0003\u053a\u029d\u0000\u0e8a\u0e8b\u0005\u0116\u0000\u0000\u0e8b"+
		"\u0e8c\u0005\u010c\u0000\u0000\u0e8c\u0e8d\u0003\u053a\u029d\u0000\u0e8d"+
		"\u0e8e\u0003\u00b2Y\u0000\u0e8e\u0e8f\u0003\u0080@\u0000\u0e8f\u0e90\u0005"+
		"\u0144\u0000\u0000\u0e90\u0e91\u0003\u053e\u029f\u0000\u0e91\u0e92\u0003"+
		"\u0154\u00aa\u0000\u0e92\u0ea4\u0001\u0000\u0000\u0000\u0e93\u0e94\u0005"+
		".\u0000\u0000\u0e94\u0e95\u0005?\u0000\u0000\u0e95\u0e96\u0005\\\u0000"+
		"\u0000\u0e96\u0e97\u0005\u00dc\u0000\u0000\u0e97\u0e98\u0005M\u0000\u0000"+
		"\u0e98\u0e99\u0005\u0185\u0000\u0000\u0e99\u0e9a\u0003\u053a\u029d\u0000"+
		"\u0e9a\u0e9b\u0005\u0116\u0000\u0000\u0e9b\u0e9c\u0005\u010c\u0000\u0000"+
		"\u0e9c\u0e9d\u0003\u053a\u029d\u0000\u0e9d\u0e9e\u0003\u00b2Y\u0000\u0e9e"+
		"\u0e9f\u0003\u0080@\u0000\u0e9f\u0ea0\u0005\u0144\u0000\u0000\u0ea0\u0ea1"+
		"\u0003\u053e\u029f\u0000\u0ea1\u0ea2\u0003\u0154\u00aa\u0000\u0ea2\u0ea4"+
		"\u0001\u0000\u0000\u0000\u0ea3\u0e6b\u0001\u0000\u0000\u0000\u0ea3\u0e77"+
		"\u0001\u0000\u0000\u0000\u0ea3\u0e86\u0001\u0000\u0000\u0000\u0ea3\u0e93"+
		"\u0001\u0000\u0000\u0000\u0ea4\u016f\u0001\u0000\u0000\u0000\u0ea5\u0ea6"+
		"\u0005\u01bc\u0000\u0000\u0ea6\u0ea7\u0005?\u0000\u0000\u0ea7\u0ea8\u0005"+
		"\u013c\u0000\u0000\u0ea8\u0ea9\u0003\u053e\u029f\u0000\u0ea9\u0eaa\u0003"+
		"\u0174\u00ba\u0000\u0eaa\u0eab\u0005@\u0000\u0000\u0eab\u0eac\u0005\u0144"+
		"\u0000\u0000\u0eac\u0ead\u0003\u053e\u029f\u0000\u0ead\u0eae\u0005G\u0000"+
		"\u0000\u0eae\u0eaf\u0003\u053e\u029f\u0000\u0eaf\u0eb0\u0003\u0154\u00aa"+
		"\u0000\u0eb0\u0171\u0001\u0000\u0000\u0000\u0eb1\u0eb2\u0005J\u0000\u0000"+
		"\u0eb2\u0eb5\u0005^\u0000\u0000\u0eb3\u0eb5\u0005;\u0000\u0000\u0eb4\u0eb1"+
		"\u0001\u0000\u0000\u0000\u0eb4\u0eb3\u0001\u0000\u0000\u0000\u0eb5\u0173"+
		"\u0001\u0000\u0000\u0000\u0eb6\u0eb7\u0003\u0172\u00b9\u0000\u0eb7\u0eb8"+
		"\u0005\u0002\u0000\u0000\u0eb8\u0eb9\u0003\u0436\u021b\u0000\u0eb9\u0eba"+
		"\u0005\u0003\u0000\u0000\u0eba\u0ebd\u0001\u0000\u0000\u0000\u0ebb\u0ebd"+
		"\u0001\u0000\u0000\u0000\u0ebc\u0eb6\u0001\u0000\u0000\u0000\u0ebc\u0ebb"+
		"\u0001\u0000\u0000\u0000\u0ebd\u0175\u0001\u0000\u0000\u0000\u0ebe\u0ebf"+
		"\u0005.\u0000\u0000\u0ebf\u0ec0\u0005c\u0000\u0000\u0ec0\u0ec1\u0005\u00f8"+
		"\u0000\u0000\u0ec1\u0ec2\u0005>\u0000\u0000\u0ec2\u0ec3\u0003\u0178\u00bc"+
		"\u0000\u0ec3\u0ec4\u0005\u0144\u0000\u0000\u0ec4\u0ec5\u0003\u053e\u029f"+
		"\u0000\u0ec5\u0ec6\u0003\u0154\u00aa\u0000\u0ec6\u0ed4\u0001\u0000\u0000"+
		"\u0000\u0ec7\u0ec8\u0005.\u0000\u0000\u0ec8\u0ec9\u0005c\u0000\u0000\u0ec9"+
		"\u0eca\u0005\u00f8\u0000\u0000\u0eca\u0ecb\u0005\u00dc\u0000\u0000\u0ecb"+
		"\u0ecc\u0005M\u0000\u0000\u0ecc\u0ecd\u0005\u0185\u0000\u0000\u0ecd\u0ece"+
		"\u0005>\u0000\u0000\u0ece\u0ecf\u0003\u0178\u00bc\u0000\u0ecf\u0ed0\u0005"+
		"\u0144\u0000\u0000\u0ed0\u0ed1\u0003\u053e\u029f\u0000\u0ed1\u0ed2\u0003"+
		"\u0154\u00aa\u0000\u0ed2\u0ed4\u0001\u0000\u0000\u0000\u0ed3\u0ebe\u0001"+
		"\u0000\u0000\u0000\u0ed3\u0ec7\u0001\u0000\u0000\u0000\u0ed4\u0177\u0001"+
		"\u0000\u0000\u0000\u0ed5\u0ed8\u0003\u055a\u02ad\u0000\u0ed6\u0ed8\u0005"+
		"c\u0000\u0000\u0ed7\u0ed5\u0001\u0000\u0000\u0000\u0ed7\u0ed6\u0001\u0000"+
		"\u0000\u0000\u0ed8\u0179\u0001\u0000\u0000\u0000\u0ed9\u0eda\u0005\u00bf"+
		"\u0000\u0000\u0eda\u0edb\u0005c\u0000\u0000\u0edb\u0edc\u0005\u00f8\u0000"+
		"\u0000\u0edc\u0edd\u0005>\u0000\u0000\u0edd\u0ede\u0003\u0178\u00bc\u0000"+
		"\u0ede\u0edf\u0005\u0144\u0000\u0000\u0edf\u0ee0\u0003\u053e\u029f\u0000"+
		"\u0ee0\u0eec\u0001\u0000\u0000\u0000\u0ee1\u0ee2\u0005\u00bf\u0000\u0000"+
		"\u0ee2\u0ee3\u0005c\u0000\u0000\u0ee3\u0ee4\u0005\u00f8\u0000\u0000\u0ee4"+
		"\u0ee5\u0005\u00dc\u0000\u0000\u0ee5\u0ee6\u0005\u0185\u0000\u0000\u0ee6"+
		"\u0ee7\u0005>\u0000\u0000\u0ee7\u0ee8\u0003\u0178\u00bc\u0000\u0ee8\u0ee9"+
		"\u0005\u0144\u0000\u0000\u0ee9\u0eea\u0003\u053e\u029f\u0000\u0eea\u0eec"+
		"\u0001\u0000\u0000\u0000\u0eeb\u0ed9\u0001\u0000\u0000\u0000\u0eeb\u0ee1"+
		"\u0001\u0000\u0000\u0000\u0eec\u017b\u0001\u0000\u0000\u0000\u0eed\u0eee"+
		"\u0005\u008a\u0000\u0000\u0eee\u0eef\u0005c\u0000\u0000\u0eef\u0ef0\u0005"+
		"\u00f8\u0000\u0000\u0ef0\u0ef1\u0005>\u0000\u0000\u0ef1\u0ef2\u0003\u0178"+
		"\u00bc\u0000\u0ef2\u0ef3\u0005\u0144\u0000\u0000\u0ef3\u0ef4\u0003\u053e"+
		"\u029f\u0000\u0ef4\u0ef5\u0003\u0158\u00ac\u0000\u0ef5\u017d\u0001\u0000"+
		"\u0000\u0000\u0ef6\u0ef7\u0005.\u0000\u0000\u0ef7\u0ef8\u0005\u01bd\u0000"+
		"\u0000\u0ef8\u0ef9\u0003\u053e\u029f\u0000\u0ef9\u0efa\u0005P\u0000\u0000"+
		"\u0efa\u0efb\u0003\u053a\u029d\u0000\u0efb\u0efc\u0003\u018a\u00c5\u0000"+
		"\u0efc\u0efd\u0003\u018c\u00c6\u0000\u0efd\u0efe\u0003\u0186\u00c3\u0000"+
		"\u0efe\u0eff\u0003\u0182\u00c1\u0000\u0eff\u0f00\u0003\u0184\u00c2\u0000"+
		"\u0f00\u017f\u0001\u0000\u0000\u0000\u0f01\u0f02\u0005\u008a\u0000\u0000"+
		"\u0f02\u0f03\u0005\u01bd\u0000\u0000\u0f03\u0f04\u0003\u053e\u029f\u0000"+
		"\u0f04\u0f05\u0005P\u0000\u0000\u0f05\u0f06\u0003\u053a\u029d\u0000\u0f06"+
		"\u0f07\u0003\u0188\u00c4\u0000\u0f07\u0f08\u0003\u0182\u00c1\u0000\u0f08"+
		"\u0f09\u0003\u0184\u00c2\u0000\u0f09\u0181\u0001\u0000\u0000\u0000\u0f0a"+
		"\u0f0b\u0005d\u0000\u0000\u0f0b\u0f0c\u0005\u0002\u0000\u0000\u0f0c\u0f0d"+
		"\u0003\u048c\u0246\u0000\u0f0d\u0f0e\u0005\u0003\u0000\u0000\u0f0e\u0f11"+
		"\u0001\u0000\u0000\u0000\u0f0f\u0f11\u0001\u0000\u0000\u0000\u0f10\u0f0a"+
		"\u0001\u0000\u0000\u0000\u0f10\u0f0f\u0001\u0000\u0000\u0000\u0f11\u0183"+
		"\u0001\u0000\u0000\u0000\u0f12\u0f13\u0005i\u0000\u0000\u0f13\u0f14\u0005"+
		"*\u0000\u0000\u0f14\u0f15\u0005\u0002\u0000\u0000\u0f15\u0f16\u0003\u048c"+
		"\u0246\u0000\u0f16\u0f17\u0005\u0003\u0000\u0000\u0f17\u0f1a\u0001\u0000"+
		"\u0000\u0000\u0f18\u0f1a\u0001\u0000\u0000\u0000\u0f19\u0f12\u0001\u0000"+
		"\u0000\u0000\u0f19\u0f18\u0001\u0000\u0000\u0000\u0f1a\u0185\u0001\u0000"+
		"\u0000\u0000\u0f1b\u0f1c\u0005^\u0000\u0000\u0f1c\u0f1f\u0003\u055c\u02ae"+
		"\u0000\u0f1d\u0f1f\u0001\u0000\u0000\u0000\u0f1e\u0f1b\u0001\u0000\u0000"+
		"\u0000\u0f1e\u0f1d\u0001\u0000\u0000\u0000\u0f1f\u0187\u0001\u0000\u0000"+
		"\u0000\u0f20\u0f21\u0005^\u0000\u0000\u0f21\u0f24\u0003\u055c\u02ae\u0000"+
		"\u0f22\u0f24\u0001\u0000\u0000\u0000\u0f23\u0f20\u0001\u0000\u0000\u0000"+
		"\u0f23\u0f22\u0001\u0000\u0000\u0000\u0f24\u0189\u0001\u0000\u0000\u0000"+
		"\u0f25\u0f26\u0005$\u0000\u0000\u0f26\u0f29\u0003\u0568\u02b4\u0000\u0f27"+
		"\u0f29\u0001\u0000\u0000\u0000\u0f28\u0f25\u0001\u0000\u0000\u0000\u0f28"+
		"\u0f27\u0001\u0000\u0000\u0000\u0f29\u018b\u0001\u0000\u0000\u0000\u0f2a"+
		"\u0f2b\u0005>\u0000\u0000\u0f2b\u0f2e\u0003\u018e\u00c7\u0000\u0f2c\u0f2e"+
		"\u0001\u0000\u0000\u0000\u0f2d\u0f2a\u0001\u0000\u0000\u0000\u0f2d\u0f2c"+
		"\u0001\u0000\u0000\u0000\u0f2e\u018d\u0001\u0000\u0000\u0000\u0f2f\u0f30"+
		"\u0007\u0011\u0000\u0000\u0f30\u018f\u0001\u0000\u0000\u0000\u0f31\u0f32"+
		"\u0005.\u0000\u0000\u0f32\u0f33\u0005\u0083\u0000\u0000\u0f33\u0f34\u0005"+
		"\u01be\u0000\u0000\u0f34\u0f35\u0003\u053e\u029f\u0000\u0f35\u0f36\u0005"+
		"\u0161\u0000\u0000\u0f36\u0f37\u0003\u0192\u00c9\u0000\u0f37\u0f38\u0005"+
		"\u00d7\u0000\u0000\u0f38\u0f39\u0003\u012c\u0096\u0000\u0f39\u0191\u0001"+
		"\u0000\u0000\u0000\u0f3a\u0f3b\u0007\u0012\u0000\u0000\u0f3b\u0193\u0001"+
		"\u0000\u0000\u0000\u0f3c\u0f3d\u0005.\u0000\u0000\u0f3d\u0f3e\u0005\u015e"+
		"\u0000\u0000\u0f3e\u0f3f\u0003\u053e\u029f\u0000\u0f3f\u0f40\u0003\u0196"+
		"\u00cb\u0000\u0f40\u0f41\u0003\u0198\u00cc\u0000\u0f41\u0f42\u0005P\u0000"+
		"\u0000\u0f42\u0f43\u0003\u053a\u029d\u0000\u0f43\u0f44\u0003\u019c\u00ce"+
		"\u0000\u0f44\u0f45\u0003\u01a8\u00d4\u0000\u0f45\u0f46\u0003\u01ae\u00d7"+
		"\u0000\u0f46\u0f47\u0005\u00ca\u0000\u0000\u0f47\u0f48\u0003\u01b0\u00d8"+
		"\u0000\u0f48\u0f49\u0003\u0544\u02a2\u0000\u0f49\u0f4a\u0005\u0002\u0000"+
		"\u0000\u0f4a\u0f4b\u0003\u01b2\u00d9\u0000\u0f4b\u0f4c\u0005\u0003\u0000"+
		"\u0000\u0f4c\u0f63\u0001\u0000\u0000\u0000\u0f4d\u0f4e\u0005.\u0000\u0000"+
		"\u0f4e\u0f4f\u0005-\u0000\u0000\u0f4f\u0f50\u0005\u015e\u0000\u0000\u0f50"+
		"\u0f51\u0003\u053e\u029f\u0000\u0f51\u0f52\u0005\u0087\u0000\u0000\u0f52"+
		"\u0f53\u0003\u0198\u00cc\u0000\u0f53\u0f54\u0005P\u0000\u0000\u0f54\u0f55"+
		"\u0003\u053a\u029d\u0000\u0f55\u0f56\u0003\u01b6\u00db\u0000\u0f56\u0f57"+
		"\u0003\u01b8\u00dc\u0000\u0f57\u0f58\u0005>\u0000\u0000\u0f58\u0f59\u0005"+
		"\u00c0\u0000\u0000\u0f59\u0f5a\u0005\u0197\u0000\u0000\u0f5a\u0f5b\u0003"+
		"\u01ae\u00d7\u0000\u0f5b\u0f5c\u0005\u00ca\u0000\u0000\u0f5c\u0f5d\u0003"+
		"\u01b0\u00d8\u0000\u0f5d\u0f5e\u0003\u0544\u02a2\u0000\u0f5e\u0f5f\u0005"+
		"\u0002\u0000\u0000\u0f5f\u0f60\u0003\u01b2\u00d9\u0000\u0f60\u0f61\u0005"+
		"\u0003\u0000\u0000\u0f61\u0f63\u0001\u0000\u0000\u0000\u0f62\u0f3c\u0001"+
		"\u0000\u0000\u0000\u0f62\u0f4d\u0001\u0000\u0000\u0000\u0f63\u0195\u0001"+
		"\u0000\u0000\u0000\u0f64\u0f69\u0005\u0091\u0000\u0000\u0f65\u0f69\u0005"+
		"\u0087\u0000\u0000\u0f66\u0f67\u0005\u00e9\u0000\u0000\u0f67\u0f69\u0005"+
		"\u010c\u0000\u0000\u0f68\u0f64\u0001\u0000\u0000\u0000\u0f68\u0f65\u0001"+
		"\u0000\u0000\u0000\u0f68\u0f66\u0001\u0000\u0000\u0000\u0f69\u0197\u0001"+
		"\u0000\u0000\u0000\u0f6a\u0f6f\u0003\u019a\u00cd\u0000\u0f6b\u0f6c\u0005"+
		"R\u0000\u0000\u0f6c\u0f6e\u0003\u019a\u00cd\u0000\u0f6d\u0f6b\u0001\u0000"+
		"\u0000\u0000\u0f6e\u0f71\u0001\u0000\u0000\u0000\u0f6f\u0f6d\u0001\u0000"+
		"\u0000\u0000\u0f6f\u0f70\u0001\u0000\u0000\u0000\u0f70\u0199\u0001\u0000"+
		"\u0000\u0000\u0f71\u0f6f\u0001\u0000\u0000\u0000\u0f72\u0f7a\u0005\u00e8"+
		"\u0000\u0000\u0f73\u0f7a\u0005\u00b6\u0000\u0000\u0f74\u0f7a\u0005\u016a"+
		"\u0000\u0000\u0f75\u0f76\u0005\u016a\u0000\u0000\u0f76\u0f77\u0005\u010c"+
		"\u0000\u0000\u0f77\u0f7a\u0003\u00d8l\u0000\u0f78\u0f7a\u0005\u015f\u0000"+
		"\u0000\u0f79\u0f72\u0001\u0000\u0000\u0000\u0f79\u0f73\u0001\u0000\u0000"+
		"\u0000\u0f79\u0f74\u0001\u0000\u0000\u0000\u0f79\u0f75\u0001\u0000\u0000"+
		"\u0000\u0f79\u0f78\u0001\u0000\u0000\u0000\u0f7a\u019b\u0001\u0000\u0000"+
		"\u0000\u0f7b\u0f7c\u0005\u01bf\u0000\u0000\u0f7c\u0f7f\u0003\u019e\u00cf"+
		"\u0000\u0f7d\u0f7f\u0001\u0000\u0000\u0000\u0f7e\u0f7b\u0001\u0000\u0000"+
		"\u0000\u0f7e\u0f7d\u0001\u0000\u0000\u0000\u0f7f\u019d\u0001\u0000\u0000"+
		"\u0000\u0f80\u0f82\u0003\u01a0\u00d0\u0000\u0f81\u0f80\u0001\u0000\u0000"+
		"\u0000\u0f82\u0f83\u0001\u0000\u0000\u0000\u0f83\u0f81\u0001\u0000\u0000"+
		"\u0000\u0f83\u0f84\u0001\u0000\u0000\u0000\u0f84\u019f\u0001\u0000\u0000"+
		"\u0000\u0f85\u0f86\u0003\u01a2\u00d1\u0000\u0f86\u0f87\u0003\u01a4\u00d2"+
		"\u0000\u0f87\u0f88\u0003\u0342\u01a1\u0000\u0f88\u0f89\u0003\u01a6\u00d3"+
		"\u0000\u0f89\u01a1\u0001\u0000\u0000\u0000\u0f8a\u0f8b\u0007\u0013\u0000"+
		"\u0000\u0f8b\u01a3\u0001\u0000\u0000\u0000\u0f8c\u0f8d\u0007\u0014\u0000"+
		"\u0000\u0f8d\u01a5\u0001\u0000\u0000\u0000\u0f8e\u0f8f\u0003\u055e\u02af"+
		"\u0000\u0f8f\u01a7\u0001\u0000\u0000\u0000\u0f90\u0f91\u0005>\u0000\u0000"+
		"\u0f91\u0f92\u0003\u01aa\u00d5\u0000\u0f92\u0f93\u0003\u01ac\u00d6\u0000"+
		"\u0f93\u0f96\u0001\u0000\u0000\u0000\u0f94\u0f96\u0001\u0000\u0000\u0000"+
		"\u0f95\u0f90\u0001\u0000\u0000\u0000\u0f95\u0f94\u0001\u0000\u0000\u0000"+
		"\u0f96\u01a9\u0001\u0000\u0000\u0000\u0f97\u0f9a\u0005\u00c0\u0000\u0000"+
		"\u0f98\u0f9a\u0001\u0000\u0000\u0000\u0f99\u0f97\u0001\u0000\u0000\u0000"+
		"\u0f99\u0f98\u0001\u0000\u0000\u0000\u0f9a\u01ab\u0001\u0000\u0000\u0000"+
		"\u0f9b\u0f9c\u0007\u0015\u0000\u0000\u0f9c\u01ad\u0001\u0000\u0000\u0000"+
		"\u0f9d\u0f9e\u0005f\u0000\u0000\u0f9e\u0f9f\u0005\u0002\u0000\u0000\u0f9f"+
		"\u0fa0\u0003\u048c\u0246\u0000\u0fa0\u0fa1\u0005\u0003\u0000\u0000\u0fa1"+
		"\u0fa4\u0001\u0000\u0000\u0000\u0fa2\u0fa4\u0001\u0000\u0000\u0000\u0fa3"+
		"\u0f9d\u0001\u0000\u0000\u0000\u0fa3\u0fa2\u0001\u0000\u0000\u0000\u0fa4"+
		"\u01af\u0001\u0000\u0000\u0000\u0fa5\u0fa6\u0007\u0016\u0000\u0000\u0fa6"+
		"\u01b1\u0001\u0000\u0000\u0000\u0fa7\u0faa\u0003\u01b4\u00da\u0000\u0fa8"+
		"\u0faa\u0001\u0000\u0000\u0000\u0fa9\u0fa7\u0001\u0000\u0000\u0000\u0fa9"+
		"\u0fa8\u0001\u0000\u0000\u0000\u0faa\u0faf\u0001\u0000\u0000\u0000\u0fab"+
		"\u0fac\u0005\u0006\u0000\u0000\u0fac\u0fae\u0003\u01b4\u00da\u0000\u0fad"+
		"\u0fab\u0001\u0000\u0000\u0000\u0fae\u0fb1\u0001\u0000\u0000\u0000\u0faf"+
		"\u0fad\u0001\u0000\u0000\u0000\u0faf\u0fb0\u0001\u0000\u0000\u0000\u0fb0"+
		"\u01b3\u0001\u0000\u0000\u0000\u0fb1\u0faf\u0001\u0000\u0000\u0000\u0fb2"+
		"\u0fb7\u0003\u054e\u02a7\u0000\u0fb3\u0fb7\u0003\u054c\u02a6\u0000\u0fb4"+
		"\u0fb7\u0003\u0550\u02a8\u0000\u0fb5\u0fb7\u0003\u0566\u02b3\u0000\u0fb6"+
		"\u0fb2\u0001\u0000\u0000\u0000\u0fb6\u0fb3\u0001\u0000\u0000\u0000\u0fb6"+
		"\u0fb4\u0001\u0000\u0000\u0000\u0fb6\u0fb5\u0001\u0000\u0000\u0000\u0fb7"+
		"\u01b5\u0001\u0000\u0000\u0000\u0fb8\u0fb9\u0005@\u0000\u0000\u0fb9\u0fbc"+
		"\u0003\u053a\u029d\u0000\u0fba\u0fbc\u0001\u0000\u0000\u0000\u0fbb\u0fb8"+
		"\u0001\u0000\u0000\u0000\u0fbb\u0fba\u0001\u0000\u0000\u0000\u0fbc\u01b7"+
		"\u0001\u0000\u0000\u0000\u0fbd\u0fbf\u0003\u01ba\u00dd\u0000\u0fbe\u0fbd"+
		"\u0001\u0000\u0000\u0000\u0fbf\u0fc2\u0001\u0000\u0000\u0000\u0fc0\u0fbe"+
		"\u0001\u0000\u0000\u0000\u0fc0\u0fc1\u0001\u0000\u0000\u0000\u0fc1\u01b9"+
		"\u0001\u0000\u0000\u0000\u0fc2\u0fc0\u0001\u0000\u0000\u0000\u0fc3\u0fc4"+
		"\u0005M\u0000\u0000\u0fc4\u0fcf\u00056\u0000\u0000\u0fc5\u0fcf\u00056"+
		"\u0000\u0000\u0fc6\u0fc7\u0005E\u0000\u0000\u0fc7\u0fcf\u0005\u00dd\u0000"+
		"\u0000\u0fc8\u0fc9\u0005E\u0000\u0000\u0fc9\u0fcf\u0005\u00b4\u0000\u0000"+
		"\u0fca\u0fcb\u0005M\u0000\u0000\u0fcb\u0fcf\u0005\u016c\u0000\u0000\u0fcc"+
		"\u0fcd\u0005\u0106\u0000\u0000\u0fcd\u0fcf\u0005\u00e4\u0000\u0000\u0fce"+
		"\u0fc3\u0001\u0000\u0000\u0000\u0fce\u0fc5\u0001\u0000\u0000\u0000\u0fce"+
		"\u0fc6\u0001\u0000\u0000\u0000\u0fce\u0fc8\u0001\u0000\u0000\u0000\u0fce"+
		"\u0fca\u0001\u0000\u0000\u0000\u0fce\u0fcc\u0001\u0000\u0000\u0000\u0fcf"+
		"\u01bb\u0001\u0000\u0000\u0000\u0fd0\u0fd1\u0005.\u0000\u0000\u0fd1\u0fd2"+
		"\u0005\u00c6\u0000\u0000\u0fd2\u0fd3\u0005\u015e\u0000\u0000\u0fd3\u0fd4"+
		"\u0003\u053e\u029f\u0000\u0fd4\u0fd5\u0005P\u0000\u0000\u0fd5\u0fd6\u0003"+
		"\u0566\u02b3\u0000\u0fd6\u0fd7\u0005\u00ca\u0000\u0000\u0fd7\u0fd8\u0003"+
		"\u01b0\u00d8\u0000\u0fd8\u0fd9\u0003\u0544\u02a2\u0000\u0fd9\u0fda\u0005"+
		"\u0002\u0000\u0000\u0fda\u0fdb\u0005\u0003\u0000\u0000\u0fdb\u0feb\u0001"+
		"\u0000\u0000\u0000\u0fdc\u0fdd\u0005.\u0000\u0000\u0fdd\u0fde\u0005\u00c6"+
		"\u0000\u0000\u0fde\u0fdf\u0005\u015e\u0000\u0000\u0fdf\u0fe0\u0003\u053e"+
		"\u029f\u0000\u0fe0\u0fe1\u0005P\u0000\u0000\u0fe1\u0fe2\u0003\u0566\u02b3"+
		"\u0000\u0fe2\u0fe3\u0005f\u0000\u0000\u0fe3\u0fe4\u0003\u01be\u00df\u0000"+
		"\u0fe4\u0fe5\u0005\u00ca\u0000\u0000\u0fe5\u0fe6\u0003\u01b0\u00d8\u0000"+
		"\u0fe6\u0fe7\u0003\u0544\u02a2\u0000\u0fe7\u0fe8\u0005\u0002\u0000\u0000"+
		"\u0fe8\u0fe9\u0005\u0003\u0000\u0000\u0fe9\u0feb\u0001\u0000\u0000\u0000"+
		"\u0fea\u0fd0\u0001\u0000\u0000\u0000\u0fea\u0fdc\u0001\u0000\u0000\u0000"+
		"\u0feb\u01bd\u0001\u0000\u0000\u0000\u0fec\u0ff1\u0003\u01c0\u00e0\u0000"+
		"\u0fed\u0fee\u0005!\u0000\u0000\u0fee\u0ff0\u0003\u01c0\u00e0\u0000\u0fef"+
		"\u0fed\u0001\u0000\u0000\u0000\u0ff0\u0ff3\u0001\u0000\u0000\u0000\u0ff1"+
		"\u0fef\u0001\u0000\u0000\u0000\u0ff1\u0ff2\u0001\u0000\u0000\u0000\u0ff2"+
		"\u01bf\u0001\u0000\u0000\u0000\u0ff3\u0ff1\u0001\u0000\u0000\u0000\u0ff4"+
		"\u0ff5\u0003\u055e\u02af\u0000\u0ff5\u0ff6\u0005D\u0000\u0000\u0ff6\u0ff7"+
		"\u0005\u0002\u0000\u0000\u0ff7\u0ff8\u0003\u01c2\u00e1\u0000\u0ff8\u0ff9"+
		"\u0005\u0003\u0000\u0000\u0ff9\u01c1\u0001\u0000\u0000\u0000\u0ffa\u0fff"+
		"\u0003\u0550\u02a8\u0000\u0ffb\u0ffc\u0005\u0006\u0000\u0000\u0ffc\u0ffe"+
		"\u0003\u0550\u02a8\u0000\u0ffd\u0ffb\u0001\u0000\u0000\u0000\u0ffe\u1001"+
		"\u0001\u0000\u0000\u0000\u0fff\u0ffd\u0001\u0000\u0000\u0000\u0fff\u1000"+
		"\u0001\u0000\u0000\u0000\u1000\u01c3\u0001\u0000\u0000\u0000\u1001\u0fff"+
		"\u0001\u0000\u0000\u0000\u1002\u1003\u0005\u008a\u0000\u0000\u1003\u1004"+
		"\u0005\u00c6\u0000\u0000\u1004\u1005\u0005\u015e\u0000\u0000\u1005\u1006"+
		"\u0003\u053e\u029f\u0000\u1006\u1007\u0003\u01c6\u00e3\u0000\u1007\u01c5"+
		"\u0001\u0000\u0000\u0000\u1008\u100f\u0005\u00c1\u0000\u0000\u1009\u100a"+
		"\u0005\u00c1\u0000\u0000\u100a\u100f\u0005\u0131\u0000\u0000\u100b\u100c"+
		"\u0005\u00c1\u0000\u0000\u100c\u100f\u0005\u008b\u0000\u0000\u100d\u100f"+
		"\u0005\u00ba\u0000\u0000\u100e\u1008\u0001\u0000\u0000\u0000\u100e\u1009"+
		"\u0001\u0000\u0000\u0000\u100e\u100b\u0001\u0000\u0000\u0000\u100e\u100d"+
		"\u0001\u0000\u0000\u0000\u100f\u01c7\u0001\u0000\u0000\u0000\u1010\u1011"+
		"\u0005.\u0000\u0000\u1011\u1012\u0005\u008c\u0000\u0000\u1012\u1013\u0003"+
		"\u020c\u0106\u0000\u1013\u1014\u0005*\u0000\u0000\u1014\u1015\u0005\u0002"+
		"\u0000\u0000\u1015\u1016\u0003\u048c\u0246\u0000\u1016\u1017\u0005\u0003"+
		"\u0000\u0000\u1017\u1018\u0003\u01b8\u00dc\u0000\u1018\u01c9\u0001\u0000"+
		"\u0000\u0000\u1019\u101a\u0005.\u0000\u0000\u101a\u101b\u0003\u026a\u0135"+
		"\u0000\u101b\u101c\u0005\u0088\u0000\u0000\u101c\u101d\u0003\u0544\u02a2"+
		"\u0000\u101d\u101e\u0003\u0286\u0143\u0000\u101e\u101f\u0003\u01cc\u00e6"+
		"\u0000\u101f\u1084\u0001\u0000\u0000\u0000\u1020\u1021\u0005.\u0000\u0000"+
		"\u1021\u1022\u0003\u026a\u0135\u0000\u1022\u1023\u0005\u0088\u0000\u0000"+
		"\u1023\u1024\u0003\u0544\u02a2\u0000\u1024\u1025\u0003\u01d4\u00ea\u0000"+
		"\u1025\u1084\u0001\u0000\u0000\u0000\u1026\u1027\u0005.\u0000\u0000\u1027"+
		"\u1028\u0005\u010f\u0000\u0000\u1028\u1029\u0003\u02ac\u0156\u0000\u1029"+
		"\u102a\u0003\u01cc\u00e6\u0000\u102a\u1084\u0001\u0000\u0000\u0000\u102b"+
		"\u102c\u0005.\u0000\u0000\u102c\u102d\u0005\u0161\u0000\u0000\u102d\u102e"+
		"\u0003\u020c\u0106\u0000\u102e\u102f\u0003\u01cc\u00e6\u0000\u102f\u1084"+
		"\u0001\u0000\u0000\u0000\u1030\u1031\u0005.\u0000\u0000\u1031\u1032\u0005"+
		"\u0161\u0000\u0000\u1032\u1084\u0003\u020c\u0106\u0000\u1033\u1034\u0005"+
		".\u0000\u0000\u1034\u1035\u0005\u0161\u0000\u0000\u1035\u1036\u0003\u020c"+
		"\u0106\u0000\u1036\u1037\u0005$\u0000\u0000\u1037\u1038\u0005\u0002\u0000"+
		"\u0000\u1038\u1039\u0003\u044c\u0226\u0000\u1039\u103a\u0005\u0003\u0000"+
		"\u0000\u103a\u1084\u0001\u0000\u0000\u0000\u103b\u103c\u0005.\u0000\u0000"+
		"\u103c\u103d\u0005\u0161\u0000\u0000\u103d\u103e\u0003\u020c\u0106\u0000"+
		"\u103e\u103f\u0005$\u0000\u0000\u103f\u1040\u0005\u00c4\u0000\u0000\u1040"+
		"\u1041\u0005\u0002\u0000\u0000\u1041\u1042\u0003\u01da\u00ed\u0000\u1042"+
		"\u1043\u0005\u0003\u0000\u0000\u1043\u1084\u0001\u0000\u0000\u0000\u1044"+
		"\u1045\u0005.\u0000\u0000\u1045\u1046\u0005\u0161\u0000\u0000\u1046\u1047"+
		"\u0003\u020c\u0106\u0000\u1047\u1048\u0005$\u0000\u0000\u1048\u1049\u0005"+
		"\u0124\u0000\u0000\u1049\u104a\u0003\u01cc\u00e6\u0000\u104a\u1084\u0001"+
		"\u0000\u0000\u0000\u104b\u104c\u0005.\u0000\u0000\u104c\u104d\u0005\u015c"+
		"\u0000\u0000\u104d\u104e\u0005\u013e\u0000\u0000\u104e\u104f\u0005\u0114"+
		"\u0000\u0000\u104f\u1050\u0003\u020c\u0106\u0000\u1050\u1051\u0003\u01cc"+
		"\u00e6\u0000\u1051\u1084\u0001\u0000\u0000\u0000\u1052\u1053\u0005.\u0000"+
		"\u0000\u1053\u1054\u0005\u015c\u0000\u0000\u1054\u1055\u0005\u013e\u0000"+
		"\u0000\u1055\u1056\u0005\u00b9\u0000\u0000\u1056\u1057\u0003\u020c\u0106"+
		"\u0000\u1057\u1058\u0003\u01cc\u00e6\u0000\u1058\u1084\u0001\u0000\u0000"+
		"\u0000\u1059\u105a\u0005.\u0000\u0000\u105a\u105b\u0005\u015c\u0000\u0000"+
		"\u105b\u105c\u0005\u013e\u0000\u0000\u105c\u105d\u0005\u015a\u0000\u0000"+
		"\u105d\u105e\u0003\u020c\u0106\u0000\u105e\u105f\u0003\u01cc\u00e6\u0000"+
		"\u105f\u1084\u0001\u0000\u0000\u0000\u1060\u1061\u0005.\u0000\u0000\u1061"+
		"\u1062\u0005\u015c\u0000\u0000\u1062\u1063\u0005\u013e\u0000\u0000\u1063"+
		"\u1064\u0005\u00a3\u0000\u0000\u1064\u1065\u0003\u020c\u0106\u0000\u1065"+
		"\u1066\u0003\u01cc\u00e6\u0000\u1066\u1084\u0001\u0000\u0000\u0000\u1067"+
		"\u1068\u0005.\u0000\u0000\u1068\u1069\u0005l\u0000\u0000\u1069\u106a\u0003"+
		"\u020c\u0106\u0000\u106a\u106b\u0003\u01cc\u00e6\u0000\u106b\u1084\u0001"+
		"\u0000\u0000\u0000\u106c\u106d\u0005.\u0000\u0000\u106d\u106e\u0005l\u0000"+
		"\u0000\u106e\u106f\u0005\u00dc\u0000\u0000\u106f\u1070\u0005M\u0000\u0000"+
		"\u1070\u1071\u0005\u0185\u0000\u0000\u1071\u1072\u0003\u020c\u0106\u0000"+
		"\u1072\u1073\u0003\u01cc\u00e6\u0000\u1073\u1084\u0001\u0000\u0000\u0000"+
		"\u1074\u1075\u0005.\u0000\u0000\u1075\u1076\u0005l\u0000\u0000\u1076\u1077"+
		"\u0003\u020c\u0106\u0000\u1077\u1078\u0005@\u0000\u0000\u1078\u1079\u0003"+
		"\u020c\u0106\u0000\u1079\u1084\u0001\u0000\u0000\u0000\u107a\u107b\u0005"+
		".\u0000\u0000\u107b\u107c\u0005l\u0000\u0000\u107c\u107d\u0005\u00dc\u0000"+
		"\u0000\u107d\u107e\u0005M\u0000\u0000\u107e\u107f\u0005\u0185\u0000\u0000"+
		"\u107f\u1080\u0003\u020c\u0106\u0000\u1080\u1081\u0005@\u0000\u0000\u1081"+
		"\u1082\u0003\u020c\u0106\u0000\u1082\u1084\u0001\u0000\u0000\u0000\u1083"+
		"\u1019\u0001\u0000\u0000\u0000\u1083\u1020\u0001\u0000\u0000\u0000\u1083"+
		"\u1026\u0001\u0000\u0000\u0000\u1083\u102b\u0001\u0000\u0000\u0000\u1083"+
		"\u1030\u0001\u0000\u0000\u0000\u1083\u1033\u0001\u0000\u0000\u0000\u1083"+
		"\u103b\u0001\u0000\u0000\u0000\u1083\u1044\u0001\u0000\u0000\u0000\u1083"+
		"\u104b\u0001\u0000\u0000\u0000\u1083\u1052\u0001\u0000\u0000\u0000\u1083"+
		"\u1059\u0001\u0000\u0000\u0000\u1083\u1060\u0001\u0000\u0000\u0000\u1083"+
		"\u1067\u0001\u0000\u0000\u0000\u1083\u106c\u0001\u0000\u0000\u0000\u1083"+
		"\u1074\u0001\u0000\u0000\u0000\u1083\u107a\u0001\u0000\u0000\u0000\u1084"+
		"\u01cb\u0001\u0000\u0000\u0000\u1085\u1086\u0005\u0002\u0000\u0000\u1086"+
		"\u1087\u0003\u01ce\u00e7\u0000\u1087\u1088\u0005\u0003\u0000\u0000\u1088"+
		"\u01cd\u0001\u0000\u0000\u0000\u1089\u108e\u0003\u01d0\u00e8\u0000\u108a"+
		"\u108b\u0005\u0006\u0000\u0000\u108b\u108d\u0003\u01d0\u00e8\u0000\u108c"+
		"\u108a\u0001\u0000\u0000\u0000\u108d\u1090\u0001\u0000\u0000\u0000\u108e"+
		"\u108c\u0001\u0000\u0000\u0000\u108e\u108f\u0001\u0000\u0000\u0000\u108f"+
		"\u01cf\u0001\u0000\u0000\u0000\u1090\u108e\u0001\u0000\u0000\u0000\u1091"+
		"\u1094\u0003\u0566\u02b3\u0000\u1092\u1093\u0005\n\u0000\u0000\u1093\u1095"+
		"\u0003\u01d2\u00e9\u0000\u1094\u1092\u0001\u0000\u0000\u0000\u1094\u1095"+
		"\u0001\u0000\u0000\u0000\u1095\u01d1\u0001\u0000\u0000\u0000\u1096\u109d"+
		"\u0003\u0280\u0140\u0000\u1097\u109d\u0003\u0572\u02b9\u0000\u1098\u109d"+
		"\u0003\u04fe\u027f\u0000\u1099\u109d\u0003\u0124\u0092\u0000\u109a\u109d"+
		"\u0003\u0550\u02a8\u0000\u109b\u109d\u0005\u0190\u0000\u0000\u109c\u1096"+
		"\u0001\u0000\u0000\u0000\u109c\u1097\u0001\u0000\u0000\u0000\u109c\u1098"+
		"\u0001\u0000\u0000\u0000\u109c\u1099\u0001\u0000\u0000\u0000\u109c\u109a"+
		"\u0001\u0000\u0000\u0000\u109c\u109b\u0001\u0000\u0000\u0000\u109d\u01d3"+
		"\u0001\u0000\u0000\u0000\u109e\u109f\u0005\u0002\u0000\u0000\u109f\u10a0"+
		"\u0003\u01d6\u00eb\u0000\u10a0\u10a1\u0005\u0003\u0000\u0000\u10a1\u01d5"+
		"\u0001\u0000\u0000\u0000\u10a2\u10a7\u0003\u01d8\u00ec\u0000\u10a3\u10a4"+
		"\u0005\u0006\u0000\u0000\u10a4\u10a6\u0003\u01d8\u00ec\u0000\u10a5\u10a3"+
		"\u0001\u0000\u0000\u0000\u10a6\u10a9\u0001\u0000\u0000\u0000\u10a7\u10a5"+
		"\u0001\u0000\u0000\u0000\u10a7\u10a8\u0001\u0000\u0000\u0000\u10a8\u01d7"+
		"\u0001\u0000\u0000\u0000\u10a9\u10a7\u0001\u0000\u0000\u0000\u10aa\u10ab"+
		"\u0003\u0568\u02b4\u0000\u10ab\u10ac\u0005\n\u0000\u0000\u10ac\u10ad\u0003"+
		"\u01d2\u00e9\u0000\u10ad\u01d9\u0001\u0000\u0000\u0000\u10ae\u10b1\u0003"+
		"\u01dc\u00ee\u0000\u10af\u10b1\u0001\u0000\u0000\u0000\u10b0\u10ae\u0001"+
		"\u0000\u0000\u0000\u10b0\u10af\u0001\u0000\u0000\u0000\u10b1\u01db\u0001"+
		"\u0000\u0000\u0000\u10b2\u10b7\u0003\u0550\u02a8\u0000\u10b3\u10b4\u0005"+
		"\u0006\u0000\u0000\u10b4\u10b6\u0003\u0550\u02a8\u0000\u10b5\u10b3\u0001"+
		"\u0000\u0000\u0000\u10b6\u10b9\u0001\u0000\u0000\u0000\u10b7\u10b5\u0001"+
		"\u0000\u0000\u0000\u10b7\u10b8\u0001\u0000\u0000\u0000\u10b8\u01dd\u0001"+
		"\u0000\u0000\u0000\u10b9\u10b7\u0001\u0000\u0000\u0000\u10ba\u10bb\u0005"+
		"\u008a\u0000\u0000\u10bb\u10bc\u0005\u0161\u0000\u0000\u10bc\u10bd\u0003"+
		"\u020c\u0106\u0000\u10bd\u10be\u0005\u0085\u0000\u0000\u10be\u10bf\u0005"+
		"\u01c2\u0000\u0000\u10bf\u10c0\u0003\u01e0\u00f0\u0000\u10c0\u10c1\u0003"+
		"\u0550\u02a8\u0000\u10c1\u10e0\u0001\u0000\u0000\u0000\u10c2\u10c3\u0005"+
		"\u008a\u0000\u0000\u10c3\u10c4\u0005\u0161\u0000\u0000\u10c4\u10c5\u0003"+
		"\u020c\u0106\u0000\u10c5\u10c6\u0005\u0085\u0000\u0000\u10c6\u10c7\u0005"+
		"\u01c2\u0000\u0000\u10c7\u10c8\u0003\u01e0\u00f0\u0000\u10c8\u10c9\u0003"+
		"\u0550\u02a8\u0000\u10c9\u10ca\u0005\u0091\u0000\u0000\u10ca\u10cb\u0003"+
		"\u0550\u02a8\u0000\u10cb\u10e0\u0001\u0000\u0000\u0000\u10cc\u10cd\u0005"+
		"\u008a\u0000\u0000\u10cd\u10ce\u0005\u0161\u0000\u0000\u10ce\u10cf\u0003"+
		"\u020c\u0106\u0000\u10cf\u10d0\u0005\u0085\u0000\u0000\u10d0\u10d1\u0005"+
		"\u01c2\u0000\u0000\u10d1\u10d2\u0003\u01e0\u00f0\u0000\u10d2\u10d3\u0003"+
		"\u0550\u02a8\u0000\u10d3\u10d4\u0005\u0087\u0000\u0000\u10d4\u10d5\u0003"+
		"\u0550\u02a8\u0000\u10d5\u10e0\u0001\u0000\u0000\u0000\u10d6\u10d7\u0005"+
		"\u008a\u0000\u0000\u10d7\u10d8\u0005\u0161\u0000\u0000\u10d8\u10d9\u0003"+
		"\u020c\u0106\u0000\u10d9\u10da\u0005\u012e\u0000\u0000\u10da\u10db\u0005"+
		"\u01c2\u0000\u0000\u10db\u10dc\u0003\u0550\u02a8\u0000\u10dc\u10dd\u0005"+
		"^\u0000\u0000\u10dd\u10de\u0003\u0550\u02a8\u0000\u10de\u10e0\u0001\u0000"+
		"\u0000\u0000\u10df\u10ba\u0001\u0000\u0000\u0000\u10df\u10c2\u0001\u0000"+
		"\u0000\u0000\u10df\u10cc\u0001\u0000\u0000\u0000\u10df\u10d6\u0001\u0000"+
		"\u0000\u0000\u10e0\u01df\u0001\u0000\u0000\u0000\u10e1\u10e2\u0005\u00dc"+
		"\u0000\u0000\u10e2\u10e3\u0005M\u0000\u0000\u10e3\u10e6\u0005\u0185\u0000"+
		"\u0000\u10e4\u10e6\u0001\u0000\u0000\u0000\u10e5\u10e1\u0001\u0000\u0000"+
		"\u0000\u10e5\u10e4\u0001\u0000\u0000\u0000\u10e6\u01e1\u0001\u0000\u0000"+
		"\u0000\u10e7\u10e8\u0005.\u0000\u0000\u10e8\u10e9\u0005\u010f\u0000\u0000"+
		"\u10e9\u10ea\u0005\u009c\u0000\u0000\u10ea\u10eb\u0003\u020c\u0106\u0000"+
		"\u10eb\u10ec\u0003\u01e8\u00f4\u0000\u10ec\u10ed\u0005>\u0000\u0000\u10ed"+
		"\u10ee\u0005\u0161\u0000\u0000\u10ee\u10ef\u0003\u0460\u0230\u0000\u10ef"+
		"\u10f0\u0005d\u0000\u0000\u10f0\u10f1\u0003\u053e\u029f\u0000\u10f1\u10f2"+
		"\u0003\u01ea\u00f5\u0000\u10f2\u10f3\u0005$\u0000\u0000\u10f3\u10f4\u0003"+
		"\u01e4\u00f2\u0000\u10f4\u01e3\u0001\u0000\u0000\u0000\u10f5\u10fa\u0003"+
		"\u01e6\u00f3\u0000\u10f6\u10f7\u0005\u0006\u0000\u0000\u10f7\u10f9\u0003"+
		"\u01e6\u00f3\u0000\u10f8\u10f6\u0001\u0000\u0000\u0000\u10f9\u10fc\u0001"+
		"\u0000\u0000\u0000\u10fa\u10f8\u0001\u0000\u0000\u0000\u10fa\u10fb\u0001"+
		"\u0000\u0000\u0000\u10fb\u01e5\u0001\u0000\u0000\u0000\u10fc\u10fa\u0001"+
		"\u0000\u0000\u0000\u10fd\u10fe\u0005\u010f\u0000\u0000\u10fe\u10ff\u0003"+
		"\u054e\u02a7\u0000\u10ff\u1100\u0003\u02ac\u0156\u0000\u1100\u1101\u0003"+
		"\u01ec\u00f6\u0000\u1101\u1102\u0003\u01ee\u00f7\u0000\u1102\u1117\u0001"+
		"\u0000\u0000\u0000\u1103\u1104\u0005\u010f\u0000\u0000\u1104\u1105\u0003"+
		"\u054e\u02a7\u0000\u1105\u1106\u0003\u02b0\u0158\u0000\u1106\u1107\u0003"+
		"\u01ec\u00f6\u0000\u1107\u1108\u0003\u01ee\u00f7\u0000\u1108\u1117\u0001"+
		"\u0000\u0000\u0000\u1109\u110a\u0005\u00d3\u0000\u0000\u110a\u110b\u0003"+
		"\u054e\u02a7\u0000\u110b\u110c\u0003\u0272\u0139\u0000\u110c\u1117\u0001"+
		"\u0000\u0000\u0000\u110d\u110e\u0005\u00d3\u0000\u0000\u110e\u110f\u0003"+
		"\u054e\u02a7\u0000\u110f\u1110\u0005\u0002\u0000\u0000\u1110\u1111\u0003"+
		"\u0508\u0284\u0000\u1111\u1112\u0005\u0003\u0000\u0000\u1112\u1113\u0003"+
		"\u0272\u0139\u0000\u1113\u1117\u0001\u0000\u0000\u0000\u1114\u1115\u0005"+
		"\u0152\u0000\u0000\u1115\u1117\u0003\u0460\u0230\u0000\u1116\u10fd\u0001"+
		"\u0000\u0000\u0000\u1116\u1103\u0001\u0000\u0000\u0000\u1116\u1109\u0001"+
		"\u0000\u0000\u0000\u1116\u110d\u0001\u0000\u0000\u0000\u1116\u1114\u0001"+
		"\u0000\u0000\u0000\u1117\u01e7\u0001\u0000\u0000\u0000\u1118\u111b\u0005"+
		"5\u0000\u0000\u1119\u111b\u0001\u0000\u0000\u0000\u111a\u1118\u0001\u0000"+
		"\u0000\u0000\u111a\u1119\u0001\u0000\u0000\u0000\u111b\u01e9\u0001\u0000"+
		"\u0000\u0000\u111c\u111d\u0005\u00ce\u0000\u0000\u111d\u1120\u0003\u020c"+
		"\u0106\u0000\u111e\u1120\u0001\u0000\u0000\u0000\u111f\u111c\u0001\u0000"+
		"\u0000\u0000\u111f\u111e\u0001\u0000\u0000\u0000\u1120\u01eb\u0001\u0000"+
		"\u0000\u0000\u1121\u1122\u0005>\u0000\u0000\u1122\u1129\u0005\u013e\u0000"+
		"\u0000\u1123\u1124\u0005>\u0000\u0000\u1124\u1125\u0005S\u0000\u0000\u1125"+
		"\u1126\u0005\u0093\u0000\u0000\u1126\u1129\u0003\u020c\u0106\u0000\u1127"+
		"\u1129\u0001\u0000\u0000\u0000\u1128\u1121\u0001\u0000\u0000\u0000\u1128"+
		"\u1123\u0001\u0000\u0000\u0000\u1128\u1127\u0001\u0000\u0000\u0000\u1129"+
		"\u01ed\u0001\u0000\u0000\u0000\u112a\u112d\u0005\u0127\u0000\u0000\u112b"+
		"\u112d\u0001\u0000\u0000\u0000\u112c\u112a\u0001\u0000\u0000\u0000\u112c"+
		"\u112b\u0001\u0000\u0000\u0000\u112d\u01ef\u0001\u0000\u0000\u0000\u112e"+
		"\u112f\u0005.\u0000\u0000\u112f\u1130\u0005\u010f\u0000\u0000\u1130\u1131"+
		"\u0005\u00ce\u0000\u0000\u1131\u1132\u0003\u020c\u0106\u0000\u1132\u1133"+
		"\u0005d\u0000\u0000\u1133\u1134\u0003\u053e\u029f\u0000\u1134\u01f1\u0001"+
		"\u0000\u0000\u0000\u1135\u1136\u0005\u008a\u0000\u0000\u1136\u1137\u0005"+
		"\u010f\u0000\u0000\u1137\u1138\u0005\u00ce\u0000\u0000\u1138\u1139\u0003"+
		"\u020c\u0106\u0000\u1139\u113a\u0005d\u0000\u0000\u113a\u113b\u0003\u053e"+
		"\u029f\u0000\u113b\u113c\u0005\u0085\u0000\u0000\u113c\u113d\u0003\u01e4"+
		"\u00f2\u0000\u113d\u1148\u0001\u0000\u0000\u0000\u113e\u113f\u0005\u008a"+
		"\u0000\u0000\u113f\u1140\u0005\u010f\u0000\u0000\u1140\u1141\u0005\u00ce"+
		"\u0000\u0000\u1141\u1142\u0003\u020c\u0106\u0000\u1142\u1143\u0005d\u0000"+
		"\u0000\u1143\u1144\u0003\u053e\u029f\u0000\u1144\u1145\u0005\u00bf\u0000"+
		"\u0000\u1145\u1146\u0003\u01f4\u00fa\u0000\u1146\u1148\u0001\u0000\u0000"+
		"\u0000\u1147\u1135\u0001\u0000\u0000\u0000\u1147\u113e\u0001\u0000\u0000"+
		"\u0000\u1148\u01f3\u0001\u0000\u0000\u0000\u1149\u114e\u0003\u01f6\u00fb"+
		"\u0000\u114a\u114b\u0005\u0006\u0000\u0000\u114b\u114d\u0003\u01f6\u00fb"+
		"\u0000\u114c\u114a\u0001\u0000\u0000\u0000\u114d\u1150\u0001\u0000\u0000"+
		"\u0000\u114e\u114c\u0001\u0000\u0000\u0000\u114e\u114f\u0001\u0000\u0000"+
		"\u0000\u114f\u01f5\u0001\u0000\u0000\u0000\u1150\u114e\u0001\u0000\u0000"+
		"\u0000\u1151\u1152\u0005\u010f\u0000\u0000\u1152\u1153\u0003\u054e\u02a7"+
		"\u0000\u1153\u1154\u0005\u0002\u0000\u0000\u1154\u1155\u0003\u0508\u0284"+
		"\u0000\u1155\u1156\u0005\u0003\u0000\u0000\u1156\u115e\u0001\u0000\u0000"+
		"\u0000\u1157\u1158\u0005\u00d3\u0000\u0000\u1158\u1159\u0003\u054e\u02a7"+
		"\u0000\u1159\u115a\u0005\u0002\u0000\u0000\u115a\u115b\u0003\u0508\u0284"+
		"\u0000\u115b\u115c\u0005\u0003\u0000\u0000\u115c\u115e\u0001\u0000\u0000"+
		"\u0000\u115d\u1151\u0001\u0000\u0000\u0000\u115d\u1157\u0001\u0000\u0000"+
		"\u0000\u115e\u01f7\u0001\u0000\u0000\u0000\u115f\u1160\u0005\u00bf\u0000"+
		"\u0000\u1160\u1161\u0005\u010f\u0000\u0000\u1161\u1162\u0005\u009c\u0000"+
		"\u0000\u1162\u1163\u0003\u020c\u0106\u0000\u1163\u1164\u0005d\u0000\u0000"+
		"\u1164\u1165\u0003\u053e\u029f\u0000\u1165\u1166\u0003l6\u0000\u1166\u1172"+
		"\u0001\u0000\u0000\u0000\u1167\u1168\u0005\u00bf\u0000\u0000\u1168\u1169"+
		"\u0005\u010f\u0000\u0000\u1169\u116a\u0005\u009c\u0000\u0000\u116a\u116b"+
		"\u0005\u00dc\u0000\u0000\u116b\u116c\u0005\u0185\u0000\u0000\u116c\u116d"+
		"\u0003\u020c\u0106\u0000\u116d\u116e\u0005d\u0000\u0000\u116e\u116f\u0003"+
		"\u053e\u029f\u0000\u116f\u1170\u0003l6\u0000\u1170\u1172\u0001\u0000\u0000"+
		"\u0000\u1171\u115f\u0001\u0000\u0000\u0000\u1171\u1167\u0001\u0000\u0000"+
		"\u0000\u1172\u01f9\u0001\u0000\u0000\u0000\u1173\u1174\u0005\u00bf\u0000"+
		"\u0000\u1174\u1175\u0005\u010f\u0000\u0000\u1175\u1176\u0005\u00ce\u0000"+
		"\u0000\u1176\u1177\u0003\u020c\u0106\u0000\u1177\u1178\u0005d\u0000\u0000"+
		"\u1178\u1179\u0003\u053e\u029f\u0000\u1179\u117a\u0003l6\u0000\u117a\u1186"+
		"\u0001\u0000\u0000\u0000\u117b\u117c\u0005\u00bf\u0000\u0000\u117c\u117d"+
		"\u0005\u010f\u0000\u0000\u117d\u117e\u0005\u00ce\u0000\u0000\u117e\u117f"+
		"\u0005\u00dc\u0000\u0000\u117f\u1180\u0005\u0185\u0000\u0000\u1180\u1181"+
		"\u0003\u020c\u0106\u0000\u1181\u1182\u0005d\u0000\u0000\u1182\u1183\u0003"+
		"\u053e\u029f\u0000\u1183\u1184\u0003l6\u0000\u1184\u1186\u0001\u0000\u0000"+
		"\u0000\u1185\u1173\u0001\u0000\u0000\u0000\u1185\u117b\u0001\u0000\u0000"+
		"\u0000\u1186\u01fb\u0001\u0000\u0000\u0000\u1187\u1188\u0005\u00bf\u0000"+
		"\u0000\u1188\u1189\u0005\u0112\u0000\u0000\u1189\u118a\u0005\u0093\u0000"+
		"\u0000\u118a\u118b\u0003\u055c\u02ae\u0000\u118b\u118c\u0003l6\u0000\u118c"+
		"\u01fd\u0001\u0000\u0000\u0000\u118d\u118e\u0005\u0126\u0000\u0000\u118e"+
		"\u118f\u0005\u0112\u0000\u0000\u118f\u1190\u0005\u0093\u0000\u0000\u1190"+
		"\u1191\u0003\u055c\u02ae\u0000\u1191\u1192\u0005^\u0000\u0000\u1192\u1193"+
		"\u0003\u055a\u02ad\u0000\u1193\u01ff\u0001\u0000\u0000\u0000\u1194\u1195"+
		"\u0005\u00bf\u0000\u0000\u1195\u1196\u0003\u0202\u0101\u0000\u1196\u1197"+
		"\u0005\u00dc\u0000\u0000\u1197\u1198\u0005\u0185\u0000\u0000\u1198\u1199"+
		"\u0003\u020a\u0105\u0000\u1199\u119a\u0003l6\u0000\u119a\u11e3\u0001\u0000"+
		"\u0000\u0000\u119b\u119c\u0005\u00bf\u0000\u0000\u119c\u119d\u0003\u0202"+
		"\u0101\u0000\u119d\u119e\u0003\u020a\u0105\u0000\u119e\u119f\u0003l6\u0000"+
		"\u119f\u11e3\u0001\u0000\u0000\u0000\u11a0\u11a1\u0005\u00bf\u0000\u0000"+
		"\u11a1\u11a2\u0003\u0206\u0103\u0000\u11a2\u11a3\u0005\u00dc\u0000\u0000"+
		"\u11a3\u11a4\u0005\u0185\u0000\u0000\u11a4\u11a5\u0003\u053c\u029e\u0000"+
		"\u11a5\u11a6\u0003l6\u0000\u11a6\u11e3\u0001\u0000\u0000\u0000\u11a7\u11a8"+
		"\u0005\u00bf\u0000\u0000\u11a8\u11a9\u0003\u0206\u0103\u0000\u11a9\u11aa"+
		"\u0003\u053c\u029e\u0000\u11aa\u11ab\u0003l6\u0000\u11ab\u11e3\u0001\u0000"+
		"\u0000\u0000\u11ac\u11ad\u0005\u00bf\u0000\u0000\u11ad\u11ae\u0003\u0208"+
		"\u0104\u0000\u11ae\u11af\u0003\u053e\u029f\u0000\u11af\u11b0\u0005P\u0000"+
		"\u0000\u11b0\u11b1\u0003\u020c\u0106\u0000\u11b1\u11b2\u0003l6\u0000\u11b2"+
		"\u11e3\u0001\u0000\u0000\u0000\u11b3\u11b4\u0005\u00bf\u0000\u0000\u11b4"+
		"\u11b5\u0003\u0208\u0104\u0000\u11b5\u11b6\u0005\u00dc\u0000\u0000\u11b6"+
		"\u11b7\u0005\u0185\u0000\u0000\u11b7\u11b8\u0003\u053e\u029f\u0000\u11b8"+
		"\u11b9\u0005P\u0000\u0000\u11b9\u11ba\u0003\u020c\u0106\u0000\u11ba\u11bb"+
		"\u0003l6\u0000\u11bb\u11e3\u0001\u0000\u0000\u0000\u11bc\u11bd\u0005\u00bf"+
		"\u0000\u0000\u11bd\u11be\u0005\u0161\u0000\u0000\u11be\u11bf\u0003\u0210"+
		"\u0108\u0000\u11bf\u11c0\u0003l6\u0000\u11c0\u11e3\u0001\u0000\u0000\u0000"+
		"\u11c1\u11c2\u0005\u00bf\u0000\u0000\u11c2\u11c3\u0005\u0161\u0000\u0000"+
		"\u11c3\u11c4\u0005\u00dc\u0000\u0000\u11c4\u11c5\u0005\u0185\u0000\u0000"+
		"\u11c5\u11c6\u0003\u0210\u0108\u0000\u11c6\u11c7\u0003l6\u0000\u11c7\u11e3"+
		"\u0001\u0000\u0000\u0000\u11c8\u11c9\u0005\u00bf\u0000\u0000\u11c9\u11ca"+
		"\u0005\u00bd\u0000\u0000\u11ca\u11cb\u0003\u0210\u0108\u0000\u11cb\u11cc"+
		"\u0003l6\u0000\u11cc\u11e3\u0001\u0000\u0000\u0000\u11cd\u11ce\u0005\u00bf"+
		"\u0000\u0000\u11ce\u11cf\u0005\u00bd\u0000\u0000\u11cf\u11d0\u0005\u00dc"+
		"\u0000\u0000\u11d0\u11d1\u0005\u0185\u0000\u0000\u11d1\u11d2\u0003\u0210"+
		"\u0108\u0000\u11d2\u11d3\u0003l6\u0000\u11d3\u11e3\u0001\u0000\u0000\u0000"+
		"\u11d4\u11d5\u0005\u00bf\u0000\u0000\u11d5\u11d6\u0005\u00e2\u0000\u0000"+
		"\u11d6\u11d7\u0005m\u0000\u0000\u11d7\u11d8\u0003\u020a\u0105\u0000\u11d8"+
		"\u11d9\u0003l6\u0000\u11d9\u11e3\u0001\u0000\u0000\u0000\u11da\u11db\u0005"+
		"\u00bf\u0000\u0000\u11db\u11dc\u0005\u00e2\u0000\u0000\u11dc\u11dd\u0005"+
		"m\u0000\u0000\u11dd\u11de\u0005\u00dc\u0000\u0000\u11de\u11df\u0005\u0185"+
		"\u0000\u0000\u11df\u11e0\u0003\u020a\u0105\u0000\u11e0\u11e1\u0003l6\u0000"+
		"\u11e1\u11e3\u0001\u0000\u0000\u0000\u11e2\u1194\u0001\u0000\u0000\u0000"+
		"\u11e2\u119b\u0001\u0000\u0000\u0000\u11e2\u11a0\u0001\u0000\u0000\u0000"+
		"\u11e2\u11a7\u0001\u0000\u0000\u0000\u11e2\u11ac\u0001\u0000\u0000\u0000"+
		"\u11e2\u11b3\u0001\u0000\u0000\u0000\u11e2\u11bc\u0001\u0000\u0000\u0000"+
		"\u11e2\u11c1\u0001\u0000\u0000\u0000\u11e2\u11c8\u0001\u0000\u0000\u0000"+
		"\u11e2\u11cd\u0001\u0000\u0000\u0000\u11e2\u11d4\u0001\u0000\u0000\u0000"+
		"\u11e2\u11da\u0001\u0000\u0000\u0000\u11e3\u0201\u0001\u0000\u0000\u0000"+
		"\u11e4\u11fc\u0005\\\u0000\u0000\u11e5\u11fc\u0005\u0141\u0000\u0000\u11e6"+
		"\u11fc\u0005\u0171\u0000\u0000\u11e7\u11e8\u0005\u00fb\u0000\u0000\u11e8"+
		"\u11fc\u0005\u0171\u0000\u0000\u11e9\u11fc\u0005\u00e2\u0000\u0000\u11ea"+
		"\u11eb\u0005?\u0000\u0000\u11eb\u11fc\u0005\\\u0000\u0000\u11ec\u11fc"+
		"\u0005l\u0000\u0000\u11ed\u11fc\u0005\u00a8\u0000\u0000\u11ee\u11fc\u0005"+
		"\u014f\u0000\u0000\u11ef\u11f0\u0005\u015c\u0000\u0000\u11f0\u11f1\u0005"+
		"\u013e\u0000\u0000\u11f1\u11fc\u0005\u0114\u0000\u0000\u11f2\u11f3\u0005"+
		"\u015c\u0000\u0000\u11f3\u11f4\u0005\u013e\u0000\u0000\u11f4\u11fc\u0005"+
		"\u00b9\u0000\u0000\u11f5\u11f6\u0005\u015c\u0000\u0000\u11f6\u11f7\u0005"+
		"\u013e\u0000\u0000\u11f7\u11fc\u0005\u015a\u0000\u0000\u11f8\u11f9\u0005"+
		"\u015c\u0000\u0000\u11f9\u11fa\u0005\u013e\u0000\u0000\u11fa\u11fc\u0005"+
		"\u00a3\u0000\u0000\u11fb\u11e4\u0001\u0000\u0000\u0000\u11fb\u11e5\u0001"+
		"\u0000\u0000\u0000\u11fb\u11e6\u0001\u0000\u0000\u0000\u11fb\u11e7\u0001"+
		"\u0000\u0000\u0000\u11fb\u11e9\u0001\u0000\u0000\u0000\u11fb\u11ea\u0001"+
		"\u0000\u0000\u0000\u11fb\u11ec\u0001\u0000\u0000\u0000\u11fb\u11ed\u0001"+
		"\u0000\u0000\u0000\u11fb\u11ee\u0001\u0000\u0000\u0000\u11fb\u11ef\u0001"+
		"\u0000\u0000\u0000\u11fb\u11f2\u0001\u0000\u0000\u0000\u11fb\u11f5\u0001"+
		"\u0000\u0000\u0000\u11fb\u11f8\u0001\u0000\u0000\u0000\u11fc\u0203\u0001"+
		"\u0000\u0000\u0000\u11fd\u1203\u0003\u0206\u0103\u0000\u11fe\u1203\u0005"+
		"\u00af\u0000\u0000\u11ff\u1203\u0005\u0137\u0000\u0000\u1200\u1203\u0005"+
		"\u01c3\u0000\u0000\u1201\u1203\u0005\u0158\u0000\u0000\u1202\u11fd\u0001"+
		"\u0000\u0000\u0000\u1202\u11fe\u0001\u0000\u0000\u0000\u1202\u11ff\u0001"+
		"\u0000\u0000\u0000\u1202\u1200\u0001\u0000\u0000\u0000\u1202\u1201\u0001"+
		"\u0000\u0000\u0000\u1203\u0205\u0001\u0000\u0000\u0000\u1204\u1205\u0005"+
		"\u0083\u0000\u0000\u1205\u1213\u0005\u01be\u0000\u0000\u1206\u1207\u0005"+
		"\u00c6\u0000\u0000\u1207\u1213\u0005\u015e\u0000\u0000\u1208\u1213\u0005"+
		"\u00cc\u0000\u0000\u1209\u120a\u0005?\u0000\u0000\u120a\u120b\u0005\u00ae"+
		"\u0000\u0000\u120b\u1213\u0005\u0176\u0000\u0000\u120c\u120d\u0003\u0134"+
		"\u009a\u0000\u120d\u120e\u0005\u00ee\u0000\u0000\u120e\u1213\u0001\u0000"+
		"\u0000\u0000\u120f\u1213\u0005\u01c4\u0000\u0000\u1210\u1213\u0005\u013c"+
		"\u0000\u0000\u1211\u1213\u0005\u0144\u0000\u0000\u1212\u1204\u0001\u0000"+
		"\u0000\u0000\u1212\u1206\u0001\u0000\u0000\u0000\u1212\u1208\u0001\u0000"+
		"\u0000\u0000\u1212\u1209\u0001\u0000\u0000\u0000\u1212\u120c\u0001\u0000"+
		"\u0000\u0000\u1212\u120f\u0001\u0000\u0000\u0000\u1212\u1210\u0001\u0000"+
		"\u0000\u0000\u1212\u1211\u0001\u0000\u0000\u0000\u1213\u0207\u0001\u0000"+
		"\u0000\u0000\u1214\u1215\u0007\u0017\u0000\u0000\u1215\u0209\u0001\u0000"+
		"\u0000\u0000\u1216\u121b\u0003\u020c\u0106\u0000\u1217\u1218\u0005\u0006"+
		"\u0000\u0000\u1218\u121a\u0003\u020c\u0106\u0000\u1219\u1217\u0001\u0000"+
		"\u0000\u0000\u121a\u121d\u0001\u0000\u0000\u0000\u121b\u1219\u0001\u0000"+
		"\u0000\u0000\u121b\u121c\u0001\u0000\u0000\u0000\u121c\u020b\u0001\u0000"+
		"\u0000\u0000\u121d\u121b\u0001\u0000\u0000\u0000\u121e\u1220\u0003\u055e"+
		"\u02af\u0000\u121f\u1221\u0003\u020e\u0107\u0000\u1220\u121f\u0001\u0000"+
		"\u0000\u0000\u1220\u1221\u0001\u0000\u0000\u0000\u1221\u020d\u0001\u0000"+
		"\u0000\u0000\u1222\u1223\u0005\u000b\u0000\u0000\u1223\u1225\u0003\u0540"+
		"\u02a0\u0000\u1224\u1222\u0001\u0000\u0000\u0000\u1225\u1226\u0001\u0000"+
		"\u0000\u0000\u1226\u1224\u0001\u0000\u0000\u0000\u1226\u1227\u0001\u0000"+
		"\u0000\u0000\u1227\u020f\u0001\u0000\u0000\u0000\u1228\u122d\u0003\u0460"+
		"\u0230\u0000\u1229\u122a\u0005\u0006\u0000\u0000\u122a\u122c\u0003\u0460"+
		"\u0230\u0000\u122b\u1229\u0001\u0000\u0000\u0000\u122c\u122f\u0001\u0000"+
		"\u0000\u0000\u122d\u122b\u0001\u0000\u0000\u0000\u122d\u122e\u0001\u0000"+
		"\u0000\u0000\u122e\u0211\u0001\u0000\u0000\u0000\u122f\u122d\u0001\u0000"+
		"\u0000\u0000\u1230\u1231\u0005\u015f\u0000\u0000\u1231\u1232\u0003\u03de"+
		"\u01ef\u0000\u1232\u1233\u0003\u0436\u021b\u0000\u1233\u1234\u0003\u0214"+
		"\u010a\u0000\u1234\u1235\u0003l6\u0000\u1235\u0213\u0001\u0000\u0000\u0000"+
		"\u1236\u1237\u0005\u00a7\u0000\u0000\u1237\u123c\u0005\u00db\u0000\u0000"+
		"\u1238\u1239\u0005\u0133\u0000\u0000\u1239\u123c\u0005\u00db\u0000\u0000"+
		"\u123a\u123c\u0001\u0000\u0000\u0000\u123b\u1236\u0001\u0000\u0000\u0000"+
		"\u123b\u1238\u0001\u0000\u0000\u0000\u123b\u123a\u0001\u0000\u0000\u0000"+
		"\u123c\u0215\u0001\u0000\u0000\u0000\u123d\u123e\u0005\u009f\u0000\u0000"+
		"\u123e\u123f\u0005P\u0000\u0000\u123f\u1240\u0003\u0202\u0101\u0000\u1240"+
		"\u1241\u0003\u020c\u0106\u0000\u1241\u1242\u0005t\u0000\u0000\u1242\u1243"+
		"\u0003\u0218\u010c\u0000\u1243\u12d1\u0001\u0000\u0000\u0000\u1244\u1245"+
		"\u0005\u009f\u0000\u0000\u1245\u1246\u0005P\u0000\u0000\u1246\u1247\u0005"+
		",\u0000\u0000\u1247\u1248\u0003\u020c\u0106\u0000\u1248\u1249\u0005t\u0000"+
		"\u0000\u1249\u124a\u0003\u0218\u010c\u0000\u124a\u12d1\u0001\u0000\u0000"+
		"\u0000\u124b\u124c\u0005\u009f\u0000\u0000\u124c\u124d\u0005P\u0000\u0000"+
		"\u124d\u124e\u0003\u0204\u0102\u0000\u124e\u124f\u0003\u053e\u029f\u0000"+
		"\u124f\u1250\u0005t\u0000\u0000\u1250\u1251\u0003\u0218\u010c\u0000\u1251"+
		"\u12d1\u0001\u0000\u0000\u0000\u1252\u1253\u0005\u009f\u0000\u0000\u1253"+
		"\u1254\u0005P\u0000\u0000\u1254\u1255\u0005\u0161\u0000\u0000\u1255\u1256"+
		"\u0003\u0460\u0230\u0000\u1256\u1257\u0005t\u0000\u0000\u1257\u1258\u0003"+
		"\u0218\u010c\u0000\u1258\u12d1\u0001\u0000\u0000\u0000\u1259\u125a\u0005"+
		"\u009f\u0000\u0000\u125a\u125b\u0005P\u0000\u0000\u125b\u125c\u0005\u00bd"+
		"\u0000\u0000\u125c\u125d\u0003\u0460\u0230\u0000\u125d\u125e\u0005t\u0000"+
		"\u0000\u125e\u125f\u0003\u0218\u010c\u0000\u125f\u12d1\u0001\u0000\u0000"+
		"\u0000\u1260\u1261\u0005\u009f\u0000\u0000\u1261\u1262\u0005P\u0000\u0000"+
		"\u1262\u1263\u0005\u0088\u0000\u0000\u1263\u1264\u0003\u028a\u0145\u0000"+
		"\u1264\u1265\u0005t\u0000\u0000\u1265\u1266\u0003\u0218\u010c\u0000\u1266"+
		"\u12d1\u0001\u0000\u0000\u0000\u1267\u1268\u0005\u009f\u0000\u0000\u1268"+
		"\u1269\u0005P\u0000\u0000\u1269\u126a\u0005\u00d3\u0000\u0000\u126a\u126b"+
		"\u0003\u0272\u0139\u0000\u126b\u126c\u0005t\u0000\u0000\u126c\u126d\u0003"+
		"\u0218\u010c\u0000\u126d\u12d1\u0001\u0000\u0000\u0000\u126e\u126f\u0005"+
		"\u009f\u0000\u0000\u126f\u1270\u0005P\u0000\u0000\u1270\u1271\u0005\u010f"+
		"\u0000\u0000\u1271\u1272\u0003\u02b0\u0158\u0000\u1272\u1273\u0005t\u0000"+
		"\u0000\u1273\u1274\u0003\u0218\u010c\u0000\u1274\u12d1\u0001\u0000\u0000"+
		"\u0000\u1275\u1276\u0005\u009f\u0000\u0000\u1276\u1277\u0005P\u0000\u0000"+
		"\u1277\u1278\u0005-\u0000\u0000\u1278\u1279\u0003\u053e\u029f\u0000\u1279"+
		"\u127a\u0005P\u0000\u0000\u127a\u127b\u0003\u020c\u0106\u0000\u127b\u127c"+
		"\u0005t\u0000\u0000\u127c\u127d\u0003\u0218\u010c\u0000\u127d\u12d1\u0001"+
		"\u0000\u0000\u0000\u127e\u127f\u0005\u009f\u0000\u0000\u127f\u1280\u0005"+
		"P\u0000\u0000\u1280\u1281\u0005-\u0000\u0000\u1281\u1282\u0003\u053e\u029f"+
		"\u0000\u1282\u1283\u0005P\u0000\u0000\u1283\u1284\u0005\u00bd\u0000\u0000"+
		"\u1284\u1285\u0003\u020c\u0106\u0000\u1285\u1286\u0005t\u0000\u0000\u1286"+
		"\u1287\u0003\u0218\u010c\u0000\u1287\u12d1\u0001\u0000\u0000\u0000\u1288"+
		"\u1289\u0005\u009f\u0000\u0000\u1289\u128a\u0005P\u0000\u0000\u128a\u128b"+
		"\u0003\u0208\u0104\u0000\u128b\u128c\u0003\u053e\u029f\u0000\u128c\u128d"+
		"\u0005P\u0000\u0000\u128d\u128e\u0003\u020c\u0106\u0000\u128e\u128f\u0005"+
		"t\u0000\u0000\u128f\u1290\u0003\u0218\u010c\u0000\u1290\u12d1\u0001\u0000"+
		"\u0000\u0000\u1291\u1292\u0005\u009f\u0000\u0000\u1292\u1293\u0005P\u0000"+
		"\u0000\u1293\u1294\u0005\u0121\u0000\u0000\u1294\u1295\u0003\u0272\u0139"+
		"\u0000\u1295\u1296\u0005t\u0000\u0000\u1296\u1297\u0003\u0218\u010c\u0000"+
		"\u1297\u12d1\u0001\u0000\u0000\u0000\u1298\u1299\u0005\u009f\u0000\u0000"+
		"\u1299\u129a\u0005P\u0000\u0000\u129a\u129b\u0005\u01ba\u0000\u0000\u129b"+
		"\u129c\u0003\u0272\u0139\u0000\u129c\u129d\u0005t\u0000\u0000\u129d\u129e"+
		"\u0003\u0218\u010c\u0000\u129e\u12d1\u0001\u0000\u0000\u0000\u129f\u12a0"+
		"\u0005\u009f\u0000\u0000\u12a0\u12a1\u0005P\u0000\u0000\u12a1\u12a2\u0005"+
		"\u01bb\u0000\u0000\u12a2\u12a3\u0005>\u0000\u0000\u12a3\u12a4\u0003\u0460"+
		"\u0230\u0000\u12a4\u12a5\u0005\u00ee\u0000\u0000\u12a5\u12a6\u0003\u053e"+
		"\u029f\u0000\u12a6\u12a7\u0005t\u0000\u0000\u12a7\u12a8\u0003\u0218\u010c"+
		"\u0000\u12a8\u12d1\u0001\u0000\u0000\u0000\u12a9\u12aa\u0005\u009f\u0000"+
		"\u0000\u12aa\u12ab\u0005P\u0000\u0000\u12ab\u12ac\u0005\u010f\u0000\u0000"+
		"\u12ac\u12ad\u0005\u009c\u0000\u0000\u12ad\u12ae\u0003\u020c\u0106\u0000"+
		"\u12ae\u12af\u0005d\u0000\u0000\u12af\u12b0\u0003\u053e\u029f\u0000\u12b0"+
		"\u12b1\u0005t\u0000\u0000\u12b1\u12b2\u0003\u0218\u010c\u0000\u12b2\u12d1"+
		"\u0001\u0000\u0000\u0000\u12b3\u12b4\u0005\u009f\u0000\u0000\u12b4\u12b5"+
		"\u0005P\u0000\u0000\u12b5\u12b6\u0005\u010f\u0000\u0000\u12b6\u12b7\u0005"+
		"\u00ce\u0000\u0000\u12b7\u12b8\u0003\u020c\u0106\u0000\u12b8\u12b9\u0005"+
		"d\u0000\u0000\u12b9\u12ba\u0003\u053e\u029f\u0000\u12ba\u12bb\u0005t\u0000"+
		"\u0000\u12bb\u12bc\u0003\u0218\u010c\u0000\u12bc\u12d1\u0001\u0000\u0000"+
		"\u0000\u12bd\u12be\u0005\u009f\u0000\u0000\u12be\u12bf\u0005P\u0000\u0000"+
		"\u12bf\u12c0\u0005\u00ef\u0000\u0000\u12c0\u12c1\u0005\u010b\u0000\u0000"+
		"\u12c1\u12c2\u0003\u0124\u0092\u0000\u12c2\u12c3\u0005t\u0000\u0000\u12c3"+
		"\u12c4\u0003\u0218\u010c\u0000\u12c4\u12d1\u0001\u0000\u0000\u0000\u12c5"+
		"\u12c6\u0005\u009f\u0000\u0000\u12c6\u12c7\u0005P\u0000\u0000\u12c7\u12c8"+
		"\u0005)\u0000\u0000\u12c8\u12c9\u0005\u0002\u0000\u0000\u12c9\u12ca\u0003"+
		"\u0460\u0230\u0000\u12ca\u12cb\u0005$\u0000\u0000\u12cb\u12cc\u0003\u0460"+
		"\u0230\u0000\u12cc\u12cd\u0005\u0003\u0000\u0000\u12cd\u12ce\u0005t\u0000"+
		"\u0000\u12ce\u12cf\u0003\u0218\u010c\u0000\u12cf\u12d1\u0001\u0000\u0000"+
		"\u0000\u12d0\u123d\u0001\u0000\u0000\u0000\u12d0\u1244\u0001\u0000\u0000"+
		"\u0000\u12d0\u124b\u0001\u0000\u0000\u0000\u12d0\u1252\u0001\u0000\u0000"+
		"\u0000\u12d0\u1259\u0001\u0000\u0000\u0000\u12d0\u1260\u0001\u0000\u0000"+
		"\u0000\u12d0\u1267\u0001\u0000\u0000\u0000\u12d0\u126e\u0001\u0000\u0000"+
		"\u0000\u12d0\u1275\u0001\u0000\u0000\u0000\u12d0\u127e\u0001\u0000\u0000"+
		"\u0000\u12d0\u1288\u0001\u0000\u0000\u0000\u12d0\u1291\u0001\u0000\u0000"+
		"\u0000\u12d0\u1298\u0001\u0000\u0000\u0000\u12d0\u129f\u0001\u0000\u0000"+
		"\u0000\u12d0\u12a9\u0001\u0000\u0000\u0000\u12d0\u12b3\u0001\u0000\u0000"+
		"\u0000\u12d0\u12bd\u0001\u0000\u0000\u0000\u12d0\u12c5\u0001\u0000\u0000"+
		"\u0000\u12d1\u0217\u0001\u0000\u0000\u0000\u12d2\u12d5\u0003\u0550\u02a8"+
		"\u0000\u12d3\u12d5\u0005N\u0000\u0000\u12d4\u12d2\u0001\u0000\u0000\u0000"+
		"\u12d4\u12d3\u0001\u0000\u0000\u0000\u12d5\u0219\u0001\u0000\u0000\u0000"+
		"\u12d6\u12d7\u0005\u0140\u0000\u0000\u12d7\u12d8\u0005\u00ed\u0000\u0000"+
		"\u12d8\u12d9\u0003\u021c\u010e\u0000\u12d9\u12da\u0005P\u0000\u0000\u12da"+
		"\u12db\u0003\u0202\u0101\u0000\u12db\u12dc\u0003\u020c\u0106\u0000\u12dc"+
		"\u12dd\u0005t\u0000\u0000\u12dd\u12de\u0003\u021e\u010f\u0000\u12de\u1332"+
		"\u0001\u0000\u0000\u0000\u12df\u12e0\u0005\u0140\u0000\u0000\u12e0\u12e1"+
		"\u0005\u00ed\u0000\u0000\u12e1\u12e2\u0003\u021c\u010e\u0000\u12e2\u12e3"+
		"\u0005P\u0000\u0000\u12e3\u12e4\u0005,\u0000\u0000\u12e4\u12e5\u0003\u020c"+
		"\u0106\u0000\u12e5\u12e6\u0005t\u0000\u0000\u12e6\u12e7\u0003\u021e\u010f"+
		"\u0000\u12e7\u1332\u0001\u0000\u0000\u0000\u12e8\u12e9\u0005\u0140\u0000"+
		"\u0000\u12e9\u12ea\u0005\u00ed\u0000\u0000\u12ea\u12eb\u0003\u021c\u010e"+
		"\u0000\u12eb\u12ec\u0005P\u0000\u0000\u12ec\u12ed\u0003\u0204\u0102\u0000"+
		"\u12ed\u12ee\u0003\u053e\u029f\u0000\u12ee\u12ef\u0005t\u0000\u0000\u12ef"+
		"\u12f0\u0003\u021e\u010f\u0000\u12f0\u1332\u0001\u0000\u0000\u0000\u12f1"+
		"\u12f2\u0005\u0140\u0000\u0000\u12f2\u12f3\u0005\u00ed\u0000\u0000\u12f3"+
		"\u12f4\u0003\u021c\u010e\u0000\u12f4\u12f5\u0005P\u0000\u0000\u12f5\u12f6"+
		"\u0005\u0161\u0000\u0000\u12f6\u12f7\u0003\u0460\u0230\u0000\u12f7\u12f8"+
		"\u0005t\u0000\u0000\u12f8\u12f9\u0003\u021e\u010f\u0000\u12f9\u1332\u0001"+
		"\u0000\u0000\u0000\u12fa\u12fb\u0005\u0140\u0000\u0000\u12fb\u12fc\u0005"+
		"\u00ed\u0000\u0000\u12fc\u12fd\u0003\u021c\u010e\u0000\u12fd\u12fe\u0005"+
		"P\u0000\u0000\u12fe\u12ff\u0005\u00bd\u0000\u0000\u12ff\u1300\u0003\u0460"+
		"\u0230\u0000\u1300\u1301\u0005t\u0000\u0000\u1301\u1302\u0003\u021e\u010f"+
		"\u0000\u1302\u1332\u0001\u0000\u0000\u0000\u1303\u1304\u0005\u0140\u0000"+
		"\u0000\u1304\u1305\u0005\u00ed\u0000\u0000\u1305\u1306\u0003\u021c\u010e"+
		"\u0000\u1306\u1307\u0005P\u0000\u0000\u1307\u1308\u0005\u0088\u0000\u0000"+
		"\u1308\u1309\u0003\u028a\u0145\u0000\u1309\u130a\u0005t\u0000\u0000\u130a"+
		"\u130b\u0003\u021e\u010f\u0000\u130b\u1332\u0001\u0000\u0000\u0000\u130c"+
		"\u130d\u0005\u0140\u0000\u0000\u130d\u130e\u0005\u00ed\u0000\u0000\u130e"+
		"\u130f\u0003\u021c\u010e\u0000\u130f\u1310\u0005P\u0000\u0000\u1310\u1311"+
		"\u0005\u00d3\u0000\u0000\u1311\u1312\u0003\u0272\u0139\u0000\u1312\u1313"+
		"\u0005t\u0000\u0000\u1313\u1314\u0003\u021e\u010f\u0000\u1314\u1332\u0001"+
		"\u0000\u0000\u0000\u1315\u1316\u0005\u0140\u0000\u0000\u1316\u1317\u0005"+
		"\u00ed\u0000\u0000\u1317\u1318\u0003\u021c\u010e\u0000\u1318\u1319\u0005"+
		"P\u0000\u0000\u1319\u131a\u0005\u00ef\u0000\u0000\u131a\u131b\u0005\u010b"+
		"\u0000\u0000\u131b\u131c\u0003\u0124\u0092\u0000\u131c\u131d\u0005t\u0000"+
		"\u0000\u131d\u131e\u0003\u021e\u010f\u0000\u131e\u1332\u0001\u0000\u0000"+
		"\u0000\u131f\u1320\u0005\u0140\u0000\u0000\u1320\u1321\u0005\u00ed\u0000"+
		"\u0000\u1321\u1322\u0003\u021c\u010e\u0000\u1322\u1323\u0005P\u0000\u0000"+
		"\u1323\u1324\u0005\u0121\u0000\u0000\u1324\u1325\u0003\u0272\u0139\u0000"+
		"\u1325\u1326\u0005t\u0000\u0000\u1326\u1327\u0003\u021e\u010f\u0000\u1327"+
		"\u1332\u0001\u0000\u0000\u0000\u1328\u1329\u0005\u0140\u0000\u0000\u1329"+
		"\u132a\u0005\u00ed\u0000\u0000\u132a\u132b\u0003\u021c\u010e\u0000\u132b"+
		"\u132c\u0005P\u0000\u0000\u132c\u132d\u0005\u01ba\u0000\u0000\u132d\u132e"+
		"\u0003\u0272\u0139\u0000\u132e\u132f\u0005t\u0000\u0000\u132f\u1330\u0003"+
		"\u021e\u010f\u0000\u1330\u1332\u0001\u0000\u0000\u0000\u1331\u12d6\u0001"+
		"\u0000\u0000\u0000\u1331\u12df\u0001\u0000\u0000\u0000\u1331\u12e8\u0001"+
		"\u0000\u0000\u0000\u1331\u12f1\u0001\u0000\u0000\u0000\u1331\u12fa\u0001"+
		"\u0000\u0000\u0000\u1331\u1303\u0001\u0000\u0000\u0000\u1331\u130c\u0001"+
		"\u0000\u0000\u0000\u1331\u1315\u0001\u0000\u0000\u0000\u1331\u131f\u0001"+
		"\u0000\u0000\u0000\u1331\u1328\u0001\u0000\u0000\u0000\u1332\u021b\u0001"+
		"\u0000\u0000\u0000\u1333\u1334\u0005>\u0000\u0000\u1334\u1337\u0003H$"+
		"\u0000\u1335\u1337\u0001\u0000\u0000\u0000\u1336\u1333\u0001\u0000\u0000"+
		"\u0000\u1336\u1335\u0001\u0000\u0000\u0000\u1337\u021d\u0001\u0000\u0000"+
		"\u0000\u1338\u133b\u0003\u0550\u02a8\u0000\u1339\u133b\u0005N\u0000\u0000"+
		"\u133a\u1338\u0001\u0000\u0000\u0000\u133a\u1339\u0001\u0000\u0000\u0000"+
		"\u133b\u021f\u0001\u0000\u0000\u0000\u133c\u133d\u0005=\u0000\u0000\u133d"+
		"\u1341\u0003\u0222\u0111\u0000\u133e\u133f\u0005\u0102\u0000\u0000\u133f"+
		"\u1341\u0003\u0222\u0111\u0000\u1340\u133c\u0001\u0000\u0000\u0000\u1340"+
		"\u133e\u0001\u0000\u0000\u0000\u1341\u0221\u0001\u0000\u0000\u0000\u1342"+
		"\u1385\u0003\u03ba\u01dd\u0000\u1343\u1344\u0003\u0224\u0112\u0000\u1344"+
		"\u1345\u0003\u03ba\u01dd\u0000\u1345\u1385\u0001\u0000\u0000\u0000\u1346"+
		"\u1347\u0005\u0105\u0000\u0000\u1347\u1348\u0003\u0226\u0113\u0000\u1348"+
		"\u1349\u0003\u03ba\u01dd\u0000\u1349\u1385\u0001\u0000\u0000\u0000\u134a"+
		"\u134b\u0005\u011e\u0000\u0000\u134b\u134c\u0003\u0226\u0113\u0000\u134c"+
		"\u134d\u0003\u03ba\u01dd\u0000\u134d\u1385\u0001\u0000\u0000\u0000\u134e"+
		"\u134f\u0005\u00cf\u0000\u0000\u134f\u1350\u0003\u0226\u0113\u0000\u1350"+
		"\u1351\u0003\u03ba\u01dd\u0000\u1351\u1385\u0001\u0000\u0000\u0000\u1352"+
		"\u1353\u0005\u00f0\u0000\u0000\u1353\u1354\u0003\u0226\u0113\u0000\u1354"+
		"\u1355\u0003\u03ba\u01dd\u0000\u1355\u1385\u0001\u0000\u0000\u0000\u1356"+
		"\u1357\u0005\u0082\u0000\u0000\u1357\u1358\u0003\u0556\u02ab\u0000\u1358"+
		"\u1359\u0003\u0226\u0113\u0000\u1359\u135a\u0003\u03ba\u01dd\u0000\u135a"+
		"\u1385\u0001\u0000\u0000\u0000\u135b\u135c\u0005\u012c\u0000\u0000\u135c"+
		"\u135d\u0003\u0556\u02ab\u0000\u135d\u135e\u0003\u0226\u0113\u0000\u135e"+
		"\u135f\u0003\u03ba\u01dd\u0000\u135f\u1385\u0001\u0000\u0000\u0000\u1360"+
		"\u1361\u0003\u0556\u02ab\u0000\u1361\u1362\u0003\u0226\u0113\u0000\u1362"+
		"\u1363\u0003\u03ba\u01dd\u0000\u1363\u1385\u0001\u0000\u0000\u0000\u1364"+
		"\u1365\u0005\u001e\u0000\u0000\u1365\u1366\u0003\u0226\u0113\u0000\u1366"+
		"\u1367\u0003\u03ba\u01dd\u0000\u1367\u1385\u0001\u0000\u0000\u0000\u1368"+
		"\u1369\u0005\u00d2\u0000\u0000\u1369\u136a\u0003\u0226\u0113\u0000\u136a"+
		"\u136b\u0003\u03ba\u01dd\u0000\u136b\u1385\u0001\u0000\u0000\u0000\u136c"+
		"\u136d\u0005\u00d2\u0000\u0000\u136d\u136e\u0003\u0556\u02ab\u0000\u136e"+
		"\u136f\u0003\u0226\u0113\u0000\u136f\u1370\u0003\u03ba\u01dd\u0000\u1370"+
		"\u1385\u0001\u0000\u0000\u0000\u1371\u1372\u0005\u00d2\u0000\u0000\u1372"+
		"\u1373\u0005\u001e\u0000\u0000\u1373\u1374\u0003\u0226\u0113\u0000\u1374"+
		"\u1375\u0003\u03ba\u01dd\u0000\u1375\u1385\u0001\u0000\u0000\u0000\u1376"+
		"\u1377\u0005\u0090\u0000\u0000\u1377\u1378\u0003\u0226\u0113\u0000\u1378"+
		"\u1379\u0003\u03ba\u01dd\u0000\u1379\u1385\u0001\u0000\u0000\u0000\u137a"+
		"\u137b\u0005\u0090\u0000\u0000\u137b\u137c\u0003\u0556\u02ab\u0000\u137c"+
		"\u137d\u0003\u0226\u0113\u0000\u137d\u137e\u0003\u03ba\u01dd\u0000\u137e"+
		"\u1385\u0001\u0000\u0000\u0000\u137f\u1380\u0005\u0090\u0000\u0000\u1380"+
		"\u1381\u0005\u001e\u0000\u0000\u1381\u1382\u0003\u0226\u0113\u0000\u1382"+
		"\u1383\u0003\u03ba\u01dd\u0000\u1383\u1385\u0001\u0000\u0000\u0000\u1384"+
		"\u1342\u0001\u0000\u0000\u0000\u1384\u1343\u0001\u0000\u0000\u0000\u1384"+
		"\u1346\u0001\u0000\u0000\u0000\u1384\u134a\u0001\u0000\u0000\u0000\u1384"+
		"\u134e\u0001\u0000\u0000\u0000\u1384\u1352\u0001\u0000\u0000\u0000\u1384"+
		"\u1356\u0001\u0000\u0000\u0000\u1384\u135b\u0001\u0000\u0000\u0000\u1384"+
		"\u1360\u0001\u0000\u0000\u0000\u1384\u1364\u0001\u0000\u0000\u0000\u1384"+
		"\u1368\u0001\u0000\u0000\u0000\u1384\u136c\u0001\u0000\u0000\u0000\u1384"+
		"\u1371\u0001\u0000\u0000\u0000\u1384\u1376\u0001\u0000\u0000\u0000\u1384"+
		"\u137a\u0001\u0000\u0000\u0000\u1384\u137f\u0001\u0000\u0000\u0000\u1385"+
		"\u0223\u0001\u0000\u0000\u0000\u1386\u1387\u0007\u0018\u0000\u0000\u1387"+
		"\u0225\u0001\u0000\u0000\u0000\u1388\u138b\u0003\u0224\u0112\u0000\u1389"+
		"\u138b\u0001\u0000\u0000\u0000\u138a\u1388\u0001\u0000\u0000\u0000\u138a"+
		"\u1389\u0001\u0000\u0000\u0000\u138b\u0227\u0001\u0000\u0000\u0000\u138c"+
		"\u138d\u0005A\u0000\u0000\u138d\u138e\u0003\u022c\u0116\u0000\u138e\u138f"+
		"\u0005P\u0000\u0000\u138f\u1390\u0003\u0232\u0119\u0000\u1390\u1391\u0005"+
		"^\u0000\u0000\u1391\u1392\u0003\u0234\u011a\u0000\u1392\u1393\u0003\u0238"+
		"\u011c\u0000\u1393\u0229\u0001\u0000\u0000\u0000\u1394\u1395\u0005\u0136"+
		"\u0000\u0000\u1395\u1396\u0003\u022c\u0116\u0000\u1396\u1397\u0005P\u0000"+
		"\u0000\u1397\u1398\u0003\u0232\u0119\u0000\u1398\u1399\u0005@\u0000\u0000"+
		"\u1399\u139a\u0003\u0234\u011a\u0000\u139a\u139b\u0003l6\u0000\u139b\u13a8"+
		"\u0001\u0000\u0000\u0000\u139c\u139d\u0005\u0136\u0000\u0000\u139d\u139e"+
		"\u0005A\u0000\u0000\u139e\u139f\u0005\u0110\u0000\u0000\u139f\u13a0\u0005"+
		">\u0000\u0000\u13a0\u13a1\u0003\u022c\u0116\u0000\u13a1\u13a2\u0005P\u0000"+
		"\u0000\u13a2\u13a3\u0003\u0232\u0119\u0000\u13a3\u13a4\u0005@\u0000\u0000"+
		"\u13a4\u13a5\u0003\u0234\u011a\u0000\u13a5\u13a6\u0003l6\u0000\u13a6\u13a8"+
		"\u0001\u0000\u0000\u0000\u13a7\u1394\u0001\u0000\u0000\u0000\u13a7\u139c"+
		"\u0001\u0000\u0000\u0000\u13a8\u022b\u0001\u0000\u0000\u0000\u13a9\u13b9"+
		"\u0003\u022e\u0117\u0000\u13aa\u13b9\u0005\u001e\u0000\u0000\u13ab\u13ac"+
		"\u0005\u001e\u0000\u0000\u13ac\u13b9\u0005\u011f\u0000\u0000\u13ad\u13ae"+
		"\u0005\u001e\u0000\u0000\u13ae\u13af\u0005\u0002\u0000\u0000\u13af\u13b0"+
		"\u0003\u00d8l\u0000\u13b0\u13b1\u0005\u0003\u0000\u0000\u13b1\u13b9\u0001"+
		"\u0000\u0000\u0000\u13b2\u13b3\u0005\u001e\u0000\u0000\u13b3\u13b4\u0005"+
		"\u011f\u0000\u0000\u13b4\u13b5\u0005\u0002\u0000\u0000\u13b5\u13b6\u0003"+
		"\u00d8l\u0000\u13b6\u13b7\u0005\u0003\u0000\u0000\u13b7\u13b9\u0001\u0000"+
		"\u0000\u0000\u13b8\u13a9\u0001\u0000\u0000\u0000\u13b8\u13aa\u0001\u0000"+
		"\u0000\u0000\u13b8\u13ab\u0001\u0000\u0000\u0000\u13b8\u13ad\u0001\u0000"+
		"\u0000\u0000\u13b8\u13b2\u0001\u0000\u0000\u0000\u13b9\u022d\u0001\u0000"+
		"\u0000\u0000\u13ba\u13bf\u0003\u0230\u0118\u0000\u13bb\u13bc\u0005\u0006"+
		"\u0000\u0000\u13bc\u13be\u0003\u0230\u0118\u0000\u13bd\u13bb\u0001\u0000"+
		"\u0000\u0000\u13be\u13c1\u0001\u0000\u0000\u0000\u13bf\u13bd\u0001\u0000"+
		"\u0000\u0000\u13bf\u13c0\u0001\u0000\u0000\u0000\u13c0\u022f\u0001\u0000"+
		"\u0000\u0000\u13c1\u13bf\u0001\u0000\u0000\u0000\u13c2\u13c3\u0005X\u0000"+
		"\u0000\u13c3\u13cc\u0003\u00d6k\u0000\u13c4\u13c5\u0005V\u0000\u0000\u13c5"+
		"\u13cc\u0003\u00d6k\u0000\u13c6\u13c7\u0005.\u0000\u0000\u13c7\u13cc\u0003"+
		"\u00d6k\u0000\u13c8\u13c9\u0003\u055e\u02af\u0000\u13c9\u13ca\u0003\u00d6"+
		"k\u0000\u13ca\u13cc\u0001\u0000\u0000\u0000\u13cb\u13c2\u0001\u0000\u0000"+
		"\u0000\u13cb\u13c4\u0001\u0000\u0000\u0000\u13cb\u13c6\u0001\u0000\u0000"+
		"\u0000\u13cb\u13c8\u0001\u0000\u0000\u0000\u13cc\u0231\u0001\u0000\u0000"+
		"\u0000\u13cd\u1408\u0003\u0538\u029c\u0000\u13ce\u13cf\u0005\\\u0000\u0000"+
		"\u13cf\u1408\u0003\u0538\u029c\u0000\u13d0\u13d1\u0005\u0141\u0000\u0000"+
		"\u13d1\u1408\u0003\u0538\u029c\u0000\u13d2\u13d3\u0005?\u0000\u0000\u13d3"+
		"\u13d4\u0005\u00ae\u0000\u0000\u13d4\u13d5\u0005\u0176\u0000\u0000\u13d5"+
		"\u1408\u0003\u053c\u029e\u0000\u13d6\u13d7\u0005?\u0000\u0000\u13d7\u13d8"+
		"\u0005\u0144\u0000\u0000\u13d8\u1408\u0003\u053c\u029e\u0000\u13d9\u13da"+
		"\u0005\u00d3\u0000\u0000\u13da\u1408\u0003\u0270\u0138\u0000\u13db\u13dc"+
		"\u0005\u0121\u0000\u0000\u13dc\u1408\u0003\u0270\u0138\u0000\u13dd\u13de"+
		"\u0005\u01ba\u0000\u0000\u13de\u1408\u0003\u0270\u0138\u0000\u13df\u13e0"+
		"\u0005\u00af\u0000\u0000\u13e0\u1408\u0003\u053c\u029e\u0000\u13e1\u13e2"+
		"\u0005\u00bd\u0000\u0000\u13e2\u1408\u0003\u020a\u0105\u0000\u13e3\u13e4"+
		"\u0005\u00ee\u0000\u0000\u13e4\u1408\u0003\u053c\u029e\u0000\u13e5\u13e6"+
		"\u0005\u00ef\u0000\u0000\u13e6\u13e7\u0005\u010b\u0000\u0000\u13e7\u1408"+
		"\u0003\u0126\u0093\u0000\u13e8\u13e9\u0005\u013c\u0000\u0000\u13e9\u1408"+
		"\u0003\u053c\u029e\u0000\u13ea\u13eb\u0005\u0158\u0000\u0000\u13eb\u1408"+
		"\u0003\u053c\u029e\u0000\u13ec\u13ed\u0005\u0161\u0000\u0000\u13ed\u1408"+
		"\u0003\u020a\u0105\u0000\u13ee\u13ef\u0005\u001e\u0000\u0000\u13ef\u13f0"+
		"\u0005\u0157\u0000\u0000\u13f0\u13f1\u0005D\u0000\u0000\u13f1\u13f2\u0005"+
		"\u013c\u0000\u0000\u13f2\u1408\u0003\u053c\u029e\u0000\u13f3\u13f4\u0005"+
		"\u001e\u0000\u0000\u13f4\u13f5\u0005\u0142\u0000\u0000\u13f5\u13f6\u0005"+
		"D\u0000\u0000\u13f6\u13f7\u0005\u013c\u0000\u0000\u13f7\u1408\u0003\u053c"+
		"\u029e\u0000\u13f8\u13f9\u0005\u001e\u0000\u0000\u13f9\u13fa\u0005\u00d4"+
		"\u0000\u0000\u13fa\u13fb\u0005D\u0000\u0000\u13fb\u13fc\u0005\u013c\u0000"+
		"\u0000\u13fc\u1408\u0003\u053c\u029e\u0000\u13fd\u13fe\u0005\u001e\u0000"+
		"\u0000\u13fe\u13ff\u0005\u01c9\u0000\u0000\u13ff\u1400\u0005D\u0000\u0000"+
		"\u1400\u1401\u0005\u013c\u0000\u0000\u1401\u1408\u0003\u053c\u029e\u0000"+
		"\u1402\u1403\u0005\u001e\u0000\u0000\u1403\u1404\u0005\u01c7\u0000\u0000"+
		"\u1404\u1405\u0005D\u0000\u0000\u1405\u1406\u0005\u013c\u0000\u0000\u1406"+
		"\u1408\u0003\u053c\u029e\u0000\u1407\u13cd\u0001\u0000\u0000\u0000\u1407"+
		"\u13ce\u0001\u0000\u0000\u0000\u1407\u13d0\u0001\u0000\u0000\u0000\u1407"+
		"\u13d2\u0001\u0000\u0000\u0000\u1407\u13d6\u0001\u0000\u0000\u0000\u1407"+
		"\u13d9\u0001\u0000\u0000\u0000\u1407\u13db\u0001\u0000\u0000\u0000\u1407"+
		"\u13dd\u0001\u0000\u0000\u0000\u1407\u13df\u0001\u0000\u0000\u0000\u1407"+
		"\u13e1\u0001\u0000\u0000\u0000\u1407\u13e3\u0001\u0000\u0000\u0000\u1407"+
		"\u13e5\u0001\u0000\u0000\u0000\u1407\u13e8\u0001\u0000\u0000\u0000\u1407"+
		"\u13ea\u0001\u0000\u0000\u0000\u1407\u13ec\u0001\u0000\u0000\u0000\u1407"+
		"\u13ee\u0001\u0000\u0000\u0000\u1407\u13f3\u0001\u0000\u0000\u0000\u1407"+
		"\u13f8\u0001\u0000\u0000\u0000\u1407\u13fd\u0001\u0000\u0000\u0000\u1407"+
		"\u1402\u0001\u0000\u0000\u0000\u1408\u0233\u0001\u0000\u0000\u0000\u1409"+
		"\u140e\u0003\u0236\u011b\u0000\u140a\u140b\u0005\u0006\u0000\u0000\u140b"+
		"\u140d\u0003\u0236\u011b\u0000\u140c\u140a\u0001\u0000\u0000\u0000\u140d"+
		"\u1410\u0001\u0000\u0000\u0000\u140e\u140c\u0001\u0000\u0000\u0000\u140e"+
		"\u140f\u0001\u0000\u0000\u0000\u140f\u0235\u0001\u0000\u0000\u0000\u1410"+
		"\u140e\u0001\u0000\u0000\u0000\u1411\u1415\u0003\u055a\u02ad\u0000\u1412"+
		"\u1413\u0005B\u0000\u0000\u1413\u1415\u0003\u055a\u02ad\u0000\u1414\u1411"+
		"\u0001\u0000\u0000\u0000\u1414\u1412\u0001\u0000\u0000\u0000\u1415\u0237"+
		"\u0001\u0000\u0000\u0000\u1416\u1417\u0005i\u0000\u0000\u1417\u1418\u0005"+
		"A\u0000\u0000\u1418\u141b\u0005\u0110\u0000\u0000\u1419\u141b\u0001\u0000"+
		"\u0000\u0000\u141a\u1416\u0001\u0000\u0000\u0000\u141a\u1419\u0001\u0000"+
		"\u0000\u0000\u141b\u0239\u0001\u0000\u0000\u0000\u141c\u141d\u0005A\u0000"+
		"\u0000\u141d\u141e\u0003\u022e\u0117\u0000\u141e\u141f\u0005^\u0000\u0000"+
		"\u141f\u1420\u0003\u055c\u02ae\u0000\u1420\u1421\u0003\u023e\u011f\u0000"+
		"\u1421\u1422\u0003\u0240\u0120\u0000\u1422\u023b\u0001\u0000\u0000\u0000"+
		"\u1423\u1424\u0005\u0136\u0000\u0000\u1424\u1425\u0003\u022e\u0117\u0000"+
		"\u1425\u1426\u0005@\u0000\u0000\u1426\u1427\u0003\u055c\u02ae\u0000\u1427"+
		"\u1428\u0003\u0240\u0120\u0000\u1428\u1429\u0003l6\u0000\u1429\u1435\u0001"+
		"\u0000\u0000\u0000\u142a\u142b\u0005\u0136\u0000\u0000\u142b\u142c\u0005"+
		"\u0086\u0000\u0000\u142c\u142d\u0005\u0110\u0000\u0000\u142d\u142e\u0005"+
		">\u0000\u0000\u142e\u142f\u0003\u022e\u0117\u0000\u142f\u1430\u0005@\u0000"+
		"\u0000\u1430\u1431\u0003\u055c\u02ae\u0000\u1431\u1432\u0003\u0240\u0120"+
		"\u0000\u1432\u1433\u0003l6\u0000\u1433\u1435\u0001\u0000\u0000\u0000\u1434"+
		"\u1423\u0001\u0000\u0000\u0000\u1434\u142a\u0001\u0000\u0000\u0000\u1435"+
		"\u023d\u0001\u0000\u0000\u0000\u1436\u1437\u0005i\u0000\u0000\u1437\u1438"+
		"\u0005\u0086\u0000\u0000\u1438\u143b\u0005\u0110\u0000\u0000\u1439\u143b"+
		"\u0001\u0000\u0000\u0000\u143a\u1436\u0001\u0000\u0000\u0000\u143a\u1439"+
		"\u0001\u0000\u0000\u0000\u143b\u023f\u0001\u0000\u0000\u0000\u143c\u143d"+
		"\u0005\u00d6\u0000\u0000\u143d\u143e\u0005\u0093\u0000\u0000\u143e\u1441"+
		"\u0003\u055a\u02ad\u0000\u143f\u1441\u0001\u0000\u0000\u0000\u1440\u143c"+
		"\u0001\u0000\u0000\u0000\u1440\u143f\u0001\u0000\u0000\u0000\u1441\u0241"+
		"\u0001\u0000\u0000\u0000\u1442\u1443\u0005\u008a\u0000\u0000\u1443\u1444"+
		"\u00055\u0000\u0000\u1444\u1445\u0005\u011f\u0000\u0000\u1445\u1446\u0003"+
		"\u0244\u0122\u0000\u1446\u1447\u0003\u0248\u0124\u0000\u1447\u0243\u0001"+
		"\u0000\u0000\u0000\u1448\u144a\u0003\u0246\u0123\u0000\u1449\u1448\u0001"+
		"\u0000\u0000\u0000\u144a\u144d\u0001\u0000\u0000\u0000\u144b\u1449\u0001"+
		"\u0000\u0000\u0000\u144b\u144c\u0001\u0000\u0000\u0000\u144c\u0245\u0001"+
		"\u0000\u0000\u0000\u144d\u144b\u0001\u0000\u0000\u0000\u144e\u144f\u0005"+
		"D\u0000\u0000\u144f\u1450\u0005\u013c\u0000\u0000\u1450\u1458\u0003\u053c"+
		"\u029e\u0000\u1451\u1452\u0005>\u0000\u0000\u1452\u1453\u0005\u0137\u0000"+
		"\u0000\u1453\u1458\u0003\u055c\u02ae\u0000\u1454\u1455\u0005>\u0000\u0000"+
		"\u1455\u1456\u0005c\u0000\u0000\u1456\u1458\u0003\u055c\u02ae\u0000\u1457"+
		"\u144e\u0001\u0000\u0000\u0000\u1457\u1451\u0001\u0000\u0000\u0000\u1457"+
		"\u1454\u0001\u0000\u0000\u0000\u1458\u0247\u0001\u0000\u0000\u0000\u1459"+
		"\u145a\u0005A\u0000\u0000\u145a\u145b\u0003\u022c\u0116\u0000\u145b\u145c"+
		"\u0005P\u0000\u0000\u145c\u145d\u0003\u024a\u0125\u0000\u145d\u145e\u0005"+
		"^\u0000\u0000\u145e\u145f\u0003\u0234\u011a\u0000\u145f\u1460\u0003\u0238"+
		"\u011c\u0000\u1460\u1475\u0001\u0000\u0000\u0000\u1461\u1462\u0005\u0136"+
		"\u0000\u0000\u1462\u1463\u0003\u022c\u0116\u0000\u1463\u1464\u0005P\u0000"+
		"\u0000\u1464\u1465\u0003\u024a\u0125\u0000\u1465\u1466\u0005@\u0000\u0000"+
		"\u1466\u1467\u0003\u0234\u011a\u0000\u1467\u1468\u0003l6\u0000\u1468\u1475"+
		"\u0001\u0000\u0000\u0000\u1469\u146a\u0005\u0136\u0000\u0000\u146a\u146b"+
		"\u0005A\u0000\u0000\u146b\u146c\u0005\u0110\u0000\u0000\u146c\u146d\u0005"+
		">\u0000\u0000\u146d\u146e\u0003\u022c\u0116\u0000\u146e\u146f\u0005P\u0000"+
		"\u0000\u146f\u1470\u0003\u024a\u0125\u0000\u1470\u1471\u0005@\u0000\u0000"+
		"\u1471\u1472\u0003\u0234\u011a\u0000\u1472\u1473\u0003l6\u0000\u1473\u1475"+
		"\u0001\u0000\u0000\u0000\u1474\u1459\u0001\u0000\u0000\u0000\u1474\u1461"+
		"\u0001\u0000\u0000\u0000\u1474\u1469\u0001\u0000\u0000\u0000\u1475\u0249"+
		"\u0001\u0000\u0000\u0000\u1476\u1477\u0007\u0019\u0000\u0000\u1477\u024b"+
		"\u0001\u0000\u0000\u0000\u1478\u1479\u0005.\u0000\u0000\u1479\u147a\u0003"+
		"\u024e\u0127\u0000\u147a\u147b\u0005\u00e2\u0000\u0000\u147b\u147c\u0003"+
		"\u0250\u0128\u0000\u147c\u147d\u0003\u0252\u0129\u0000\u147d\u147e\u0005"+
		"P\u0000\u0000\u147e\u147f\u0003\u0434\u021a\u0000\u147f\u1480\u0003\u0254"+
		"\u012a\u0000\u1480\u1481\u0005\u0002\u0000\u0000\u1481\u1482\u0003\u0256"+
		"\u012b\u0000\u1482\u1483\u0005\u0003\u0000\u0000\u1483\u1484\u0003\u025c"+
		"\u012e\u0000\u1484\u1485\u0003v;\u0000\u1485\u1486\u0003\u00fe\u007f\u0000"+
		"\u1486\u1487\u0003\u0448\u0224\u0000\u1487\u149c\u0001\u0000\u0000\u0000"+
		"\u1488\u1489\u0005.\u0000\u0000\u1489\u148a\u0003\u024e\u0127\u0000\u148a"+
		"\u148b\u0005\u00e2\u0000\u0000\u148b\u148c\u0003\u0250\u0128\u0000\u148c"+
		"\u148d\u0005\u00dc\u0000\u0000\u148d\u148e\u0005M\u0000\u0000\u148e\u148f"+
		"\u0005\u0185\u0000\u0000\u148f\u1490\u0003\u053e\u029f\u0000\u1490\u1491"+
		"\u0005P\u0000\u0000\u1491\u1492\u0003\u0434\u021a\u0000\u1492\u1493\u0003"+
		"\u0254\u012a\u0000\u1493\u1494\u0005\u0002\u0000\u0000\u1494\u1495\u0003"+
		"\u0256\u012b\u0000\u1495\u1496\u0005\u0003\u0000\u0000\u1496\u1497\u0003"+
		"\u025c\u012e\u0000\u1497\u1498\u0003v;\u0000\u1498\u1499\u0003\u00fe\u007f"+
		"\u0000\u1499\u149a\u0003\u0448\u0224\u0000\u149a\u149c\u0001\u0000\u0000"+
		"\u0000\u149b\u1478\u0001\u0000\u0000\u0000\u149b\u1488\u0001\u0000\u0000"+
		"\u0000\u149c\u024d\u0001\u0000\u0000\u0000\u149d\u14a0\u0005b\u0000\u0000"+
		"\u149e\u14a0\u0001\u0000\u0000\u0000\u149f\u149d\u0001\u0000\u0000\u0000"+
		"\u149f\u149e\u0001\u0000\u0000\u0000\u14a0\u024f\u0001\u0000\u0000\u0000"+
		"\u14a1\u14a4\u0005m\u0000\u0000\u14a2\u14a4\u0001\u0000\u0000\u0000\u14a3"+
		"\u14a1\u0001\u0000\u0000\u0000\u14a3\u14a2\u0001\u0000\u0000\u0000\u14a4"+
		"\u0251\u0001\u0000\u0000\u0000\u14a5\u14a8\u0003\u053e\u029f\u0000\u14a6"+
		"\u14a8\u0001\u0000\u0000\u0000\u14a7\u14a5\u0001\u0000\u0000\u0000\u14a7"+
		"\u14a6\u0001\u0000\u0000\u0000\u14a8\u0253\u0001\u0000\u0000\u0000\u14a9"+
		"\u14aa\u0005d\u0000\u0000\u14aa\u14ad\u0003\u053e\u029f\u0000\u14ab\u14ad"+
		"\u0001\u0000\u0000\u0000\u14ac\u14a9\u0001\u0000\u0000\u0000\u14ac\u14ab"+
		"\u0001\u0000\u0000\u0000\u14ad\u0255\u0001\u0000\u0000\u0000\u14ae\u14b3"+
		"\u0003\u025a\u012d\u0000\u14af\u14b0\u0005\u0006\u0000\u0000\u14b0\u14b2"+
		"\u0003\u025a\u012d\u0000\u14b1\u14af\u0001\u0000\u0000\u0000\u14b2\u14b5"+
		"\u0001\u0000\u0000\u0000\u14b3\u14b1\u0001\u0000\u0000\u0000\u14b3\u14b4"+
		"\u0001\u0000\u0000\u0000\u14b4\u0257\u0001\u0000\u0000\u0000\u14b5\u14b3"+
		"\u0001\u0000\u0000\u0000\u14b6\u14b7\u0003\u0260\u0130\u0000\u14b7\u14b8"+
		"\u0003\u0262\u0131\u0000\u14b8\u14b9\u0003\u0264\u0132\u0000\u14b9\u14ba"+
		"\u0003\u0266\u0133\u0000\u14ba\u14c2\u0001\u0000\u0000\u0000\u14bb\u14bc"+
		"\u0003\u0260\u0130\u0000\u14bc\u14bd\u0003\u020c\u0106\u0000\u14bd\u14be"+
		"\u0003t:\u0000\u14be\u14bf\u0003\u0264\u0132\u0000\u14bf\u14c0\u0003\u0266"+
		"\u0133\u0000\u14c0\u14c2\u0001\u0000\u0000\u0000\u14c1\u14b6\u0001\u0000"+
		"\u0000\u0000\u14c1\u14bb\u0001\u0000\u0000\u0000\u14c2\u0259\u0001\u0000"+
		"\u0000\u0000\u14c3\u14c4\u0003\u055e\u02af\u0000\u14c4\u14c5\u0003\u0258"+
		"\u012c\u0000\u14c5\u14cf\u0001\u0000\u0000\u0000\u14c6\u14c7\u0003\u04c0"+
		"\u0260\u0000\u14c7\u14c8\u0003\u0258\u012c\u0000\u14c8\u14cf\u0001\u0000"+
		"\u0000\u0000\u14c9\u14ca\u0005\u0002\u0000\u0000\u14ca\u14cb\u0003\u048c"+
		"\u0246\u0000\u14cb\u14cc\u0005\u0003\u0000\u0000\u14cc\u14cd\u0003\u0258"+
		"\u012c\u0000\u14cd\u14cf\u0001\u0000\u0000\u0000\u14ce\u14c3\u0001\u0000"+
		"\u0000\u0000\u14ce\u14c6\u0001\u0000\u0000\u0000\u14ce\u14c9\u0001\u0000"+
		"\u0000\u0000\u14cf\u025b\u0001\u0000\u0000\u0000\u14d0\u14d1\u0005\u01b9"+
		"\u0000\u0000\u14d1\u14d2\u0005\u0002\u0000\u0000\u14d2\u14d3\u0003\u025e"+
		"\u012f\u0000\u14d3\u14d4\u0005\u0003\u0000\u0000\u14d4\u14d7\u0001\u0000"+
		"\u0000\u0000\u14d5\u14d7\u0001\u0000\u0000\u0000\u14d6\u14d0\u0001\u0000"+
		"\u0000\u0000\u14d6\u14d5\u0001\u0000\u0000\u0000\u14d7\u025d\u0001\u0000"+
		"\u0000\u0000\u14d8\u14dd\u0003\u025a\u012d\u0000\u14d9\u14da\u0005\u0006"+
		"\u0000\u0000\u14da\u14dc\u0003\u025a\u012d\u0000\u14db\u14d9\u0001\u0000"+
		"\u0000\u0000\u14dc\u14df\u0001\u0000\u0000\u0000\u14dd\u14db\u0001\u0000"+
		"\u0000\u0000\u14dd\u14de\u0001\u0000\u0000\u0000\u14de\u025f\u0001\u0000"+
		"\u0000\u0000\u14df\u14dd\u0001\u0000\u0000\u0000\u14e0\u14e1\u0005+\u0000"+
		"\u0000\u14e1\u14e4\u0003\u020c\u0106\u0000\u14e2\u14e4\u0001\u0000\u0000"+
		"\u0000\u14e3\u14e0\u0001\u0000\u0000\u0000\u14e3\u14e2\u0001\u0000\u0000"+
		"\u0000\u14e4\u0261\u0001\u0000\u0000\u0000\u14e5\u14e8\u0003\u020c\u0106"+
		"\u0000\u14e6\u14e8\u0001\u0000\u0000\u0000\u14e7\u14e5\u0001\u0000\u0000"+
		"\u0000\u14e7\u14e6\u0001\u0000\u0000\u0000\u14e8\u0263\u0001\u0000\u0000"+
		"\u0000\u14e9\u14ed\u0005%\u0000\u0000\u14ea\u14ed\u00057\u0000\u0000\u14eb"+
		"\u14ed\u0001\u0000\u0000\u0000\u14ec\u14e9\u0001\u0000\u0000\u0000\u14ec"+
		"\u14ea\u0001\u0000\u0000\u0000\u14ec\u14eb\u0001\u0000\u0000\u0000\u14ed"+
		"\u0265\u0001\u0000\u0000\u0000\u14ee\u14ef\u0005\u010a\u0000\u0000\u14ef"+
		"\u14f4\u0005\u00cf\u0000\u0000\u14f0\u14f1\u0005\u010a\u0000\u0000\u14f1"+
		"\u14f4\u0005\u00f0\u0000\u0000\u14f2\u14f4\u0001\u0000\u0000\u0000\u14f3"+
		"\u14ee\u0001\u0000\u0000\u0000\u14f3\u14f0\u0001\u0000\u0000\u0000\u14f3"+
		"\u14f2\u0001\u0000\u0000\u0000\u14f4\u0267\u0001\u0000\u0000\u0000\u14f5"+
		"\u14f6\u0005.\u0000\u0000\u14f6\u14f7\u0003\u026a\u0135\u0000\u14f7\u14f8"+
		"\u0007\u0016\u0000\u0000\u14f8\u14f9\u0003\u0544\u02a2\u0000\u14f9\u1503"+
		"\u0003\u0274\u013a\u0000\u14fa\u1501\u0005\u0135\u0000\u0000\u14fb\u1502"+
		"\u0003\u027e\u013f\u0000\u14fc\u14fd\u0005\\\u0000\u0000\u14fd\u14fe\u0005"+
		"\u0002\u0000\u0000\u14fe\u14ff\u0003\u029c\u014e\u0000\u14ff\u1500\u0005"+
		"\u0003\u0000\u0000\u1500\u1502\u0001\u0000\u0000\u0000\u1501\u14fb\u0001"+
		"\u0000\u0000\u0000\u1501\u14fc\u0001\u0000\u0000\u0000\u1502\u1504\u0001"+
		"\u0000\u0000\u0000\u1503\u14fa\u0001\u0000\u0000\u0000\u1503\u1504\u0001"+
		"\u0000\u0000\u0000\u1504\u1505\u0001\u0000\u0000\u0000\u1505\u1506\u0003"+
		"\u028e\u0147\u0000\u1506\u0269\u0001\u0000\u0000\u0000\u1507\u1508\u0005"+
		"R\u0000\u0000\u1508\u150b\u0005\u0130\u0000\u0000\u1509\u150b\u0001\u0000"+
		"\u0000\u0000\u150a\u1507\u0001\u0000\u0000\u0000\u150a\u1509\u0001\u0000"+
		"\u0000\u0000\u150b\u026b\u0001\u0000\u0000\u0000\u150c\u150e\u0005\u0002"+
		"\u0000\u0000\u150d\u150f\u0003\u026e\u0137\u0000\u150e\u150d\u0001\u0000"+
		"\u0000\u0000\u150e\u150f\u0001\u0000\u0000\u0000\u150f\u1510\u0001\u0000"+
		"\u0000\u0000\u1510\u1511\u0005\u0003\u0000\u0000\u1511\u026d\u0001\u0000"+
		"\u0000\u0000\u1512\u1517\u0003\u0278\u013c\u0000\u1513\u1514\u0005\u0006"+
		"\u0000\u0000\u1514\u1516\u0003\u0278\u013c\u0000\u1515\u1513\u0001\u0000"+
		"\u0000\u0000\u1516\u1519\u0001\u0000\u0000\u0000\u1517\u1515\u0001\u0000"+
		"\u0000\u0000\u1517\u1518\u0001\u0000\u0000\u0000\u1518\u026f\u0001\u0000"+
		"\u0000\u0000\u1519\u1517\u0001\u0000\u0000\u0000\u151a\u151f\u0003\u0272"+
		"\u0139\u0000\u151b\u151c\u0005\u0006\u0000\u0000\u151c\u151e\u0003\u0272"+
		"\u0139\u0000\u151d\u151b\u0001\u0000\u0000\u0000\u151e\u1521\u0001\u0000"+
		"\u0000\u0000\u151f\u151d\u0001\u0000\u0000\u0000\u151f\u1520\u0001\u0000"+
		"\u0000\u0000\u1520\u0271\u0001\u0000\u0000\u0000\u1521\u151f\u0001\u0000"+
		"\u0000\u0000\u1522\u1523\u0003\u0544\u02a2\u0000\u1523\u1524\u0003\u026c"+
		"\u0136\u0000\u1524\u152b\u0001\u0000\u0000\u0000\u1525\u152b\u0003\u0570"+
		"\u02b8\u0000\u1526\u1528\u0003\u055e\u02af\u0000\u1527\u1529\u0003\u052e"+
		"\u0297\u0000\u1528\u1527\u0001\u0000\u0000\u0000\u1528\u1529\u0001\u0000"+
		"\u0000\u0000\u1529\u152b\u0001\u0000\u0000\u0000\u152a\u1522\u0001\u0000"+
		"\u0000\u0000\u152a\u1525\u0001\u0000\u0000\u0000\u152a\u1526\u0001\u0000"+
		"\u0000\u0000\u152b\u0273\u0001\u0000\u0000\u0000\u152c\u152e\u0005\u0002"+
		"\u0000\u0000\u152d\u152f\u0003\u0276\u013b\u0000\u152e\u152d\u0001\u0000"+
		"\u0000\u0000\u152e\u152f\u0001\u0000\u0000\u0000\u152f\u1530\u0001\u0000"+
		"\u0000\u0000\u1530\u1531\u0005\u0003\u0000\u0000\u1531\u0275\u0001\u0000"+
		"\u0000\u0000\u1532\u1537\u0003\u0282\u0141\u0000\u1533\u1534\u0005\u0006"+
		"\u0000\u0000\u1534\u1536\u0003\u0282\u0141\u0000\u1535\u1533\u0001\u0000"+
		"\u0000\u0000\u1536\u1539\u0001\u0000\u0000\u0000\u1537\u1535\u0001\u0000"+
		"\u0000\u0000\u1537\u1538\u0001\u0000\u0000\u0000\u1538\u0277\u0001\u0000"+
		"\u0000\u0000\u1539\u1537\u0001\u0000\u0000\u0000\u153a\u153c\u0003\u027a"+
		"\u013d\u0000\u153b\u153d\u0003\u027c\u013e\u0000\u153c\u153b\u0001\u0000"+
		"\u0000\u0000\u153c\u153d\u0001\u0000\u0000\u0000\u153d\u153e\u0001\u0000"+
		"\u0000\u0000\u153e\u153f\u0003\u0280\u0140\u0000\u153f\u1548\u0001\u0000"+
		"\u0000\u0000\u1540\u1542\u0003\u027c\u013e\u0000\u1541\u1543\u0003\u027a"+
		"\u013d\u0000\u1542\u1541\u0001\u0000\u0000\u0000\u1542\u1543\u0001\u0000"+
		"\u0000\u0000\u1543\u1544\u0001\u0000\u0000\u0000\u1544\u1545\u0003\u0280"+
		"\u0140\u0000\u1545\u1548\u0001\u0000\u0000\u0000\u1546\u1548\u0003\u0280"+
		"\u0140\u0000\u1547\u153a\u0001\u0000\u0000\u0000\u1547\u1540\u0001\u0000"+
		"\u0000\u0000\u1547\u1546\u0001\u0000\u0000\u0000\u1548\u0279\u0001\u0000"+
		"\u0000\u0000\u1549\u154b\u0005D\u0000\u0000\u154a\u154c\u0005\u01c5\u0000"+
		"\u0000\u154b\u154a\u0001\u0000\u0000\u0000\u154b\u154c\u0001\u0000\u0000"+
		"\u0000\u154c\u1551\u0001\u0000\u0000\u0000\u154d\u1551\u0005\u01c5\u0000"+
		"\u0000\u154e\u1551\u0005\u0189\u0000\u0000\u154f\u1551\u0005e\u0000\u0000"+
		"\u1550\u1549\u0001\u0000\u0000\u0000\u1550\u154d\u0001\u0000\u0000\u0000"+
		"\u1550\u154e\u0001\u0000\u0000\u0000\u1550\u154f\u0001\u0000\u0000\u0000"+
		"\u1551\u027b\u0001\u0000\u0000\u0000\u1552\u1557\u0003\u0562\u02b1\u0000"+
		"\u1553\u1557\u0003\u0574\u02ba\u0000\u1554\u1557\u0005w\u0000\u0000\u1555"+
		"\u1557\u0005~\u0000\u0000\u1556\u1552\u0001\u0000\u0000\u0000\u1556\u1553"+
		"\u0001\u0000\u0000\u0000\u1556\u1554\u0001\u0000\u0000\u0000\u1556\u1555"+
		"\u0001\u0000\u0000\u0000\u1557\u027d\u0001\u0000\u0000\u0000\u1558\u1559"+
		"\u0003\u0280\u0140\u0000\u1559\u027f\u0001\u0000\u0000\u0000\u155a\u1569"+
		"\u0003\u0460\u0230\u0000\u155b\u155d\u0005\u0198\u0000\u0000\u155c\u155b"+
		"\u0001\u0000\u0000\u0000\u155c\u155d\u0001\u0000\u0000\u0000\u155d\u1562"+
		"\u0001\u0000\u0000\u0000\u155e\u1563\u0003\u0574\u02ba\u0000\u155f\u1563"+
		"\u0003\u0562\u02b1\u0000\u1560\u1563\u0005w\u0000\u0000\u1561\u1563\u0005"+
		"~\u0000\u0000\u1562\u155e\u0001\u0000\u0000\u0000\u1562\u155f\u0001\u0000"+
		"\u0000\u0000\u1562\u1560\u0001\u0000\u0000\u0000\u1562\u1561\u0001\u0000"+
		"\u0000\u0000\u1563\u1564\u0001\u0000\u0000\u0000\u1564\u1565\u0003\u020e"+
		"\u0107\u0000\u1565\u1566\u0005\u001b\u0000\u0000\u1566\u1567\u0005\u0161"+
		"\u0000\u0000\u1567\u1569\u0001\u0000\u0000\u0000\u1568\u155a\u0001\u0000"+
		"\u0000\u0000\u1568\u155c\u0001\u0000\u0000\u0000\u1569\u0281\u0001\u0000"+
		"\u0000\u0000\u156a\u156d\u0003\u0278\u013c\u0000\u156b\u156c\u0007\u001a"+
		"\u0000\u0000\u156c\u156e\u0003\u048c\u0246\u0000\u156d\u156b\u0001\u0000"+
		"\u0000\u0000\u156d\u156e\u0001\u0000\u0000\u0000\u156e\u0283\u0001\u0000"+
		"\u0000\u0000\u156f\u1570\u0003\u0278\u013c\u0000\u1570\u0285\u0001\u0000"+
		"\u0000\u0000\u1571\u157c\u0005\u0002\u0000\u0000\u1572\u157d\u0005\t\u0000"+
		"\u0000\u1573\u157d\u0003\u0288\u0144\u0000\u1574\u1575\u0005S\u0000\u0000"+
		"\u1575\u1576\u0005\u0093\u0000\u0000\u1576\u157d\u0003\u0288\u0144\u0000"+
		"\u1577\u1578\u0003\u0288\u0144\u0000\u1578\u1579\u0005S\u0000\u0000\u1579"+
		"\u157a\u0005\u0093\u0000\u0000\u157a\u157b\u0003\u0288\u0144\u0000\u157b"+
		"\u157d\u0001\u0000\u0000\u0000\u157c\u1572\u0001\u0000\u0000\u0000\u157c"+
		"\u1573\u0001\u0000\u0000\u0000\u157c\u1574\u0001\u0000\u0000\u0000\u157c"+
		"\u1577\u0001\u0000\u0000\u0000\u157d\u157e\u0001\u0000\u0000\u0000\u157e"+
		"\u157f\u0005\u0003\u0000\u0000\u157f\u0287\u0001\u0000\u0000\u0000\u1580"+
		"\u1585\u0003\u0284\u0142\u0000\u1581\u1582\u0005\u0006\u0000\u0000\u1582"+
		"\u1584\u0003\u0284\u0142\u0000\u1583\u1581\u0001\u0000\u0000\u0000\u1584"+
		"\u1587\u0001\u0000\u0000\u0000\u1585\u1583\u0001\u0000\u0000\u0000\u1585"+
		"\u1586\u0001\u0000\u0000\u0000\u1586\u0289\u0001\u0000\u0000\u0000\u1587"+
		"\u1585\u0001\u0000\u0000\u0000\u1588\u1589\u0003\u0544\u02a2\u0000\u1589"+
		"\u158a\u0003\u0286\u0143\u0000\u158a\u028b\u0001\u0000\u0000\u0000\u158b"+
		"\u1590\u0003\u028a\u0145\u0000\u158c\u158d\u0005\u0006\u0000\u0000\u158d"+
		"\u158f\u0003\u028a\u0145\u0000\u158e\u158c\u0001\u0000\u0000\u0000\u158f"+
		"\u1592\u0001\u0000\u0000\u0000\u1590\u158e\u0001\u0000\u0000\u0000\u1590"+
		"\u1591\u0001\u0000\u0000\u0000\u1591\u028d\u0001\u0000\u0000\u0000\u1592"+
		"\u1590\u0001\u0000\u0000\u0000\u1593\u1595\u0003\u0292\u0149\u0000\u1594"+
		"\u1593\u0001\u0000\u0000\u0000\u1595\u1596\u0001\u0000\u0000\u0000\u1596"+
		"\u1594\u0001\u0000\u0000\u0000\u1596\u1597\u0001\u0000\u0000\u0000\u1597"+
		"\u1598\u0001\u0000\u0000\u0000\u1598\u1599\u0006\u0147\uffff\uffff\u0000"+
		"\u1599\u028f\u0001\u0000\u0000\u0000\u159a\u159b\u0005\u0095\u0000\u0000"+
		"\u159b\u159c\u0005P\u0000\u0000\u159c\u159d\u0005N\u0000\u0000\u159d\u15be"+
		"\u0005\u01ca\u0000\u0000\u159e\u159f\u0005\u0135\u0000\u0000\u159f\u15a0"+
		"\u0005N\u0000\u0000\u15a0\u15a1\u0005P\u0000\u0000\u15a1\u15a2\u0005N"+
		"\u0000\u0000\u15a2\u15be\u0005\u01ca\u0000\u0000\u15a3\u15be\u0005\u0153"+
		"\u0000\u0000\u15a4\u15be\u0005\u00de\u0000\u0000\u15a5\u15be\u0005\u014b"+
		"\u0000\u0000\u15a6\u15be\u0005\u0172\u0000\u0000\u15a7\u15a8\u0005\u00cd"+
		"\u0000\u0000\u15a8\u15a9\u0005\u0140\u0000\u0000\u15a9\u15be\u0005\u00b5"+
		"\u0000\u0000\u15aa\u15ab\u0005\u00cd\u0000\u0000\u15ab\u15ac\u0005\u0140"+
		"\u0000\u0000\u15ac\u15be\u0005\u00ea\u0000\u0000\u15ad\u15ae\u0005\u0140"+
		"\u0000\u0000\u15ae\u15be\u0005\u00b5\u0000\u0000\u15af\u15b0\u0005\u0140"+
		"\u0000\u0000\u15b0\u15be\u0005\u00ea\u0000\u0000\u15b1\u15be\u0005\u00f1"+
		"\u0000\u0000\u15b2\u15b3\u0005M\u0000\u0000\u15b3\u15be\u0005\u00f1\u0000"+
		"\u0000\u15b4\u15b5\u0005\u00aa\u0000\u0000\u15b5\u15be\u0003\u0124\u0092"+
		"\u0000\u15b6\u15b7\u0005\u0139\u0000\u0000\u15b7\u15be\u0003\u0124\u0092"+
		"\u0000\u15b8\u15b9\u0005\u01cb\u0000\u0000\u15b9\u15be\u0003\u020c\u0106"+
		"\u0000\u15ba\u15be\u0003R)\u0000\u15bb\u15bc\u0005\u01cc\u0000\u0000\u15bc"+
		"\u15be\u0003\u055e\u02af\u0000\u15bd\u159a\u0001\u0000\u0000\u0000\u15bd"+
		"\u159e\u0001\u0000\u0000\u0000\u15bd\u15a3\u0001\u0000\u0000\u0000\u15bd"+
		"\u15a4\u0001\u0000\u0000\u0000\u15bd\u15a5\u0001\u0000\u0000\u0000\u15bd"+
		"\u15a6\u0001\u0000\u0000\u0000\u15bd\u15a7\u0001\u0000\u0000\u0000\u15bd"+
		"\u15aa\u0001\u0000\u0000\u0000\u15bd\u15ad\u0001\u0000\u0000\u0000\u15bd"+
		"\u15af\u0001\u0000\u0000\u0000\u15bd\u15b1\u0001\u0000\u0000\u0000\u15bd"+
		"\u15b2\u0001\u0000\u0000\u0000\u15bd\u15b4\u0001\u0000\u0000\u0000\u15bd"+
		"\u15b6\u0001\u0000\u0000\u0000\u15bd\u15b8\u0001\u0000\u0000\u0000\u15bd"+
		"\u15ba\u0001\u0000\u0000\u0000\u15bd\u15bb\u0001\u0000\u0000\u0000\u15be"+
		"\u0291\u0001\u0000\u0000\u0000\u15bf\u15c0\u0005$\u0000\u0000\u15c0\u15c8"+
		"\u0003\u0294\u014a\u0000\u15c1\u15c2\u0005\u00ee\u0000\u0000\u15c2\u15c8"+
		"\u0003H$\u0000\u15c3\u15c4\u0005\u01bb\u0000\u0000\u15c4\u15c8\u0003\u0296"+
		"\u014b\u0000\u15c5\u15c8\u0005h\u0000\u0000\u15c6\u15c8\u0003\u0290\u0148"+
		"\u0000\u15c7\u15bf\u0001\u0000\u0000\u0000\u15c7\u15c1\u0001\u0000\u0000"+
		"\u0000\u15c7\u15c3\u0001\u0000\u0000\u0000\u15c7\u15c5\u0001\u0000\u0000"+
		"\u0000\u15c7\u15c6\u0001\u0000\u0000\u0000\u15c8\u0293\u0001\u0000\u0000"+
		"\u0000\u15c9\u15cf\u0003\u0550\u02a8\u0000\u15ca\u15cb\u0003\u0550\u02a8"+
		"\u0000\u15cb\u15cc\u0005\u0006\u0000\u0000\u15cc\u15cd\u0003\u0550\u02a8"+
		"\u0000\u15cd\u15cf\u0001\u0000\u0000\u0000\u15ce\u15c9\u0001\u0000\u0000"+
		"\u0000\u15ce\u15ca\u0001\u0000\u0000\u0000\u15cf\u0295\u0001\u0000\u0000"+
		"\u0000\u15d0\u15d1\u0005>\u0000\u0000\u15d1\u15d2\u0005\u0161\u0000\u0000"+
		"\u15d2\u15d9\u0003\u0460\u0230\u0000\u15d3\u15d4\u0005\u0006\u0000\u0000"+
		"\u15d4\u15d5\u0005>\u0000\u0000\u15d5\u15d6\u0005\u0161\u0000\u0000\u15d6"+
		"\u15d8\u0003\u0460\u0230\u0000\u15d7\u15d3\u0001\u0000\u0000\u0000\u15d8"+
		"\u15db\u0001\u0000\u0000\u0000\u15d9\u15d7\u0001\u0000\u0000\u0000\u15d9"+
		"\u15da\u0001\u0000\u0000\u0000\u15da\u0297\u0001\u0000\u0000\u0000\u15db"+
		"\u15d9\u0001\u0000\u0000\u0000\u15dc\u15dd\u0005i\u0000\u0000\u15dd\u15e0"+
		"\u0003\u01cc\u00e6\u0000\u15de\u15e0\u0001\u0000\u0000\u0000\u15df\u15dc"+
		"\u0001\u0000\u0000\u0000\u15df\u15de\u0001\u0000\u0000\u0000\u15e0\u0299"+
		"\u0001\u0000\u0000\u0000\u15e1\u15e2\u0003\u027c\u013e\u0000\u15e2\u15e3"+
		"\u0003\u0280\u0140\u0000\u15e3\u029b\u0001\u0000\u0000\u0000\u15e4\u15e9"+
		"\u0003\u029a\u014d\u0000\u15e5\u15e6\u0005\u0006\u0000\u0000\u15e6\u15e8"+
		"\u0003\u029a\u014d\u0000\u15e7\u15e5\u0001\u0000\u0000\u0000\u15e8\u15eb"+
		"\u0001\u0000\u0000\u0000\u15e9\u15e7\u0001\u0000\u0000\u0000\u15e9\u15ea"+
		"\u0001\u0000\u0000\u0000\u15ea\u029d\u0001\u0000\u0000\u0000\u15eb\u15e9"+
		"\u0001\u0000\u0000\u0000\u15ec\u15ed\u0005\u008a\u0000\u0000\u15ed\u15ee"+
		"\u0007\u001b\u0000\u0000\u15ee\u15ef\u0003\u0272\u0139\u0000\u15ef\u15f0"+
		"\u0003\u02a0\u0150\u0000\u15f0\u15f1\u0003\u02a2\u0151\u0000\u15f1\u029f"+
		"\u0001\u0000\u0000\u0000\u15f2\u15f4\u0003\u0290\u0148\u0000\u15f3\u15f2"+
		"\u0001\u0000\u0000\u0000\u15f4\u15f5\u0001\u0000\u0000\u0000\u15f5\u15f3"+
		"\u0001\u0000\u0000\u0000\u15f5\u15f6\u0001\u0000\u0000\u0000\u15f6\u02a1"+
		"\u0001\u0000\u0000\u0000\u15f7\u15fa\u0005\u0134\u0000\u0000\u15f8\u15fa"+
		"\u0001\u0000\u0000\u0000\u15f9\u15f7\u0001\u0000\u0000\u0000\u15f9\u15f8"+
		"\u0001\u0000\u0000\u0000\u15fa\u02a3\u0001\u0000\u0000\u0000\u15fb\u15fc"+
		"\u0005\u00bf\u0000\u0000\u15fc\u15fd\u0005\u00d3\u0000\u0000\u15fd\u15fe"+
		"\u0003\u0270\u0138\u0000\u15fe\u15ff\u0003l6\u0000\u15ff\u1620\u0001\u0000"+
		"\u0000\u0000\u1600\u1601\u0005\u00bf\u0000\u0000\u1601\u1602\u0005\u00d3"+
		"\u0000\u0000\u1602\u1603\u0005\u00dc\u0000\u0000\u1603\u1604\u0005\u0185"+
		"\u0000\u0000\u1604\u1605\u0003\u0270\u0138\u0000\u1605\u1606\u0003l6\u0000"+
		"\u1606\u1620\u0001\u0000\u0000\u0000\u1607\u1608\u0005\u00bf\u0000\u0000"+
		"\u1608\u1609\u0005\u0121\u0000\u0000\u1609\u160a\u0003\u0270\u0138\u0000"+
		"\u160a\u160b\u0003l6\u0000\u160b\u1620\u0001\u0000\u0000\u0000\u160c\u160d"+
		"\u0005\u00bf\u0000\u0000\u160d\u160e\u0005\u0121\u0000\u0000\u160e\u160f"+
		"\u0005\u00dc\u0000\u0000\u160f\u1610\u0005\u0185\u0000\u0000\u1610\u1611"+
		"\u0003\u0270\u0138\u0000\u1611\u1612\u0003l6\u0000\u1612\u1620\u0001\u0000"+
		"\u0000\u0000\u1613\u1614\u0005\u00bf\u0000\u0000\u1614\u1615\u0005\u01ba"+
		"\u0000\u0000\u1615\u1616\u0003\u0270\u0138\u0000\u1616\u1617\u0003l6\u0000"+
		"\u1617\u1620\u0001\u0000\u0000\u0000\u1618\u1619\u0005\u00bf\u0000\u0000"+
		"\u1619\u161a\u0005\u01ba\u0000\u0000\u161a\u161b\u0005\u00dc\u0000\u0000"+
		"\u161b\u161c\u0005\u0185\u0000\u0000\u161c\u161d\u0003\u0270\u0138\u0000"+
		"\u161d\u161e\u0003l6\u0000\u161e\u1620\u0001\u0000\u0000\u0000\u161f\u15fb"+
		"\u0001\u0000\u0000\u0000\u161f\u1600\u0001\u0000\u0000\u0000\u161f\u1607"+
		"\u0001\u0000\u0000\u0000\u161f\u160c\u0001\u0000\u0000\u0000\u161f\u1613"+
		"\u0001\u0000\u0000\u0000\u161f\u1618\u0001\u0000\u0000\u0000\u1620\u02a5"+
		"\u0001\u0000\u0000\u0000\u1621\u1622\u0005\u00bf\u0000\u0000\u1622\u1623"+
		"\u0005\u0088\u0000\u0000\u1623\u1624\u0003\u028c\u0146\u0000\u1624\u1625"+
		"\u0003l6\u0000\u1625\u162e\u0001\u0000\u0000\u0000\u1626\u1627\u0005\u00bf"+
		"\u0000\u0000\u1627\u1628\u0005\u0088\u0000\u0000\u1628\u1629\u0005\u00dc"+
		"\u0000\u0000\u1629\u162a\u0005\u0185\u0000\u0000\u162a\u162b\u0003\u028c"+
		"\u0146\u0000\u162b\u162c\u0003l6\u0000\u162c\u162e\u0001\u0000\u0000\u0000"+
		"\u162d\u1621\u0001\u0000\u0000\u0000\u162d\u1626\u0001\u0000\u0000\u0000"+
		"\u162e\u02a7\u0001\u0000\u0000\u0000\u162f\u1630\u0005\u00bf\u0000\u0000"+
		"\u1630\u1631\u0005\u010f\u0000\u0000\u1631\u1632\u0003\u02ae\u0157\u0000"+
		"\u1632\u1633\u0003l6\u0000\u1633\u163c\u0001\u0000\u0000\u0000\u1634\u1635"+
		"\u0005\u00bf\u0000\u0000\u1635\u1636\u0005\u010f\u0000\u0000\u1636\u1637"+
		"\u0005\u00dc\u0000\u0000\u1637\u1638\u0005\u0185\u0000\u0000\u1638\u1639"+
		"\u0003\u02ae\u0157\u0000\u1639\u163a\u0003l6\u0000\u163a\u163c\u0001\u0000"+
		"\u0000\u0000\u163b\u162f\u0001\u0000\u0000\u0000\u163b\u1634\u0001\u0000"+
		"\u0000\u0000\u163c\u02a9\u0001\u0000\u0000\u0000\u163d\u163e\u0005\u0002"+
		"\u0000\u0000\u163e\u163f\u0003\u0460\u0230\u0000\u163f\u1640\u0005\u0003"+
		"\u0000\u0000\u1640\u1654\u0001\u0000\u0000\u0000\u1641\u1642\u0005\u0002"+
		"\u0000\u0000\u1642\u1643\u0003\u0460\u0230\u0000\u1643\u1644\u0005\u0006"+
		"\u0000\u0000\u1644\u1645\u0003\u0460\u0230\u0000\u1645\u1646\u0005\u0003"+
		"\u0000\u0000\u1646\u1654\u0001\u0000\u0000\u0000\u1647\u1648\u0005\u0002"+
		"\u0000\u0000\u1648\u1649\u0005\u0190\u0000\u0000\u1649\u164a\u0005\u0006"+
		"\u0000\u0000\u164a\u164b\u0003\u0460\u0230\u0000\u164b\u164c\u0005\u0003"+
		"\u0000\u0000\u164c\u1654\u0001\u0000\u0000\u0000\u164d\u164e\u0005\u0002"+
		"\u0000\u0000\u164e\u164f\u0003\u0460\u0230\u0000\u164f\u1650\u0005\u0006"+
		"\u0000\u0000\u1650\u1651\u0005\u0190\u0000\u0000\u1651\u1652\u0005\u0003"+
		"\u0000\u0000\u1652\u1654\u0001\u0000\u0000\u0000\u1653\u163d\u0001\u0000"+
		"\u0000\u0000\u1653\u1641\u0001\u0000\u0000\u0000\u1653\u1647\u0001\u0000"+
		"\u0000\u0000\u1653\u164d\u0001\u0000\u0000\u0000\u1654\u02ab\u0001\u0000"+
		"\u0000\u0000\u1655\u1656\u0003\u055e\u02af\u0000\u1656\u1657\u0005\u000b"+
		"\u0000\u0000\u1657\u1659\u0001\u0000\u0000\u0000\u1658\u1655\u0001\u0000"+
		"\u0000\u0000\u1659\u165c\u0001\u0000\u0000\u0000\u165a\u1658\u0001\u0000"+
		"\u0000\u0000\u165a\u165b\u0001\u0000\u0000\u0000\u165b\u165d\u0001\u0000"+
		"\u0000\u0000\u165c\u165a\u0001\u0000\u0000\u0000\u165d\u165e\u0003\u04f8"+
		"\u027c\u0000\u165e\u02ad\u0001\u0000\u0000\u0000\u165f\u1664\u0003\u02b0"+
		"\u0158\u0000\u1660\u1661\u0005\u0006\u0000\u0000\u1661\u1663\u0003\u02b0"+
		"\u0158\u0000\u1662\u1660\u0001\u0000\u0000\u0000\u1663\u1666\u0001\u0000"+
		"\u0000\u0000\u1664\u1662\u0001\u0000\u0000\u0000\u1664\u1665\u0001\u0000"+
		"\u0000\u0000\u1665\u02af\u0001\u0000\u0000\u0000\u1666\u1664\u0001\u0000"+
		"\u0000\u0000\u1667\u1668\u0003\u02ac\u0156\u0000\u1668\u1669\u0003\u02aa"+
		"\u0155\u0000\u1669\u02b1\u0001\u0000\u0000\u0000\u166a\u166b\u00059\u0000"+
		"\u0000\u166b\u166c\u0003\u02b4\u015a\u0000\u166c\u02b3\u0001\u0000\u0000"+
		"\u0000\u166d\u166f\u0003\u02b6\u015b\u0000\u166e\u166d\u0001\u0000\u0000"+
		"\u0000\u166f\u1670\u0001\u0000\u0000\u0000\u1670\u166e\u0001\u0000\u0000"+
		"\u0000\u1670\u1671\u0001\u0000\u0000\u0000\u1671\u02b5\u0001\u0000\u0000"+
		"\u0000\u1672\u1676\u0003\u0550\u02a8\u0000\u1673\u1674\u0005\u00ee\u0000"+
		"\u0000\u1674\u1676\u0003H$\u0000\u1675\u1672\u0001\u0000\u0000\u0000\u1675"+
		"\u1673\u0001\u0000\u0000\u0000\u1676\u02b7\u0001\u0000\u0000\u0000\u1677"+
		"\u1678\u0005.\u0000\u0000\u1678\u1679\u0005)\u0000\u0000\u1679\u167a\u0005"+
		"\u0002\u0000\u0000\u167a\u167b\u0003\u0460\u0230\u0000\u167b\u167c\u0005"+
		"$\u0000\u0000\u167c\u167d\u0003\u0460\u0230\u0000\u167d\u167e\u0005\u0003"+
		"\u0000\u0000\u167e\u167f\u0005i\u0000\u0000\u167f\u1680\u0005\u00d3\u0000"+
		"\u0000\u1680\u1681\u0003\u0272\u0139\u0000\u1681\u1682\u0003\u02ba\u015d"+
		"\u0000\u1682\u169a\u0001\u0000\u0000\u0000\u1683\u1684\u0005.\u0000\u0000"+
		"\u1684\u1685\u0005)\u0000\u0000\u1685\u1686\u0005\u0002\u0000\u0000\u1686"+
		"\u1687\u0003\u0460\u0230\u0000\u1687\u1688\u0005$\u0000\u0000\u1688\u1689"+
		"\u0003\u0460\u0230\u0000\u1689\u168a\u0005\u0003\u0000\u0000\u168a\u168b"+
		"\u0005\u0174\u0000\u0000\u168b\u168c\u0005\u00d3\u0000\u0000\u168c\u168d"+
		"\u0003\u02ba\u015d\u0000\u168d\u169a\u0001\u0000\u0000\u0000\u168e\u168f"+
		"\u0005.\u0000\u0000\u168f\u1690\u0005)\u0000\u0000\u1690\u1691\u0005\u0002"+
		"\u0000\u0000\u1691\u1692\u0003\u0460\u0230\u0000\u1692\u1693\u0005$\u0000"+
		"\u0000\u1693\u1694\u0003\u0460\u0230\u0000\u1694\u1695\u0005\u0003\u0000"+
		"\u0000\u1695\u1696\u0005i\u0000\u0000\u1696\u1697\u0005\u0189\u0000\u0000"+
		"\u1697\u1698\u0003\u02ba\u015d\u0000\u1698\u169a\u0001\u0000\u0000\u0000"+
		"\u1699\u1677\u0001\u0000\u0000\u0000\u1699\u1683\u0001\u0000\u0000\u0000"+
		"\u1699\u168e\u0001\u0000\u0000\u0000\u169a\u02b9\u0001\u0000\u0000\u0000"+
		"\u169b\u169c\u0005$\u0000\u0000\u169c\u16a1\u0005\u00df\u0000\u0000\u169d"+
		"\u169e\u0005$\u0000\u0000\u169e\u16a1\u0005\u008d\u0000\u0000\u169f\u16a1"+
		"\u0001\u0000\u0000\u0000\u16a0\u169b\u0001\u0000\u0000\u0000\u16a0\u169d"+
		"\u0001\u0000\u0000\u0000\u16a0\u169f\u0001\u0000\u0000\u0000\u16a1\u02bb"+
		"\u0001\u0000\u0000\u0000\u16a2\u16a3\u0005\u00bf\u0000\u0000\u16a3\u16a4"+
		"\u0005)\u0000\u0000\u16a4\u16a5\u0003\u02be\u015f\u0000\u16a5\u16a6\u0005"+
		"\u0002\u0000\u0000\u16a6\u16a7\u0003\u0460\u0230\u0000\u16a7\u16a8\u0005"+
		"$\u0000\u0000\u16a8\u16a9\u0003\u0460\u0230\u0000\u16a9\u16aa\u0005\u0003"+
		"\u0000\u0000\u16aa\u16ab\u0003l6\u0000\u16ab\u02bd\u0001\u0000\u0000\u0000"+
		"\u16ac\u16ad\u0005\u00dc\u0000\u0000\u16ad\u16b0\u0005\u0185\u0000\u0000"+
		"\u16ae\u16b0\u0001\u0000\u0000\u0000\u16af\u16ac\u0001\u0000\u0000\u0000"+
		"\u16af\u16ae\u0001\u0000\u0000\u0000\u16b0\u02bf\u0001\u0000\u0000\u0000"+
		"\u16b1\u16b2\u0005.\u0000\u0000\u16b2\u16b3\u0003\u026a\u0135\u0000\u16b3"+
		"\u16b4\u0005\u01bb\u0000\u0000\u16b4\u16b5\u0005>\u0000\u0000\u16b5\u16b6"+
		"\u0003\u0460\u0230\u0000\u16b6\u16b7\u0005\u00ee\u0000\u0000\u16b7\u16b8"+
		"\u0003\u053e\u029f\u0000\u16b8\u16b9\u0005\u0002\u0000\u0000\u16b9\u16ba"+
		"\u0003\u02c2\u0161\u0000\u16ba\u16bb\u0005\u0003\u0000\u0000\u16bb\u02c1"+
		"\u0001\u0000\u0000\u0000\u16bc\u16bd\u0005@\u0000\u0000\u16bd\u16be\u0005"+
		"\u01cd\u0000\u0000\u16be\u16bf\u0005i\u0000\u0000\u16bf\u16c0\u0005\u00d3"+
		"\u0000\u0000\u16c0\u16c1\u0003\u0272\u0139\u0000\u16c1\u16c2\u0005\u0006"+
		"\u0000\u0000\u16c2\u16c3\u0005^\u0000\u0000\u16c3\u16c4\u0005\u01cd\u0000"+
		"\u0000\u16c4\u16c5\u0005i\u0000\u0000\u16c5\u16c6\u0005\u00d3\u0000\u0000"+
		"\u16c6\u16c7\u0003\u0272\u0139\u0000\u16c7\u16df\u0001\u0000\u0000\u0000"+
		"\u16c8\u16c9\u0005^\u0000\u0000\u16c9\u16ca\u0005\u01cd\u0000\u0000\u16ca"+
		"\u16cb\u0005i\u0000\u0000\u16cb\u16cc\u0005\u00d3\u0000\u0000\u16cc\u16cd"+
		"\u0003\u0272\u0139\u0000\u16cd\u16ce\u0005\u0006\u0000\u0000\u16ce\u16cf"+
		"\u0005@\u0000\u0000\u16cf\u16d0\u0005\u01cd\u0000\u0000\u16d0\u16d1\u0005"+
		"i\u0000\u0000\u16d1\u16d2\u0005\u00d3\u0000\u0000\u16d2\u16d3\u0003\u0272"+
		"\u0139\u0000\u16d3\u16df\u0001\u0000\u0000\u0000\u16d4\u16d5\u0005@\u0000"+
		"\u0000\u16d5\u16d6\u0005\u01cd\u0000\u0000\u16d6\u16d7\u0005i\u0000\u0000"+
		"\u16d7\u16d8\u0005\u00d3\u0000\u0000\u16d8\u16df\u0003\u0272\u0139\u0000"+
		"\u16d9\u16da\u0005^\u0000\u0000\u16da\u16db\u0005\u01cd\u0000\u0000\u16db"+
		"\u16dc\u0005i\u0000\u0000\u16dc\u16dd\u0005\u00d3\u0000\u0000\u16dd\u16df"+
		"\u0003\u0272\u0139\u0000\u16de\u16bc\u0001\u0000\u0000\u0000\u16de\u16c8"+
		"\u0001\u0000\u0000\u0000\u16de\u16d4\u0001\u0000\u0000\u0000\u16de\u16d9"+
		"\u0001\u0000\u0000\u0000\u16df\u02c3\u0001\u0000\u0000\u0000\u16e0\u16e1"+
		"\u0005\u00bf\u0000\u0000\u16e1\u16e2\u0005\u01bb\u0000\u0000\u16e2\u16e3"+
		"\u0003\u02be\u015f\u0000\u16e3\u16e4\u0005>\u0000\u0000\u16e4\u16e5\u0003"+
		"\u0460\u0230\u0000\u16e5\u16e6\u0005\u00ee\u0000\u0000\u16e6\u16e7\u0003"+
		"\u053e\u029f\u0000\u16e7\u16e8\u0003l6\u0000\u16e8\u02c5\u0001\u0000\u0000"+
		"\u0000\u16e9\u16ea\u0005\u012b\u0000\u0000\u16ea\u16eb\u0003\u02c8\u0164"+
		"\u0000\u16eb\u16ec\u0003\u0250\u0128\u0000\u16ec\u16ed\u0003\u053a\u029d"+
		"\u0000\u16ed\u1704\u0001\u0000\u0000\u0000\u16ee\u16ef\u0005\u012b\u0000"+
		"\u0000\u16ef\u16f0\u0003\u02ca\u0165\u0000\u16f0\u16f1\u0003\u0250\u0128"+
		"\u0000\u16f1\u16f2\u0003\u053e\u029f\u0000\u16f2\u1704\u0001\u0000\u0000"+
		"\u0000\u16f3\u16f4\u0005\u012b\u0000\u0000\u16f4\u16f5\u0005\u0002\u0000"+
		"\u0000\u16f5\u16f6\u0003\u02cc\u0166\u0000\u16f6\u16f7\u0005\u0003\u0000"+
		"\u0000\u16f7\u16f8\u0003\u02c8\u0164\u0000\u16f8\u16f9\u0003\u0250\u0128"+
		"\u0000\u16f9\u16fa\u0003\u053a\u029d\u0000\u16fa\u1704\u0001\u0000\u0000"+
		"\u0000\u16fb\u16fc\u0005\u012b\u0000\u0000\u16fc\u16fd\u0005\u0002\u0000"+
		"\u0000\u16fd\u16fe\u0003\u02cc\u0166\u0000\u16fe\u16ff\u0005\u0003\u0000"+
		"\u0000\u16ff\u1700\u0003\u02ca\u0165\u0000\u1700\u1701\u0003\u0250\u0128"+
		"\u0000\u1701\u1702\u0003\u053e\u029f\u0000\u1702\u1704\u0001\u0000\u0000"+
		"\u0000\u1703\u16e9\u0001\u0000\u0000\u0000\u1703\u16ee\u0001\u0000\u0000"+
		"\u0000\u1703\u16f3\u0001\u0000\u0000\u0000\u1703\u16fb\u0001\u0000\u0000"+
		"\u0000\u1704\u02c7\u0001\u0000\u0000\u0000\u1705\u1706\u0007\u0012\u0000"+
		"\u0000\u1706\u02c9\u0001\u0000\u0000\u0000\u1707\u1708\u0007\u001c\u0000"+
		"\u0000\u1708\u02cb\u0001\u0000\u0000\u0000\u1709\u170e\u0003\u02ce\u0167"+
		"\u0000\u170a\u170b\u0005\u0006\u0000\u0000\u170b\u170d\u0003\u02ce\u0167"+
		"\u0000\u170c\u170a\u0001\u0000\u0000\u0000\u170d\u1710\u0001\u0000\u0000"+
		"\u0000\u170e\u170c\u0001\u0000\u0000\u0000\u170e\u170f\u0001\u0000\u0000"+
		"\u0000\u170f\u02cd\u0001\u0000\u0000\u0000\u1710\u170e\u0001\u0000\u0000"+
		"\u0000\u1711\u1712\u0005\u0080\u0000\u0000\u1712\u02cf\u0001\u0000\u0000"+
		"\u0000\u1713\u1714\u0005\u008a\u0000\u0000\u1714\u1715\u0005\u0158\u0000"+
		"\u0000\u1715\u1716\u0003\u053e\u029f\u0000\u1716\u1717\u0005\u0146\u0000"+
		"\u0000\u1717\u1718\u0003t:\u0000\u1718\u1720\u0001\u0000\u0000\u0000\u1719"+
		"\u171a\u0005\u008a\u0000\u0000\u171a\u171b\u0005\u0158\u0000\u0000\u171b"+
		"\u171c\u0003\u053e\u029f\u0000\u171c\u171d\u0005\u0132\u0000\u0000\u171d"+
		"\u171e\u0003t:\u0000\u171e\u1720\u0001\u0000\u0000\u0000\u171f\u1713\u0001"+
		"\u0000\u0000\u0000\u171f\u1719\u0001\u0000\u0000\u0000\u1720\u02d1\u0001"+
		"\u0000\u0000\u0000\u1721\u1722\u0005\u008a\u0000\u0000\u1722\u1723\u0005"+
		"\u0088\u0000\u0000\u1723\u1724\u0003\u028a\u0145\u0000\u1724\u1725\u0005"+
		"\u012e\u0000\u0000\u1725\u1726\u0005^\u0000\u0000\u1726\u1727\u0003\u053e"+
		"\u029f\u0000\u1727\u18f6\u0001\u0000\u0000\u0000\u1728\u1729\u0005\u008a"+
		"\u0000\u0000\u1729\u172a\u0005l\u0000\u0000\u172a\u172b\u0003\u020c\u0106"+
		"\u0000\u172b\u172c\u0005\u012e\u0000\u0000\u172c\u172d\u0005^\u0000\u0000"+
		"\u172d\u172e\u0003\u053e\u029f\u0000\u172e\u18f6\u0001\u0000\u0000\u0000"+
		"\u172f\u1730\u0005\u008a\u0000\u0000\u1730\u1731\u0005\u00a8\u0000\u0000"+
		"\u1731\u1732\u0003\u020c\u0106\u0000\u1732\u1733\u0005\u012e\u0000\u0000"+
		"\u1733\u1734\u0005^\u0000\u0000\u1734\u1735\u0003\u053e\u029f\u0000\u1735"+
		"\u18f6\u0001\u0000\u0000\u0000\u1736\u1737\u0005\u008a\u0000\u0000\u1737"+
		"\u1738\u0005\u00af\u0000\u0000\u1738\u1739\u0003\u053e\u029f\u0000\u1739"+
		"\u173a\u0005\u012e\u0000\u0000\u173a\u173b\u0005^\u0000\u0000\u173b\u173c"+
		"\u0003\u053e\u029f\u0000\u173c\u18f6\u0001\u0000\u0000\u0000\u173d\u173e"+
		"\u0005\u008a\u0000\u0000\u173e\u173f\u0005\u00bd\u0000\u0000\u173f\u1740"+
		"\u0003\u020c\u0106\u0000\u1740\u1741\u0005\u012e\u0000\u0000\u1741\u1742"+
		"\u0005^\u0000\u0000\u1742\u1743\u0003\u053e\u029f\u0000\u1743\u18f6\u0001"+
		"\u0000\u0000\u0000\u1744\u1745\u0005\u008a\u0000\u0000\u1745\u1746\u0005"+
		"\u00bd\u0000\u0000\u1746\u1747\u0003\u020c\u0106\u0000\u1747\u1748\u0005"+
		"\u012e\u0000\u0000\u1748\u1749\u0005-\u0000\u0000\u1749\u174a\u0003\u053e"+
		"\u029f\u0000\u174a\u174b\u0005^\u0000\u0000\u174b\u174c\u0003\u053e\u029f"+
		"\u0000\u174c\u18f6\u0001\u0000\u0000\u0000\u174d\u174e\u0005\u008a\u0000"+
		"\u0000\u174e\u174f\u0005?\u0000\u0000\u174f\u1750\u0005\u00ae\u0000\u0000"+
		"\u1750\u1751\u0005\u0176\u0000\u0000\u1751\u1752\u0003\u053e\u029f\u0000"+
		"\u1752\u1753\u0005\u012e\u0000\u0000\u1753\u1754\u0005^\u0000\u0000\u1754"+
		"\u1755\u0003\u053e\u029f\u0000\u1755\u18f6\u0001\u0000\u0000\u0000\u1756"+
		"\u1757\u0005\u008a\u0000\u0000\u1757\u1758\u0005\u00d3\u0000\u0000\u1758"+
		"\u1759\u0003\u0272\u0139\u0000\u1759\u175a\u0005\u012e\u0000\u0000\u175a"+
		"\u175b\u0005^\u0000\u0000\u175b\u175c\u0003\u053e\u029f\u0000\u175c\u18f6"+
		"\u0001\u0000\u0000\u0000\u175d\u175e\u0005\u008a\u0000\u0000\u175e\u175f"+
		"\u0005B\u0000\u0000\u175f\u1760\u0003\u0558\u02ac\u0000\u1760\u1761\u0005"+
		"\u012e\u0000\u0000\u1761\u1762\u0005^\u0000\u0000\u1762\u1763\u0003\u0558"+
		"\u02ac\u0000\u1763\u18f6\u0001\u0000\u0000\u0000\u1764\u1765\u0005\u008a"+
		"\u0000\u0000\u1765\u1766\u0003\u0134\u009a\u0000\u1766\u1767\u0005\u00ee"+
		"\u0000\u0000\u1767\u1768\u0003\u053e\u029f\u0000\u1768\u1769\u0005\u012e"+
		"\u0000\u0000\u1769\u176a\u0005^\u0000\u0000\u176a\u176b\u0003\u053e\u029f"+
		"\u0000\u176b\u18f6\u0001\u0000\u0000\u0000\u176c\u176d\u0005\u008a\u0000"+
		"\u0000\u176d\u176e\u0005\u010f\u0000\u0000\u176e\u176f\u0005\u009c\u0000"+
		"\u0000\u176f\u1770\u0003\u020c\u0106\u0000\u1770\u1771\u0005d\u0000\u0000"+
		"\u1771\u1772\u0003\u053e\u029f\u0000\u1772\u1773\u0005\u012e\u0000\u0000"+
		"\u1773\u1774\u0005^\u0000\u0000\u1774\u1775\u0003\u053e\u029f\u0000\u1775"+
		"\u18f6\u0001\u0000\u0000\u0000\u1776\u1777\u0005\u008a\u0000\u0000\u1777"+
		"\u1778\u0005\u010f\u0000\u0000\u1778\u1779\u0005\u00ce\u0000\u0000\u1779"+
		"\u177a\u0003\u020c\u0106\u0000\u177a\u177b\u0005d\u0000\u0000\u177b\u177c"+
		"\u0003\u053e\u029f\u0000\u177c\u177d\u0005\u012e\u0000\u0000\u177d\u177e"+
		"\u0005^\u0000\u0000\u177e\u177f\u0003\u053e\u029f\u0000\u177f\u18f6\u0001"+
		"\u0000\u0000\u0000\u1780\u1781\u0005\u008a\u0000\u0000\u1781\u1782\u0005"+
		"\u01bd\u0000\u0000\u1782\u1783\u0003\u053e\u029f\u0000\u1783\u1784\u0005"+
		"P\u0000\u0000\u1784\u1785\u0003\u053a\u029d\u0000\u1785\u1786\u0005\u012e"+
		"\u0000\u0000\u1786\u1787\u0005^\u0000\u0000\u1787\u1788\u0003\u053e\u029f"+
		"\u0000\u1788\u18f6\u0001\u0000\u0000\u0000\u1789\u178a\u0005\u008a\u0000"+
		"\u0000\u178a\u178b\u0005\u01bd\u0000\u0000\u178b\u178c\u0005\u00dc\u0000"+
		"\u0000\u178c\u178d\u0005\u0185\u0000\u0000\u178d\u178e\u0003\u053e\u029f"+
		"\u0000\u178e\u178f\u0005P\u0000\u0000\u178f\u1790\u0003\u053a\u029d\u0000"+
		"\u1790\u1791\u0005\u012e\u0000\u0000\u1791\u1792\u0005^\u0000\u0000\u1792"+
		"\u1793\u0003\u053e\u029f\u0000\u1793\u18f6\u0001\u0000\u0000\u0000\u1794"+
		"\u1795\u0005\u008a\u0000\u0000\u1795\u1796\u0005\u0121\u0000\u0000\u1796"+
		"\u1797\u0003\u0272\u0139\u0000\u1797\u1798\u0005\u012e\u0000\u0000\u1798"+
		"\u1799\u0005^\u0000\u0000\u1799\u179a\u0003\u053e\u029f\u0000\u179a\u18f6"+
		"\u0001\u0000\u0000\u0000\u179b\u179c\u0005\u008a\u0000\u0000\u179c\u179d"+
		"\u0005\u01c4\u0000\u0000\u179d\u179e\u0003\u053e\u029f\u0000\u179e\u179f"+
		"\u0005\u012e\u0000\u0000\u179f\u17a0\u0005^\u0000\u0000\u17a0\u17a1\u0003"+
		"\u053e\u029f\u0000\u17a1\u18f6\u0001\u0000\u0000\u0000\u17a2\u17a3\u0005"+
		"\u008a\u0000\u0000\u17a3\u17a4\u0005\u01ba\u0000\u0000\u17a4\u17a5\u0003"+
		"\u0272\u0139\u0000\u17a5\u17a6\u0005\u012e\u0000\u0000\u17a6\u17a7\u0005"+
		"^\u0000\u0000\u17a7\u17a8\u0003\u053e\u029f\u0000\u17a8\u18f6\u0001\u0000"+
		"\u0000\u0000\u17a9\u17aa\u0005\u008a\u0000\u0000\u17aa\u17ab\u0005\u013c"+
		"\u0000\u0000\u17ab\u17ac\u0003\u053e\u029f\u0000\u17ac\u17ad\u0005\u012e"+
		"\u0000\u0000\u17ad\u17ae\u0005^\u0000\u0000\u17ae\u17af\u0003\u053e\u029f"+
		"\u0000\u17af\u18f6\u0001\u0000\u0000\u0000\u17b0\u17b1\u0005\u008a\u0000"+
		"\u0000\u17b1\u17b2\u0005\u0144\u0000\u0000\u17b2\u17b3\u0003\u053e\u029f"+
		"\u0000\u17b3\u17b4\u0005\u012e\u0000\u0000\u17b4\u17b5\u0005^\u0000\u0000"+
		"\u17b5\u17b6\u0003\u053e\u029f\u0000\u17b6\u18f6\u0001\u0000\u0000\u0000"+
		"\u17b7\u17b8\u0005\u008a\u0000\u0000\u17b8\u17b9\u0005\u01c3\u0000\u0000"+
		"\u17b9\u17ba\u0003\u053e\u029f\u0000\u17ba\u17bb\u0005\u012e\u0000\u0000"+
		"\u17bb\u17bc\u0005^\u0000\u0000\u17bc\u17bd\u0003\u053e\u029f\u0000\u17bd"+
		"\u18f6\u0001\u0000\u0000\u0000\u17be\u17bf\u0005\u008a\u0000\u0000\u17bf"+
		"\u17c0\u0005\\\u0000\u0000\u17c0\u17c1\u0003\u0434\u021a\u0000\u17c1\u17c2"+
		"\u0005\u012e\u0000\u0000\u17c2\u17c3\u0005^\u0000\u0000\u17c3\u17c4\u0003"+
		"\u053e\u029f\u0000\u17c4\u18f6\u0001\u0000\u0000\u0000\u17c5\u17c6\u0005"+
		"\u008a\u0000\u0000\u17c6\u17c7\u0005\\\u0000\u0000\u17c7\u17c8\u0005\u00dc"+
		"\u0000\u0000\u17c8\u17c9\u0005\u0185\u0000\u0000\u17c9\u17ca\u0003\u0434"+
		"\u021a\u0000\u17ca\u17cb\u0005\u012e\u0000\u0000\u17cb\u17cc\u0005^\u0000"+
		"\u0000\u17cc\u17cd\u0003\u053e\u029f\u0000\u17cd\u18f6\u0001\u0000\u0000"+
		"\u0000\u17ce\u17cf\u0005\u008a\u0000\u0000\u17cf\u17d0\u0005\u0141\u0000"+
		"\u0000\u17d0\u17d1\u0003\u053a\u029d\u0000\u17d1\u17d2\u0005\u012e\u0000"+
		"\u0000\u17d2\u17d3\u0005^\u0000\u0000\u17d3\u17d4\u0003\u053e\u029f\u0000"+
		"\u17d4\u18f6\u0001\u0000\u0000\u0000\u17d5\u17d6\u0005\u008a\u0000\u0000"+
		"\u17d6\u17d7\u0005\u0141\u0000\u0000\u17d7\u17d8\u0005\u00dc\u0000\u0000"+
		"\u17d8\u17d9\u0005\u0185\u0000\u0000\u17d9\u17da\u0003\u053a\u029d\u0000"+
		"\u17da\u17db\u0005\u012e\u0000\u0000\u17db\u17dc\u0005^\u0000\u0000\u17dc"+
		"\u17dd\u0003\u053e\u029f\u0000\u17dd\u18f6\u0001\u0000\u0000\u0000\u17de"+
		"\u17df\u0005\u008a\u0000\u0000\u17df\u17e0\u0005\u0171\u0000\u0000\u17e0"+
		"\u17e1\u0003\u053a\u029d\u0000\u17e1\u17e2\u0005\u012e\u0000\u0000\u17e2"+
		"\u17e3\u0005^\u0000\u0000\u17e3\u17e4\u0003\u053e\u029f\u0000\u17e4\u18f6"+
		"\u0001\u0000\u0000\u0000\u17e5\u17e6\u0005\u008a\u0000\u0000\u17e6\u17e7"+
		"\u0005\u0171\u0000\u0000\u17e7\u17e8\u0005\u00dc\u0000\u0000\u17e8\u17e9"+
		"\u0005\u0185\u0000\u0000\u17e9\u17ea\u0003\u053a\u029d\u0000\u17ea\u17eb"+
		"\u0005\u012e\u0000\u0000\u17eb\u17ec\u0005^\u0000\u0000\u17ec\u17ed\u0003"+
		"\u053e\u029f\u0000\u17ed\u18f6\u0001\u0000\u0000\u0000\u17ee\u17ef\u0005"+
		"\u008a\u0000\u0000\u17ef\u17f0\u0005\u00fb\u0000\u0000\u17f0\u17f1\u0005"+
		"\u0171\u0000\u0000\u17f1\u17f2\u0003\u053a\u029d\u0000\u17f2\u17f3\u0005"+
		"\u012e\u0000\u0000\u17f3\u17f4\u0005^\u0000\u0000\u17f4\u17f5\u0003\u053e"+
		"\u029f\u0000\u17f5\u18f6\u0001\u0000\u0000\u0000\u17f6\u17f7\u0005\u008a"+
		"\u0000\u0000\u17f7\u17f8\u0005\u00fb\u0000\u0000\u17f8\u17f9\u0005\u0171"+
		"\u0000\u0000\u17f9\u17fa\u0005\u00dc\u0000\u0000\u17fa\u17fb\u0005\u0185"+
		"\u0000\u0000\u17fb\u17fc\u0003\u053a\u029d\u0000\u17fc\u17fd\u0005\u012e"+
		"\u0000\u0000\u17fd\u17fe\u0005^\u0000\u0000\u17fe\u17ff\u0003\u053e\u029f"+
		"\u0000\u17ff\u18f6\u0001\u0000\u0000\u0000\u1800\u1801\u0005\u008a\u0000"+
		"\u0000\u1801\u1802\u0005\u00e2\u0000\u0000\u1802\u1803\u0003\u053a\u029d"+
		"\u0000\u1803\u1804\u0005\u012e\u0000\u0000\u1804\u1805\u0005^\u0000\u0000"+
		"\u1805\u1806\u0003\u053e\u029f\u0000\u1806\u18f6\u0001\u0000\u0000\u0000"+
		"\u1807\u1808\u0005\u008a\u0000\u0000\u1808\u1809\u0005\u00e2\u0000\u0000"+
		"\u1809\u180a\u0005\u00dc\u0000\u0000\u180a\u180b\u0005\u0185\u0000\u0000"+
		"\u180b\u180c\u0003\u053a\u029d\u0000\u180c\u180d\u0005\u012e\u0000\u0000"+
		"\u180d\u180e\u0005^\u0000\u0000\u180e\u180f\u0003\u053e\u029f\u0000\u180f"+
		"\u18f6\u0001\u0000\u0000\u0000\u1810\u1811\u0005\u008a\u0000\u0000\u1811"+
		"\u1812\u0005?\u0000\u0000\u1812\u1813\u0005\\\u0000\u0000\u1813\u1814"+
		"\u0003\u0434\u021a\u0000\u1814\u1815\u0005\u012e\u0000\u0000\u1815\u1816"+
		"\u0005^\u0000\u0000\u1816\u1817\u0003\u053e\u029f\u0000\u1817\u18f6\u0001"+
		"\u0000\u0000\u0000\u1818\u1819\u0005\u008a\u0000\u0000\u1819\u181a\u0005"+
		"?\u0000\u0000\u181a\u181b\u0005\\\u0000\u0000\u181b\u181c\u0005\u00dc"+
		"\u0000\u0000\u181c\u181d\u0005\u0185\u0000\u0000\u181d\u181e\u0003\u0434"+
		"\u021a\u0000\u181e\u181f\u0005\u012e\u0000\u0000\u181f\u1820\u0005^\u0000"+
		"\u0000\u1820\u1821\u0003\u053e\u029f\u0000\u1821\u18f6\u0001\u0000\u0000"+
		"\u0000\u1822\u1823\u0005\u008a\u0000\u0000\u1823\u1824\u0005\\\u0000\u0000"+
		"\u1824\u1825\u0003\u0434\u021a\u0000\u1825\u1826\u0005\u012e\u0000\u0000"+
		"\u1826\u1827\u0003\u02d4\u016a\u0000\u1827\u1828\u0003\u053e\u029f\u0000"+
		"\u1828\u1829\u0005^\u0000\u0000\u1829\u182a\u0003\u053e\u029f\u0000\u182a"+
		"\u18f6\u0001\u0000\u0000\u0000\u182b\u182c\u0005\u008a\u0000\u0000\u182c"+
		"\u182d\u0005\\\u0000\u0000\u182d\u182e\u0005\u00dc\u0000\u0000\u182e\u182f"+
		"\u0005\u0185\u0000\u0000\u182f\u1830\u0003\u0434\u021a\u0000\u1830\u1831"+
		"\u0005\u012e\u0000\u0000\u1831\u1832\u0003\u02d4\u016a\u0000\u1832\u1833"+
		"\u0003\u053e\u029f\u0000\u1833\u1834\u0005^\u0000\u0000\u1834\u1835\u0003"+
		"\u053e\u029f\u0000\u1835\u18f6\u0001\u0000\u0000\u0000\u1836\u1837\u0005"+
		"\u008a\u0000\u0000\u1837\u1838\u0005\u0171\u0000\u0000\u1838\u1839\u0003"+
		"\u053a\u029d\u0000\u1839\u183a\u0005\u012e\u0000\u0000\u183a\u183b\u0003"+
		"\u02d4\u016a\u0000\u183b\u183c\u0003\u053e\u029f\u0000\u183c\u183d\u0005"+
		"^\u0000\u0000\u183d\u183e\u0003\u053e\u029f\u0000\u183e\u18f6\u0001\u0000"+
		"\u0000\u0000\u183f\u1840\u0005\u008a\u0000\u0000\u1840\u1841\u0005\u0171"+
		"\u0000\u0000\u1841\u1842\u0005\u00dc\u0000\u0000\u1842\u1843\u0005\u0185"+
		"\u0000\u0000\u1843\u1844\u0003\u053a\u029d\u0000\u1844\u1845\u0005\u012e"+
		"\u0000\u0000\u1845\u1846\u0003\u02d4\u016a\u0000\u1846\u1847\u0003\u053e"+
		"\u029f\u0000\u1847\u1848\u0005^\u0000\u0000\u1848\u1849\u0003\u053e\u029f"+
		"\u0000\u1849\u18f6\u0001\u0000\u0000\u0000\u184a\u184b\u0005\u008a\u0000"+
		"\u0000\u184b\u184c\u0005\u00fb\u0000\u0000\u184c\u184d\u0005\u0171\u0000"+
		"\u0000\u184d\u184e\u0003\u053a\u029d\u0000\u184e\u184f\u0005\u012e\u0000"+
		"\u0000\u184f\u1850\u0003\u02d4\u016a\u0000\u1850\u1851\u0003\u053e\u029f"+
		"\u0000\u1851\u1852\u0005^\u0000\u0000\u1852\u1853\u0003\u053e\u029f\u0000"+
		"\u1853\u18f6\u0001\u0000\u0000\u0000\u1854\u1855\u0005\u008a\u0000\u0000"+
		"\u1855\u1856\u0005\u00fb\u0000\u0000\u1856\u1857\u0005\u0171\u0000\u0000"+
		"\u1857\u1858\u0005\u00dc\u0000\u0000\u1858\u1859\u0005\u0185\u0000\u0000"+
		"\u1859\u185a\u0003\u053a\u029d\u0000\u185a\u185b\u0005\u012e\u0000\u0000"+
		"\u185b\u185c\u0003\u02d4\u016a\u0000\u185c\u185d\u0003\u053e\u029f\u0000"+
		"\u185d\u185e\u0005^\u0000\u0000\u185e\u185f\u0003\u053e\u029f\u0000\u185f"+
		"\u18f6\u0001\u0000\u0000\u0000\u1860\u1861\u0005\u008a\u0000\u0000\u1861"+
		"\u1862\u0005\\\u0000\u0000\u1862\u1863\u0003\u0434\u021a\u0000\u1863\u1864"+
		"\u0005\u012e\u0000\u0000\u1864\u1865\u0005-\u0000\u0000\u1865\u1866\u0003"+
		"\u053e\u029f\u0000\u1866\u1867\u0005^\u0000\u0000\u1867\u1868\u0003\u053e"+
		"\u029f\u0000\u1868\u18f6\u0001\u0000\u0000\u0000\u1869\u186a\u0005\u008a"+
		"\u0000\u0000\u186a\u186b\u0005\\\u0000\u0000\u186b\u186c\u0005\u00dc\u0000"+
		"\u0000\u186c\u186d\u0005\u0185\u0000\u0000\u186d\u186e\u0003\u0434\u021a"+
		"\u0000\u186e\u186f\u0005\u012e\u0000\u0000\u186f\u1870\u0005-\u0000\u0000"+
		"\u1870\u1871\u0003\u053e\u029f\u0000\u1871\u1872\u0005^\u0000\u0000\u1872"+
		"\u1873\u0003\u053e\u029f\u0000\u1873\u18f6\u0001\u0000\u0000\u0000\u1874"+
		"\u1875\u0005\u008a\u0000\u0000\u1875\u1876\u0005?\u0000\u0000\u1876\u1877"+
		"\u0005\\\u0000\u0000\u1877\u1878\u0003\u0434\u021a\u0000\u1878\u1879\u0005"+
		"\u012e\u0000\u0000\u1879\u187a\u0003\u02d4\u016a\u0000\u187a\u187b\u0003"+
		"\u053e\u029f\u0000\u187b\u187c\u0005^\u0000\u0000\u187c\u187d\u0003\u053e"+
		"\u029f\u0000\u187d\u18f6\u0001\u0000\u0000\u0000\u187e\u187f\u0005\u008a"+
		"\u0000\u0000\u187f\u1880\u0005?\u0000\u0000\u1880\u1881\u0005\\\u0000"+
		"\u0000\u1881\u1882\u0005\u00dc\u0000\u0000\u1882\u1883\u0005\u0185\u0000"+
		"\u0000\u1883\u1884\u0003\u0434\u021a\u0000\u1884\u1885\u0005\u012e\u0000"+
		"\u0000\u1885\u1886\u0003\u02d4\u016a\u0000\u1886\u1887\u0003\u053e\u029f"+
		"\u0000\u1887\u1888\u0005^\u0000\u0000\u1888\u1889\u0003\u053e\u029f\u0000"+
		"\u1889\u18f6\u0001\u0000\u0000\u0000\u188a\u188b\u0005\u008a\u0000\u0000"+
		"\u188b\u188c\u0005\u013a\u0000\u0000\u188c\u188d\u0003\u053e\u029f\u0000"+
		"\u188d\u188e\u0005P\u0000\u0000\u188e\u188f\u0003\u053a\u029d\u0000\u188f"+
		"\u1890\u0005\u012e\u0000\u0000\u1890\u1891\u0005^\u0000\u0000\u1891\u1892"+
		"\u0003\u053e\u029f\u0000\u1892\u18f6\u0001\u0000\u0000\u0000\u1893\u1894"+
		"\u0005\u008a\u0000\u0000\u1894\u1895\u0005\u015e\u0000\u0000\u1895\u1896"+
		"\u0003\u053e\u029f\u0000\u1896\u1897\u0005P\u0000\u0000\u1897\u1898\u0003"+
		"\u053a\u029d\u0000\u1898\u1899\u0005\u012e\u0000\u0000\u1899\u189a\u0005"+
		"^\u0000\u0000\u189a\u189b\u0003\u053e\u029f\u0000\u189b\u18f6\u0001\u0000"+
		"\u0000\u0000\u189c\u189d\u0005\u008a\u0000\u0000\u189d\u189e\u0005\u00c6"+
		"\u0000\u0000\u189e\u189f\u0005\u015e\u0000\u0000\u189f\u18a0\u0003\u053e"+
		"\u029f\u0000\u18a0\u18a1\u0005\u012e\u0000\u0000\u18a1\u18a2\u0005^\u0000"+
		"\u0000\u18a2\u18a3\u0003\u053e\u029f\u0000\u18a3\u18f6\u0001\u0000\u0000"+
		"\u0000\u18a4\u18a5\u0005\u008a\u0000\u0000\u18a5\u18a6\u0005\u0137\u0000"+
		"\u0000\u18a6\u18a7\u0003\u0558\u02ac\u0000\u18a7\u18a8\u0005\u012e\u0000"+
		"\u0000\u18a8\u18a9\u0005^\u0000\u0000\u18a9\u18aa\u0003\u0558\u02ac\u0000"+
		"\u18aa\u18f6\u0001\u0000\u0000\u0000\u18ab\u18ac\u0005\u008a\u0000\u0000"+
		"\u18ac\u18ad\u0005c\u0000\u0000\u18ad\u18ae\u0003\u0558\u02ac\u0000\u18ae"+
		"\u18af\u0005\u012e\u0000\u0000\u18af\u18b0\u0005^\u0000\u0000\u18b0\u18b1"+
		"\u0003\u0558\u02ac\u0000\u18b1\u18f6\u0001\u0000\u0000\u0000\u18b2\u18b3"+
		"\u0005\u008a\u0000\u0000\u18b3\u18b4\u0005\u0158\u0000\u0000\u18b4\u18b5"+
		"\u0003\u053e\u029f\u0000\u18b5\u18b6\u0005\u012e\u0000\u0000\u18b6\u18b7"+
		"\u0005^\u0000\u0000\u18b7\u18b8\u0003\u053e\u029f\u0000\u18b8\u18f6\u0001"+
		"\u0000\u0000\u0000\u18b9\u18ba\u0005\u008a\u0000\u0000\u18ba\u18bb\u0005"+
		"\u014f\u0000\u0000\u18bb\u18bc\u0003\u020c\u0106\u0000\u18bc\u18bd\u0005"+
		"\u012e\u0000\u0000\u18bd\u18be\u0005^\u0000\u0000\u18be\u18bf\u0003\u053e"+
		"\u029f\u0000\u18bf\u18f6\u0001\u0000\u0000\u0000\u18c0\u18c1\u0005\u008a"+
		"\u0000\u0000\u18c1\u18c2\u0005\u015c\u0000\u0000\u18c2\u18c3\u0005\u013e"+
		"\u0000\u0000\u18c3\u18c4\u0005\u0114\u0000\u0000\u18c4\u18c5\u0003\u020c"+
		"\u0106\u0000\u18c5\u18c6\u0005\u012e\u0000\u0000\u18c6\u18c7\u0005^\u0000"+
		"\u0000\u18c7\u18c8\u0003\u053e\u029f\u0000\u18c8\u18f6\u0001\u0000\u0000"+
		"\u0000\u18c9\u18ca\u0005\u008a\u0000\u0000\u18ca\u18cb\u0005\u015c\u0000"+
		"\u0000\u18cb\u18cc\u0005\u013e\u0000\u0000\u18cc\u18cd\u0005\u00b9\u0000"+
		"\u0000\u18cd\u18ce\u0003\u020c\u0106\u0000\u18ce\u18cf\u0005\u012e\u0000"+
		"\u0000\u18cf\u18d0\u0005^\u0000\u0000\u18d0\u18d1\u0003\u053e\u029f\u0000"+
		"\u18d1\u18f6\u0001\u0000\u0000\u0000\u18d2\u18d3\u0005\u008a\u0000\u0000"+
		"\u18d3\u18d4\u0005\u015c\u0000\u0000\u18d4\u18d5\u0005\u013e\u0000\u0000"+
		"\u18d5\u18d6\u0005\u015a\u0000\u0000\u18d6\u18d7\u0003\u020c\u0106\u0000"+
		"\u18d7\u18d8\u0005\u012e\u0000\u0000\u18d8\u18d9\u0005^\u0000\u0000\u18d9"+
		"\u18da\u0003\u053e\u029f\u0000\u18da\u18f6\u0001\u0000\u0000\u0000\u18db"+
		"\u18dc\u0005\u008a\u0000\u0000\u18dc\u18dd\u0005\u015c\u0000\u0000\u18dd"+
		"\u18de\u0005\u013e\u0000\u0000\u18de\u18df\u0005\u00a3\u0000\u0000\u18df"+
		"\u18e0\u0003\u020c\u0106\u0000\u18e0\u18e1\u0005\u012e\u0000\u0000\u18e1"+
		"\u18e2\u0005^\u0000\u0000\u18e2\u18e3\u0003\u053e\u029f\u0000\u18e3\u18f6"+
		"\u0001\u0000\u0000\u0000\u18e4\u18e5\u0005\u008a\u0000\u0000\u18e5\u18e6"+
		"\u0005\u0161\u0000\u0000\u18e6\u18e7\u0003\u020c\u0106\u0000\u18e7\u18e8"+
		"\u0005\u012e\u0000\u0000\u18e8\u18e9\u0005^\u0000\u0000\u18e9\u18ea\u0003"+
		"\u053e\u029f\u0000\u18ea\u18f6\u0001\u0000\u0000\u0000\u18eb\u18ec\u0005"+
		"\u008a\u0000\u0000\u18ec\u18ed\u0005\u0161\u0000\u0000\u18ed\u18ee\u0003"+
		"\u020c\u0106\u0000\u18ee\u18ef\u0005\u012e\u0000\u0000\u18ef\u18f0\u0005"+
		"\u008f\u0000\u0000\u18f0\u18f1\u0003\u053e\u029f\u0000\u18f1\u18f2\u0005"+
		"^\u0000\u0000\u18f2\u18f3\u0003\u053e\u029f\u0000\u18f3\u18f4\u0003l6"+
		"\u0000\u18f4\u18f6\u0001\u0000\u0000\u0000\u18f5\u1721\u0001\u0000\u0000"+
		"\u0000\u18f5\u1728\u0001\u0000\u0000\u0000\u18f5\u172f\u0001\u0000\u0000"+
		"\u0000\u18f5\u1736\u0001\u0000\u0000\u0000\u18f5\u173d\u0001\u0000\u0000"+
		"\u0000\u18f5\u1744\u0001\u0000\u0000\u0000\u18f5\u174d\u0001\u0000\u0000"+
		"\u0000\u18f5\u1756\u0001\u0000\u0000\u0000\u18f5\u175d\u0001\u0000\u0000"+
		"\u0000\u18f5\u1764\u0001\u0000\u0000\u0000\u18f5\u176c\u0001\u0000\u0000"+
		"\u0000\u18f5\u1776\u0001\u0000\u0000\u0000\u18f5\u1780\u0001\u0000\u0000"+
		"\u0000\u18f5\u1789\u0001\u0000\u0000\u0000\u18f5\u1794\u0001\u0000\u0000"+
		"\u0000\u18f5\u179b\u0001\u0000\u0000\u0000\u18f5\u17a2\u0001\u0000\u0000"+
		"\u0000\u18f5\u17a9\u0001\u0000\u0000\u0000\u18f5\u17b0\u0001\u0000\u0000"+
		"\u0000\u18f5\u17b7\u0001\u0000\u0000\u0000\u18f5\u17be\u0001\u0000\u0000"+
		"\u0000\u18f5\u17c5\u0001\u0000\u0000\u0000\u18f5\u17ce\u0001\u0000\u0000"+
		"\u0000\u18f5\u17d5\u0001\u0000\u0000\u0000\u18f5\u17de\u0001\u0000\u0000"+
		"\u0000\u18f5\u17e5\u0001\u0000\u0000\u0000\u18f5\u17ee\u0001\u0000\u0000"+
		"\u0000\u18f5\u17f6\u0001\u0000\u0000\u0000\u18f5\u1800\u0001\u0000\u0000"+
		"\u0000\u18f5\u1807\u0001\u0000\u0000\u0000\u18f5\u1810\u0001\u0000\u0000"+
		"\u0000\u18f5\u1818\u0001\u0000\u0000\u0000\u18f5\u1822\u0001\u0000\u0000"+
		"\u0000\u18f5\u182b\u0001\u0000\u0000\u0000\u18f5\u1836\u0001\u0000\u0000"+
		"\u0000\u18f5\u183f\u0001\u0000\u0000\u0000\u18f5\u184a\u0001\u0000\u0000"+
		"\u0000\u18f5\u1854\u0001\u0000\u0000\u0000\u18f5\u1860\u0001\u0000\u0000"+
		"\u0000\u18f5\u1869\u0001\u0000\u0000\u0000\u18f5\u1874\u0001\u0000\u0000"+
		"\u0000\u18f5\u187e\u0001\u0000\u0000\u0000\u18f5\u188a\u0001\u0000\u0000"+
		"\u0000\u18f5\u1893\u0001\u0000\u0000\u0000\u18f5\u189c\u0001\u0000\u0000"+
		"\u0000\u18f5\u18a4\u0001\u0000\u0000\u0000\u18f5\u18ab\u0001\u0000\u0000"+
		"\u0000\u18f5\u18b2\u0001\u0000\u0000\u0000\u18f5\u18b9\u0001\u0000\u0000"+
		"\u0000\u18f5\u18c0\u0001\u0000\u0000\u0000\u18f5\u18c9\u0001\u0000\u0000"+
		"\u0000\u18f5\u18d2\u0001\u0000\u0000\u0000\u18f5\u18db\u0001\u0000\u0000"+
		"\u0000\u18f5\u18e4\u0001\u0000\u0000\u0000\u18f5\u18eb\u0001\u0000\u0000"+
		"\u0000\u18f6\u02d3\u0001\u0000\u0000\u0000\u18f7\u18fa\u0005,\u0000\u0000"+
		"\u18f8\u18fa\u0001\u0000\u0000\u0000\u18f9\u18f7\u0001\u0000\u0000\u0000"+
		"\u18f9\u18f8\u0001\u0000\u0000\u0000\u18fa\u02d5\u0001\u0000\u0000\u0000"+
		"\u18fb\u18fc\u0005\u0146\u0000\u0000\u18fc\u18ff\u0005\u00ae\u0000\u0000"+
		"\u18fd\u18ff\u0001\u0000\u0000\u0000\u18fe\u18fb\u0001\u0000\u0000\u0000"+
		"\u18fe\u18fd\u0001\u0000\u0000\u0000\u18ff\u02d7\u0001\u0000\u0000\u0000"+
		"\u1900\u1901\u0005\u008a\u0000\u0000\u1901\u1902\u0005\u00d3\u0000\u0000"+
		"\u1902\u1903\u0003\u0272\u0139\u0000\u1903\u1904\u0003\u02da\u016d\u0000"+
		"\u1904\u1905\u0005\u01ce\u0000\u0000\u1905\u1906\u0005P\u0000\u0000\u1906"+
		"\u1907\u0005\u00cc\u0000\u0000\u1907\u1908\u0003\u053e\u029f\u0000\u1908"+
		"\u193a\u0001\u0000\u0000\u0000\u1909\u190a\u0005\u008a\u0000\u0000\u190a"+
		"\u190b\u0005\u0121\u0000\u0000\u190b\u190c\u0003\u0272\u0139\u0000\u190c"+
		"\u190d\u0003\u02da\u016d\u0000\u190d\u190e\u0005\u01ce\u0000\u0000\u190e"+
		"\u190f\u0005P\u0000\u0000\u190f\u1910\u0005\u00cc\u0000\u0000\u1910\u1911"+
		"\u0003\u053e\u029f\u0000\u1911\u193a\u0001\u0000\u0000\u0000\u1912\u1913"+
		"\u0005\u008a\u0000\u0000\u1913\u1914\u0005\u01ba\u0000\u0000\u1914\u1915"+
		"\u0003\u0272\u0139\u0000\u1915\u1916\u0003\u02da\u016d\u0000\u1916\u1917"+
		"\u0005\u01ce\u0000\u0000\u1917\u1918\u0005P\u0000\u0000\u1918\u1919\u0005"+
		"\u00cc\u0000\u0000\u1919\u191a\u0003\u053e\u029f\u0000\u191a\u193a\u0001"+
		"\u0000\u0000\u0000\u191b\u191c\u0005\u008a\u0000\u0000\u191c\u191d\u0005"+
		"\u015e\u0000\u0000\u191d\u191e\u0003\u053e\u029f\u0000\u191e\u191f\u0005"+
		"P\u0000\u0000\u191f\u1920\u0003\u053a\u029d\u0000\u1920\u1921\u0003\u02da"+
		"\u016d\u0000\u1921\u1922\u0005\u01ce\u0000\u0000\u1922\u1923\u0005P\u0000"+
		"\u0000\u1923\u1924\u0005\u00cc\u0000\u0000\u1924\u1925\u0003\u053e\u029f"+
		"\u0000\u1925\u193a\u0001\u0000\u0000\u0000\u1926\u1927\u0005\u008a\u0000"+
		"\u0000\u1927\u1928\u0005\u00fb\u0000\u0000\u1928\u1929\u0005\u0171\u0000"+
		"\u0000\u1929\u192a\u0003\u053a\u029d\u0000\u192a\u192b\u0003\u02da\u016d"+
		"\u0000\u192b\u192c\u0005\u01ce\u0000\u0000\u192c\u192d\u0005P\u0000\u0000"+
		"\u192d\u192e\u0005\u00cc\u0000\u0000\u192e\u192f\u0003\u053e\u029f\u0000"+
		"\u192f\u193a\u0001\u0000\u0000\u0000\u1930\u1931\u0005\u008a\u0000\u0000"+
		"\u1931\u1932\u0005\u00e2\u0000\u0000\u1932\u1933\u0003\u053a\u029d\u0000"+
		"\u1933\u1934\u0003\u02da\u016d\u0000\u1934\u1935\u0005\u01ce\u0000\u0000"+
		"\u1935\u1936\u0005P\u0000\u0000\u1936\u1937\u0005\u00cc\u0000\u0000\u1937"+
		"\u1938\u0003\u053e\u029f\u0000\u1938\u193a\u0001\u0000\u0000\u0000\u1939"+
		"\u1900\u0001\u0000\u0000\u0000\u1939\u1909\u0001\u0000\u0000\u0000\u1939"+
		"\u1912\u0001\u0000\u0000\u0000\u1939\u191b\u0001\u0000\u0000\u0000\u1939"+
		"\u1926\u0001\u0000\u0000\u0000\u1939\u1930\u0001\u0000\u0000\u0000\u193a"+
		"\u02d9\u0001\u0000\u0000\u0000\u193b\u193e\u0005\u0106\u0000\u0000\u193c"+
		"\u193e\u0001\u0000\u0000\u0000\u193d\u193b\u0001\u0000\u0000\u0000\u193d"+
		"\u193c\u0001\u0000\u0000\u0000\u193e\u02db\u0001\u0000\u0000\u0000\u193f"+
		"\u1940\u0005\u008a\u0000\u0000\u1940\u1941\u0005\u0088\u0000\u0000\u1941"+
		"\u1942\u0003\u028a\u0145\u0000\u1942\u1943\u0005\u0146\u0000\u0000\u1943"+
		"\u1944\u0005\u013c\u0000\u0000\u1944\u1945\u0003\u053e\u029f\u0000\u1945"+
		"\u1a19\u0001\u0000\u0000\u0000\u1946\u1947\u0005\u008a\u0000\u0000\u1947"+
		"\u1948\u0005l\u0000\u0000\u1948\u1949\u0003\u020c\u0106\u0000\u1949\u194a"+
		"\u0005\u0146\u0000\u0000\u194a\u194b\u0005\u013c\u0000\u0000\u194b\u194c"+
		"\u0003\u053e\u029f\u0000\u194c\u1a19\u0001\u0000\u0000\u0000\u194d\u194e"+
		"\u0005\u008a\u0000\u0000\u194e\u194f\u0005\u00a8\u0000\u0000\u194f\u1950"+
		"\u0003\u020c\u0106\u0000\u1950\u1951\u0005\u0146\u0000\u0000\u1951\u1952"+
		"\u0005\u013c\u0000\u0000\u1952\u1953\u0003\u053e\u029f\u0000\u1953\u1a19"+
		"\u0001\u0000\u0000\u0000\u1954\u1955\u0005\u008a\u0000\u0000\u1955\u1956"+
		"\u0005\u00bd\u0000\u0000\u1956\u1957\u0003\u020c\u0106\u0000\u1957\u1958"+
		"\u0005\u0146\u0000\u0000\u1958\u1959\u0005\u013c\u0000\u0000\u1959\u195a"+
		"\u0003\u053e\u029f\u0000\u195a\u1a19\u0001\u0000\u0000\u0000\u195b\u195c"+
		"\u0005\u008a\u0000\u0000\u195c\u195d\u0005\u00cc\u0000\u0000\u195d\u195e"+
		"\u0003\u053e\u029f\u0000\u195e\u195f\u0005\u0146\u0000\u0000\u195f\u1960"+
		"\u0005\u013c\u0000\u0000\u1960\u1961\u0003\u053e\u029f\u0000\u1961\u1a19"+
		"\u0001\u0000\u0000\u0000\u1962\u1963\u0005\u008a\u0000\u0000\u1963\u1964"+
		"\u0005\u00d3\u0000\u0000\u1964\u1965\u0003\u0272\u0139\u0000\u1965\u1966"+
		"\u0005\u0146\u0000\u0000\u1966\u1967\u0005\u013c\u0000\u0000\u1967\u1968"+
		"\u0003\u053e\u029f\u0000\u1968\u1a19\u0001\u0000\u0000\u0000\u1969\u196a"+
		"\u0005\u008a\u0000\u0000\u196a\u196b\u0005\u010f\u0000\u0000\u196b\u196c"+
		"\u0003\u02b0\u0158\u0000\u196c\u196d\u0005\u0146\u0000\u0000\u196d\u196e"+
		"\u0005\u013c\u0000\u0000\u196e\u196f\u0003\u053e\u029f\u0000\u196f\u1a19"+
		"\u0001\u0000\u0000\u0000\u1970\u1971\u0005\u008a\u0000\u0000\u1971\u1972"+
		"\u0005\u010f\u0000\u0000\u1972\u1973\u0005\u009c\u0000\u0000\u1973\u1974"+
		"\u0003\u020c\u0106\u0000\u1974\u1975\u0005d\u0000\u0000\u1975\u1976\u0003"+
		"\u053e\u029f\u0000\u1976\u1977\u0005\u0146\u0000\u0000\u1977\u1978\u0005"+
		"\u013c\u0000\u0000\u1978\u1979\u0003\u053e\u029f\u0000\u1979\u1a19\u0001"+
		"\u0000\u0000\u0000\u197a\u197b\u0005\u008a\u0000\u0000\u197b\u197c\u0005"+
		"\u010f\u0000\u0000\u197c\u197d\u0005\u00ce\u0000\u0000\u197d\u197e\u0003"+
		"\u020c\u0106\u0000\u197e\u197f\u0005d\u0000\u0000\u197f\u1980\u0003\u053e"+
		"\u029f\u0000\u1980\u1981\u0005\u0146\u0000\u0000\u1981\u1982\u0005\u013c"+
		"\u0000\u0000\u1982\u1983\u0003\u053e\u029f\u0000\u1983\u1a19\u0001\u0000"+
		"\u0000\u0000\u1984\u1985\u0005\u008a\u0000\u0000\u1985\u1986\u0005\u0121"+
		"\u0000\u0000\u1986\u1987\u0003\u0272\u0139\u0000\u1987\u1988\u0005\u0146"+
		"\u0000\u0000\u1988\u1989\u0005\u013c\u0000\u0000\u1989\u198a\u0003\u053e"+
		"\u029f\u0000\u198a\u1a19\u0001\u0000\u0000\u0000\u198b\u198c\u0005\u008a"+
		"\u0000\u0000\u198c\u198d\u0005\u01ba\u0000\u0000\u198d\u198e\u0003\u0272"+
		"\u0139\u0000\u198e\u198f\u0005\u0146\u0000\u0000\u198f\u1990\u0005\u013c"+
		"\u0000\u0000\u1990\u1991\u0003\u053e\u029f\u0000\u1991\u1a19\u0001\u0000"+
		"\u0000\u0000\u1992\u1993\u0005\u008a\u0000\u0000\u1993\u1994\u0005\\\u0000"+
		"\u0000\u1994\u1995\u0003\u0434\u021a\u0000\u1995\u1996\u0005\u0146\u0000"+
		"\u0000\u1996\u1997\u0005\u013c\u0000\u0000\u1997\u1998\u0003\u053e\u029f"+
		"\u0000\u1998\u1a19\u0001\u0000\u0000\u0000\u1999\u199a\u0005\u008a\u0000"+
		"\u0000\u199a\u199b\u0005\\\u0000\u0000\u199b\u199c\u0005\u00dc\u0000\u0000"+
		"\u199c\u199d\u0005\u0185\u0000\u0000\u199d\u199e\u0003\u0434\u021a\u0000"+
		"\u199e\u199f\u0005\u0146\u0000\u0000\u199f\u19a0\u0005\u013c\u0000\u0000"+
		"\u19a0\u19a1\u0003\u053e\u029f\u0000\u19a1\u1a19\u0001\u0000\u0000\u0000"+
		"\u19a2\u19a3\u0005\u008a\u0000\u0000\u19a3\u19a4\u0005\u014f\u0000\u0000"+
		"\u19a4\u19a5\u0003\u020c\u0106\u0000\u19a5\u19a6\u0005\u0146\u0000\u0000"+
		"\u19a6\u19a7\u0005\u013c\u0000\u0000\u19a7\u19a8\u0003\u053e\u029f\u0000"+
		"\u19a8\u1a19\u0001\u0000\u0000\u0000\u19a9\u19aa\u0005\u008a\u0000\u0000"+
		"\u19aa\u19ab\u0005\u015c\u0000\u0000\u19ab\u19ac\u0005\u013e\u0000\u0000"+
		"\u19ac\u19ad\u0005\u0114\u0000\u0000\u19ad\u19ae\u0003\u020c\u0106\u0000"+
		"\u19ae\u19af\u0005\u0146\u0000\u0000\u19af\u19b0\u0005\u013c\u0000\u0000"+
		"\u19b0\u19b1\u0003\u053e\u029f\u0000\u19b1\u1a19\u0001\u0000\u0000\u0000"+
		"\u19b2\u19b3\u0005\u008a\u0000\u0000\u19b3\u19b4\u0005\u015c\u0000\u0000"+
		"\u19b4\u19b5\u0005\u013e\u0000\u0000\u19b5\u19b6\u0005\u00b9\u0000\u0000"+
		"\u19b6\u19b7\u0003\u020c\u0106\u0000\u19b7\u19b8\u0005\u0146\u0000\u0000"+
		"\u19b8\u19b9\u0005\u013c\u0000\u0000\u19b9\u19ba\u0003\u053e\u029f\u0000"+
		"\u19ba\u1a19\u0001\u0000\u0000\u0000\u19bb\u19bc\u0005\u008a\u0000\u0000"+
		"\u19bc\u19bd\u0005\u015c\u0000\u0000\u19bd\u19be\u0005\u013e\u0000\u0000"+
		"\u19be\u19bf\u0005\u015a\u0000\u0000\u19bf\u19c0\u0003\u020c\u0106\u0000"+
		"\u19c0\u19c1\u0005\u0146\u0000\u0000\u19c1\u19c2\u0005\u013c\u0000\u0000"+
		"\u19c2\u19c3\u0003\u053e\u029f\u0000\u19c3\u1a19\u0001\u0000\u0000\u0000"+
		"\u19c4\u19c5\u0005\u008a\u0000\u0000\u19c5\u19c6\u0005\u015c\u0000\u0000"+
		"\u19c6\u19c7\u0005\u013e\u0000\u0000\u19c7\u19c8\u0005\u00a3\u0000\u0000"+
		"\u19c8\u19c9\u0003\u020c\u0106\u0000\u19c9\u19ca\u0005\u0146\u0000\u0000"+
		"\u19ca\u19cb\u0005\u013c\u0000\u0000\u19cb\u19cc\u0003\u053e\u029f\u0000"+
		"\u19cc\u1a19\u0001\u0000\u0000\u0000\u19cd\u19ce\u0005\u008a\u0000\u0000"+
		"\u19ce\u19cf\u0005\u0141\u0000\u0000\u19cf\u19d0\u0003\u053a\u029d\u0000"+
		"\u19d0\u19d1\u0005\u0146\u0000\u0000\u19d1\u19d2\u0005\u013c\u0000\u0000"+
		"\u19d2\u19d3\u0003\u053e\u029f\u0000\u19d3\u1a19\u0001\u0000\u0000\u0000"+
		"\u19d4\u19d5\u0005\u008a\u0000\u0000\u19d5\u19d6\u0005\u0141\u0000\u0000"+
		"\u19d6\u19d7\u0005\u00dc\u0000\u0000\u19d7\u19d8\u0005\u0185\u0000\u0000"+
		"\u19d8\u19d9\u0003\u053a\u029d\u0000\u19d9\u19da\u0005\u0146\u0000\u0000"+
		"\u19da\u19db\u0005\u013c\u0000\u0000\u19db\u19dc\u0003\u053e\u029f\u0000"+
		"\u19dc\u1a19\u0001\u0000\u0000\u0000\u19dd\u19de\u0005\u008a\u0000\u0000"+
		"\u19de\u19df\u0005\u0171\u0000\u0000\u19df\u19e0\u0003\u053a\u029d\u0000"+
		"\u19e0\u19e1\u0005\u0146\u0000\u0000\u19e1\u19e2\u0005\u013c\u0000\u0000"+
		"\u19e2\u19e3\u0003\u053e\u029f\u0000\u19e3\u1a19\u0001\u0000\u0000\u0000"+
		"\u19e4\u19e5\u0005\u008a\u0000\u0000\u19e5\u19e6\u0005\u0171\u0000\u0000"+
		"\u19e6\u19e7\u0005\u00dc\u0000\u0000\u19e7\u19e8\u0005\u0185\u0000\u0000"+
		"\u19e8\u19e9\u0003\u053a\u029d\u0000\u19e9\u19ea\u0005\u0146\u0000\u0000"+
		"\u19ea\u19eb\u0005\u013c\u0000\u0000\u19eb\u19ec\u0003\u053e\u029f\u0000"+
		"\u19ec\u1a19\u0001\u0000\u0000\u0000\u19ed\u19ee\u0005\u008a\u0000\u0000"+
		"\u19ee\u19ef\u0005\u00fb\u0000\u0000\u19ef\u19f0\u0005\u0171\u0000\u0000"+
		"\u19f0\u19f1\u0003\u053a\u029d\u0000\u19f1\u19f2\u0005\u0146\u0000\u0000"+
		"\u19f2\u19f3\u0005\u013c\u0000\u0000\u19f3\u19f4\u0003\u053e\u029f\u0000"+
		"\u19f4\u1a19\u0001\u0000\u0000\u0000\u19f5\u19f6\u0005\u008a\u0000\u0000"+
		"\u19f6\u19f7\u0005\u00fb\u0000\u0000\u19f7\u19f8\u0005\u0171\u0000\u0000"+
		"\u19f8\u19f9\u0005\u00dc\u0000\u0000\u19f9\u19fa\u0005\u0185\u0000\u0000"+
		"\u19fa\u19fb\u0003\u053a\u029d\u0000\u19fb\u19fc\u0005\u0146\u0000\u0000"+
		"\u19fc\u19fd\u0005\u013c\u0000\u0000\u19fd\u19fe\u0003\u053e\u029f\u0000"+
		"\u19fe\u1a19\u0001\u0000\u0000\u0000\u19ff\u1a00\u0005\u008a\u0000\u0000"+
		"\u1a00\u1a01\u0005?\u0000\u0000\u1a01\u1a02\u0005\\\u0000\u0000\u1a02"+
		"\u1a03\u0003\u0434\u021a\u0000\u1a03\u1a04\u0005\u0146\u0000\u0000\u1a04"+
		"\u1a05\u0005\u013c\u0000\u0000\u1a05\u1a06\u0003\u053e\u029f\u0000\u1a06"+
		"\u1a19\u0001\u0000\u0000\u0000\u1a07\u1a08\u0005\u008a\u0000\u0000\u1a08"+
		"\u1a09\u0005?\u0000\u0000\u1a09\u1a0a\u0005\\\u0000\u0000\u1a0a\u1a0b"+
		"\u0005\u00dc\u0000\u0000\u1a0b\u1a0c\u0005\u0185\u0000\u0000\u1a0c\u1a0d"+
		"\u0003\u0434\u021a\u0000\u1a0d\u1a0e\u0005\u0146\u0000\u0000\u1a0e\u1a0f"+
		"\u0005\u013c\u0000\u0000\u1a0f\u1a10\u0003\u053e\u029f\u0000\u1a10\u1a19"+
		"\u0001\u0000\u0000\u0000\u1a11\u1a12\u0005\u008a\u0000\u0000\u1a12\u1a13"+
		"\u0005\u0161\u0000\u0000\u1a13\u1a14\u0003\u020c\u0106\u0000\u1a14\u1a15"+
		"\u0005\u0146\u0000\u0000\u1a15\u1a16\u0005\u013c\u0000\u0000\u1a16\u1a17"+
		"\u0003\u053e\u029f\u0000\u1a17\u1a19\u0001\u0000\u0000\u0000\u1a18\u193f"+
		"\u0001\u0000\u0000\u0000\u1a18\u1946\u0001\u0000\u0000\u0000\u1a18\u194d"+
		"\u0001\u0000\u0000\u0000\u1a18\u1954\u0001\u0000\u0000\u0000\u1a18\u195b"+
		"\u0001\u0000\u0000\u0000\u1a18\u1962\u0001\u0000\u0000\u0000\u1a18\u1969"+
		"\u0001\u0000\u0000\u0000\u1a18\u1970\u0001\u0000\u0000\u0000\u1a18\u197a"+
		"\u0001\u0000\u0000\u0000\u1a18\u1984\u0001\u0000\u0000\u0000\u1a18\u198b"+
		"\u0001\u0000\u0000\u0000\u1a18\u1992\u0001\u0000\u0000\u0000\u1a18\u1999"+
		"\u0001\u0000\u0000\u0000\u1a18\u19a2\u0001\u0000\u0000\u0000\u1a18\u19a9"+
		"\u0001\u0000\u0000\u0000\u1a18\u19b2\u0001\u0000\u0000\u0000\u1a18\u19bb"+
		"\u0001\u0000\u0000\u0000\u1a18\u19c4\u0001\u0000\u0000\u0000\u1a18\u19cd"+
		"\u0001\u0000\u0000\u0000\u1a18\u19d4\u0001\u0000\u0000\u0000\u1a18\u19dd"+
		"\u0001\u0000\u0000\u0000\u1a18\u19e4\u0001\u0000\u0000\u0000\u1a18\u19ed"+
		"\u0001\u0000\u0000\u0000\u1a18\u19f5\u0001\u0000\u0000\u0000\u1a18\u19ff"+
		"\u0001\u0000\u0000\u0000\u1a18\u1a07\u0001\u0000\u0000\u0000\u1a18\u1a11"+
		"\u0001\u0000\u0000\u0000\u1a19\u02dd\u0001\u0000\u0000\u0000\u1a1a\u1a1b"+
		"\u0005\u008a\u0000\u0000\u1a1b\u1a1c\u0005\u010f\u0000\u0000\u1a1c\u1a1d"+
		"\u0003\u02b0\u0158\u0000\u1a1d\u1a1e\u0005\u0146\u0000\u0000\u1a1e\u1a1f"+
		"\u0005\u0002\u0000\u0000\u1a1f\u1a20\u0003\u02e0\u0170\u0000\u1a20\u1a21"+
		"\u0005\u0003\u0000\u0000\u1a21\u02df\u0001\u0000\u0000\u0000\u1a22\u1a27"+
		"\u0003\u02e2\u0171\u0000\u1a23\u1a24\u0005\u0006\u0000\u0000\u1a24\u1a26"+
		"\u0003\u02e2\u0171\u0000\u1a25\u1a23\u0001\u0000\u0000\u0000\u1a26\u1a29"+
		"\u0001\u0000\u0000\u0000\u1a27\u1a25\u0001\u0000\u0000\u0000\u1a27\u1a28"+
		"\u0001\u0000\u0000\u0000\u1a28\u02e1\u0001\u0000\u0000\u0000\u1a29\u1a27"+
		"\u0001\u0000\u0000\u0000\u1a2a\u1a2b\u0003\u0566\u02b3\u0000\u1a2b\u1a2c"+
		"\u0005\n\u0000\u0000\u1a2c\u1a2d\u0005\u0190\u0000\u0000\u1a2d\u1a33\u0001"+
		"\u0000\u0000\u0000\u1a2e\u1a2f\u0003\u0566\u02b3\u0000\u1a2f\u1a30\u0005"+
		"\n\u0000\u0000\u1a30\u1a31\u0003\u02e4\u0172\u0000\u1a31\u1a33\u0001\u0000"+
		"\u0000\u0000\u1a32\u1a2a\u0001\u0000\u0000\u0000\u1a32\u1a2e\u0001\u0000"+
		"\u0000\u0000\u1a33\u02e3\u0001\u0000\u0000\u0000\u1a34\u1a3a\u0003\u0280"+
		"\u0140\u0000\u1a35\u1a3a\u0003\u0572\u02b9\u0000\u1a36\u1a3a\u0003\u04fe"+
		"\u027f\u0000\u1a37\u1a3a\u0003\u0124\u0092\u0000\u1a38\u1a3a\u0003\u0550"+
		"\u02a8\u0000\u1a39\u1a34\u0001\u0000\u0000\u0000\u1a39\u1a35\u0001\u0000"+
		"\u0000\u0000\u1a39\u1a36\u0001\u0000\u0000\u0000\u1a39\u1a37\u0001\u0000"+
		"\u0000\u0000\u1a39\u1a38\u0001\u0000\u0000\u0000\u1a3a\u02e5\u0001\u0000"+
		"\u0000\u0000\u1a3b\u1a3c\u0005\u008a\u0000\u0000\u1a3c\u1a3d\u0005\u0161"+
		"\u0000\u0000\u1a3d\u1a3e\u0003\u020c\u0106\u0000\u1a3e\u1a3f\u0005\u0146"+
		"\u0000\u0000\u1a3f\u1a40\u0005\u0002\u0000\u0000\u1a40\u1a41\u0003\u02e0"+
		"\u0170\u0000\u1a41\u1a42\u0005\u0003\u0000\u0000\u1a42\u02e7\u0001\u0000"+
		"\u0000\u0000\u1a43\u1a44\u0005\u008a\u0000\u0000\u1a44\u1a45\u0005\u0088"+
		"\u0000\u0000\u1a45\u1a46\u0003\u028a\u0145\u0000\u1a46\u1a47\u0005\u0113"+
		"\u0000\u0000\u1a47\u1a48\u0005^\u0000\u0000\u1a48\u1a49\u0003\u055a\u02ad"+
		"\u0000\u1a49\u1afb\u0001\u0000\u0000\u0000\u1a4a\u1a4b\u0005\u008a\u0000"+
		"\u0000\u1a4b\u1a4c\u0005l\u0000\u0000\u1a4c\u1a4d\u0003\u020c\u0106\u0000"+
		"\u1a4d\u1a4e\u0005\u0113\u0000\u0000\u1a4e\u1a4f\u0005^\u0000\u0000\u1a4f"+
		"\u1a50\u0003\u055a\u02ad\u0000\u1a50\u1afb\u0001\u0000\u0000\u0000\u1a51"+
		"\u1a52\u0005\u008a\u0000\u0000\u1a52\u1a53\u0005\u00a8\u0000\u0000\u1a53"+
		"\u1a54\u0003\u020c\u0106\u0000\u1a54\u1a55\u0005\u0113\u0000\u0000\u1a55"+
		"\u1a56\u0005^\u0000\u0000\u1a56\u1a57\u0003\u055a\u02ad\u0000\u1a57\u1afb"+
		"\u0001\u0000\u0000\u0000\u1a58\u1a59\u0005\u008a\u0000\u0000\u1a59\u1a5a"+
		"\u0005\u00af\u0000\u0000\u1a5a\u1a5b\u0003\u053e\u029f\u0000\u1a5b\u1a5c"+
		"\u0005\u0113\u0000\u0000\u1a5c\u1a5d\u0005^\u0000\u0000\u1a5d\u1a5e\u0003"+
		"\u055a\u02ad\u0000\u1a5e\u1afb\u0001\u0000\u0000\u0000\u1a5f\u1a60\u0005"+
		"\u008a\u0000\u0000\u1a60\u1a61\u0005\u00bd\u0000\u0000\u1a61\u1a62\u0003"+
		"\u020c\u0106\u0000\u1a62\u1a63\u0005\u0113\u0000\u0000\u1a63\u1a64\u0005"+
		"^\u0000\u0000\u1a64\u1a65\u0003\u055a\u02ad\u0000\u1a65\u1afb\u0001\u0000"+
		"\u0000\u0000\u1a66\u1a67\u0005\u008a\u0000\u0000\u1a67\u1a68\u0005\u00d3"+
		"\u0000\u0000\u1a68\u1a69\u0003\u0272\u0139\u0000\u1a69\u1a6a\u0005\u0113"+
		"\u0000\u0000\u1a6a\u1a6b\u0005^\u0000\u0000\u1a6b\u1a6c\u0003\u055a\u02ad"+
		"\u0000\u1a6c\u1afb\u0001\u0000\u0000\u0000\u1a6d\u1a6e\u0005\u008a\u0000"+
		"\u0000\u1a6e\u1a6f\u0003\u0134\u009a\u0000\u1a6f\u1a70\u0005\u00ee\u0000"+
		"\u0000\u1a70\u1a71\u0003\u053e\u029f\u0000\u1a71\u1a72\u0005\u0113\u0000"+
		"\u0000\u1a72\u1a73\u0005^\u0000\u0000\u1a73\u1a74\u0003\u055a\u02ad\u0000"+
		"\u1a74\u1afb\u0001\u0000\u0000\u0000\u1a75\u1a76\u0005\u008a\u0000\u0000"+
		"\u1a76\u1a77\u0005\u00ef\u0000\u0000\u1a77\u1a78\u0005\u010b\u0000\u0000"+
		"\u1a78\u1a79\u0003\u0124\u0092\u0000\u1a79\u1a7a\u0005\u0113\u0000\u0000"+
		"\u1a7a\u1a7b\u0005^\u0000\u0000\u1a7b\u1a7c\u0003\u055a\u02ad\u0000\u1a7c"+
		"\u1afb\u0001\u0000\u0000\u0000\u1a7d\u1a7e\u0005\u008a\u0000\u0000\u1a7e"+
		"\u1a7f\u0005\u010f\u0000\u0000\u1a7f\u1a80\u0003\u02b0\u0158\u0000\u1a80"+
		"\u1a81\u0005\u0113\u0000\u0000\u1a81\u1a82\u0005^\u0000\u0000\u1a82\u1a83"+
		"\u0003\u055a\u02ad\u0000\u1a83\u1afb\u0001\u0000\u0000\u0000\u1a84\u1a85"+
		"\u0005\u008a\u0000\u0000\u1a85\u1a86\u0005\u010f\u0000\u0000\u1a86\u1a87"+
		"\u0005\u009c\u0000\u0000\u1a87\u1a88\u0003\u020c\u0106\u0000\u1a88\u1a89"+
		"\u0005d\u0000\u0000\u1a89\u1a8a\u0003\u053e\u029f\u0000\u1a8a\u1a8b\u0005"+
		"\u0113\u0000\u0000\u1a8b\u1a8c\u0005^\u0000\u0000\u1a8c\u1a8d\u0003\u055a"+
		"\u02ad\u0000\u1a8d\u1afb\u0001\u0000\u0000\u0000\u1a8e\u1a8f\u0005\u008a"+
		"\u0000\u0000\u1a8f\u1a90\u0005\u010f\u0000\u0000\u1a90\u1a91\u0005\u00ce"+
		"\u0000\u0000\u1a91\u1a92\u0003\u020c\u0106\u0000\u1a92\u1a93\u0005d\u0000"+
		"\u0000\u1a93\u1a94\u0003\u053e\u029f\u0000\u1a94\u1a95\u0005\u0113\u0000"+
		"\u0000\u1a95\u1a96\u0005^\u0000\u0000\u1a96\u1a97\u0003\u055a\u02ad\u0000"+
		"\u1a97\u1afb\u0001\u0000\u0000\u0000\u1a98\u1a99\u0005\u008a\u0000\u0000"+
		"\u1a99\u1a9a\u0005\u0121\u0000\u0000\u1a9a\u1a9b\u0003\u0272\u0139\u0000"+
		"\u1a9b\u1a9c\u0005\u0113\u0000\u0000\u1a9c\u1a9d\u0005^\u0000\u0000\u1a9d"+
		"\u1a9e\u0003\u055a\u02ad\u0000\u1a9e\u1afb\u0001\u0000\u0000\u0000\u1a9f"+
		"\u1aa0\u0005\u008a\u0000\u0000\u1aa0\u1aa1\u0005\u01ba\u0000\u0000\u1aa1"+
		"\u1aa2\u0003\u0272\u0139\u0000\u1aa2\u1aa3\u0005\u0113\u0000\u0000\u1aa3"+
		"\u1aa4\u0005^\u0000\u0000\u1aa4\u1aa5\u0003\u055a\u02ad\u0000\u1aa5\u1afb"+
		"\u0001\u0000\u0000\u0000\u1aa6\u1aa7\u0005\u008a\u0000\u0000\u1aa7\u1aa8"+
		"\u0005\u013c\u0000\u0000\u1aa8\u1aa9\u0003\u053e\u029f\u0000\u1aa9\u1aaa"+
		"\u0005\u0113\u0000\u0000\u1aaa\u1aab\u0005^\u0000\u0000\u1aab\u1aac\u0003"+
		"\u055a\u02ad\u0000\u1aac\u1afb\u0001\u0000\u0000\u0000\u1aad\u1aae\u0005"+
		"\u008a\u0000\u0000\u1aae\u1aaf\u0005\u0161\u0000\u0000\u1aaf\u1ab0\u0003"+
		"\u020c\u0106\u0000\u1ab0\u1ab1\u0005\u0113\u0000\u0000\u1ab1\u1ab2\u0005"+
		"^\u0000\u0000\u1ab2\u1ab3\u0003\u055a\u02ad\u0000\u1ab3\u1afb\u0001\u0000"+
		"\u0000\u0000\u1ab4\u1ab5\u0005\u008a\u0000\u0000\u1ab5\u1ab6\u0005\u0158"+
		"\u0000\u0000\u1ab6\u1ab7\u0003\u053e\u029f\u0000\u1ab7\u1ab8\u0005\u0113"+
		"\u0000\u0000\u1ab8\u1ab9\u0005^\u0000\u0000\u1ab9\u1aba\u0003\u055a\u02ad"+
		"\u0000\u1aba\u1afb\u0001\u0000\u0000\u0000\u1abb\u1abc\u0005\u008a\u0000"+
		"\u0000\u1abc\u1abd\u0005\u014f\u0000\u0000\u1abd\u1abe\u0003\u020c\u0106"+
		"\u0000\u1abe\u1abf\u0005\u0113\u0000\u0000\u1abf\u1ac0\u0005^\u0000\u0000"+
		"\u1ac0\u1ac1\u0003\u055a\u02ad\u0000\u1ac1\u1afb\u0001\u0000\u0000\u0000"+
		"\u1ac2\u1ac3\u0005\u008a\u0000\u0000\u1ac3\u1ac4\u0005\u015c\u0000\u0000"+
		"\u1ac4\u1ac5\u0005\u013e\u0000\u0000\u1ac5\u1ac6\u0005\u00b9\u0000\u0000"+
		"\u1ac6\u1ac7\u0003\u020c\u0106\u0000\u1ac7\u1ac8\u0005\u0113\u0000\u0000"+
		"\u1ac8\u1ac9\u0005^\u0000\u0000\u1ac9\u1aca\u0003\u055a\u02ad\u0000\u1aca"+
		"\u1afb\u0001\u0000\u0000\u0000\u1acb\u1acc\u0005\u008a\u0000\u0000\u1acc"+
		"\u1acd\u0005\u015c\u0000\u0000\u1acd\u1ace\u0005\u013e\u0000\u0000\u1ace"+
		"\u1acf\u0005\u00a3\u0000\u0000\u1acf\u1ad0\u0003\u020c\u0106\u0000\u1ad0"+
		"\u1ad1\u0005\u0113\u0000\u0000\u1ad1\u1ad2\u0005^\u0000\u0000\u1ad2\u1ad3"+
		"\u0003\u055a\u02ad\u0000\u1ad3\u1afb\u0001\u0000\u0000\u0000\u1ad4\u1ad5"+
		"\u0005\u008a\u0000\u0000\u1ad5\u1ad6\u0005?\u0000\u0000\u1ad6\u1ad7\u0005"+
		"\u00ae\u0000\u0000\u1ad7\u1ad8\u0005\u0176\u0000\u0000\u1ad8\u1ad9\u0003"+
		"\u053e\u029f\u0000\u1ad9\u1ada\u0005\u0113\u0000\u0000\u1ada\u1adb\u0005"+
		"^\u0000\u0000\u1adb\u1adc\u0003\u055a\u02ad\u0000\u1adc\u1afb\u0001\u0000"+
		"\u0000\u0000\u1add\u1ade\u0005\u008a\u0000\u0000\u1ade\u1adf\u0005\u0144"+
		"\u0000\u0000\u1adf\u1ae0\u0003\u053e\u029f\u0000\u1ae0\u1ae1\u0005\u0113"+
		"\u0000\u0000\u1ae1\u1ae2\u0005^\u0000\u0000\u1ae2\u1ae3\u0003\u055a\u02ad"+
		"\u0000\u1ae3\u1afb\u0001\u0000\u0000\u0000\u1ae4\u1ae5\u0005\u008a\u0000"+
		"\u0000\u1ae5\u1ae6\u0005\u00c6\u0000\u0000\u1ae6\u1ae7\u0005\u015e\u0000"+
		"\u0000\u1ae7\u1ae8\u0003\u053e\u029f\u0000\u1ae8\u1ae9\u0005\u0113\u0000"+
		"\u0000\u1ae9\u1aea\u0005^\u0000\u0000\u1aea\u1aeb\u0003\u055a\u02ad\u0000"+
		"\u1aeb\u1afb\u0001\u0000\u0000\u0000\u1aec\u1aed\u0005\u008a\u0000\u0000"+
		"\u1aed\u1aee\u0005\u01c4\u0000\u0000\u1aee\u1aef\u0003\u053e\u029f\u0000"+
		"\u1aef\u1af0\u0005\u0113\u0000\u0000\u1af0\u1af1\u0005^\u0000\u0000\u1af1"+
		"\u1af2\u0003\u055a\u02ad\u0000\u1af2\u1afb\u0001\u0000\u0000\u0000\u1af3"+
		"\u1af4\u0005\u008a\u0000\u0000\u1af4\u1af5\u0005\u01c3\u0000\u0000\u1af5"+
		"\u1af6\u0003\u053e\u029f\u0000\u1af6\u1af7\u0005\u0113\u0000\u0000\u1af7"+
		"\u1af8\u0005^\u0000\u0000\u1af8\u1af9\u0003\u055a\u02ad\u0000\u1af9\u1afb"+
		"\u0001\u0000\u0000\u0000\u1afa\u1a43\u0001\u0000\u0000\u0000\u1afa\u1a4a"+
		"\u0001\u0000\u0000\u0000\u1afa\u1a51\u0001\u0000\u0000\u0000\u1afa\u1a58"+
		"\u0001\u0000\u0000\u0000\u1afa\u1a5f\u0001\u0000\u0000\u0000\u1afa\u1a66"+
		"\u0001\u0000\u0000\u0000\u1afa\u1a6d\u0001\u0000\u0000\u0000\u1afa\u1a75"+
		"\u0001\u0000\u0000\u0000\u1afa\u1a7d\u0001\u0000\u0000\u0000\u1afa\u1a84"+
		"\u0001\u0000\u0000\u0000";
	private static final String _serializedATNSegment3 =
		"\u1afa\u1a8e\u0001\u0000\u0000\u0000\u1afa\u1a98\u0001\u0000\u0000\u0000"+
		"\u1afa\u1a9f\u0001\u0000\u0000\u0000\u1afa\u1aa6\u0001\u0000\u0000\u0000"+
		"\u1afa\u1aad\u0001\u0000\u0000\u0000\u1afa\u1ab4\u0001\u0000\u0000\u0000"+
		"\u1afa\u1abb\u0001\u0000\u0000\u0000\u1afa\u1ac2\u0001\u0000\u0000\u0000"+
		"\u1afa\u1acb\u0001\u0000\u0000\u0000\u1afa\u1ad4\u0001\u0000\u0000\u0000"+
		"\u1afa\u1add\u0001\u0000\u0000\u0000\u1afa\u1ae4\u0001\u0000\u0000\u0000"+
		"\u1afa\u1aec\u0001\u0000\u0000\u0000\u1afa\u1af3\u0001\u0000\u0000\u0000"+
		"\u1afb\u02e9\u0001\u0000\u0000\u0000\u1afc\u1afd\u0005.\u0000\u0000\u1afd"+
		"\u1afe\u0005\u01c4\u0000\u0000\u1afe\u1aff\u0003\u053e\u029f\u0000\u1aff"+
		"\u1b00\u0003\u02ec\u0176\u0000\u1b00\u1b01\u0003\u0298\u014c\u0000\u1b01"+
		"\u02eb\u0001\u0000\u0000\u0000\u1b02\u1b05\u0003\u02ee\u0177\u0000\u1b03"+
		"\u1b05\u0001\u0000\u0000\u0000\u1b04\u1b02\u0001\u0000\u0000\u0000\u1b04"+
		"\u1b03\u0001\u0000\u0000\u0000\u1b05\u02ed\u0001\u0000\u0000\u0000\u1b06"+
		"\u1b07\u0005>\u0000\u0000\u1b07\u1b08\u0005\\\u0000\u0000\u1b08\u1b0d"+
		"\u0003\u0436\u021b\u0000\u1b09\u1b0a\u0005>\u0000\u0000\u1b0a\u1b0b\u0005"+
		"\u001e\u0000\u0000\u1b0b\u1b0d\u0005\u0157\u0000\u0000\u1b0c\u1b06\u0001"+
		"\u0000\u0000\u0000\u1b0c\u1b09\u0001\u0000\u0000\u0000\u1b0d\u02ef\u0001"+
		"\u0000\u0000\u0000\u1b0e\u1b0f\u0005\u008a\u0000\u0000\u1b0f\u1b10\u0005"+
		"\u01c4\u0000\u0000\u1b10\u1b11\u0003\u053e\u029f\u0000\u1b11\u1b12\u0005"+
		"\u0146\u0000\u0000\u1b12\u1b13\u0003\u01cc\u00e6\u0000\u1b13\u1b2a\u0001"+
		"\u0000\u0000\u0000\u1b14\u1b15\u0005\u008a\u0000\u0000\u1b15\u1b16\u0005"+
		"\u01c4\u0000\u0000\u1b16\u1b17\u0003\u053e\u029f\u0000\u1b17\u1b18\u0005"+
		"\u0085\u0000\u0000\u1b18\u1b19\u0005\\\u0000\u0000\u1b19\u1b1a\u0003\u0436"+
		"\u021b\u0000\u1b1a\u1b2a\u0001\u0000\u0000\u0000\u1b1b\u1b1c\u0005\u008a"+
		"\u0000\u0000\u1b1c\u1b1d\u0005\u01c4\u0000\u0000\u1b1d\u1b1e\u0003\u053e"+
		"\u029f\u0000\u1b1e\u1b1f\u0005\u0146\u0000\u0000\u1b1f\u1b20\u0005\\\u0000"+
		"\u0000\u1b20\u1b21\u0003\u0436\u021b\u0000\u1b21\u1b2a\u0001\u0000\u0000"+
		"\u0000\u1b22\u1b23\u0005\u008a\u0000\u0000\u1b23\u1b24\u0005\u01c4\u0000"+
		"\u0000\u1b24\u1b25\u0003\u053e\u029f\u0000\u1b25\u1b26\u0005\u00bf\u0000"+
		"\u0000\u1b26\u1b27\u0005\\\u0000\u0000\u1b27\u1b28\u0003\u0436\u021b\u0000"+
		"\u1b28\u1b2a\u0001\u0000\u0000\u0000\u1b29\u1b0e\u0001\u0000\u0000\u0000"+
		"\u1b29\u1b14\u0001\u0000\u0000\u0000\u1b29\u1b1b\u0001\u0000\u0000\u0000"+
		"\u1b29\u1b22\u0001\u0000\u0000\u0000\u1b2a\u02f1\u0001\u0000\u0000\u0000"+
		"\u1b2b\u1b2c\u0005.\u0000\u0000\u1b2c\u1b2d\u0005\u01c3\u0000\u0000\u1b2d"+
		"\u1b2e\u0003\u053e\u029f\u0000\u1b2e\u1b2f\u0005\u00a4\u0000\u0000\u1b2f"+
		"\u1b30\u0003\u0550\u02a8\u0000\u1b30\u1b31\u0005\u01c4\u0000\u0000\u1b31"+
		"\u1b32\u0003\u02f4\u017a\u0000\u1b32\u1b33\u0003\u0298\u014c\u0000\u1b33"+
		"\u02f3\u0001\u0000\u0000\u0000\u1b34\u1b39\u0003\u02f6\u017b\u0000\u1b35"+
		"\u1b36\u0005\u0006\u0000\u0000\u1b36\u1b38\u0003\u02f6\u017b\u0000\u1b37"+
		"\u1b35\u0001\u0000\u0000\u0000\u1b38\u1b3b\u0001\u0000\u0000\u0000\u1b39"+
		"\u1b37\u0001\u0000\u0000\u0000\u1b39\u1b3a\u0001\u0000\u0000\u0000\u1b3a"+
		"\u02f5\u0001\u0000\u0000\u0000\u1b3b\u1b39\u0001\u0000\u0000\u0000\u1b3c"+
		"\u1b3d\u0003\u0566\u02b3\u0000\u1b3d\u02f7\u0001\u0000\u0000\u0000\u1b3e"+
		"\u1b3f\u0005\u008a\u0000\u0000\u1b3f\u1b40\u0005\u01c3\u0000\u0000\u1b40"+
		"\u1b41\u0003\u053e\u029f\u0000\u1b41\u1b42\u0005\u0146\u0000\u0000\u1b42"+
		"\u1b43\u0003\u01cc\u00e6\u0000\u1b43\u1b64\u0001\u0000\u0000\u0000\u1b44"+
		"\u1b45\u0005\u008a\u0000\u0000\u1b45\u1b46\u0005\u01c3\u0000\u0000\u1b46"+
		"\u1b47\u0003\u053e\u029f\u0000\u1b47\u1b48\u0005\u00a4\u0000\u0000\u1b48"+
		"\u1b49\u0003\u0550\u02a8\u0000\u1b49\u1b64\u0001\u0000\u0000\u0000\u1b4a"+
		"\u1b4b\u0005\u008a\u0000\u0000\u1b4b\u1b4c\u0005\u01c3\u0000\u0000\u1b4c"+
		"\u1b4d\u0003\u053e\u029f\u0000\u1b4d\u1b4e\u0005\u012a\u0000\u0000\u1b4e"+
		"\u1b4f\u0005\u01c4\u0000\u0000\u1b4f\u1b50\u0003\u0298\u014c\u0000\u1b50"+
		"\u1b64\u0001\u0000\u0000\u0000\u1b51\u1b52\u0005\u008a\u0000\u0000\u1b52"+
		"\u1b53\u0005\u01c3\u0000\u0000\u1b53\u1b54\u0003\u053e\u029f\u0000\u1b54"+
		"\u1b55\u0005\u0146\u0000\u0000\u1b55\u1b56\u0005\u01c4\u0000\u0000\u1b56"+
		"\u1b57\u0003\u02f4\u017a\u0000\u1b57\u1b58\u0003\u0298\u014c\u0000\u1b58"+
		"\u1b64\u0001\u0000\u0000\u0000\u1b59\u1b5a\u0005\u008a\u0000\u0000\u1b5a"+
		"\u1b5b\u0005\u01c3\u0000\u0000\u1b5b\u1b5c\u0003\u053e\u029f\u0000\u1b5c"+
		"\u1b5d\u0005\u00c1\u0000\u0000\u1b5d\u1b64\u0001\u0000\u0000\u0000\u1b5e"+
		"\u1b5f\u0005\u008a\u0000\u0000\u1b5f\u1b60\u0005\u01c3\u0000\u0000\u1b60"+
		"\u1b61\u0003\u053e\u029f\u0000\u1b61\u1b62\u0005\u00ba\u0000\u0000\u1b62"+
		"\u1b64\u0001\u0000\u0000\u0000\u1b63\u1b3e\u0001\u0000\u0000\u0000\u1b63"+
		"\u1b44\u0001\u0000\u0000\u0000\u1b63\u1b4a\u0001\u0000\u0000\u0000\u1b63"+
		"\u1b51\u0001\u0000\u0000\u0000\u1b63\u1b59\u0001\u0000\u0000\u0000\u1b63"+
		"\u1b5e\u0001\u0000\u0000\u0000\u1b64\u02f9\u0001\u0000\u0000\u0000\u1b65"+
		"\u1b66\u0005\u00bf\u0000\u0000\u1b66\u1b67\u0005\u01c3\u0000\u0000\u1b67"+
		"\u1b68\u0003\u053e\u029f\u0000\u1b68\u1b69\u0003l6\u0000\u1b69\u1b72\u0001"+
		"\u0000\u0000\u0000\u1b6a\u1b6b\u0005\u00bf\u0000\u0000\u1b6b\u1b6c\u0005"+
		"\u01c3\u0000\u0000\u1b6c\u1b6d\u0005\u00dc\u0000\u0000\u1b6d\u1b6e\u0005"+
		"\u0185\u0000\u0000\u1b6e\u1b6f\u0003\u053e\u029f\u0000\u1b6f\u1b70\u0003"+
		"l6\u0000\u1b70\u1b72\u0001\u0000\u0000\u0000\u1b71\u1b65\u0001\u0000\u0000"+
		"\u0000\u1b71\u1b6a\u0001\u0000\u0000\u0000\u1b72\u02fb\u0001\u0000\u0000"+
		"\u0000\u1b73\u1b74\u0005.\u0000\u0000\u1b74\u1b75\u0003\u026a\u0135\u0000"+
		"\u1b75\u1b76\u0005\u013a\u0000\u0000\u1b76\u1b77\u0003\u053e\u029f\u0000"+
		"\u1b77\u1b78\u0005$\u0000\u0000\u1b78\u1b79\u0005P\u0000\u0000\u1b79\u1b7a"+
		"\u0003\u0306\u0183\u0000\u1b7a\u1b7b\u0005^\u0000\u0000\u1b7b\u1b7c\u0003"+
		"\u053a\u029d\u0000\u1b7c\u1b7d\u0003\u0448\u0224\u0000\u1b7d\u1b7e\u0005"+
		"9\u0000\u0000\u1b7e\u1b7f\u0003\u0308\u0184\u0000\u1b7f\u1b80\u0003\u02fe"+
		"\u017f\u0000\u1b80\u02fd\u0001\u0000\u0000\u0000\u1b81\u1b88\u0005\u0107"+
		"\u0000\u0000\u1b82\u1b88\u0003\u0302\u0181\u0000\u1b83\u1b84\u0005\u0002"+
		"\u0000\u0000\u1b84\u1b85\u0003\u0300\u0180\u0000\u1b85\u1b86\u0005\u0003"+
		"\u0000\u0000\u1b86\u1b88\u0001\u0000\u0000\u0000\u1b87\u1b81\u0001\u0000"+
		"\u0000\u0000\u1b87\u1b82\u0001\u0000\u0000\u0000\u1b87\u1b83\u0001\u0000"+
		"\u0000\u0000\u1b88\u02ff\u0001\u0000\u0000\u0000\u1b89\u1b8e\u0003\u0304"+
		"\u0182\u0000\u1b8a\u1b8b\u0005\u0007\u0000\u0000\u1b8b\u1b8d\u0003\u0304"+
		"\u0182\u0000\u1b8c\u1b8a\u0001\u0000\u0000\u0000\u1b8d\u1b90\u0001\u0000"+
		"\u0000\u0000\u1b8e\u1b8c\u0001\u0000\u0000\u0000\u1b8e\u1b8f\u0001\u0000"+
		"\u0000\u0000\u1b8f\u0301\u0001\u0000\u0000\u0000\u1b90\u1b8e\u0001\u0000"+
		"\u0000\u0000\u1b91\u1b97\u0003\u03c0\u01e0\u0000\u1b92\u1b97\u0003\u0386"+
		"\u01c3\u0000\u1b93\u1b97\u0003\u03ae\u01d7\u0000\u1b94\u1b97\u0003\u03a0"+
		"\u01d0\u0000\u1b95\u1b97\u0003\u030a\u0185\u0000\u1b96\u1b91\u0001\u0000"+
		"\u0000\u0000\u1b96\u1b92\u0001\u0000\u0000\u0000\u1b96\u1b93\u0001\u0000"+
		"\u0000\u0000\u1b96\u1b94\u0001\u0000\u0000\u0000\u1b96\u1b95\u0001\u0000"+
		"\u0000\u0000\u1b97\u0303\u0001\u0000\u0000\u0000\u1b98\u1b9b\u0003\u0302"+
		"\u0181\u0000\u1b99\u1b9b\u0001\u0000\u0000\u0000\u1b9a\u1b98\u0001\u0000"+
		"\u0000\u0000\u1b9a\u1b99\u0001\u0000\u0000\u0000\u1b9b\u0305\u0001\u0000"+
		"\u0000\u0000\u1b9c\u1b9d\u0007\u001d\u0000\u0000\u1b9d\u0307\u0001\u0000"+
		"\u0000\u0000\u1b9e\u1ba2\u0005\u00e9\u0000\u0000\u1b9f\u1ba2\u0005\u0089"+
		"\u0000\u0000\u1ba0\u1ba2\u0001\u0000\u0000\u0000\u1ba1\u1b9e\u0001\u0000"+
		"\u0000\u0000\u1ba1\u1b9f\u0001\u0000\u0000\u0000\u1ba1\u1ba0\u0001\u0000"+
		"\u0000\u0000\u1ba2\u0309\u0001\u0000\u0000\u0000\u1ba3\u1ba4\u0005\u0108"+
		"\u0000\u0000\u1ba4\u1ba5\u0003\u055e\u02af\u0000\u1ba5\u1ba6\u0003\u030c"+
		"\u0186\u0000\u1ba6\u030b\u0001\u0000\u0000\u0000\u1ba7\u1ba8\u0005\u0006"+
		"\u0000\u0000\u1ba8\u1bab\u0003\u0550\u02a8\u0000\u1ba9\u1bab\u0001\u0000"+
		"\u0000\u0000\u1baa\u1ba7\u0001\u0000\u0000\u0000\u1baa\u1ba9\u0001\u0000"+
		"\u0000\u0000\u1bab\u030d\u0001\u0000\u0000\u0000\u1bac\u1bad\u0005\u00f3"+
		"\u0000\u0000\u1bad\u1bae\u0003\u055e\u02af\u0000\u1bae\u030f\u0001\u0000"+
		"\u0000\u0000\u1baf\u1bb0\u0005\u0167\u0000\u0000\u1bb0\u1bb4\u0003\u055e"+
		"\u02af\u0000\u1bb1\u1bb2\u0005\u0167\u0000\u0000\u1bb2\u1bb4\u0005\t\u0000"+
		"\u0000\u1bb3\u1baf\u0001\u0000\u0000\u0000\u1bb3\u1bb1\u0001\u0000\u0000"+
		"\u0000\u1bb4\u0311\u0001\u0000\u0000\u0000\u1bb5\u1bb6\u0005\u0081\u0000"+
		"\u0000\u1bb6\u1bb7\u0003\u0314\u018a\u0000\u1bb7\u1bb8\u0003\u031c\u018e"+
		"\u0000\u1bb8\u1be8\u0001\u0000\u0000\u0000\u1bb9\u1bba\u0005\u0092\u0000"+
		"\u0000\u1bba\u1bbb\u0003\u0314\u018a\u0000\u1bbb\u1bbc\u0003\u031a\u018d"+
		"\u0000\u1bbc\u1be8\u0001\u0000\u0000\u0000\u1bbd\u1bbe\u0005\u014d\u0000"+
		"\u0000\u1bbe\u1bbf\u0005\u015d\u0000\u0000\u1bbf\u1be8\u0003\u031a\u018d"+
		"\u0000\u1bc0\u1bc1\u0005\u00a1\u0000\u0000\u1bc1\u1bc2\u0003\u0314\u018a"+
		"\u0000\u1bc2\u1bc3\u0003\u031c\u018e\u0000\u1bc3\u1be8\u0001\u0000\u0000"+
		"\u0000\u1bc4\u1bc5\u0005\u01c6\u0000\u0000\u1bc5\u1bc6\u0003\u0314\u018a"+
		"\u0000\u1bc6\u1bc7\u0003\u031c\u018e\u0000\u1bc7\u1be8\u0001\u0000\u0000"+
		"\u0000\u1bc8\u1bc9\u0005\u0138\u0000\u0000\u1bc9\u1bca\u0003\u0314\u018a"+
		"\u0000\u1bca\u1bcb\u0003\u031c\u018e\u0000\u1bcb\u1be8\u0001\u0000\u0000"+
		"\u0000\u1bcc\u1bcd\u0005\u013b\u0000\u0000\u1bcd\u1be8\u0003\u055e\u02af"+
		"\u0000\u1bce\u1bcf\u0005\u012d\u0000\u0000\u1bcf\u1bd0\u0005\u013b\u0000"+
		"\u0000\u1bd0\u1be8\u0003\u055e\u02af\u0000\u1bd1\u1bd2\u0005\u012d\u0000"+
		"\u0000\u1bd2\u1be8\u0003\u055e\u02af\u0000\u1bd3\u1bd4\u0005\u0138\u0000"+
		"\u0000\u1bd4\u1bd5\u0003\u0314\u018a\u0000\u1bd5\u1bd6\u0005^\u0000\u0000"+
		"\u1bd6\u1bd7\u0005\u013b\u0000\u0000\u1bd7\u1bd8\u0003\u055e\u02af\u0000"+
		"\u1bd8\u1be8\u0001\u0000\u0000\u0000\u1bd9\u1bda\u0005\u0138\u0000\u0000"+
		"\u1bda\u1bdb\u0003\u0314\u018a\u0000\u1bdb\u1bdc\u0005^\u0000\u0000\u1bdc"+
		"\u1bdd\u0003\u055e\u02af\u0000\u1bdd\u1be8\u0001\u0000\u0000\u0000\u1bde"+
		"\u1bdf\u0005\u011b\u0000\u0000\u1bdf\u1be0\u0005\u015d\u0000\u0000\u1be0"+
		"\u1be8\u0003\u0550\u02a8\u0000\u1be1\u1be2\u0005\u00a1\u0000\u0000\u1be2"+
		"\u1be3\u0005\u011c\u0000\u0000\u1be3\u1be8\u0003\u0550\u02a8\u0000\u1be4"+
		"\u1be5\u0005\u0138\u0000\u0000\u1be5\u1be6\u0005\u011c\u0000\u0000\u1be6"+
		"\u1be8\u0003\u0550\u02a8\u0000\u1be7\u1bb5\u0001\u0000\u0000\u0000\u1be7"+
		"\u1bb9\u0001\u0000\u0000\u0000\u1be7\u1bbd\u0001\u0000\u0000\u0000\u1be7"+
		"\u1bc0\u0001\u0000\u0000\u0000\u1be7\u1bc4\u0001\u0000\u0000\u0000\u1be7"+
		"\u1bc8\u0001\u0000\u0000\u0000\u1be7\u1bcc\u0001\u0000\u0000\u0000\u1be7"+
		"\u1bce\u0001\u0000\u0000\u0000\u1be7\u1bd1\u0001\u0000\u0000\u0000\u1be7"+
		"\u1bd3\u0001\u0000\u0000\u0000\u1be7\u1bd9\u0001\u0000\u0000\u0000\u1be7"+
		"\u1bde\u0001\u0000\u0000\u0000\u1be7\u1be1\u0001\u0000\u0000\u0000\u1be7"+
		"\u1be4\u0001\u0000\u0000\u0000\u1be8\u0313\u0001\u0000\u0000\u0000\u1be9"+
		"\u1bed\u0005\u0175\u0000\u0000\u1bea\u1bed\u0005\u015d\u0000\u0000\u1beb"+
		"\u1bed\u0001\u0000\u0000\u0000\u1bec\u1be9\u0001\u0000\u0000\u0000\u1bec"+
		"\u1bea\u0001\u0000\u0000\u0000\u1bec\u1beb\u0001\u0000\u0000\u0000\u1bed"+
		"\u0315\u0001\u0000\u0000\u0000\u1bee\u1bef\u0005\u00eb\u0000\u0000\u1bef"+
		"\u1bf0\u0005\u00f2\u0000\u0000\u1bf0\u1bf9\u0003@ \u0000\u1bf1\u1bf2\u0005"+
		"\u0125\u0000\u0000\u1bf2\u1bf9\u0005Q\u0000\u0000\u1bf3\u1bf4\u0005\u0125"+
		"\u0000\u0000\u1bf4\u1bf9\u0005\u0177\u0000\u0000\u1bf5\u1bf9\u00056\u0000"+
		"\u0000\u1bf6\u1bf7\u0005M\u0000\u0000\u1bf7\u1bf9\u00056\u0000\u0000\u1bf8"+
		"\u1bee\u0001\u0000\u0000\u0000\u1bf8\u1bf1\u0001\u0000\u0000\u0000\u1bf8"+
		"\u1bf3\u0001\u0000\u0000\u0000\u1bf8\u1bf5\u0001\u0000\u0000\u0000\u1bf8"+
		"\u1bf6\u0001\u0000\u0000\u0000\u1bf9\u0317\u0001\u0000\u0000\u0000\u1bfa"+
		"\u1c01\u0003\u0316\u018b\u0000\u1bfb\u1bfd\u0005\u0006\u0000\u0000\u1bfc"+
		"\u1bfb\u0001\u0000\u0000\u0000\u1bfc\u1bfd\u0001\u0000\u0000\u0000\u1bfd"+
		"\u1bfe\u0001\u0000\u0000\u0000\u1bfe\u1c00\u0003\u0316\u018b\u0000\u1bff"+
		"\u1bfc\u0001\u0000\u0000\u0000\u1c00\u1c03\u0001\u0000\u0000\u0000\u1c01"+
		"\u1bff\u0001\u0000\u0000\u0000\u1c01\u1c02\u0001\u0000\u0000\u0000\u1c02"+
		"\u0319\u0001\u0000\u0000\u0000\u1c03\u1c01\u0001\u0000\u0000\u0000\u1c04"+
		"\u1c07\u0003\u0318\u018c\u0000\u1c05\u1c07\u0001\u0000\u0000\u0000\u1c06"+
		"\u1c04\u0001\u0000\u0000\u0000\u1c06\u1c05\u0001\u0000\u0000\u0000\u1c07"+
		"\u031b\u0001\u0000\u0000\u0000\u1c08\u1c0a\u0005!\u0000\u0000\u1c09\u1c0b"+
		"\u0005\u0106\u0000\u0000\u1c0a\u1c09\u0001\u0000\u0000\u0000\u1c0a\u1c0b"+
		"\u0001\u0000\u0000\u0000\u1c0b\u1c0c\u0001\u0000\u0000\u0000\u1c0c\u1c0f"+
		"\u0005\u0099\u0000\u0000\u1c0d\u1c0f\u0001\u0000\u0000\u0000\u1c0e\u1c08"+
		"\u0001\u0000\u0000\u0000\u1c0e\u1c0d\u0001\u0000\u0000\u0000\u1c0f\u031d"+
		"\u0001\u0000\u0000\u0000\u1c10\u1c13\u0005.\u0000\u0000\u1c11\u1c12\u0005"+
		"R\u0000\u0000\u1c12\u1c14\u0005\u0130\u0000\u0000\u1c13\u1c11\u0001\u0000"+
		"\u0000\u0000\u1c13\u1c14\u0001\u0000\u0000\u0000\u1c14\u1c15\u0001\u0000"+
		"\u0000\u0000\u1c15\u1c23\u0003\u00aeW\u0000\u1c16\u1c17\u0005\u0171\u0000"+
		"\u0000\u1c17\u1c18\u0003\u053a\u029d\u0000\u1c18\u1c19\u0003\u00d6k\u0000"+
		"\u1c19\u1c1a\u0003v;\u0000\u1c1a\u1c24\u0001\u0000\u0000\u0000\u1c1b\u1c1c"+
		"\u0005\u0128\u0000\u0000\u1c1c\u1c1d\u0005\u0171\u0000\u0000\u1c1d\u1c1e"+
		"\u0003\u053a\u029d\u0000\u1c1e\u1c1f\u0005\u0002\u0000\u0000\u1c1f\u1c20"+
		"\u0003\u00d8l\u0000\u1c20\u1c21\u0005\u0003\u0000\u0000\u1c21\u1c22\u0003"+
		"v;\u0000\u1c22\u1c24\u0001\u0000\u0000\u0000\u1c23\u1c16\u0001\u0000\u0000"+
		"\u0000\u1c23\u1c1b\u0001\u0000\u0000\u0000\u1c24\u1c25\u0001\u0000\u0000"+
		"\u0000\u1c25\u1c26\u0005$\u0000\u0000\u1c26\u1c27\u0003\u03c0\u01e0\u0000"+
		"\u1c27\u1c28\u0003\u0320\u0190\u0000\u1c28\u031f\u0001\u0000\u0000\u0000"+
		"\u1c29\u1c2b\u0005i\u0000\u0000\u1c2a\u1c2c\u0007\u001e\u0000\u0000\u1c2b"+
		"\u1c2a\u0001\u0000\u0000\u0000\u1c2b\u1c2c\u0001\u0000\u0000\u0000\u1c2c"+
		"\u1c2d\u0001\u0000\u0000\u0000\u1c2d\u1c2e\u0005*\u0000\u0000\u1c2e\u1c31"+
		"\u0005\u0110\u0000\u0000\u1c2f\u1c31\u0001\u0000\u0000\u0000\u1c30\u1c29"+
		"\u0001\u0000\u0000\u0000\u1c30\u1c2f\u0001\u0000\u0000\u0000\u1c31\u0321"+
		"\u0001\u0000\u0000\u0000\u1c32\u1c33\u0005\u00f4\u0000\u0000\u1c33\u1c34"+
		"\u0003\u0542\u02a1\u0000\u1c34\u0323\u0001\u0000\u0000\u0000\u1c35\u1c36"+
		"\u0005.\u0000\u0000\u1c36\u1c37\u0005\u00af\u0000\u0000\u1c37\u1c38\u0003"+
		"\u053e\u029f\u0000\u1c38\u1c39\u0003\u0010\b\u0000\u1c39\u1c3a\u0003\u0326"+
		"\u0193\u0000\u1c3a\u0325\u0001\u0000\u0000\u0000\u1c3b\u1c3e\u0003\u0328"+
		"\u0194\u0000\u1c3c\u1c3e\u0001\u0000\u0000\u0000\u1c3d\u1c3b\u0001\u0000"+
		"\u0000\u0000\u1c3d\u1c3c\u0001\u0000\u0000\u0000\u1c3e\u0327\u0001\u0000"+
		"\u0000\u0000\u1c3f\u1c41\u0003\u032a\u0195\u0000\u1c40\u1c3f\u0001\u0000"+
		"\u0000\u0000\u1c41\u1c42\u0001\u0000\u0000\u0000\u1c42\u1c40\u0001\u0000"+
		"\u0000\u0000\u1c42\u1c43\u0001\u0000\u0000\u0000\u1c43\u0329\u0001\u0000"+
		"\u0000\u0000\u1c44\u1c45\u0003\u032c\u0196\u0000\u1c45\u1c49\u0003\u032e"+
		"\u0197\u0000\u1c46\u1c4a\u0003\u0556\u02ab\u0000\u1c47\u1c4a\u0003B!\u0000"+
		"\u1c48\u1c4a\u00055\u0000\u0000\u1c49\u1c46\u0001\u0000\u0000\u0000\u1c49"+
		"\u1c47\u0001\u0000\u0000\u0000\u1c49\u1c48\u0001\u0000\u0000\u0000\u1c4a"+
		"\u032b\u0001\u0000\u0000\u0000\u1c4b\u1c54\u0003\u0568\u02b4\u0000\u1c4c"+
		"\u1c4d\u0005\u00a4\u0000\u0000\u1c4d\u1c54\u0005J\u0000\u0000\u1c4e\u1c54"+
		"\u0005\u00c2\u0000\u0000\u1c4f\u1c54\u0005\u00f6\u0000\u0000\u1c50\u1c54"+
		"\u0005\u0113\u0000\u0000\u1c51\u1c54\u0005\u0158\u0000\u0000\u1c52\u1c54"+
		"\u0005\u015a\u0000\u0000\u1c53\u1c4b\u0001\u0000\u0000\u0000\u1c53\u1c4c"+
		"\u0001\u0000\u0000\u0000\u1c53\u1c4e\u0001\u0000\u0000\u0000\u1c53\u1c4f"+
		"\u0001\u0000\u0000\u0000\u1c53\u1c50\u0001\u0000\u0000\u0000\u1c53\u1c51"+
		"\u0001\u0000\u0000\u0000\u1c53\u1c52\u0001\u0000\u0000\u0000\u1c54\u032d"+
		"\u0001\u0000\u0000\u0000\u1c55\u1c58\u0005\n\u0000\u0000\u1c56\u1c58\u0001"+
		"\u0000\u0000\u0000\u1c57\u1c55\u0001\u0000\u0000\u0000\u1c57\u1c56\u0001"+
		"\u0000\u0000\u0000\u1c58\u032f\u0001\u0000\u0000\u0000\u1c59\u1c5a\u0005"+
		"\u008a\u0000\u0000\u1c5a\u1c5b\u0005\u00af\u0000\u0000\u1c5b\u1c62\u0003"+
		"\u053e\u029f\u0000\u1c5c\u1c5d\u0005i\u0000\u0000\u1c5d\u1c63\u0003\u0326"+
		"\u0193\u0000\u1c5e\u1c63\u0003\u0326\u0193\u0000\u1c5f\u1c60\u0005\u0146"+
		"\u0000\u0000\u1c60\u1c61\u0005\u0158\u0000\u0000\u1c61\u1c63\u0003\u053e"+
		"\u029f\u0000\u1c62\u1c5c\u0001\u0000\u0000\u0000\u1c62\u1c5e\u0001\u0000"+
		"\u0000\u0000\u1c62\u1c5f\u0001\u0000\u0000\u0000\u1c63\u0331\u0001\u0000"+
		"\u0000\u0000\u1c64\u1c65\u0005\u008a\u0000\u0000\u1c65\u1c66\u0005\u00af"+
		"\u0000\u0000\u1c66\u1c67\u0003\u053e\u029f\u0000\u1c67\u1c68\u0003P(\u0000"+
		"\u1c68\u0333\u0001\u0000\u0000\u0000\u1c69\u1c6a\u0005\u00bf\u0000\u0000"+
		"\u1c6a\u1c6d\u0005\u00af\u0000\u0000\u1c6b\u1c6c\u0005\u00dc\u0000\u0000"+
		"\u1c6c\u1c6e\u0005\u0185\u0000\u0000\u1c6d\u1c6b\u0001\u0000\u0000\u0000"+
		"\u1c6d\u1c6e\u0001\u0000\u0000\u0000\u1c6e\u1c6f\u0001\u0000\u0000\u0000"+
		"\u1c6f\u1c75\u0003\u053e\u029f\u0000\u1c70\u1c71\u0003\u0010\b\u0000\u1c71"+
		"\u1c72\u0005\u0002\u0000\u0000\u1c72\u1c73\u0003\u0336\u019b\u0000\u1c73"+
		"\u1c74\u0005\u0003\u0000\u0000\u1c74\u1c76\u0001\u0000\u0000\u0000\u1c75"+
		"\u1c70\u0001\u0000\u0000\u0000\u1c75\u1c76\u0001\u0000\u0000\u0000\u1c76"+
		"\u0335\u0001\u0000\u0000\u0000\u1c77\u1c7c\u0003\u0338\u019c\u0000\u1c78"+
		"\u1c79\u0005\u0006\u0000\u0000\u1c79\u1c7b\u0003\u0338\u019c\u0000\u1c7a"+
		"\u1c78\u0001\u0000\u0000\u0000\u1c7b\u1c7e\u0001\u0000\u0000\u0000\u1c7c"+
		"\u1c7a\u0001\u0000\u0000\u0000\u1c7c\u1c7d\u0001\u0000\u0000\u0000\u1c7d"+
		"\u0337\u0001\u0000\u0000\u0000\u1c7e\u1c7c\u0001\u0000\u0000\u0000\u1c7f"+
		"\u1c80\u0005\u00d1\u0000\u0000\u1c80\u0339\u0001\u0000\u0000\u0000\u1c81"+
		"\u1c82\u0005\u008a\u0000\u0000\u1c82\u1c83\u0005l\u0000\u0000\u1c83\u1c84"+
		"\u0003\u020c\u0106\u0000\u1c84\u1c85\u0005\u012a\u0000\u0000\u1c85\u1c86"+
		"\u0005\u0170\u0000\u0000\u1c86\u033b\u0001\u0000\u0000\u0000\u1c87\u1c88"+
		"\u0005\u008a\u0000\u0000\u1c88\u1c89\u0005\u0156\u0000\u0000\u1c89\u1c8a"+
		"\u0007\u001f\u0000\u0000\u1c8a\u1c8b\u00036\u001b\u0000\u1c8b\u033d\u0001"+
		"\u0000\u0000\u0000\u1c8c\u1c8d\u0005.\u0000\u0000\u1c8d\u1c8e\u0005\u00bd"+
		"\u0000\u0000\u1c8e\u1c8f\u0003\u020c\u0106\u0000\u1c8f\u1c90\u0003\u0342"+
		"\u01a1\u0000\u1c90\u1c91\u0003\u0460\u0230\u0000\u1c91\u1c92\u0003\u00c0"+
		"`\u0000\u1c92\u033f\u0001\u0000\u0000\u0000\u1c93\u1c94\u0005\u008a\u0000"+
		"\u0000\u1c94\u1c95\u0005\u00bd\u0000\u0000\u1c95\u1cab\u0003\u020c\u0106"+
		"\u0000\u1c96\u1cac\u0003j5\u0000\u1c97\u1c98\u0005\u00bf\u0000\u0000\u1c98"+
		"\u1c99\u0005M\u0000\u0000\u1c99\u1cac\u0005N\u0000\u0000\u1c9a\u1c9b\u0005"+
		"\u0146\u0000\u0000\u1c9b\u1c9c\u0005M\u0000\u0000\u1c9c\u1cac\u0005N\u0000"+
		"\u0000\u1c9d\u1c9e\u0005\u0085\u0000\u0000\u1c9e\u1cac\u0003\u00d0h\u0000"+
		"\u1c9f\u1ca0\u0005\u00bf\u0000\u0000\u1ca0\u1ca3\u0005-\u0000\u0000\u1ca1"+
		"\u1ca2\u0005\u00dc\u0000\u0000\u1ca2\u1ca4\u0005\u0185\u0000\u0000\u1ca3"+
		"\u1ca1\u0001\u0000\u0000\u0000\u1ca3\u1ca4\u0001\u0000\u0000\u0000\u1ca4"+
		"\u1ca5\u0001\u0000\u0000\u0000\u1ca5\u1ca6\u0003\u053e\u029f\u0000\u1ca6"+
		"\u1ca7\u0003l6\u0000\u1ca7\u1cac\u0001\u0000\u0000\u0000\u1ca8\u1ca9\u0005"+
		"\u016d\u0000\u0000\u1ca9\u1caa\u0005-\u0000\u0000\u1caa\u1cac\u0003\u053e"+
		"\u029f\u0000\u1cab\u1c96\u0001\u0000\u0000\u0000\u1cab\u1c97\u0001\u0000"+
		"\u0000\u0000\u1cab\u1c9a\u0001\u0000\u0000\u0000\u1cab\u1c9d\u0001\u0000"+
		"\u0000\u0000\u1cab\u1c9f\u0001\u0000\u0000\u0000\u1cab\u1ca8\u0001\u0000"+
		"\u0000\u0000\u1cac\u0341\u0001\u0000\u0000\u0000\u1cad\u1cb0\u0005$\u0000"+
		"\u0000\u1cae\u1cb0\u0001\u0000\u0000\u0000\u1caf\u1cad\u0001\u0000\u0000"+
		"\u0000\u1caf\u1cae\u0001\u0000\u0000\u0000\u1cb0\u0343\u0001\u0000\u0000"+
		"\u0000\u1cb1\u1cb2\u0005\u008a\u0000\u0000\u1cb2\u1cb3\u0005\u015c\u0000"+
		"\u0000\u1cb3\u1cb4\u0005\u013e\u0000\u0000\u1cb4\u1cb5\u0005\u00b9\u0000"+
		"\u0000\u1cb5\u1cb6\u0003\u020c\u0106\u0000\u1cb6\u1cb7\u0003\u01cc\u00e6"+
		"\u0000\u1cb7\u0345\u0001\u0000\u0000\u0000\u1cb8\u1cb9\u0005\u008a\u0000"+
		"\u0000\u1cb9\u1cba\u0005\u015c\u0000\u0000\u1cba\u1cbb\u0005\u013e\u0000"+
		"\u0000\u1cbb\u1cbc\u0005\u00a3\u0000\u0000\u1cbc\u1cbd\u0003\u020c\u0106"+
		"\u0000\u1cbd\u1cbe\u0005\u0085\u0000\u0000\u1cbe\u1cbf\u0005\u00f8\u0000"+
		"\u0000\u1cbf\u1cc0\u0005>\u0000\u0000\u1cc0\u1cc1\u0003\u053c\u029e\u0000"+
		"\u1cc1\u1cc2\u0003\u0348\u01a4\u0000\u1cc2\u1cc3\u0003\u020a\u0105\u0000"+
		"\u1cc3\u1d01\u0001\u0000\u0000\u0000\u1cc4\u1cc5\u0005\u008a\u0000\u0000"+
		"\u1cc5\u1cc6\u0005\u015c\u0000\u0000\u1cc6\u1cc7\u0005\u013e\u0000\u0000"+
		"\u1cc7\u1cc8\u0005\u00a3\u0000\u0000\u1cc8\u1cc9\u0003\u020c\u0106\u0000"+
		"\u1cc9\u1cca\u0005\u008a\u0000\u0000\u1cca\u1ccb\u0005\u00f8\u0000\u0000"+
		"\u1ccb\u1ccc\u0005>\u0000\u0000\u1ccc\u1ccd\u0003\u053c\u029e\u0000\u1ccd"+
		"\u1cce\u0003\u0348\u01a4\u0000\u1cce\u1ccf\u0003\u020a\u0105\u0000\u1ccf"+
		"\u1d01\u0001\u0000\u0000\u0000\u1cd0\u1cd1\u0005\u008a\u0000\u0000\u1cd1"+
		"\u1cd2\u0005\u015c\u0000\u0000\u1cd2\u1cd3\u0005\u013e\u0000\u0000\u1cd3"+
		"\u1cd4\u0005\u00a3\u0000\u0000\u1cd4\u1cd5\u0003\u020c\u0106\u0000\u1cd5"+
		"\u1cd6\u0005\u008a\u0000\u0000\u1cd6\u1cd7\u0005\u00f8\u0000\u0000\u1cd7"+
		"\u1cd8\u0005\u0130\u0000\u0000\u1cd8\u1cd9\u0003\u020c\u0106\u0000\u1cd9"+
		"\u1cda\u0003\u0348\u01a4\u0000\u1cda\u1cdb\u0003\u020c\u0106\u0000\u1cdb"+
		"\u1d01\u0001\u0000\u0000\u0000\u1cdc\u1cdd\u0005\u008a\u0000\u0000\u1cdd"+
		"\u1cde\u0005\u015c\u0000\u0000\u1cde\u1cdf\u0005\u013e\u0000\u0000\u1cdf"+
		"\u1ce0\u0005\u00a3\u0000\u0000\u1ce0\u1ce1\u0003\u020c\u0106\u0000\u1ce1"+
		"\u1ce2\u0005\u008a\u0000\u0000\u1ce2\u1ce3\u0005\u00f8\u0000\u0000\u1ce3"+
		"\u1ce4\u0005>\u0000\u0000\u1ce4\u1ce5\u0003\u053c\u029e\u0000\u1ce5\u1ce6"+
		"\u0005\u0130\u0000\u0000\u1ce6\u1ce7\u0003\u020c\u0106\u0000\u1ce7\u1ce8"+
		"\u0003\u0348\u01a4\u0000\u1ce8\u1ce9\u0003\u020c\u0106\u0000\u1ce9\u1d01"+
		"\u0001\u0000\u0000\u0000\u1cea\u1ceb\u0005\u008a\u0000\u0000\u1ceb\u1cec"+
		"\u0005\u015c\u0000\u0000\u1cec\u1ced\u0005\u013e\u0000\u0000\u1ced\u1cee"+
		"\u0005\u00a3\u0000\u0000\u1cee\u1cef\u0003\u020c\u0106\u0000\u1cef\u1cf0"+
		"\u0005\u00bf\u0000\u0000\u1cf0\u1cf1\u0005\u00f8\u0000\u0000\u1cf1\u1cf2"+
		"\u0005>\u0000\u0000\u1cf2\u1cf3\u0003\u053c\u029e\u0000\u1cf3\u1d01\u0001"+
		"\u0000\u0000\u0000\u1cf4\u1cf5\u0005\u008a\u0000\u0000\u1cf5\u1cf6\u0005"+
		"\u015c\u0000\u0000\u1cf6\u1cf7\u0005\u013e\u0000\u0000\u1cf7\u1cf8\u0005"+
		"\u00a3\u0000\u0000\u1cf8\u1cf9\u0003\u020c\u0106\u0000\u1cf9\u1cfa\u0005"+
		"\u00bf\u0000\u0000\u1cfa\u1cfb\u0005\u00f8\u0000\u0000\u1cfb\u1cfc\u0005"+
		"\u00dc\u0000\u0000\u1cfc\u1cfd\u0005\u0185\u0000\u0000\u1cfd\u1cfe\u0005"+
		">\u0000\u0000\u1cfe\u1cff\u0003\u053c\u029e\u0000\u1cff\u1d01\u0001\u0000"+
		"\u0000\u0000\u1d00\u1cb8\u0001\u0000\u0000\u0000\u1d00\u1cc4\u0001\u0000"+
		"\u0000\u0000\u1d00\u1cd0\u0001\u0000\u0000\u0000\u1d00\u1cdc\u0001\u0000"+
		"\u0000\u0000\u1d00\u1cea\u0001\u0000\u0000\u0000\u1d00\u1cf4\u0001\u0000"+
		"\u0000\u0000\u1d01\u0347\u0001\u0000\u0000\u0000\u1d02\u1d03\u0005i\u0000"+
		"\u0000\u1d03\u0349\u0001\u0000\u0000\u0000\u1d04\u1d05\u0005.\u0000\u0000"+
		"\u1d05\u1d06\u0003\u01e8\u00f4\u0000\u1d06\u1d07\u0005\u00a8\u0000\u0000"+
		"\u1d07\u1d08\u0003\u020c\u0106\u0000\u1d08\u1d09\u0005>\u0000\u0000\u1d09"+
		"\u1d0a\u0003\u0550\u02a8\u0000\u1d0a\u1d0b\u0005^\u0000\u0000\u1d0b\u1d0c"+
		"\u0003\u0550\u02a8\u0000\u1d0c\u1d0d\u0005@\u0000\u0000\u1d0d\u1d0e\u0003"+
		"\u020c\u0106\u0000\u1d0e\u034b\u0001\u0000\u0000\u0000\u1d0f\u1d10\u0005"+
		"\u009e\u0000\u0000\u1d10\u1d11\u0003\u0360\u01b0\u0000\u1d11\u1d12\u0003"+
		"\u053a\u029d\u0000\u1d12\u1d13\u0003\u034e\u01a7\u0000\u1d13\u1d1d\u0001"+
		"\u0000\u0000\u0000\u1d14\u1d15\u0005\u009e\u0000\u0000\u1d15\u1d1d\u0003"+
		"\u0360\u01b0\u0000\u1d16\u1d17\u0005\u009e\u0000\u0000\u1d17\u1d18\u0003"+
		"\u0360\u01b0\u0000\u1d18\u1d19\u0003\u053e\u029f\u0000\u1d19\u1d1a\u0005"+
		"P\u0000\u0000\u1d1a\u1d1b\u0003\u053a\u029d\u0000\u1d1b\u1d1d\u0001\u0000"+
		"\u0000\u0000\u1d1c\u1d0f\u0001\u0000\u0000\u0000\u1d1c\u1d14\u0001\u0000"+
		"\u0000\u0000\u1d1c\u1d16\u0001\u0000\u0000\u0000\u1d1d\u034d\u0001\u0000"+
		"\u0000\u0000\u1d1e\u1d1f\u0005d\u0000\u0000\u1d1f\u1d22\u0003\u053e\u029f"+
		"\u0000\u1d20\u1d22\u0001\u0000\u0000\u0000\u1d21\u1d1e\u0001\u0000\u0000"+
		"\u0000\u1d21\u1d20\u0001\u0000\u0000\u0000\u1d22\u034f\u0001\u0000\u0000"+
		"\u0000\u1d23\u1d24\u0005\u016b\u0000\u0000\u1d24\u1d25\u0003\u0362\u01b1"+
		"\u0000\u1d25\u1d26\u0003\u0364\u01b2\u0000\u1d26\u1d27\u0003\u0360\u01b0"+
		"\u0000\u1d27\u1d28\u0003\u035e\u01af\u0000\u1d28\u1d29\u0003\u036c\u01b6"+
		"\u0000\u1d29\u1d31\u0001\u0000\u0000\u0000\u1d2a\u1d2b\u0005\u016b\u0000"+
		"\u0000\u1d2b\u1d2c\u0005\u0002\u0000\u0000\u1d2c\u1d2d\u0003\u0354\u01aa"+
		"\u0000\u1d2d\u1d2e\u0005\u0003\u0000\u0000\u1d2e\u1d2f\u0003\u036c\u01b6"+
		"\u0000\u1d2f\u1d31\u0001\u0000\u0000\u0000\u1d30\u1d23\u0001\u0000\u0000"+
		"\u0000\u1d30\u1d2a\u0001\u0000\u0000\u0000\u1d31\u0351\u0001\u0000\u0000"+
		"\u0000\u1d32\u1d33\u0003\u0356\u01ab\u0000\u1d33\u1d34\u0003\u0360\u01b0"+
		"\u0000\u1d34\u1d35\u0003\u036c\u01b6\u0000\u1d35\u1d3d\u0001\u0000\u0000"+
		"\u0000\u1d36\u1d37\u0003\u0356\u01ab\u0000\u1d37\u1d38\u0005\u0002\u0000"+
		"\u0000\u1d38\u1d39\u0003\u0354\u01aa\u0000\u1d39\u1d3a\u0005\u0003\u0000"+
		"\u0000\u1d3a\u1d3b\u0003\u036c\u01b6\u0000\u1d3b\u1d3d\u0001\u0000\u0000"+
		"\u0000\u1d3c\u1d32\u0001\u0000\u0000\u0000\u1d3c\u1d36\u0001\u0000\u0000"+
		"\u0000\u1d3d\u0353\u0001\u0000\u0000\u0000\u1d3e\u1d43\u0003\u0358\u01ac"+
		"\u0000\u1d3f\u1d40\u0005\u0006\u0000\u0000\u1d40\u1d42\u0003\u0358\u01ac"+
		"\u0000\u1d41\u1d3f\u0001\u0000\u0000\u0000\u1d42\u1d45\u0001\u0000\u0000"+
		"\u0000\u1d43\u1d41\u0001\u0000\u0000\u0000\u1d43\u1d44\u0001\u0000\u0000"+
		"\u0000\u1d44\u0355\u0001\u0000\u0000\u0000\u1d45\u1d43\u0001\u0000\u0000"+
		"\u0000\u1d46\u1d47\u0007 \u0000\u0000\u1d47\u0357\u0001\u0000\u0000\u0000"+
		"\u1d48\u1d49\u0003\u035a\u01ad\u0000\u1d49\u1d4a\u0003\u035c\u01ae\u0000"+
		"\u1d4a\u0359\u0001\u0000\u0000\u0000\u1d4b\u1d4e\u0003\u0564\u02b2\u0000"+
		"\u1d4c\u1d4e\u0003\u0356\u01ab\u0000\u1d4d\u1d4b\u0001\u0000\u0000\u0000"+
		"\u1d4d\u1d4c\u0001\u0000\u0000\u0000\u1d4e\u035b\u0001\u0000\u0000\u0000"+
		"\u1d4f\u1d53\u0003B!\u0000\u1d50\u1d53\u0003\u0124\u0092\u0000\u1d51\u1d53"+
		"\u0001\u0000\u0000\u0000\u1d52\u1d4f\u0001\u0000\u0000\u0000\u1d52\u1d50"+
		"\u0001\u0000\u0000\u0000\u1d52\u1d51\u0001\u0000\u0000\u0000\u1d53\u035d"+
		"\u0001\u0000\u0000\u0000\u1d54\u1d57\u0003\u0356\u01ab\u0000\u1d55\u1d57"+
		"\u0001\u0000\u0000\u0000\u1d56\u1d54\u0001\u0000\u0000\u0000\u1d56\u1d55"+
		"\u0001\u0000\u0000\u0000\u1d57\u035f\u0001\u0000\u0000\u0000\u1d58\u1d5b"+
		"\u0005\u0080\u0000\u0000\u1d59\u1d5b\u0001\u0000\u0000\u0000\u1d5a\u1d58"+
		"\u0001\u0000\u0000\u0000\u1d5a\u1d59\u0001\u0000\u0000\u0000\u1d5b\u0361"+
		"\u0001\u0000\u0000\u0000\u1d5c\u1d5f\u0005q\u0000\u0000\u1d5d\u1d5f\u0001"+
		"\u0000\u0000\u0000\u1d5e\u1d5c\u0001\u0000\u0000\u0000\u1d5e\u1d5d\u0001"+
		"\u0000\u0000\u0000\u1d5f\u0363\u0001\u0000\u0000\u0000\u1d60\u1d63\u0005"+
		"p\u0000\u0000\u1d61\u1d63\u0001\u0000\u0000\u0000\u1d62\u1d60\u0001\u0000"+
		"\u0000\u0000\u1d62\u1d61\u0001\u0000\u0000\u0000\u1d63\u0365\u0001\u0000"+
		"\u0000\u0000\u1d64\u1d65\u0005\u0002\u0000\u0000\u1d65\u1d66\u0003\u053c"+
		"\u029e\u0000\u1d66\u1d67\u0005\u0003\u0000\u0000\u1d67\u1d6a\u0001\u0000"+
		"\u0000\u0000\u1d68\u1d6a\u0001\u0000\u0000\u0000\u1d69\u1d64\u0001\u0000"+
		"\u0000\u0000\u1d69\u1d68\u0001\u0000\u0000\u0000\u1d6a\u0367\u0001\u0000"+
		"\u0000\u0000\u1d6b\u1d6c\u0003\u053a\u029d\u0000\u1d6c\u1d6d\u0003\u0366"+
		"\u01b3\u0000\u1d6d\u0369\u0001\u0000\u0000\u0000\u1d6e\u1d73\u0003\u0368"+
		"\u01b4\u0000\u1d6f\u1d70\u0005\u0006\u0000\u0000\u1d70\u1d72\u0003\u0368"+
		"\u01b4\u0000\u1d71\u1d6f\u0001\u0000\u0000\u0000\u1d72\u1d75\u0001\u0000"+
		"\u0000\u0000\u1d73\u1d71\u0001\u0000\u0000\u0000\u1d73\u1d74\u0001\u0000"+
		"\u0000\u0000\u1d74\u036b\u0001\u0000\u0000\u0000\u1d75\u1d73\u0001\u0000"+
		"\u0000\u0000\u1d76\u1d79\u0003\u036a\u01b5\u0000\u1d77\u1d79\u0001\u0000"+
		"\u0000\u0000\u1d78\u1d76\u0001\u0000\u0000\u0000\u1d78\u1d77\u0001\u0000"+
		"\u0000\u0000\u1d79\u036d\u0001\u0000\u0000\u0000\u1d7a\u1d7b\u0005\u00cb"+
		"\u0000\u0000\u1d7b\u1d8b\u0003\u0370\u01b8\u0000\u1d7c\u1d7d\u0005\u00cb"+
		"\u0000\u0000\u1d7d\u1d7e\u0003\u0356\u01ab\u0000\u1d7e\u1d7f\u0003\u0360"+
		"\u01b0\u0000\u1d7f\u1d80\u0003\u0370\u01b8\u0000\u1d80\u1d8b\u0001\u0000"+
		"\u0000\u0000\u1d81\u1d82\u0005\u00cb\u0000\u0000\u1d82\u1d83\u0005\u0080"+
		"\u0000\u0000\u1d83\u1d8b\u0003\u0370\u01b8\u0000\u1d84\u1d85\u0005\u00cb"+
		"\u0000\u0000\u1d85\u1d86\u0005\u0002\u0000\u0000\u1d86\u1d87\u0003\u0372"+
		"\u01b9\u0000\u1d87\u1d88\u0005\u0003\u0000\u0000\u1d88\u1d89\u0003\u0370"+
		"\u01b8\u0000\u1d89\u1d8b\u0001\u0000\u0000\u0000\u1d8a\u1d7a\u0001\u0000"+
		"\u0000\u0000\u1d8a\u1d7c\u0001\u0000\u0000\u0000\u1d8a\u1d81\u0001\u0000"+
		"\u0000\u0000\u1d8a\u1d84\u0001\u0000\u0000\u0000\u1d8b\u036f\u0001\u0000"+
		"\u0000\u0000\u1d8c\u1d96\u0003\u03c0\u01e0\u0000\u1d8d\u1d96\u0003\u0386"+
		"\u01c3\u0000\u1d8e\u1d96\u0003\u03ae\u01d7\u0000\u1d8f\u1d96\u0003\u03a0"+
		"\u01d0\u0000\u1d90\u1d96\u0003\u03b8\u01dc\u0000\u1d91\u1d96\u0003\u0108"+
		"\u0084\u0000\u1d92\u1d96\u0003\u010e\u0087\u0000\u1d93\u1d96\u0003\u0114"+
		"\u008a\u0000\u1d94\u1d96\u0003\u0380\u01c0\u0000\u1d95\u1d8c\u0001\u0000"+
		"\u0000\u0000\u1d95\u1d8d\u0001\u0000\u0000\u0000\u1d95\u1d8e\u0001\u0000"+
		"\u0000\u0000\u1d95\u1d8f\u0001\u0000\u0000\u0000\u1d95\u1d90\u0001\u0000"+
		"\u0000\u0000\u1d95\u1d91\u0001\u0000\u0000\u0000\u1d95\u1d92\u0001\u0000"+
		"\u0000\u0000\u1d95\u1d93\u0001\u0000\u0000\u0000\u1d95\u1d94\u0001\u0000"+
		"\u0000\u0000\u1d96\u0371\u0001\u0000\u0000\u0000\u1d97\u1d9c\u0003\u0374"+
		"\u01ba\u0000\u1d98\u1d99\u0005\u0006\u0000\u0000\u1d99\u1d9b\u0003\u0374"+
		"\u01ba\u0000\u1d9a\u1d98\u0001\u0000\u0000\u0000\u1d9b\u1d9e\u0001\u0000"+
		"\u0000\u0000\u1d9c\u1d9a\u0001\u0000\u0000\u0000\u1d9c\u1d9d\u0001\u0000"+
		"\u0000\u0000\u1d9d\u0373\u0001\u0000\u0000\u0000\u1d9e\u1d9c\u0001\u0000"+
		"\u0000\u0000\u1d9f\u1da0\u0003\u0376\u01bb\u0000\u1da0\u1da1\u0003\u0378"+
		"\u01bc\u0000\u1da1\u0375\u0001\u0000\u0000\u0000\u1da2\u1da5\u0003\u0564"+
		"\u02b2\u0000\u1da3\u1da5\u0003\u0356\u01ab\u0000\u1da4\u1da2\u0001\u0000"+
		"\u0000\u0000\u1da4\u1da3\u0001\u0000\u0000\u0000\u1da5\u0377\u0001\u0000"+
		"\u0000\u0000\u1da6\u1daa\u0003B!\u0000\u1da7\u1daa\u0003\u0124\u0092\u0000"+
		"\u1da8\u1daa\u0001\u0000\u0000\u0000\u1da9\u1da6\u0001\u0000\u0000\u0000"+
		"\u1da9\u1da7\u0001\u0000\u0000\u0000\u1da9\u1da8\u0001\u0000\u0000\u0000"+
		"\u1daa\u0379\u0001\u0000\u0000\u0000\u1dab\u1dac\u0005\u011b\u0000\u0000"+
		"\u1dac\u1dad\u0003\u053e\u029f\u0000\u1dad\u1dae\u0003\u037c\u01be\u0000"+
		"\u1dae\u1daf\u0005$\u0000\u0000\u1daf\u1db0\u0003\u037e\u01bf\u0000\u1db0"+
		"\u037b\u0001\u0000\u0000\u0000\u1db1\u1db2\u0005\u0002\u0000\u0000\u1db2"+
		"\u1db3\u0003\u0508\u0284\u0000\u1db3\u1db4\u0005\u0003\u0000\u0000\u1db4"+
		"\u1db7\u0001\u0000\u0000\u0000\u1db5\u1db7\u0001\u0000\u0000\u0000\u1db6"+
		"\u1db1\u0001\u0000\u0000\u0000\u1db6\u1db5\u0001\u0000\u0000\u0000\u1db7"+
		"\u037d\u0001\u0000\u0000\u0000\u1db8\u1dbd\u0003\u03c0\u01e0\u0000\u1db9"+
		"\u1dbd\u0003\u0386\u01c3\u0000\u1dba\u1dbd\u0003\u03ae\u01d7\u0000\u1dbb"+
		"\u1dbd\u0003\u03a0\u01d0\u0000\u1dbc\u1db8\u0001\u0000\u0000\u0000\u1dbc"+
		"\u1db9\u0001\u0000\u0000\u0000\u1dbc\u1dba\u0001\u0000\u0000\u0000\u1dbc"+
		"\u1dbb\u0001\u0000\u0000\u0000\u1dbd\u037f\u0001\u0000\u0000\u0000\u1dbe"+
		"\u1dbf\u0005\u00ca\u0000\u0000\u1dbf\u1dc0\u0003\u053e\u029f\u0000\u1dc0"+
		"\u1dc1\u0003\u0382\u01c1\u0000\u1dc1\u1dda\u0001\u0000\u0000\u0000\u1dc2"+
		"\u1dc3\u0005.\u0000\u0000\u1dc3\u1dc4\u0003\u00aeW\u0000\u1dc4\u1dc5\u0005"+
		"\\\u0000\u0000\u1dc5\u1dc6\u0003\u010a\u0085\u0000\u1dc6\u1dc7\u0005$"+
		"\u0000\u0000\u1dc7\u1dc8\u0005\u00ca\u0000\u0000\u1dc8\u1dc9\u0003\u053e"+
		"\u029f\u0000\u1dc9\u1dca\u0003\u0382\u01c1\u0000\u1dca\u1dcb\u0003\u010c"+
		"\u0086\u0000\u1dcb\u1dda\u0001\u0000\u0000\u0000\u1dcc\u1dcd\u0005.\u0000"+
		"\u0000\u1dcd\u1dce\u0003\u00aeW\u0000\u1dce\u1dcf\u0005\\\u0000\u0000"+
		"\u1dcf\u1dd0\u0005\u00dc\u0000\u0000\u1dd0\u1dd1\u0005M\u0000\u0000\u1dd1"+
		"\u1dd2\u0005\u0185\u0000\u0000\u1dd2\u1dd3\u0003\u010a\u0085\u0000\u1dd3"+
		"\u1dd4\u0005$\u0000\u0000\u1dd4\u1dd5\u0005\u00ca\u0000\u0000\u1dd5\u1dd6"+
		"\u0003\u053e\u029f\u0000\u1dd6\u1dd7\u0003\u0382\u01c1\u0000\u1dd7\u1dd8"+
		"\u0003\u010c\u0086\u0000\u1dd8\u1dda\u0001\u0000\u0000\u0000\u1dd9\u1dbe"+
		"\u0001\u0000\u0000\u0000\u1dd9\u1dc2\u0001\u0000\u0000\u0000\u1dd9\u1dcc"+
		"\u0001\u0000\u0000\u0000\u1dda\u0381\u0001\u0000\u0000\u0000\u1ddb\u1ddc"+
		"\u0005\u0002\u0000\u0000\u1ddc\u1ddd\u0003\u0502\u0281\u0000\u1ddd\u1dde"+
		"\u0005\u0003\u0000\u0000\u1dde\u1de1\u0001\u0000\u0000\u0000\u1ddf\u1de1"+
		"\u0001\u0000\u0000\u0000\u1de0\u1ddb\u0001\u0000\u0000\u0000\u1de0\u1ddf"+
		"\u0001\u0000\u0000\u0000\u1de1\u0383\u0001\u0000\u0000\u0000\u1de2\u1de3"+
		"\u0005\u00b1\u0000\u0000\u1de3\u1ded\u0003\u053e\u029f\u0000\u1de4\u1de5"+
		"\u0005\u00b1\u0000\u0000\u1de5\u1de6\u0005\u011b\u0000\u0000\u1de6\u1ded"+
		"\u0003\u053e\u029f\u0000\u1de7\u1de8\u0005\u00b1\u0000\u0000\u1de8\u1ded"+
		"\u0005\u001e\u0000\u0000\u1de9\u1dea\u0005\u00b1\u0000\u0000\u1dea\u1deb"+
		"\u0005\u011b\u0000\u0000\u1deb\u1ded\u0005\u001e\u0000\u0000\u1dec\u1de2"+
		"\u0001\u0000\u0000\u0000\u1dec\u1de4\u0001\u0000\u0000\u0000\u1dec\u1de7"+
		"\u0001\u0000\u0000\u0000\u1dec\u1de9\u0001\u0000\u0000\u0000\u1ded\u0385"+
		"\u0001\u0000\u0000\u0000\u1dee\u1def\u0003\u03d6\u01eb\u0000\u1def\u1df0"+
		"\u0005\u00e8\u0000\u0000\u1df0\u1df1\u0005G\u0000\u0000\u1df1\u1df2\u0003"+
		"\u0388\u01c4\u0000\u1df2\u1df3\u0003\u038a\u01c5\u0000\u1df3\u1df4\u0003"+
		"\u0392\u01c9\u0000\u1df4\u1df5\u0003\u0396\u01cb\u0000\u1df5\u0387\u0001"+
		"\u0000\u0000\u0000\u1df6\u1df9\u0003\u053a\u029d\u0000\u1df7\u1df8\u0005"+
		"$\u0000\u0000\u1df8\u1dfa\u0003\u055e\u02af\u0000\u1df9\u1df7\u0001\u0000"+
		"\u0000\u0000\u1df9\u1dfa\u0001\u0000\u0000\u0000\u1dfa\u0389\u0001\u0000"+
		"\u0000\u0000\u1dfb\u1e0f\u0003\u03c0\u01e0\u0000\u1dfc\u1dfd\u0005\u01cf"+
		"\u0000\u0000\u1dfd\u1dfe\u0003\u038c\u01c6\u0000\u1dfe\u1dff\u0005\u01c2"+
		"\u0000\u0000\u1dff\u1e00\u0003\u03c0\u01e0\u0000\u1e00\u1e0f\u0001\u0000"+
		"\u0000\u0000\u1e01\u1e02\u0005\u0002\u0000\u0000\u1e02\u1e03\u0003\u038e"+
		"\u01c7\u0000\u1e03\u1e08\u0005\u0003\u0000\u0000\u1e04\u1e05\u0005\u01cf"+
		"\u0000\u0000\u1e05\u1e06\u0003\u038c\u01c6\u0000\u1e06\u1e07\u0005\u01c2"+
		"\u0000\u0000\u1e07\u1e09\u0001\u0000\u0000\u0000\u1e08\u1e04\u0001\u0000"+
		"\u0000\u0000\u1e08\u1e09\u0001\u0000\u0000\u0000\u1e09\u1e0a\u0001\u0000"+
		"\u0000\u0000\u1e0a\u1e0b\u0003\u03c0\u01e0\u0000\u1e0b\u1e0f\u0001\u0000"+
		"\u0000\u0000\u1e0c\u1e0d\u00055\u0000\u0000\u1e0d\u1e0f\u0005\u019f\u0000"+
		"\u0000\u1e0e\u1dfb\u0001\u0000\u0000\u0000\u1e0e\u1dfc\u0001\u0000\u0000"+
		"\u0000\u1e0e\u1e01\u0001\u0000\u0000\u0000\u1e0e\u1e0c\u0001\u0000\u0000"+
		"\u0000\u1e0f\u038b\u0001\u0000\u0000\u0000\u1e10\u1e11\u0007!\u0000\u0000"+
		"\u1e11\u038d\u0001\u0000\u0000\u0000\u1e12\u1e17\u0003\u0390\u01c8\u0000"+
		"\u1e13\u1e14\u0005\u0006\u0000\u0000\u1e14\u1e16\u0003\u0390\u01c8\u0000"+
		"\u1e15\u1e13\u0001\u0000\u0000\u0000\u1e16\u1e19\u0001\u0000\u0000\u0000"+
		"\u1e17\u1e15\u0001\u0000\u0000\u0000\u1e17\u1e18\u0001\u0000\u0000\u0000"+
		"\u1e18\u038f\u0001\u0000\u0000\u0000\u1e19\u1e17\u0001\u0000\u0000\u0000"+
		"\u1e1a\u1e1b\u0003\u055e\u02af\u0000\u1e1b\u1e1c\u0003\u0530\u0298\u0000"+
		"\u1e1c\u0391\u0001\u0000\u0000\u0000\u1e1d\u1e1e\u0005P\u0000\u0000\u1e1e"+
		"\u1e1f\u0005\u01d0\u0000\u0000\u1e1f\u1e20\u0003\u0394\u01ca\u0000\u1e20"+
		"\u1e27\u00059\u0000\u0000\u1e21\u1e22\u0005\u016a\u0000\u0000\u1e22\u1e23"+
		"\u0005\u0146\u0000\u0000\u1e23\u1e24\u0003\u03b0\u01d8\u0000\u1e24\u1e25"+
		"\u0003\u0448\u0224\u0000\u1e25\u1e28\u0001\u0000\u0000\u0000\u1e26\u1e28"+
		"\u0005\u0107\u0000\u0000\u1e27\u1e21\u0001\u0000\u0000\u0000\u1e27\u1e26"+
		"\u0001\u0000\u0000\u0000\u1e28\u1e2b\u0001\u0000\u0000\u0000\u1e29\u1e2b"+
		"\u0001\u0000\u0000\u0000\u1e2a\u1e1d\u0001\u0000\u0000\u0000\u1e2a\u1e29"+
		"\u0001\u0000\u0000\u0000\u1e2b\u0393\u0001\u0000\u0000\u0000\u1e2c\u1e2d"+
		"\u0005\u0002\u0000\u0000\u1e2d\u1e2e\u0003\u0256\u012b\u0000\u1e2e\u1e2f"+
		"\u0005\u0003\u0000\u0000\u1e2f\u1e30\u0003\u0448\u0224\u0000\u1e30\u1e36"+
		"\u0001\u0000\u0000\u0000\u1e31\u1e32\u0005P\u0000\u0000\u1e32\u1e33\u0005"+
		"-\u0000\u0000\u1e33\u1e36\u0003\u053e\u029f\u0000\u1e34\u1e36\u0001\u0000"+
		"\u0000\u0000\u1e35\u1e2c\u0001\u0000\u0000\u0000\u1e35\u1e31\u0001\u0000"+
		"\u0000\u0000\u1e35\u1e34\u0001\u0000\u0000\u0000\u1e36\u0395\u0001\u0000"+
		"\u0000\u0000\u1e37\u1e38\u0005W\u0000\u0000\u1e38\u1e3b\u0003\u0534\u029a"+
		"\u0000\u1e39\u1e3b\u0001\u0000\u0000\u0000\u1e3a\u1e37\u0001\u0000\u0000"+
		"\u0000\u1e3a\u1e39\u0001\u0000\u0000\u0000\u1e3b\u0397\u0001\u0000\u0000"+
		"\u0000\u1e3c\u1e3e\u0005\u00fd\u0000\u0000\u1e3d\u1e3f\u0005G\u0000\u0000"+
		"\u1e3e\u1e3d\u0001\u0000\u0000\u0000\u1e3e\u1e3f\u0001\u0000\u0000\u0000"+
		"\u1e3f\u1e40\u0001\u0000\u0000\u0000\u1e40\u1e42\u0003\u053a\u029d\u0000"+
		"\u1e41\u1e43\u0003\u0428\u0214\u0000\u1e42\u1e41\u0001\u0000\u0000\u0000"+
		"\u1e42\u1e43\u0001\u0000\u0000\u0000\u1e43\u1e44\u0001\u0000\u0000\u0000"+
		"\u1e44\u1e47\u0005d\u0000\u0000\u1e45\u1e48\u0003\u03c2\u01e1\u0000\u1e46"+
		"\u1e48\u0003\u053a\u029d\u0000\u1e47\u1e45\u0001\u0000\u0000\u0000\u1e47"+
		"\u1e46\u0001\u0000\u0000\u0000\u1e48\u1e4a\u0001\u0000\u0000\u0000\u1e49"+
		"\u1e4b\u0003\u0428\u0214\u0000\u1e4a\u1e49\u0001\u0000\u0000\u0000\u1e4a"+
		"\u1e4b\u0001\u0000\u0000\u0000\u1e4b\u1e4c\u0001\u0000\u0000\u0000\u1e4c"+
		"\u1e4d\u0005P\u0000\u0000\u1e4d\u1e56\u0003\u048c\u0246\u0000\u1e4e\u1e50"+
		"\u0003\u039a\u01cd\u0000\u1e4f\u1e51\u0003\u039c\u01ce\u0000\u1e50\u1e4f"+
		"\u0001\u0000\u0000\u0000\u1e50\u1e51\u0001\u0000\u0000\u0000\u1e51\u1e57"+
		"\u0001\u0000\u0000\u0000\u1e52\u1e54\u0003\u039c\u01ce\u0000\u1e53\u1e55"+
		"\u0003\u039a\u01cd\u0000\u1e54\u1e53\u0001\u0000\u0000\u0000\u1e54\u1e55"+
		"\u0001\u0000\u0000\u0000\u1e55\u1e57\u0001\u0000\u0000\u0000\u1e56\u1e4e"+
		"\u0001\u0000\u0000\u0000\u1e56\u1e52\u0001\u0000\u0000\u0000\u1e57\u1e59"+
		"\u0001\u0000\u0000\u0000\u1e58\u1e5a\u0003\u039e\u01cf\u0000\u1e59\u1e58"+
		"\u0001\u0000\u0000\u0000\u1e59\u1e5a\u0001\u0000\u0000\u0000\u1e5a\u0399"+
		"\u0001\u0000\u0000\u0000\u1e5b\u1e5c\u0005f\u0000\u0000\u1e5c\u1e5d\u0005"+
		"M\u0000\u0000\u1e5d\u1e60\u0005\u00fa\u0000\u0000\u1e5e\u1e5f\u0005!\u0000"+
		"\u0000\u1e5f\u1e61\u0003\u048c\u0246\u0000\u1e60\u1e5e\u0001\u0000\u0000"+
		"\u0000\u1e60\u1e61\u0001\u0000\u0000\u0000\u1e61\u1e63\u0001\u0000\u0000"+
		"\u0000\u1e62\u1e64\u0005]\u0000\u0000\u1e63\u1e62\u0001\u0000\u0000\u0000"+
		"\u1e63\u1e64\u0001\u0000\u0000\u0000\u1e64\u1e65\u0001\u0000\u0000\u0000"+
		"\u1e65\u1e6a\u0005\u00e8\u0000\u0000\u1e66\u1e67\u0005\u0002\u0000\u0000"+
		"\u1e67\u1e68\u0003\u038e\u01c7\u0000\u1e68\u1e69\u0005\u0003\u0000\u0000"+
		"\u1e69\u1e6b\u0001\u0000\u0000\u0000\u1e6a\u1e66\u0001\u0000\u0000\u0000"+
		"\u1e6a\u1e6b\u0001\u0000\u0000\u0000\u1e6b\u1e6c\u0001\u0000\u0000\u0000"+
		"\u1e6c\u1e6d\u0003\u041e\u020f\u0000\u1e6d\u039b\u0001\u0000\u0000\u0000"+
		"\u1e6e\u1e6f\u0005f\u0000\u0000\u1e6f\u1e72\u0005\u00fa\u0000\u0000\u1e70"+
		"\u1e71\u0005!\u0000\u0000\u1e71\u1e73\u0003\u048c\u0246\u0000\u1e72\u1e70"+
		"\u0001\u0000\u0000\u0000\u1e72\u1e73\u0001\u0000\u0000\u0000\u1e73\u1e75"+
		"\u0001\u0000\u0000\u0000\u1e74\u1e76\u0005]\u0000\u0000\u1e75\u1e74\u0001"+
		"\u0000\u0000\u0000\u1e75\u1e76\u0001\u0000\u0000\u0000\u1e76\u1e77\u0001"+
		"\u0000\u0000\u0000\u1e77\u1e78\u0005\u016a\u0000\u0000\u1e78\u1e79\u0005"+
		"\u0146\u0000\u0000\u1e79\u1e7a\u0003\u03b0\u01d8\u0000\u1e7a\u039d\u0001"+
		"\u0000\u0000\u0000\u1e7b\u1e7c\u0005f\u0000\u0000\u1e7c\u1e7e\u0005\u00fa"+
		"\u0000\u0000\u1e7d\u1e7f\u0005]\u0000\u0000\u1e7e\u1e7d\u0001\u0000\u0000"+
		"\u0000\u1e7e\u1e7f\u0001\u0000\u0000\u0000\u1e7f\u1e80\u0001\u0000\u0000"+
		"\u0000\u1e80\u1e81\u0005\u00b6\u0000\u0000\u1e81\u039f\u0001\u0000\u0000"+
		"\u0000\u1e82\u1e83\u0003\u03d6\u01eb\u0000\u1e83\u1e84\u0005\u00b6\u0000"+
		"\u0000\u1e84\u1e85\u0005@\u0000\u0000\u1e85\u1e86\u0003\u0438\u021c\u0000"+
		"\u1e86\u1e87\u0003\u03a2\u01d1\u0000\u1e87\u1e88\u0003\u044a\u0225\u0000"+
		"\u1e88\u1e89\u0003\u0396\u01cb\u0000\u1e89\u03a1\u0001\u0000\u0000\u0000"+
		"\u1e8a\u1e8b\u0005d\u0000\u0000\u1e8b\u1e8e\u0003\u0422\u0211\u0000\u1e8c"+
		"\u1e8e\u0001\u0000\u0000\u0000\u1e8d\u1e8a\u0001\u0000\u0000\u0000\u1e8d"+
		"\u1e8c\u0001\u0000\u0000\u0000\u1e8e\u03a3\u0001\u0000\u0000\u0000\u1e8f"+
		"\u1e90\u0005\u00f7\u0000\u0000\u1e90\u1e91\u0003\u03de\u01ef\u0000\u1e91"+
		"\u1e92\u0003\u0436\u021b\u0000\u1e92\u1e93\u0003\u03a6\u01d3\u0000\u1e93"+
		"\u1e94\u0003\u03aa\u01d5\u0000\u1e94\u03a5\u0001\u0000\u0000\u0000\u1e95"+
		"\u1e96\u0005D\u0000\u0000\u1e96\u1e97\u0003\u03a8\u01d4\u0000\u1e97\u1e98"+
		"\u0005\u0100\u0000\u0000\u1e98\u1e9b\u0001\u0000\u0000\u0000\u1e99\u1e9b"+
		"\u0001\u0000\u0000\u0000\u1e9a\u1e95\u0001\u0000\u0000\u0000\u1e9a\u1e99"+
		"\u0001\u0000\u0000\u0000\u1e9b\u03a7\u0001\u0000\u0000\u0000\u1e9c\u1e9d"+
		"\u0005\u0083\u0000\u0000\u1e9d\u1ea9\u0007\"\u0000\u0000\u1e9e\u1e9f\u0005"+
		"\u0197\u0000\u0000\u1e9f\u1ea9\u0007\"\u0000\u0000\u1ea0\u1ea5\u0005\u0147"+
		"\u0000\u0000\u1ea1\u1ea2\u0005\u016a\u0000\u0000\u1ea2\u1ea6\u0005\u00c9"+
		"\u0000\u0000\u1ea3\u1ea4\u0005\u0197\u0000\u0000\u1ea4\u1ea6\u0005\u00c9"+
		"\u0000\u0000\u1ea5\u1ea1\u0001\u0000\u0000\u0000\u1ea5\u1ea3\u0001\u0000"+
		"\u0000\u0000\u1ea5\u1ea6\u0001\u0000\u0000\u0000\u1ea6\u1ea9\u0001\u0000"+
		"\u0000\u0000\u1ea7\u1ea9\u0005\u00c9\u0000\u0000\u1ea8\u1e9c\u0001\u0000"+
		"\u0000\u0000\u1ea8\u1e9e\u0001\u0000\u0000\u0000\u1ea8\u1ea0\u0001\u0000"+
		"\u0000\u0000\u1ea8\u1ea7\u0001\u0000\u0000\u0000\u1ea9\u03a9\u0001\u0000"+
		"\u0000\u0000\u1eaa\u1ead\u0005\u0109\u0000\u0000\u1eab\u1ead\u0001\u0000"+
		"\u0000\u0000\u1eac\u1eaa\u0001\u0000\u0000\u0000\u1eac\u1eab\u0001\u0000"+
		"\u0000\u0000\u1ead\u03ab\u0001\u0000\u0000\u0000\u1eae\u1eb3\u0005\u0109"+
		"\u0000\u0000\u1eaf\u1eb0\u0005\u01d1\u0000\u0000\u1eb0\u1eb3\u0005\u01d2"+
		"\u0000\u0000\u1eb1\u1eb3\u0001\u0000\u0000\u0000\u1eb2\u1eae\u0001\u0000"+
		"\u0000\u0000\u1eb2\u1eaf\u0001\u0000\u0000\u0000\u1eb2\u1eb1\u0001\u0000"+
		"\u0000\u0000\u1eb3\u03ad\u0001\u0000\u0000\u0000\u1eb4\u1eb5\u0003\u03d6"+
		"\u01eb\u0000\u1eb5\u1eb6\u0005\u016a\u0000\u0000\u1eb6\u1eb7\u0003\u0438"+
		"\u021c\u0000\u1eb7\u1eb8\u0005\u0146\u0000\u0000\u1eb8\u1eb9\u0003\u03b0"+
		"\u01d8\u0000\u1eb9\u1eba\u0003\u0420\u0210\u0000\u1eba\u1ebb\u0003\u044a"+
		"\u0225\u0000\u1ebb\u1ebc\u0003\u0396\u01cb\u0000\u1ebc\u03af\u0001\u0000"+
		"\u0000\u0000\u1ebd\u1ec2\u0003\u03b2\u01d9\u0000\u1ebe\u1ebf\u0005\u0006"+
		"\u0000\u0000\u1ebf\u1ec1\u0003\u03b2\u01d9\u0000\u1ec0\u1ebe\u0001\u0000"+
		"\u0000\u0000\u1ec1\u1ec4\u0001\u0000\u0000\u0000\u1ec2\u1ec0\u0001\u0000"+
		"\u0000\u0000\u1ec2\u1ec3\u0001\u0000\u0000\u0000\u1ec3\u03b1\u0001\u0000"+
		"\u0000\u0000\u1ec4\u1ec2\u0001\u0000\u0000\u0000\u1ec5\u1ec6\u0003\u03b4"+
		"\u01da\u0000\u1ec6\u1ec7\u0005\n\u0000\u0000\u1ec7\u1ec8\u0003\u048c\u0246"+
		"\u0000\u1ec8\u1ed0\u0001\u0000\u0000\u0000\u1ec9\u1eca\u0005\u0002\u0000"+
		"\u0000\u1eca\u1ecb\u0003\u03b6\u01db\u0000\u1ecb\u1ecc\u0005\u0003\u0000"+
		"\u0000\u1ecc\u1ecd\u0005\n\u0000\u0000\u1ecd\u1ece\u0003\u048c\u0246\u0000"+
		"\u1ece\u1ed0\u0001\u0000\u0000\u0000\u1ecf\u1ec5\u0001\u0000\u0000\u0000"+
		"\u1ecf\u1ec9\u0001\u0000\u0000\u0000\u1ed0\u03b3\u0001\u0000\u0000\u0000"+
		"\u1ed1\u1ed2\u0003\u055e\u02af\u0000\u1ed2\u1ed3\u0003\u0530\u0298\u0000"+
		"\u1ed3\u03b5\u0001\u0000\u0000\u0000\u1ed4\u1ed9\u0003\u03b4\u01da\u0000"+
		"\u1ed5\u1ed6\u0005\u0006\u0000\u0000\u1ed6\u1ed8\u0003\u03b4\u01da\u0000"+
		"\u1ed7\u1ed5\u0001\u0000\u0000\u0000\u1ed8\u1edb\u0001\u0000\u0000\u0000"+
		"\u1ed9\u1ed7\u0001\u0000\u0000\u0000\u1ed9\u1eda\u0001\u0000\u0000\u0000"+
		"\u1eda\u03b7\u0001\u0000\u0000\u0000\u1edb\u1ed9\u0001\u0000\u0000\u0000"+
		"\u1edc\u1edd\u0005\u00b2\u0000\u0000\u1edd\u1ede\u0003\u03ba\u01dd\u0000"+
		"\u1ede\u1edf\u0003\u03bc\u01de\u0000\u1edf\u1ee0\u0005\u00ac\u0000\u0000"+
		"\u1ee0\u1ee1\u0003\u03be\u01df\u0000\u1ee1\u1ee2\u0005>\u0000\u0000\u1ee2"+
		"\u1ee3\u0003\u03c0\u01e0\u0000\u1ee3\u03b9\u0001\u0000\u0000\u0000\u1ee4"+
		"\u1ee5\u0003\u053e\u029f\u0000\u1ee5\u03bb\u0001\u0000\u0000\u0000\u1ee6"+
		"\u1ee7\u0005\u0106\u0000\u0000\u1ee7\u1eec\u0005\u013d\u0000\u0000\u1ee8"+
		"\u1eec\u0005\u013d\u0000\u0000\u1ee9\u1eec\u0005k\u0000\u0000\u1eea\u1eec"+
		"\u0005\u00e7\u0000\u0000\u1eeb\u1ee6\u0001\u0000\u0000\u0000\u1eeb\u1ee8"+
		"\u0001\u0000\u0000\u0000\u1eeb\u1ee9\u0001\u0000\u0000\u0000\u1eeb\u1eea"+
		"\u0001\u0000\u0000\u0000\u1eec\u1eef\u0001\u0000\u0000\u0000\u1eed\u1eeb"+
		"\u0001\u0000\u0000\u0000\u1eed\u1eee\u0001\u0000\u0000\u0000\u1eee\u03bd"+
		"\u0001\u0000\u0000\u0000\u1eef\u1eed\u0001\u0000\u0000\u0000\u1ef0\u1ef6"+
		"\u0001\u0000\u0000\u0000\u1ef1\u1ef2\u0005i\u0000\u0000\u1ef2\u1ef6\u0005"+
		"\u00d9\u0000\u0000\u1ef3\u1ef4\u0005\u0174\u0000\u0000\u1ef4\u1ef6\u0005"+
		"\u00d9\u0000\u0000\u1ef5\u1ef0\u0001\u0000\u0000\u0000\u1ef5\u1ef1\u0001"+
		"\u0000\u0000\u0000\u1ef5\u1ef3\u0001\u0000\u0000\u0000\u1ef6\u03bf\u0001"+
		"\u0000\u0000\u0000\u1ef7\u1efa\u0003\u03c4\u01e2\u0000\u1ef8\u1efa\u0003"+
		"\u03c2\u01e1\u0000\u1ef9\u1ef7\u0001\u0000\u0000\u0000\u1ef9\u1ef8\u0001"+
		"\u0000\u0000\u0000\u1efa\u03c1\u0001\u0000\u0000\u0000\u1efb\u1efc\u0005"+
		"\u0002\u0000\u0000\u1efc\u1efd\u0003\u03c4\u01e2\u0000\u1efd\u1efe\u0005"+
		"\u0003\u0000\u0000\u1efe\u1f04\u0001\u0000\u0000\u0000\u1eff\u1f00\u0005"+
		"\u0002\u0000\u0000\u1f00\u1f01\u0003\u03c2\u01e1\u0000\u1f01\u1f02\u0005"+
		"\u0003\u0000\u0000\u1f02\u1f04\u0001\u0000\u0000\u0000\u1f03\u1efb\u0001"+
		"\u0000\u0000\u0000\u1f03\u1eff\u0001\u0000\u0000\u0000\u1f04\u03c3\u0001"+
		"\u0000\u0000\u0000\u1f05\u1f06\u0003\u03c6\u01e3\u0000\u1f06\u1f0d\u0003"+
		"\u03e6\u01f3\u0000\u1f07\u1f08\u0003\u0412\u0209\u0000\u1f08\u1f09\u0003"+
		"\u03f0\u01f8\u0000\u1f09\u1f0e\u0001\u0000\u0000\u0000\u1f0a\u1f0b\u0003"+
		"\u03ee\u01f7\u0000\u1f0b\u1f0c\u0003\u0414\u020a\u0000\u1f0c\u1f0e\u0001"+
		"\u0000\u0000\u0000\u1f0d\u1f07\u0001\u0000\u0000\u0000\u1f0d\u1f0a\u0001"+
		"\u0000\u0000\u0000\u1f0d\u1f0e\u0001\u0000\u0000\u0000\u1f0e\u1f1b\u0001"+
		"\u0000\u0000\u0000\u1f0f\u1f10\u0003\u03ce\u01e7\u0000\u1f10\u1f11\u0003"+
		"\u03c6\u01e3\u0000\u1f11\u1f18\u0003\u03e6\u01f3\u0000\u1f12\u1f13\u0003"+
		"\u0412\u0209\u0000\u1f13\u1f14\u0003\u03f0\u01f8\u0000\u1f14\u1f19\u0001"+
		"\u0000\u0000\u0000\u1f15\u1f16\u0003\u03ee\u01f7\u0000\u1f16\u1f17\u0003"+
		"\u0414\u020a\u0000\u1f17\u1f19\u0001\u0000\u0000\u0000\u1f18\u1f12\u0001"+
		"\u0000\u0000\u0000\u1f18\u1f15\u0001\u0000\u0000\u0000\u1f18\u1f19\u0001"+
		"\u0000\u0000\u0000\u1f19\u1f1b\u0001\u0000\u0000\u0000\u1f1a\u1f05\u0001"+
		"\u0000\u0000\u0000\u1f1a\u1f0f\u0001\u0000\u0000\u0000\u1f1b\u03c5\u0001"+
		"\u0000\u0000\u0000\u1f1c\u1f1f\u0003\u03c8\u01e4\u0000\u1f1d\u1f1f\u0003"+
		"\u03c2\u01e1\u0000\u1f1e\u1f1c\u0001\u0000\u0000\u0000\u1f1e\u1f1d\u0001"+
		"\u0000\u0000\u0000\u1f1f\u03c7\u0001\u0000\u0000\u0000\u1f20\u1f28\u0005"+
		"X\u0000\u0000\u1f21\u1f22\u0003\u03e4\u01f2\u0000\u1f22\u1f23\u0003\u03d8"+
		"\u01ec\u0000\u1f23\u1f24\u0003\u0532\u0299\u0000\u1f24\u1f29\u0001\u0000"+
		"\u0000\u0000\u1f25\u1f26\u0003\u03e2\u01f1\u0000\u1f26\u1f27\u0003\u0534"+
		"\u029a\u0000\u1f27\u1f29\u0001\u0000\u0000\u0000\u1f28\u1f21\u0001\u0000"+
		"\u0000\u0000\u1f28\u1f25\u0001\u0000\u0000\u0000\u1f29\u1f2a\u0001\u0000"+
		"\u0000\u0000\u1f2a\u1f2b\u0003\u03d8\u01ec\u0000\u1f2b\u1f2c\u0003\u0420"+
		"\u0210\u0000\u1f2c\u1f2d\u0003\u0448\u0224\u0000\u1f2d\u1f2e\u0003\u0402"+
		"\u0201\u0000\u1f2e\u1f2f\u0003\u0410\u0208\u0000\u1f2f\u1f30\u0003\u04da"+
		"\u026d\u0000\u1f30\u1f3b\u0001\u0000\u0000\u0000\u1f31\u1f3b\u0003\u041e"+
		"\u020f\u0000\u1f32\u1f33\u0005\\\u0000\u0000\u1f33\u1f3b\u0003\u0434\u021a"+
		"\u0000\u1f34\u1f35\u0003\u03c2\u01e1\u0000\u1f35\u1f38\u0003\u03cc\u01e6"+
		"\u0000\u1f36\u1f39\u0003\u03c8\u01e4\u0000\u1f37\u1f39\u0003\u03c2\u01e1"+
		"\u0000\u1f38\u1f36\u0001\u0000\u0000\u0000\u1f38\u1f37\u0001\u0000\u0000"+
		"\u0000\u1f39\u1f3b\u0001\u0000\u0000\u0000\u1f3a\u1f20\u0001\u0000\u0000"+
		"\u0000\u1f3a\u1f31\u0001\u0000\u0000\u0000\u1f3a\u1f32\u0001\u0000\u0000"+
		"\u0000\u1f3a\u1f34\u0001\u0000\u0000\u0000\u1f3b\u1f43\u0001\u0000\u0000"+
		"\u0000\u1f3c\u1f3f\u0003\u03cc\u01e6\u0000\u1f3d\u1f40\u0003\u03c8\u01e4"+
		"\u0000\u1f3e\u1f40\u0003\u03c2\u01e1\u0000\u1f3f\u1f3d\u0001\u0000\u0000"+
		"\u0000\u1f3f\u1f3e\u0001\u0000\u0000\u0000\u1f40\u1f42\u0001\u0000\u0000"+
		"\u0000\u1f41\u1f3c\u0001\u0000\u0000\u0000\u1f42\u1f45\u0001\u0000\u0000"+
		"\u0000\u1f43\u1f41\u0001\u0000\u0000\u0000\u1f43\u1f44\u0001\u0000\u0000"+
		"\u0000\u1f44\u03c9\u0001\u0000\u0000\u0000\u1f45\u1f43\u0001\u0000\u0000"+
		"\u0000\u1f46\u1f4a\u0005a\u0000\u0000\u1f47\u1f4a\u0005F\u0000\u0000\u1f48"+
		"\u1f4a\u0005;\u0000\u0000\u1f49\u1f46\u0001\u0000\u0000\u0000\u1f49\u1f47"+
		"\u0001\u0000\u0000\u0000\u1f49\u1f48\u0001\u0000\u0000\u0000\u1f4a\u03cb"+
		"\u0001\u0000\u0000\u0000\u1f4b\u1f4c\u0003\u03ca\u01e5\u0000\u1f4c\u1f4d"+
		"\u0003\u03e0\u01f0\u0000\u1f4d\u03cd\u0001\u0000\u0000\u0000\u1f4e\u1f50"+
		"\u0005i\u0000\u0000\u1f4f\u1f51\u0005\u0128\u0000\u0000\u1f50\u1f4f\u0001"+
		"\u0000\u0000\u0000\u1f50\u1f51\u0001\u0000\u0000\u0000\u1f51\u1f52\u0001"+
		"\u0000\u0000\u0000\u1f52\u1f53\u0003\u03d0\u01e8\u0000\u1f53\u03cf\u0001"+
		"\u0000\u0000\u0000\u1f54\u1f59\u0003\u03d2\u01e9\u0000\u1f55\u1f56\u0005"+
		"\u0006\u0000\u0000\u1f56\u1f58\u0003\u03d2\u01e9\u0000\u1f57\u1f55\u0001"+
		"\u0000\u0000\u0000\u1f58\u1f5b\u0001\u0000\u0000\u0000\u1f59\u1f57\u0001"+
		"\u0000\u0000\u0000\u1f59\u1f5a\u0001\u0000\u0000\u0000\u1f5a\u03d1\u0001"+
		"\u0000\u0000\u0000\u1f5b\u1f59\u0001\u0000\u0000\u0000\u1f5c\u1f5d\u0003"+
		"\u053e\u029f\u0000\u1f5d\u1f5e\u0003\u0366\u01b3\u0000\u1f5e\u1f5f\u0005"+
		"$\u0000\u0000\u1f5f\u1f60\u0003\u03d4\u01ea\u0000\u1f60\u1f61\u0005\u0002"+
		"\u0000\u0000\u1f61\u1f62\u0003\u037e\u01bf\u0000\u1f62\u1f63\u0005\u0003"+
		"\u0000\u0000\u1f63\u03d3\u0001\u0000\u0000\u0000\u1f64\u1f69\u0005\u00fb"+
		"\u0000\u0000\u1f65\u1f66\u0005M\u0000\u0000\u1f66\u1f69\u0005\u00fb\u0000"+
		"\u0000\u1f67\u1f69\u0001\u0000\u0000\u0000\u1f68\u1f64\u0001\u0000\u0000"+
		"\u0000\u1f68\u1f65\u0001\u0000\u0000\u0000\u1f68\u1f67\u0001\u0000\u0000"+
		"\u0000\u1f69\u03d5\u0001\u0000\u0000\u0000\u1f6a\u1f6d\u0003\u03ce\u01e7"+
		"\u0000\u1f6b\u1f6d\u0001\u0000\u0000\u0000\u1f6c\u1f6a\u0001\u0000\u0000"+
		"\u0000\u1f6c\u1f6b\u0001\u0000\u0000\u0000\u1f6d\u03d7\u0001\u0000\u0000"+
		"\u0000\u1f6e\u1f73\u0005G\u0000\u0000\u1f6f\u1f70\u0003\u03da\u01ed\u0000"+
		"\u1f70\u1f71\u0003\u03dc\u01ee\u0000\u1f71\u1f74\u0001\u0000\u0000\u0000"+
		"\u1f72\u1f74\u0003\u0620\u0310\u0000\u1f73\u1f6f\u0001\u0000\u0000\u0000"+
		"\u1f73\u1f72\u0001\u0000\u0000\u0000\u1f74\u1f77\u0001\u0000\u0000\u0000"+
		"\u1f75\u1f77\u0001\u0000\u0000\u0000\u1f76\u1f6e\u0001\u0000\u0000\u0000"+
		"\u1f76\u1f75\u0001\u0000\u0000\u0000\u1f77\u03d9\u0001\u0000\u0000\u0000"+
		"\u1f78\u1f7b\u0001\u0000\u0000\u0000\u1f79\u1f7b\u0005\u0153\u0000\u0000"+
		"\u1f7a\u1f78\u0001\u0000\u0000\u0000\u1f7a\u1f79\u0001\u0000\u0000\u0000"+
		"\u1f7b\u03db\u0001\u0000\u0000\u0000\u1f7c\u1f7e\u0007#\u0000\u0000\u1f7d"+
		"\u1f7c\u0001\u0000\u0000\u0000\u1f7d\u1f7e\u0001\u0000\u0000\u0000\u1f7e"+
		"\u1f7f\u0001\u0000\u0000\u0000\u1f7f\u1f80\u0007\u000b\u0000\u0000\u1f80"+
		"\u1f81\u0003\u03de\u01ef\u0000\u1f81\u1f82\u0003\u053a\u029d\u0000\u1f82"+
		"\u1f8b\u0001\u0000\u0000\u0000\u1f83\u1f84\u0005\u0168\u0000\u0000\u1f84"+
		"\u1f85\u0003\u03de\u01ef\u0000\u1f85\u1f86\u0003\u053a\u029d\u0000\u1f86"+
		"\u1f8b\u0001\u0000\u0000\u0000\u1f87\u1f88\u0005\\\u0000\u0000\u1f88\u1f8b"+
		"\u0003\u053a\u029d\u0000\u1f89\u1f8b\u0003\u053a\u029d\u0000\u1f8a\u1f7d"+
		"\u0001\u0000\u0000\u0000\u1f8a\u1f83\u0001\u0000\u0000\u0000\u1f8a\u1f87"+
		"\u0001\u0000\u0000\u0000\u1f8a\u1f89\u0001\u0000\u0000\u0000\u1f8b\u03dd"+
		"\u0001\u0000\u0000\u0000\u1f8c\u1f8f\u0005\\\u0000\u0000\u1f8d\u1f8f\u0001"+
		"\u0000\u0000\u0000\u1f8e\u1f8c\u0001\u0000\u0000\u0000\u1f8e\u1f8d\u0001"+
		"\u0000\u0000\u0000\u1f8f\u03df\u0001\u0000\u0000\u0000\u1f90\u1f94\u0005"+
		"\u001e\u0000\u0000\u1f91\u1f94\u00058\u0000\u0000\u1f92\u1f94\u0001\u0000"+
		"\u0000\u0000\u1f93\u1f90\u0001\u0000\u0000\u0000\u1f93\u1f91\u0001\u0000"+
		"\u0000\u0000\u1f93\u1f92\u0001\u0000\u0000\u0000\u1f94\u03e1\u0001\u0000"+
		"\u0000\u0000\u1f95\u1f9b\u00058\u0000\u0000\u1f96\u1f97\u0005P\u0000\u0000"+
		"\u1f97\u1f98\u0005\u0002\u0000\u0000\u1f98\u1f99\u0003\u0502\u0281\u0000"+
		"\u1f99\u1f9a\u0005\u0003\u0000\u0000\u1f9a\u1f9c\u0001\u0000\u0000\u0000"+
		"\u1f9b\u1f96\u0001\u0000\u0000\u0000\u1f9b\u1f9c\u0001\u0000\u0000\u0000"+
		"\u1f9c\u03e3\u0001\u0000\u0000\u0000\u1f9d\u1fa0\u0005\u001e\u0000\u0000"+
		"\u1f9e\u1fa0\u0001\u0000\u0000\u0000\u1f9f\u1f9d\u0001\u0000\u0000\u0000"+
		"\u1f9f\u1f9e\u0001\u0000\u0000\u0000\u1fa0\u03e5\u0001\u0000\u0000\u0000"+
		"\u1fa1\u1fa4\u0003\u03e8\u01f4\u0000\u1fa2\u1fa4\u0001\u0000\u0000\u0000"+
		"\u1fa3\u1fa1\u0001\u0000\u0000\u0000\u1fa3\u1fa2\u0001\u0000\u0000\u0000"+
		"\u1fa4\u03e7\u0001\u0000\u0000\u0000\u1fa5\u1fa6\u0005S\u0000\u0000\u1fa6"+
		"\u1fa7\u0005\u0093\u0000\u0000\u1fa7\u1fa8\u0003\u03ea\u01f5\u0000\u1fa8"+
		"\u03e9\u0001\u0000\u0000\u0000\u1fa9\u1fae\u0003\u03ec\u01f6\u0000\u1faa"+
		"\u1fab\u0005\u0006\u0000\u0000\u1fab\u1fad\u0003\u03ec\u01f6\u0000\u1fac"+
		"\u1faa\u0001\u0000\u0000\u0000\u1fad\u1fb0\u0001\u0000\u0000\u0000\u1fae"+
		"\u1fac\u0001\u0000\u0000\u0000\u1fae\u1faf\u0001\u0000\u0000\u0000\u1faf"+
		"\u03eb\u0001\u0000\u0000\u0000\u1fb0\u1fae\u0001\u0000\u0000\u0000\u1fb1"+
		"\u1fb5\u0003\u048c\u0246\u0000\u1fb2\u1fb3\u0005d\u0000\u0000\u1fb3\u1fb6"+
		"\u0003\u04fe\u027f\u0000\u1fb4\u1fb6\u0003\u0264\u0132\u0000\u1fb5\u1fb2"+
		"\u0001\u0000\u0000\u0000\u1fb5\u1fb4\u0001\u0000\u0000\u0000\u1fb6\u1fb7"+
		"\u0001\u0000\u0000\u0000\u1fb7\u1fb8\u0003\u0266\u0133\u0000\u1fb8\u03ed"+
		"\u0001\u0000\u0000\u0000\u1fb9\u1fbb\u0003\u03f2\u01f9\u0000\u1fba\u1fbc"+
		"\u0003\u03f4\u01fa\u0000\u1fbb\u1fba\u0001\u0000\u0000\u0000\u1fbb\u1fbc"+
		"\u0001\u0000\u0000\u0000\u1fbc\u1fc2\u0001\u0000\u0000\u0000\u1fbd\u1fbf"+
		"\u0003\u03f4\u01fa\u0000\u1fbe\u1fc0\u0003\u03f2\u01f9\u0000\u1fbf\u1fbe"+
		"\u0001\u0000\u0000\u0000\u1fbf\u1fc0\u0001\u0000\u0000\u0000\u1fc0\u1fc2"+
		"\u0001\u0000\u0000\u0000\u1fc1\u1fb9\u0001\u0000\u0000\u0000\u1fc1\u1fbd"+
		"\u0001\u0000\u0000\u0000\u1fc2\u03ef\u0001\u0000\u0000\u0000\u1fc3\u1fc6"+
		"\u0003\u03ee\u01f7\u0000\u1fc4\u1fc6\u0001\u0000\u0000\u0000\u1fc5\u1fc3"+
		"\u0001\u0000\u0000\u0000\u1fc5\u1fc4\u0001\u0000\u0000\u0000\u1fc6\u03f1"+
		"\u0001\u0000\u0000\u0000\u1fc7\u1fc8\u0005J\u0000\u0000\u1fc8\u1fcb\u0003"+
		"\u03f6\u01fb\u0000\u1fc9\u1fca\u0005\u0006\u0000\u0000\u1fca\u1fcc\u0003"+
		"\u03f8\u01fc\u0000\u1fcb\u1fc9\u0001\u0000\u0000\u0000\u1fcb\u1fcc\u0001"+
		"\u0000\u0000\u0000\u1fcc\u1fdf\u0001\u0000\u0000\u0000\u1fcd\u1fce\u0005"+
		"=\u0000\u0000\u1fce\u1fdc\u0003\u0400\u0200\u0000\u1fcf\u1fd0\u0003\u03fa"+
		"\u01fd\u0000\u1fd0\u1fd4\u0003\u03fe\u01ff\u0000\u1fd1\u1fd5\u0005Q\u0000"+
		"\u0000\u1fd2\u1fd3\u0005i\u0000\u0000\u1fd3\u1fd5\u0005\u01d3\u0000\u0000"+
		"\u1fd4\u1fd1\u0001\u0000\u0000\u0000\u1fd4\u1fd2\u0001\u0000\u0000\u0000"+
		"\u1fd5\u1fdd\u0001\u0000\u0000\u0000\u1fd6\u1fda\u0003\u03fe\u01ff\u0000"+
		"\u1fd7\u1fdb\u0005Q\u0000\u0000\u1fd8\u1fd9\u0005i\u0000\u0000\u1fd9\u1fdb"+
		"\u0005\u01d3\u0000\u0000\u1fda\u1fd7\u0001\u0000\u0000\u0000\u1fda\u1fd8"+
		"\u0001\u0000\u0000\u0000\u1fdb\u1fdd\u0001\u0000\u0000\u0000\u1fdc\u1fcf"+
		"\u0001\u0000\u0000\u0000\u1fdc\u1fd6\u0001\u0000\u0000\u0000\u1fdd\u1fdf"+
		"\u0001\u0000\u0000\u0000\u1fde\u1fc7\u0001\u0000\u0000\u0000\u1fde\u1fcd"+
		"\u0001\u0000\u0000\u0000\u1fdf\u03f3\u0001\u0000\u0000\u0000\u1fe0\u1fe5"+
		"\u0005O\u0000\u0000\u1fe1\u1fe6\u0003\u03f8\u01fc\u0000\u1fe2\u1fe3\u0003"+
		"\u03fa\u01fd\u0000\u1fe3\u1fe4\u0003\u03fe\u01ff\u0000\u1fe4\u1fe6\u0001"+
		"\u0000\u0000\u0000\u1fe5\u1fe1\u0001\u0000\u0000\u0000\u1fe5\u1fe2\u0001"+
		"\u0000\u0000\u0000\u1fe6\u03f5\u0001\u0000\u0000\u0000\u1fe7\u1fea\u0003"+
		"\u048c\u0246\u0000\u1fe8\u1fea\u0005\u001e\u0000\u0000\u1fe9\u1fe7\u0001"+
		"\u0000\u0000\u0000\u1fe9\u1fe8\u0001\u0000\u0000\u0000\u1fea\u03f7\u0001"+
		"\u0000\u0000\u0000\u1feb\u1fec\u0003\u048c\u0246\u0000\u1fec\u03f9\u0001"+
		"\u0000\u0000\u0000\u1fed\u1ff3\u0003\u04b8\u025c\u0000\u1fee\u1fef\u0005"+
		"\f\u0000\u0000\u1fef\u1ff3\u0003\u03fc\u01fe\u0000\u1ff0\u1ff1\u0005\r"+
		"\u0000\u0000\u1ff1\u1ff3\u0003\u03fc\u01fe\u0000\u1ff2\u1fed\u0001\u0000"+
		"\u0000\u0000\u1ff2\u1fee\u0001\u0000\u0000\u0000\u1ff2\u1ff0\u0001\u0000"+
		"\u0000\u0000\u1ff3\u03fb\u0001\u0000\u0000\u0000\u1ff4\u1ff7\u0003\u054e"+
		"\u02a7\u0000\u1ff5\u1ff7\u0003\u054c\u02a6\u0000\u1ff6\u1ff4\u0001\u0000"+
		"\u0000\u0000\u1ff6\u1ff5\u0001\u0000\u0000\u0000\u1ff7\u03fd\u0001\u0000"+
		"\u0000\u0000\u1ff8\u1ff9\u0007$\u0000\u0000\u1ff9\u03ff\u0001\u0000\u0000"+
		"\u0000\u1ffa\u1ffb\u0007%\u0000\u0000\u1ffb\u0401\u0001\u0000\u0000\u0000"+
		"\u1ffc\u1ffd\u0005B\u0000\u0000\u1ffd\u1ffe\u0005\u0093\u0000\u0000\u1ffe"+
		"\u2001\u0003\u0404\u0202\u0000\u1fff\u2001\u0001\u0000\u0000\u0000\u2000"+
		"\u1ffc\u0001\u0000\u0000\u0000\u2000\u1fff\u0001\u0000\u0000\u0000\u2001"+
		"\u0403\u0001\u0000\u0000\u0000\u2002\u2007\u0003\u0406\u0203\u0000\u2003"+
		"\u2004\u0005\u0006\u0000\u0000\u2004\u2006\u0003\u0406\u0203\u0000\u2005"+
		"\u2003\u0001\u0000\u0000\u0000\u2006\u2009\u0001\u0000\u0000\u0000\u2007"+
		"\u2005\u0001\u0000\u0000\u0000\u2007\u2008\u0001\u0000\u0000\u0000\u2008"+
		"\u0405\u0001\u0000\u0000\u0000\u2009\u2007\u0001\u0000\u0000\u0000\u200a"+
		"\u2010\u0003\u048c\u0246\u0000\u200b\u2010\u0003\u0408\u0204\u0000\u200c"+
		"\u2010\u0003\u040c\u0206\u0000\u200d\u2010\u0003\u040a\u0205\u0000\u200e"+
		"\u2010\u0003\u040e\u0207\u0000\u200f\u200a\u0001\u0000\u0000\u0000\u200f"+
		"\u200b\u0001\u0000\u0000\u0000\u200f\u200c\u0001\u0000\u0000\u0000\u200f"+
		"\u200d\u0001\u0000\u0000\u0000\u200f\u200e\u0001\u0000\u0000\u0000\u2010"+
		"\u0407\u0001\u0000\u0000\u0000\u2011\u2012\u0005\u0002\u0000\u0000\u2012"+
		"\u2013\u0005\u0003\u0000\u0000\u2013\u0409\u0001\u0000\u0000\u0000\u2014"+
		"\u2015\u0005\u01d4\u0000\u0000\u2015\u2016\u0005\u0002\u0000\u0000\u2016"+
		"\u2017\u0003\u0502\u0281\u0000\u2017\u2018\u0005\u0003\u0000\u0000\u2018"+
		"\u040b\u0001\u0000\u0000\u0000\u2019\u201a\u0005\u01d5\u0000\u0000\u201a"+
		"\u201b\u0005\u0002\u0000\u0000\u201b\u201c\u0003\u0502\u0281\u0000\u201c"+
		"\u201d\u0005\u0003\u0000\u0000\u201d\u040d\u0001\u0000\u0000\u0000\u201e"+
		"\u201f\u0005\u01d6\u0000\u0000\u201f\u2020\u0005\u01d7\u0000\u0000\u2020"+
		"\u2021\u0005\u0002\u0000\u0000\u2021\u2022\u0003\u0404\u0202\u0000\u2022"+
		"\u2023\u0005\u0003\u0000\u0000\u2023\u040f\u0001\u0000\u0000\u0000\u2024"+
		"\u2025\u0005C\u0000\u0000\u2025\u2028\u0003\u048c\u0246\u0000\u2026\u2028"+
		"\u0001\u0000\u0000\u0000\u2027\u2024\u0001\u0000\u0000\u0000\u2027\u2026"+
		"\u0001\u0000\u0000\u0000\u2028\u0411\u0001\u0000\u0000\u0000\u2029\u202e"+
		"\u0003\u0416\u020b\u0000\u202a\u202b\u0005>\u0000\u0000\u202b\u202c\u0005"+
		"\u0125\u0000\u0000\u202c\u202e\u0005Q\u0000\u0000\u202d\u2029\u0001\u0000"+
		"\u0000\u0000\u202d\u202a\u0001\u0000\u0000\u0000\u202e\u0413\u0001\u0000"+
		"\u0000\u0000\u202f\u2032\u0003\u0412\u0209\u0000\u2030\u2032\u0001\u0000"+
		"\u0000\u0000\u2031\u202f\u0001\u0000\u0000\u0000\u2031\u2030\u0001\u0000"+
		"\u0000\u0000\u2032\u0415\u0001\u0000\u0000\u0000\u2033\u2035\u0003\u0418"+
		"\u020c\u0000\u2034\u2033\u0001\u0000\u0000\u0000\u2035\u2036\u0001\u0000"+
		"\u0000\u0000\u2036\u2034\u0001\u0000\u0000\u0000\u2036\u2037\u0001\u0000"+
		"\u0000\u0000\u2037\u0417\u0001\u0000\u0000\u0000\u2038\u2039\u0003\u041a"+
		"\u020d\u0000\u2039\u203a\u0003\u041c\u020e\u0000\u203a\u203b\u0003\u03ac"+
		"\u01d6\u0000\u203b\u0419\u0001\u0000\u0000\u0000\u203c\u2046\u0005>\u0000"+
		"\u0000\u203d\u203e\u0005\u0106\u0000\u0000\u203e\u2040\u0005\u00ec\u0000"+
		"\u0000\u203f\u203d\u0001\u0000\u0000\u0000\u203f\u2040\u0001\u0000\u0000"+
		"\u0000\u2040\u2041\u0001\u0000\u0000\u0000\u2041\u2047\u0005\u016a\u0000"+
		"\u0000\u2042\u2044\u0005\u00ec\u0000\u0000\u2043\u2042\u0001\u0000\u0000"+
		"\u0000\u2043\u2044\u0001\u0000\u0000\u0000\u2044\u2045\u0001\u0000\u0000"+
		"\u0000\u2045\u2047\u0005\u0147\u0000\u0000\u2046\u203f\u0001\u0000\u0000"+
		"\u0000\u2046\u2043\u0001\u0000\u0000\u0000\u2047\u041b\u0001\u0000\u0000"+
		"\u0000\u2048\u2049\u0005\u010c\u0000\u0000\u2049\u204c\u0003\u0538\u029c"+
		"\u0000\u204a\u204c\u0001\u0000\u0000\u0000\u204b\u2048\u0001\u0000\u0000"+
		"\u0000\u204b\u204a\u0001\u0000\u0000\u0000\u204c\u041d\u0001\u0000\u0000"+
		"\u0000\u204d\u204e\u0005\u019f\u0000\u0000\u204e\u204f\u0005\u0002\u0000"+
		"\u0000\u204f\u2050\u0003\u0502\u0281\u0000\u2050\u2058\u0005\u0003\u0000"+
		"\u0000\u2051\u2052\u0005\u0006\u0000\u0000\u2052\u2053\u0005\u0002\u0000"+
		"\u0000\u2053\u2054\u0003\u0502\u0281\u0000\u2054\u2055\u0005\u0003\u0000"+
		"\u0000\u2055\u2057\u0001\u0000\u0000\u0000\u2056\u2051\u0001\u0000\u0000"+
		"\u0000\u2057\u205a\u0001\u0000\u0000\u0000\u2058\u2056\u0001\u0000\u0000"+
		"\u0000\u2058\u2059\u0001\u0000\u0000\u0000\u2059\u041f\u0001\u0000\u0000"+
		"\u0000\u205a\u2058\u0001\u0000\u0000\u0000\u205b\u205c\u0005@\u0000\u0000"+
		"\u205c\u205f\u0003\u0422\u0211\u0000\u205d\u205f\u0001\u0000\u0000\u0000"+
		"\u205e\u205b\u0001\u0000\u0000\u0000\u205e\u205d\u0001\u0000\u0000\u0000"+
		"\u205f\u0421\u0001\u0000\u0000\u0000\u2060\u206a\u0003\u0424\u0212\u0000"+
		"\u2061\u2066\u0003\u0426\u0213\u0000\u2062\u2063\u0005\u0006\u0000\u0000"+
		"\u2063\u2065\u0003\u0426\u0213\u0000\u2064\u2062\u0001\u0000\u0000\u0000"+
		"\u2065\u2068\u0001\u0000\u0000\u0000\u2066\u2064\u0001\u0000\u0000\u0000"+
		"\u2066\u2067\u0001\u0000\u0000\u0000\u2067\u206a\u0001\u0000\u0000\u0000"+
		"\u2068\u2066\u0001\u0000\u0000\u0000\u2069\u2060\u0001\u0000\u0000\u0000"+
		"\u2069\u2061\u0001\u0000\u0000\u0000\u206a\u0423\u0001\u0000\u0000\u0000"+
		"\u206b\u206e\u0003\u0426\u0213\u0000\u206c\u206d\u0005\u0006\u0000\u0000"+
		"\u206d\u206f\u0003\u0426\u0213\u0000\u206e\u206c\u0001\u0000\u0000\u0000"+
		"\u206f\u2070\u0001\u0000\u0000\u0000\u2070\u206e\u0001\u0000\u0000\u0000"+
		"\u2070\u2071\u0001\u0000\u0000\u0000\u2071\u0425\u0001\u0000\u0000\u0000"+
		"\u2072\u2073\u0003\u0434\u021a\u0000\u2073\u2075\u0003\u042a\u0215\u0000"+
		"\u2074\u2076\u0003\u043a\u021d\u0000\u2075\u2074\u0001\u0000\u0000\u0000"+
		"\u2075\u2076\u0001\u0000\u0000\u0000\u2076\u20a4\u0001\u0000\u0000\u0000"+
		"\u2077\u2078\u0003\u043e\u021f\u0000\u2078\u2079\u0003\u042e\u0217\u0000"+
		"\u2079\u20a4\u0001\u0000\u0000\u0000\u207a\u207b\u0003\u0452\u0229\u0000"+
		"\u207b\u207c\u0003\u042a\u0215\u0000\u207c\u20a4\u0001\u0000\u0000\u0000"+
		"\u207d\u207e\u0003\u03c2\u01e1\u0000\u207e\u207f\u0003\u042a\u0215\u0000"+
		"\u207f\u20a4\u0001\u0000\u0000\u0000\u2080\u208a\u0005H\u0000\u0000\u2081"+
		"\u2082\u0003\u0452\u0229\u0000\u2082\u2083\u0003\u042a\u0215\u0000\u2083"+
		"\u208b\u0001\u0000\u0000\u0000\u2084\u2085\u0003\u043e\u021f\u0000\u2085"+
		"\u2086\u0003\u042e\u0217\u0000\u2086\u208b\u0001\u0000\u0000\u0000\u2087"+
		"\u2088\u0003\u03c2\u01e1\u0000\u2088\u2089\u0003\u042a\u0215\u0000\u2089"+
		"\u208b\u0001\u0000\u0000\u0000\u208a\u2081\u0001\u0000\u0000\u0000\u208a"+
		"\u2084\u0001\u0000\u0000\u0000\u208a\u2087\u0001\u0000\u0000\u0000\u208b"+
		"\u20a4\u0001\u0000\u0000\u0000\u208c\u208d\u0005\u0002\u0000\u0000\u208d"+
		"\u209e\u0003\u0426\u0213\u0000\u208e\u208f\u0005n\u0000\u0000\u208f\u2090"+
		"\u0005v\u0000\u0000\u2090\u209f\u0003\u0426\u0213\u0000\u2091\u2093\u0005"+
		"y\u0000\u0000\u2092\u2094\u0003\u0430\u0218\u0000\u2093\u2092\u0001\u0000"+
		"\u0000\u0000\u2093\u2094\u0001\u0000\u0000\u0000\u2094\u2095\u0001\u0000"+
		"\u0000\u0000\u2095\u2096\u0005v\u0000\u0000\u2096\u209f\u0003\u0426\u0213"+
		"\u0000\u2097\u2099\u0003\u0430\u0218\u0000\u2098\u2097\u0001\u0000\u0000"+
		"\u0000\u2098\u2099\u0001\u0000\u0000\u0000\u2099\u209a\u0001\u0000\u0000"+
		"\u0000\u209a\u209b\u0005v\u0000\u0000\u209b\u209c\u0003\u0426\u0213\u0000"+
		"\u209c\u209d\u0003\u0432\u0219\u0000\u209d\u209f\u0001\u0000\u0000\u0000"+
		"\u209e\u208e\u0001\u0000\u0000\u0000\u209e\u2091\u0001\u0000\u0000\u0000"+
		"\u209e\u2098\u0001\u0000\u0000\u0000\u209e\u209f\u0001\u0000\u0000\u0000"+
		"\u209f\u20a0\u0001\u0000\u0000\u0000\u20a0\u20a1\u0005\u0003\u0000\u0000"+
		"\u20a1\u20a2\u0003\u042a\u0215\u0000\u20a2\u20a4\u0001\u0000\u0000\u0000"+
		"\u20a3\u2072\u0001\u0000\u0000\u0000\u20a3\u2077\u0001\u0000\u0000\u0000"+
		"\u20a3\u207a\u0001\u0000\u0000\u0000\u20a3\u207d\u0001\u0000\u0000\u0000"+
		"\u20a3\u2080\u0001\u0000\u0000\u0000\u20a3\u208c\u0001\u0000\u0000\u0000"+
		"\u20a4\u20b7\u0001\u0000\u0000\u0000\u20a5\u20a6\u0005n\u0000\u0000\u20a6"+
		"\u20a7\u0005v\u0000\u0000\u20a7\u20b6\u0003\u0426\u0213\u0000\u20a8\u20aa"+
		"\u0005y\u0000\u0000\u20a9\u20ab\u0003\u0430\u0218\u0000\u20aa\u20a9\u0001"+
		"\u0000\u0000\u0000\u20aa\u20ab\u0001\u0000\u0000\u0000\u20ab\u20ac\u0001"+
		"\u0000\u0000\u0000\u20ac\u20ad\u0005v\u0000\u0000\u20ad\u20b6\u0003\u0426"+
		"\u0213\u0000\u20ae\u20b0\u0003\u0430\u0218\u0000\u20af\u20ae\u0001\u0000"+
		"\u0000\u0000\u20af\u20b0\u0001\u0000\u0000\u0000\u20b0\u20b1\u0001\u0000"+
		"\u0000\u0000\u20b1\u20b2\u0005v\u0000\u0000\u20b2\u20b3\u0003\u0426\u0213"+
		"\u0000\u20b3\u20b4\u0003\u0432\u0219\u0000\u20b4\u20b6\u0001\u0000\u0000"+
		"\u0000\u20b5\u20a5\u0001\u0000\u0000\u0000\u20b5\u20a8\u0001\u0000\u0000"+
		"\u0000\u20b5\u20af\u0001\u0000\u0000\u0000\u20b6\u20b9\u0001\u0000\u0000"+
		"\u0000\u20b7\u20b5\u0001\u0000\u0000\u0000\u20b7\u20b8\u0001\u0000\u0000"+
		"\u0000\u20b8\u0427\u0001\u0000\u0000\u0000\u20b9\u20b7\u0001\u0000\u0000"+
		"\u0000\u20ba\u20bc\u0005$\u0000\u0000\u20bb\u20ba\u0001\u0000\u0000\u0000"+
		"\u20bb\u20bc\u0001\u0000\u0000\u0000\u20bc\u20bd\u0001\u0000\u0000\u0000"+
		"\u20bd\u20c2\u0003\u055e\u02af\u0000\u20be\u20bf\u0005\u0002\u0000\u0000"+
		"\u20bf\u20c0\u0003\u053c\u029e\u0000\u20c0\u20c1\u0005\u0003\u0000\u0000"+
		"\u20c1\u20c3\u0001\u0000\u0000\u0000\u20c2\u20be\u0001\u0000\u0000\u0000"+
		"\u20c2\u20c3\u0001\u0000\u0000\u0000\u20c3\u0429\u0001\u0000\u0000\u0000"+
		"\u20c4\u20c7\u0003\u042c\u0216\u0000\u20c5\u20c7\u0001\u0000\u0000\u0000"+
		"\u20c6\u20c4\u0001\u0000\u0000\u0000\u20c6\u20c5\u0001\u0000\u0000\u0000"+
		"\u20c7\u042b\u0001\u0000\u0000\u0000\u20c8\u20ca\u0005$\u0000\u0000\u20c9"+
		"\u20c8\u0001\u0000\u0000\u0000\u20c9\u20ca\u0001\u0000\u0000\u0000\u20ca"+
		"\u20cb\u0001\u0000\u0000\u0000\u20cb\u20d0\u0003\u0560\u02b0\u0000\u20cc"+
		"\u20cd\u0005\u0002\u0000\u0000\u20cd\u20ce\u0003\u053c\u029e\u0000\u20ce"+
		"\u20cf\u0005\u0003\u0000\u0000\u20cf\u20d1\u0001\u0000\u0000\u0000\u20d0"+
		"\u20cc\u0001\u0000\u0000\u0000\u20d0\u20d1\u0001\u0000\u0000\u0000\u20d1"+
		"\u042d\u0001\u0000\u0000\u0000\u20d2\u20e0\u0003\u0428\u0214\u0000\u20d3"+
		"\u20d5\u0005$\u0000\u0000\u20d4\u20d6\u0003\u055e\u02af\u0000\u20d5\u20d4"+
		"\u0001\u0000\u0000\u0000\u20d5\u20d6\u0001\u0000\u0000\u0000\u20d6\u20d9"+
		"\u0001\u0000\u0000\u0000\u20d7\u20d9\u0003\u055e\u02af\u0000\u20d8\u20d3"+
		"\u0001\u0000\u0000\u0000\u20d8\u20d7\u0001\u0000\u0000\u0000\u20d9\u20da"+
		"\u0001\u0000\u0000\u0000\u20da\u20db\u0005\u0002\u0000\u0000\u20db\u20dc"+
		"\u0003\u044e\u0227\u0000\u20dc\u20dd\u0005\u0003\u0000\u0000\u20dd\u20e0"+
		"\u0001\u0000\u0000\u0000\u20de\u20e0\u0001\u0000\u0000\u0000\u20df\u20d2"+
		"\u0001\u0000\u0000\u0000\u20df\u20d8\u0001\u0000\u0000\u0000\u20df\u20de"+
		"\u0001\u0000\u0000\u0000\u20e0\u042f\u0001\u0000\u0000\u0000\u20e1\u20e3"+
		"\u0007&\u0000\u0000\u20e2\u20e4\u0005{\u0000\u0000\u20e3\u20e2\u0001\u0000"+
		"\u0000\u0000\u20e3\u20e4\u0001\u0000\u0000\u0000\u20e4\u0431\u0001\u0000"+
		"\u0000\u0000\u20e5\u20e6\u0005d\u0000\u0000\u20e6\u20e7\u0005\u0002\u0000"+
		"\u0000\u20e7\u20e8\u0003\u053c\u029e\u0000\u20e8\u20e9\u0005\u0003\u0000"+
		"\u0000\u20e9\u20ed\u0001\u0000\u0000\u0000\u20ea\u20eb\u0005P\u0000\u0000"+
		"\u20eb\u20ed\u0003\u048c\u0246\u0000\u20ec\u20e5\u0001\u0000\u0000\u0000"+
		"\u20ec\u20ea\u0001\u0000\u0000\u0000\u20ed\u0433\u0001\u0000\u0000\u0000"+
		"\u20ee\u20f0\u0003\u053a\u029d\u0000\u20ef\u20f1\u0005\t\u0000\u0000\u20f0"+
		"\u20ef\u0001\u0000\u0000\u0000\u20f0\u20f1\u0001\u0000\u0000\u0000\u20f1"+
		"\u20fb\u0001\u0000\u0000\u0000\u20f2\u20f8\u0005Q\u0000\u0000\u20f3\u20f9"+
		"\u0003\u053a\u029d\u0000\u20f4\u20f5\u0005\u0002\u0000\u0000\u20f5\u20f6"+
		"\u0003\u053a\u029d\u0000\u20f6\u20f7\u0005\u0003\u0000\u0000\u20f7\u20f9"+
		"\u0001\u0000\u0000\u0000\u20f8\u20f3\u0001\u0000\u0000\u0000\u20f8\u20f4"+
		"\u0001\u0000\u0000\u0000\u20f9\u20fb\u0001\u0000\u0000\u0000\u20fa\u20ee"+
		"\u0001\u0000\u0000\u0000\u20fa\u20f2\u0001\u0000\u0000\u0000\u20fb\u0435"+
		"\u0001\u0000\u0000\u0000\u20fc\u2101\u0003\u0434\u021a\u0000\u20fd\u20fe"+
		"\u0005\u0006\u0000\u0000\u20fe\u2100\u0003\u0434\u021a\u0000\u20ff\u20fd"+
		"\u0001\u0000\u0000\u0000\u2100\u2103\u0001\u0000\u0000\u0000\u2101\u20ff"+
		"\u0001\u0000\u0000\u0000\u2101\u2102\u0001\u0000\u0000\u0000\u2102\u0437"+
		"\u0001\u0000\u0000\u0000\u2103\u2101\u0001\u0000\u0000\u0000\u2104\u2109"+
		"\u0003\u0434\u021a\u0000\u2105\u2107\u0005$\u0000\u0000\u2106\u2105\u0001"+
		"\u0000\u0000\u0000\u2106\u2107\u0001\u0000\u0000\u0000\u2107\u2108\u0001"+
		"\u0000\u0000\u0000\u2108\u210a\u0003\u055e\u02af\u0000\u2109\u2106\u0001"+
		"\u0000\u0000\u0000\u2109\u210a\u0001\u0000\u0000\u0000\u210a\u0439\u0001"+
		"\u0000\u0000\u0000\u210b\u210c\u0005\u01d8\u0000\u0000\u210c\u210d\u0003"+
		"\u0544\u02a2\u0000\u210d\u210e\u0005\u0002\u0000\u0000\u210e\u210f\u0003"+
		"\u0502\u0281\u0000\u210f\u2110\u0005\u0003\u0000\u0000\u2110\u2111\u0003"+
		"\u043c\u021e\u0000\u2111\u043b\u0001\u0000\u0000\u0000\u2112\u2113\u0005"+
		"\u012f\u0000\u0000\u2113\u2114\u0005\u0002\u0000\u0000\u2114\u2115\u0003"+
		"\u048c\u0246\u0000\u2115\u2116\u0005\u0003\u0000\u0000\u2116\u2119\u0001"+
		"\u0000\u0000\u0000\u2117\u2119\u0001\u0000\u0000\u0000\u2118\u2112\u0001"+
		"\u0000\u0000\u0000\u2118\u2117\u0001\u0000\u0000\u0000\u2119\u043d\u0001"+
		"\u0000\u0000\u0000\u211a\u211b\u0003\u04c0\u0260\u0000\u211b\u211c\u0003"+
		"\u0446\u0223\u0000\u211c\u2125\u0001\u0000\u0000\u0000\u211d\u211e\u0005"+
		"\u0139\u0000\u0000\u211e\u211f\u0005@\u0000\u0000\u211f\u2120\u0005\u0002"+
		"\u0000\u0000\u2120\u2121\u0003\u0442\u0221\u0000\u2121\u2122\u0005\u0003"+
		"\u0000\u0000\u2122\u2123\u0003\u0446\u0223\u0000\u2123\u2125\u0001\u0000"+
		"\u0000\u0000\u2124\u211a\u0001\u0000\u0000\u0000\u2124\u211d\u0001\u0000"+
		"\u0000\u0000\u2125\u043f\u0001\u0000\u0000\u0000\u2126\u2127\u0003\u04c0"+
		"\u0260\u0000\u2127\u2128\u0003\u0444\u0222\u0000\u2128\u0441\u0001\u0000"+
		"\u0000\u0000\u2129\u212e\u0003\u0440\u0220\u0000\u212a\u212b\u0005\u0006"+
		"\u0000\u0000\u212b\u212d\u0003\u0440\u0220\u0000\u212c\u212a\u0001\u0000"+
		"\u0000\u0000\u212d\u2130\u0001\u0000\u0000\u0000\u212e\u212c\u0001\u0000"+
		"\u0000\u0000\u212e\u212f\u0001\u0000\u0000\u0000\u212f\u0443\u0001\u0000"+
		"\u0000\u0000\u2130\u212e\u0001\u0000\u0000\u0000\u2131\u2132\u0005$\u0000"+
		"\u0000\u2132\u2133\u0005\u0002\u0000\u0000\u2133\u2134\u0003\u044e\u0227"+
		"\u0000\u2134\u2135\u0005\u0003\u0000\u0000\u2135\u2138\u0001\u0000\u0000"+
		"\u0000\u2136\u2138\u0001\u0000\u0000\u0000\u2137\u2131\u0001\u0000\u0000"+
		"\u0000\u2137\u2136\u0001\u0000\u0000\u0000\u2138\u0445\u0001\u0000\u0000"+
		"\u0000\u2139\u213a\u0005i\u0000\u0000\u213a\u213d\u0005\u01d9\u0000\u0000"+
		"\u213b\u213d\u0001\u0000\u0000\u0000\u213c\u2139\u0001\u0000\u0000\u0000"+
		"\u213c\u213b\u0001\u0000\u0000\u0000\u213d\u0447\u0001\u0000\u0000\u0000"+
		"\u213e\u213f\u0005g\u0000\u0000\u213f\u2142\u0003\u048c\u0246\u0000\u2140"+
		"\u2142\u0001\u0000\u0000\u0000\u2141\u213e\u0001\u0000\u0000\u0000\u2141"+
		"\u2140\u0001\u0000\u0000\u0000\u2142\u0449\u0001\u0000\u0000\u0000\u2143"+
		"\u2148\u0005g\u0000\u0000\u2144\u2145\u0005\u01b2\u0000\u0000\u2145\u2146"+
		"\u0005\u010c\u0000\u0000\u2146\u2149\u0003\u03ba\u01dd\u0000\u2147\u2149"+
		"\u0003\u048c\u0246\u0000\u2148\u2144\u0001\u0000\u0000\u0000\u2148\u2147"+
		"\u0001\u0000\u0000\u0000\u2149\u214c\u0001\u0000\u0000\u0000\u214a\u214c"+
		"\u0001\u0000\u0000\u0000\u214b\u2143\u0001\u0000\u0000\u0000\u214b\u214a"+
		"\u0001\u0000\u0000\u0000\u214c\u044b\u0001\u0000\u0000\u0000\u214d\u2150"+
		"\u0003\u044e\u0227\u0000\u214e\u2150\u0001\u0000\u0000\u0000\u214f\u214d"+
		"\u0001\u0000\u0000\u0000\u214f\u214e\u0001\u0000\u0000\u0000\u2150\u044d"+
		"\u0001\u0000\u0000\u0000\u2151\u2156\u0003\u0450\u0228\u0000\u2152\u2153"+
		"\u0005\u0006\u0000\u0000\u2153\u2155\u0003\u0450\u0228\u0000\u2154\u2152"+
		"\u0001\u0000\u0000\u0000\u2155\u2158\u0001\u0000\u0000\u0000\u2156\u2154"+
		"\u0001\u0000\u0000\u0000\u2156\u2157\u0001\u0000\u0000\u0000\u2157\u044f"+
		"\u0001\u0000\u0000\u0000\u2158\u2156\u0001\u0000\u0000\u0000\u2159\u215a"+
		"\u0003\u055e\u02af\u0000\u215a\u215b\u0003\u0460\u0230\u0000\u215b\u215c"+
		"\u0003n7\u0000\u215c\u0451\u0001\u0000\u0000\u0000\u215d\u215e\u0005\u01da"+
		"\u0000\u0000\u215e\u216e\u0005\u0002\u0000\u0000\u215f\u2160\u0003\u04b8"+
		"\u025c\u0000\u2160\u2161\u0003\u04d2\u0269\u0000\u2161\u2162\u0005\u01db"+
		"\u0000\u0000\u2162\u2163\u0003\u0454\u022a\u0000\u2163\u216f\u0001\u0000"+
		"\u0000\u0000\u2164\u2165\u0005\u01dc\u0000\u0000\u2165\u2166\u0005\u0002"+
		"\u0000\u0000\u2166\u2167\u0003\u045c\u022e\u0000\u2167\u2168\u0005\u0003"+
		"\u0000\u0000\u2168\u2169\u0005\u0006\u0000\u0000\u2169\u216a\u0003\u04b8"+
		"\u025c\u0000\u216a\u216b\u0003\u04d2\u0269\u0000\u216b\u216c\u0005\u01db"+
		"\u0000\u0000\u216c\u216d\u0003\u0454\u022a\u0000\u216d\u216f\u0001\u0000"+
		"\u0000\u0000\u216e\u215f\u0001\u0000\u0000\u0000\u216e\u2164\u0001\u0000"+
		"\u0000\u0000\u216f\u2170\u0001\u0000\u0000\u0000\u2170\u2171\u0005\u0003"+
		"\u0000\u0000\u2171\u0453\u0001\u0000\u0000\u0000\u2172\u2177\u0003\u0456"+
		"\u022b\u0000\u2173\u2174\u0005\u0006\u0000\u0000\u2174\u2176\u0003\u0456"+
		"\u022b\u0000\u2175\u2173\u0001\u0000\u0000\u0000\u2176\u2179\u0001\u0000"+
		"\u0000\u0000\u2177\u2175\u0001\u0000\u0000\u0000\u2177\u2178\u0001\u0000"+
		"\u0000\u0000\u2178\u0455\u0001\u0000\u0000\u0000\u2179\u2177\u0001\u0000"+
		"\u0000\u0000\u217a\u2181\u0003\u055e\u02af\u0000\u217b\u217d\u0003\u0460"+
		"\u0230\u0000\u217c\u217e\u0003\u0458\u022c\u0000\u217d\u217c\u0001\u0000"+
		"\u0000\u0000\u217d\u217e\u0001\u0000\u0000\u0000\u217e\u2182\u0001\u0000"+
		"\u0000\u0000\u217f\u2180\u0005>\u0000\u0000\u2180\u2182\u0005\u01d9\u0000"+
		"\u0000\u2181\u217b\u0001\u0000\u0000\u0000\u2181\u217f\u0001\u0000\u0000"+
		"\u0000\u2182\u0457\u0001\u0000\u0000\u0000\u2183\u2185\u0003\u045a\u022d"+
		"\u0000\u2184\u2183\u0001\u0000\u0000\u0000\u2185\u2186\u0001\u0000\u0000"+
		"\u0000\u2186\u2184\u0001\u0000\u0000\u0000\u2186\u2187\u0001\u0000\u0000"+
		"\u0000\u2187\u0459\u0001\u0000\u0000\u0000\u2188\u2189\u00055\u0000\u0000"+
		"\u2189\u2191\u0003\u048c\u0246\u0000\u218a\u218b\u0003\u0568\u02b4\u0000"+
		"\u218b\u218c\u0003\u048c\u0246\u0000\u218c\u2191\u0001\u0000\u0000\u0000"+
		"\u218d\u218e\u0005M\u0000\u0000\u218e\u2191\u0005N\u0000\u0000\u218f\u2191"+
		"\u0005N\u0000\u0000\u2190\u2188\u0001\u0000\u0000\u0000\u2190\u218a\u0001"+
		"\u0000\u0000\u0000\u2190\u218d\u0001\u0000\u0000\u0000\u2190\u218f\u0001"+
		"\u0000\u0000\u0000\u2191\u045b\u0001\u0000\u0000\u0000\u2192\u2197\u0003"+
		"\u045e\u022f\u0000\u2193\u2194\u0005\u0006\u0000\u0000\u2194\u2196\u0003"+
		"\u045e\u022f\u0000\u2195\u2193\u0001\u0000\u0000\u0000\u2196\u2199\u0001"+
		"\u0000\u0000\u0000\u2197\u2195\u0001\u0000\u0000\u0000\u2197\u2198\u0001"+
		"\u0000\u0000\u0000\u2198\u045d\u0001\u0000\u0000\u0000\u2199\u2197\u0001"+
		"\u0000\u0000\u0000\u219a\u219b\u0003\u04b6\u025b\u0000\u219b\u219c\u0005"+
		"$\u0000\u0000\u219c\u219d\u0003\u0566\u02b3\u0000\u219d\u21a1\u0001\u0000"+
		"\u0000\u0000\u219e\u219f\u00055\u0000\u0000\u219f\u21a1\u0003\u04b6\u025b"+
		"\u0000\u21a0\u219a\u0001\u0000\u0000\u0000\u21a0\u219e\u0001\u0000\u0000"+
		"\u0000\u21a1\u045f\u0001\u0000\u0000\u0000\u21a2\u21a4\u0005\u0198\u0000"+
		"\u0000\u21a3\u21a2\u0001\u0000\u0000\u0000\u21a3\u21a4\u0001\u0000\u0000"+
		"\u0000\u21a4\u21a5\u0001\u0000\u0000\u0000\u21a5\u21ae\u0003\u0464\u0232"+
		"\u0000\u21a6\u21af\u0003\u0462\u0231\u0000\u21a7\u21ac\u0005#\u0000\u0000"+
		"\u21a8\u21a9\u0005\u0004\u0000\u0000\u21a9\u21aa\u0003\u054e\u02a7\u0000"+
		"\u21aa\u21ab\u0005\u0005\u0000\u0000\u21ab\u21ad\u0001\u0000\u0000\u0000"+
		"\u21ac\u21a8\u0001\u0000\u0000\u0000\u21ac\u21ad\u0001\u0000\u0000\u0000"+
		"\u21ad\u21af\u0001\u0000\u0000\u0000\u21ae\u21a6\u0001\u0000\u0000\u0000"+
		"\u21ae\u21a7\u0001\u0000\u0000\u0000\u21af\u21b5\u0001\u0000\u0000\u0000"+
		"\u21b0\u21b1\u0003\u053a\u029d\u0000\u21b1\u21b2\u0005\u001b\u0000\u0000"+
		"\u21b2\u21b3\u0007\'\u0000\u0000\u21b3\u21b5\u0001\u0000\u0000\u0000\u21b4"+
		"\u21a3\u0001\u0000\u0000\u0000\u21b4\u21b0\u0001\u0000\u0000\u0000\u21b5"+
		"\u0461\u0001\u0000\u0000\u0000\u21b6\u21b8\u0005\u0004\u0000\u0000\u21b7"+
		"\u21b9\u0003\u054e\u02a7\u0000\u21b8\u21b7\u0001\u0000\u0000\u0000\u21b8"+
		"\u21b9\u0001\u0000\u0000\u0000\u21b9\u21ba\u0001\u0000\u0000\u0000\u21ba"+
		"\u21bc\u0005\u0005\u0000\u0000\u21bb\u21b6\u0001\u0000\u0000\u0000\u21bc"+
		"\u21bf\u0001\u0000\u0000\u0000\u21bd\u21bb\u0001\u0000\u0000\u0000\u21bd"+
		"\u21be\u0001\u0000\u0000\u0000\u21be\u0463\u0001\u0000\u0000\u0000\u21bf"+
		"\u21bd\u0001\u0000\u0000\u0000\u21c0\u21ce\u0003\u0468\u0234\u0000\u21c1"+
		"\u21ce\u0003\u046c\u0236\u0000\u21c2\u21ce\u0003\u0470\u0238\u0000\u21c3"+
		"\u21ce\u0003\u0478\u023c\u0000\u21c4\u21ce\u0003\u0480\u0240\u0000\u21c5"+
		"\u21cb\u0003\u0482\u0241\u0000\u21c6\u21cc\u0003\u0486\u0243\u0000\u21c7"+
		"\u21c8\u0005\u0002\u0000\u0000\u21c8\u21c9\u0003\u054e\u02a7\u0000\u21c9"+
		"\u21ca\u0005\u0003\u0000\u0000\u21ca\u21cc\u0001\u0000\u0000\u0000\u21cb"+
		"\u21c6\u0001\u0000\u0000\u0000\u21cb\u21c7\u0001\u0000\u0000\u0000\u21cc"+
		"\u21ce\u0001\u0000\u0000\u0000\u21cd\u21c0\u0001\u0000\u0000\u0000\u21cd"+
		"\u21c1\u0001\u0000\u0000\u0000\u21cd\u21c2\u0001\u0000\u0000\u0000\u21cd"+
		"\u21c3\u0001\u0000\u0000\u0000\u21cd\u21c4\u0001\u0000\u0000\u0000\u21cd"+
		"\u21c5\u0001\u0000\u0000\u0000\u21ce\u0465\u0001\u0000\u0000\u0000\u21cf"+
		"\u21d4\u0003\u046c\u0236\u0000\u21d0\u21d4\u0003\u0472\u0239\u0000\u21d1"+
		"\u21d4\u0003\u047a\u023d\u0000\u21d2\u21d4\u0003\u0480\u0240\u0000\u21d3"+
		"\u21cf\u0001\u0000\u0000\u0000\u21d3\u21d0\u0001\u0000\u0000\u0000\u21d3"+
		"\u21d1\u0001\u0000\u0000\u0000\u21d3\u21d2\u0001\u0000\u0000\u0000\u21d4"+
		"\u0467\u0001\u0000\u0000\u0000\u21d5\u21da\u0003\u0574\u02ba\u0000\u21d6"+
		"\u21da\u0003\u0562\u02b1\u0000\u21d7\u21da\u0005w\u0000\u0000\u21d8\u21da"+
		"\u0005~\u0000\u0000\u21d9\u21d5\u0001\u0000\u0000\u0000\u21d9\u21d6\u0001"+
		"\u0000\u0000\u0000\u21d9\u21d7\u0001\u0000\u0000\u0000\u21d9\u21d8\u0001"+
		"\u0000\u0000\u0000\u21da\u21dc\u0001\u0000\u0000\u0000\u21db\u21dd\u0003"+
		"\u020e\u0107\u0000\u21dc\u21db\u0001\u0000\u0000\u0000\u21dc\u21dd\u0001"+
		"\u0000\u0000\u0000\u21dd\u21de\u0001\u0000\u0000\u0000\u21de\u21df\u0003"+
		"\u046a\u0235\u0000\u21df\u0469\u0001\u0000\u0000\u0000\u21e0\u21e1\u0005"+
		"\u0002\u0000\u0000\u21e1\u21e2\u0003\u0502\u0281\u0000\u21e2\u21e3\u0005"+
		"\u0003\u0000\u0000\u21e3\u21e6\u0001\u0000\u0000\u0000\u21e4\u21e6\u0001"+
		"\u0000\u0000\u0000\u21e5\u21e0\u0001\u0000\u0000\u0000\u21e5\u21e4\u0001"+
		"\u0000\u0000\u0000\u21e6\u046b\u0001\u0000\u0000\u0000\u21e7\u21f8\u0005"+
		"\u018a\u0000\u0000\u21e8\u21f8\u0005\u018b\u0000\u0000\u21e9\u21f8\u0005"+
		"\u0199\u0000\u0000\u21ea\u21f8\u0005\u017d\u0000\u0000\u21eb\u21f8\u0005"+
		"\u0196\u0000\u0000\u21ec\u21ed\u0005\u0187\u0000\u0000\u21ed\u21f8\u0003"+
		"\u046e\u0237\u0000\u21ee\u21ef\u0005\u00be\u0000\u0000\u21ef\u21f8\u0005"+
		"\u0195\u0000\u0000\u21f0\u21f1\u0005\u0184\u0000\u0000\u21f1\u21f8\u0003"+
		"\u046a\u0235\u0000\u21f2\u21f3\u0005\u0183\u0000\u0000\u21f3\u21f8\u0003"+
		"\u046a\u0235\u0000\u21f4\u21f5\u0005\u0192\u0000\u0000\u21f5\u21f8\u0003"+
		"\u046a\u0235\u0000\u21f6\u21f8\u0005\u017f\u0000\u0000\u21f7\u21e7\u0001"+
		"\u0000\u0000\u0000\u21f7\u21e8\u0001\u0000\u0000\u0000\u21f7\u21e9\u0001"+
		"\u0000\u0000\u0000\u21f7\u21ea\u0001\u0000\u0000\u0000\u21f7\u21eb\u0001"+
		"\u0000\u0000\u0000\u21f7\u21ec\u0001\u0000\u0000\u0000\u21f7\u21ee\u0001"+
		"\u0000\u0000\u0000\u21f7\u21f0\u0001\u0000\u0000\u0000\u21f7\u21f2\u0001"+
		"\u0000\u0000\u0000\u21f7\u21f4\u0001\u0000\u0000\u0000\u21f7\u21f6\u0001"+
		"\u0000\u0000\u0000\u21f8\u046d\u0001\u0000\u0000\u0000\u21f9\u21fa\u0005"+
		"\u0002\u0000\u0000\u21fa\u21fb\u0003\u054e\u02a7\u0000\u21fb\u21fc\u0005"+
		"\u0003\u0000\u0000\u21fc\u21ff\u0001\u0000\u0000\u0000\u21fd\u21ff\u0001"+
		"\u0000\u0000\u0000\u21fe\u21f9\u0001\u0000\u0000\u0000\u21fe\u21fd\u0001"+
		"\u0000\u0000\u0000\u21ff\u046f\u0001\u0000\u0000\u0000\u2200\u2203\u0003"+
		"\u0474\u023a\u0000\u2201\u2203\u0003\u0476\u023b\u0000\u2202\u2200\u0001"+
		"\u0000\u0000\u0000\u2202\u2201\u0001\u0000\u0000\u0000\u2203\u0471\u0001"+
		"\u0000\u0000\u0000\u2204\u2207\u0003\u0474\u023a\u0000\u2205\u2207\u0003"+
		"\u0476\u023b\u0000\u2206\u2204\u0001\u0000\u0000\u0000\u2206\u2205\u0001"+
		"\u0000\u0000\u0000\u2207\u0473\u0001\u0000\u0000\u0000\u2208\u2209\u0005"+
		"\u017e\u0000\u0000\u2209\u220a\u0003\u047e\u023f\u0000\u220a\u220b\u0005"+
		"\u0002\u0000\u0000\u220b\u220c\u0003\u0502\u0281\u0000\u220c\u220d\u0005"+
		"\u0003\u0000\u0000\u220d\u0475\u0001\u0000\u0000\u0000\u220e\u220f\u0005"+
		"\u017e\u0000\u0000\u220f\u2210\u0003\u047e\u023f\u0000\u2210\u0477\u0001"+
		"\u0000\u0000\u0000\u2211\u2216\u0003\u047c\u023e\u0000\u2212\u2213\u0005"+
		"\u0002\u0000\u0000\u2213\u2214\u0003\u054e\u02a7\u0000\u2214\u2215\u0005"+
		"\u0003\u0000\u0000\u2215\u2217\u0001\u0000\u0000\u0000\u2216\u2212\u0001"+
		"\u0000\u0000\u0000\u2216\u2217\u0001\u0000\u0000\u0000\u2217\u0479\u0001"+
		"\u0000\u0000\u0000\u2218\u221d\u0003\u047c\u023e\u0000\u2219\u221a\u0005"+
		"\u0002\u0000\u0000\u221a\u221b\u0003\u054e\u02a7\u0000\u221b\u221c\u0005"+
		"\u0003\u0000\u0000\u221c\u221e\u0001\u0000\u0000\u0000\u221d\u2219\u0001"+
		"\u0000\u0000\u0000\u221d\u221e\u0001\u0000\u0000\u0000\u221e\u047b\u0001"+
		"\u0000\u0000\u0000\u221f\u2220\u0007(\u0000\u0000\u2220\u2226\u0003\u047e"+
		"\u023f\u0000\u2221\u2226\u0005\u01a0\u0000\u0000\u2222\u2223\u0005\u018e"+
		"\u0000\u0000\u2223\u2224\u0007)\u0000\u0000\u2224\u2226\u0003\u047e\u023f"+
		"\u0000\u2225\u221f\u0001\u0000\u0000\u0000\u2225\u2221\u0001\u0000\u0000"+
		"\u0000\u2225\u2222\u0001\u0000\u0000\u0000\u2226\u047d\u0001\u0000\u0000"+
		"\u0000\u2227\u222a\u0005\u016f\u0000\u0000\u2228\u222a\u0001\u0000\u0000"+
		"\u0000\u2229\u2227\u0001\u0000\u0000\u0000\u2229\u2228\u0001\u0000\u0000"+
		"\u0000\u222a\u047f\u0001\u0000\u0000\u0000\u222b\u2230\u0007*\u0000\u0000"+
		"\u222c\u222d\u0005\u0002\u0000\u0000\u222d\u222e\u0003\u054e\u02a7\u0000"+
		"\u222e\u222f\u0005\u0003\u0000\u0000\u222f\u2231\u0001\u0000\u0000\u0000"+
		"\u2230\u222c\u0001\u0000\u0000\u0000\u2230\u2231\u0001\u0000\u0000\u0000"+
		"\u2231\u2232\u0001\u0000\u0000\u0000\u2232\u2233\u0003\u0484\u0242\u0000"+
		"\u2233\u0481\u0001\u0000\u0000\u0000\u2234\u2235\u0005\u018c\u0000\u0000"+
		"\u2235\u0483\u0001\u0000\u0000\u0000\u2236\u2237\u0005i\u0000\u0000\u2237"+
		"\u2238\u0005\u019b\u0000\u0000\u2238\u223e\u0005\u017b\u0000\u0000\u2239"+
		"\u223a\u0005\u0174\u0000\u0000\u223a\u223b\u0005\u019b\u0000\u0000\u223b"+
		"\u223e\u0005\u017b\u0000\u0000\u223c\u223e\u0001\u0000\u0000\u0000\u223d"+
		"\u2236\u0001\u0000\u0000\u0000\u223d\u2239\u0001\u0000\u0000\u0000\u223d"+
		"\u223c\u0001\u0000\u0000\u0000\u223e\u0485\u0001\u0000\u0000\u0000\u223f"+
		"\u225a\u0005\u0179\u0000\u0000\u2240\u225a\u0005\u0101\u0000\u0000\u2241"+
		"\u225a\u0005\u00b0\u0000\u0000\u2242\u225a\u0005\u00da\u0000\u0000\u2243"+
		"\u225a\u0005\u00fe\u0000\u0000\u2244\u225a\u0003\u0488\u0244\u0000\u2245"+
		"\u2246\u0005\u0179\u0000\u0000\u2246\u2247\u0005^\u0000\u0000\u2247\u225a"+
		"\u0005\u0101\u0000\u0000\u2248\u2249\u0005\u00b0\u0000\u0000\u2249\u224d"+
		"\u0005^\u0000\u0000\u224a\u224e\u0005\u00da\u0000\u0000\u224b\u224e\u0005"+
		"\u00fe\u0000\u0000\u224c\u224e\u0003\u0488\u0244\u0000\u224d\u224a\u0001"+
		"\u0000\u0000\u0000\u224d\u224b\u0001\u0000\u0000\u0000\u224d\u224c\u0001"+
		"\u0000\u0000\u0000\u224e\u225a\u0001\u0000\u0000\u0000\u224f\u2250\u0005"+
		"\u00da\u0000\u0000\u2250\u2253\u0005^\u0000\u0000\u2251\u2254\u0005\u00fe"+
		"\u0000\u0000\u2252\u2254\u0003\u0488\u0244\u0000\u2253\u2251\u0001\u0000"+
		"\u0000\u0000\u2253\u2252\u0001\u0000\u0000\u0000\u2254\u225a\u0001\u0000"+
		"\u0000\u0000\u2255\u2256\u0005\u00fe\u0000\u0000\u2256\u2257\u0005^\u0000"+
		"\u0000\u2257\u225a\u0003\u0488\u0244\u0000\u2258\u225a\u0001\u0000\u0000"+
		"\u0000\u2259\u223f\u0001\u0000\u0000\u0000\u2259\u2240\u0001\u0000\u0000"+
		"\u0000\u2259\u2241\u0001\u0000\u0000\u0000\u2259\u2242\u0001\u0000\u0000"+
		"\u0000\u2259\u2243\u0001\u0000\u0000\u0000\u2259\u2244\u0001\u0000\u0000"+
		"\u0000\u2259\u2245\u0001\u0000\u0000\u0000\u2259\u2248\u0001\u0000\u0000"+
		"\u0000\u2259\u224f\u0001\u0000\u0000\u0000\u2259\u2255\u0001\u0000\u0000"+
		"\u0000\u2259\u2258\u0001\u0000\u0000\u0000\u225a\u0487\u0001\u0000\u0000"+
		"\u0000\u225b\u2260\u0005\u013f\u0000\u0000\u225c\u225d\u0005\u0002\u0000"+
		"\u0000\u225d\u225e\u0003\u054e\u02a7\u0000\u225e\u225f\u0005\u0003\u0000"+
		"\u0000\u225f\u2261\u0001\u0000\u0000\u0000\u2260\u225c\u0001\u0000\u0000"+
		"\u0000\u2260\u2261\u0001\u0000\u0000\u0000\u2261\u0489\u0001\u0000\u0000"+
		"\u0000\u2262\u2263\u0005\u00c5\u0000\u0000\u2263\u2266\u0003\u048c\u0246"+
		"\u0000\u2264\u2266\u0001\u0000\u0000\u0000\u2265\u2262\u0001\u0000\u0000"+
		"\u0000\u2265\u2264\u0001\u0000\u0000\u0000\u2266\u048b\u0001\u0000\u0000"+
		"\u0000\u2267\u2268\u0003\u048e\u0247\u0000\u2268\u048d\u0001\u0000\u0000"+
		"\u0000\u2269\u226b\u0003\u0490\u0248\u0000\u226a\u226c\u0003\u04fc\u027e"+
		"\u0000\u226b\u226a\u0001\u0000\u0000\u0000\u226b\u226c\u0001\u0000\u0000"+
		"\u0000\u226c\u048f\u0001\u0000\u0000\u0000\u226d\u2272\u0003\u0492\u0249"+
		"\u0000\u226e\u226f\u0007+\u0000\u0000\u226f\u2271\u0003\u0492\u0249\u0000"+
		"\u2270\u226e\u0001\u0000\u0000\u0000\u2271\u2274\u0001\u0000\u0000\u0000"+
		"\u2272\u2270\u0001\u0000\u0000\u0000\u2272\u2273\u0001\u0000\u0000\u0000"+
		"\u2273\u0491\u0001\u0000\u0000\u0000\u2274\u2272\u0001\u0000\u0000\u0000"+
		"\u2275\u227a\u0003\u0494\u024a\u0000\u2276\u2277\u0005R\u0000\u0000\u2277"+
		"\u2279\u0003\u0494\u024a\u0000\u2278\u2276\u0001\u0000\u0000\u0000\u2279"+
		"\u227c\u0001\u0000\u0000\u0000\u227a\u2278\u0001\u0000\u0000\u0000\u227a"+
		"\u227b\u0001\u0000\u0000\u0000\u227b\u0493\u0001\u0000\u0000\u0000\u227c"+
		"\u227a\u0001\u0000\u0000\u0000\u227d\u2282\u0003\u0496\u024b\u0000\u227e"+
		"\u227f\u0005!\u0000\u0000\u227f\u2281\u0003\u0496\u024b\u0000\u2280\u227e"+
		"\u0001\u0000\u0000\u0000\u2281\u2284\u0001\u0000\u0000\u0000\u2282\u2280"+
		"\u0001\u0000\u0000\u0000\u2282\u2283\u0001\u0000\u0000\u0000\u2283\u0495"+
		"\u0001\u0000\u0000\u0000\u2284\u2282\u0001\u0000\u0000\u0000\u2285\u2291"+
		"\u0003\u0498\u024c\u0000\u2286\u2288\u0005M\u0000\u0000\u2287\u2286\u0001"+
		"\u0000\u0000\u0000\u2287\u2288\u0001\u0000\u0000\u0000\u2288\u2289\u0001"+
		"\u0000\u0000\u0000\u2289\u228b\u0005\u017c\u0000\u0000\u228a\u228c\u0005"+
		"[\u0000\u0000\u228b\u228a\u0001\u0000\u0000\u0000\u228b\u228c\u0001\u0000"+
		"\u0000\u0000\u228c\u228d\u0001\u0000\u0000\u0000\u228d\u228e\u0003\u0498"+
		"\u024c\u0000\u228e\u228f\u0005!\u0000\u0000\u228f\u2290\u0003\u0498\u024c"+
		"\u0000\u2290\u2292\u0001\u0000\u0000\u0000\u2291\u2287\u0001\u0000\u0000"+
		"\u0000\u2291\u2292\u0001\u0000\u0000\u0000\u2292\u0497\u0001\u0000\u0000"+
		"\u0000\u2293\u2299\u0003\u049a\u024d\u0000\u2294\u2296\u0005M\u0000\u0000"+
		"\u2295\u2294\u0001\u0000\u0000\u0000\u2295\u2296\u0001\u0000\u0000\u0000"+
		"\u2296\u2297\u0001\u0000\u0000\u0000\u2297\u2298\u0005D\u0000\u0000\u2298"+
		"\u229a\u0003\u051c\u028e\u0000\u2299\u2295\u0001\u0000\u0000\u0000\u2299"+
		"\u229a\u0001\u0000\u0000\u0000\u229a\u0499\u0001\u0000\u0000\u0000\u229b"+
		"\u229d\u0005M\u0000\u0000\u229c\u229b\u0001\u0000\u0000\u0000\u229c\u229d"+
		"\u0001\u0000\u0000\u0000\u229d\u229e\u0001\u0000\u0000\u0000\u229e\u229f"+
		"\u0003\u049c\u024e\u0000\u229f\u049b\u0001\u0000\u0000\u0000\u22a0\u22a2"+
		"\u0003\u049e\u024f\u0000\u22a1\u22a3\u0007,\u0000\u0000\u22a2\u22a1\u0001"+
		"\u0000\u0000\u0000\u22a2\u22a3\u0001\u0000\u0000\u0000\u22a3\u049d\u0001"+
		"\u0000\u0000\u0000\u22a4\u22bc\u0003\u04a0\u0250\u0000\u22a5\u22a7\u0005"+
		"t\u0000\u0000\u22a6\u22a8\u0005M\u0000\u0000\u22a7\u22a6\u0001\u0000\u0000"+
		"\u0000\u22a7\u22a8\u0001\u0000\u0000\u0000\u22a8\u22ba\u0001\u0000\u0000"+
		"\u0000\u22a9\u22bb\u0005N\u0000\u0000\u22aa\u22bb\u0005`\u0000\u0000\u22ab"+
		"\u22bb\u0005<\u0000\u0000\u22ac\u22bb\u0005\u0166\u0000\u0000\u22ad\u22ae"+
		"\u00058\u0000\u0000\u22ae\u22af\u0005@\u0000\u0000\u22af\u22bb\u0003\u048c"+
		"\u0246\u0000\u22b0\u22b1\u0005\u010c\u0000\u0000\u22b1\u22b2\u0005\u0002"+
		"\u0000\u0000\u22b2\u22b3\u0003\u0508\u0284\u0000\u22b3\u22b4\u0005\u0003"+
		"\u0000\u0000\u22b4\u22bb\u0001\u0000\u0000\u0000\u22b5\u22bb\u0005\u00bc"+
		"\u0000\u0000\u22b6\u22b8\u0003\u0512\u0289\u0000\u22b7\u22b6\u0001\u0000"+
		"\u0000\u0000\u22b7\u22b8\u0001\u0000\u0000\u0000\u22b8\u22b9\u0001\u0000"+
		"\u0000\u0000\u22b9\u22bb\u0005\u01de\u0000\u0000\u22ba\u22a9\u0001\u0000"+
		"\u0000\u0000\u22ba\u22aa\u0001\u0000\u0000\u0000\u22ba\u22ab\u0001\u0000"+
		"\u0000\u0000\u22ba\u22ac\u0001\u0000\u0000\u0000\u22ba\u22ad\u0001\u0000"+
		"\u0000\u0000\u22ba\u22b0\u0001\u0000\u0000\u0000\u22ba\u22b5\u0001\u0000"+
		"\u0000\u0000\u22ba\u22b7\u0001\u0000\u0000\u0000\u22bb\u22bd\u0001\u0000"+
		"\u0000\u0000\u22bc\u22a5\u0001\u0000\u0000\u0000\u22bc\u22bd\u0001\u0000"+
		"\u0000\u0000\u22bd\u049f\u0001\u0000\u0000\u0000\u22be\u22ca\u0003\u04a2"+
		"\u0251\u0000\u22bf\u22c0\u0007-\u0000\u0000\u22c0\u22cb\u0003\u04a2\u0251"+
		"\u0000\u22c1\u22c2\u0003\u0500\u0280\u0000\u22c2\u22c8\u0003\u04f6\u027b"+
		"\u0000\u22c3\u22c9\u0003\u03c2\u01e1\u0000\u22c4\u22c5\u0005\u0002\u0000"+
		"\u0000\u22c5\u22c6\u0003\u048c\u0246\u0000\u22c6\u22c7\u0005\u0003\u0000"+
		"\u0000\u22c7\u22c9\u0001\u0000\u0000\u0000\u22c8\u22c3\u0001\u0000\u0000"+
		"\u0000\u22c8\u22c4\u0001\u0000\u0000\u0000\u22c9\u22cb\u0001\u0000\u0000"+
		"\u0000\u22ca\u22bf\u0001\u0000\u0000\u0000\u22ca\u22c1\u0001\u0000\u0000"+
		"\u0000\u22ca\u22cb\u0001\u0000\u0000\u0000\u22cb\u04a1\u0001\u0000\u0000"+
		"\u0000\u22cc\u22d9\u0003\u04a4\u0252\u0000\u22cd\u22cf\u0005M\u0000\u0000"+
		"\u22ce\u22cd\u0001\u0000\u0000\u0000\u22ce\u22cf\u0001\u0000\u0000\u0000"+
		"\u22cf\u22d4\u0001\u0000\u0000\u0000\u22d0\u22d5\u0005x\u0000\u0000\u22d1"+
		"\u22d5\u0005r\u0000\u0000\u22d2\u22d3\u0005\u007f\u0000\u0000\u22d3\u22d5"+
		"\u0005^\u0000\u0000\u22d4\u22d0\u0001\u0000\u0000\u0000\u22d4\u22d1\u0001"+
		"\u0000\u0000\u0000\u22d4\u22d2\u0001\u0000\u0000\u0000\u22d5\u22d6\u0001"+
		"\u0000\u0000\u0000\u22d6\u22d7\u0003\u04a4\u0252\u0000\u22d7\u22d8\u0003"+
		"\u048a\u0245\u0000\u22d8\u22da\u0001\u0000\u0000\u0000\u22d9\u22ce\u0001"+
		"\u0000\u0000\u0000\u22d9\u22da\u0001\u0000\u0000\u0000\u22da\u04a3\u0001"+
		"\u0000\u0000\u0000\u22db\u22e1\u0003\u04a6\u0253\u0000\u22dc\u22dd\u0003"+
		"\u04fc\u027e\u0000\u22dd\u22de\u0003\u04a6\u0253\u0000\u22de\u22e0\u0001"+
		"\u0000\u0000\u0000\u22df\u22dc\u0001\u0000\u0000\u0000\u22e0\u22e3\u0001"+
		"\u0000\u0000\u0000\u22e1\u22df\u0001\u0000\u0000\u0000\u22e1\u22e2\u0001"+
		"\u0000\u0000\u0000\u22e2\u04a5\u0001\u0000\u0000\u0000\u22e3\u22e1\u0001"+
		"\u0000\u0000\u0000\u22e4\u22e6\u0003\u04fc\u027e\u0000\u22e5\u22e4\u0001"+
		"\u0000\u0000\u0000\u22e5\u22e6\u0001\u0000\u0000\u0000\u22e6\u22e7\u0001"+
		"\u0000\u0000\u0000\u22e7\u22e8\u0003\u04a8\u0254\u0000\u22e8\u04a7\u0001"+
		"\u0000\u0000\u0000\u22e9\u22ee\u0003\u04aa\u0255\u0000\u22ea\u22eb\u0007"+
		".\u0000\u0000\u22eb\u22ed\u0003\u04aa\u0255\u0000\u22ec\u22ea\u0001\u0000"+
		"\u0000\u0000\u22ed\u22f0\u0001\u0000\u0000\u0000\u22ee\u22ec\u0001\u0000"+
		"\u0000\u0000\u22ee\u22ef\u0001\u0000\u0000\u0000\u22ef\u04a9\u0001\u0000"+
		"\u0000\u0000\u22f0\u22ee\u0001\u0000\u0000\u0000\u22f1\u22f6\u0003\u04ac"+
		"\u0256\u0000\u22f2\u22f3\u0007/\u0000\u0000\u22f3\u22f5\u0003\u04ac\u0256"+
		"\u0000\u22f4\u22f2\u0001\u0000\u0000\u0000\u22f5\u22f8\u0001\u0000\u0000"+
		"\u0000\u22f6\u22f4\u0001\u0000\u0000\u0000\u22f6\u22f7\u0001\u0000\u0000"+
		"\u0000\u22f7\u04ab\u0001\u0000\u0000\u0000\u22f8\u22f6\u0001\u0000\u0000"+
		"\u0000\u22f9\u22fc\u0003\u04ae\u0257\u0000\u22fa\u22fb\u0005\u000f\u0000"+
		"\u0000\u22fb\u22fd\u0003\u048c\u0246\u0000\u22fc\u22fa\u0001\u0000\u0000"+
		"\u0000\u22fc\u22fd\u0001\u0000\u0000\u0000\u22fd\u04ad\u0001\u0000\u0000"+
		"\u0000\u22fe\u2300\u0007.\u0000\u0000\u22ff\u22fe\u0001\u0000\u0000\u0000"+
		"\u22ff\u2300\u0001\u0000\u0000\u0000\u2300\u2301\u0001\u0000\u0000\u0000"+
		"\u2301\u2302\u0003\u04b0\u0258\u0000\u2302\u04af\u0001\u0000\u0000\u0000"+
		"\u2303\u2308\u0003\u04b2\u0259\u0000\u2304\u2305\u0005\u008e\u0000\u0000"+
		"\u2305\u2306\u0005\u019b\u0000\u0000\u2306\u2307\u0005\u017b\u0000\u0000"+
		"\u2307\u2309\u0003\u048c\u0246\u0000\u2308\u2304\u0001\u0000\u0000\u0000"+
		"\u2308\u2309\u0001\u0000\u0000\u0000\u2309\u04b1\u0001\u0000\u0000\u0000"+
		"\u230a\u230d\u0003\u04b4\u025a\u0000\u230b\u230c\u0005+\u0000\u0000\u230c"+
		"\u230e\u0003\u020c\u0106\u0000\u230d\u230b\u0001\u0000\u0000\u0000\u230d"+
		"\u230e\u0001\u0000\u0000\u0000\u230e\u04b3\u0001\u0000\u0000\u0000\u230f"+
		"\u2314\u0003\u04b8\u025c\u0000\u2310\u2311\u0005\u001a\u0000\u0000\u2311"+
		"\u2313\u0003\u0460\u0230\u0000\u2312\u2310\u0001\u0000\u0000\u0000\u2313"+
		"\u2316\u0001\u0000\u0000\u0000\u2314\u2312\u0001\u0000\u0000\u0000\u2314"+
		"\u2315\u0001\u0000\u0000\u0000\u2315\u04b5\u0001\u0000\u0000\u0000\u2316"+
		"\u2314\u0001\u0000\u0000\u0000\u2317\u2318\u0006\u025b\uffff\uffff\u0000"+
		"\u2318\u231f\u0003\u04b8\u025c\u0000\u2319\u231a\u0007.\u0000\u0000\u231a"+
		"\u231f\u0003\u04b6\u025b\t\u231b\u231c\u0003\u04fc\u027e\u0000\u231c\u231d"+
		"\u0003\u04b6\u025b\u0003\u231d\u231f\u0001\u0000\u0000\u0000\u231e\u2317"+
		"\u0001\u0000\u0000\u0000\u231e\u2319\u0001\u0000\u0000\u0000\u231e\u231b"+
		"\u0001\u0000\u0000\u0000\u231f\u2347\u0001\u0000\u0000\u0000\u2320\u2321"+
		"\n\b\u0000\u0000\u2321\u2322\u0005\u000f\u0000\u0000\u2322\u2346\u0003"+
		"\u04b6\u025b\t\u2323\u2324\n\u0007\u0000\u0000\u2324\u2325\u0007/\u0000"+
		"\u0000\u2325\u2346\u0003\u04b6\u025b\b\u2326\u2327\n\u0006\u0000\u0000"+
		"\u2327\u2328\u0007.\u0000\u0000\u2328\u2346\u0003\u04b6\u025b\u0007\u2329"+
		"\u232a\n\u0005\u0000\u0000\u232a\u232b\u0003\u04fc\u027e\u0000\u232b\u232c"+
		"\u0003\u04b6\u025b\u0006\u232c\u2346\u0001\u0000\u0000\u0000\u232d\u232e"+
		"\n\u0004\u0000\u0000\u232e\u232f\u0007-\u0000\u0000\u232f\u2346\u0003"+
		"\u04b6\u025b\u0005\u2330\u2331\n\n\u0000\u0000\u2331\u2332\u0005\u001a"+
		"\u0000\u0000\u2332\u2346\u0003\u0460\u0230\u0000\u2333\u2334\n\u0002\u0000"+
		"\u0000\u2334\u2346\u0003\u04fc\u027e\u0000\u2335\u2336\n\u0001\u0000\u0000"+
		"\u2336\u2338\u0005t\u0000\u0000\u2337\u2339\u0005M\u0000\u0000\u2338\u2337"+
		"\u0001\u0000\u0000\u0000\u2338\u2339\u0001\u0000\u0000\u0000\u2339\u2343"+
		"\u0001\u0000\u0000\u0000\u233a\u233b\u00058\u0000\u0000\u233b\u233c\u0005"+
		"@\u0000\u0000\u233c\u2344\u0003\u04b6\u025b\u0000\u233d\u233e\u0005\u010c"+
		"\u0000\u0000\u233e\u233f\u0005\u0002\u0000\u0000\u233f\u2340\u0003\u0508"+
		"\u0284\u0000\u2340\u2341\u0005\u0003\u0000\u0000\u2341\u2344\u0001\u0000"+
		"\u0000\u0000\u2342\u2344\u0005\u00bc\u0000\u0000\u2343\u233a\u0001\u0000"+
		"\u0000\u0000\u2343\u233d\u0001\u0000\u0000\u0000\u2343\u2342\u0001\u0000"+
		"\u0000\u0000\u2344\u2346\u0001\u0000\u0000\u0000\u2345\u2320\u0001\u0000"+
		"\u0000\u0000\u2345\u2323\u0001\u0000\u0000\u0000\u2345\u2326\u0001\u0000"+
		"\u0000\u0000\u2345\u2329\u0001\u0000\u0000\u0000\u2345\u232d\u0001\u0000"+
		"\u0000\u0000\u2345\u2330\u0001\u0000\u0000\u0000\u2345\u2333\u0001\u0000"+
		"\u0000\u0000\u2345\u2335\u0001\u0000\u0000\u0000\u2346\u2349\u0001\u0000"+
		"\u0000\u0000\u2347\u2345\u0001\u0000\u0000\u0000\u2347\u2348\u0001\u0000"+
		"\u0000\u0000\u2348\u04b7\u0001\u0000\u0000\u0000\u2349\u2347\u0001\u0000"+
		"\u0000\u0000\u234a\u234b\u0005\u0185\u0000\u0000\u234b\u236f\u0003\u03c2"+
		"\u01e1\u0000\u234c\u234f\u0005#\u0000\u0000\u234d\u2350\u0003\u03c2\u01e1"+
		"\u0000\u234e\u2350\u0003\u050a\u0285\u0000\u234f\u234d\u0001\u0000\u0000"+
		"\u0000\u234f\u234e\u0001\u0000\u0000\u0000\u2350\u236f\u0001\u0000\u0000"+
		"\u0000\u2351\u2352\u0005\u001c\u0000\u0000\u2352\u236f\u0003\u0530\u0298"+
		"\u0000\u2353\u2354\u0005\u01d6\u0000\u0000\u2354\u2355\u0005\u0002\u0000"+
		"\u0000\u2355\u2356\u0003\u0502\u0281\u0000\u2356\u2357\u0005\u0003\u0000"+
		"\u0000\u2357\u236f\u0001\u0000\u0000\u0000\u2358\u2359\u0005b\u0000\u0000"+
		"\u2359\u236f\u0003\u03c2\u01e1\u0000\u235a\u236f\u0003\u0528\u0294\u0000"+
		"\u235b\u236f\u0003\u0546\u02a3\u0000\u235c\u236f\u0003\u04ba\u025d\u0000"+
		"\u235d\u235e\u0005\u0002\u0000\u0000\u235e\u235f\u0003\u048c\u0246\u0000"+
		"\u235f\u2360\u0005\u0003\u0000\u0000\u2360\u2361\u0003\u0530\u0298\u0000"+
		"\u2361\u236f\u0001\u0000\u0000\u0000\u2362\u236f\u0003\u051e\u028f\u0000"+
		"\u2363\u236f\u0003\u04be\u025f\u0000\u2364\u2366\u0003\u03c2\u01e1\u0000"+
		"\u2365\u2367\u0003\u052e\u0297\u0000\u2366\u2365\u0001\u0000\u0000\u0000"+
		"\u2366\u2367\u0001\u0000\u0000\u0000\u2367\u236f\u0001\u0000\u0000\u0000"+
		"\u2368\u236f\u0003\u04f2\u0279\u0000\u2369\u236f\u0003\u04f4\u027a\u0000"+
		"\u236a\u236b\u0003\u04f0\u0278\u0000\u236b\u236c\u0005}\u0000\u0000\u236c"+
		"\u236d\u0003\u04f0\u0278\u0000\u236d\u236f\u0001\u0000\u0000\u0000\u236e"+
		"\u234a\u0001\u0000\u0000\u0000\u236e\u234c\u0001\u0000\u0000\u0000\u236e"+
		"\u2351\u0001\u0000\u0000\u0000\u236e\u2353\u0001\u0000\u0000\u0000\u236e"+
		"\u2358\u0001\u0000\u0000\u0000\u236e\u235a\u0001\u0000\u0000\u0000\u236e"+
		"\u235b\u0001\u0000\u0000\u0000\u236e\u235c\u0001\u0000\u0000\u0000\u236e"+
		"\u235d\u0001\u0000\u0000\u0000\u236e\u2362\u0001\u0000\u0000\u0000\u236e"+
		"\u2363\u0001\u0000\u0000\u0000\u236e\u2364\u0001\u0000\u0000\u0000\u236e"+
		"\u2368\u0001\u0000\u0000\u0000\u236e\u2369\u0001\u0000\u0000\u0000\u236e"+
		"\u236a\u0001\u0000\u0000\u0000\u236f\u04b9\u0001\u0000\u0000\u0000\u2370"+
		"\u2371\u0005\u0295\u0000\u0000\u2371\u04bb\u0001\u0000\u0000\u0000\u2372"+
		"\u2373\u0003\u0544\u02a2\u0000\u2373\u2386\u0005\u0002\u0000\u0000\u2374"+
		"\u2378\u0003\u0504\u0282\u0000\u2375\u2376\u0005\u0006\u0000\u0000\u2376"+
		"\u2377\u0005e\u0000\u0000\u2377\u2379\u0003\u0506\u0283\u0000\u2378\u2375"+
		"\u0001\u0000\u0000\u0000\u2378\u2379\u0001\u0000\u0000\u0000\u2379\u237a"+
		"\u0001\u0000\u0000\u0000\u237a\u237b\u0003\u03e6\u01f3\u0000\u237b\u2387"+
		"\u0001\u0000\u0000\u0000\u237c\u237d\u0005e\u0000\u0000\u237d\u237e\u0003"+
		"\u0506\u0283\u0000\u237e\u237f\u0003\u03e6\u01f3\u0000\u237f\u2387\u0001"+
		"\u0000\u0000\u0000\u2380\u2381\u00070\u0000\u0000\u2381\u2382\u0003\u0504"+
		"\u0282\u0000\u2382\u2383\u0003\u03e6\u01f3\u0000\u2383\u2387\u0001\u0000"+
		"\u0000\u0000\u2384\u2387\u0005\t\u0000\u0000\u2385\u2387\u0001\u0000\u0000"+
		"\u0000\u2386\u2374\u0001\u0000\u0000\u0000\u2386\u237c\u0001\u0000\u0000"+
		"\u0000\u2386\u2380\u0001\u0000\u0000\u0000\u2386\u2384\u0001\u0000\u0000"+
		"\u0000\u2386\u2385\u0001\u0000\u0000\u0000\u2387\u2388\u0001\u0000\u0000"+
		"\u0000\u2388\u2389\u0005\u0003\u0000\u0000\u2389\u04bd\u0001\u0000\u0000"+
		"\u0000\u238a\u238b\u0003\u04bc\u025e\u0000\u238b\u238c\u0003\u04d6\u026b"+
		"\u0000\u238c\u238d\u0003\u04d8\u026c\u0000\u238d\u238e\u0003\u04e0\u0270"+
		"\u0000\u238e\u2391\u0001\u0000\u0000\u0000\u238f\u2391\u0003\u04c2\u0261"+
		"\u0000\u2390\u238a\u0001\u0000\u0000\u0000\u2390\u238f\u0001\u0000\u0000"+
		"\u0000\u2391\u04bf\u0001\u0000\u0000\u0000\u2392\u2395\u0003\u04bc\u025e"+
		"\u0000\u2393\u2395\u0003\u04c2\u0261\u0000\u2394\u2392\u0001\u0000\u0000"+
		"\u0000\u2394\u2393\u0001\u0000\u0000\u0000\u2395\u04c1\u0001\u0000\u0000"+
		"\u0000\u2396\u2397\u0005l\u0000\u0000\u2397\u2398\u0005>\u0000\u0000\u2398"+
		"\u2399\u0005\u0002\u0000\u0000\u2399\u239a\u0003\u048c\u0246\u0000\u239a"+
		"\u239b\u0005\u0003\u0000\u0000\u239b\u2448\u0001\u0000\u0000\u0000\u239c"+
		"\u2448\u00050\u0000\u0000\u239d\u23a2\u00052\u0000\u0000\u239e\u239f\u0005"+
		"\u0002\u0000\u0000\u239f\u23a0\u0003\u054e\u02a7\u0000\u23a0\u23a1\u0005"+
		"\u0003\u0000\u0000\u23a1\u23a3\u0001\u0000\u0000\u0000\u23a2\u239e\u0001"+
		"\u0000\u0000\u0000\u23a2\u23a3\u0001\u0000\u0000\u0000\u23a3\u2448\u0001"+
		"\u0000\u0000\u0000\u23a4\u23a9\u00053\u0000\u0000\u23a5\u23a6\u0005\u0002"+
		"\u0000\u0000\u23a6\u23a7\u0003\u054e\u02a7\u0000\u23a7\u23a8\u0005\u0003"+
		"\u0000\u0000\u23a8\u23aa\u0001\u0000\u0000\u0000\u23a9\u23a5\u0001\u0000"+
		"\u0000\u0000\u23a9\u23aa\u0001\u0000\u0000\u0000\u23aa\u2448\u0001\u0000"+
		"\u0000\u0000\u23ab\u23b0\u0005K\u0000\u0000\u23ac\u23ad\u0005\u0002\u0000"+
		"\u0000\u23ad\u23ae\u0003\u054e\u02a7\u0000\u23ae\u23af\u0005\u0003\u0000"+
		"\u0000\u23af\u23b1\u0001\u0000\u0000\u0000\u23b0\u23ac\u0001\u0000\u0000"+
		"\u0000\u23b0\u23b1\u0001\u0000\u0000\u0000\u23b1\u2448\u0001\u0000\u0000"+
		"\u0000\u23b2\u23b7\u0005L\u0000\u0000\u23b3\u23b4\u0005\u0002\u0000\u0000"+
		"\u23b4\u23b5\u0003\u054e\u02a7\u0000\u23b5\u23b6\u0005\u0003\u0000\u0000"+
		"\u23b6\u23b8\u0001\u0000\u0000\u0000\u23b7\u23b3\u0001\u0000\u0000\u0000"+
		"\u23b7\u23b8\u0001\u0000\u0000\u0000\u23b8\u2448\u0001\u0000\u0000\u0000"+
		"\u23b9\u2448\u00051\u0000\u0000\u23ba\u2448\u00054\u0000\u0000\u23bb\u2448"+
		"\u0005Y\u0000\u0000\u23bc\u2448\u0005c\u0000\u0000\u23bd\u2448\u0005/"+
		"\u0000\u0000\u23be\u2448\u0005o\u0000\u0000\u23bf\u23c0\u0005)\u0000\u0000"+
		"\u23c0\u23c1\u0005\u0002\u0000\u0000\u23c1\u23c2\u0003\u048c\u0246\u0000"+
		"\u23c2\u23c3\u0005$\u0000\u0000\u23c3\u23c4\u0003\u0460\u0230\u0000\u23c4"+
		"\u23c5\u0005\u0003\u0000\u0000\u23c5\u2448\u0001\u0000\u0000\u0000\u23c6"+
		"\u23c7\u0005\u0186\u0000\u0000\u23c7\u23c8\u0005\u0002\u0000\u0000\u23c8"+
		"\u23c9\u0003\u050e\u0287\u0000\u23c9\u23ca\u0005\u0003\u0000\u0000\u23ca"+
		"\u2448\u0001\u0000\u0000\u0000\u23cb\u23cc\u0005\u01e9\u0000\u0000\u23cc"+
		"\u23cd\u0005\u0002\u0000\u0000\u23cd\u23d0\u0003\u048c\u0246\u0000\u23ce"+
		"\u23cf\u0005\u0006\u0000\u0000\u23cf\u23d1\u0003\u0512\u0289\u0000\u23d0"+
		"\u23ce\u0001\u0000\u0000\u0000\u23d0\u23d1\u0001\u0000\u0000\u0000\u23d1"+
		"\u23d2\u0001\u0000\u0000\u0000\u23d2\u23d3\u0005\u0003\u0000\u0000\u23d3"+
		"\u2448\u0001\u0000\u0000\u0000\u23d4\u23d5\u0005\u0193\u0000\u0000\u23d5"+
		"\u23d6\u0005\u0002\u0000\u0000\u23d6\u23d7\u0003\u0514\u028a\u0000\u23d7"+
		"\u23d8\u0005\u0003\u0000\u0000\u23d8\u2448\u0001\u0000\u0000\u0000\u23d9"+
		"\u23da\u0005\u0194\u0000\u0000\u23da\u23db\u0005\u0002\u0000\u0000\u23db"+
		"\u23dc\u0003\u0516\u028b\u0000\u23dc\u23dd\u0005\u0003\u0000\u0000\u23dd"+
		"\u2448\u0001\u0000\u0000\u0000\u23de\u23df\u0005\u019a\u0000\u0000\u23df"+
		"\u23e0\u0005\u0002\u0000\u0000\u23e0\u23e1\u0003\u0518\u028c\u0000\u23e1"+
		"\u23e2\u0005\u0003\u0000\u0000\u23e2\u2448\u0001\u0000\u0000\u0000\u23e3"+
		"\u23e4\u0005\u019d\u0000\u0000\u23e4\u23e5\u0005\u0002\u0000\u0000\u23e5"+
		"\u23e6\u0003\u048c\u0246\u0000\u23e6\u23e7\u0005$\u0000\u0000\u23e7\u23e8"+
		"\u0003\u0460\u0230\u0000\u23e8\u23e9\u0005\u0003\u0000\u0000\u23e9\u2448"+
		"\u0001\u0000\u0000\u0000\u23ea\u23eb\u0005\u019e\u0000\u0000\u23eb\u23ed"+
		"\u0005\u0002\u0000\u0000\u23ec\u23ee\u00071\u0000\u0000\u23ed\u23ec\u0001"+
		"\u0000\u0000\u0000\u23ed\u23ee\u0001\u0000\u0000\u0000\u23ee\u23ef\u0001"+
		"\u0000\u0000\u0000\u23ef\u23f0\u0003\u051a\u028d\u0000\u23f0\u23f1\u0005"+
		"\u0003\u0000\u0000\u23f1\u2448\u0001\u0000\u0000\u0000\u23f2\u23f3\u0005"+
		"\u0191\u0000\u0000\u23f3\u23f4\u0005\u0002\u0000\u0000\u23f4\u23f5\u0003"+
		"\u048c\u0246\u0000\u23f5\u23f6\u0005\u0006\u0000\u0000\u23f6\u23f7\u0003"+
		"\u048c\u0246\u0000\u23f7\u23f8\u0005\u0003\u0000\u0000\u23f8\u2448\u0001"+
		"\u0000\u0000\u0000\u23f9\u23fa\u0005\u0182\u0000\u0000\u23fa\u23fb\u0005"+
		"\u0002\u0000\u0000\u23fb\u23fc\u0003\u0502\u0281\u0000\u23fc\u23fd\u0005"+
		"\u0003\u0000\u0000\u23fd\u2448\u0001\u0000\u0000\u0000\u23fe\u23ff\u0005"+
		"\u0188\u0000\u0000\u23ff\u2400\u0005\u0002\u0000\u0000\u2400\u2401\u0003"+
		"\u0502\u0281\u0000\u2401\u2402\u0005\u0003\u0000\u0000\u2402\u2448\u0001"+
		"\u0000\u0000\u0000\u2403\u2404\u0005\u018d\u0000\u0000\u2404\u2405\u0005"+
		"\u0002\u0000\u0000\u2405\u2406\u0003\u0502\u0281\u0000\u2406\u2407\u0005"+
		"\u0003\u0000\u0000\u2407\u2448\u0001\u0000\u0000\u0000\u2408\u2409\u0005"+
		"\u01a9\u0000\u0000\u2409\u240a\u0005\u0002\u0000\u0000\u240a\u240b\u0003"+
		"\u0502\u0281\u0000\u240b\u240c\u0005\u0003\u0000\u0000\u240c\u2448\u0001"+
		"\u0000\u0000\u0000\u240d\u240e\u0005\u01aa\u0000\u0000\u240e\u240f\u0005"+
		"\u0002\u0000\u0000\u240f\u2410\u0005\u0103\u0000\u0000\u2410\u2416\u0003"+
		"\u0566\u02b3\u0000\u2411\u2414\u0005\u0006\u0000\u0000\u2412\u2415\u0003"+
		"\u04c8\u0264\u0000\u2413\u2415\u0003\u0502\u0281\u0000\u2414\u2412\u0001"+
		"\u0000\u0000\u0000\u2414\u2413\u0001\u0000\u0000\u0000\u2415\u2417\u0001"+
		"\u0000\u0000\u0000\u2416\u2411\u0001\u0000\u0000\u0000\u2416\u2417\u0001"+
		"\u0000\u0000\u0000\u2417\u2418\u0001\u0000\u0000\u0000\u2418\u2419\u0005"+
		"\u0003\u0000\u0000\u2419\u2448\u0001\u0000\u0000\u0000\u241a\u241b\u0005"+
		"\u01ab\u0000\u0000\u241b\u241c\u0005\u0002\u0000\u0000\u241c\u241d\u0003"+
		"\u04b8\u025c\u0000\u241d\u241e\u0003\u04d2\u0269\u0000\u241e\u241f\u0005"+
		"\u0003\u0000\u0000\u241f\u2448\u0001\u0000\u0000\u0000\u2420\u2421\u0005"+
		"\u01ac\u0000\u0000\u2421\u2422\u0005\u0002\u0000\u0000\u2422\u2423\u0003"+
		"\u04ca\u0265\u0000\u2423\u2424\u0005\u0003\u0000\u0000\u2424\u2448\u0001"+
		"\u0000\u0000\u0000\u2425\u2426\u0005\u01ad\u0000\u0000\u2426\u2427\u0005"+
		"\u0002\u0000\u0000\u2427\u2428\u0003\u04ce\u0267\u0000\u2428\u2429\u0003"+
		"\u048c\u0246\u0000\u2429\u242a\u0003\u04d0\u0268\u0000\u242a\u242b\u0005"+
		"\u0003\u0000\u0000\u242b\u2448\u0001\u0000\u0000\u0000\u242c\u242d\u0005"+
		"\u01ae\u0000\u0000\u242d\u242e\u0005\u0002\u0000\u0000\u242e\u242f\u0005"+
		"\u0103\u0000\u0000\u242f\u2432\u0003\u0566\u02b3\u0000\u2430\u2431\u0005"+
		"\u0006\u0000\u0000\u2431\u2433\u0003\u048c\u0246\u0000\u2432\u2430\u0001"+
		"\u0000\u0000\u0000\u2432\u2433\u0001\u0000\u0000\u0000\u2433\u2434\u0001"+
		"\u0000\u0000\u0000\u2434\u2435\u0005\u0003\u0000\u0000\u2435\u2448\u0001"+
		"\u0000\u0000\u0000\u2436\u2437\u0005\u01af\u0000\u0000\u2437\u2438\u0005"+
		"\u0002\u0000\u0000\u2438\u2439\u0005\u0178\u0000\u0000\u2439\u243a\u0003"+
		"\u048c\u0246\u0000\u243a\u243b\u0005\u0006\u0000\u0000\u243b\u243c\u0003"+
		"\u04c4\u0262\u0000\u243c\u243d\u0003\u04c6\u0263\u0000\u243d\u243e\u0005"+
		"\u0003\u0000\u0000\u243e\u2448\u0001\u0000\u0000\u0000\u243f\u2440\u0005"+
		"\u01b0\u0000\u0000\u2440\u2441\u0005\u0002\u0000\u0000\u2441\u2442\u0003"+
		"\u04ce\u0267\u0000\u2442\u2443\u0003\u048c\u0246\u0000\u2443\u2444\u0005"+
		"$\u0000\u0000\u2444\u2445\u0003\u0464\u0232\u0000\u2445\u2446\u0005\u0003"+
		"\u0000\u0000\u2446\u2448\u0001\u0000\u0000\u0000\u2447\u2396\u0001\u0000"+
		"\u0000\u0000\u2447\u239c\u0001\u0000\u0000\u0000\u2447\u239d\u0001\u0000"+
		"\u0000\u0000\u2447\u23a4\u0001\u0000\u0000\u0000\u2447\u23ab\u0001\u0000"+
		"\u0000\u0000\u2447\u23b2\u0001\u0000\u0000\u0000\u2447\u23b9\u0001\u0000"+
		"\u0000\u0000\u2447\u23ba\u0001\u0000\u0000\u0000\u2447\u23bb\u0001\u0000"+
		"\u0000\u0000\u2447\u23bc\u0001\u0000\u0000\u0000\u2447\u23bd\u0001\u0000"+
		"\u0000\u0000\u2447\u23be\u0001\u0000\u0000\u0000\u2447\u23bf\u0001\u0000"+
		"\u0000\u0000\u2447\u23c6\u0001\u0000\u0000\u0000\u2447\u23cb\u0001\u0000"+
		"\u0000\u0000\u2447\u23d4\u0001\u0000\u0000\u0000\u2447\u23d9\u0001\u0000"+
		"\u0000\u0000\u2447\u23de\u0001\u0000\u0000\u0000\u2447\u23e3\u0001\u0000"+
		"\u0000\u0000\u2447\u23ea\u0001\u0000\u0000\u0000\u2447\u23f2\u0001\u0000"+
		"\u0000\u0000\u2447\u23f9\u0001\u0000\u0000\u0000\u2447\u23fe\u0001\u0000"+
		"\u0000\u0000\u2447\u2403\u0001\u0000\u0000\u0000\u2447\u2408\u0001\u0000"+
		"\u0000\u0000\u2447\u240d\u0001\u0000\u0000\u0000\u2447\u241a\u0001\u0000"+
		"\u0000\u0000\u2447\u2420\u0001\u0000\u0000\u0000\u2447\u2425\u0001\u0000"+
		"\u0000\u0000\u2447\u242c\u0001\u0000\u0000\u0000\u2447\u2436\u0001\u0000"+
		"\u0000\u0000\u2447\u243f\u0001\u0000\u0000\u0000\u2448\u04c3\u0001\u0000"+
		"\u0000\u0000\u2449\u244a\u0005\u0170\u0000\u0000\u244a\u244f\u0003\u048c"+
		"\u0246\u0000\u244b\u244c\u0005\u0170\u0000\u0000\u244c\u244d\u0005\u0106"+
		"\u0000\u0000\u244d\u244f\u0005\u01c2\u0000\u0000\u244e\u2449\u0001\u0000"+
		"\u0000\u0000\u244e\u244b\u0001\u0000\u0000\u0000\u244f\u04c5\u0001\u0000"+
		"\u0000\u0000\u2450\u2451\u0005\u0006\u0000\u0000\u2451\u2452\u0005\u014c"+
		"\u0000\u0000\u2452\u245c\u0005\u017a\u0000\u0000\u2453\u2454\u0005\u0006"+
		"\u0000\u0000\u2454\u2455\u0005\u014c\u0000\u0000\u2455\u245c\u0005\u0106"+
		"\u0000\u0000\u2456\u2457\u0005\u0006\u0000\u0000\u2457\u2458\u0005\u014c"+
		"\u0000\u0000\u2458\u2459\u0005\u0106\u0000\u0000\u2459\u245c\u0005\u01c2"+
		"\u0000\u0000\u245a\u245c\u0001\u0000\u0000\u0000\u245b\u2450\u0001\u0000"+
		"\u0000\u0000\u245b\u2453\u0001\u0000\u0000\u0000\u245b\u2456\u0001\u0000"+
		"\u0000\u0000\u245b\u245a\u0001\u0000\u0000\u0000\u245c\u04c7\u0001\u0000"+
		"\u0000\u0000\u245d\u245e\u0005\u01a1\u0000\u0000\u245e\u245f\u0005\u0002"+
		"\u0000\u0000\u245f\u2460\u0003\u04ca\u0265\u0000\u2460\u2461\u0005\u0003"+
		"\u0000\u0000\u2461\u04c9\u0001\u0000\u0000\u0000\u2462\u2467\u0003\u04cc"+
		"\u0266\u0000\u2463\u2464\u0005\u0006\u0000\u0000\u2464\u2466\u0003\u04cc"+
		"\u0266\u0000\u2465\u2463\u0001\u0000\u0000\u0000\u2466\u2469\u0001\u0000"+
		"\u0000\u0000\u2467\u2465\u0001\u0000\u0000\u0000\u2467\u2468\u0001\u0000"+
		"\u0000\u0000\u2468\u04cb\u0001\u0000\u0000\u0000\u2469\u2467\u0001\u0000"+
		"\u0000\u0000\u246a\u246d\u0003\u048c\u0246\u0000\u246b\u246c\u0005$\u0000"+
		"\u0000\u246c\u246e\u0003\u0566\u02b3\u0000\u246d\u246b\u0001\u0000\u0000"+
		"\u0000\u246d\u246e\u0001\u0000\u0000\u0000\u246e\u04cd\u0001\u0000\u0000"+
		"\u0000\u246f\u2470\u00072\u0000\u0000\u2470\u04cf\u0001\u0000\u0000\u0000"+
		"\u2471\u2472\u0005\u011d\u0000\u0000\u2472\u2477\u0005\u0173\u0000\u0000"+
		"\u2473\u2474\u0005\u0154\u0000\u0000\u2474\u2477\u0005\u0173\u0000\u0000"+
		"\u2475\u2477\u0001\u0000\u0000\u0000\u2476\u2471\u0001\u0000\u0000\u0000"+
		"\u2476\u2473\u0001\u0000\u0000\u0000\u2476\u2475\u0001\u0000\u0000\u0000"+
		"\u2477\u04d1\u0001\u0000\u0000\u0000\u2478\u2479\u0005\u0117\u0000\u0000"+
		"\u2479\u2488\u0003\u04b8\u025c\u0000\u247a\u247b\u0005\u0117\u0000\u0000"+
		"\u247b\u247c\u0003\u04b8\u025c\u0000\u247c\u247d\u0003\u04d4\u026a\u0000"+
		"\u247d\u2488\u0001\u0000\u0000\u0000\u247e\u247f\u0005\u0117\u0000\u0000"+
		"\u247f\u2480\u0003\u04d4\u026a\u0000\u2480\u2481\u0003\u04b8\u025c\u0000"+
		"\u2481\u2488\u0001\u0000\u0000\u0000\u2482\u2483\u0005\u0117\u0000\u0000"+
		"\u2483\u2484\u0003\u04d4\u026a\u0000\u2484\u2485\u0003\u04b8\u025c\u0000"+
		"\u2485\u2486\u0003\u04d4\u026a\u0000\u2486\u2488\u0001\u0000\u0000\u0000"+
		"\u2487\u2478\u0001\u0000\u0000\u0000\u2487\u247a\u0001\u0000\u0000\u0000"+
		"\u2487\u247e\u0001\u0000\u0000\u0000\u2487\u2482\u0001\u0000\u0000\u0000"+
		"\u2488\u04d3\u0001\u0000\u0000\u0000\u2489\u248a\u0005\u0093\u0000\u0000"+
		"\u248a\u248b\u00073\u0000\u0000\u248b\u04d5\u0001\u0000\u0000\u0000\u248c"+
		"\u248d\u0005\u01df\u0000\u0000\u248d\u248e\u0005B\u0000\u0000\u248e\u248f"+
		"\u0005\u0002\u0000\u0000\u248f\u2490\u0003\u03e8\u01f4\u0000\u2490\u2491"+
		"\u0005\u0003\u0000\u0000\u2491\u2494\u0001\u0000\u0000\u0000\u2492\u2494"+
		"\u0001\u0000\u0000\u0000\u2493\u248c\u0001\u0000\u0000\u0000\u2493\u2492"+
		"\u0001\u0000\u0000\u0000\u2494\u04d7\u0001\u0000\u0000\u0000\u2495\u2496"+
		"\u0005\u01e0\u0000\u0000\u2496\u2497\u0005\u0002\u0000\u0000\u2497\u2498"+
		"\u0005g\u0000\u0000\u2498\u2499\u0003\u048c\u0246\u0000\u2499\u249a\u0005"+
		"\u0003\u0000\u0000\u249a\u249d\u0001\u0000\u0000\u0000\u249b\u249d\u0001"+
		"\u0000\u0000\u0000\u249c\u2495\u0001\u0000\u0000\u0000\u249c\u249b\u0001"+
		"\u0000\u0000\u0000\u249d\u04d9\u0001\u0000\u0000\u0000\u249e\u249f\u0005"+
		"h\u0000\u0000\u249f\u24a2\u0003\u04dc\u026e\u0000\u24a0\u24a2\u0001\u0000"+
		"\u0000\u0000\u24a1\u249e\u0001\u0000\u0000\u0000\u24a1\u24a0\u0001\u0000"+
		"\u0000\u0000\u24a2\u04db\u0001\u0000\u0000\u0000\u24a3\u24a8\u0003\u04de"+
		"\u026f\u0000\u24a4\u24a5\u0005\u0006\u0000\u0000\u24a5\u24a7\u0003\u04de"+
		"\u026f\u0000\u24a6\u24a4\u0001\u0000\u0000\u0000\u24a7\u24aa\u0001\u0000"+
		"\u0000\u0000\u24a8\u24a6\u0001\u0000\u0000\u0000\u24a8\u24a9\u0001\u0000"+
		"\u0000\u0000\u24a9\u04dd\u0001\u0000\u0000\u0000\u24aa\u24a8\u0001\u0000"+
		"\u0000\u0000\u24ab\u24ac\u0003\u055e\u02af\u0000\u24ac\u24ad\u0005$\u0000"+
		"\u0000\u24ad\u24ae\u0003\u04e2\u0271\u0000\u24ae\u04df\u0001\u0000\u0000"+
		"\u0000\u24af\u24b2\u0005|\u0000\u0000\u24b0\u24b3\u0003\u04e2\u0271\u0000"+
		"\u24b1\u24b3\u0003\u055e\u02af\u0000\u24b2\u24b0\u0001\u0000\u0000\u0000"+
		"\u24b2\u24b1\u0001\u0000\u0000\u0000\u24b3\u24b6\u0001\u0000\u0000\u0000"+
		"\u24b4\u24b6\u0001\u0000\u0000\u0000\u24b5\u24af\u0001\u0000\u0000\u0000"+
		"\u24b5\u24b4\u0001\u0000\u0000\u0000\u24b6\u04e1\u0001\u0000\u0000\u0000"+
		"\u24b7\u24b8\u0005\u0002\u0000\u0000\u24b8\u24b9\u0003\u04e4\u0272\u0000"+
		"\u24b9\u24ba\u0003\u04e6\u0273\u0000\u24ba\u24bb\u0003\u03e6\u01f3\u0000"+
		"\u24bb\u24bc\u0003\u04e8\u0274\u0000\u24bc\u24bd\u0005\u0003\u0000\u0000"+
		"\u24bd\u04e3\u0001\u0000\u0000\u0000\u24be\u24c1\u0003\u055e\u02af\u0000"+
		"\u24bf\u24c1\u0001\u0000\u0000\u0000\u24c0\u24be\u0001\u0000\u0000\u0000"+
		"\u24c0\u24bf\u0001\u0000\u0000\u0000\u24c1\u04e5\u0001\u0000\u0000\u0000"+
		"\u24c2\u24c3\u0005\u0116\u0000\u0000\u24c3\u24c4\u0005\u0093\u0000\u0000"+
		"\u24c4\u24c7\u0003\u0502\u0281\u0000\u24c5\u24c7\u0001\u0000\u0000\u0000"+
		"\u24c6\u24c2\u0001\u0000\u0000\u0000\u24c6\u24c5\u0001\u0000\u0000\u0000"+
		"\u24c7\u04e7\u0001\u0000\u0000\u0000\u24c8\u24c9\u0005\u0124\u0000\u0000"+
		"\u24c9\u24ca\u0003\u04ea\u0275\u0000\u24ca\u24cb\u0003\u04ee\u0277\u0000"+
		"\u24cb\u24d6\u0001\u0000\u0000\u0000\u24cc\u24cd\u0005\u0139\u0000\u0000"+
		"\u24cd\u24ce\u0003\u04ea\u0275\u0000\u24ce\u24cf\u0003\u04ee\u0277\u0000"+
		"\u24cf\u24d6\u0001\u0000\u0000\u0000\u24d0\u24d1\u0005\u01e1\u0000\u0000"+
		"\u24d1\u24d2\u0003\u04ea\u0275\u0000\u24d2\u24d3\u0003\u04ee\u0277\u0000"+
		"\u24d3\u24d6\u0001\u0000\u0000\u0000\u24d4\u24d6\u0001\u0000\u0000\u0000"+
		"\u24d5\u24c8\u0001\u0000\u0000\u0000\u24d5\u24cc\u0001\u0000\u0000\u0000"+
		"\u24d5\u24d0\u0001\u0000\u0000\u0000\u24d5\u24d4\u0001\u0000\u0000\u0000"+
		"\u24d6\u04e9\u0001\u0000\u0000\u0000\u24d7\u24de\u0003\u04ec\u0276\u0000"+
		"\u24d8\u24d9\u0005\u017c\u0000\u0000\u24d9\u24da\u0003\u04ec\u0276\u0000"+
		"\u24da\u24db\u0005!\u0000\u0000\u24db\u24dc\u0003\u04ec\u0276\u0000\u24dc"+
		"\u24de\u0001\u0000\u0000\u0000\u24dd\u24d7\u0001\u0000\u0000\u0000\u24dd"+
		"\u24d8\u0001\u0000\u0000\u0000\u24de\u04eb\u0001\u0000\u0000\u0000\u24df"+
		"\u24e0\u0005\u0163\u0000\u0000\u24e0\u24e7\u00074\u0000\u0000\u24e1\u24e2"+
		"\u0005\u01b2\u0000\u0000\u24e2\u24e7\u0005\u0197\u0000\u0000\u24e3\u24e4"+
		"\u0003\u048c\u0246\u0000\u24e4\u24e5\u00074\u0000\u0000\u24e5\u24e7\u0001"+
		"\u0000\u0000\u0000\u24e6\u24df\u0001\u0000\u0000\u0000\u24e6\u24e1\u0001"+
		"\u0000\u0000\u0000\u24e6\u24e3\u0001\u0000\u0000\u0000\u24e7\u04ed\u0001"+
		"\u0000\u0000\u0000\u24e8\u24ef\u0005\u00c7\u0000\u0000\u24e9\u24ea\u0005"+
		"\u01b2\u0000\u0000\u24ea\u24f0\u0005\u0197\u0000\u0000\u24eb\u24f0\u0005"+
		"B\u0000\u0000\u24ec\u24f0\u0005\u01d3\u0000\u0000\u24ed\u24ee\u0005\u0106"+
		"\u0000\u0000\u24ee\u24f0\u0005\u01e2\u0000\u0000\u24ef\u24e9\u0001\u0000"+
		"\u0000\u0000\u24ef\u24eb\u0001\u0000\u0000\u0000\u24ef\u24ec\u0001\u0000"+
		"\u0000\u0000\u24ef\u24ed\u0001\u0000\u0000\u0000\u24f0\u24f3\u0001\u0000"+
		"\u0000\u0000\u24f1\u24f3\u0001\u0000\u0000\u0000\u24f2\u24e8\u0001\u0000"+
		"\u0000\u0000\u24f2\u24f1\u0001\u0000\u0000\u0000\u24f3\u04ef\u0001\u0000"+
		"\u0000\u0000\u24f4\u24f5\u0005\u0197\u0000\u0000\u24f5\u24f7\u0005\u0002"+
		"\u0000\u0000\u24f6\u24f8\u0003\u0502\u0281\u0000\u24f7\u24f6\u0001\u0000"+
		"\u0000\u0000\u24f7\u24f8\u0001\u0000\u0000\u0000\u24f8\u24f9\u0001\u0000"+
		"\u0000\u0000\u24f9\u2501\u0005\u0003\u0000\u0000\u24fa\u24fb\u0005\u0002"+
		"\u0000\u0000\u24fb\u24fc\u0003\u0502\u0281\u0000\u24fc\u24fd\u0005\u0006"+
		"\u0000\u0000\u24fd\u24fe\u0003\u048c\u0246\u0000\u24fe\u24ff\u0005\u0003"+
		"\u0000\u0000\u24ff\u2501\u0001\u0000\u0000\u0000\u2500\u24f4\u0001\u0000"+
		"\u0000\u0000\u2500\u24fa\u0001\u0000\u0000\u0000\u2501\u04f1\u0001\u0000"+
		"\u0000\u0000\u2502\u2503\u0005\u0197\u0000\u0000\u2503\u2505\u0005\u0002"+
		"\u0000\u0000\u2504\u2506\u0003\u0502\u0281\u0000\u2505\u2504\u0001\u0000"+
		"\u0000\u0000\u2505\u2506\u0001\u0000\u0000\u0000\u2506\u2507\u0001\u0000"+
		"\u0000\u0000\u2507\u2508\u0005\u0003\u0000\u0000\u2508\u04f3\u0001\u0000"+
		"\u0000\u0000\u2509\u250a\u0005\u0002\u0000\u0000\u250a\u250b\u0003\u0502"+
		"\u0281\u0000\u250b\u250c\u0005\u0006\u0000\u0000\u250c\u250d\u0003\u048c"+
		"\u0246\u0000\u250d\u250e\u0005\u0003\u0000\u0000\u250e\u04f5\u0001\u0000"+
		"\u0000\u0000\u250f\u2510\u00075\u0000\u0000\u2510\u04f7\u0001\u0000\u0000"+
		"\u0000\u2511\u2514\u0005\u001d\u0000\u0000\u2512\u2514\u0003\u04fa\u027d"+
		"\u0000\u2513\u2511\u0001\u0000\u0000\u0000\u2513\u2512\u0001\u0000\u0000"+
		"\u0000\u2514\u04f9\u0001\u0000\u0000\u0000\u2515\u2516\u00076\u0000\u0000"+
		"\u2516\u04fb\u0001\u0000\u0000\u0000\u2517\u251e\u0005\u001d\u0000\u0000"+
		"\u2518\u2519\u0005\u010f\u0000\u0000\u2519\u251a\u0005\u0002\u0000\u0000"+
		"\u251a\u251b\u0003\u02ac\u0156\u0000\u251b\u251c\u0005\u0003\u0000\u0000"+
		"\u251c\u251e\u0001\u0000\u0000\u0000\u251d\u2517\u0001\u0000\u0000\u0000"+
		"\u251d\u2518\u0001\u0000\u0000\u0000\u251e\u04fd\u0001\u0000\u0000\u0000"+
		"\u251f\u2526\u0003\u04f8\u027c\u0000\u2520\u2521\u0005\u010f\u0000\u0000"+
		"\u2521\u2522\u0005\u0002\u0000\u0000\u2522\u2523\u0003\u02ac\u0156\u0000"+
		"\u2523\u2524\u0005\u0003\u0000\u0000\u2524\u2526\u0001\u0000\u0000\u0000"+
		"\u2525\u251f\u0001\u0000\u0000\u0000\u2525\u2520\u0001\u0000\u0000\u0000"+
		"\u2526\u04ff\u0001\u0000\u0000\u0000\u2527\u2534\u0003\u04f8\u027c\u0000"+
		"\u2528\u2529\u0005\u010f\u0000\u0000\u2529\u252a\u0005\u0002\u0000\u0000"+
		"\u252a\u252b\u0003\u02ac\u0156\u0000\u252b\u252c\u0005\u0003\u0000\u0000"+
		"\u252c\u2534\u0001\u0000\u0000\u0000\u252d\u2534\u0005x\u0000\u0000\u252e"+
		"\u252f\u0005M\u0000\u0000\u252f\u2534\u0005x\u0000\u0000\u2530\u2534\u0005"+
		"r\u0000\u0000\u2531\u2532\u0005M\u0000\u0000\u2532\u2534\u0005r\u0000"+
		"\u0000\u2533\u2527\u0001\u0000\u0000\u0000\u2533\u2528\u0001\u0000\u0000"+
		"\u0000\u2533\u252d\u0001\u0000\u0000\u0000\u2533\u252e\u0001\u0000\u0000"+
		"\u0000\u2533\u2530\u0001\u0000\u0000\u0000\u2533\u2531\u0001\u0000\u0000"+
		"\u0000\u2534\u0501\u0001\u0000\u0000\u0000\u2535\u253a\u0003\u048c\u0246"+
		"\u0000\u2536\u2537\u0005\u0006\u0000\u0000\u2537\u2539\u0003\u048c\u0246"+
		"\u0000\u2538\u2536\u0001\u0000\u0000\u0000\u2539\u253c\u0001\u0000\u0000"+
		"\u0000\u253a\u2538\u0001\u0000\u0000\u0000\u253a\u253b\u0001\u0000\u0000"+
		"\u0000\u253b\u0503\u0001\u0000\u0000\u0000\u253c\u253a\u0001\u0000\u0000"+
		"\u0000\u253d\u2542\u0003\u0506\u0283\u0000\u253e\u253f\u0005\u0006\u0000"+
		"\u0000\u253f\u2541\u0003\u0506\u0283\u0000\u2540\u253e\u0001\u0000\u0000"+
		"\u0000\u2541\u2544\u0001\u0000\u0000\u0000\u2542\u2540\u0001\u0000\u0000"+
		"\u0000\u2542\u2543\u0001\u0000\u0000\u0000\u2543\u0505\u0001\u0000\u0000"+
		"\u0000\u2544\u2542\u0001\u0000\u0000\u0000\u2545\u254b\u0003\u048c\u0246"+
		"\u0000\u2546\u2547\u0003\u027c\u013e\u0000\u2547\u2548\u00077\u0000\u0000"+
		"\u2548\u2549\u0003\u048c\u0246\u0000\u2549\u254b\u0001\u0000\u0000\u0000"+
		"\u254a\u2545\u0001\u0000\u0000\u0000\u254a\u2546\u0001\u0000\u0000\u0000"+
		"\u254b\u0507\u0001\u0000\u0000\u0000\u254c\u2551\u0003\u0460\u0230\u0000"+
		"\u254d\u254e\u0005\u0006\u0000\u0000\u254e\u2550\u0003\u0460\u0230\u0000"+
		"\u254f\u254d\u0001\u0000\u0000\u0000\u2550\u2553\u0001\u0000\u0000\u0000"+
		"\u2551\u254f\u0001\u0000\u0000\u0000\u2551\u2552\u0001\u0000\u0000\u0000"+
		"\u2552\u0509\u0001\u0000\u0000\u0000\u2553\u2551\u0001\u0000\u0000\u0000"+
		"\u2554\u2557\u0005\u0004\u0000\u0000\u2555\u2558\u0003\u0502\u0281\u0000"+
		"\u2556\u2558\u0003\u050c\u0286\u0000\u2557\u2555\u0001\u0000\u0000\u0000"+
		"\u2557\u2556\u0001\u0000\u0000\u0000\u2557\u2558\u0001\u0000\u0000\u0000"+
		"\u2558\u2559\u0001\u0000\u0000\u0000\u2559\u255a\u0005\u0005\u0000\u0000"+
		"\u255a\u050b\u0001\u0000\u0000\u0000\u255b\u2560\u0003\u050a\u0285\u0000"+
		"\u255c\u255d\u0005\u0006\u0000\u0000\u255d\u255f\u0003\u050a\u0285\u0000"+
		"\u255e\u255c\u0001\u0000\u0000\u0000\u255f\u2562\u0001\u0000\u0000\u0000"+
		"\u2560\u255e\u0001\u0000\u0000\u0000\u2560\u2561\u0001\u0000\u0000\u0000"+
		"\u2561\u050d\u0001\u0000\u0000\u0000\u2562\u2560\u0001\u0000\u0000\u0000"+
		"\u2563\u2564\u0003\u0510\u0288\u0000\u2564\u2565\u0005@\u0000\u0000\u2565"+
		"\u2566\u0003\u048c\u0246\u0000\u2566\u2569\u0001\u0000\u0000\u0000\u2567"+
		"\u2569\u0001\u0000\u0000\u0000\u2568\u2563\u0001\u0000\u0000\u0000\u2568"+
		"\u2567\u0001\u0000\u0000\u0000\u2569\u050f\u0001\u0000\u0000\u0000\u256a"+
		"\u2573\u0003\u0568\u02b4\u0000\u256b\u2573\u0005\u0179\u0000\u0000\u256c"+
		"\u2573\u0005\u0101\u0000\u0000\u256d\u2573\u0005\u00b0\u0000\u0000\u256e"+
		"\u2573\u0005\u00da\u0000\u0000\u256f\u2573\u0005\u00fe\u0000\u0000\u2570"+
		"\u2573\u0005\u013f\u0000\u0000\u2571\u2573\u0003\u0550\u02a8\u0000\u2572"+
		"\u256a\u0001\u0000\u0000\u0000\u2572\u256b\u0001\u0000\u0000\u0000\u2572"+
		"\u256c\u0001\u0000\u0000\u0000\u2572\u256d\u0001\u0000\u0000\u0000\u2572"+
		"\u256e\u0001\u0000\u0000\u0000\u2572\u256f\u0001\u0000\u0000\u0000\u2572"+
		"\u2570\u0001\u0000\u0000\u0000\u2572\u2571\u0001\u0000\u0000\u0000\u2573"+
		"\u0511\u0001\u0000\u0000\u0000\u2574\u2575\u00078\u0000\u0000\u2575\u0513"+
		"\u0001\u0000\u0000\u0000\u2576\u2577\u0003\u048c\u0246\u0000\u2577\u2578"+
		"\u0005T\u0000\u0000\u2578\u2579\u0003\u048c\u0246\u0000\u2579\u257a\u0005"+
		"@\u0000\u0000\u257a\u257d\u0003\u048c\u0246\u0000\u257b\u257c\u0005>\u0000"+
		"\u0000\u257c\u257e\u0003\u048c\u0246\u0000\u257d\u257b\u0001\u0000\u0000"+
		"\u0000\u257d\u257e\u0001\u0000\u0000\u0000\u257e\u0515\u0001\u0000\u0000"+
		"\u0000\u257f\u2580\u0003\u04b6\u025b\u0000\u2580\u2581\u0005D\u0000\u0000"+
		"\u2581\u2582\u0003\u04b6\u025b\u0000\u2582\u2585\u0001\u0000\u0000\u0000"+
		"\u2583\u2585\u0001\u0000\u0000\u0000\u2584\u257f\u0001\u0000\u0000\u0000"+
		"\u2584\u2583\u0001\u0000\u0000\u0000\u2585\u0517\u0001\u0000\u0000\u0000"+
		"\u2586\u2587\u0003\u048c\u0246\u0000\u2587\u2588\u0005@\u0000\u0000\u2588"+
		"\u2589\u0003\u048c\u0246\u0000\u2589\u258a\u0005>\u0000\u0000\u258a\u258b"+
		"\u0003\u048c\u0246\u0000\u258b\u25a3\u0001\u0000\u0000\u0000\u258c\u258d"+
		"\u0003\u048c\u0246\u0000\u258d\u258e\u0005>\u0000\u0000\u258e\u258f\u0003"+
		"\u048c\u0246\u0000\u258f\u2590\u0005@\u0000\u0000\u2590\u2591\u0003\u048c"+
		"\u0246\u0000\u2591\u25a3\u0001\u0000\u0000\u0000\u2592\u2593\u0003\u048c"+
		"\u0246\u0000\u2593\u2594\u0005@\u0000\u0000\u2594\u2595\u0003\u048c\u0246"+
		"\u0000\u2595\u25a3\u0001\u0000\u0000\u0000\u2596\u2597\u0003\u048c\u0246"+
		"\u0000\u2597\u2598\u0005>\u0000\u0000\u2598\u2599\u0003\u048c\u0246\u0000"+
		"\u2599\u25a3\u0001\u0000\u0000\u0000\u259a\u259b\u0003\u048c\u0246\u0000"+
		"\u259b\u259c\u0005\u007f\u0000\u0000\u259c\u259d\u0003\u048c\u0246\u0000"+
		"\u259d\u259e\u0005\u00c5\u0000\u0000\u259e\u259f\u0003\u048c\u0246\u0000"+
		"\u259f\u25a3\u0001\u0000\u0000\u0000\u25a0\u25a3\u0003\u0502\u0281\u0000"+
		"\u25a1\u25a3\u0001\u0000\u0000\u0000\u25a2\u2586\u0001\u0000\u0000\u0000"+
		"\u25a2\u258c\u0001\u0000\u0000\u0000\u25a2\u2592\u0001\u0000\u0000\u0000"+
		"\u25a2\u2596\u0001\u0000\u0000\u0000\u25a2\u259a\u0001\u0000\u0000\u0000"+
		"\u25a2\u25a0\u0001\u0000\u0000\u0000\u25a2\u25a1\u0001\u0000\u0000\u0000"+
		"\u25a3\u0519\u0001\u0000\u0000\u0000\u25a4\u25a5\u0003\u048c\u0246\u0000"+
		"\u25a5\u25a6\u0005@\u0000\u0000\u25a6\u25a7\u0003\u0502\u0281\u0000\u25a7"+
		"\u25ac\u0001\u0000\u0000\u0000\u25a8\u25a9\u0005@\u0000\u0000\u25a9\u25ac"+
		"\u0003\u0502\u0281\u0000\u25aa\u25ac\u0003\u0502\u0281\u0000\u25ab\u25a4"+
		"\u0001\u0000\u0000\u0000\u25ab\u25a8\u0001\u0000\u0000\u0000\u25ab\u25aa"+
		"\u0001\u0000\u0000\u0000\u25ac\u051b\u0001\u0000\u0000\u0000\u25ad\u25b3"+
		"\u0003\u03c2\u01e1\u0000\u25ae\u25af\u0005\u0002\u0000\u0000\u25af\u25b0"+
		"\u0003\u0502\u0281\u0000\u25b0\u25b1\u0005\u0003\u0000\u0000\u25b1\u25b3"+
		"\u0001\u0000\u0000\u0000\u25b2\u25ad\u0001\u0000\u0000\u0000\u25b2\u25ae"+
		"\u0001\u0000\u0000\u0000\u25b3\u051d\u0001\u0000\u0000\u0000\u25b4\u25b5"+
		"\u0005(\u0000\u0000\u25b5\u25b6\u0003\u0526\u0293\u0000\u25b6\u25b7\u0003"+
		"\u0520\u0290\u0000\u25b7\u25b8\u0003\u0524\u0292\u0000\u25b8\u25b9\u0005"+
		"\u01c6\u0000\u0000\u25b9\u051f\u0001\u0000\u0000\u0000\u25ba\u25bc\u0003"+
		"\u0522\u0291\u0000\u25bb\u25ba\u0001\u0000\u0000\u0000\u25bc\u25bd\u0001"+
		"\u0000\u0000\u0000\u25bd\u25bb\u0001\u0000\u0000\u0000\u25bd\u25be\u0001"+
		"\u0000\u0000\u0000\u25be\u0521\u0001\u0000\u0000\u0000\u25bf\u25c0\u0005"+
		"f\u0000\u0000\u25c0\u25c1\u0003\u048c\u0246\u0000\u25c1\u25c2\u0005]\u0000"+
		"\u0000\u25c2\u25c3\u0003\u048c\u0246\u0000\u25c3\u0523\u0001\u0000\u0000"+
		"\u0000\u25c4\u25c5\u0005:\u0000\u0000\u25c5\u25c8\u0003\u048c\u0246\u0000"+
		"\u25c6\u25c8\u0001\u0000\u0000\u0000\u25c7\u25c4\u0001\u0000\u0000\u0000"+
		"\u25c7\u25c6\u0001\u0000\u0000\u0000\u25c8\u0525\u0001\u0000\u0000\u0000"+
		"\u25c9\u25cc\u0003\u048c\u0246\u0000\u25ca\u25cc\u0001\u0000\u0000\u0000"+
		"\u25cb\u25c9\u0001\u0000\u0000\u0000\u25cb\u25ca\u0001\u0000\u0000\u0000"+
		"\u25cc\u0527\u0001\u0000\u0000\u0000\u25cd\u25cf\u0003\u055e\u02af\u0000"+
		"\u25ce\u25d0\u0003\u052e\u0297\u0000\u25cf\u25ce\u0001\u0000\u0000\u0000"+
		"\u25cf\u25d0\u0001\u0000\u0000\u0000\u25d0\u0529\u0001\u0000\u0000\u0000"+
		"\u25d1\u25d4\u0005\u000b\u0000\u0000\u25d2\u25d5\u0003\u0540\u02a0\u0000"+
		"\u25d3\u25d5\u0005\t\u0000\u0000\u25d4\u25d2\u0001\u0000\u0000\u0000\u25d4"+
		"\u25d3\u0001\u0000\u0000\u0000\u25d5\u25e1\u0001\u0000\u0000\u0000\u25d6"+
		"\u25dc\u0005\u0004\u0000\u0000\u25d7\u25dd\u0003\u048c\u0246\u0000\u25d8"+
		"\u25d9\u0003\u052c\u0296\u0000\u25d9\u25da\u0005\b\u0000\u0000\u25da\u25db"+
		"\u0003\u052c\u0296\u0000\u25db\u25dd\u0001\u0000\u0000\u0000\u25dc\u25d7"+
		"\u0001\u0000\u0000\u0000\u25dc\u25d8\u0001\u0000\u0000\u0000\u25dd\u25de"+
		"\u0001\u0000\u0000\u0000\u25de\u25df\u0005\u0005\u0000\u0000\u25df\u25e1"+
		"\u0001\u0000\u0000\u0000\u25e0\u25d1\u0001\u0000\u0000\u0000\u25e0\u25d6"+
		"\u0001\u0000\u0000\u0000\u25e1\u052b\u0001\u0000\u0000\u0000\u25e2\u25e5"+
		"\u0003\u048c\u0246\u0000\u25e3\u25e5\u0001\u0000\u0000\u0000\u25e4\u25e2"+
		"\u0001\u0000\u0000\u0000\u25e4\u25e3\u0001\u0000\u0000\u0000\u25e5\u052d"+
		"\u0001\u0000\u0000\u0000\u25e6\u25e8\u0003\u052a\u0295\u0000\u25e7\u25e6"+
		"\u0001\u0000\u0000\u0000\u25e8\u25e9\u0001\u0000\u0000\u0000\u25e9\u25e7"+
		"\u0001\u0000\u0000\u0000\u25e9\u25ea\u0001\u0000\u0000\u0000\u25ea\u052f"+
		"\u0001\u0000\u0000\u0000\u25eb\u25ed\u0003\u052a\u0295\u0000\u25ec\u25eb"+
		"\u0001\u0000\u0000\u0000\u25ed\u25f0\u0001\u0000\u0000\u0000\u25ee\u25ec"+
		"\u0001\u0000\u0000\u0000\u25ee\u25ef\u0001\u0000\u0000\u0000\u25ef\u0531"+
		"\u0001\u0000\u0000\u0000\u25f0\u25ee\u0001\u0000\u0000\u0000\u25f1\u25f4"+
		"\u0003\u0534\u029a\u0000\u25f2\u25f4\u0001\u0000\u0000\u0000\u25f3\u25f1"+
		"\u0001\u0000\u0000\u0000\u25f3\u25f2\u0001\u0000\u0000\u0000\u25f4\u0533"+
		"\u0001\u0000\u0000\u0000\u25f5\u25fa\u0003\u0536\u029b\u0000\u25f6\u25f7"+
		"\u0005\u0006\u0000\u0000\u25f7\u25f9\u0003\u0536\u029b\u0000\u25f8\u25f6"+
		"\u0001\u0000\u0000\u0000\u25f9\u25fc\u0001\u0000\u0000\u0000\u25fa\u25f8"+
		"\u0001\u0000\u0000\u0000\u25fa\u25fb\u0001\u0000\u0000\u0000\u25fb\u0535"+
		"\u0001\u0000\u0000\u0000\u25fc\u25fa\u0001\u0000\u0000\u0000\u25fd\u2602"+
		"\u0003\u048c\u0246\u0000\u25fe\u25ff\u0005$\u0000\u0000\u25ff\u2603\u0003"+
		"\u0566\u02b3\u0000\u2600\u2603\u0003\u0568\u02b4\u0000\u2601\u2603\u0001"+
		"\u0000\u0000\u0000\u2602\u25fe\u0001\u0000\u0000\u0000\u2602\u2600\u0001"+
		"\u0000\u0000\u0000\u2602\u2601\u0001\u0000\u0000\u0000\u2603\u2606\u0001"+
		"\u0000\u0000\u0000\u2604\u2606\u0005\t\u0000\u0000\u2605\u25fd\u0001\u0000"+
		"\u0000\u0000\u2605\u2604\u0001\u0000\u0000\u0000\u2606\u0537\u0001\u0000"+
		"\u0000\u0000\u2607\u260c\u0003\u053a\u029d\u0000\u2608\u2609\u0005\u0006"+
		"\u0000\u0000\u2609\u260b\u0003\u053a\u029d\u0000\u260a\u2608\u0001\u0000"+
		"\u0000\u0000\u260b\u260e\u0001\u0000\u0000\u0000\u260c\u260a\u0001\u0000"+
		"\u0000\u0000\u260c\u260d\u0001\u0000\u0000\u0000\u260d\u0539\u0001\u0000"+
		"\u0000\u0000\u260e\u260c\u0001\u0000\u0000\u0000\u260f\u2611\u0003\u055e"+
		"\u02af\u0000\u2610\u2612\u0003\u052e\u0297\u0000\u2611\u2610\u0001\u0000"+
		"\u0000\u0000\u2611\u2612\u0001\u0000\u0000\u0000\u2612\u053b\u0001\u0000"+
		"\u0000\u0000\u2613\u2618\u0003\u053e\u029f\u0000\u2614\u2615\u0005\u0006"+
		"\u0000\u0000\u2615\u2617\u0003\u053e\u029f\u0000\u2616\u2614\u0001\u0000"+
		"\u0000\u0000\u2617\u261a\u0001\u0000\u0000\u0000\u2618\u2616\u0001\u0000"+
		"\u0000\u0000\u2618\u2619\u0001\u0000\u0000\u0000\u2619\u053d\u0001\u0000"+
		"\u0000\u0000\u261a\u2618\u0001\u0000\u0000\u0000\u261b\u261c\u0003\u055e"+
		"\u02af\u0000\u261c\u053f\u0001\u0000\u0000\u0000\u261d\u261e\u0003\u0566"+
		"\u02b3\u0000\u261e\u0541\u0001\u0000\u0000\u0000\u261f\u2620\u0003\u0550"+
		"\u02a8\u0000\u2620\u0543\u0001\u0000\u0000\u0000\u2621\u2629\u0003\u0574"+
		"\u02ba\u0000\u2622\u2629\u0003\u0562\u02b1\u0000\u2623\u2624\u0003\u055e"+
		"\u02af\u0000\u2624\u2625\u0003\u052e\u0297\u0000\u2625\u2629\u0001\u0000"+
		"\u0000\u0000\u2626\u2629\u0005w\u0000\u0000\u2627\u2629\u0005~\u0000\u0000"+
		"\u2628\u2621\u0001\u0000\u0000\u0000\u2628\u2622\u0001\u0000\u0000\u0000"+
		"\u2628\u2623\u0001\u0000\u0000\u0000\u2628\u2626\u0001\u0000\u0000\u0000"+
		"\u2628\u2627\u0001\u0000\u0000\u0000\u2629\u0545\u0001\u0000\u0000\u0000"+
		"\u262a\u264b\u0003\u054e\u02a7\u0000\u262b\u264b\u0003\u054c\u02a6\u0000"+
		"\u262c\u264b\u0003\u0550\u02a8\u0000\u262d\u264b\u0003\u054a\u02a5\u0000"+
		"\u262e\u264b\u0003\u0548\u02a4\u0000\u262f\u2637\u0003\u0544\u02a2\u0000"+
		"\u2630\u2638\u0003\u0550\u02a8\u0000\u2631\u2632\u0005\u0002\u0000\u0000"+
		"\u2632\u2633\u0003\u0504\u0282\u0000\u2633\u2634\u0003\u03e6\u01f3\u0000"+
		"\u2634\u2635\u0005\u0003\u0000\u0000\u2635\u2636\u0003\u0550\u02a8\u0000"+
		"\u2636\u2638\u0001\u0000\u0000\u0000\u2637\u2630\u0001\u0000\u0000\u0000"+
		"\u2637\u2631\u0001\u0000\u0000\u0000\u2638\u264b\u0001\u0000\u0000\u0000"+
		"\u2639\u263a\u0003\u0466\u0233\u0000\u263a\u263b\u0003\u0550\u02a8\u0000"+
		"\u263b\u264b\u0001\u0000\u0000\u0000\u263c\u2645\u0003\u0482\u0241\u0000"+
		"\u263d\u263e\u0003\u0550\u02a8\u0000\u263e\u263f\u0003\u0486\u0243\u0000"+
		"\u263f\u2646\u0001\u0000\u0000\u0000\u2640\u2641\u0005\u0002\u0000\u0000"+
		"\u2641\u2642\u0003\u054e\u02a7\u0000\u2642\u2643\u0005\u0003\u0000\u0000"+
		"\u2643\u2644\u0003\u0550\u02a8\u0000\u2644\u2646\u0001\u0000\u0000\u0000"+
		"\u2645\u263d\u0001\u0000\u0000\u0000\u2645\u2640\u0001\u0000\u0000\u0000"+
		"\u2646\u264b\u0001\u0000\u0000\u0000\u2647\u264b\u0005`\u0000\u0000\u2648"+
		"\u264b\u0005<\u0000\u0000\u2649\u264b\u0005N\u0000\u0000\u264a\u262a\u0001"+
		"\u0000\u0000\u0000\u264a\u262b\u0001\u0000\u0000\u0000\u264a\u262c\u0001"+
		"\u0000\u0000\u0000\u264a\u262d\u0001\u0000\u0000\u0000\u264a\u262e\u0001"+
		"\u0000\u0000\u0000\u264a\u262f\u0001\u0000\u0000\u0000\u264a\u2639\u0001"+
		"\u0000\u0000\u0000\u264a\u263c\u0001\u0000\u0000\u0000\u264a\u2647\u0001"+
		"\u0000\u0000\u0000\u264a\u2648\u0001\u0000\u0000\u0000\u264a\u2649\u0001"+
		"\u0000\u0000\u0000\u264b\u0547\u0001\u0000\u0000\u0000\u264c\u264d\u0005"+
		"\u028e\u0000\u0000\u264d\u0549\u0001\u0000\u0000\u0000\u264e\u264f\u0005"+
		"\u028a\u0000\u0000\u264f\u054b\u0001\u0000\u0000\u0000\u2650\u2651\u0005"+
		"\u0294\u0000\u0000\u2651\u054d\u0001\u0000\u0000\u0000\u2652\u2653\u0005"+
		"\u0292\u0000\u0000\u2653\u054f\u0001\u0000\u0000\u0000\u2654\u2655\u0003"+
		"\u0552\u02a9\u0000\u2655\u2656\u0003\u0554\u02aa\u0000\u2656\u0551\u0001"+
		"\u0000\u0000\u0000\u2657\u2663\u0005\u0285\u0000\u0000\u2658\u2663\u0005"+
		"\u0287\u0000\u0000\u2659\u265d\u0005\u0289\u0000\u0000\u265a\u265c\u0005"+
		"\u02a5\u0000\u0000\u265b\u265a\u0001\u0000\u0000\u0000\u265c\u265f\u0001"+
		"\u0000\u0000\u0000\u265d\u265b\u0001\u0000\u0000\u0000\u265d\u265e\u0001"+
		"\u0000\u0000\u0000\u265e\u2660\u0001\u0000\u0000\u0000\u265f\u265d\u0001"+
		"\u0000\u0000\u0000\u2660\u2663\u0005\u02a6\u0000\u0000\u2661\u2663\u0005"+
		"\u029f\u0000\u0000\u2662\u2657\u0001\u0000\u0000\u0000\u2662\u2658\u0001"+
		"\u0000\u0000\u0000\u2662\u2659\u0001\u0000\u0000\u0000\u2662\u2661\u0001"+
		"\u0000\u0000\u0000\u2663\u0553\u0001\u0000\u0000\u0000\u2664\u2665\u0005"+
		"\u01e7\u0000\u0000\u2665\u2668\u0003\u0552\u02a9\u0000\u2666\u2668\u0001"+
		"\u0000\u0000\u0000\u2667\u2664\u0001\u0000\u0000\u0000\u2667\u2666\u0001"+
		"\u0000\u0000\u0000\u2668\u0555\u0001\u0000\u0000\u0000\u2669\u266f\u0003"+
		"\u054e\u02a7\u0000\u266a\u266b\u0005\f\u0000\u0000\u266b\u266f\u0003\u054e"+
		"\u02a7\u0000\u266c\u266d\u0005\r\u0000\u0000\u266d\u266f\u0003\u054e\u02a7"+
		"\u0000\u266e\u2669\u0001\u0000\u0000\u0000\u266e\u266a\u0001\u0000\u0000"+
		"\u0000\u266e\u266c\u0001\u0000\u0000\u0000\u266f\u0557\u0001\u0000\u0000"+
		"\u0000\u2670\u2671\u0003\u055a\u02ad\u0000\u2671\u0559\u0001\u0000\u0000"+
		"\u0000\u2672\u2676\u0003\u0564\u02b2\u0000\u2673\u2676\u00054\u0000\u0000"+
		"\u2674\u2676\u0005Y\u0000\u0000\u2675\u2672\u0001\u0000\u0000\u0000\u2675"+
		"\u2673\u0001\u0000\u0000\u0000\u2675\u2674\u0001\u0000\u0000\u0000\u2676"+
		"\u055b\u0001\u0000\u0000\u0000\u2677\u267c\u0003\u055a\u02ad\u0000\u2678"+
		"\u2679\u0005\u0006\u0000\u0000\u2679\u267b\u0003\u055a\u02ad\u0000\u267a"+
		"\u2678\u0001\u0000\u0000\u0000\u267b\u267e\u0001\u0000\u0000\u0000\u267c"+
		"\u267a\u0001\u0000\u0000\u0000\u267c\u267d\u0001\u0000\u0000\u0000\u267d"+
		"\u055d\u0001\u0000\u0000\u0000\u267e\u267c\u0001\u0000\u0000\u0000\u267f"+
		"\u2686\u0003\u0568\u02b4\u0000\u2680\u2686\u0003\u056c\u02b6\u0000\u2681"+
		"\u2686\u0003\u056e\u02b7\u0000\u2682\u2686\u0003\u064a\u0325\u0000\u2683"+
		"\u2686\u0005w\u0000\u0000\u2684\u2686\u0005~\u0000\u0000\u2685\u267f\u0001"+
		"\u0000\u0000\u0000\u2685\u2680\u0001\u0000\u0000\u0000\u2685\u2681\u0001"+
		"\u0000\u0000\u0000\u2685\u2682\u0001\u0000\u0000\u0000\u2685\u2683\u0001"+
		"\u0000\u0000\u0000\u2685\u2684\u0001\u0000\u0000\u0000\u2686\u055f\u0001"+
		"\u0000\u0000\u0000\u2687\u268c\u0003\u0568\u02b4\u0000\u2688\u268c\u0003"+
		"\u056c\u02b6\u0000\u2689\u268c\u0003\u056e\u02b7\u0000\u268a\u268c\u0003"+
		"\u064a\u0325\u0000\u268b\u2687\u0001\u0000\u0000\u0000\u268b\u2688\u0001"+
		"\u0000\u0000\u0000\u268b\u2689\u0001\u0000\u0000\u0000\u268b\u268a\u0001"+
		"\u0000\u0000\u0000\u268c\u0561\u0001\u0000\u0000\u0000\u268d\u2692\u0003"+
		"\u0568\u02b4\u0000\u268e\u2692\u0003\u056c\u02b6\u0000\u268f\u2692\u0003"+
		"\u064a\u0325\u0000\u2690\u2692\u0003\u0570\u02b8\u0000\u2691\u268d\u0001"+
		"\u0000\u0000\u0000\u2691\u268e\u0001\u0000\u0000\u0000\u2691\u268f\u0001"+
		"\u0000\u0000\u0000\u2691\u2690\u0001\u0000\u0000\u0000\u2692\u0563\u0001"+
		"\u0000\u0000\u0000\u2693\u2698\u0003\u0568\u02b4\u0000\u2694\u2698\u0003"+
		"\u056c\u02b6\u0000\u2695\u2698\u0003\u056e\u02b7\u0000\u2696\u2698\u0003"+
		"\u0570\u02b8\u0000\u2697\u2693\u0001\u0000\u0000\u0000\u2697\u2694\u0001"+
		"\u0000\u0000\u0000\u2697\u2695\u0001\u0000\u0000\u0000\u2697\u2696\u0001"+
		"\u0000\u0000\u0000\u2698\u0565\u0001\u0000\u0000\u0000\u2699\u26a0\u0003"+
		"\u0568\u02b4\u0000\u269a\u26a0\u0003\u064a\u0325\u0000\u269b\u26a0\u0003"+
		"\u056c\u02b6\u0000\u269c\u26a0\u0003\u056e\u02b7\u0000\u269d\u26a0\u0003"+
		"\u0570\u02b8\u0000\u269e\u26a0\u0003\u0572\u02b9\u0000\u269f\u2699\u0001"+
		"\u0000\u0000\u0000\u269f\u269a\u0001\u0000\u0000\u0000\u269f\u269b\u0001"+
		"\u0000\u0000\u0000\u269f\u269c\u0001\u0000\u0000\u0000\u269f\u269d\u0001"+
		"\u0000\u0000\u0000\u269f\u269e\u0001\u0000\u0000\u0000\u26a0\u0567\u0001"+
		"\u0000\u0000\u0000\u26a1\u26a2\u0005\u027c\u0000\u0000\u26a2\u26a9\u0003"+
		"\u0554\u02aa\u0000\u26a3\u26a9\u0005\u027d\u0000\u0000\u26a4\u26a9\u0005"+
		"\u0281\u0000\u0000\u26a5\u26a9\u0003\u04ba\u025d\u0000\u26a6\u26a9\u0003"+
		"\u056a\u02b5\u0000\u26a7\u26a9\u0003\u064a\u0325\u0000\u26a8\u26a1\u0001"+
		"\u0000\u0000\u0000\u26a8\u26a3\u0001\u0000\u0000\u0000\u26a8\u26a4\u0001"+
		"\u0000\u0000\u0000\u26a8\u26a5\u0001\u0000\u0000\u0000\u26a8\u26a6\u0001"+
		"\u0000\u0000\u0000\u26a8\u26a7\u0001\u0000\u0000\u0000\u26a9\u0569\u0001"+
		"\u0000\u0000\u0000\u26aa\u26ab\u0005\u0296\u0000\u0000\u26ab\u056b\u0001"+
		"\u0000\u0000\u0000\u26ac\u26ad\u00079\u0000\u0000\u26ad\u056d\u0001\u0000"+
		"\u0000\u0000\u26ae\u26e3\u0005\u017c\u0000\u0000\u26af\u26e3\u0005\u017d"+
		"\u0000\u0000\u26b0\u26e3\u0003\u0470\u0238\u0000\u26b1\u26e3\u0005\u017f"+
		"\u0000\u0000\u26b2\u26e3\u0005\u0180\u0000\u0000\u26b3\u26e3\u0003\u0478"+
		"\u023c\u0000\u26b4\u26e3\u0005\u0182\u0000\u0000\u26b5\u26e3\u0005\u0183"+
		"\u0000\u0000\u26b6\u26e3\u0005\u0184\u0000\u0000\u26b7\u26e3\u0005\u0185"+
		"\u0000\u0000\u26b8\u26e3\u0005\u0186\u0000\u0000\u26b9\u26e3\u0005\u0187"+
		"\u0000\u0000\u26ba\u26e3\u0005\u0188\u0000\u0000\u26bb\u26e3\u0005\u01d6"+
		"\u0000\u0000\u26bc\u26e3\u0005\u0189\u0000\u0000\u26bd\u26e3\u0005\u018a"+
		"\u0000\u0000\u26be\u26e3\u0005\u018b\u0000\u0000\u26bf\u26e3\u0005\u018c"+
		"\u0000\u0000\u26c0\u26e3\u0005\u018d\u0000\u0000\u26c1\u26e3\u0005\u018e"+
		"\u0000\u0000\u26c2\u26e3\u0005\u018f\u0000\u0000\u26c3\u26e3\u0005\u0190"+
		"\u0000\u0000\u26c4\u26e3\u0005\u01e9\u0000\u0000\u26c5\u26e3\u0005\u0191"+
		"\u0000\u0000\u26c6\u26e3\u0003\u046c\u0236\u0000\u26c7\u26e3\u0005\u01c5"+
		"\u0000\u0000\u26c8\u26e3\u0005\u0193\u0000\u0000\u26c9\u26e3\u0005\u0194"+
		"\u0000\u0000\u26ca\u26e3\u0005\u0195\u0000\u0000\u26cb\u26e3\u0005\u0196"+
		"\u0000\u0000\u26cc\u26e3\u0005\u0197\u0000\u0000\u26cd\u26e3\u0005\u0198"+
		"\u0000\u0000\u26ce\u26e3\u0005\u0199\u0000\u0000\u26cf\u26e3\u0005\u019a"+
		"\u0000\u0000\u26d0\u26e3\u0005\u019b\u0000\u0000\u26d1\u26e3\u0005\u019c"+
		"\u0000\u0000\u26d2\u26e3\u0005\u019d\u0000\u0000\u26d3\u26e3\u0005\u019e"+
		"\u0000\u0000\u26d4\u26e3\u0005\u019f";
	private static final String _serializedATNSegment4 =
		"\u0000\u0000\u26d5\u26e3\u0005\u01a0\u0000\u0000\u26d6\u26e3\u0005\u01a1"+
		"\u0000\u0000\u26d7\u26e3\u0005\u01a9\u0000\u0000\u26d8\u26e3\u0005\u01aa"+
		"\u0000\u0000\u26d9\u26e3\u0005\u01ab\u0000\u0000\u26da\u26e3\u0005\u01ac"+
		"\u0000\u0000\u26db\u26e3\u0005\u01dc\u0000\u0000\u26dc\u26e3\u0005\u01ad"+
		"\u0000\u0000\u26dd\u26e3\u0005\u01ae\u0000\u0000\u26de\u26e3\u0005\u01af"+
		"\u0000\u0000\u26df\u26e3\u0005\u01b0\u0000\u0000\u26e0\u26e3\u0005\u01da"+
		"\u0000\u0000\u26e1\u26e3\u0003\u0574\u02ba\u0000\u26e2\u26ae\u0001\u0000"+
		"\u0000\u0000\u26e2\u26af\u0001\u0000\u0000\u0000\u26e2\u26b0\u0001\u0000"+
		"\u0000\u0000\u26e2\u26b1\u0001\u0000\u0000\u0000\u26e2\u26b2\u0001\u0000"+
		"\u0000\u0000\u26e2\u26b3\u0001\u0000\u0000\u0000\u26e2\u26b4\u0001\u0000"+
		"\u0000\u0000\u26e2\u26b5\u0001\u0000\u0000\u0000\u26e2\u26b6\u0001\u0000"+
		"\u0000\u0000\u26e2\u26b7\u0001\u0000\u0000\u0000\u26e2\u26b8\u0001\u0000"+
		"\u0000\u0000\u26e2\u26b9\u0001\u0000\u0000\u0000\u26e2\u26ba\u0001\u0000"+
		"\u0000\u0000\u26e2\u26bb\u0001\u0000\u0000\u0000\u26e2\u26bc\u0001\u0000"+
		"\u0000\u0000\u26e2\u26bd\u0001\u0000\u0000\u0000\u26e2\u26be\u0001\u0000"+
		"\u0000\u0000\u26e2\u26bf\u0001\u0000\u0000\u0000\u26e2\u26c0\u0001\u0000"+
		"\u0000\u0000\u26e2\u26c1\u0001\u0000\u0000\u0000\u26e2\u26c2\u0001\u0000"+
		"\u0000\u0000\u26e2\u26c3\u0001\u0000\u0000\u0000\u26e2\u26c4\u0001\u0000"+
		"\u0000\u0000\u26e2\u26c5\u0001\u0000\u0000\u0000\u26e2\u26c6\u0001\u0000"+
		"\u0000\u0000\u26e2\u26c7\u0001\u0000\u0000\u0000\u26e2\u26c8\u0001\u0000"+
		"\u0000\u0000\u26e2\u26c9\u0001\u0000\u0000\u0000\u26e2\u26ca\u0001\u0000"+
		"\u0000\u0000\u26e2\u26cb\u0001\u0000\u0000\u0000\u26e2\u26cc\u0001\u0000"+
		"\u0000\u0000\u26e2\u26cd\u0001\u0000\u0000\u0000\u26e2\u26ce\u0001\u0000"+
		"\u0000\u0000\u26e2\u26cf\u0001\u0000\u0000\u0000\u26e2\u26d0\u0001\u0000"+
		"\u0000\u0000\u26e2\u26d1\u0001\u0000\u0000\u0000\u26e2\u26d2\u0001\u0000"+
		"\u0000\u0000\u26e2\u26d3\u0001\u0000\u0000\u0000\u26e2\u26d4\u0001\u0000"+
		"\u0000\u0000\u26e2\u26d5\u0001\u0000\u0000\u0000\u26e2\u26d6\u0001\u0000"+
		"\u0000\u0000\u26e2\u26d7\u0001\u0000\u0000\u0000\u26e2\u26d8\u0001\u0000"+
		"\u0000\u0000\u26e2\u26d9\u0001\u0000\u0000\u0000\u26e2\u26da\u0001\u0000"+
		"\u0000\u0000\u26e2\u26db\u0001\u0000\u0000\u0000\u26e2\u26dc\u0001\u0000"+
		"\u0000\u0000\u26e2\u26dd\u0001\u0000\u0000\u0000\u26e2\u26de\u0001\u0000"+
		"\u0000\u0000\u26e2\u26df\u0001\u0000\u0000\u0000\u26e2\u26e0\u0001\u0000"+
		"\u0000\u0000\u26e2\u26e1\u0001\u0000\u0000\u0000\u26e3\u056f\u0001\u0000"+
		"\u0000\u0000\u26e4\u26e5\u0007:\u0000\u0000\u26e5\u0571\u0001\u0000\u0000"+
		"\u0000\u26e6\u26e7\u0007;\u0000\u0000\u26e7\u0573\u0001\u0000\u0000\u0000"+
		"\u26e8\u26e9\u0007<\u0000\u0000\u26e9\u0575\u0001\u0000\u0000\u0000\u26ea"+
		"\u26eb\u0003\u0578\u02bc\u0000\u26eb\u26ec\u0003\u0582\u02c1\u0000\u26ec"+
		"\u26ed\u0003\u0580\u02c0\u0000\u26ed\u0577\u0001\u0000\u0000\u0000\u26ee"+
		"\u26f0\u0003\u057a\u02bd\u0000\u26ef\u26ee\u0001\u0000\u0000\u0000\u26f0"+
		"\u26f3\u0001\u0000\u0000\u0000\u26f1\u26ef\u0001\u0000\u0000\u0000\u26f1"+
		"\u26f2\u0001\u0000\u0000\u0000\u26f2\u0579\u0001\u0000\u0000\u0000\u26f3"+
		"\u26f1\u0001\u0000\u0000\u0000\u26f4\u26f5\u0003\u057c\u02be\u0000\u26f5"+
		"\u26f6\u0005\u0110\u0000\u0000\u26f6\u26f7\u0005\u01ea\u0000\u0000\u26f7"+
		"\u2709\u0001\u0000\u0000\u0000\u26f8\u26f9\u0003\u057c\u02be\u0000\u26f9"+
		"\u26fa\u0005\u01eb\u0000\u0000\u26fa\u26fb\u0003\u057e\u02bf\u0000\u26fb"+
		"\u2709\u0001\u0000\u0000\u0000\u26fc\u26fd\u0003\u057c\u02be\u0000\u26fd"+
		"\u26fe\u0005\u01ec\u0000\u0000\u26fe\u26ff\u0005\u01ed\u0000\u0000\u26ff"+
		"\u2709\u0001\u0000\u0000\u0000\u2700\u2701\u0003\u057c\u02be\u0000\u2701"+
		"\u2702\u0005\u01ec\u0000\u0000\u2702\u2703\u0005\u01ee\u0000\u0000\u2703"+
		"\u2709\u0001\u0000\u0000\u0000\u2704\u2705\u0003\u057c\u02be\u0000\u2705"+
		"\u2706\u0005\u01ec\u0000\u0000\u2706\u2707\u0005\u01ef\u0000\u0000\u2707"+
		"\u2709\u0001\u0000\u0000\u0000\u2708\u26f4\u0001\u0000\u0000\u0000\u2708"+
		"\u26f8\u0001\u0000\u0000\u0000\u2708\u26fc\u0001\u0000\u0000\u0000\u2708"+
		"\u2700\u0001\u0000\u0000\u0000\u2708\u2704\u0001\u0000\u0000\u0000\u2709"+
		"\u057b\u0001\u0000\u0000\u0000\u270a\u270b\u0005\u001d\u0000\u0000\u270b"+
		"\u057d\u0001\u0000\u0000\u0000\u270c\u2711\u0003\u0550\u02a8\u0000\u270d"+
		"\u2711\u0003\u0572\u02b9\u0000\u270e\u2711\u0003\u064a\u0325\u0000\u270f"+
		"\u2711\u0003\u056c\u02b6\u0000\u2710\u270c\u0001\u0000\u0000\u0000\u2710"+
		"\u270d\u0001\u0000\u0000\u0000\u2710\u270e\u0001\u0000\u0000\u0000\u2710"+
		"\u270f\u0001\u0000\u0000\u0000\u2711\u057f\u0001\u0000\u0000\u0000\u2712"+
		"\u2715\u0001\u0000\u0000\u0000\u2713\u2715\u0005\u0007\u0000\u0000\u2714"+
		"\u2712\u0001\u0000\u0000\u0000\u2714\u2713\u0001\u0000\u0000\u0000\u2715"+
		"\u0581\u0001\u0000\u0000\u0000\u2716\u2717\u0003\u0584\u02c2\u0000\u2717"+
		"\u2718\u0005\u0092\u0000\u0000\u2718\u2719\u0003\u05ae\u02d7\u0000\u2719"+
		"\u271a\u0003\u0636\u031b\u0000\u271a\u271b\u0005\u01c6\u0000\u0000\u271b"+
		"\u271c\u0003\u0644\u0322\u0000\u271c\u0583\u0001\u0000\u0000\u0000\u271d"+
		"\u2722\u0003\u0640\u0320\u0000\u271e\u2720\u0003\u0586\u02c3\u0000\u271f"+
		"\u2721\u0003\u0588\u02c4\u0000\u2720\u271f\u0001\u0000\u0000\u0000\u2720"+
		"\u2721\u0001\u0000\u0000\u0000\u2721\u2723\u0001\u0000\u0000\u0000\u2722"+
		"\u271e\u0001\u0000\u0000\u0000\u2722\u2723\u0001\u0000\u0000\u0000\u2723"+
		"\u0585\u0001\u0000\u0000\u0000\u2724\u2725\u0005\u00b2\u0000\u0000\u2725"+
		"\u0587\u0001\u0000\u0000\u0000\u2726\u2728\u0003\u058c\u02c6\u0000\u2727"+
		"\u2726\u0001\u0000\u0000\u0000\u2728\u2729\u0001\u0000\u0000\u0000\u2729"+
		"\u2727\u0001\u0000\u0000\u0000\u2729\u272a\u0001\u0000\u0000\u0000\u272a"+
		"\u0589\u0001\u0000\u0000\u0000\u272b\u272c\u0005\u0012\u0000\u0000\u272c"+
		"\u272d\u0003\u0648\u0324\u0000\u272d\u272e\u0005\u0013\u0000\u0000\u272e"+
		"\u058b\u0001\u0000\u0000\u0000\u272f\u2733\u0003\u058e\u02c7\u0000\u2730"+
		"\u2733\u0005\u00b2\u0000\u0000\u2731\u2733\u0003\u058a\u02c5\u0000\u2732"+
		"\u272f\u0001\u0000\u0000\u0000\u2732\u2730\u0001\u0000\u0000\u0000\u2732"+
		"\u2731\u0001\u0000\u0000\u0000\u2733\u058d\u0001\u0000\u0000\u0000\u2734"+
		"\u2744\u0003\u059e\u02cf\u0000\u2735\u2736\u0005\u01f0\u0000\u0000\u2736"+
		"\u2737\u0005>\u0000\u0000\u2737\u2745\u0003\u059c\u02ce\u0000\u2738\u2739"+
		"\u0003\u05a0\u02d0\u0000\u2739\u273a\u0003\u05a2\u02d1\u0000\u273a\u273b"+
		"\u0003\u05a4\u02d2\u0000\u273b\u273c\u0003\u05a6\u02d3\u0000\u273c\u273d"+
		"\u0003\u05a8\u02d4\u0000\u273d\u2745\u0001\u0000\u0000\u0000\u273e\u273f"+
		"\u0003\u0590\u02c8\u0000\u273f\u2740\u0005\u00ac\u0000\u0000\u2740\u2741"+
		"\u0003\u0594\u02ca\u0000\u2741\u2742\u0003\u059a\u02cd\u0000\u2742\u2743"+
		"\u0003\u0592\u02c9\u0000\u2743\u2745\u0001\u0000\u0000\u0000\u2744\u2735"+
		"\u0001\u0000\u0000\u0000\u2744\u2738\u0001\u0000\u0000\u0000\u2744\u273e"+
		"\u0001\u0000\u0000\u0000\u2745\u2746\u0001\u0000\u0000\u0000\u2746\u2747"+
		"\u0005\u0007\u0000\u0000\u2747\u058f\u0001\u0000\u0000\u0000\u2748\u274d"+
		"\u0001\u0000\u0000\u0000\u2749\u274a\u0005\u0106\u0000\u0000\u274a\u274d"+
		"\u0005\u013d\u0000\u0000\u274b\u274d\u0005\u013d\u0000\u0000\u274c\u2748"+
		"\u0001\u0000\u0000\u0000\u274c\u2749\u0001\u0000\u0000\u0000\u274c\u274b"+
		"\u0001\u0000\u0000\u0000\u274d\u0591\u0001\u0000\u0000\u0000\u274e\u274f"+
		"\u0003\u03c0\u01e0\u0000\u274f\u0593\u0001\u0000\u0000\u0000\u2750\u2756"+
		"\u0001\u0000\u0000\u0000\u2751\u2752\u0005\u0002\u0000\u0000\u2752\u2753"+
		"\u0003\u0596\u02cb\u0000\u2753\u2754\u0005\u0003\u0000\u0000\u2754\u2756"+
		"\u0001\u0000\u0000\u0000\u2755\u2750\u0001\u0000\u0000\u0000\u2755\u2751"+
		"\u0001\u0000\u0000\u0000\u2756\u0595\u0001\u0000\u0000\u0000\u2757\u275c"+
		"\u0003\u0598\u02cc\u0000\u2758\u2759\u0005\u0006\u0000\u0000\u2759\u275b"+
		"\u0003\u0598\u02cc\u0000\u275a\u2758\u0001\u0000\u0000\u0000\u275b\u275e"+
		"\u0001\u0000\u0000\u0000\u275c\u275a\u0001\u0000\u0000\u0000\u275c\u275d"+
		"\u0001\u0000\u0000\u0000\u275d\u0597\u0001\u0000\u0000\u0000\u275e\u275c"+
		"\u0001\u0000\u0000\u0000\u275f\u2760\u0003\u059e\u02cf\u0000\u2760\u2761"+
		"\u0003\u05a2\u02d1\u0000\u2761\u0599\u0001\u0000\u0000\u0000\u2762\u2763"+
		"\u0007=\u0000\u0000\u2763\u059b\u0001\u0000\u0000\u0000\u2764\u2767\u0005"+
		"\u001c\u0000\u0000\u2765\u2767\u0003\u055e\u02af\u0000\u2766\u2764\u0001"+
		"\u0000\u0000\u0000\u2766\u2765\u0001\u0000\u0000\u0000\u2767\u059d\u0001"+
		"\u0000\u0000\u0000\u2768\u2769\u0003\u0648\u0324\u0000\u2769\u059f\u0001"+
		"\u0000\u0000\u0000\u276a\u276d\u0001\u0000\u0000\u0000\u276b\u276d\u0005"+
		"\u01f1\u0000\u0000\u276c\u276a\u0001\u0000\u0000\u0000\u276c\u276b\u0001"+
		"\u0000\u0000\u0000\u276d\u05a1\u0001\u0000\u0000\u0000\u276e\u276f\u0003"+
		"\u0460\u0230\u0000\u276f\u05a3\u0001\u0000\u0000\u0000\u2770\u2774\u0001"+
		"\u0000\u0000\u0000\u2771\u2772\u0005+\u0000\u0000\u2772\u2774\u0003\u020c"+
		"\u0106\u0000\u2773\u2770\u0001\u0000\u0000\u0000\u2773\u2771\u0001\u0000"+
		"\u0000\u0000\u2774\u05a5\u0001\u0000\u0000\u0000\u2775\u2779\u0001\u0000"+
		"\u0000\u0000\u2776\u2777\u0005M\u0000\u0000\u2777\u2779\u0005N\u0000\u0000"+
		"\u2778\u2775\u0001\u0000\u0000\u0000\u2778\u2776\u0001\u0000\u0000\u0000"+
		"\u2779\u05a7\u0001\u0000\u0000\u0000\u277a\u277f\u0001\u0000\u0000\u0000"+
		"\u277b\u277c\u0003\u05aa\u02d5\u0000\u277c\u277d\u0003\u064c\u0326\u0000"+
		"\u277d\u277f\u0001\u0000\u0000\u0000\u277e\u277a\u0001\u0000\u0000\u0000"+
		"\u277e\u277b\u0001\u0000\u0000\u0000\u277f\u05a9\u0001\u0000\u0000\u0000"+
		"\u2780\u2783\u0003\u05ac\u02d6\u0000\u2781\u2783\u00055\u0000\u0000\u2782"+
		"\u2780\u0001\u0000\u0000\u0000\u2782\u2781\u0001\u0000\u0000\u0000\u2783"+
		"\u05ab\u0001\u0000\u0000\u0000\u2784\u2785\u0007>\u0000\u0000\u2785\u05ad"+
		"\u0001\u0000\u0000\u0000\u2786\u2788\u0003\u05b0\u02d8\u0000\u2787\u2786"+
		"\u0001\u0000\u0000\u0000\u2788\u278b\u0001\u0000\u0000\u0000\u2789\u2787"+
		"\u0001\u0000\u0000\u0000\u2789\u278a\u0001\u0000\u0000\u0000\u278a\u05af"+
		"\u0001\u0000\u0000\u0000\u278b\u2789\u0001\u0000\u0000\u0000\u278c\u278d"+
		"\u0003\u0582\u02c1\u0000\u278d\u278e\u0005\u0007\u0000\u0000\u278e\u27a8"+
		"\u0001\u0000\u0000\u0000\u278f\u27a8\u0003\u05f2\u02f9\u0000\u2790\u27a8"+
		"\u0003\u05f6\u02fb\u0000\u2791\u27a8\u0003\u05b8\u02dc\u0000\u2792\u27a8"+
		"\u0003\u05c8\u02e4\u0000\u2793\u27a8\u0003\u05ce\u02e7\u0000\u2794\u27a8"+
		"\u0003\u05d8\u02ec\u0000\u2795\u27a8\u0003\u05da\u02ed\u0000\u2796\u27a8"+
		"\u0003\u05dc\u02ee\u0000\u2797\u27a8\u0003\u05ea\u02f5\u0000\u2798\u27a8"+
		"\u0003\u05ee\u02f7\u0000\u2799\u27a8\u0003\u0602\u0301\u0000\u279a\u27a8"+
		"\u0003\u0608\u0304\u0000\u279b\u27a8\u0003\u060a\u0305\u0000\u279c\u27a8"+
		"\u0003\u05b2\u02d9\u0000\u279d\u27a8\u0003\u05b4\u02da\u0000\u279e\u27a8"+
		"\u0003\u05ba\u02dd\u0000\u279f\u27a8\u0003\u0612\u0309\u0000\u27a0\u27a8"+
		"\u0003\u061e\u030f\u0000\u27a1\u27a8\u0003\u0626\u0313\u0000\u27a2\u27a8"+
		"\u0003\u0628\u0314\u0000\u27a3\u27a8\u0003\u062a\u0315\u0000\u27a4\u27a8"+
		"\u0003\u062c\u0316\u0000\u27a5\u27a8\u0003\u062e\u0317\u0000\u27a6\u27a8"+
		"\u0003\u0632\u0319\u0000\u27a7\u278c\u0001\u0000\u0000\u0000\u27a7\u278f"+
		"\u0001\u0000\u0000\u0000\u27a7\u2790\u0001\u0000\u0000\u0000\u27a7\u2791"+
		"\u0001\u0000\u0000\u0000\u27a7\u2792\u0001\u0000\u0000\u0000\u27a7\u2793"+
		"\u0001\u0000\u0000\u0000\u27a7\u2794\u0001\u0000\u0000\u0000\u27a7\u2795"+
		"\u0001\u0000\u0000\u0000\u27a7\u2796\u0001\u0000\u0000\u0000\u27a7\u2797"+
		"\u0001\u0000\u0000\u0000\u27a7\u2798\u0001\u0000\u0000\u0000\u27a7\u2799"+
		"\u0001\u0000\u0000\u0000\u27a7\u279a\u0001\u0000\u0000\u0000\u27a7\u279b"+
		"\u0001\u0000\u0000\u0000\u27a7\u279c\u0001\u0000\u0000\u0000\u27a7\u279d"+
		"\u0001\u0000\u0000\u0000\u27a7\u279e\u0001\u0000\u0000\u0000\u27a7\u279f"+
		"\u0001\u0000\u0000\u0000\u27a7\u27a0\u0001\u0000\u0000\u0000\u27a7\u27a1"+
		"\u0001\u0000\u0000\u0000\u27a7\u27a2\u0001\u0000\u0000\u0000\u27a7\u27a3"+
		"\u0001\u0000\u0000\u0000\u27a7\u27a4\u0001\u0000\u0000\u0000\u27a7\u27a5"+
		"\u0001\u0000\u0000\u0000\u27a7\u27a6\u0001\u0000\u0000\u0000\u27a8\u05b1"+
		"\u0001\u0000\u0000\u0000\u27a9\u27aa\u0005\u01f2\u0000\u0000\u27aa\u27ab"+
		"\u0003\u0650\u0328\u0000\u27ab\u27ac\u0005\u0007\u0000\u0000\u27ac\u05b3"+
		"\u0001\u0000\u0000\u0000\u27ad\u27ae\u0005\u01b1\u0000\u0000\u27ae\u27af"+
		"\u0003\u0648\u0324\u0000\u27af\u27b0\u0005\u0002\u0000\u0000\u27b0\u27b1"+
		"\u0003\u05b6\u02db\u0000\u27b1\u27b2\u0005\u0003\u0000\u0000\u27b2\u27b3"+
		"\u0005\u0007\u0000\u0000\u27b3\u27bc\u0001\u0000\u0000\u0000\u27b4\u27b5"+
		"\u00059\u0000\u0000\u27b5\u27b6\u0003\u0648\u0324\u0000\u27b6\u27b7\u0005"+
		"\u0002\u0000\u0000\u27b7\u27b8\u0003\u05b6\u02db\u0000\u27b8\u27b9\u0005"+
		"\u0003\u0000\u0000\u27b9\u27ba\u0005\u0007\u0000\u0000\u27ba\u27bc\u0001"+
		"\u0000\u0000\u0000\u27bb\u27ad\u0001\u0000\u0000\u0000\u27bb\u27b4\u0001"+
		"\u0000\u0000\u0000\u27bc\u05b5\u0001\u0000\u0000\u0000\u27bd\u27c0\u0001"+
		"\u0000\u0000\u0000\u27be\u27c0\u0003\u0502\u0281\u0000\u27bf\u27bd\u0001"+
		"\u0000\u0000\u0000\u27bf\u27be\u0001\u0000\u0000\u0000\u27c0\u05b7\u0001"+
		"\u0000\u0000\u0000\u27c1\u27c2\u0003\u05c6\u02e3\u0000\u27c2\u27c3\u0003"+
		"\u05ac\u02d6\u0000\u27c3\u27c4\u0003\u064c\u0326\u0000\u27c4\u27c5\u0005"+
		"\u0007\u0000\u0000\u27c5\u05b9\u0001\u0000\u0000\u0000\u27c6\u27c7\u0005"+
		"\u01f3\u0000\u0000\u27c7\u27c8\u0003\u05bc\u02de\u0000\u27c8\u27c9\u0005"+
		"\u01f4\u0000\u0000\u27c9\u27ca\u0003\u05be\u02df\u0000\u27ca\u27cb\u0005"+
		"\u0007\u0000\u0000\u27cb\u05bb\u0001\u0000\u0000\u0000\u27cc\u27d0\u0001"+
		"\u0000\u0000\u0000\u27cd\u27d0\u0005\u01b2\u0000\u0000\u27ce\u27d0\u0005"+
		"\u01f5\u0000\u0000\u27cf\u27cc\u0001\u0000\u0000\u0000\u27cf\u27cd\u0001"+
		"\u0000\u0000\u0000\u27cf\u27ce\u0001\u0000\u0000\u0000\u27d0\u05bd\u0001"+
		"\u0000\u0000\u0000\u27d1\u27d6\u0003\u05c0\u02e0\u0000\u27d2\u27d3\u0005"+
		"\u0006\u0000\u0000\u27d3\u27d5\u0003\u05c0\u02e0\u0000\u27d4\u27d2\u0001"+
		"\u0000\u0000\u0000\u27d5\u27d8\u0001\u0000\u0000\u0000\u27d6\u27d4\u0001"+
		"\u0000\u0000\u0000\u27d6\u27d7\u0001\u0000\u0000\u0000\u27d7\u05bf\u0001"+
		"\u0000\u0000\u0000\u27d8\u27d6\u0001\u0000\u0000\u0000\u27d9\u27da\u0003"+
		"\u05c4\u02e2\u0000\u27da\u27db\u0003\u05ac\u02d6\u0000\u27db\u27dc\u0003"+
		"\u05c2\u02e1\u0000\u27dc\u05c1\u0001\u0000\u0000\u0000\u27dd\u27de\u0003"+
		"\u055e\u02af\u0000\u27de\u05c3\u0001\u0000\u0000\u0000\u27df\u27e0\u0003"+
		"\u05c6\u02e3\u0000\u27e0\u05c5\u0001\u0000\u0000\u0000\u27e1\u27e4\u0003"+
		"\u020c\u0106\u0000\u27e2\u27e4\u0005\u001c\u0000\u0000\u27e3\u27e1\u0001"+
		"\u0000\u0000\u0000\u27e3\u27e2\u0001\u0000\u0000\u0000\u27e4\u27eb\u0001"+
		"\u0000\u0000\u0000\u27e5\u27e6\u0005\u0004\u0000\u0000\u27e6\u27e7\u0003"+
		"\u0652\u0329\u0000\u27e7\u27e8\u0005\u0005\u0000\u0000\u27e8\u27ea\u0001"+
		"\u0000\u0000\u0000\u27e9\u27e5\u0001\u0000\u0000\u0000\u27ea\u27ed\u0001"+
		"\u0000\u0000\u0000\u27eb\u27e9\u0001\u0000\u0000\u0000\u27eb\u27ec\u0001"+
		"\u0000\u0000\u0000\u27ec\u05c7\u0001\u0000\u0000\u0000\u27ed\u27eb\u0001"+
		"\u0000\u0000\u0000\u27ee\u27ef\u0005\u00dc\u0000\u0000\u27ef\u27f0\u0003"+
		"\u064e\u0327\u0000\u27f0\u27f1\u0005]\u0000\u0000\u27f1\u27f2\u0003\u05ae"+
		"\u02d7\u0000\u27f2\u27f3\u0003\u05ca\u02e5\u0000\u27f3\u27f4\u0003\u05cc"+
		"\u02e6\u0000\u27f4\u27f5\u0005\u01c6\u0000\u0000\u27f5\u27f6\u0005\u00dc"+
		"\u0000\u0000\u27f6\u27f7\u0005\u0007\u0000\u0000\u27f7\u05c9\u0001\u0000"+
		"\u0000\u0000\u27f8\u27f9\u0005\u01f6\u0000\u0000\u27f9\u27fa\u0003\u048c"+
		"\u0246\u0000\u27fa\u27fb\u0005]\u0000\u0000\u27fb\u27fc\u0003\u05ae\u02d7"+
		"\u0000\u27fc\u27fe\u0001\u0000\u0000\u0000\u27fd\u27f8\u0001\u0000\u0000"+
		"\u0000\u27fe\u2801\u0001\u0000\u0000\u0000\u27ff\u27fd\u0001\u0000\u0000"+
		"\u0000\u27ff\u2800\u0001\u0000\u0000\u0000\u2800\u05cb\u0001\u0000\u0000"+
		"\u0000\u2801\u27ff\u0001\u0000\u0000\u0000\u2802\u2806\u0001\u0000\u0000"+
		"\u0000\u2803\u2804\u0005:\u0000\u0000\u2804\u2806\u0003\u05ae\u02d7\u0000"+
		"\u2805\u2802\u0001\u0000\u0000\u0000\u2805\u2803\u0001\u0000\u0000\u0000"+
		"\u2806\u05cd\u0001\u0000\u0000\u0000\u2807\u2808\u0005(\u0000\u0000\u2808"+
		"\u2809\u0003\u05d0\u02e8\u0000\u2809\u280a\u0003\u05d2\u02e9\u0000\u280a"+
		"\u280b\u0003\u05d6\u02eb\u0000\u280b\u280c\u0005\u01c6\u0000\u0000\u280c"+
		"\u280d\u0005(\u0000\u0000\u280d\u280e\u0005\u0007\u0000\u0000\u280e\u05cf"+
		"\u0001\u0000\u0000\u0000\u280f\u2812\u0001\u0000\u0000\u0000\u2810\u2812"+
		"\u0003\u064c\u0326\u0000\u2811\u280f\u0001\u0000\u0000\u0000\u2811\u2810"+
		"\u0001\u0000\u0000\u0000\u2812\u05d1\u0001\u0000\u0000\u0000\u2813\u2815"+
		"\u0003\u05d4\u02ea\u0000\u2814\u2813\u0001\u0000\u0000\u0000\u2815\u2816"+
		"\u0001\u0000\u0000\u0000\u2816\u2814\u0001\u0000\u0000\u0000\u2816\u2817"+
		"\u0001\u0000\u0000\u0000\u2817\u05d3\u0001\u0000\u0000\u0000\u2818\u2819"+
		"\u0005f\u0000\u0000\u2819\u281a\u0003\u0502\u0281\u0000\u281a\u281b\u0005"+
		"]\u0000\u0000\u281b\u281c\u0003\u05ae\u02d7\u0000\u281c\u05d5\u0001\u0000"+
		"\u0000\u0000\u281d\u2821\u0001\u0000\u0000\u0000\u281e\u281f\u0005:\u0000"+
		"\u0000\u281f\u2821\u0003\u05ae\u02d7\u0000\u2820\u281d\u0001\u0000\u0000"+
		"\u0000\u2820\u281e\u0001\u0000\u0000\u0000\u2821\u05d7\u0001\u0000\u0000"+
		"\u0000\u2822\u2823\u0003\u0642\u0321\u0000\u2823\u2824\u0003\u0606\u0303"+
		"\u0000\u2824\u05d9\u0001\u0000\u0000\u0000\u2825\u2826\u0003\u0642\u0321"+
		"\u0000\u2826\u2827\u0005\u01f7\u0000\u0000\u2827\u2828\u0003\u0654\u032a"+
		"\u0000\u2828\u2829\u0003\u0606\u0303\u0000\u2829\u05db\u0001\u0000\u0000"+
		"\u0000\u282a\u282b\u0003\u0642\u0321\u0000\u282b\u282c\u0005>\u0000\u0000"+
		"\u282c\u282d\u0003\u05de\u02ef\u0000\u282d\u282e\u0003\u0606\u0303\u0000"+
		"\u282e\u05dd\u0001\u0000\u0000\u0000\u282f\u2830\u0003\u05e8\u02f4\u0000"+
		"\u2830\u2840\u0005D\u0000\u0000\u2831\u2832\u0003\u03ba\u01dd\u0000\u2832"+
		"\u2833\u0003\u05e2\u02f1\u0000\u2833\u2841\u0001\u0000\u0000\u0000\u2834"+
		"\u2841\u0003\u03c0\u01e0\u0000\u2835\u2841\u0003\u036e\u01b7\u0000\u2836"+
		"\u2837\u0005\u00ca\u0000\u0000\u2837\u2838\u0003\u048c\u0246\u0000\u2838"+
		"\u2839\u0003\u05e0\u02f0\u0000\u2839\u2841\u0001\u0000\u0000\u0000\u283a"+
		"\u283b\u0003\u05e4\u02f2\u0000\u283b\u283c\u0003\u048c\u0246\u0000\u283c"+
		"\u283d\u0005\u0018\u0000\u0000\u283d\u283e\u0003\u048c\u0246\u0000\u283e"+
		"\u283f\u0003\u05e6\u02f3\u0000\u283f\u2841\u0001\u0000\u0000\u0000\u2840"+
		"\u2831\u0001\u0000\u0000\u0000\u2840\u2834\u0001\u0000\u0000\u0000\u2840"+
		"\u2835\u0001\u0000\u0000\u0000\u2840\u2836\u0001\u0000\u0000\u0000\u2840"+
		"\u283a\u0001\u0000\u0000\u0000\u2841\u05df\u0001\u0000\u0000\u0000\u2842"+
		"\u2846\u0001\u0000\u0000\u0000\u2843\u2844\u0005d\u0000\u0000\u2844\u2846"+
		"\u0003\u0502\u0281\u0000\u2845\u2842\u0001\u0000\u0000\u0000\u2845\u2843"+
		"\u0001\u0000\u0000\u0000\u2846\u05e1\u0001\u0000\u0000\u0000\u2847\u2854"+
		"\u0001\u0000\u0000\u0000\u2848\u2849\u0005\u0002\u0000\u0000\u2849\u284e"+
		"\u0003\u048c\u0246\u0000\u284a\u284b\u0005\u0006\u0000\u0000\u284b\u284d"+
		"\u0003\u048c\u0246\u0000\u284c\u284a\u0001\u0000\u0000\u0000\u284d\u2850"+
		"\u0001\u0000\u0000\u0000\u284e\u284c\u0001\u0000\u0000\u0000\u284e\u284f"+
		"\u0001\u0000\u0000\u0000\u284f\u2851\u0001\u0000\u0000\u0000\u2850\u284e"+
		"\u0001\u0000\u0000\u0000\u2851\u2852\u0005\u0003\u0000\u0000\u2852\u2854"+
		"\u0001\u0000\u0000\u0000\u2853\u2847\u0001\u0000\u0000\u0000\u2853\u2848"+
		"\u0001\u0000\u0000\u0000\u2854\u05e3\u0001\u0000\u0000\u0000\u2855\u2858"+
		"\u0001\u0000\u0000\u0000\u2856\u2858\u0005\u01f8\u0000\u0000\u2857\u2855"+
		"\u0001\u0000\u0000\u0000\u2857\u2856\u0001\u0000\u0000\u0000\u2858\u05e5"+
		"\u0001\u0000\u0000\u0000\u2859\u285d\u0001\u0000\u0000\u0000\u285a\u285b"+
		"\u0005\u0093\u0000\u0000\u285b\u285d\u0003\u048c\u0246\u0000\u285c\u2859"+
		"\u0001\u0000\u0000\u0000\u285c\u285a\u0001\u0000\u0000\u0000\u285d\u05e7"+
		"\u0001\u0000\u0000\u0000\u285e\u285f\u0003\u020a\u0105\u0000\u285f\u05e9"+
		"\u0001\u0000\u0000\u0000\u2860\u2861\u0003\u0642\u0321\u0000\u2861\u2862"+
		"\u0005\u01f9\u0000\u0000\u2862\u2863\u0003\u05e8\u02f4\u0000\u2863\u2864"+
		"\u0003\u05ec\u02f6\u0000\u2864\u2865\u0005D\u0000\u0000\u2865\u2866\u0005"+
		"#\u0000\u0000\u2866\u2867\u0003\u048c\u0246\u0000\u2867\u2868\u0003\u0606"+
		"\u0303\u0000\u2868\u05eb\u0001\u0000\u0000\u0000\u2869\u286d\u0001\u0000"+
		"\u0000\u0000\u286a\u286b\u0005\u01fa\u0000\u0000\u286b\u286d\u0003\u054e"+
		"\u02a7\u0000\u286c\u2869\u0001\u0000\u0000\u0000\u286c\u286a\u0001\u0000"+
		"\u0000\u0000\u286d\u05ed\u0001\u0000\u0000\u0000\u286e\u286f\u0003\u05f0"+
		"\u02f8\u0000\u286f\u2870\u0003\u0644\u0322\u0000\u2870\u2871\u0003\u0646"+
		"\u0323\u0000\u2871\u2872\u0005\u0007\u0000\u0000\u2872\u05ef\u0001\u0000"+
		"\u0000\u0000\u2873\u2874\u0007?\u0000\u0000\u2874\u05f1\u0001\u0000\u0000"+
		"\u0000\u2875\u2881\u0005\u01fc\u0000\u0000\u2876\u2877\u0005\u0105\u0000"+
		"\u0000\u2877\u2882\u0003\u064c\u0326\u0000\u2878\u287e\u0005\u01fd\u0000"+
		"\u0000\u2879\u287a\u0005\u00ca\u0000\u0000\u287a\u287b\u0003\u048c\u0246"+
		"\u0000\u287b\u287c\u0003\u05e0\u02f0\u0000\u287c\u287f\u0001\u0000\u0000"+
		"\u0000\u287d\u287f\u0003\u03c0\u01e0\u0000\u287e\u2879\u0001\u0000\u0000"+
		"\u0000\u287e\u287d\u0001\u0000\u0000\u0000\u287f\u2882\u0001\u0000\u0000"+
		"\u0000\u2880\u2882\u0003\u05f4\u02fa\u0000\u2881\u2876\u0001\u0000\u0000"+
		"\u0000\u2881\u2878\u0001\u0000\u0000\u0000\u2881\u2880\u0001\u0000\u0000"+
		"\u0000\u2882\u2883\u0001\u0000\u0000\u0000\u2883\u2884\u0005\u0007\u0000"+
		"\u0000\u2884\u05f3\u0001\u0000\u0000\u0000\u2885\u2888\u0001\u0000\u0000"+
		"\u0000\u2886\u2888\u0003\u064c\u0326\u0000\u2887\u2885\u0001\u0000\u0000"+
		"\u0000\u2887\u2886\u0001\u0000\u0000\u0000\u2888\u05f5\u0001\u0000\u0000"+
		"\u0000\u2889\u288a\u0005\u01fe\u0000\u0000\u288a\u288b\u0003\u05f8\u02fc"+
		"\u0000\u288b\u288c\u0003\u0550\u02a8\u0000\u288c\u288d\u0003\u05fa\u02fd"+
		"\u0000\u288d\u288e\u0003\u05fc\u02fe\u0000\u288e\u288f\u0005\u0007\u0000"+
		"\u0000\u288f\u28a4\u0001\u0000\u0000\u0000\u2890\u2891\u0005\u01fe\u0000"+
		"\u0000\u2891\u2892\u0003\u05f8\u02fc\u0000\u2892\u2893\u0003\u0568\u02b4"+
		"\u0000\u2893\u2894\u0003\u05fc\u02fe\u0000\u2894\u2895\u0005\u0007\u0000"+
		"\u0000\u2895\u28a4\u0001\u0000\u0000\u0000\u2896\u2897\u0005\u01fe\u0000"+
		"\u0000\u2897\u2898\u0003\u05f8\u02fc\u0000\u2898\u2899\u0005\u01ff\u0000"+
		"\u0000\u2899\u289a\u0003\u0550\u02a8\u0000\u289a\u289b\u0003\u05fc\u02fe"+
		"\u0000\u289b\u289c\u0005\u0007\u0000\u0000\u289c\u28a4\u0001\u0000\u0000"+
		"\u0000\u289d\u289e\u0005\u01fe\u0000\u0000\u289e\u289f\u0003\u05f8\u02fc"+
		"\u0000\u289f\u28a0\u0003\u05fc\u02fe\u0000\u28a0\u28a1\u0005\u0007\u0000"+
		"\u0000\u28a1\u28a4\u0001\u0000\u0000\u0000\u28a2\u28a4\u0005\u01fe\u0000"+
		"\u0000\u28a3\u2889\u0001\u0000\u0000\u0000\u28a3\u2890\u0001\u0000\u0000"+
		"\u0000\u28a3\u2896\u0001\u0000\u0000\u0000\u28a3\u289d\u0001\u0000\u0000"+
		"\u0000\u28a3\u28a2\u0001\u0000\u0000\u0000\u28a4\u05f7\u0001\u0000\u0000"+
		"\u0000\u28a5\u28ae\u0001\u0000\u0000\u0000\u28a6\u28ae\u0001\u0000\u0000"+
		"\u0000\u28a7\u28ae\u0005\u0200\u0000\u0000\u28a8\u28ae\u0005\u0201\u0000"+
		"\u0000\u28a9\u28ae\u0005\u0202\u0000\u0000\u28aa\u28ae\u0005\u0203\u0000"+
		"\u0000\u28ab\u28ae\u0005\u0204\u0000\u0000\u28ac\u28ae\u0005\u0205\u0000"+
		"\u0000\u28ad\u28a5\u0001\u0000\u0000\u0000\u28ad\u28a6\u0001\u0000\u0000"+
		"\u0000\u28ad\u28a7\u0001\u0000\u0000\u0000\u28ad\u28a8\u0001\u0000\u0000"+
		"\u0000\u28ad\u28a9\u0001\u0000\u0000\u0000\u28ad\u28aa\u0001\u0000\u0000"+
		"\u0000\u28ad\u28ab\u0001\u0000\u0000\u0000\u28ad\u28ac\u0001\u0000\u0000"+
		"\u0000\u28ae\u05f9\u0001\u0000\u0000\u0000\u28af\u28b7\u0001\u0000\u0000"+
		"\u0000\u28b0\u28b1\u0005\u0006\u0000\u0000\u28b1\u28b3\u0003\u048c\u0246"+
		"\u0000\u28b2\u28b0\u0001\u0000\u0000\u0000\u28b3\u28b4\u0001\u0000\u0000"+
		"\u0000\u28b4\u28b2\u0001\u0000\u0000\u0000\u28b4\u28b5\u0001\u0000\u0000"+
		"\u0000\u28b5\u28b7\u0001\u0000\u0000\u0000\u28b6\u28af\u0001\u0000\u0000"+
		"\u0000\u28b6\u28b2\u0001\u0000\u0000\u0000\u28b7\u05fb\u0001\u0000\u0000"+
		"\u0000\u28b8\u28bc\u0001\u0000\u0000\u0000\u28b9\u28ba\u0005d\u0000\u0000"+
		"\u28ba\u28bc\u0003\u0600\u0300\u0000\u28bb\u28b8\u0001\u0000\u0000\u0000"+
		"\u28bb\u28b9\u0001\u0000\u0000\u0000\u28bc\u05fd\u0001\u0000\u0000\u0000"+
		"\u28bd\u28be\u0003\u0568\u02b4\u0000\u28be\u28bf\u0005\n\u0000\u0000\u28bf"+
		"\u28c0\u0003\u048c\u0246\u0000\u28c0\u05ff\u0001\u0000\u0000\u0000\u28c1"+
		"\u28c6\u0003\u05fe\u02ff\u0000\u28c2\u28c3\u0005\u0006\u0000\u0000\u28c3"+
		"\u28c5\u0003\u05fe\u02ff\u0000\u28c4\u28c2\u0001\u0000\u0000\u0000\u28c5"+
		"\u28c8\u0001\u0000\u0000\u0000\u28c6\u28c4\u0001\u0000\u0000\u0000\u28c6"+
		"\u28c7\u0001\u0000\u0000\u0000\u28c7\u0601\u0001\u0000\u0000\u0000\u28c8"+
		"\u28c6\u0001\u0000\u0000\u0000\u28c9\u28ca\u0005\u0206\u0000\u0000\u28ca"+
		"\u28cb\u0003\u064c\u0326\u0000\u28cb\u28cc\u0003\u0604\u0302\u0000\u28cc"+
		"\u28cd\u0005\u0007\u0000\u0000\u28cd\u0603\u0001\u0000\u0000\u0000\u28ce"+
		"\u28d2\u0001\u0000\u0000\u0000\u28cf\u28d0\u0005\u0006\u0000\u0000\u28d0"+
		"\u28d2\u0003\u064c\u0326\u0000\u28d1\u28ce\u0001\u0000\u0000\u0000\u28d1"+
		"\u28cf\u0001\u0000\u0000\u0000\u28d2\u0605\u0001\u0000\u0000\u0000\u28d3"+
		"\u28d4\u0005\u0207\u0000\u0000\u28d4\u28d5\u0003\u05ae\u02d7\u0000\u28d5"+
		"\u28d6\u0005\u01c6\u0000\u0000\u28d6\u28d7\u0005\u0207\u0000\u0000\u28d7"+
		"\u28d8\u0003\u0644\u0322\u0000\u28d8\u28d9\u0005\u0007\u0000\u0000\u28d9"+
		"\u0607\u0001\u0000\u0000\u0000\u28da\u28db\u0003\u0656\u032b\u0000\u28db"+
		"\u28dc\u0005\u0007\u0000\u0000\u28dc\u0609\u0001\u0000\u0000\u0000\u28dd"+
		"\u28de\u0005\u00ca\u0000\u0000\u28de\u28e6\u0003\u048c\u0246\u0000\u28df"+
		"\u28e0\u0003\u0610\u0308\u0000\u28e0\u28e1\u0003\u060c\u0306\u0000\u28e1"+
		"\u28e7\u0001\u0000\u0000\u0000\u28e2\u28e3\u0003\u060c\u0306\u0000\u28e3"+
		"\u28e4\u0003\u0610\u0308\u0000\u28e4\u28e7\u0001\u0000\u0000\u0000\u28e5"+
		"\u28e7\u0001\u0000\u0000\u0000\u28e6\u28df\u0001\u0000\u0000\u0000\u28e6"+
		"\u28e2\u0001\u0000\u0000\u0000\u28e6\u28e5\u0001\u0000\u0000\u0000\u28e7"+
		"\u28e8\u0001\u0000\u0000\u0000\u28e8\u28e9\u0005\u0007\u0000\u0000\u28e9"+
		"\u060b\u0001\u0000\u0000\u0000\u28ea\u28ee\u0001\u0000\u0000\u0000\u28eb"+
		"\u28ec\u0005d\u0000\u0000\u28ec\u28ee\u0003\u060e\u0307\u0000\u28ed\u28ea"+
		"\u0001\u0000\u0000\u0000\u28ed\u28eb\u0001\u0000\u0000\u0000\u28ee\u060d"+
		"\u0001\u0000\u0000\u0000\u28ef\u28f4\u0003\u048c\u0246\u0000\u28f0\u28f1"+
		"\u0005\u0006\u0000\u0000\u28f1\u28f3\u0003\u048c\u0246\u0000\u28f2\u28f0"+
		"\u0001\u0000\u0000\u0000\u28f3\u28f6\u0001\u0000\u0000\u0000\u28f4\u28f2"+
		"\u0001\u0000\u0000\u0000\u28f4\u28f5\u0001\u0000\u0000\u0000\u28f5\u060f"+
		"\u0001\u0000\u0000\u0000\u28f6\u28f4\u0001\u0000\u0000\u0000\u28f7\u28fe"+
		"\u0001\u0000\u0000\u0000\u28f8\u28fa\u0005G\u0000\u0000\u28f9\u28fb\u0005"+
		"\u0153\u0000\u0000\u28fa\u28f9\u0001\u0000\u0000\u0000\u28fa\u28fb\u0001"+
		"\u0000\u0000\u0000\u28fb\u28fc\u0001\u0000\u0000\u0000\u28fc\u28fe\u0003"+
		"\u0620\u0310\u0000\u28fd\u28f7\u0001\u0000\u0000\u0000\u28fd\u28f8\u0001"+
		"\u0000\u0000\u0000\u28fe\u0611\u0001\u0000\u0000\u0000\u28ff\u2911\u0005"+
		"\u0208\u0000\u0000\u2900\u2901\u0003\u0634\u031a\u0000\u2901\u2902\u0003"+
		"\u061a\u030d\u0000\u2902\u2908\u0005>\u0000\u0000\u2903\u2909\u0003\u03c0"+
		"\u01e0\u0000\u2904\u2905\u0005\u00ca\u0000\u0000\u2905\u2906\u0003\u064c"+
		"\u0326\u0000\u2906\u2907\u0003\u0618\u030c\u0000\u2907\u2909\u0001\u0000"+
		"\u0000\u0000\u2908\u2903\u0001\u0000\u0000\u0000\u2908\u2904\u0001\u0000"+
		"\u0000\u0000\u2909\u2912\u0001\u0000\u0000\u0000\u290a\u290f\u0003\u055e"+
		"\u02af\u0000\u290b\u290c\u0005\u0002\u0000\u0000\u290c\u290d\u0003\u0616"+
		"\u030b\u0000\u290d\u290e\u0005\u0003\u0000\u0000\u290e\u2910\u0001\u0000"+
		"\u0000\u0000\u290f\u290b\u0001\u0000\u0000\u0000\u290f\u2910\u0001\u0000"+
		"\u0000\u0000\u2910\u2912\u0001\u0000\u0000\u0000\u2911\u2900\u0001\u0000"+
		"\u0000\u0000\u2911\u290a\u0001\u0000\u0000\u0000\u2912\u2913\u0001\u0000"+
		"\u0000\u0000\u2913\u2914\u0005\u0007\u0000\u0000\u2914\u0613\u0001\u0000"+
		"\u0000\u0000\u2915\u2916\u0003\u055e\u02af\u0000\u2916\u2917\u0005\u0014"+
		"\u0000\u0000\u2917\u2918\u0003\u048c\u0246\u0000\u2918\u291b\u0001\u0000"+
		"\u0000\u0000\u2919\u291b\u0003\u048c\u0246\u0000\u291a\u2915\u0001\u0000"+
		"\u0000\u0000\u291a\u2919\u0001\u0000\u0000\u0000\u291b\u0615\u0001\u0000"+
		"\u0000\u0000\u291c\u2921\u0003\u0614\u030a\u0000\u291d\u291e\u0005\u0006"+
		"\u0000\u0000\u291e\u2920\u0003\u0614\u030a\u0000\u291f\u291d\u0001\u0000"+
		"\u0000\u0000\u2920\u2923\u0001\u0000\u0000\u0000\u2921\u291f\u0001\u0000"+
		"\u0000\u0000\u2921\u2922\u0001\u0000\u0000\u0000\u2922\u0617\u0001\u0000"+
		"\u0000\u0000\u2923\u2921\u0001\u0000\u0000\u0000\u2924\u2928\u0001\u0000"+
		"\u0000\u0000\u2925\u2926\u0005d\u0000\u0000\u2926\u2928\u0003\u0502\u0281"+
		"\u0000\u2927\u2924\u0001\u0000\u0000\u0000\u2927\u2925\u0001\u0000\u0000"+
		"\u0000\u2928\u0619\u0001\u0000\u0000\u0000\u2929\u292e\u0001\u0000\u0000"+
		"\u0000\u292a\u292b\u0003\u061c\u030e\u0000\u292b\u292c\u0005\u013d\u0000"+
		"\u0000\u292c\u292e\u0001\u0000\u0000\u0000\u292d\u2929\u0001\u0000\u0000"+
		"\u0000\u292d\u292a\u0001\u0000\u0000\u0000\u292e\u061b\u0001\u0000\u0000"+
		"\u0000\u292f\u2932\u0001\u0000\u0000\u0000\u2930\u2932\u0005\u0106\u0000"+
		"\u0000\u2931\u292f\u0001\u0000\u0000\u0000\u2931\u2930\u0001\u0000\u0000"+
		"\u0000\u2932\u061d\u0001\u0000\u0000\u0000\u2933\u2934\u0005=\u0000\u0000"+
		"\u2934\u2935\u0003\u0624\u0312\u0000\u2935\u2936\u0003\u0622\u0311\u0000"+
		"\u2936\u2937\u0003\u0634\u031a\u0000\u2937\u2938\u0005G\u0000\u0000\u2938"+
		"\u2939\u0003\u0620\u0310\u0000\u2939\u293a\u0005\u0007\u0000\u0000\u293a"+
		"\u061f\u0001\u0000\u0000\u0000\u293b\u293c\u0003\u0502\u0281\u0000\u293c"+
		"\u0621\u0001\u0000\u0000\u0000\u293d\u2941\u0001\u0000\u0000\u0000\u293e"+
		"\u2941\u0005@\u0000\u0000\u293f\u2941\u0005D\u0000\u0000\u2940\u293d\u0001"+
		"\u0000\u0000\u0000\u2940\u293e\u0001\u0000\u0000\u0000\u2940\u293f\u0001"+
		"\u0000\u0000\u0000\u2941\u0623\u0001\u0000\u0000\u0000\u2942\u2954\u0001"+
		"\u0000\u0000\u0000\u2943\u2954\u0001\u0000\u0000\u0000\u2944\u2954\u0005"+
		"\u0105\u0000\u0000\u2945\u2954\u0005\u011e\u0000\u0000\u2946\u2954\u0005"+
		"\u00cf\u0000\u0000\u2947\u2954\u0005\u00f0\u0000\u0000\u2948\u2949\u0005"+
		"\u0082\u0000\u0000\u2949\u2954\u0003\u048c\u0246\u0000\u294a\u294b\u0005"+
		"\u012c\u0000\u0000\u294b\u2954\u0003\u048c\u0246\u0000\u294c\u2954\u0003"+
		"\u048c\u0246\u0000\u294d\u2954\u0005\u001e\u0000\u0000\u294e\u2951\u0007"+
		"@\u0000\u0000\u294f\u2952\u0003\u048c\u0246\u0000\u2950\u2952\u0005\u001e"+
		"\u0000\u0000\u2951\u294f\u0001\u0000\u0000\u0000\u2951\u2950\u0001\u0000"+
		"\u0000\u0000\u2951\u2952\u0001\u0000\u0000\u0000\u2952\u2954\u0001\u0000"+
		"\u0000\u0000\u2953\u2942\u0001\u0000\u0000\u0000\u2953\u2943\u0001\u0000"+
		"\u0000\u0000\u2953\u2944\u0001\u0000\u0000\u0000\u2953\u2945\u0001\u0000"+
		"\u0000\u0000\u2953\u2946\u0001\u0000\u0000\u0000\u2953\u2947\u0001\u0000"+
		"\u0000\u0000\u2953\u2948\u0001\u0000\u0000\u0000\u2953\u294a\u0001\u0000"+
		"\u0000\u0000\u2953\u294c\u0001\u0000\u0000\u0000\u2953\u294d\u0001\u0000"+
		"\u0000\u0000\u2953\u294e\u0001\u0000\u0000\u0000\u2954\u0625\u0001\u0000"+
		"\u0000\u0000\u2955\u2956\u0005\u0102\u0000\u0000\u2956\u2957\u0003\u0624"+
		"\u0312\u0000\u2957\u2958\u0003\u0634\u031a\u0000\u2958\u2959\u0005\u0007"+
		"\u0000\u0000\u2959\u0627\u0001\u0000\u0000\u0000\u295a\u295b\u0005\u009d"+
		"\u0000\u0000\u295b\u295c\u0003\u0634\u031a\u0000\u295c\u295d\u0005\u0007"+
		"\u0000\u0000\u295d\u0629\u0001\u0000\u0000\u0000\u295e\u295f\u0005N\u0000"+
		"\u0000\u295f\u2960\u0005\u0007\u0000\u0000\u2960\u062b\u0001\u0000\u0000"+
		"\u0000\u2961\u2962\u0005\u00a1\u0000\u0000\u2962\u2963\u0003\u0630\u0318"+
		"\u0000\u2963\u2964\u0005\u0007\u0000\u0000\u2964\u062d\u0001\u0000\u0000"+
		"\u0000\u2965\u2966\u0005\u0138\u0000\u0000\u2966\u2967\u0003\u0630\u0318"+
		"\u0000\u2967\u2968\u0005\u0007\u0000\u0000\u2968\u062f\u0001\u0000\u0000"+
		"\u0000\u2969\u296b\u0005!\u0000\u0000\u296a\u296c\u0005\u0106\u0000\u0000"+
		"\u296b\u296a\u0001\u0000\u0000\u0000\u296b\u296c\u0001\u0000\u0000\u0000"+
		"\u296c\u296d\u0001\u0000\u0000\u0000\u296d\u2970\u0005\u0099\u0000\u0000"+
		"\u296e\u2970\u0001\u0000\u0000\u0000\u296f\u2969\u0001\u0000\u0000\u0000"+
		"\u296f\u296e\u0001\u0000\u0000\u0000\u2970\u0631\u0001\u0000\u0000\u0000"+
		"\u2971\u2972\u0005\u0146\u0000\u0000\u2972\u2973\u0003\u020c\u0106\u0000"+
		"\u2973\u2974\u0005^\u0000\u0000\u2974\u2975\u00055\u0000\u0000\u2975\u2976"+
		"\u0005\u0007\u0000\u0000\u2976\u297e\u0001\u0000\u0000\u0000\u2977\u297a"+
		"\u0005\u0132\u0000\u0000\u2978\u297b\u0003\u020c\u0106\u0000\u2979\u297b"+
		"\u0005\u001e\u0000\u0000\u297a\u2978\u0001\u0000\u0000\u0000\u297a\u2979"+
		"\u0001\u0000\u0000\u0000\u297b\u297c\u0001\u0000\u0000\u0000\u297c\u297e"+
		"\u0005\u0007\u0000\u0000\u297d\u2971\u0001\u0000\u0000\u0000\u297d\u2977"+
		"\u0001\u0000\u0000\u0000\u297e\u0633\u0001\u0000\u0000\u0000\u297f\u2982"+
		"\u0003\u055e\u02af\u0000\u2980\u2982\u0005\u001c\u0000\u0000\u2981\u297f"+
		"\u0001\u0000\u0000\u0000\u2981\u2980\u0001\u0000\u0000\u0000\u2982\u0635"+
		"\u0001\u0000\u0000\u0000\u2983\u2987\u0001\u0000\u0000\u0000\u2984\u2985"+
		"\u0005\u0205\u0000\u0000\u2985\u2987\u0003\u0638\u031c\u0000\u2986\u2983"+
		"\u0001\u0000\u0000\u0000\u2986\u2984\u0001\u0000\u0000\u0000\u2987\u0637"+
		"\u0001\u0000\u0000\u0000\u2988\u298a\u0003\u063a\u031d\u0000\u2989\u2988"+
		"\u0001\u0000\u0000\u0000\u298a\u298b\u0001\u0000\u0000\u0000\u298b\u2989"+
		"\u0001\u0000\u0000\u0000\u298b\u298c\u0001\u0000\u0000\u0000\u298c\u0639"+
		"\u0001\u0000\u0000\u0000\u298d\u298e\u0005f\u0000\u0000\u298e\u298f\u0003"+
		"\u063c\u031e\u0000\u298f\u2990\u0005]\u0000\u0000\u2990\u2991\u0003\u05ae"+
		"\u02d7\u0000\u2991\u063b\u0001\u0000\u0000\u0000\u2992\u2997\u0003\u063e"+
		"\u031f\u0000\u2993\u2994\u0005R\u0000\u0000\u2994\u2996\u0003\u063e\u031f"+
		"\u0000\u2995\u2993\u0001\u0000\u0000\u0000\u2996\u2999\u0001\u0000\u0000"+
		"\u0000\u2997\u2995\u0001\u0000\u0000\u0000\u2997\u2998\u0001\u0000\u0000"+
		"\u0000\u2998\u063d\u0001\u0000\u0000\u0000\u2999\u2997\u0001\u0000\u0000"+
		"\u0000\u299a\u299e\u0003\u0648\u0324\u0000\u299b\u299c\u0005\u01ff\u0000"+
		"\u0000\u299c\u299e\u0003\u0550\u02a8\u0000\u299d\u299a\u0001\u0000\u0000"+
		"\u0000\u299d\u299b\u0001\u0000\u0000\u0000\u299e\u063f\u0001\u0000\u0000"+
		"\u0000\u299f\u29a2\u0001\u0000\u0000\u0000\u29a0\u29a2\u0003\u058a\u02c5"+
		"\u0000\u29a1\u299f\u0001\u0000\u0000\u0000\u29a1\u29a0\u0001\u0000\u0000"+
		"\u0000\u29a2\u0641\u0001\u0000\u0000\u0000\u29a3\u29a6\u0001\u0000\u0000"+
		"\u0000\u29a4\u29a6\u0003\u058a\u02c5\u0000\u29a5\u29a3\u0001\u0000\u0000"+
		"\u0000\u29a5\u29a4\u0001\u0000\u0000\u0000\u29a6\u0643\u0001\u0000\u0000"+
		"\u0000\u29a7\u29aa\u0001\u0000\u0000\u0000\u29a8\u29aa\u0003\u0648\u0324"+
		"\u0000\u29a9\u29a7\u0001\u0000\u0000\u0000\u29a9\u29a8\u0001\u0000\u0000"+
		"\u0000\u29aa\u0645\u0001\u0000\u0000\u0000\u29ab\u29ac\u0005f\u0000\u0000"+
		"\u29ac\u29af\u0003\u0650\u0328\u0000\u29ad\u29af\u0001\u0000\u0000\u0000"+
		"\u29ae\u29ab\u0001\u0000\u0000\u0000\u29ae\u29ad\u0001\u0000\u0000\u0000"+
		"\u29af\u0647\u0001\u0000\u0000\u0000\u29b0\u29b3\u0003\u055e\u02af\u0000"+
		"\u29b1\u29b3\u0003\u064a\u0325\u0000\u29b2\u29b0\u0001\u0000\u0000\u0000"+
		"\u29b2\u29b1\u0001\u0000\u0000\u0000\u29b3\u0649\u0001\u0000\u0000\u0000"+
		"\u29b4\u29b5\u0007A\u0000\u0000\u29b5\u064b\u0001\u0000\u0000\u0000\u29b6"+
		"\u29b7\u0003\u0532\u0299\u0000\u29b7\u29b8\u0003\u03d8\u01ec\u0000\u29b8"+
		"\u29b9\u0003\u0420\u0210\u0000\u29b9\u29ba\u0003\u0448\u0224\u0000\u29ba"+
		"\u29bb\u0003\u0402\u0201\u0000\u29bb\u29bc\u0003\u0410\u0208\u0000\u29bc"+
		"\u29bd\u0003\u04da\u026d\u0000\u29bd\u064d\u0001\u0000\u0000\u0000\u29be"+
		"\u29bf\u0003\u064c\u0326\u0000\u29bf\u064f\u0001\u0000\u0000\u0000\u29c0"+
		"\u29c1\u0003\u064c\u0326\u0000\u29c1\u0651\u0001\u0000\u0000\u0000\u29c2"+
		"\u29c3\u0003\u048c\u0246\u0000\u29c3\u0653\u0001\u0000\u0000\u0000\u29c4"+
		"\u29c5\u0003\u048c\u0246\u0000\u29c5\u0655\u0001\u0000\u0000\u0000\u29c6"+
		"\u29c7\u0003\b\u0004\u0000\u29c7\u29c8\u0003\u0658\u032c\u0000\u29c8\u0657"+
		"\u0001\u0000\u0000\u0000\u29c9\u29ca\u0005G\u0000\u0000\u29ca\u29cb\u0003"+
		"\u03da\u01ed\u0000\u29cb\u29cc\u0003\u0620\u0310\u0000\u29cc\u29cf\u0001"+
		"\u0000\u0000\u0000\u29cd\u29cf\u0001\u0000\u0000\u0000\u29ce\u29c9\u0001"+
		"\u0000\u0000\u0000\u29ce\u29cd\u0001\u0000\u0000\u0000\u29cf\u0659\u0001"+
		"\u0000\u0000\u0000\u02eb\u0663\u0667\u06e7\u06eb\u06f8\u06fd\u0703\u0709"+
		"\u0718\u0724\u0736\u073b\u0745\u075d\u0764\u076a\u076f\u0778\u077c\u0788"+
		"\u07a7\u07ae\u07b6\u07bb\u07c2\u07c8\u07d9\u07de\u07e2\u07ef\u07f3\u07f8"+
		"\u07fd\u0809\u0812\u081f\u0824\u082f\u083a\u083f\u084a\u0855\u085e\u0868"+
		"\u0877\u0883\u0888\u088f\u089a\u099c\u09a3\u09a8\u09ad\u09b2\u09ba\u09c3"+
		"\u09ca\u09d4\u09d6\u09db\u09e1\u09e7\u09e9\u0a05\u0a0f\u0a1c\u0a28\u0a36"+
		"\u0a3b\u0a53\u0a59\u0a5e\u0a65\u0a6a\u0a90\u0a94\u0a9b\u0a9f\u0aa6\u0ab4"+
		"\u0abb\u0ac6\u0ae7\u0af1\u0af5\u0afc\u0b03\u0b0b\u0b11\u0b15\u0b1f\u0b26"+
		"\u0b31\u0b51\u0b59\u0b5e\u0b65\u0b6f\u0b79\u0b8d\u0b9c\u0bb5\u0bba\u0bc1"+
		"\u0bc8\u0bd3\u0bd8\u0bdf\u0bea\u0bf2\u0bfd\u0c0d\u0c15\u0c19\u0c27\u0c38"+
		"\u0c3d\u0c44\u0c4d\u0c50\u0c55\u0c5c\u0c67\u0c74\u0c81\u0c93\u0c96\u0c9f"+
		"\u0cae\u0cbd\u0cc6\u0ccd\u0cd4\u0cd9\u0cf7\u0cf9\u0cfd\u0d05\u0d0c\u0d1a"+
		"\u0d1e\u0d22\u0d27\u0d2d\u0d31\u0d35\u0d42\u0d48\u0d51\u0d5a\u0d64\u0d6f"+
		"\u0ddd\u0def\u0df4\u0df8\u0e09\u0e11\u0e18\u0e25\u0e2f\u0e51\u0e56\u0e5b"+
		"\u0e5f\u0e67\u0e69\u0ea3\u0eb4\u0ebc\u0ed3\u0ed7\u0eeb\u0f10\u0f19\u0f1e"+
		"\u0f23\u0f28\u0f2d\u0f62\u0f68\u0f6f\u0f79\u0f7e\u0f83\u0f95\u0f99\u0fa3"+
		"\u0fa9\u0faf\u0fb6\u0fbb\u0fc0\u0fce\u0fea\u0ff1\u0fff\u100e\u1083\u108e"+
		"\u1094\u109c\u10a7\u10b0\u10b7\u10df\u10e5\u10fa\u1116\u111a\u111f\u1128"+
		"\u112c\u1147\u114e\u115d\u1171\u1185\u11e2\u11fb\u1202\u1212\u121b\u1220"+
		"\u1226\u122d\u123b\u12d0\u12d4\u1331\u1336\u133a\u1340\u1384\u138a\u13a7"+
		"\u13b8\u13bf\u13cb\u1407\u140e\u1414\u141a\u1434\u143a\u1440\u144b\u1457"+
		"\u1474\u149b\u149f\u14a3\u14a7\u14ac\u14b3\u14c1\u14ce\u14d6\u14dd\u14e3"+
		"\u14e7\u14ec\u14f3\u1501\u1503\u150a\u150e\u1517\u151f\u1528\u152a\u152e"+
		"\u1537\u153c\u1542\u1547\u154b\u1550\u1556\u155c\u1562\u1568\u156d\u157c"+
		"\u1585\u1590\u1596\u15bd\u15c7\u15ce\u15d9\u15df\u15e9\u15f5\u15f9\u161f"+
		"\u162d\u163b\u1653\u165a\u1664\u1670\u1675\u1699\u16a0\u16af\u16de\u1703"+
		"\u170e\u171f\u18f5\u18f9\u18fe\u1939\u193d\u1a18\u1a27\u1a32\u1a39\u1afa"+
		"\u1b04\u1b0c\u1b29\u1b39\u1b63\u1b71\u1b87\u1b8e\u1b96\u1b9a\u1ba1\u1baa"+
		"\u1bb3\u1be7\u1bec\u1bf8\u1bfc\u1c01\u1c06\u1c0a\u1c0e\u1c13\u1c23\u1c2b"+
		"\u1c30\u1c3d\u1c42\u1c49\u1c53\u1c57\u1c62\u1c6d\u1c75\u1c7c\u1ca3\u1cab"+
		"\u1caf\u1d00\u1d1c\u1d21\u1d30\u1d3c\u1d43\u1d4d\u1d52\u1d56\u1d5a\u1d5e"+
		"\u1d62\u1d69\u1d73\u1d78\u1d8a\u1d95\u1d9c\u1da4\u1da9\u1db6\u1dbc\u1dd9"+
		"\u1de0\u1dec\u1df9\u1e08\u1e0e\u1e17\u1e27\u1e2a\u1e35\u1e3a\u1e3e\u1e42"+
		"\u1e47\u1e4a\u1e50\u1e54\u1e56\u1e59\u1e60\u1e63\u1e6a\u1e72\u1e75\u1e7e"+
		"\u1e8d\u1e9a\u1ea5\u1ea8\u1eac\u1eb2\u1ec2\u1ecf\u1ed9\u1eeb\u1eed\u1ef5"+
		"\u1ef9\u1f03\u1f0d\u1f18\u1f1a\u1f1e\u1f28\u1f38\u1f3a\u1f3f\u1f43\u1f49"+
		"\u1f50\u1f59\u1f68\u1f6c\u1f73\u1f76\u1f7a\u1f7d\u1f8a\u1f8e\u1f93\u1f9b"+
		"\u1f9f\u1fa3\u1fae\u1fb5\u1fbb\u1fbf\u1fc1\u1fc5\u1fcb\u1fd4\u1fda\u1fdc"+
		"\u1fde\u1fe5\u1fe9\u1ff2\u1ff6\u2000\u2007\u200f\u2027\u202d\u2031\u2036"+
		"\u203f\u2043\u2046\u204b\u2058\u205e\u2066\u2069\u2070\u2075\u208a\u2093"+
		"\u2098\u209e\u20a3\u20aa\u20af\u20b5\u20b7\u20bb\u20c2\u20c6\u20c9\u20d0"+
		"\u20d5\u20d8\u20df\u20e3\u20ec\u20f0\u20f8\u20fa\u2101\u2106\u2109\u2118"+
		"\u2124\u212e\u2137\u213c\u2141\u2148\u214b\u214f\u2156\u216e\u2177\u217d"+
		"\u2181\u2186\u2190\u2197\u21a0\u21a3\u21ac\u21ae\u21b4\u21b8\u21bd\u21cb"+
		"\u21cd\u21d3\u21d9\u21dc\u21e5\u21f7\u21fe\u2202\u2206\u2216\u221d\u2225"+
		"\u2229\u2230\u223d\u224d\u2253\u2259\u2260\u2265\u226b\u2272\u227a\u2282"+
		"\u2287\u228b\u2291\u2295\u2299\u229c\u22a2\u22a7\u22b7\u22ba\u22bc\u22c8"+
		"\u22ca\u22ce\u22d4\u22d9\u22e1\u22e5\u22ee\u22f6\u22fc\u22ff\u2308\u230d"+
		"\u2314\u231e\u2338\u2343\u2345\u2347\u234f\u2366\u236e\u2378\u2386\u2390"+
		"\u2394\u23a2\u23a9\u23b0\u23b7\u23d0\u23ed\u2414\u2416\u2432\u2447\u244e"+
		"\u245b\u2467\u246d\u2476\u2487\u2493\u249c\u24a1\u24a8\u24b2\u24b5\u24c0"+
		"\u24c6\u24d5\u24dd\u24e6\u24ef\u24f2\u24f7\u2500\u2505\u2513\u251d\u2525"+
		"\u2533\u253a\u2542\u254a\u2551\u2557\u2560\u2568\u2572\u257d\u2584\u25a2"+
		"\u25ab\u25b2\u25bd\u25c7\u25cb\u25cf\u25d4\u25dc\u25e0\u25e4\u25e9\u25ee"+
		"\u25f3\u25fa\u2602\u2605\u260c\u2611\u2618\u2628\u2637\u2645\u264a\u265d"+
		"\u2662\u2667\u266e\u2675\u267c\u2685\u268b\u2691\u2697\u269f\u26a8\u26e2"+
		"\u26f1\u2708\u2710\u2714\u2720\u2722\u2729\u2732\u2744\u274c\u2755\u275c"+
		"\u2766\u276c\u2773\u2778\u277e\u2782\u2789\u27a7\u27bb\u27bf\u27cf\u27d6"+
		"\u27e3\u27eb\u27ff\u2805\u2811\u2816\u2820\u2840\u2845\u284e\u2853\u2857"+
		"\u285c\u286c\u287e\u2881\u2887\u28a3\u28ad\u28b4\u28b6\u28bb\u28c6\u28d1"+
		"\u28e6\u28ed\u28f4\u28fa\u28fd\u2908\u290f\u2911\u291a\u2921\u2927\u292d"+
		"\u2931\u2940\u2951\u2953\u296b\u296f\u297a\u297d\u2981\u2986\u298b\u2997"+
		"\u299d\u29a1\u29a5\u29a9\u29ae\u29b2\u29ce";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3,
			_serializedATNSegment4
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}